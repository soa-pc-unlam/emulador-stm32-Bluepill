
freertos_qeue.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000448c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  0800459c  0800459c  0001459c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800464c  0800464c  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  0800464c  0800464c  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800464c  0800464c  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800464c  0800464c  0001464c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004650  08004650  00014650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08004654  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011ec  20000060  080046b4  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000124c  080046b4  0002124c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001095b  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c2e  00000000  00000000  00030a27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f90  00000000  00000000  00033658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c0e  00000000  00000000  000345e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000198b2  00000000  00000000  000351f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001329b  00000000  00000000  0004eaa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000927e9  00000000  00000000  00061d43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004480  00000000  00000000  000f452c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000091  00000000  00000000  000f89ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	08004584 	.word	0x08004584

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	08004584 	.word	0x08004584

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	; (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	; (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	; 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	2000007c 	.word	0x2000007c
 800017c:	2000011c 	.word	0x2000011c

08000180 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000180:	b580      	push	{r7, lr}
 8000182:	b088      	sub	sp, #32
 8000184:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000186:	f107 0310 	add.w	r3, r7, #16
 800018a:	2200      	movs	r2, #0
 800018c:	601a      	str	r2, [r3, #0]
 800018e:	605a      	str	r2, [r3, #4]
 8000190:	609a      	str	r2, [r3, #8]
 8000192:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000194:	4b1e      	ldr	r3, [pc, #120]	; (8000210 <MX_GPIO_Init+0x90>)
 8000196:	699b      	ldr	r3, [r3, #24]
 8000198:	4a1d      	ldr	r2, [pc, #116]	; (8000210 <MX_GPIO_Init+0x90>)
 800019a:	f043 0310 	orr.w	r3, r3, #16
 800019e:	6193      	str	r3, [r2, #24]
 80001a0:	4b1b      	ldr	r3, [pc, #108]	; (8000210 <MX_GPIO_Init+0x90>)
 80001a2:	699b      	ldr	r3, [r3, #24]
 80001a4:	f003 0310 	and.w	r3, r3, #16
 80001a8:	60fb      	str	r3, [r7, #12]
 80001aa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80001ac:	4b18      	ldr	r3, [pc, #96]	; (8000210 <MX_GPIO_Init+0x90>)
 80001ae:	699b      	ldr	r3, [r3, #24]
 80001b0:	4a17      	ldr	r2, [pc, #92]	; (8000210 <MX_GPIO_Init+0x90>)
 80001b2:	f043 0320 	orr.w	r3, r3, #32
 80001b6:	6193      	str	r3, [r2, #24]
 80001b8:	4b15      	ldr	r3, [pc, #84]	; (8000210 <MX_GPIO_Init+0x90>)
 80001ba:	699b      	ldr	r3, [r3, #24]
 80001bc:	f003 0320 	and.w	r3, r3, #32
 80001c0:	60bb      	str	r3, [r7, #8]
 80001c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001c4:	4b12      	ldr	r3, [pc, #72]	; (8000210 <MX_GPIO_Init+0x90>)
 80001c6:	699b      	ldr	r3, [r3, #24]
 80001c8:	4a11      	ldr	r2, [pc, #68]	; (8000210 <MX_GPIO_Init+0x90>)
 80001ca:	f043 0304 	orr.w	r3, r3, #4
 80001ce:	6193      	str	r3, [r2, #24]
 80001d0:	4b0f      	ldr	r3, [pc, #60]	; (8000210 <MX_GPIO_Init+0x90>)
 80001d2:	699b      	ldr	r3, [r3, #24]
 80001d4:	f003 0304 	and.w	r3, r3, #4
 80001d8:	607b      	str	r3, [r7, #4]
 80001da:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80001dc:	2200      	movs	r2, #0
 80001de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001e2:	480c      	ldr	r0, [pc, #48]	; (8000214 <MX_GPIO_Init+0x94>)
 80001e4:	f000 fd50 	bl	8000c88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80001e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001ee:	2301      	movs	r3, #1
 80001f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001f2:	2300      	movs	r3, #0
 80001f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001f6:	2302      	movs	r3, #2
 80001f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80001fa:	f107 0310 	add.w	r3, r7, #16
 80001fe:	4619      	mov	r1, r3
 8000200:	4804      	ldr	r0, [pc, #16]	; (8000214 <MX_GPIO_Init+0x94>)
 8000202:	f000 fbbd 	bl	8000980 <HAL_GPIO_Init>

}
 8000206:	bf00      	nop
 8000208:	3720      	adds	r7, #32
 800020a:	46bd      	mov	sp, r7
 800020c:	bd80      	pop	{r7, pc}
 800020e:	bf00      	nop
 8000210:	40021000 	.word	0x40021000
 8000214:	40011000 	.word	0x40011000

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b084      	sub	sp, #16
 800021c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021e:	f000 fa9d 	bl	800075c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000222:	f000 f82f 	bl	8000284 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000226:	f7ff ffab 	bl	8000180 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800022a:	f000 f9fb 	bl	8000624 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  chat_Qeue= xQueueCreate(20,sizeof(int));
 800022e:	2200      	movs	r2, #0
 8000230:	2104      	movs	r1, #4
 8000232:	2014      	movs	r0, #20
 8000234:	f001 feb2 	bl	8001f9c <xQueueGenericCreate>
 8000238:	4603      	mov	r3, r0
 800023a:	4a0d      	ldr	r2, [pc, #52]	; (8000270 <main+0x58>)
 800023c:	6013      	str	r3, [r2, #0]

  xTaskCreate(producter, "producter", 256, NULL, 1,&xHandler_Producter);
 800023e:	1d3b      	adds	r3, r7, #4
 8000240:	9301      	str	r3, [sp, #4]
 8000242:	2301      	movs	r3, #1
 8000244:	9300      	str	r3, [sp, #0]
 8000246:	2300      	movs	r3, #0
 8000248:	f44f 7280 	mov.w	r2, #256	; 0x100
 800024c:	4909      	ldr	r1, [pc, #36]	; (8000274 <main+0x5c>)
 800024e:	480a      	ldr	r0, [pc, #40]	; (8000278 <main+0x60>)
 8000250:	f002 fa4c 	bl	80026ec <xTaskCreate>
  xTaskCreate(consumer, "consumer", 256, NULL, 1,&xHandler_Consumer);
 8000254:	463b      	mov	r3, r7
 8000256:	9301      	str	r3, [sp, #4]
 8000258:	2301      	movs	r3, #1
 800025a:	9300      	str	r3, [sp, #0]
 800025c:	2300      	movs	r3, #0
 800025e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000262:	4906      	ldr	r1, [pc, #24]	; (800027c <main+0x64>)
 8000264:	4806      	ldr	r0, [pc, #24]	; (8000280 <main+0x68>)
 8000266:	f002 fa41 	bl	80026ec <xTaskCreate>

  vTaskStartScheduler();
 800026a:	f002 fbb9 	bl	80029e0 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800026e:	e7fe      	b.n	800026e <main+0x56>
 8000270:	2000031c 	.word	0x2000031c
 8000274:	0800459c 	.word	0x0800459c
 8000278:	080002fd 	.word	0x080002fd
 800027c:	080045a8 	.word	0x080045a8
 8000280:	0800033d 	.word	0x0800033d

08000284 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b090      	sub	sp, #64	; 0x40
 8000288:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800028a:	f107 0318 	add.w	r3, r7, #24
 800028e:	2228      	movs	r2, #40	; 0x28
 8000290:	2100      	movs	r1, #0
 8000292:	4618      	mov	r0, r3
 8000294:	f003 fc8e 	bl	8003bb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000298:	1d3b      	adds	r3, r7, #4
 800029a:	2200      	movs	r2, #0
 800029c:	601a      	str	r2, [r3, #0]
 800029e:	605a      	str	r2, [r3, #4]
 80002a0:	609a      	str	r2, [r3, #8]
 80002a2:	60da      	str	r2, [r3, #12]
 80002a4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002a6:	2302      	movs	r3, #2
 80002a8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002aa:	2301      	movs	r3, #1
 80002ac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ae:	2310      	movs	r3, #16
 80002b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002b2:	2300      	movs	r3, #0
 80002b4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002b6:	f107 0318 	add.w	r3, r7, #24
 80002ba:	4618      	mov	r0, r3
 80002bc:	f000 fcfc 	bl	8000cb8 <HAL_RCC_OscConfig>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d001      	beq.n	80002ca <SystemClock_Config+0x46>
  {
    Error_Handler();
 80002c6:	f000 f898 	bl	80003fa <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ca:	230f      	movs	r3, #15
 80002cc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002ce:	2300      	movs	r3, #0
 80002d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002d2:	2300      	movs	r3, #0
 80002d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002d6:	2300      	movs	r3, #0
 80002d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002da:	2300      	movs	r3, #0
 80002dc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002de:	1d3b      	adds	r3, r7, #4
 80002e0:	2100      	movs	r1, #0
 80002e2:	4618      	mov	r0, r3
 80002e4:	f000 ff6a 	bl	80011bc <HAL_RCC_ClockConfig>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d001      	beq.n	80002f2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002ee:	f000 f884 	bl	80003fa <Error_Handler>
  }
}
 80002f2:	bf00      	nop
 80002f4:	3740      	adds	r7, #64	; 0x40
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}
	...

080002fc <producter>:

/* USER CODE BEGIN 4 */
void producter( void * Parameters)
{	int counter=0;
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b084      	sub	sp, #16
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
 8000304:	2300      	movs	r3, #0
 8000306:	60fb      	str	r3, [r7, #12]


	while(1)
	{
		myPrintf("productor envia: %d\r\n",counter);
 8000308:	68fb      	ldr	r3, [r7, #12]
 800030a:	4619      	mov	r1, r3
 800030c:	4809      	ldr	r0, [pc, #36]	; (8000334 <producter+0x38>)
 800030e:	f000 f835 	bl	800037c <myPrintf>
		xQueueSendToBack(chat_Qeue,(void *)&counter,10);
 8000312:	4b09      	ldr	r3, [pc, #36]	; (8000338 <producter+0x3c>)
 8000314:	6818      	ldr	r0, [r3, #0]
 8000316:	f107 010c 	add.w	r1, r7, #12
 800031a:	2300      	movs	r3, #0
 800031c:	220a      	movs	r2, #10
 800031e:	f001 fe9b 	bl	8002058 <xQueueGenericSend>
		counter++;
 8000322:	68fb      	ldr	r3, [r7, #12]
 8000324:	3301      	adds	r3, #1
 8000326:	60fb      	str	r3, [r7, #12]

		vTaskDelay(1000);
 8000328:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800032c:	f002 fb24 	bl	8002978 <vTaskDelay>
		myPrintf("productor envia: %d\r\n",counter);
 8000330:	e7ea      	b.n	8000308 <producter+0xc>
 8000332:	bf00      	nop
 8000334:	080045b4 	.word	0x080045b4
 8000338:	2000031c 	.word	0x2000031c

0800033c <consumer>:
	}
}

void consumer( void * Parameters)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b084      	sub	sp, #16
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
	int counter=0;
 8000344:	2300      	movs	r3, #0
 8000346:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		while(!xQueueReceive(chat_Qeue,(void *)&counter ,0));
 8000348:	bf00      	nop
 800034a:	4b0a      	ldr	r3, [pc, #40]	; (8000374 <consumer+0x38>)
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	f107 010c 	add.w	r1, r7, #12
 8000352:	2200      	movs	r2, #0
 8000354:	4618      	mov	r0, r3
 8000356:	f001 ff7d 	bl	8002254 <xQueueReceive>
 800035a:	4603      	mov	r3, r0
 800035c:	2b00      	cmp	r3, #0
 800035e:	d0f4      	beq.n	800034a <consumer+0xe>

		myPrintf("consumidor recibio:%d\r\n",counter);
 8000360:	68fb      	ldr	r3, [r7, #12]
 8000362:	4619      	mov	r1, r3
 8000364:	4804      	ldr	r0, [pc, #16]	; (8000378 <consumer+0x3c>)
 8000366:	f000 f809 	bl	800037c <myPrintf>
		vTaskDelay(1000);
 800036a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800036e:	f002 fb03 	bl	8002978 <vTaskDelay>
		while(!xQueueReceive(chat_Qeue,(void *)&counter ,0));
 8000372:	e7e9      	b.n	8000348 <consumer+0xc>
 8000374:	2000031c 	.word	0x2000031c
 8000378:	080045cc 	.word	0x080045cc

0800037c <myPrintf>:

	}
}

uint8_t myPrintf(const char *fmt, ...) // custom printf() function
{
 800037c:	b40f      	push	{r0, r1, r2, r3}
 800037e:	b580      	push	{r7, lr}
 8000380:	b09c      	sub	sp, #112	; 0x70
 8000382:	af00      	add	r7, sp, #0

	char msg[SIZE_MSG_UART_TO_SEND]={0};
 8000384:	2300      	movs	r3, #0
 8000386:	60bb      	str	r3, [r7, #8]
 8000388:	f107 030c 	add.w	r3, r7, #12
 800038c:	2260      	movs	r2, #96	; 0x60
 800038e:	2100      	movs	r1, #0
 8000390:	4618      	mov	r0, r3
 8000392:	f003 fc0f 	bl	8003bb4 <memset>
	uint8_t result=0;
 8000396:	2300      	movs	r3, #0
 8000398:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	va_list argp;
    va_start(argp, fmt);
 800039c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80003a0:	607b      	str	r3, [r7, #4]

    //con vsnprintf se arma el msg sin peligro de producir oveflow
    //debido a que se la cadena orignr es mas grande que el destino
    //trunca al mensaje.
    result=vsnprintf(msg, sizeof(msg),fmt,argp);
 80003a2:	f107 0008 	add.w	r0, r7, #8
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80003aa:	2164      	movs	r1, #100	; 0x64
 80003ac:	f003 fbf4 	bl	8003b98 <vsniprintf>
 80003b0:	4603      	mov	r3, r0
 80003b2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    HAL_UART_Transmit(&huart1, msg, sizeof(msg), 100);
 80003b6:	f107 0108 	add.w	r1, r7, #8
 80003ba:	2364      	movs	r3, #100	; 0x64
 80003bc:	2264      	movs	r2, #100	; 0x64
 80003be:	4806      	ldr	r0, [pc, #24]	; (80003d8 <myPrintf+0x5c>)
 80003c0:	f001 fb54 	bl	8001a6c <HAL_UART_Transmit>
    va_end(argp);

    return result;
 80003c4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80003c8:	4618      	mov	r0, r3
 80003ca:	3770      	adds	r7, #112	; 0x70
 80003cc:	46bd      	mov	sp, r7
 80003ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80003d2:	b004      	add	sp, #16
 80003d4:	4770      	bx	lr
 80003d6:	bf00      	nop
 80003d8:	2000036c 	.word	0x2000036c

080003dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b082      	sub	sp, #8
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80003ec:	d101      	bne.n	80003f2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80003ee:	f000 f9cb 	bl	8000788 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80003f2:	bf00      	nop
 80003f4:	3708      	adds	r7, #8
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd80      	pop	{r7, pc}

080003fa <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003fa:	b480      	push	{r7}
 80003fc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003fe:	b672      	cpsid	i
}
 8000400:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000402:	e7fe      	b.n	8000402 <Error_Handler+0x8>

08000404 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b084      	sub	sp, #16
 8000408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800040a:	4b18      	ldr	r3, [pc, #96]	; (800046c <HAL_MspInit+0x68>)
 800040c:	699b      	ldr	r3, [r3, #24]
 800040e:	4a17      	ldr	r2, [pc, #92]	; (800046c <HAL_MspInit+0x68>)
 8000410:	f043 0301 	orr.w	r3, r3, #1
 8000414:	6193      	str	r3, [r2, #24]
 8000416:	4b15      	ldr	r3, [pc, #84]	; (800046c <HAL_MspInit+0x68>)
 8000418:	699b      	ldr	r3, [r3, #24]
 800041a:	f003 0301 	and.w	r3, r3, #1
 800041e:	60bb      	str	r3, [r7, #8]
 8000420:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000422:	4b12      	ldr	r3, [pc, #72]	; (800046c <HAL_MspInit+0x68>)
 8000424:	69db      	ldr	r3, [r3, #28]
 8000426:	4a11      	ldr	r2, [pc, #68]	; (800046c <HAL_MspInit+0x68>)
 8000428:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800042c:	61d3      	str	r3, [r2, #28]
 800042e:	4b0f      	ldr	r3, [pc, #60]	; (800046c <HAL_MspInit+0x68>)
 8000430:	69db      	ldr	r3, [r3, #28]
 8000432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000436:	607b      	str	r3, [r7, #4]
 8000438:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800043a:	2200      	movs	r2, #0
 800043c:	210f      	movs	r1, #15
 800043e:	f06f 0001 	mvn.w	r0, #1
 8000442:	f000 fa72 	bl	800092a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000446:	4b0a      	ldr	r3, [pc, #40]	; (8000470 <HAL_MspInit+0x6c>)
 8000448:	685b      	ldr	r3, [r3, #4]
 800044a:	60fb      	str	r3, [r7, #12]
 800044c:	68fb      	ldr	r3, [r7, #12]
 800044e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000452:	60fb      	str	r3, [r7, #12]
 8000454:	68fb      	ldr	r3, [r7, #12]
 8000456:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800045a:	60fb      	str	r3, [r7, #12]
 800045c:	4a04      	ldr	r2, [pc, #16]	; (8000470 <HAL_MspInit+0x6c>)
 800045e:	68fb      	ldr	r3, [r7, #12]
 8000460:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000462:	bf00      	nop
 8000464:	3710      	adds	r7, #16
 8000466:	46bd      	mov	sp, r7
 8000468:	bd80      	pop	{r7, pc}
 800046a:	bf00      	nop
 800046c:	40021000 	.word	0x40021000
 8000470:	40010000 	.word	0x40010000

08000474 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b08e      	sub	sp, #56	; 0x38
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800047c:	2300      	movs	r3, #0
 800047e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000480:	2300      	movs	r3, #0
 8000482:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000484:	2300      	movs	r3, #0
 8000486:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800048a:	4b34      	ldr	r3, [pc, #208]	; (800055c <HAL_InitTick+0xe8>)
 800048c:	69db      	ldr	r3, [r3, #28]
 800048e:	4a33      	ldr	r2, [pc, #204]	; (800055c <HAL_InitTick+0xe8>)
 8000490:	f043 0301 	orr.w	r3, r3, #1
 8000494:	61d3      	str	r3, [r2, #28]
 8000496:	4b31      	ldr	r3, [pc, #196]	; (800055c <HAL_InitTick+0xe8>)
 8000498:	69db      	ldr	r3, [r3, #28]
 800049a:	f003 0301 	and.w	r3, r3, #1
 800049e:	60fb      	str	r3, [r7, #12]
 80004a0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80004a2:	f107 0210 	add.w	r2, r7, #16
 80004a6:	f107 0314 	add.w	r3, r7, #20
 80004aa:	4611      	mov	r1, r2
 80004ac:	4618      	mov	r0, r3
 80004ae:	f000 fff5 	bl	800149c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80004b2:	6a3b      	ldr	r3, [r7, #32]
 80004b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80004b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d103      	bne.n	80004c4 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80004bc:	f000 ffc6 	bl	800144c <HAL_RCC_GetPCLK1Freq>
 80004c0:	6378      	str	r0, [r7, #52]	; 0x34
 80004c2:	e004      	b.n	80004ce <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80004c4:	f000 ffc2 	bl	800144c <HAL_RCC_GetPCLK1Freq>
 80004c8:	4603      	mov	r3, r0
 80004ca:	005b      	lsls	r3, r3, #1
 80004cc:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80004ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80004d0:	4a23      	ldr	r2, [pc, #140]	; (8000560 <HAL_InitTick+0xec>)
 80004d2:	fba2 2303 	umull	r2, r3, r2, r3
 80004d6:	0c9b      	lsrs	r3, r3, #18
 80004d8:	3b01      	subs	r3, #1
 80004da:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80004dc:	4b21      	ldr	r3, [pc, #132]	; (8000564 <HAL_InitTick+0xf0>)
 80004de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004e2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80004e4:	4b1f      	ldr	r3, [pc, #124]	; (8000564 <HAL_InitTick+0xf0>)
 80004e6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80004ea:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80004ec:	4a1d      	ldr	r2, [pc, #116]	; (8000564 <HAL_InitTick+0xf0>)
 80004ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80004f0:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80004f2:	4b1c      	ldr	r3, [pc, #112]	; (8000564 <HAL_InitTick+0xf0>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004f8:	4b1a      	ldr	r3, [pc, #104]	; (8000564 <HAL_InitTick+0xf0>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004fe:	4b19      	ldr	r3, [pc, #100]	; (8000564 <HAL_InitTick+0xf0>)
 8000500:	2200      	movs	r2, #0
 8000502:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8000504:	4817      	ldr	r0, [pc, #92]	; (8000564 <HAL_InitTick+0xf0>)
 8000506:	f001 f817 	bl	8001538 <HAL_TIM_Base_Init>
 800050a:	4603      	mov	r3, r0
 800050c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000510:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000514:	2b00      	cmp	r3, #0
 8000516:	d11b      	bne.n	8000550 <HAL_InitTick+0xdc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000518:	4812      	ldr	r0, [pc, #72]	; (8000564 <HAL_InitTick+0xf0>)
 800051a:	f001 f865 	bl	80015e8 <HAL_TIM_Base_Start_IT>
 800051e:	4603      	mov	r3, r0
 8000520:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000524:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000528:	2b00      	cmp	r3, #0
 800052a:	d111      	bne.n	8000550 <HAL_InitTick+0xdc>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800052c:	201c      	movs	r0, #28
 800052e:	f000 fa18 	bl	8000962 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	2b0f      	cmp	r3, #15
 8000536:	d808      	bhi.n	800054a <HAL_InitTick+0xd6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000538:	2200      	movs	r2, #0
 800053a:	6879      	ldr	r1, [r7, #4]
 800053c:	201c      	movs	r0, #28
 800053e:	f000 f9f4 	bl	800092a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000542:	4a09      	ldr	r2, [pc, #36]	; (8000568 <HAL_InitTick+0xf4>)
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	6013      	str	r3, [r2, #0]
 8000548:	e002      	b.n	8000550 <HAL_InitTick+0xdc>
      }
      else
      {
        status = HAL_ERROR;
 800054a:	2301      	movs	r3, #1
 800054c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000550:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000554:	4618      	mov	r0, r3
 8000556:	3738      	adds	r7, #56	; 0x38
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}
 800055c:	40021000 	.word	0x40021000
 8000560:	431bde83 	.word	0x431bde83
 8000564:	20000320 	.word	0x20000320
 8000568:	20000004 	.word	0x20000004

0800056c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000570:	e7fe      	b.n	8000570 <NMI_Handler+0x4>

08000572 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000572:	b480      	push	{r7}
 8000574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000576:	e7fe      	b.n	8000576 <HardFault_Handler+0x4>

08000578 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800057c:	e7fe      	b.n	800057c <MemManage_Handler+0x4>

0800057e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800057e:	b480      	push	{r7}
 8000580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000582:	e7fe      	b.n	8000582 <BusFault_Handler+0x4>

08000584 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000588:	e7fe      	b.n	8000588 <UsageFault_Handler+0x4>

0800058a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800058a:	b480      	push	{r7}
 800058c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800058e:	bf00      	nop
 8000590:	46bd      	mov	sp, r7
 8000592:	bc80      	pop	{r7}
 8000594:	4770      	bx	lr
	...

08000598 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800059c:	4802      	ldr	r0, [pc, #8]	; (80005a8 <TIM2_IRQHandler+0x10>)
 800059e:	f001 f875 	bl	800168c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80005a2:	bf00      	nop
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	20000320 	.word	0x20000320

080005ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b086      	sub	sp, #24
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005b4:	4a14      	ldr	r2, [pc, #80]	; (8000608 <_sbrk+0x5c>)
 80005b6:	4b15      	ldr	r3, [pc, #84]	; (800060c <_sbrk+0x60>)
 80005b8:	1ad3      	subs	r3, r2, r3
 80005ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005bc:	697b      	ldr	r3, [r7, #20]
 80005be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005c0:	4b13      	ldr	r3, [pc, #76]	; (8000610 <_sbrk+0x64>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d102      	bne.n	80005ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005c8:	4b11      	ldr	r3, [pc, #68]	; (8000610 <_sbrk+0x64>)
 80005ca:	4a12      	ldr	r2, [pc, #72]	; (8000614 <_sbrk+0x68>)
 80005cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005ce:	4b10      	ldr	r3, [pc, #64]	; (8000610 <_sbrk+0x64>)
 80005d0:	681a      	ldr	r2, [r3, #0]
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	4413      	add	r3, r2
 80005d6:	693a      	ldr	r2, [r7, #16]
 80005d8:	429a      	cmp	r2, r3
 80005da:	d207      	bcs.n	80005ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005dc:	f003 fb48 	bl	8003c70 <__errno>
 80005e0:	4603      	mov	r3, r0
 80005e2:	220c      	movs	r2, #12
 80005e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005e6:	f04f 33ff 	mov.w	r3, #4294967295
 80005ea:	e009      	b.n	8000600 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005ec:	4b08      	ldr	r3, [pc, #32]	; (8000610 <_sbrk+0x64>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005f2:	4b07      	ldr	r3, [pc, #28]	; (8000610 <_sbrk+0x64>)
 80005f4:	681a      	ldr	r2, [r3, #0]
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	4413      	add	r3, r2
 80005fa:	4a05      	ldr	r2, [pc, #20]	; (8000610 <_sbrk+0x64>)
 80005fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005fe:	68fb      	ldr	r3, [r7, #12]
}
 8000600:	4618      	mov	r0, r3
 8000602:	3718      	adds	r7, #24
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	20005000 	.word	0x20005000
 800060c:	00000400 	.word	0x00000400
 8000610:	20000368 	.word	0x20000368
 8000614:	20001250 	.word	0x20001250

08000618 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800061c:	bf00      	nop
 800061e:	46bd      	mov	sp, r7
 8000620:	bc80      	pop	{r7}
 8000622:	4770      	bx	lr

08000624 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000628:	4b11      	ldr	r3, [pc, #68]	; (8000670 <MX_USART1_UART_Init+0x4c>)
 800062a:	4a12      	ldr	r2, [pc, #72]	; (8000674 <MX_USART1_UART_Init+0x50>)
 800062c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800062e:	4b10      	ldr	r3, [pc, #64]	; (8000670 <MX_USART1_UART_Init+0x4c>)
 8000630:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000634:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000636:	4b0e      	ldr	r3, [pc, #56]	; (8000670 <MX_USART1_UART_Init+0x4c>)
 8000638:	2200      	movs	r2, #0
 800063a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800063c:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <MX_USART1_UART_Init+0x4c>)
 800063e:	2200      	movs	r2, #0
 8000640:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000642:	4b0b      	ldr	r3, [pc, #44]	; (8000670 <MX_USART1_UART_Init+0x4c>)
 8000644:	2200      	movs	r2, #0
 8000646:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000648:	4b09      	ldr	r3, [pc, #36]	; (8000670 <MX_USART1_UART_Init+0x4c>)
 800064a:	220c      	movs	r2, #12
 800064c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800064e:	4b08      	ldr	r3, [pc, #32]	; (8000670 <MX_USART1_UART_Init+0x4c>)
 8000650:	2200      	movs	r2, #0
 8000652:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000654:	4b06      	ldr	r3, [pc, #24]	; (8000670 <MX_USART1_UART_Init+0x4c>)
 8000656:	2200      	movs	r2, #0
 8000658:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800065a:	4805      	ldr	r0, [pc, #20]	; (8000670 <MX_USART1_UART_Init+0x4c>)
 800065c:	f001 f9b6 	bl	80019cc <HAL_UART_Init>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000666:	f7ff fec8 	bl	80003fa <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800066a:	bf00      	nop
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	2000036c 	.word	0x2000036c
 8000674:	40013800 	.word	0x40013800

08000678 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b088      	sub	sp, #32
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000680:	f107 0310 	add.w	r3, r7, #16
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	605a      	str	r2, [r3, #4]
 800068a:	609a      	str	r2, [r3, #8]
 800068c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	4a1c      	ldr	r2, [pc, #112]	; (8000704 <HAL_UART_MspInit+0x8c>)
 8000694:	4293      	cmp	r3, r2
 8000696:	d131      	bne.n	80006fc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000698:	4b1b      	ldr	r3, [pc, #108]	; (8000708 <HAL_UART_MspInit+0x90>)
 800069a:	699b      	ldr	r3, [r3, #24]
 800069c:	4a1a      	ldr	r2, [pc, #104]	; (8000708 <HAL_UART_MspInit+0x90>)
 800069e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a2:	6193      	str	r3, [r2, #24]
 80006a4:	4b18      	ldr	r3, [pc, #96]	; (8000708 <HAL_UART_MspInit+0x90>)
 80006a6:	699b      	ldr	r3, [r3, #24]
 80006a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006ac:	60fb      	str	r3, [r7, #12]
 80006ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b0:	4b15      	ldr	r3, [pc, #84]	; (8000708 <HAL_UART_MspInit+0x90>)
 80006b2:	699b      	ldr	r3, [r3, #24]
 80006b4:	4a14      	ldr	r2, [pc, #80]	; (8000708 <HAL_UART_MspInit+0x90>)
 80006b6:	f043 0304 	orr.w	r3, r3, #4
 80006ba:	6193      	str	r3, [r2, #24]
 80006bc:	4b12      	ldr	r3, [pc, #72]	; (8000708 <HAL_UART_MspInit+0x90>)
 80006be:	699b      	ldr	r3, [r3, #24]
 80006c0:	f003 0304 	and.w	r3, r3, #4
 80006c4:	60bb      	str	r3, [r7, #8]
 80006c6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80006c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006cc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ce:	2302      	movs	r3, #2
 80006d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006d2:	2303      	movs	r3, #3
 80006d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d6:	f107 0310 	add.w	r3, r7, #16
 80006da:	4619      	mov	r1, r3
 80006dc:	480b      	ldr	r0, [pc, #44]	; (800070c <HAL_UART_MspInit+0x94>)
 80006de:	f000 f94f 	bl	8000980 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80006e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006e8:	2300      	movs	r3, #0
 80006ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ec:	2300      	movs	r3, #0
 80006ee:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f0:	f107 0310 	add.w	r3, r7, #16
 80006f4:	4619      	mov	r1, r3
 80006f6:	4805      	ldr	r0, [pc, #20]	; (800070c <HAL_UART_MspInit+0x94>)
 80006f8:	f000 f942 	bl	8000980 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80006fc:	bf00      	nop
 80006fe:	3720      	adds	r7, #32
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	40013800 	.word	0x40013800
 8000708:	40021000 	.word	0x40021000
 800070c:	40010800 	.word	0x40010800

08000710 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000710:	f7ff ff82 	bl	8000618 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000714:	480b      	ldr	r0, [pc, #44]	; (8000744 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000716:	490c      	ldr	r1, [pc, #48]	; (8000748 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000718:	4a0c      	ldr	r2, [pc, #48]	; (800074c <LoopFillZerobss+0x16>)
  movs r3, #0
 800071a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800071c:	e002      	b.n	8000724 <LoopCopyDataInit>

0800071e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800071e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000720:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000722:	3304      	adds	r3, #4

08000724 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000724:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000726:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000728:	d3f9      	bcc.n	800071e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800072a:	4a09      	ldr	r2, [pc, #36]	; (8000750 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800072c:	4c09      	ldr	r4, [pc, #36]	; (8000754 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800072e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000730:	e001      	b.n	8000736 <LoopFillZerobss>

08000732 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000732:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000734:	3204      	adds	r2, #4

08000736 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000736:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000738:	d3fb      	bcc.n	8000732 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800073a:	f003 fa9f 	bl	8003c7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800073e:	f7ff fd6b 	bl	8000218 <main>
  bx lr
 8000742:	4770      	bx	lr
  ldr r0, =_sdata
 8000744:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000748:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800074c:	08004654 	.word	0x08004654
  ldr r2, =_sbss
 8000750:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000754:	2000124c 	.word	0x2000124c

08000758 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000758:	e7fe      	b.n	8000758 <ADC1_2_IRQHandler>
	...

0800075c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000760:	4b08      	ldr	r3, [pc, #32]	; (8000784 <HAL_Init+0x28>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a07      	ldr	r2, [pc, #28]	; (8000784 <HAL_Init+0x28>)
 8000766:	f043 0310 	orr.w	r3, r3, #16
 800076a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800076c:	2003      	movs	r0, #3
 800076e:	f000 f8d1 	bl	8000914 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000772:	200f      	movs	r0, #15
 8000774:	f7ff fe7e 	bl	8000474 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000778:	f7ff fe44 	bl	8000404 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800077c:	2300      	movs	r3, #0
}
 800077e:	4618      	mov	r0, r3
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	40022000 	.word	0x40022000

08000788 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800078c:	4b05      	ldr	r3, [pc, #20]	; (80007a4 <HAL_IncTick+0x1c>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	461a      	mov	r2, r3
 8000792:	4b05      	ldr	r3, [pc, #20]	; (80007a8 <HAL_IncTick+0x20>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	4413      	add	r3, r2
 8000798:	4a03      	ldr	r2, [pc, #12]	; (80007a8 <HAL_IncTick+0x20>)
 800079a:	6013      	str	r3, [r2, #0]
}
 800079c:	bf00      	nop
 800079e:	46bd      	mov	sp, r7
 80007a0:	bc80      	pop	{r7}
 80007a2:	4770      	bx	lr
 80007a4:	20000008 	.word	0x20000008
 80007a8:	200003b4 	.word	0x200003b4

080007ac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  return uwTick;
 80007b0:	4b02      	ldr	r3, [pc, #8]	; (80007bc <HAL_GetTick+0x10>)
 80007b2:	681b      	ldr	r3, [r3, #0]
}
 80007b4:	4618      	mov	r0, r3
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bc80      	pop	{r7}
 80007ba:	4770      	bx	lr
 80007bc:	200003b4 	.word	0x200003b4

080007c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b085      	sub	sp, #20
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	f003 0307 	and.w	r3, r3, #7
 80007ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007d0:	4b0c      	ldr	r3, [pc, #48]	; (8000804 <__NVIC_SetPriorityGrouping+0x44>)
 80007d2:	68db      	ldr	r3, [r3, #12]
 80007d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007d6:	68ba      	ldr	r2, [r7, #8]
 80007d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007dc:	4013      	ands	r3, r2
 80007de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007f2:	4a04      	ldr	r2, [pc, #16]	; (8000804 <__NVIC_SetPriorityGrouping+0x44>)
 80007f4:	68bb      	ldr	r3, [r7, #8]
 80007f6:	60d3      	str	r3, [r2, #12]
}
 80007f8:	bf00      	nop
 80007fa:	3714      	adds	r7, #20
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bc80      	pop	{r7}
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	e000ed00 	.word	0xe000ed00

08000808 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800080c:	4b04      	ldr	r3, [pc, #16]	; (8000820 <__NVIC_GetPriorityGrouping+0x18>)
 800080e:	68db      	ldr	r3, [r3, #12]
 8000810:	0a1b      	lsrs	r3, r3, #8
 8000812:	f003 0307 	and.w	r3, r3, #7
}
 8000816:	4618      	mov	r0, r3
 8000818:	46bd      	mov	sp, r7
 800081a:	bc80      	pop	{r7}
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	e000ed00 	.word	0xe000ed00

08000824 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	4603      	mov	r3, r0
 800082c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800082e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000832:	2b00      	cmp	r3, #0
 8000834:	db0b      	blt.n	800084e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000836:	79fb      	ldrb	r3, [r7, #7]
 8000838:	f003 021f 	and.w	r2, r3, #31
 800083c:	4906      	ldr	r1, [pc, #24]	; (8000858 <__NVIC_EnableIRQ+0x34>)
 800083e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000842:	095b      	lsrs	r3, r3, #5
 8000844:	2001      	movs	r0, #1
 8000846:	fa00 f202 	lsl.w	r2, r0, r2
 800084a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800084e:	bf00      	nop
 8000850:	370c      	adds	r7, #12
 8000852:	46bd      	mov	sp, r7
 8000854:	bc80      	pop	{r7}
 8000856:	4770      	bx	lr
 8000858:	e000e100 	.word	0xe000e100

0800085c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
 8000862:	4603      	mov	r3, r0
 8000864:	6039      	str	r1, [r7, #0]
 8000866:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000868:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800086c:	2b00      	cmp	r3, #0
 800086e:	db0a      	blt.n	8000886 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	b2da      	uxtb	r2, r3
 8000874:	490c      	ldr	r1, [pc, #48]	; (80008a8 <__NVIC_SetPriority+0x4c>)
 8000876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800087a:	0112      	lsls	r2, r2, #4
 800087c:	b2d2      	uxtb	r2, r2
 800087e:	440b      	add	r3, r1
 8000880:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000884:	e00a      	b.n	800089c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	b2da      	uxtb	r2, r3
 800088a:	4908      	ldr	r1, [pc, #32]	; (80008ac <__NVIC_SetPriority+0x50>)
 800088c:	79fb      	ldrb	r3, [r7, #7]
 800088e:	f003 030f 	and.w	r3, r3, #15
 8000892:	3b04      	subs	r3, #4
 8000894:	0112      	lsls	r2, r2, #4
 8000896:	b2d2      	uxtb	r2, r2
 8000898:	440b      	add	r3, r1
 800089a:	761a      	strb	r2, [r3, #24]
}
 800089c:	bf00      	nop
 800089e:	370c      	adds	r7, #12
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bc80      	pop	{r7}
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	e000e100 	.word	0xe000e100
 80008ac:	e000ed00 	.word	0xe000ed00

080008b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b089      	sub	sp, #36	; 0x24
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	60f8      	str	r0, [r7, #12]
 80008b8:	60b9      	str	r1, [r7, #8]
 80008ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	f003 0307 	and.w	r3, r3, #7
 80008c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008c4:	69fb      	ldr	r3, [r7, #28]
 80008c6:	f1c3 0307 	rsb	r3, r3, #7
 80008ca:	2b04      	cmp	r3, #4
 80008cc:	bf28      	it	cs
 80008ce:	2304      	movcs	r3, #4
 80008d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008d2:	69fb      	ldr	r3, [r7, #28]
 80008d4:	3304      	adds	r3, #4
 80008d6:	2b06      	cmp	r3, #6
 80008d8:	d902      	bls.n	80008e0 <NVIC_EncodePriority+0x30>
 80008da:	69fb      	ldr	r3, [r7, #28]
 80008dc:	3b03      	subs	r3, #3
 80008de:	e000      	b.n	80008e2 <NVIC_EncodePriority+0x32>
 80008e0:	2300      	movs	r3, #0
 80008e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008e4:	f04f 32ff 	mov.w	r2, #4294967295
 80008e8:	69bb      	ldr	r3, [r7, #24]
 80008ea:	fa02 f303 	lsl.w	r3, r2, r3
 80008ee:	43da      	mvns	r2, r3
 80008f0:	68bb      	ldr	r3, [r7, #8]
 80008f2:	401a      	ands	r2, r3
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008f8:	f04f 31ff 	mov.w	r1, #4294967295
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000902:	43d9      	mvns	r1, r3
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000908:	4313      	orrs	r3, r2
         );
}
 800090a:	4618      	mov	r0, r3
 800090c:	3724      	adds	r7, #36	; 0x24
 800090e:	46bd      	mov	sp, r7
 8000910:	bc80      	pop	{r7}
 8000912:	4770      	bx	lr

08000914 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800091c:	6878      	ldr	r0, [r7, #4]
 800091e:	f7ff ff4f 	bl	80007c0 <__NVIC_SetPriorityGrouping>
}
 8000922:	bf00      	nop
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}

0800092a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800092a:	b580      	push	{r7, lr}
 800092c:	b086      	sub	sp, #24
 800092e:	af00      	add	r7, sp, #0
 8000930:	4603      	mov	r3, r0
 8000932:	60b9      	str	r1, [r7, #8]
 8000934:	607a      	str	r2, [r7, #4]
 8000936:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000938:	2300      	movs	r3, #0
 800093a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800093c:	f7ff ff64 	bl	8000808 <__NVIC_GetPriorityGrouping>
 8000940:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000942:	687a      	ldr	r2, [r7, #4]
 8000944:	68b9      	ldr	r1, [r7, #8]
 8000946:	6978      	ldr	r0, [r7, #20]
 8000948:	f7ff ffb2 	bl	80008b0 <NVIC_EncodePriority>
 800094c:	4602      	mov	r2, r0
 800094e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000952:	4611      	mov	r1, r2
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff ff81 	bl	800085c <__NVIC_SetPriority>
}
 800095a:	bf00      	nop
 800095c:	3718      	adds	r7, #24
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}

08000962 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000962:	b580      	push	{r7, lr}
 8000964:	b082      	sub	sp, #8
 8000966:	af00      	add	r7, sp, #0
 8000968:	4603      	mov	r3, r0
 800096a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800096c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000970:	4618      	mov	r0, r3
 8000972:	f7ff ff57 	bl	8000824 <__NVIC_EnableIRQ>
}
 8000976:	bf00      	nop
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
	...

08000980 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000980:	b480      	push	{r7}
 8000982:	b08b      	sub	sp, #44	; 0x2c
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
 8000988:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800098a:	2300      	movs	r3, #0
 800098c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800098e:	2300      	movs	r3, #0
 8000990:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000992:	e169      	b.n	8000c68 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000994:	2201      	movs	r2, #1
 8000996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000998:	fa02 f303 	lsl.w	r3, r2, r3
 800099c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	69fa      	ldr	r2, [r7, #28]
 80009a4:	4013      	ands	r3, r2
 80009a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80009a8:	69ba      	ldr	r2, [r7, #24]
 80009aa:	69fb      	ldr	r3, [r7, #28]
 80009ac:	429a      	cmp	r2, r3
 80009ae:	f040 8158 	bne.w	8000c62 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	685b      	ldr	r3, [r3, #4]
 80009b6:	4a9a      	ldr	r2, [pc, #616]	; (8000c20 <HAL_GPIO_Init+0x2a0>)
 80009b8:	4293      	cmp	r3, r2
 80009ba:	d05e      	beq.n	8000a7a <HAL_GPIO_Init+0xfa>
 80009bc:	4a98      	ldr	r2, [pc, #608]	; (8000c20 <HAL_GPIO_Init+0x2a0>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d875      	bhi.n	8000aae <HAL_GPIO_Init+0x12e>
 80009c2:	4a98      	ldr	r2, [pc, #608]	; (8000c24 <HAL_GPIO_Init+0x2a4>)
 80009c4:	4293      	cmp	r3, r2
 80009c6:	d058      	beq.n	8000a7a <HAL_GPIO_Init+0xfa>
 80009c8:	4a96      	ldr	r2, [pc, #600]	; (8000c24 <HAL_GPIO_Init+0x2a4>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d86f      	bhi.n	8000aae <HAL_GPIO_Init+0x12e>
 80009ce:	4a96      	ldr	r2, [pc, #600]	; (8000c28 <HAL_GPIO_Init+0x2a8>)
 80009d0:	4293      	cmp	r3, r2
 80009d2:	d052      	beq.n	8000a7a <HAL_GPIO_Init+0xfa>
 80009d4:	4a94      	ldr	r2, [pc, #592]	; (8000c28 <HAL_GPIO_Init+0x2a8>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d869      	bhi.n	8000aae <HAL_GPIO_Init+0x12e>
 80009da:	4a94      	ldr	r2, [pc, #592]	; (8000c2c <HAL_GPIO_Init+0x2ac>)
 80009dc:	4293      	cmp	r3, r2
 80009de:	d04c      	beq.n	8000a7a <HAL_GPIO_Init+0xfa>
 80009e0:	4a92      	ldr	r2, [pc, #584]	; (8000c2c <HAL_GPIO_Init+0x2ac>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d863      	bhi.n	8000aae <HAL_GPIO_Init+0x12e>
 80009e6:	4a92      	ldr	r2, [pc, #584]	; (8000c30 <HAL_GPIO_Init+0x2b0>)
 80009e8:	4293      	cmp	r3, r2
 80009ea:	d046      	beq.n	8000a7a <HAL_GPIO_Init+0xfa>
 80009ec:	4a90      	ldr	r2, [pc, #576]	; (8000c30 <HAL_GPIO_Init+0x2b0>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d85d      	bhi.n	8000aae <HAL_GPIO_Init+0x12e>
 80009f2:	2b12      	cmp	r3, #18
 80009f4:	d82a      	bhi.n	8000a4c <HAL_GPIO_Init+0xcc>
 80009f6:	2b12      	cmp	r3, #18
 80009f8:	d859      	bhi.n	8000aae <HAL_GPIO_Init+0x12e>
 80009fa:	a201      	add	r2, pc, #4	; (adr r2, 8000a00 <HAL_GPIO_Init+0x80>)
 80009fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a00:	08000a7b 	.word	0x08000a7b
 8000a04:	08000a55 	.word	0x08000a55
 8000a08:	08000a67 	.word	0x08000a67
 8000a0c:	08000aa9 	.word	0x08000aa9
 8000a10:	08000aaf 	.word	0x08000aaf
 8000a14:	08000aaf 	.word	0x08000aaf
 8000a18:	08000aaf 	.word	0x08000aaf
 8000a1c:	08000aaf 	.word	0x08000aaf
 8000a20:	08000aaf 	.word	0x08000aaf
 8000a24:	08000aaf 	.word	0x08000aaf
 8000a28:	08000aaf 	.word	0x08000aaf
 8000a2c:	08000aaf 	.word	0x08000aaf
 8000a30:	08000aaf 	.word	0x08000aaf
 8000a34:	08000aaf 	.word	0x08000aaf
 8000a38:	08000aaf 	.word	0x08000aaf
 8000a3c:	08000aaf 	.word	0x08000aaf
 8000a40:	08000aaf 	.word	0x08000aaf
 8000a44:	08000a5d 	.word	0x08000a5d
 8000a48:	08000a71 	.word	0x08000a71
 8000a4c:	4a79      	ldr	r2, [pc, #484]	; (8000c34 <HAL_GPIO_Init+0x2b4>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d013      	beq.n	8000a7a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a52:	e02c      	b.n	8000aae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	68db      	ldr	r3, [r3, #12]
 8000a58:	623b      	str	r3, [r7, #32]
          break;
 8000a5a:	e029      	b.n	8000ab0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	68db      	ldr	r3, [r3, #12]
 8000a60:	3304      	adds	r3, #4
 8000a62:	623b      	str	r3, [r7, #32]
          break;
 8000a64:	e024      	b.n	8000ab0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	68db      	ldr	r3, [r3, #12]
 8000a6a:	3308      	adds	r3, #8
 8000a6c:	623b      	str	r3, [r7, #32]
          break;
 8000a6e:	e01f      	b.n	8000ab0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	68db      	ldr	r3, [r3, #12]
 8000a74:	330c      	adds	r3, #12
 8000a76:	623b      	str	r3, [r7, #32]
          break;
 8000a78:	e01a      	b.n	8000ab0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	689b      	ldr	r3, [r3, #8]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d102      	bne.n	8000a88 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a82:	2304      	movs	r3, #4
 8000a84:	623b      	str	r3, [r7, #32]
          break;
 8000a86:	e013      	b.n	8000ab0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	689b      	ldr	r3, [r3, #8]
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	d105      	bne.n	8000a9c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a90:	2308      	movs	r3, #8
 8000a92:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	69fa      	ldr	r2, [r7, #28]
 8000a98:	611a      	str	r2, [r3, #16]
          break;
 8000a9a:	e009      	b.n	8000ab0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a9c:	2308      	movs	r3, #8
 8000a9e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	69fa      	ldr	r2, [r7, #28]
 8000aa4:	615a      	str	r2, [r3, #20]
          break;
 8000aa6:	e003      	b.n	8000ab0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	623b      	str	r3, [r7, #32]
          break;
 8000aac:	e000      	b.n	8000ab0 <HAL_GPIO_Init+0x130>
          break;
 8000aae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ab0:	69bb      	ldr	r3, [r7, #24]
 8000ab2:	2bff      	cmp	r3, #255	; 0xff
 8000ab4:	d801      	bhi.n	8000aba <HAL_GPIO_Init+0x13a>
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	e001      	b.n	8000abe <HAL_GPIO_Init+0x13e>
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	3304      	adds	r3, #4
 8000abe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ac0:	69bb      	ldr	r3, [r7, #24]
 8000ac2:	2bff      	cmp	r3, #255	; 0xff
 8000ac4:	d802      	bhi.n	8000acc <HAL_GPIO_Init+0x14c>
 8000ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ac8:	009b      	lsls	r3, r3, #2
 8000aca:	e002      	b.n	8000ad2 <HAL_GPIO_Init+0x152>
 8000acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ace:	3b08      	subs	r3, #8
 8000ad0:	009b      	lsls	r3, r3, #2
 8000ad2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	681a      	ldr	r2, [r3, #0]
 8000ad8:	210f      	movs	r1, #15
 8000ada:	693b      	ldr	r3, [r7, #16]
 8000adc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae0:	43db      	mvns	r3, r3
 8000ae2:	401a      	ands	r2, r3
 8000ae4:	6a39      	ldr	r1, [r7, #32]
 8000ae6:	693b      	ldr	r3, [r7, #16]
 8000ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8000aec:	431a      	orrs	r2, r3
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	685b      	ldr	r3, [r3, #4]
 8000af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	f000 80b1 	beq.w	8000c62 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b00:	4b4d      	ldr	r3, [pc, #308]	; (8000c38 <HAL_GPIO_Init+0x2b8>)
 8000b02:	699b      	ldr	r3, [r3, #24]
 8000b04:	4a4c      	ldr	r2, [pc, #304]	; (8000c38 <HAL_GPIO_Init+0x2b8>)
 8000b06:	f043 0301 	orr.w	r3, r3, #1
 8000b0a:	6193      	str	r3, [r2, #24]
 8000b0c:	4b4a      	ldr	r3, [pc, #296]	; (8000c38 <HAL_GPIO_Init+0x2b8>)
 8000b0e:	699b      	ldr	r3, [r3, #24]
 8000b10:	f003 0301 	and.w	r3, r3, #1
 8000b14:	60bb      	str	r3, [r7, #8]
 8000b16:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b18:	4a48      	ldr	r2, [pc, #288]	; (8000c3c <HAL_GPIO_Init+0x2bc>)
 8000b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b1c:	089b      	lsrs	r3, r3, #2
 8000b1e:	3302      	adds	r3, #2
 8000b20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b24:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b28:	f003 0303 	and.w	r3, r3, #3
 8000b2c:	009b      	lsls	r3, r3, #2
 8000b2e:	220f      	movs	r2, #15
 8000b30:	fa02 f303 	lsl.w	r3, r2, r3
 8000b34:	43db      	mvns	r3, r3
 8000b36:	68fa      	ldr	r2, [r7, #12]
 8000b38:	4013      	ands	r3, r2
 8000b3a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	4a40      	ldr	r2, [pc, #256]	; (8000c40 <HAL_GPIO_Init+0x2c0>)
 8000b40:	4293      	cmp	r3, r2
 8000b42:	d013      	beq.n	8000b6c <HAL_GPIO_Init+0x1ec>
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a3f      	ldr	r2, [pc, #252]	; (8000c44 <HAL_GPIO_Init+0x2c4>)
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d00d      	beq.n	8000b68 <HAL_GPIO_Init+0x1e8>
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	4a3e      	ldr	r2, [pc, #248]	; (8000c48 <HAL_GPIO_Init+0x2c8>)
 8000b50:	4293      	cmp	r3, r2
 8000b52:	d007      	beq.n	8000b64 <HAL_GPIO_Init+0x1e4>
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	4a3d      	ldr	r2, [pc, #244]	; (8000c4c <HAL_GPIO_Init+0x2cc>)
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d101      	bne.n	8000b60 <HAL_GPIO_Init+0x1e0>
 8000b5c:	2303      	movs	r3, #3
 8000b5e:	e006      	b.n	8000b6e <HAL_GPIO_Init+0x1ee>
 8000b60:	2304      	movs	r3, #4
 8000b62:	e004      	b.n	8000b6e <HAL_GPIO_Init+0x1ee>
 8000b64:	2302      	movs	r3, #2
 8000b66:	e002      	b.n	8000b6e <HAL_GPIO_Init+0x1ee>
 8000b68:	2301      	movs	r3, #1
 8000b6a:	e000      	b.n	8000b6e <HAL_GPIO_Init+0x1ee>
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b70:	f002 0203 	and.w	r2, r2, #3
 8000b74:	0092      	lsls	r2, r2, #2
 8000b76:	4093      	lsls	r3, r2
 8000b78:	68fa      	ldr	r2, [r7, #12]
 8000b7a:	4313      	orrs	r3, r2
 8000b7c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b7e:	492f      	ldr	r1, [pc, #188]	; (8000c3c <HAL_GPIO_Init+0x2bc>)
 8000b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b82:	089b      	lsrs	r3, r3, #2
 8000b84:	3302      	adds	r3, #2
 8000b86:	68fa      	ldr	r2, [r7, #12]
 8000b88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d006      	beq.n	8000ba6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b98:	4b2d      	ldr	r3, [pc, #180]	; (8000c50 <HAL_GPIO_Init+0x2d0>)
 8000b9a:	689a      	ldr	r2, [r3, #8]
 8000b9c:	492c      	ldr	r1, [pc, #176]	; (8000c50 <HAL_GPIO_Init+0x2d0>)
 8000b9e:	69bb      	ldr	r3, [r7, #24]
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	608b      	str	r3, [r1, #8]
 8000ba4:	e006      	b.n	8000bb4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ba6:	4b2a      	ldr	r3, [pc, #168]	; (8000c50 <HAL_GPIO_Init+0x2d0>)
 8000ba8:	689a      	ldr	r2, [r3, #8]
 8000baa:	69bb      	ldr	r3, [r7, #24]
 8000bac:	43db      	mvns	r3, r3
 8000bae:	4928      	ldr	r1, [pc, #160]	; (8000c50 <HAL_GPIO_Init+0x2d0>)
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d006      	beq.n	8000bce <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000bc0:	4b23      	ldr	r3, [pc, #140]	; (8000c50 <HAL_GPIO_Init+0x2d0>)
 8000bc2:	68da      	ldr	r2, [r3, #12]
 8000bc4:	4922      	ldr	r1, [pc, #136]	; (8000c50 <HAL_GPIO_Init+0x2d0>)
 8000bc6:	69bb      	ldr	r3, [r7, #24]
 8000bc8:	4313      	orrs	r3, r2
 8000bca:	60cb      	str	r3, [r1, #12]
 8000bcc:	e006      	b.n	8000bdc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000bce:	4b20      	ldr	r3, [pc, #128]	; (8000c50 <HAL_GPIO_Init+0x2d0>)
 8000bd0:	68da      	ldr	r2, [r3, #12]
 8000bd2:	69bb      	ldr	r3, [r7, #24]
 8000bd4:	43db      	mvns	r3, r3
 8000bd6:	491e      	ldr	r1, [pc, #120]	; (8000c50 <HAL_GPIO_Init+0x2d0>)
 8000bd8:	4013      	ands	r3, r2
 8000bda:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d006      	beq.n	8000bf6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000be8:	4b19      	ldr	r3, [pc, #100]	; (8000c50 <HAL_GPIO_Init+0x2d0>)
 8000bea:	685a      	ldr	r2, [r3, #4]
 8000bec:	4918      	ldr	r1, [pc, #96]	; (8000c50 <HAL_GPIO_Init+0x2d0>)
 8000bee:	69bb      	ldr	r3, [r7, #24]
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	604b      	str	r3, [r1, #4]
 8000bf4:	e006      	b.n	8000c04 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000bf6:	4b16      	ldr	r3, [pc, #88]	; (8000c50 <HAL_GPIO_Init+0x2d0>)
 8000bf8:	685a      	ldr	r2, [r3, #4]
 8000bfa:	69bb      	ldr	r3, [r7, #24]
 8000bfc:	43db      	mvns	r3, r3
 8000bfe:	4914      	ldr	r1, [pc, #80]	; (8000c50 <HAL_GPIO_Init+0x2d0>)
 8000c00:	4013      	ands	r3, r2
 8000c02:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d021      	beq.n	8000c54 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c10:	4b0f      	ldr	r3, [pc, #60]	; (8000c50 <HAL_GPIO_Init+0x2d0>)
 8000c12:	681a      	ldr	r2, [r3, #0]
 8000c14:	490e      	ldr	r1, [pc, #56]	; (8000c50 <HAL_GPIO_Init+0x2d0>)
 8000c16:	69bb      	ldr	r3, [r7, #24]
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	600b      	str	r3, [r1, #0]
 8000c1c:	e021      	b.n	8000c62 <HAL_GPIO_Init+0x2e2>
 8000c1e:	bf00      	nop
 8000c20:	10320000 	.word	0x10320000
 8000c24:	10310000 	.word	0x10310000
 8000c28:	10220000 	.word	0x10220000
 8000c2c:	10210000 	.word	0x10210000
 8000c30:	10120000 	.word	0x10120000
 8000c34:	10110000 	.word	0x10110000
 8000c38:	40021000 	.word	0x40021000
 8000c3c:	40010000 	.word	0x40010000
 8000c40:	40010800 	.word	0x40010800
 8000c44:	40010c00 	.word	0x40010c00
 8000c48:	40011000 	.word	0x40011000
 8000c4c:	40011400 	.word	0x40011400
 8000c50:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c54:	4b0b      	ldr	r3, [pc, #44]	; (8000c84 <HAL_GPIO_Init+0x304>)
 8000c56:	681a      	ldr	r2, [r3, #0]
 8000c58:	69bb      	ldr	r3, [r7, #24]
 8000c5a:	43db      	mvns	r3, r3
 8000c5c:	4909      	ldr	r1, [pc, #36]	; (8000c84 <HAL_GPIO_Init+0x304>)
 8000c5e:	4013      	ands	r3, r2
 8000c60:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c64:	3301      	adds	r3, #1
 8000c66:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c6e:	fa22 f303 	lsr.w	r3, r2, r3
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	f47f ae8e 	bne.w	8000994 <HAL_GPIO_Init+0x14>
  }
}
 8000c78:	bf00      	nop
 8000c7a:	bf00      	nop
 8000c7c:	372c      	adds	r7, #44	; 0x2c
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bc80      	pop	{r7}
 8000c82:	4770      	bx	lr
 8000c84:	40010400 	.word	0x40010400

08000c88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	460b      	mov	r3, r1
 8000c92:	807b      	strh	r3, [r7, #2]
 8000c94:	4613      	mov	r3, r2
 8000c96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c98:	787b      	ldrb	r3, [r7, #1]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d003      	beq.n	8000ca6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c9e:	887a      	ldrh	r2, [r7, #2]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000ca4:	e003      	b.n	8000cae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ca6:	887b      	ldrh	r3, [r7, #2]
 8000ca8:	041a      	lsls	r2, r3, #16
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	611a      	str	r2, [r3, #16]
}
 8000cae:	bf00      	nop
 8000cb0:	370c      	adds	r7, #12
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bc80      	pop	{r7}
 8000cb6:	4770      	bx	lr

08000cb8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b086      	sub	sp, #24
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d101      	bne.n	8000cca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	e272      	b.n	80011b0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f003 0301 	and.w	r3, r3, #1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f000 8087 	beq.w	8000de6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000cd8:	4b92      	ldr	r3, [pc, #584]	; (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	f003 030c 	and.w	r3, r3, #12
 8000ce0:	2b04      	cmp	r3, #4
 8000ce2:	d00c      	beq.n	8000cfe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ce4:	4b8f      	ldr	r3, [pc, #572]	; (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	f003 030c 	and.w	r3, r3, #12
 8000cec:	2b08      	cmp	r3, #8
 8000cee:	d112      	bne.n	8000d16 <HAL_RCC_OscConfig+0x5e>
 8000cf0:	4b8c      	ldr	r3, [pc, #560]	; (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cfc:	d10b      	bne.n	8000d16 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cfe:	4b89      	ldr	r3, [pc, #548]	; (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d06c      	beq.n	8000de4 <HAL_RCC_OscConfig+0x12c>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d168      	bne.n	8000de4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000d12:	2301      	movs	r3, #1
 8000d14:	e24c      	b.n	80011b0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d1e:	d106      	bne.n	8000d2e <HAL_RCC_OscConfig+0x76>
 8000d20:	4b80      	ldr	r3, [pc, #512]	; (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a7f      	ldr	r2, [pc, #508]	; (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000d26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d2a:	6013      	str	r3, [r2, #0]
 8000d2c:	e02e      	b.n	8000d8c <HAL_RCC_OscConfig+0xd4>
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d10c      	bne.n	8000d50 <HAL_RCC_OscConfig+0x98>
 8000d36:	4b7b      	ldr	r3, [pc, #492]	; (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a7a      	ldr	r2, [pc, #488]	; (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000d3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d40:	6013      	str	r3, [r2, #0]
 8000d42:	4b78      	ldr	r3, [pc, #480]	; (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4a77      	ldr	r2, [pc, #476]	; (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000d48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d4c:	6013      	str	r3, [r2, #0]
 8000d4e:	e01d      	b.n	8000d8c <HAL_RCC_OscConfig+0xd4>
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d58:	d10c      	bne.n	8000d74 <HAL_RCC_OscConfig+0xbc>
 8000d5a:	4b72      	ldr	r3, [pc, #456]	; (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a71      	ldr	r2, [pc, #452]	; (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000d60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d64:	6013      	str	r3, [r2, #0]
 8000d66:	4b6f      	ldr	r3, [pc, #444]	; (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a6e      	ldr	r2, [pc, #440]	; (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000d6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d70:	6013      	str	r3, [r2, #0]
 8000d72:	e00b      	b.n	8000d8c <HAL_RCC_OscConfig+0xd4>
 8000d74:	4b6b      	ldr	r3, [pc, #428]	; (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a6a      	ldr	r2, [pc, #424]	; (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000d7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d7e:	6013      	str	r3, [r2, #0]
 8000d80:	4b68      	ldr	r3, [pc, #416]	; (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a67      	ldr	r2, [pc, #412]	; (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000d86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d8a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d013      	beq.n	8000dbc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d94:	f7ff fd0a 	bl	80007ac <HAL_GetTick>
 8000d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d9a:	e008      	b.n	8000dae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d9c:	f7ff fd06 	bl	80007ac <HAL_GetTick>
 8000da0:	4602      	mov	r2, r0
 8000da2:	693b      	ldr	r3, [r7, #16]
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	2b64      	cmp	r3, #100	; 0x64
 8000da8:	d901      	bls.n	8000dae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000daa:	2303      	movs	r3, #3
 8000dac:	e200      	b.n	80011b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dae:	4b5d      	ldr	r3, [pc, #372]	; (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d0f0      	beq.n	8000d9c <HAL_RCC_OscConfig+0xe4>
 8000dba:	e014      	b.n	8000de6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dbc:	f7ff fcf6 	bl	80007ac <HAL_GetTick>
 8000dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dc2:	e008      	b.n	8000dd6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000dc4:	f7ff fcf2 	bl	80007ac <HAL_GetTick>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	693b      	ldr	r3, [r7, #16]
 8000dcc:	1ad3      	subs	r3, r2, r3
 8000dce:	2b64      	cmp	r3, #100	; 0x64
 8000dd0:	d901      	bls.n	8000dd6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000dd2:	2303      	movs	r3, #3
 8000dd4:	e1ec      	b.n	80011b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dd6:	4b53      	ldr	r3, [pc, #332]	; (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d1f0      	bne.n	8000dc4 <HAL_RCC_OscConfig+0x10c>
 8000de2:	e000      	b.n	8000de6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000de4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f003 0302 	and.w	r3, r3, #2
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d063      	beq.n	8000eba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000df2:	4b4c      	ldr	r3, [pc, #304]	; (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	f003 030c 	and.w	r3, r3, #12
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d00b      	beq.n	8000e16 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000dfe:	4b49      	ldr	r3, [pc, #292]	; (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	f003 030c 	and.w	r3, r3, #12
 8000e06:	2b08      	cmp	r3, #8
 8000e08:	d11c      	bne.n	8000e44 <HAL_RCC_OscConfig+0x18c>
 8000e0a:	4b46      	ldr	r3, [pc, #280]	; (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d116      	bne.n	8000e44 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e16:	4b43      	ldr	r3, [pc, #268]	; (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f003 0302 	and.w	r3, r3, #2
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d005      	beq.n	8000e2e <HAL_RCC_OscConfig+0x176>
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	691b      	ldr	r3, [r3, #16]
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	d001      	beq.n	8000e2e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e1c0      	b.n	80011b0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e2e:	4b3d      	ldr	r3, [pc, #244]	; (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	695b      	ldr	r3, [r3, #20]
 8000e3a:	00db      	lsls	r3, r3, #3
 8000e3c:	4939      	ldr	r1, [pc, #228]	; (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e42:	e03a      	b.n	8000eba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	691b      	ldr	r3, [r3, #16]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d020      	beq.n	8000e8e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e4c:	4b36      	ldr	r3, [pc, #216]	; (8000f28 <HAL_RCC_OscConfig+0x270>)
 8000e4e:	2201      	movs	r2, #1
 8000e50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e52:	f7ff fcab 	bl	80007ac <HAL_GetTick>
 8000e56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e58:	e008      	b.n	8000e6c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e5a:	f7ff fca7 	bl	80007ac <HAL_GetTick>
 8000e5e:	4602      	mov	r2, r0
 8000e60:	693b      	ldr	r3, [r7, #16]
 8000e62:	1ad3      	subs	r3, r2, r3
 8000e64:	2b02      	cmp	r3, #2
 8000e66:	d901      	bls.n	8000e6c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000e68:	2303      	movs	r3, #3
 8000e6a:	e1a1      	b.n	80011b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e6c:	4b2d      	ldr	r3, [pc, #180]	; (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f003 0302 	and.w	r3, r3, #2
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d0f0      	beq.n	8000e5a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e78:	4b2a      	ldr	r3, [pc, #168]	; (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	695b      	ldr	r3, [r3, #20]
 8000e84:	00db      	lsls	r3, r3, #3
 8000e86:	4927      	ldr	r1, [pc, #156]	; (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	600b      	str	r3, [r1, #0]
 8000e8c:	e015      	b.n	8000eba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e8e:	4b26      	ldr	r3, [pc, #152]	; (8000f28 <HAL_RCC_OscConfig+0x270>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e94:	f7ff fc8a 	bl	80007ac <HAL_GetTick>
 8000e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e9a:	e008      	b.n	8000eae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e9c:	f7ff fc86 	bl	80007ac <HAL_GetTick>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	2b02      	cmp	r3, #2
 8000ea8:	d901      	bls.n	8000eae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000eaa:	2303      	movs	r3, #3
 8000eac:	e180      	b.n	80011b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000eae:	4b1d      	ldr	r3, [pc, #116]	; (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f003 0302 	and.w	r3, r3, #2
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d1f0      	bne.n	8000e9c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f003 0308 	and.w	r3, r3, #8
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d03a      	beq.n	8000f3c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	699b      	ldr	r3, [r3, #24]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d019      	beq.n	8000f02 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ece:	4b17      	ldr	r3, [pc, #92]	; (8000f2c <HAL_RCC_OscConfig+0x274>)
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ed4:	f7ff fc6a 	bl	80007ac <HAL_GetTick>
 8000ed8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000eda:	e008      	b.n	8000eee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000edc:	f7ff fc66 	bl	80007ac <HAL_GetTick>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	693b      	ldr	r3, [r7, #16]
 8000ee4:	1ad3      	subs	r3, r2, r3
 8000ee6:	2b02      	cmp	r3, #2
 8000ee8:	d901      	bls.n	8000eee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000eea:	2303      	movs	r3, #3
 8000eec:	e160      	b.n	80011b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000eee:	4b0d      	ldr	r3, [pc, #52]	; (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ef2:	f003 0302 	and.w	r3, r3, #2
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d0f0      	beq.n	8000edc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000efa:	2001      	movs	r0, #1
 8000efc:	f000 fafe 	bl	80014fc <RCC_Delay>
 8000f00:	e01c      	b.n	8000f3c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f02:	4b0a      	ldr	r3, [pc, #40]	; (8000f2c <HAL_RCC_OscConfig+0x274>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f08:	f7ff fc50 	bl	80007ac <HAL_GetTick>
 8000f0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f0e:	e00f      	b.n	8000f30 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f10:	f7ff fc4c 	bl	80007ac <HAL_GetTick>
 8000f14:	4602      	mov	r2, r0
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	1ad3      	subs	r3, r2, r3
 8000f1a:	2b02      	cmp	r3, #2
 8000f1c:	d908      	bls.n	8000f30 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000f1e:	2303      	movs	r3, #3
 8000f20:	e146      	b.n	80011b0 <HAL_RCC_OscConfig+0x4f8>
 8000f22:	bf00      	nop
 8000f24:	40021000 	.word	0x40021000
 8000f28:	42420000 	.word	0x42420000
 8000f2c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f30:	4b92      	ldr	r3, [pc, #584]	; (800117c <HAL_RCC_OscConfig+0x4c4>)
 8000f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f34:	f003 0302 	and.w	r3, r3, #2
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d1e9      	bne.n	8000f10 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f003 0304 	and.w	r3, r3, #4
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	f000 80a6 	beq.w	8001096 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f4e:	4b8b      	ldr	r3, [pc, #556]	; (800117c <HAL_RCC_OscConfig+0x4c4>)
 8000f50:	69db      	ldr	r3, [r3, #28]
 8000f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d10d      	bne.n	8000f76 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f5a:	4b88      	ldr	r3, [pc, #544]	; (800117c <HAL_RCC_OscConfig+0x4c4>)
 8000f5c:	69db      	ldr	r3, [r3, #28]
 8000f5e:	4a87      	ldr	r2, [pc, #540]	; (800117c <HAL_RCC_OscConfig+0x4c4>)
 8000f60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f64:	61d3      	str	r3, [r2, #28]
 8000f66:	4b85      	ldr	r3, [pc, #532]	; (800117c <HAL_RCC_OscConfig+0x4c4>)
 8000f68:	69db      	ldr	r3, [r3, #28]
 8000f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f6e:	60bb      	str	r3, [r7, #8]
 8000f70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f72:	2301      	movs	r3, #1
 8000f74:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f76:	4b82      	ldr	r3, [pc, #520]	; (8001180 <HAL_RCC_OscConfig+0x4c8>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d118      	bne.n	8000fb4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f82:	4b7f      	ldr	r3, [pc, #508]	; (8001180 <HAL_RCC_OscConfig+0x4c8>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a7e      	ldr	r2, [pc, #504]	; (8001180 <HAL_RCC_OscConfig+0x4c8>)
 8000f88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f8e:	f7ff fc0d 	bl	80007ac <HAL_GetTick>
 8000f92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f94:	e008      	b.n	8000fa8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f96:	f7ff fc09 	bl	80007ac <HAL_GetTick>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	1ad3      	subs	r3, r2, r3
 8000fa0:	2b64      	cmp	r3, #100	; 0x64
 8000fa2:	d901      	bls.n	8000fa8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	e103      	b.n	80011b0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fa8:	4b75      	ldr	r3, [pc, #468]	; (8001180 <HAL_RCC_OscConfig+0x4c8>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d0f0      	beq.n	8000f96 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d106      	bne.n	8000fca <HAL_RCC_OscConfig+0x312>
 8000fbc:	4b6f      	ldr	r3, [pc, #444]	; (800117c <HAL_RCC_OscConfig+0x4c4>)
 8000fbe:	6a1b      	ldr	r3, [r3, #32]
 8000fc0:	4a6e      	ldr	r2, [pc, #440]	; (800117c <HAL_RCC_OscConfig+0x4c4>)
 8000fc2:	f043 0301 	orr.w	r3, r3, #1
 8000fc6:	6213      	str	r3, [r2, #32]
 8000fc8:	e02d      	b.n	8001026 <HAL_RCC_OscConfig+0x36e>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	68db      	ldr	r3, [r3, #12]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d10c      	bne.n	8000fec <HAL_RCC_OscConfig+0x334>
 8000fd2:	4b6a      	ldr	r3, [pc, #424]	; (800117c <HAL_RCC_OscConfig+0x4c4>)
 8000fd4:	6a1b      	ldr	r3, [r3, #32]
 8000fd6:	4a69      	ldr	r2, [pc, #420]	; (800117c <HAL_RCC_OscConfig+0x4c4>)
 8000fd8:	f023 0301 	bic.w	r3, r3, #1
 8000fdc:	6213      	str	r3, [r2, #32]
 8000fde:	4b67      	ldr	r3, [pc, #412]	; (800117c <HAL_RCC_OscConfig+0x4c4>)
 8000fe0:	6a1b      	ldr	r3, [r3, #32]
 8000fe2:	4a66      	ldr	r2, [pc, #408]	; (800117c <HAL_RCC_OscConfig+0x4c4>)
 8000fe4:	f023 0304 	bic.w	r3, r3, #4
 8000fe8:	6213      	str	r3, [r2, #32]
 8000fea:	e01c      	b.n	8001026 <HAL_RCC_OscConfig+0x36e>
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	2b05      	cmp	r3, #5
 8000ff2:	d10c      	bne.n	800100e <HAL_RCC_OscConfig+0x356>
 8000ff4:	4b61      	ldr	r3, [pc, #388]	; (800117c <HAL_RCC_OscConfig+0x4c4>)
 8000ff6:	6a1b      	ldr	r3, [r3, #32]
 8000ff8:	4a60      	ldr	r2, [pc, #384]	; (800117c <HAL_RCC_OscConfig+0x4c4>)
 8000ffa:	f043 0304 	orr.w	r3, r3, #4
 8000ffe:	6213      	str	r3, [r2, #32]
 8001000:	4b5e      	ldr	r3, [pc, #376]	; (800117c <HAL_RCC_OscConfig+0x4c4>)
 8001002:	6a1b      	ldr	r3, [r3, #32]
 8001004:	4a5d      	ldr	r2, [pc, #372]	; (800117c <HAL_RCC_OscConfig+0x4c4>)
 8001006:	f043 0301 	orr.w	r3, r3, #1
 800100a:	6213      	str	r3, [r2, #32]
 800100c:	e00b      	b.n	8001026 <HAL_RCC_OscConfig+0x36e>
 800100e:	4b5b      	ldr	r3, [pc, #364]	; (800117c <HAL_RCC_OscConfig+0x4c4>)
 8001010:	6a1b      	ldr	r3, [r3, #32]
 8001012:	4a5a      	ldr	r2, [pc, #360]	; (800117c <HAL_RCC_OscConfig+0x4c4>)
 8001014:	f023 0301 	bic.w	r3, r3, #1
 8001018:	6213      	str	r3, [r2, #32]
 800101a:	4b58      	ldr	r3, [pc, #352]	; (800117c <HAL_RCC_OscConfig+0x4c4>)
 800101c:	6a1b      	ldr	r3, [r3, #32]
 800101e:	4a57      	ldr	r2, [pc, #348]	; (800117c <HAL_RCC_OscConfig+0x4c4>)
 8001020:	f023 0304 	bic.w	r3, r3, #4
 8001024:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	68db      	ldr	r3, [r3, #12]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d015      	beq.n	800105a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800102e:	f7ff fbbd 	bl	80007ac <HAL_GetTick>
 8001032:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001034:	e00a      	b.n	800104c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001036:	f7ff fbb9 	bl	80007ac <HAL_GetTick>
 800103a:	4602      	mov	r2, r0
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	1ad3      	subs	r3, r2, r3
 8001040:	f241 3288 	movw	r2, #5000	; 0x1388
 8001044:	4293      	cmp	r3, r2
 8001046:	d901      	bls.n	800104c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001048:	2303      	movs	r3, #3
 800104a:	e0b1      	b.n	80011b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800104c:	4b4b      	ldr	r3, [pc, #300]	; (800117c <HAL_RCC_OscConfig+0x4c4>)
 800104e:	6a1b      	ldr	r3, [r3, #32]
 8001050:	f003 0302 	and.w	r3, r3, #2
 8001054:	2b00      	cmp	r3, #0
 8001056:	d0ee      	beq.n	8001036 <HAL_RCC_OscConfig+0x37e>
 8001058:	e014      	b.n	8001084 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800105a:	f7ff fba7 	bl	80007ac <HAL_GetTick>
 800105e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001060:	e00a      	b.n	8001078 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001062:	f7ff fba3 	bl	80007ac <HAL_GetTick>
 8001066:	4602      	mov	r2, r0
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	1ad3      	subs	r3, r2, r3
 800106c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001070:	4293      	cmp	r3, r2
 8001072:	d901      	bls.n	8001078 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001074:	2303      	movs	r3, #3
 8001076:	e09b      	b.n	80011b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001078:	4b40      	ldr	r3, [pc, #256]	; (800117c <HAL_RCC_OscConfig+0x4c4>)
 800107a:	6a1b      	ldr	r3, [r3, #32]
 800107c:	f003 0302 	and.w	r3, r3, #2
 8001080:	2b00      	cmp	r3, #0
 8001082:	d1ee      	bne.n	8001062 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001084:	7dfb      	ldrb	r3, [r7, #23]
 8001086:	2b01      	cmp	r3, #1
 8001088:	d105      	bne.n	8001096 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800108a:	4b3c      	ldr	r3, [pc, #240]	; (800117c <HAL_RCC_OscConfig+0x4c4>)
 800108c:	69db      	ldr	r3, [r3, #28]
 800108e:	4a3b      	ldr	r2, [pc, #236]	; (800117c <HAL_RCC_OscConfig+0x4c4>)
 8001090:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001094:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	69db      	ldr	r3, [r3, #28]
 800109a:	2b00      	cmp	r3, #0
 800109c:	f000 8087 	beq.w	80011ae <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010a0:	4b36      	ldr	r3, [pc, #216]	; (800117c <HAL_RCC_OscConfig+0x4c4>)
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f003 030c 	and.w	r3, r3, #12
 80010a8:	2b08      	cmp	r3, #8
 80010aa:	d061      	beq.n	8001170 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	69db      	ldr	r3, [r3, #28]
 80010b0:	2b02      	cmp	r3, #2
 80010b2:	d146      	bne.n	8001142 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010b4:	4b33      	ldr	r3, [pc, #204]	; (8001184 <HAL_RCC_OscConfig+0x4cc>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010ba:	f7ff fb77 	bl	80007ac <HAL_GetTick>
 80010be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010c0:	e008      	b.n	80010d4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010c2:	f7ff fb73 	bl	80007ac <HAL_GetTick>
 80010c6:	4602      	mov	r2, r0
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	1ad3      	subs	r3, r2, r3
 80010cc:	2b02      	cmp	r3, #2
 80010ce:	d901      	bls.n	80010d4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80010d0:	2303      	movs	r3, #3
 80010d2:	e06d      	b.n	80011b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010d4:	4b29      	ldr	r3, [pc, #164]	; (800117c <HAL_RCC_OscConfig+0x4c4>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d1f0      	bne.n	80010c2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6a1b      	ldr	r3, [r3, #32]
 80010e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010e8:	d108      	bne.n	80010fc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80010ea:	4b24      	ldr	r3, [pc, #144]	; (800117c <HAL_RCC_OscConfig+0x4c4>)
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	689b      	ldr	r3, [r3, #8]
 80010f6:	4921      	ldr	r1, [pc, #132]	; (800117c <HAL_RCC_OscConfig+0x4c4>)
 80010f8:	4313      	orrs	r3, r2
 80010fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80010fc:	4b1f      	ldr	r3, [pc, #124]	; (800117c <HAL_RCC_OscConfig+0x4c4>)
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6a19      	ldr	r1, [r3, #32]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800110c:	430b      	orrs	r3, r1
 800110e:	491b      	ldr	r1, [pc, #108]	; (800117c <HAL_RCC_OscConfig+0x4c4>)
 8001110:	4313      	orrs	r3, r2
 8001112:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001114:	4b1b      	ldr	r3, [pc, #108]	; (8001184 <HAL_RCC_OscConfig+0x4cc>)
 8001116:	2201      	movs	r2, #1
 8001118:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800111a:	f7ff fb47 	bl	80007ac <HAL_GetTick>
 800111e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001120:	e008      	b.n	8001134 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001122:	f7ff fb43 	bl	80007ac <HAL_GetTick>
 8001126:	4602      	mov	r2, r0
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	1ad3      	subs	r3, r2, r3
 800112c:	2b02      	cmp	r3, #2
 800112e:	d901      	bls.n	8001134 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001130:	2303      	movs	r3, #3
 8001132:	e03d      	b.n	80011b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001134:	4b11      	ldr	r3, [pc, #68]	; (800117c <HAL_RCC_OscConfig+0x4c4>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800113c:	2b00      	cmp	r3, #0
 800113e:	d0f0      	beq.n	8001122 <HAL_RCC_OscConfig+0x46a>
 8001140:	e035      	b.n	80011ae <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001142:	4b10      	ldr	r3, [pc, #64]	; (8001184 <HAL_RCC_OscConfig+0x4cc>)
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001148:	f7ff fb30 	bl	80007ac <HAL_GetTick>
 800114c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800114e:	e008      	b.n	8001162 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001150:	f7ff fb2c 	bl	80007ac <HAL_GetTick>
 8001154:	4602      	mov	r2, r0
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	2b02      	cmp	r3, #2
 800115c:	d901      	bls.n	8001162 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800115e:	2303      	movs	r3, #3
 8001160:	e026      	b.n	80011b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001162:	4b06      	ldr	r3, [pc, #24]	; (800117c <HAL_RCC_OscConfig+0x4c4>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800116a:	2b00      	cmp	r3, #0
 800116c:	d1f0      	bne.n	8001150 <HAL_RCC_OscConfig+0x498>
 800116e:	e01e      	b.n	80011ae <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	69db      	ldr	r3, [r3, #28]
 8001174:	2b01      	cmp	r3, #1
 8001176:	d107      	bne.n	8001188 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001178:	2301      	movs	r3, #1
 800117a:	e019      	b.n	80011b0 <HAL_RCC_OscConfig+0x4f8>
 800117c:	40021000 	.word	0x40021000
 8001180:	40007000 	.word	0x40007000
 8001184:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001188:	4b0b      	ldr	r3, [pc, #44]	; (80011b8 <HAL_RCC_OscConfig+0x500>)
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6a1b      	ldr	r3, [r3, #32]
 8001198:	429a      	cmp	r2, r3
 800119a:	d106      	bne.n	80011aa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011a6:	429a      	cmp	r2, r3
 80011a8:	d001      	beq.n	80011ae <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	e000      	b.n	80011b0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80011ae:	2300      	movs	r3, #0
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3718      	adds	r7, #24
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	40021000 	.word	0x40021000

080011bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d101      	bne.n	80011d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011cc:	2301      	movs	r3, #1
 80011ce:	e0d0      	b.n	8001372 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80011d0:	4b6a      	ldr	r3, [pc, #424]	; (800137c <HAL_RCC_ClockConfig+0x1c0>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f003 0307 	and.w	r3, r3, #7
 80011d8:	683a      	ldr	r2, [r7, #0]
 80011da:	429a      	cmp	r2, r3
 80011dc:	d910      	bls.n	8001200 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011de:	4b67      	ldr	r3, [pc, #412]	; (800137c <HAL_RCC_ClockConfig+0x1c0>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f023 0207 	bic.w	r2, r3, #7
 80011e6:	4965      	ldr	r1, [pc, #404]	; (800137c <HAL_RCC_ClockConfig+0x1c0>)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011ee:	4b63      	ldr	r3, [pc, #396]	; (800137c <HAL_RCC_ClockConfig+0x1c0>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f003 0307 	and.w	r3, r3, #7
 80011f6:	683a      	ldr	r2, [r7, #0]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d001      	beq.n	8001200 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80011fc:	2301      	movs	r3, #1
 80011fe:	e0b8      	b.n	8001372 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f003 0302 	and.w	r3, r3, #2
 8001208:	2b00      	cmp	r3, #0
 800120a:	d020      	beq.n	800124e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f003 0304 	and.w	r3, r3, #4
 8001214:	2b00      	cmp	r3, #0
 8001216:	d005      	beq.n	8001224 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001218:	4b59      	ldr	r3, [pc, #356]	; (8001380 <HAL_RCC_ClockConfig+0x1c4>)
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	4a58      	ldr	r2, [pc, #352]	; (8001380 <HAL_RCC_ClockConfig+0x1c4>)
 800121e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001222:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f003 0308 	and.w	r3, r3, #8
 800122c:	2b00      	cmp	r3, #0
 800122e:	d005      	beq.n	800123c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001230:	4b53      	ldr	r3, [pc, #332]	; (8001380 <HAL_RCC_ClockConfig+0x1c4>)
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	4a52      	ldr	r2, [pc, #328]	; (8001380 <HAL_RCC_ClockConfig+0x1c4>)
 8001236:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800123a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800123c:	4b50      	ldr	r3, [pc, #320]	; (8001380 <HAL_RCC_ClockConfig+0x1c4>)
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	494d      	ldr	r1, [pc, #308]	; (8001380 <HAL_RCC_ClockConfig+0x1c4>)
 800124a:	4313      	orrs	r3, r2
 800124c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f003 0301 	and.w	r3, r3, #1
 8001256:	2b00      	cmp	r3, #0
 8001258:	d040      	beq.n	80012dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	2b01      	cmp	r3, #1
 8001260:	d107      	bne.n	8001272 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001262:	4b47      	ldr	r3, [pc, #284]	; (8001380 <HAL_RCC_ClockConfig+0x1c4>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d115      	bne.n	800129a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e07f      	b.n	8001372 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	2b02      	cmp	r3, #2
 8001278:	d107      	bne.n	800128a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800127a:	4b41      	ldr	r3, [pc, #260]	; (8001380 <HAL_RCC_ClockConfig+0x1c4>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001282:	2b00      	cmp	r3, #0
 8001284:	d109      	bne.n	800129a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	e073      	b.n	8001372 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800128a:	4b3d      	ldr	r3, [pc, #244]	; (8001380 <HAL_RCC_ClockConfig+0x1c4>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f003 0302 	and.w	r3, r3, #2
 8001292:	2b00      	cmp	r3, #0
 8001294:	d101      	bne.n	800129a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e06b      	b.n	8001372 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800129a:	4b39      	ldr	r3, [pc, #228]	; (8001380 <HAL_RCC_ClockConfig+0x1c4>)
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f023 0203 	bic.w	r2, r3, #3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	4936      	ldr	r1, [pc, #216]	; (8001380 <HAL_RCC_ClockConfig+0x1c4>)
 80012a8:	4313      	orrs	r3, r2
 80012aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012ac:	f7ff fa7e 	bl	80007ac <HAL_GetTick>
 80012b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012b2:	e00a      	b.n	80012ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012b4:	f7ff fa7a 	bl	80007ac <HAL_GetTick>
 80012b8:	4602      	mov	r2, r0
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	f241 3288 	movw	r2, #5000	; 0x1388
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d901      	bls.n	80012ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012c6:	2303      	movs	r3, #3
 80012c8:	e053      	b.n	8001372 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012ca:	4b2d      	ldr	r3, [pc, #180]	; (8001380 <HAL_RCC_ClockConfig+0x1c4>)
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f003 020c 	and.w	r2, r3, #12
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	429a      	cmp	r2, r3
 80012da:	d1eb      	bne.n	80012b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80012dc:	4b27      	ldr	r3, [pc, #156]	; (800137c <HAL_RCC_ClockConfig+0x1c0>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f003 0307 	and.w	r3, r3, #7
 80012e4:	683a      	ldr	r2, [r7, #0]
 80012e6:	429a      	cmp	r2, r3
 80012e8:	d210      	bcs.n	800130c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012ea:	4b24      	ldr	r3, [pc, #144]	; (800137c <HAL_RCC_ClockConfig+0x1c0>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f023 0207 	bic.w	r2, r3, #7
 80012f2:	4922      	ldr	r1, [pc, #136]	; (800137c <HAL_RCC_ClockConfig+0x1c0>)
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012fa:	4b20      	ldr	r3, [pc, #128]	; (800137c <HAL_RCC_ClockConfig+0x1c0>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 0307 	and.w	r3, r3, #7
 8001302:	683a      	ldr	r2, [r7, #0]
 8001304:	429a      	cmp	r2, r3
 8001306:	d001      	beq.n	800130c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001308:	2301      	movs	r3, #1
 800130a:	e032      	b.n	8001372 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f003 0304 	and.w	r3, r3, #4
 8001314:	2b00      	cmp	r3, #0
 8001316:	d008      	beq.n	800132a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001318:	4b19      	ldr	r3, [pc, #100]	; (8001380 <HAL_RCC_ClockConfig+0x1c4>)
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	4916      	ldr	r1, [pc, #88]	; (8001380 <HAL_RCC_ClockConfig+0x1c4>)
 8001326:	4313      	orrs	r3, r2
 8001328:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 0308 	and.w	r3, r3, #8
 8001332:	2b00      	cmp	r3, #0
 8001334:	d009      	beq.n	800134a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001336:	4b12      	ldr	r3, [pc, #72]	; (8001380 <HAL_RCC_ClockConfig+0x1c4>)
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	691b      	ldr	r3, [r3, #16]
 8001342:	00db      	lsls	r3, r3, #3
 8001344:	490e      	ldr	r1, [pc, #56]	; (8001380 <HAL_RCC_ClockConfig+0x1c4>)
 8001346:	4313      	orrs	r3, r2
 8001348:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800134a:	f000 f821 	bl	8001390 <HAL_RCC_GetSysClockFreq>
 800134e:	4602      	mov	r2, r0
 8001350:	4b0b      	ldr	r3, [pc, #44]	; (8001380 <HAL_RCC_ClockConfig+0x1c4>)
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	091b      	lsrs	r3, r3, #4
 8001356:	f003 030f 	and.w	r3, r3, #15
 800135a:	490a      	ldr	r1, [pc, #40]	; (8001384 <HAL_RCC_ClockConfig+0x1c8>)
 800135c:	5ccb      	ldrb	r3, [r1, r3]
 800135e:	fa22 f303 	lsr.w	r3, r2, r3
 8001362:	4a09      	ldr	r2, [pc, #36]	; (8001388 <HAL_RCC_ClockConfig+0x1cc>)
 8001364:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001366:	4b09      	ldr	r3, [pc, #36]	; (800138c <HAL_RCC_ClockConfig+0x1d0>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4618      	mov	r0, r3
 800136c:	f7ff f882 	bl	8000474 <HAL_InitTick>

  return HAL_OK;
 8001370:	2300      	movs	r3, #0
}
 8001372:	4618      	mov	r0, r3
 8001374:	3710      	adds	r7, #16
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	40022000 	.word	0x40022000
 8001380:	40021000 	.word	0x40021000
 8001384:	080045ec 	.word	0x080045ec
 8001388:	20000000 	.word	0x20000000
 800138c:	20000004 	.word	0x20000004

08001390 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001390:	b480      	push	{r7}
 8001392:	b087      	sub	sp, #28
 8001394:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001396:	2300      	movs	r3, #0
 8001398:	60fb      	str	r3, [r7, #12]
 800139a:	2300      	movs	r3, #0
 800139c:	60bb      	str	r3, [r7, #8]
 800139e:	2300      	movs	r3, #0
 80013a0:	617b      	str	r3, [r7, #20]
 80013a2:	2300      	movs	r3, #0
 80013a4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80013a6:	2300      	movs	r3, #0
 80013a8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80013aa:	4b1e      	ldr	r3, [pc, #120]	; (8001424 <HAL_RCC_GetSysClockFreq+0x94>)
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	f003 030c 	and.w	r3, r3, #12
 80013b6:	2b04      	cmp	r3, #4
 80013b8:	d002      	beq.n	80013c0 <HAL_RCC_GetSysClockFreq+0x30>
 80013ba:	2b08      	cmp	r3, #8
 80013bc:	d003      	beq.n	80013c6 <HAL_RCC_GetSysClockFreq+0x36>
 80013be:	e027      	b.n	8001410 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80013c0:	4b19      	ldr	r3, [pc, #100]	; (8001428 <HAL_RCC_GetSysClockFreq+0x98>)
 80013c2:	613b      	str	r3, [r7, #16]
      break;
 80013c4:	e027      	b.n	8001416 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	0c9b      	lsrs	r3, r3, #18
 80013ca:	f003 030f 	and.w	r3, r3, #15
 80013ce:	4a17      	ldr	r2, [pc, #92]	; (800142c <HAL_RCC_GetSysClockFreq+0x9c>)
 80013d0:	5cd3      	ldrb	r3, [r2, r3]
 80013d2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d010      	beq.n	8001400 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80013de:	4b11      	ldr	r3, [pc, #68]	; (8001424 <HAL_RCC_GetSysClockFreq+0x94>)
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	0c5b      	lsrs	r3, r3, #17
 80013e4:	f003 0301 	and.w	r3, r3, #1
 80013e8:	4a11      	ldr	r2, [pc, #68]	; (8001430 <HAL_RCC_GetSysClockFreq+0xa0>)
 80013ea:	5cd3      	ldrb	r3, [r2, r3]
 80013ec:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4a0d      	ldr	r2, [pc, #52]	; (8001428 <HAL_RCC_GetSysClockFreq+0x98>)
 80013f2:	fb03 f202 	mul.w	r2, r3, r2
 80013f6:	68bb      	ldr	r3, [r7, #8]
 80013f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80013fc:	617b      	str	r3, [r7, #20]
 80013fe:	e004      	b.n	800140a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	4a0c      	ldr	r2, [pc, #48]	; (8001434 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001404:	fb02 f303 	mul.w	r3, r2, r3
 8001408:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	613b      	str	r3, [r7, #16]
      break;
 800140e:	e002      	b.n	8001416 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001410:	4b05      	ldr	r3, [pc, #20]	; (8001428 <HAL_RCC_GetSysClockFreq+0x98>)
 8001412:	613b      	str	r3, [r7, #16]
      break;
 8001414:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001416:	693b      	ldr	r3, [r7, #16]
}
 8001418:	4618      	mov	r0, r3
 800141a:	371c      	adds	r7, #28
 800141c:	46bd      	mov	sp, r7
 800141e:	bc80      	pop	{r7}
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	40021000 	.word	0x40021000
 8001428:	007a1200 	.word	0x007a1200
 800142c:	08004604 	.word	0x08004604
 8001430:	08004614 	.word	0x08004614
 8001434:	003d0900 	.word	0x003d0900

08001438 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800143c:	4b02      	ldr	r3, [pc, #8]	; (8001448 <HAL_RCC_GetHCLKFreq+0x10>)
 800143e:	681b      	ldr	r3, [r3, #0]
}
 8001440:	4618      	mov	r0, r3
 8001442:	46bd      	mov	sp, r7
 8001444:	bc80      	pop	{r7}
 8001446:	4770      	bx	lr
 8001448:	20000000 	.word	0x20000000

0800144c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001450:	f7ff fff2 	bl	8001438 <HAL_RCC_GetHCLKFreq>
 8001454:	4602      	mov	r2, r0
 8001456:	4b05      	ldr	r3, [pc, #20]	; (800146c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	0a1b      	lsrs	r3, r3, #8
 800145c:	f003 0307 	and.w	r3, r3, #7
 8001460:	4903      	ldr	r1, [pc, #12]	; (8001470 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001462:	5ccb      	ldrb	r3, [r1, r3]
 8001464:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001468:	4618      	mov	r0, r3
 800146a:	bd80      	pop	{r7, pc}
 800146c:	40021000 	.word	0x40021000
 8001470:	080045fc 	.word	0x080045fc

08001474 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001478:	f7ff ffde 	bl	8001438 <HAL_RCC_GetHCLKFreq>
 800147c:	4602      	mov	r2, r0
 800147e:	4b05      	ldr	r3, [pc, #20]	; (8001494 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	0adb      	lsrs	r3, r3, #11
 8001484:	f003 0307 	and.w	r3, r3, #7
 8001488:	4903      	ldr	r1, [pc, #12]	; (8001498 <HAL_RCC_GetPCLK2Freq+0x24>)
 800148a:	5ccb      	ldrb	r3, [r1, r3]
 800148c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001490:	4618      	mov	r0, r3
 8001492:	bd80      	pop	{r7, pc}
 8001494:	40021000 	.word	0x40021000
 8001498:	080045fc 	.word	0x080045fc

0800149c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	220f      	movs	r2, #15
 80014aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80014ac:	4b11      	ldr	r3, [pc, #68]	; (80014f4 <HAL_RCC_GetClockConfig+0x58>)
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f003 0203 	and.w	r2, r3, #3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80014b8:	4b0e      	ldr	r3, [pc, #56]	; (80014f4 <HAL_RCC_GetClockConfig+0x58>)
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80014c4:	4b0b      	ldr	r3, [pc, #44]	; (80014f4 <HAL_RCC_GetClockConfig+0x58>)
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80014d0:	4b08      	ldr	r3, [pc, #32]	; (80014f4 <HAL_RCC_GetClockConfig+0x58>)
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	08db      	lsrs	r3, r3, #3
 80014d6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80014de:	4b06      	ldr	r3, [pc, #24]	; (80014f8 <HAL_RCC_GetClockConfig+0x5c>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 0207 	and.w	r2, r3, #7
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80014ea:	bf00      	nop
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bc80      	pop	{r7}
 80014f2:	4770      	bx	lr
 80014f4:	40021000 	.word	0x40021000
 80014f8:	40022000 	.word	0x40022000

080014fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b085      	sub	sp, #20
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001504:	4b0a      	ldr	r3, [pc, #40]	; (8001530 <RCC_Delay+0x34>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a0a      	ldr	r2, [pc, #40]	; (8001534 <RCC_Delay+0x38>)
 800150a:	fba2 2303 	umull	r2, r3, r2, r3
 800150e:	0a5b      	lsrs	r3, r3, #9
 8001510:	687a      	ldr	r2, [r7, #4]
 8001512:	fb02 f303 	mul.w	r3, r2, r3
 8001516:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001518:	bf00      	nop
  }
  while (Delay --);
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	1e5a      	subs	r2, r3, #1
 800151e:	60fa      	str	r2, [r7, #12]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d1f9      	bne.n	8001518 <RCC_Delay+0x1c>
}
 8001524:	bf00      	nop
 8001526:	bf00      	nop
 8001528:	3714      	adds	r7, #20
 800152a:	46bd      	mov	sp, r7
 800152c:	bc80      	pop	{r7}
 800152e:	4770      	bx	lr
 8001530:	20000000 	.word	0x20000000
 8001534:	10624dd3 	.word	0x10624dd3

08001538 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d101      	bne.n	800154a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e041      	b.n	80015ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001550:	b2db      	uxtb	r3, r3
 8001552:	2b00      	cmp	r3, #0
 8001554:	d106      	bne.n	8001564 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2200      	movs	r2, #0
 800155a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f000 f839 	bl	80015d6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2202      	movs	r2, #2
 8001568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	3304      	adds	r3, #4
 8001574:	4619      	mov	r1, r3
 8001576:	4610      	mov	r0, r2
 8001578:	f000 f9b4 	bl	80018e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2201      	movs	r2, #1
 8001580:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2201      	movs	r2, #1
 8001588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2201      	movs	r2, #1
 8001590:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2201      	movs	r2, #1
 8001598:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2201      	movs	r2, #1
 80015a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2201      	movs	r2, #1
 80015a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2201      	movs	r2, #1
 80015b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2201      	movs	r2, #1
 80015b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2201      	movs	r2, #1
 80015c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2201      	movs	r2, #1
 80015c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80015cc:	2300      	movs	r3, #0
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80015d6:	b480      	push	{r7}
 80015d8:	b083      	sub	sp, #12
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80015de:	bf00      	nop
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bc80      	pop	{r7}
 80015e6:	4770      	bx	lr

080015e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b085      	sub	sp, #20
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d001      	beq.n	8001600 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	e03a      	b.n	8001676 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2202      	movs	r2, #2
 8001604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	68da      	ldr	r2, [r3, #12]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f042 0201 	orr.w	r2, r2, #1
 8001616:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a18      	ldr	r2, [pc, #96]	; (8001680 <HAL_TIM_Base_Start_IT+0x98>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d00e      	beq.n	8001640 <HAL_TIM_Base_Start_IT+0x58>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800162a:	d009      	beq.n	8001640 <HAL_TIM_Base_Start_IT+0x58>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a14      	ldr	r2, [pc, #80]	; (8001684 <HAL_TIM_Base_Start_IT+0x9c>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d004      	beq.n	8001640 <HAL_TIM_Base_Start_IT+0x58>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a13      	ldr	r2, [pc, #76]	; (8001688 <HAL_TIM_Base_Start_IT+0xa0>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d111      	bne.n	8001664 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	f003 0307 	and.w	r3, r3, #7
 800164a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	2b06      	cmp	r3, #6
 8001650:	d010      	beq.n	8001674 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f042 0201 	orr.w	r2, r2, #1
 8001660:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001662:	e007      	b.n	8001674 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f042 0201 	orr.w	r2, r2, #1
 8001672:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001674:	2300      	movs	r3, #0
}
 8001676:	4618      	mov	r0, r3
 8001678:	3714      	adds	r7, #20
 800167a:	46bd      	mov	sp, r7
 800167c:	bc80      	pop	{r7}
 800167e:	4770      	bx	lr
 8001680:	40012c00 	.word	0x40012c00
 8001684:	40000400 	.word	0x40000400
 8001688:	40000800 	.word	0x40000800

0800168c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	691b      	ldr	r3, [r3, #16]
 800169a:	f003 0302 	and.w	r3, r3, #2
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d122      	bne.n	80016e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	f003 0302 	and.w	r3, r3, #2
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	d11b      	bne.n	80016e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f06f 0202 	mvn.w	r2, #2
 80016b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2201      	movs	r2, #1
 80016be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	699b      	ldr	r3, [r3, #24]
 80016c6:	f003 0303 	and.w	r3, r3, #3
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d003      	beq.n	80016d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f000 f8ed 	bl	80018ae <HAL_TIM_IC_CaptureCallback>
 80016d4:	e005      	b.n	80016e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f000 f8e0 	bl	800189c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f000 f8ef 	bl	80018c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2200      	movs	r2, #0
 80016e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	691b      	ldr	r3, [r3, #16]
 80016ee:	f003 0304 	and.w	r3, r3, #4
 80016f2:	2b04      	cmp	r3, #4
 80016f4:	d122      	bne.n	800173c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	f003 0304 	and.w	r3, r3, #4
 8001700:	2b04      	cmp	r3, #4
 8001702:	d11b      	bne.n	800173c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f06f 0204 	mvn.w	r2, #4
 800170c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2202      	movs	r2, #2
 8001712:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	699b      	ldr	r3, [r3, #24]
 800171a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800171e:	2b00      	cmp	r3, #0
 8001720:	d003      	beq.n	800172a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f000 f8c3 	bl	80018ae <HAL_TIM_IC_CaptureCallback>
 8001728:	e005      	b.n	8001736 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f000 f8b6 	bl	800189c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	f000 f8c5 	bl	80018c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2200      	movs	r2, #0
 800173a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	691b      	ldr	r3, [r3, #16]
 8001742:	f003 0308 	and.w	r3, r3, #8
 8001746:	2b08      	cmp	r3, #8
 8001748:	d122      	bne.n	8001790 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	f003 0308 	and.w	r3, r3, #8
 8001754:	2b08      	cmp	r3, #8
 8001756:	d11b      	bne.n	8001790 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f06f 0208 	mvn.w	r2, #8
 8001760:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2204      	movs	r2, #4
 8001766:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	69db      	ldr	r3, [r3, #28]
 800176e:	f003 0303 	and.w	r3, r3, #3
 8001772:	2b00      	cmp	r3, #0
 8001774:	d003      	beq.n	800177e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f000 f899 	bl	80018ae <HAL_TIM_IC_CaptureCallback>
 800177c:	e005      	b.n	800178a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f000 f88c 	bl	800189c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f000 f89b 	bl	80018c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2200      	movs	r2, #0
 800178e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	691b      	ldr	r3, [r3, #16]
 8001796:	f003 0310 	and.w	r3, r3, #16
 800179a:	2b10      	cmp	r3, #16
 800179c:	d122      	bne.n	80017e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	f003 0310 	and.w	r3, r3, #16
 80017a8:	2b10      	cmp	r3, #16
 80017aa:	d11b      	bne.n	80017e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f06f 0210 	mvn.w	r2, #16
 80017b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2208      	movs	r2, #8
 80017ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	69db      	ldr	r3, [r3, #28]
 80017c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d003      	beq.n	80017d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f000 f86f 	bl	80018ae <HAL_TIM_IC_CaptureCallback>
 80017d0:	e005      	b.n	80017de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f000 f862 	bl	800189c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f000 f871 	bl	80018c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2200      	movs	r2, #0
 80017e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	691b      	ldr	r3, [r3, #16]
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d10e      	bne.n	8001810 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	f003 0301 	and.w	r3, r3, #1
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d107      	bne.n	8001810 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f06f 0201 	mvn.w	r2, #1
 8001808:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f7fe fde6 	bl	80003dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	691b      	ldr	r3, [r3, #16]
 8001816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800181a:	2b80      	cmp	r3, #128	; 0x80
 800181c:	d10e      	bne.n	800183c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001828:	2b80      	cmp	r3, #128	; 0x80
 800182a:	d107      	bne.n	800183c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001834:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f000 f8bf 	bl	80019ba <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	691b      	ldr	r3, [r3, #16]
 8001842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001846:	2b40      	cmp	r3, #64	; 0x40
 8001848:	d10e      	bne.n	8001868 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001854:	2b40      	cmp	r3, #64	; 0x40
 8001856:	d107      	bne.n	8001868 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001860:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f000 f835 	bl	80018d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	691b      	ldr	r3, [r3, #16]
 800186e:	f003 0320 	and.w	r3, r3, #32
 8001872:	2b20      	cmp	r3, #32
 8001874:	d10e      	bne.n	8001894 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	f003 0320 	and.w	r3, r3, #32
 8001880:	2b20      	cmp	r3, #32
 8001882:	d107      	bne.n	8001894 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f06f 0220 	mvn.w	r2, #32
 800188c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f000 f88a 	bl	80019a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001894:	bf00      	nop
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}

0800189c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80018a4:	bf00      	nop
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bc80      	pop	{r7}
 80018ac:	4770      	bx	lr

080018ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80018ae:	b480      	push	{r7}
 80018b0:	b083      	sub	sp, #12
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80018b6:	bf00      	nop
 80018b8:	370c      	adds	r7, #12
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bc80      	pop	{r7}
 80018be:	4770      	bx	lr

080018c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80018c8:	bf00      	nop
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bc80      	pop	{r7}
 80018d0:	4770      	bx	lr

080018d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80018d2:	b480      	push	{r7}
 80018d4:	b083      	sub	sp, #12
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80018da:	bf00      	nop
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	bc80      	pop	{r7}
 80018e2:	4770      	bx	lr

080018e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b085      	sub	sp, #20
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	4a29      	ldr	r2, [pc, #164]	; (800199c <TIM_Base_SetConfig+0xb8>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d00b      	beq.n	8001914 <TIM_Base_SetConfig+0x30>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001902:	d007      	beq.n	8001914 <TIM_Base_SetConfig+0x30>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	4a26      	ldr	r2, [pc, #152]	; (80019a0 <TIM_Base_SetConfig+0xbc>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d003      	beq.n	8001914 <TIM_Base_SetConfig+0x30>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	4a25      	ldr	r2, [pc, #148]	; (80019a4 <TIM_Base_SetConfig+0xc0>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d108      	bne.n	8001926 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800191a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	68fa      	ldr	r2, [r7, #12]
 8001922:	4313      	orrs	r3, r2
 8001924:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a1c      	ldr	r2, [pc, #112]	; (800199c <TIM_Base_SetConfig+0xb8>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d00b      	beq.n	8001946 <TIM_Base_SetConfig+0x62>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001934:	d007      	beq.n	8001946 <TIM_Base_SetConfig+0x62>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a19      	ldr	r2, [pc, #100]	; (80019a0 <TIM_Base_SetConfig+0xbc>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d003      	beq.n	8001946 <TIM_Base_SetConfig+0x62>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a18      	ldr	r2, [pc, #96]	; (80019a4 <TIM_Base_SetConfig+0xc0>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d108      	bne.n	8001958 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800194c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	68db      	ldr	r3, [r3, #12]
 8001952:	68fa      	ldr	r2, [r7, #12]
 8001954:	4313      	orrs	r3, r2
 8001956:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	695b      	ldr	r3, [r3, #20]
 8001962:	4313      	orrs	r3, r2
 8001964:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	68fa      	ldr	r2, [r7, #12]
 800196a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	689a      	ldr	r2, [r3, #8]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	4a07      	ldr	r2, [pc, #28]	; (800199c <TIM_Base_SetConfig+0xb8>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d103      	bne.n	800198c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	691a      	ldr	r2, [r3, #16]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2201      	movs	r2, #1
 8001990:	615a      	str	r2, [r3, #20]
}
 8001992:	bf00      	nop
 8001994:	3714      	adds	r7, #20
 8001996:	46bd      	mov	sp, r7
 8001998:	bc80      	pop	{r7}
 800199a:	4770      	bx	lr
 800199c:	40012c00 	.word	0x40012c00
 80019a0:	40000400 	.word	0x40000400
 80019a4:	40000800 	.word	0x40000800

080019a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80019b0:	bf00      	nop
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bc80      	pop	{r7}
 80019b8:	4770      	bx	lr

080019ba <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80019ba:	b480      	push	{r7}
 80019bc:	b083      	sub	sp, #12
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80019c2:	bf00      	nop
 80019c4:	370c      	adds	r7, #12
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bc80      	pop	{r7}
 80019ca:	4770      	bx	lr

080019cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d101      	bne.n	80019de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e042      	b.n	8001a64 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d106      	bne.n	80019f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2200      	movs	r2, #0
 80019ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f7fe fe40 	bl	8000678 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2224      	movs	r2, #36	; 0x24
 80019fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	68da      	ldr	r2, [r3, #12]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001a0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f000 f91d 	bl	8001c50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	691a      	ldr	r2, [r3, #16]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001a24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	695a      	ldr	r2, [r3, #20]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001a34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	68da      	ldr	r2, [r3, #12]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2220      	movs	r2, #32
 8001a50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2220      	movs	r2, #32
 8001a58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001a62:	2300      	movs	r3, #0
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3708      	adds	r7, #8
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b08a      	sub	sp, #40	; 0x28
 8001a70:	af02      	add	r7, sp, #8
 8001a72:	60f8      	str	r0, [r7, #12]
 8001a74:	60b9      	str	r1, [r7, #8]
 8001a76:	603b      	str	r3, [r7, #0]
 8001a78:	4613      	mov	r3, r2
 8001a7a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	2b20      	cmp	r3, #32
 8001a8a:	d16d      	bne.n	8001b68 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d002      	beq.n	8001a98 <HAL_UART_Transmit+0x2c>
 8001a92:	88fb      	ldrh	r3, [r7, #6]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d101      	bne.n	8001a9c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e066      	b.n	8001b6a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	2221      	movs	r2, #33	; 0x21
 8001aa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001aaa:	f7fe fe7f 	bl	80007ac <HAL_GetTick>
 8001aae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	88fa      	ldrh	r2, [r7, #6]
 8001ab4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	88fa      	ldrh	r2, [r7, #6]
 8001aba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ac4:	d108      	bne.n	8001ad8 <HAL_UART_Transmit+0x6c>
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	691b      	ldr	r3, [r3, #16]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d104      	bne.n	8001ad8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	61bb      	str	r3, [r7, #24]
 8001ad6:	e003      	b.n	8001ae0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001adc:	2300      	movs	r3, #0
 8001ade:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001ae0:	e02a      	b.n	8001b38 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	9300      	str	r3, [sp, #0]
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	2180      	movs	r1, #128	; 0x80
 8001aec:	68f8      	ldr	r0, [r7, #12]
 8001aee:	f000 f840 	bl	8001b72 <UART_WaitOnFlagUntilTimeout>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	e036      	b.n	8001b6a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d10b      	bne.n	8001b1a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	881b      	ldrh	r3, [r3, #0]
 8001b06:	461a      	mov	r2, r3
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001b10:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001b12:	69bb      	ldr	r3, [r7, #24]
 8001b14:	3302      	adds	r3, #2
 8001b16:	61bb      	str	r3, [r7, #24]
 8001b18:	e007      	b.n	8001b2a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	781a      	ldrb	r2, [r3, #0]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	3301      	adds	r3, #1
 8001b28:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001b2e:	b29b      	uxth	r3, r3
 8001b30:	3b01      	subs	r3, #1
 8001b32:	b29a      	uxth	r2, r3
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001b3c:	b29b      	uxth	r3, r3
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d1cf      	bne.n	8001ae2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	9300      	str	r3, [sp, #0]
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	2140      	movs	r1, #64	; 0x40
 8001b4c:	68f8      	ldr	r0, [r7, #12]
 8001b4e:	f000 f810 	bl	8001b72 <UART_WaitOnFlagUntilTimeout>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	e006      	b.n	8001b6a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	2220      	movs	r2, #32
 8001b60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001b64:	2300      	movs	r3, #0
 8001b66:	e000      	b.n	8001b6a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001b68:	2302      	movs	r3, #2
  }
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3720      	adds	r7, #32
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b090      	sub	sp, #64	; 0x40
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	60f8      	str	r0, [r7, #12]
 8001b7a:	60b9      	str	r1, [r7, #8]
 8001b7c:	603b      	str	r3, [r7, #0]
 8001b7e:	4613      	mov	r3, r2
 8001b80:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001b82:	e050      	b.n	8001c26 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b8a:	d04c      	beq.n	8001c26 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001b8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d007      	beq.n	8001ba2 <UART_WaitOnFlagUntilTimeout+0x30>
 8001b92:	f7fe fe0b 	bl	80007ac <HAL_GetTick>
 8001b96:	4602      	mov	r2, r0
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d241      	bcs.n	8001c26 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	330c      	adds	r3, #12
 8001ba8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bac:	e853 3f00 	ldrex	r3, [r3]
 8001bb0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	330c      	adds	r3, #12
 8001bc0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001bc2:	637a      	str	r2, [r7, #52]	; 0x34
 8001bc4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001bc6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001bc8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001bca:	e841 2300 	strex	r3, r2, [r1]
 8001bce:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d1e5      	bne.n	8001ba2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	3314      	adds	r3, #20
 8001bdc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	e853 3f00 	ldrex	r3, [r3]
 8001be4:	613b      	str	r3, [r7, #16]
   return(result);
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	f023 0301 	bic.w	r3, r3, #1
 8001bec:	63bb      	str	r3, [r7, #56]	; 0x38
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	3314      	adds	r3, #20
 8001bf4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001bf6:	623a      	str	r2, [r7, #32]
 8001bf8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001bfa:	69f9      	ldr	r1, [r7, #28]
 8001bfc:	6a3a      	ldr	r2, [r7, #32]
 8001bfe:	e841 2300 	strex	r3, r2, [r1]
 8001c02:	61bb      	str	r3, [r7, #24]
   return(result);
 8001c04:	69bb      	ldr	r3, [r7, #24]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d1e5      	bne.n	8001bd6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	2220      	movs	r2, #32
 8001c0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2220      	movs	r2, #32
 8001c16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e00f      	b.n	8001c46 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	4013      	ands	r3, r2
 8001c30:	68ba      	ldr	r2, [r7, #8]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	bf0c      	ite	eq
 8001c36:	2301      	moveq	r3, #1
 8001c38:	2300      	movne	r3, #0
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	79fb      	ldrb	r3, [r7, #7]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d09f      	beq.n	8001b84 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3740      	adds	r7, #64	; 0x40
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
	...

08001c50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	691b      	ldr	r3, [r3, #16]
 8001c5e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	68da      	ldr	r2, [r3, #12]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	430a      	orrs	r2, r1
 8001c6c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	689a      	ldr	r2, [r3, #8]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	691b      	ldr	r3, [r3, #16]
 8001c76:	431a      	orrs	r2, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	695b      	ldr	r3, [r3, #20]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	68db      	ldr	r3, [r3, #12]
 8001c86:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001c8a:	f023 030c 	bic.w	r3, r3, #12
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	6812      	ldr	r2, [r2, #0]
 8001c92:	68b9      	ldr	r1, [r7, #8]
 8001c94:	430b      	orrs	r3, r1
 8001c96:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	695b      	ldr	r3, [r3, #20]
 8001c9e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	699a      	ldr	r2, [r3, #24]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	430a      	orrs	r2, r1
 8001cac:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a2c      	ldr	r2, [pc, #176]	; (8001d64 <UART_SetConfig+0x114>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d103      	bne.n	8001cc0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001cb8:	f7ff fbdc 	bl	8001474 <HAL_RCC_GetPCLK2Freq>
 8001cbc:	60f8      	str	r0, [r7, #12]
 8001cbe:	e002      	b.n	8001cc6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001cc0:	f7ff fbc4 	bl	800144c <HAL_RCC_GetPCLK1Freq>
 8001cc4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001cc6:	68fa      	ldr	r2, [r7, #12]
 8001cc8:	4613      	mov	r3, r2
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	4413      	add	r3, r2
 8001cce:	009a      	lsls	r2, r3, #2
 8001cd0:	441a      	add	r2, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cdc:	4a22      	ldr	r2, [pc, #136]	; (8001d68 <UART_SetConfig+0x118>)
 8001cde:	fba2 2303 	umull	r2, r3, r2, r3
 8001ce2:	095b      	lsrs	r3, r3, #5
 8001ce4:	0119      	lsls	r1, r3, #4
 8001ce6:	68fa      	ldr	r2, [r7, #12]
 8001ce8:	4613      	mov	r3, r2
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	4413      	add	r3, r2
 8001cee:	009a      	lsls	r2, r3, #2
 8001cf0:	441a      	add	r2, r3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001cfc:	4b1a      	ldr	r3, [pc, #104]	; (8001d68 <UART_SetConfig+0x118>)
 8001cfe:	fba3 0302 	umull	r0, r3, r3, r2
 8001d02:	095b      	lsrs	r3, r3, #5
 8001d04:	2064      	movs	r0, #100	; 0x64
 8001d06:	fb00 f303 	mul.w	r3, r0, r3
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	011b      	lsls	r3, r3, #4
 8001d0e:	3332      	adds	r3, #50	; 0x32
 8001d10:	4a15      	ldr	r2, [pc, #84]	; (8001d68 <UART_SetConfig+0x118>)
 8001d12:	fba2 2303 	umull	r2, r3, r2, r3
 8001d16:	095b      	lsrs	r3, r3, #5
 8001d18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d1c:	4419      	add	r1, r3
 8001d1e:	68fa      	ldr	r2, [r7, #12]
 8001d20:	4613      	mov	r3, r2
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	4413      	add	r3, r2
 8001d26:	009a      	lsls	r2, r3, #2
 8001d28:	441a      	add	r2, r3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d34:	4b0c      	ldr	r3, [pc, #48]	; (8001d68 <UART_SetConfig+0x118>)
 8001d36:	fba3 0302 	umull	r0, r3, r3, r2
 8001d3a:	095b      	lsrs	r3, r3, #5
 8001d3c:	2064      	movs	r0, #100	; 0x64
 8001d3e:	fb00 f303 	mul.w	r3, r0, r3
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	011b      	lsls	r3, r3, #4
 8001d46:	3332      	adds	r3, #50	; 0x32
 8001d48:	4a07      	ldr	r2, [pc, #28]	; (8001d68 <UART_SetConfig+0x118>)
 8001d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d4e:	095b      	lsrs	r3, r3, #5
 8001d50:	f003 020f 	and.w	r2, r3, #15
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	440a      	add	r2, r1
 8001d5a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001d5c:	bf00      	nop
 8001d5e:	3710      	adds	r7, #16
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	40013800 	.word	0x40013800
 8001d68:	51eb851f 	.word	0x51eb851f

08001d6c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f103 0208 	add.w	r2, r3, #8
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f04f 32ff 	mov.w	r2, #4294967295
 8001d84:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f103 0208 	add.w	r2, r3, #8
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f103 0208 	add.w	r2, r3, #8
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001da0:	bf00      	nop
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bc80      	pop	{r7}
 8001da8:	4770      	bx	lr

08001daa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001daa:	b480      	push	{r7}
 8001dac:	b083      	sub	sp, #12
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001db8:	bf00      	nop
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bc80      	pop	{r7}
 8001dc0:	4770      	bx	lr

08001dc2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	b085      	sub	sp, #20
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
 8001dca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	68fa      	ldr	r2, [r7, #12]
 8001dd6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	689a      	ldr	r2, [r3, #8]
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	683a      	ldr	r2, [r7, #0]
 8001de6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	683a      	ldr	r2, [r7, #0]
 8001dec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	1c5a      	adds	r2, r3, #1
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	601a      	str	r2, [r3, #0]
}
 8001dfe:	bf00      	nop
 8001e00:	3714      	adds	r7, #20
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bc80      	pop	{r7}
 8001e06:	4770      	bx	lr

08001e08 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b085      	sub	sp, #20
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e1e:	d103      	bne.n	8001e28 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	691b      	ldr	r3, [r3, #16]
 8001e24:	60fb      	str	r3, [r7, #12]
 8001e26:	e00c      	b.n	8001e42 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	3308      	adds	r3, #8
 8001e2c:	60fb      	str	r3, [r7, #12]
 8001e2e:	e002      	b.n	8001e36 <vListInsert+0x2e>
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	60fb      	str	r3, [r7, #12]
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	68ba      	ldr	r2, [r7, #8]
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d2f6      	bcs.n	8001e30 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	685a      	ldr	r2, [r3, #4]
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	683a      	ldr	r2, [r7, #0]
 8001e50:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	68fa      	ldr	r2, [r7, #12]
 8001e56:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	683a      	ldr	r2, [r7, #0]
 8001e5c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	1c5a      	adds	r2, r3, #1
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	601a      	str	r2, [r3, #0]
}
 8001e6e:	bf00      	nop
 8001e70:	3714      	adds	r7, #20
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bc80      	pop	{r7}
 8001e76:	4770      	bx	lr

08001e78 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b085      	sub	sp, #20
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	691b      	ldr	r3, [r3, #16]
 8001e84:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	6892      	ldr	r2, [r2, #8]
 8001e8e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	6852      	ldr	r2, [r2, #4]
 8001e98:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d103      	bne.n	8001eac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	689a      	ldr	r2, [r3, #8]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	1e5a      	subs	r2, r3, #1
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3714      	adds	r7, #20
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bc80      	pop	{r7}
 8001ec8:	4770      	bx	lr
	...

08001ecc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d10a      	bne.n	8001ef6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ee4:	f383 8811 	msr	BASEPRI, r3
 8001ee8:	f3bf 8f6f 	isb	sy
 8001eec:	f3bf 8f4f 	dsb	sy
 8001ef0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001ef2:	bf00      	nop
 8001ef4:	e7fe      	b.n	8001ef4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8001ef6:	f001 fb89 	bl	800360c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f02:	68f9      	ldr	r1, [r7, #12]
 8001f04:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001f06:	fb01 f303 	mul.w	r3, r1, r3
 8001f0a:	441a      	add	r2, r3
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2200      	movs	r2, #0
 8001f14:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f26:	3b01      	subs	r3, #1
 8001f28:	68f9      	ldr	r1, [r7, #12]
 8001f2a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001f2c:	fb01 f303 	mul.w	r3, r1, r3
 8001f30:	441a      	add	r2, r3
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	22ff      	movs	r2, #255	; 0xff
 8001f3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	22ff      	movs	r2, #255	; 0xff
 8001f42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d114      	bne.n	8001f76 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	691b      	ldr	r3, [r3, #16]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d01a      	beq.n	8001f8a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	3310      	adds	r3, #16
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f000 ff99 	bl	8002e90 <xTaskRemoveFromEventList>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d012      	beq.n	8001f8a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001f64:	4b0c      	ldr	r3, [pc, #48]	; (8001f98 <xQueueGenericReset+0xcc>)
 8001f66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f6a:	601a      	str	r2, [r3, #0]
 8001f6c:	f3bf 8f4f 	dsb	sy
 8001f70:	f3bf 8f6f 	isb	sy
 8001f74:	e009      	b.n	8001f8a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	3310      	adds	r3, #16
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7ff fef6 	bl	8001d6c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	3324      	adds	r3, #36	; 0x24
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7ff fef1 	bl	8001d6c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001f8a:	f001 fb6f 	bl	800366c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001f8e:	2301      	movs	r3, #1
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3710      	adds	r7, #16
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	e000ed04 	.word	0xe000ed04

08001f9c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b08a      	sub	sp, #40	; 0x28
 8001fa0:	af02      	add	r7, sp, #8
 8001fa2:	60f8      	str	r0, [r7, #12]
 8001fa4:	60b9      	str	r1, [r7, #8]
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d10a      	bne.n	8001fc6 <xQueueGenericCreate+0x2a>
	__asm volatile
 8001fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fb4:	f383 8811 	msr	BASEPRI, r3
 8001fb8:	f3bf 8f6f 	isb	sy
 8001fbc:	f3bf 8f4f 	dsb	sy
 8001fc0:	613b      	str	r3, [r7, #16]
}
 8001fc2:	bf00      	nop
 8001fc4:	e7fe      	b.n	8001fc4 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d102      	bne.n	8001fd2 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	61fb      	str	r3, [r7, #28]
 8001fd0:	e004      	b.n	8001fdc <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	68ba      	ldr	r2, [r7, #8]
 8001fd6:	fb02 f303 	mul.w	r3, r2, r3
 8001fda:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	3348      	adds	r3, #72	; 0x48
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f001 fbd5 	bl	8003790 <pvPortMalloc>
 8001fe6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d00f      	beq.n	800200e <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8001fee:	69bb      	ldr	r3, [r7, #24]
 8001ff0:	3348      	adds	r3, #72	; 0x48
 8001ff2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001ffc:	79fa      	ldrb	r2, [r7, #7]
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	9300      	str	r3, [sp, #0]
 8002002:	4613      	mov	r3, r2
 8002004:	697a      	ldr	r2, [r7, #20]
 8002006:	68b9      	ldr	r1, [r7, #8]
 8002008:	68f8      	ldr	r0, [r7, #12]
 800200a:	f000 f805 	bl	8002018 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800200e:	69bb      	ldr	r3, [r7, #24]
	}
 8002010:	4618      	mov	r0, r3
 8002012:	3720      	adds	r7, #32
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	60f8      	str	r0, [r7, #12]
 8002020:	60b9      	str	r1, [r7, #8]
 8002022:	607a      	str	r2, [r7, #4]
 8002024:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d103      	bne.n	8002034 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800202c:	69bb      	ldr	r3, [r7, #24]
 800202e:	69ba      	ldr	r2, [r7, #24]
 8002030:	601a      	str	r2, [r3, #0]
 8002032:	e002      	b.n	800203a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	68fa      	ldr	r2, [r7, #12]
 800203e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002040:	69bb      	ldr	r3, [r7, #24]
 8002042:	68ba      	ldr	r2, [r7, #8]
 8002044:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002046:	2101      	movs	r1, #1
 8002048:	69b8      	ldr	r0, [r7, #24]
 800204a:	f7ff ff3f 	bl	8001ecc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800204e:	bf00      	nop
 8002050:	3710      	adds	r7, #16
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
	...

08002058 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b08e      	sub	sp, #56	; 0x38
 800205c:	af00      	add	r7, sp, #0
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	60b9      	str	r1, [r7, #8]
 8002062:	607a      	str	r2, [r7, #4]
 8002064:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002066:	2300      	movs	r3, #0
 8002068:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800206e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002070:	2b00      	cmp	r3, #0
 8002072:	d10a      	bne.n	800208a <xQueueGenericSend+0x32>
	__asm volatile
 8002074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002078:	f383 8811 	msr	BASEPRI, r3
 800207c:	f3bf 8f6f 	isb	sy
 8002080:	f3bf 8f4f 	dsb	sy
 8002084:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002086:	bf00      	nop
 8002088:	e7fe      	b.n	8002088 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d103      	bne.n	8002098 <xQueueGenericSend+0x40>
 8002090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002094:	2b00      	cmp	r3, #0
 8002096:	d101      	bne.n	800209c <xQueueGenericSend+0x44>
 8002098:	2301      	movs	r3, #1
 800209a:	e000      	b.n	800209e <xQueueGenericSend+0x46>
 800209c:	2300      	movs	r3, #0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d10a      	bne.n	80020b8 <xQueueGenericSend+0x60>
	__asm volatile
 80020a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020a6:	f383 8811 	msr	BASEPRI, r3
 80020aa:	f3bf 8f6f 	isb	sy
 80020ae:	f3bf 8f4f 	dsb	sy
 80020b2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80020b4:	bf00      	nop
 80020b6:	e7fe      	b.n	80020b6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d103      	bne.n	80020c6 <xQueueGenericSend+0x6e>
 80020be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d101      	bne.n	80020ca <xQueueGenericSend+0x72>
 80020c6:	2301      	movs	r3, #1
 80020c8:	e000      	b.n	80020cc <xQueueGenericSend+0x74>
 80020ca:	2300      	movs	r3, #0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d10a      	bne.n	80020e6 <xQueueGenericSend+0x8e>
	__asm volatile
 80020d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020d4:	f383 8811 	msr	BASEPRI, r3
 80020d8:	f3bf 8f6f 	isb	sy
 80020dc:	f3bf 8f4f 	dsb	sy
 80020e0:	623b      	str	r3, [r7, #32]
}
 80020e2:	bf00      	nop
 80020e4:	e7fe      	b.n	80020e4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80020e6:	f001 f897 	bl	8003218 <xTaskGetSchedulerState>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d102      	bne.n	80020f6 <xQueueGenericSend+0x9e>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d101      	bne.n	80020fa <xQueueGenericSend+0xa2>
 80020f6:	2301      	movs	r3, #1
 80020f8:	e000      	b.n	80020fc <xQueueGenericSend+0xa4>
 80020fa:	2300      	movs	r3, #0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d10a      	bne.n	8002116 <xQueueGenericSend+0xbe>
	__asm volatile
 8002100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002104:	f383 8811 	msr	BASEPRI, r3
 8002108:	f3bf 8f6f 	isb	sy
 800210c:	f3bf 8f4f 	dsb	sy
 8002110:	61fb      	str	r3, [r7, #28]
}
 8002112:	bf00      	nop
 8002114:	e7fe      	b.n	8002114 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002116:	f001 fa79 	bl	800360c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800211a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800211c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800211e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002122:	429a      	cmp	r2, r3
 8002124:	d302      	bcc.n	800212c <xQueueGenericSend+0xd4>
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	2b02      	cmp	r3, #2
 800212a:	d129      	bne.n	8002180 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800212c:	683a      	ldr	r2, [r7, #0]
 800212e:	68b9      	ldr	r1, [r7, #8]
 8002130:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002132:	f000 f96f 	bl	8002414 <prvCopyDataToQueue>
 8002136:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800213a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213c:	2b00      	cmp	r3, #0
 800213e:	d010      	beq.n	8002162 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002142:	3324      	adds	r3, #36	; 0x24
 8002144:	4618      	mov	r0, r3
 8002146:	f000 fea3 	bl	8002e90 <xTaskRemoveFromEventList>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d013      	beq.n	8002178 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002150:	4b3f      	ldr	r3, [pc, #252]	; (8002250 <xQueueGenericSend+0x1f8>)
 8002152:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002156:	601a      	str	r2, [r3, #0]
 8002158:	f3bf 8f4f 	dsb	sy
 800215c:	f3bf 8f6f 	isb	sy
 8002160:	e00a      	b.n	8002178 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002164:	2b00      	cmp	r3, #0
 8002166:	d007      	beq.n	8002178 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002168:	4b39      	ldr	r3, [pc, #228]	; (8002250 <xQueueGenericSend+0x1f8>)
 800216a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	f3bf 8f4f 	dsb	sy
 8002174:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002178:	f001 fa78 	bl	800366c <vPortExitCritical>
				return pdPASS;
 800217c:	2301      	movs	r3, #1
 800217e:	e063      	b.n	8002248 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d103      	bne.n	800218e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002186:	f001 fa71 	bl	800366c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800218a:	2300      	movs	r3, #0
 800218c:	e05c      	b.n	8002248 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800218e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002190:	2b00      	cmp	r3, #0
 8002192:	d106      	bne.n	80021a2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002194:	f107 0314 	add.w	r3, r7, #20
 8002198:	4618      	mov	r0, r3
 800219a:	f000 fedb 	bl	8002f54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800219e:	2301      	movs	r3, #1
 80021a0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80021a2:	f001 fa63 	bl	800366c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80021a6:	f000 fc85 	bl	8002ab4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80021aa:	f001 fa2f 	bl	800360c <vPortEnterCritical>
 80021ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80021b4:	b25b      	sxtb	r3, r3
 80021b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021ba:	d103      	bne.n	80021c4 <xQueueGenericSend+0x16c>
 80021bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021be:	2200      	movs	r2, #0
 80021c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80021ca:	b25b      	sxtb	r3, r3
 80021cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021d0:	d103      	bne.n	80021da <xQueueGenericSend+0x182>
 80021d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021d4:	2200      	movs	r2, #0
 80021d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80021da:	f001 fa47 	bl	800366c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80021de:	1d3a      	adds	r2, r7, #4
 80021e0:	f107 0314 	add.w	r3, r7, #20
 80021e4:	4611      	mov	r1, r2
 80021e6:	4618      	mov	r0, r3
 80021e8:	f000 feca 	bl	8002f80 <xTaskCheckForTimeOut>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d124      	bne.n	800223c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80021f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80021f4:	f000 fa06 	bl	8002604 <prvIsQueueFull>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d018      	beq.n	8002230 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80021fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002200:	3310      	adds	r3, #16
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	4611      	mov	r1, r2
 8002206:	4618      	mov	r0, r3
 8002208:	f000 fe1e 	bl	8002e48 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800220c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800220e:	f000 f991 	bl	8002534 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002212:	f000 fc5d 	bl	8002ad0 <xTaskResumeAll>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	f47f af7c 	bne.w	8002116 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800221e:	4b0c      	ldr	r3, [pc, #48]	; (8002250 <xQueueGenericSend+0x1f8>)
 8002220:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002224:	601a      	str	r2, [r3, #0]
 8002226:	f3bf 8f4f 	dsb	sy
 800222a:	f3bf 8f6f 	isb	sy
 800222e:	e772      	b.n	8002116 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002230:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002232:	f000 f97f 	bl	8002534 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002236:	f000 fc4b 	bl	8002ad0 <xTaskResumeAll>
 800223a:	e76c      	b.n	8002116 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800223c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800223e:	f000 f979 	bl	8002534 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002242:	f000 fc45 	bl	8002ad0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002246:	2300      	movs	r3, #0
		}
	}
}
 8002248:	4618      	mov	r0, r3
 800224a:	3738      	adds	r7, #56	; 0x38
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	e000ed04 	.word	0xe000ed04

08002254 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b08c      	sub	sp, #48	; 0x30
 8002258:	af00      	add	r7, sp, #0
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	60b9      	str	r1, [r7, #8]
 800225e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002260:	2300      	movs	r3, #0
 8002262:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800226a:	2b00      	cmp	r3, #0
 800226c:	d10a      	bne.n	8002284 <xQueueReceive+0x30>
	__asm volatile
 800226e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002272:	f383 8811 	msr	BASEPRI, r3
 8002276:	f3bf 8f6f 	isb	sy
 800227a:	f3bf 8f4f 	dsb	sy
 800227e:	623b      	str	r3, [r7, #32]
}
 8002280:	bf00      	nop
 8002282:	e7fe      	b.n	8002282 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d103      	bne.n	8002292 <xQueueReceive+0x3e>
 800228a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228e:	2b00      	cmp	r3, #0
 8002290:	d101      	bne.n	8002296 <xQueueReceive+0x42>
 8002292:	2301      	movs	r3, #1
 8002294:	e000      	b.n	8002298 <xQueueReceive+0x44>
 8002296:	2300      	movs	r3, #0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d10a      	bne.n	80022b2 <xQueueReceive+0x5e>
	__asm volatile
 800229c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022a0:	f383 8811 	msr	BASEPRI, r3
 80022a4:	f3bf 8f6f 	isb	sy
 80022a8:	f3bf 8f4f 	dsb	sy
 80022ac:	61fb      	str	r3, [r7, #28]
}
 80022ae:	bf00      	nop
 80022b0:	e7fe      	b.n	80022b0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80022b2:	f000 ffb1 	bl	8003218 <xTaskGetSchedulerState>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d102      	bne.n	80022c2 <xQueueReceive+0x6e>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d101      	bne.n	80022c6 <xQueueReceive+0x72>
 80022c2:	2301      	movs	r3, #1
 80022c4:	e000      	b.n	80022c8 <xQueueReceive+0x74>
 80022c6:	2300      	movs	r3, #0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d10a      	bne.n	80022e2 <xQueueReceive+0x8e>
	__asm volatile
 80022cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022d0:	f383 8811 	msr	BASEPRI, r3
 80022d4:	f3bf 8f6f 	isb	sy
 80022d8:	f3bf 8f4f 	dsb	sy
 80022dc:	61bb      	str	r3, [r7, #24]
}
 80022de:	bf00      	nop
 80022e0:	e7fe      	b.n	80022e0 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80022e2:	f001 f993 	bl	800360c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80022e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ea:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80022ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d01f      	beq.n	8002332 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80022f2:	68b9      	ldr	r1, [r7, #8]
 80022f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80022f6:	f000 f8f7 	bl	80024e8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80022fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fc:	1e5a      	subs	r2, r3, #1
 80022fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002300:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002304:	691b      	ldr	r3, [r3, #16]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d00f      	beq.n	800232a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800230a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800230c:	3310      	adds	r3, #16
 800230e:	4618      	mov	r0, r3
 8002310:	f000 fdbe 	bl	8002e90 <xTaskRemoveFromEventList>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d007      	beq.n	800232a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800231a:	4b3d      	ldr	r3, [pc, #244]	; (8002410 <xQueueReceive+0x1bc>)
 800231c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002320:	601a      	str	r2, [r3, #0]
 8002322:	f3bf 8f4f 	dsb	sy
 8002326:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800232a:	f001 f99f 	bl	800366c <vPortExitCritical>
				return pdPASS;
 800232e:	2301      	movs	r3, #1
 8002330:	e069      	b.n	8002406 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d103      	bne.n	8002340 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002338:	f001 f998 	bl	800366c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800233c:	2300      	movs	r3, #0
 800233e:	e062      	b.n	8002406 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002342:	2b00      	cmp	r3, #0
 8002344:	d106      	bne.n	8002354 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002346:	f107 0310 	add.w	r3, r7, #16
 800234a:	4618      	mov	r0, r3
 800234c:	f000 fe02 	bl	8002f54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002350:	2301      	movs	r3, #1
 8002352:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002354:	f001 f98a 	bl	800366c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002358:	f000 fbac 	bl	8002ab4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800235c:	f001 f956 	bl	800360c <vPortEnterCritical>
 8002360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002362:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002366:	b25b      	sxtb	r3, r3
 8002368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800236c:	d103      	bne.n	8002376 <xQueueReceive+0x122>
 800236e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002370:	2200      	movs	r2, #0
 8002372:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002378:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800237c:	b25b      	sxtb	r3, r3
 800237e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002382:	d103      	bne.n	800238c <xQueueReceive+0x138>
 8002384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002386:	2200      	movs	r2, #0
 8002388:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800238c:	f001 f96e 	bl	800366c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002390:	1d3a      	adds	r2, r7, #4
 8002392:	f107 0310 	add.w	r3, r7, #16
 8002396:	4611      	mov	r1, r2
 8002398:	4618      	mov	r0, r3
 800239a:	f000 fdf1 	bl	8002f80 <xTaskCheckForTimeOut>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d123      	bne.n	80023ec <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80023a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80023a6:	f000 f917 	bl	80025d8 <prvIsQueueEmpty>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d017      	beq.n	80023e0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80023b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023b2:	3324      	adds	r3, #36	; 0x24
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	4611      	mov	r1, r2
 80023b8:	4618      	mov	r0, r3
 80023ba:	f000 fd45 	bl	8002e48 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80023be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80023c0:	f000 f8b8 	bl	8002534 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80023c4:	f000 fb84 	bl	8002ad0 <xTaskResumeAll>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d189      	bne.n	80022e2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80023ce:	4b10      	ldr	r3, [pc, #64]	; (8002410 <xQueueReceive+0x1bc>)
 80023d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023d4:	601a      	str	r2, [r3, #0]
 80023d6:	f3bf 8f4f 	dsb	sy
 80023da:	f3bf 8f6f 	isb	sy
 80023de:	e780      	b.n	80022e2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80023e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80023e2:	f000 f8a7 	bl	8002534 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80023e6:	f000 fb73 	bl	8002ad0 <xTaskResumeAll>
 80023ea:	e77a      	b.n	80022e2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80023ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80023ee:	f000 f8a1 	bl	8002534 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80023f2:	f000 fb6d 	bl	8002ad0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80023f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80023f8:	f000 f8ee 	bl	80025d8 <prvIsQueueEmpty>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	f43f af6f 	beq.w	80022e2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002404:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002406:	4618      	mov	r0, r3
 8002408:	3730      	adds	r7, #48	; 0x30
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	e000ed04 	.word	0xe000ed04

08002414 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b086      	sub	sp, #24
 8002418:	af00      	add	r7, sp, #0
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	60b9      	str	r1, [r7, #8]
 800241e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002420:	2300      	movs	r3, #0
 8002422:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002428:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242e:	2b00      	cmp	r3, #0
 8002430:	d10d      	bne.n	800244e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d14d      	bne.n	80024d6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	4618      	mov	r0, r3
 8002440:	f000 ff08 	bl	8003254 <xTaskPriorityDisinherit>
 8002444:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2200      	movs	r2, #0
 800244a:	605a      	str	r2, [r3, #4]
 800244c:	e043      	b.n	80024d6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d119      	bne.n	8002488 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	6898      	ldr	r0, [r3, #8]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245c:	461a      	mov	r2, r3
 800245e:	68b9      	ldr	r1, [r7, #8]
 8002460:	f001 fc32 	bl	8003cc8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	689a      	ldr	r2, [r3, #8]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246c:	441a      	add	r2, r3
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	689a      	ldr	r2, [r3, #8]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	429a      	cmp	r2, r3
 800247c:	d32b      	bcc.n	80024d6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	609a      	str	r2, [r3, #8]
 8002486:	e026      	b.n	80024d6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	68d8      	ldr	r0, [r3, #12]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002490:	461a      	mov	r2, r3
 8002492:	68b9      	ldr	r1, [r7, #8]
 8002494:	f001 fc18 	bl	8003cc8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	68da      	ldr	r2, [r3, #12]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a0:	425b      	negs	r3, r3
 80024a2:	441a      	add	r2, r3
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	68da      	ldr	r2, [r3, #12]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d207      	bcs.n	80024c4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	685a      	ldr	r2, [r3, #4]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024bc:	425b      	negs	r3, r3
 80024be:	441a      	add	r2, r3
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d105      	bne.n	80024d6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d002      	beq.n	80024d6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	3b01      	subs	r3, #1
 80024d4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	1c5a      	adds	r2, r3, #1
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80024de:	697b      	ldr	r3, [r7, #20]
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3718      	adds	r7, #24
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d018      	beq.n	800252c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	68da      	ldr	r2, [r3, #12]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002502:	441a      	add	r2, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	68da      	ldr	r2, [r3, #12]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	429a      	cmp	r2, r3
 8002512:	d303      	bcc.n	800251c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	68d9      	ldr	r1, [r3, #12]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002524:	461a      	mov	r2, r3
 8002526:	6838      	ldr	r0, [r7, #0]
 8002528:	f001 fbce 	bl	8003cc8 <memcpy>
	}
}
 800252c:	bf00      	nop
 800252e:	3708      	adds	r7, #8
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800253c:	f001 f866 	bl	800360c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002546:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002548:	e011      	b.n	800256e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254e:	2b00      	cmp	r3, #0
 8002550:	d012      	beq.n	8002578 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	3324      	adds	r3, #36	; 0x24
 8002556:	4618      	mov	r0, r3
 8002558:	f000 fc9a 	bl	8002e90 <xTaskRemoveFromEventList>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002562:	f000 fd6f 	bl	8003044 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002566:	7bfb      	ldrb	r3, [r7, #15]
 8002568:	3b01      	subs	r3, #1
 800256a:	b2db      	uxtb	r3, r3
 800256c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800256e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002572:	2b00      	cmp	r3, #0
 8002574:	dce9      	bgt.n	800254a <prvUnlockQueue+0x16>
 8002576:	e000      	b.n	800257a <prvUnlockQueue+0x46>
					break;
 8002578:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	22ff      	movs	r2, #255	; 0xff
 800257e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002582:	f001 f873 	bl	800366c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002586:	f001 f841 	bl	800360c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002590:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002592:	e011      	b.n	80025b8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	691b      	ldr	r3, [r3, #16]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d012      	beq.n	80025c2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	3310      	adds	r3, #16
 80025a0:	4618      	mov	r0, r3
 80025a2:	f000 fc75 	bl	8002e90 <xTaskRemoveFromEventList>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d001      	beq.n	80025b0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80025ac:	f000 fd4a 	bl	8003044 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80025b0:	7bbb      	ldrb	r3, [r7, #14]
 80025b2:	3b01      	subs	r3, #1
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80025b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	dce9      	bgt.n	8002594 <prvUnlockQueue+0x60>
 80025c0:	e000      	b.n	80025c4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80025c2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	22ff      	movs	r2, #255	; 0xff
 80025c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80025cc:	f001 f84e 	bl	800366c <vPortExitCritical>
}
 80025d0:	bf00      	nop
 80025d2:	3710      	adds	r7, #16
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80025e0:	f001 f814 	bl	800360c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d102      	bne.n	80025f2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80025ec:	2301      	movs	r3, #1
 80025ee:	60fb      	str	r3, [r7, #12]
 80025f0:	e001      	b.n	80025f6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80025f2:	2300      	movs	r3, #0
 80025f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80025f6:	f001 f839 	bl	800366c <vPortExitCritical>

	return xReturn;
 80025fa:	68fb      	ldr	r3, [r7, #12]
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3710      	adds	r7, #16
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}

08002604 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800260c:	f000 fffe 	bl	800360c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002618:	429a      	cmp	r2, r3
 800261a:	d102      	bne.n	8002622 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800261c:	2301      	movs	r3, #1
 800261e:	60fb      	str	r3, [r7, #12]
 8002620:	e001      	b.n	8002626 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002622:	2300      	movs	r3, #0
 8002624:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002626:	f001 f821 	bl	800366c <vPortExitCritical>

	return xReturn;
 800262a:	68fb      	ldr	r3, [r7, #12]
}
 800262c:	4618      	mov	r0, r3
 800262e:	3710      	adds	r7, #16
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}

08002634 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002634:	b580      	push	{r7, lr}
 8002636:	b08e      	sub	sp, #56	; 0x38
 8002638:	af04      	add	r7, sp, #16
 800263a:	60f8      	str	r0, [r7, #12]
 800263c:	60b9      	str	r1, [r7, #8]
 800263e:	607a      	str	r2, [r7, #4]
 8002640:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002644:	2b00      	cmp	r3, #0
 8002646:	d10a      	bne.n	800265e <xTaskCreateStatic+0x2a>
	__asm volatile
 8002648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800264c:	f383 8811 	msr	BASEPRI, r3
 8002650:	f3bf 8f6f 	isb	sy
 8002654:	f3bf 8f4f 	dsb	sy
 8002658:	623b      	str	r3, [r7, #32]
}
 800265a:	bf00      	nop
 800265c:	e7fe      	b.n	800265c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800265e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002660:	2b00      	cmp	r3, #0
 8002662:	d10a      	bne.n	800267a <xTaskCreateStatic+0x46>
	__asm volatile
 8002664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002668:	f383 8811 	msr	BASEPRI, r3
 800266c:	f3bf 8f6f 	isb	sy
 8002670:	f3bf 8f4f 	dsb	sy
 8002674:	61fb      	str	r3, [r7, #28]
}
 8002676:	bf00      	nop
 8002678:	e7fe      	b.n	8002678 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800267a:	23a0      	movs	r3, #160	; 0xa0
 800267c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	2ba0      	cmp	r3, #160	; 0xa0
 8002682:	d00a      	beq.n	800269a <xTaskCreateStatic+0x66>
	__asm volatile
 8002684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002688:	f383 8811 	msr	BASEPRI, r3
 800268c:	f3bf 8f6f 	isb	sy
 8002690:	f3bf 8f4f 	dsb	sy
 8002694:	61bb      	str	r3, [r7, #24]
}
 8002696:	bf00      	nop
 8002698:	e7fe      	b.n	8002698 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800269a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800269c:	2b00      	cmp	r3, #0
 800269e:	d01e      	beq.n	80026de <xTaskCreateStatic+0xaa>
 80026a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d01b      	beq.n	80026de <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80026a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026a8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80026aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80026ae:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80026b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b2:	2202      	movs	r2, #2
 80026b4:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80026b8:	2300      	movs	r3, #0
 80026ba:	9303      	str	r3, [sp, #12]
 80026bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026be:	9302      	str	r3, [sp, #8]
 80026c0:	f107 0314 	add.w	r3, r7, #20
 80026c4:	9301      	str	r3, [sp, #4]
 80026c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026c8:	9300      	str	r3, [sp, #0]
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	68b9      	ldr	r1, [r7, #8]
 80026d0:	68f8      	ldr	r0, [r7, #12]
 80026d2:	f000 f851 	bl	8002778 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80026d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80026d8:	f000 f8e4 	bl	80028a4 <prvAddNewTaskToReadyList>
 80026dc:	e001      	b.n	80026e2 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80026de:	2300      	movs	r3, #0
 80026e0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80026e2:	697b      	ldr	r3, [r7, #20]
	}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3728      	adds	r7, #40	; 0x28
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}

080026ec <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b08c      	sub	sp, #48	; 0x30
 80026f0:	af04      	add	r7, sp, #16
 80026f2:	60f8      	str	r0, [r7, #12]
 80026f4:	60b9      	str	r1, [r7, #8]
 80026f6:	603b      	str	r3, [r7, #0]
 80026f8:	4613      	mov	r3, r2
 80026fa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80026fc:	88fb      	ldrh	r3, [r7, #6]
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	4618      	mov	r0, r3
 8002702:	f001 f845 	bl	8003790 <pvPortMalloc>
 8002706:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d00e      	beq.n	800272c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800270e:	20a0      	movs	r0, #160	; 0xa0
 8002710:	f001 f83e 	bl	8003790 <pvPortMalloc>
 8002714:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d003      	beq.n	8002724 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	697a      	ldr	r2, [r7, #20]
 8002720:	631a      	str	r2, [r3, #48]	; 0x30
 8002722:	e005      	b.n	8002730 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002724:	6978      	ldr	r0, [r7, #20]
 8002726:	f001 f8f7 	bl	8003918 <vPortFree>
 800272a:	e001      	b.n	8002730 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800272c:	2300      	movs	r3, #0
 800272e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d017      	beq.n	8002766 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800273e:	88fa      	ldrh	r2, [r7, #6]
 8002740:	2300      	movs	r3, #0
 8002742:	9303      	str	r3, [sp, #12]
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	9302      	str	r3, [sp, #8]
 8002748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800274a:	9301      	str	r3, [sp, #4]
 800274c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800274e:	9300      	str	r3, [sp, #0]
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	68b9      	ldr	r1, [r7, #8]
 8002754:	68f8      	ldr	r0, [r7, #12]
 8002756:	f000 f80f 	bl	8002778 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800275a:	69f8      	ldr	r0, [r7, #28]
 800275c:	f000 f8a2 	bl	80028a4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002760:	2301      	movs	r3, #1
 8002762:	61bb      	str	r3, [r7, #24]
 8002764:	e002      	b.n	800276c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002766:	f04f 33ff 	mov.w	r3, #4294967295
 800276a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800276c:	69bb      	ldr	r3, [r7, #24]
	}
 800276e:	4618      	mov	r0, r3
 8002770:	3720      	adds	r7, #32
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
	...

08002778 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b088      	sub	sp, #32
 800277c:	af00      	add	r7, sp, #0
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	60b9      	str	r1, [r7, #8]
 8002782:	607a      	str	r2, [r7, #4]
 8002784:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002788:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002790:	3b01      	subs	r3, #1
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	4413      	add	r3, r2
 8002796:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	f023 0307 	bic.w	r3, r3, #7
 800279e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	f003 0307 	and.w	r3, r3, #7
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d00a      	beq.n	80027c0 <prvInitialiseNewTask+0x48>
	__asm volatile
 80027aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ae:	f383 8811 	msr	BASEPRI, r3
 80027b2:	f3bf 8f6f 	isb	sy
 80027b6:	f3bf 8f4f 	dsb	sy
 80027ba:	617b      	str	r3, [r7, #20]
}
 80027bc:	bf00      	nop
 80027be:	e7fe      	b.n	80027be <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80027c0:	2300      	movs	r3, #0
 80027c2:	61fb      	str	r3, [r7, #28]
 80027c4:	e012      	b.n	80027ec <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80027c6:	68ba      	ldr	r2, [r7, #8]
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	4413      	add	r3, r2
 80027cc:	7819      	ldrb	r1, [r3, #0]
 80027ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	4413      	add	r3, r2
 80027d4:	3334      	adds	r3, #52	; 0x34
 80027d6:	460a      	mov	r2, r1
 80027d8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80027da:	68ba      	ldr	r2, [r7, #8]
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	4413      	add	r3, r2
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d006      	beq.n	80027f4 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	3301      	adds	r3, #1
 80027ea:	61fb      	str	r3, [r7, #28]
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	2b0f      	cmp	r3, #15
 80027f0:	d9e9      	bls.n	80027c6 <prvInitialiseNewTask+0x4e>
 80027f2:	e000      	b.n	80027f6 <prvInitialiseNewTask+0x7e>
		{
			break;
 80027f4:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80027f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027f8:	2200      	movs	r2, #0
 80027fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80027fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002800:	2b06      	cmp	r3, #6
 8002802:	d901      	bls.n	8002808 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002804:	2306      	movs	r3, #6
 8002806:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800280a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800280c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800280e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002810:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002812:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002816:	2200      	movs	r2, #0
 8002818:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800281a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800281c:	3304      	adds	r3, #4
 800281e:	4618      	mov	r0, r3
 8002820:	f7ff fac3 	bl	8001daa <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002826:	3318      	adds	r3, #24
 8002828:	4618      	mov	r0, r3
 800282a:	f7ff fabe 	bl	8001daa <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800282e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002830:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002832:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002836:	f1c3 0207 	rsb	r2, r3, #7
 800283a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800283c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800283e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002840:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002842:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002846:	2200      	movs	r2, #0
 8002848:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800284c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800284e:	2200      	movs	r2, #0
 8002850:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002856:	334c      	adds	r3, #76	; 0x4c
 8002858:	224c      	movs	r2, #76	; 0x4c
 800285a:	2100      	movs	r1, #0
 800285c:	4618      	mov	r0, r3
 800285e:	f001 f9a9 	bl	8003bb4 <memset>
 8002862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002864:	4a0c      	ldr	r2, [pc, #48]	; (8002898 <prvInitialiseNewTask+0x120>)
 8002866:	651a      	str	r2, [r3, #80]	; 0x50
 8002868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800286a:	4a0c      	ldr	r2, [pc, #48]	; (800289c <prvInitialiseNewTask+0x124>)
 800286c:	655a      	str	r2, [r3, #84]	; 0x54
 800286e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002870:	4a0b      	ldr	r2, [pc, #44]	; (80028a0 <prvInitialiseNewTask+0x128>)
 8002872:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002874:	683a      	ldr	r2, [r7, #0]
 8002876:	68f9      	ldr	r1, [r7, #12]
 8002878:	69b8      	ldr	r0, [r7, #24]
 800287a:	f000 fdd7 	bl	800342c <pxPortInitialiseStack>
 800287e:	4602      	mov	r2, r0
 8002880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002882:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002886:	2b00      	cmp	r3, #0
 8002888:	d002      	beq.n	8002890 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800288a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800288c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800288e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002890:	bf00      	nop
 8002892:	3720      	adds	r7, #32
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	20001104 	.word	0x20001104
 800289c:	2000116c 	.word	0x2000116c
 80028a0:	200011d4 	.word	0x200011d4

080028a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80028ac:	f000 feae 	bl	800360c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80028b0:	4b2a      	ldr	r3, [pc, #168]	; (800295c <prvAddNewTaskToReadyList+0xb8>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	3301      	adds	r3, #1
 80028b6:	4a29      	ldr	r2, [pc, #164]	; (800295c <prvAddNewTaskToReadyList+0xb8>)
 80028b8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80028ba:	4b29      	ldr	r3, [pc, #164]	; (8002960 <prvAddNewTaskToReadyList+0xbc>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d109      	bne.n	80028d6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80028c2:	4a27      	ldr	r2, [pc, #156]	; (8002960 <prvAddNewTaskToReadyList+0xbc>)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80028c8:	4b24      	ldr	r3, [pc, #144]	; (800295c <prvAddNewTaskToReadyList+0xb8>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d110      	bne.n	80028f2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80028d0:	f000 fbdc 	bl	800308c <prvInitialiseTaskLists>
 80028d4:	e00d      	b.n	80028f2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80028d6:	4b23      	ldr	r3, [pc, #140]	; (8002964 <prvAddNewTaskToReadyList+0xc0>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d109      	bne.n	80028f2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80028de:	4b20      	ldr	r3, [pc, #128]	; (8002960 <prvAddNewTaskToReadyList+0xbc>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d802      	bhi.n	80028f2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80028ec:	4a1c      	ldr	r2, [pc, #112]	; (8002960 <prvAddNewTaskToReadyList+0xbc>)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80028f2:	4b1d      	ldr	r3, [pc, #116]	; (8002968 <prvAddNewTaskToReadyList+0xc4>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	3301      	adds	r3, #1
 80028f8:	4a1b      	ldr	r2, [pc, #108]	; (8002968 <prvAddNewTaskToReadyList+0xc4>)
 80028fa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002900:	2201      	movs	r2, #1
 8002902:	409a      	lsls	r2, r3
 8002904:	4b19      	ldr	r3, [pc, #100]	; (800296c <prvAddNewTaskToReadyList+0xc8>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4313      	orrs	r3, r2
 800290a:	4a18      	ldr	r2, [pc, #96]	; (800296c <prvAddNewTaskToReadyList+0xc8>)
 800290c:	6013      	str	r3, [r2, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002912:	4613      	mov	r3, r2
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	4413      	add	r3, r2
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	4a15      	ldr	r2, [pc, #84]	; (8002970 <prvAddNewTaskToReadyList+0xcc>)
 800291c:	441a      	add	r2, r3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	3304      	adds	r3, #4
 8002922:	4619      	mov	r1, r3
 8002924:	4610      	mov	r0, r2
 8002926:	f7ff fa4c 	bl	8001dc2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800292a:	f000 fe9f 	bl	800366c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800292e:	4b0d      	ldr	r3, [pc, #52]	; (8002964 <prvAddNewTaskToReadyList+0xc0>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d00e      	beq.n	8002954 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002936:	4b0a      	ldr	r3, [pc, #40]	; (8002960 <prvAddNewTaskToReadyList+0xbc>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002940:	429a      	cmp	r2, r3
 8002942:	d207      	bcs.n	8002954 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002944:	4b0b      	ldr	r3, [pc, #44]	; (8002974 <prvAddNewTaskToReadyList+0xd0>)
 8002946:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800294a:	601a      	str	r2, [r3, #0]
 800294c:	f3bf 8f4f 	dsb	sy
 8002950:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002954:	bf00      	nop
 8002956:	3708      	adds	r7, #8
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	200004b8 	.word	0x200004b8
 8002960:	200003b8 	.word	0x200003b8
 8002964:	200004c4 	.word	0x200004c4
 8002968:	200004d4 	.word	0x200004d4
 800296c:	200004c0 	.word	0x200004c0
 8002970:	200003bc 	.word	0x200003bc
 8002974:	e000ed04 	.word	0xe000ed04

08002978 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002980:	2300      	movs	r3, #0
 8002982:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d017      	beq.n	80029ba <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800298a:	4b13      	ldr	r3, [pc, #76]	; (80029d8 <vTaskDelay+0x60>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d00a      	beq.n	80029a8 <vTaskDelay+0x30>
	__asm volatile
 8002992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002996:	f383 8811 	msr	BASEPRI, r3
 800299a:	f3bf 8f6f 	isb	sy
 800299e:	f3bf 8f4f 	dsb	sy
 80029a2:	60bb      	str	r3, [r7, #8]
}
 80029a4:	bf00      	nop
 80029a6:	e7fe      	b.n	80029a6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80029a8:	f000 f884 	bl	8002ab4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80029ac:	2100      	movs	r1, #0
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f000 fcd6 	bl	8003360 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80029b4:	f000 f88c 	bl	8002ad0 <xTaskResumeAll>
 80029b8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d107      	bne.n	80029d0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80029c0:	4b06      	ldr	r3, [pc, #24]	; (80029dc <vTaskDelay+0x64>)
 80029c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029c6:	601a      	str	r2, [r3, #0]
 80029c8:	f3bf 8f4f 	dsb	sy
 80029cc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80029d0:	bf00      	nop
 80029d2:	3710      	adds	r7, #16
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	200004e0 	.word	0x200004e0
 80029dc:	e000ed04 	.word	0xe000ed04

080029e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b08a      	sub	sp, #40	; 0x28
 80029e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80029e6:	2300      	movs	r3, #0
 80029e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80029ea:	2300      	movs	r3, #0
 80029ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80029ee:	463a      	mov	r2, r7
 80029f0:	1d39      	adds	r1, r7, #4
 80029f2:	f107 0308 	add.w	r3, r7, #8
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7fd fbaa 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80029fc:	6839      	ldr	r1, [r7, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	68ba      	ldr	r2, [r7, #8]
 8002a02:	9202      	str	r2, [sp, #8]
 8002a04:	9301      	str	r3, [sp, #4]
 8002a06:	2300      	movs	r3, #0
 8002a08:	9300      	str	r3, [sp, #0]
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	460a      	mov	r2, r1
 8002a0e:	4921      	ldr	r1, [pc, #132]	; (8002a94 <vTaskStartScheduler+0xb4>)
 8002a10:	4821      	ldr	r0, [pc, #132]	; (8002a98 <vTaskStartScheduler+0xb8>)
 8002a12:	f7ff fe0f 	bl	8002634 <xTaskCreateStatic>
 8002a16:	4603      	mov	r3, r0
 8002a18:	4a20      	ldr	r2, [pc, #128]	; (8002a9c <vTaskStartScheduler+0xbc>)
 8002a1a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002a1c:	4b1f      	ldr	r3, [pc, #124]	; (8002a9c <vTaskStartScheduler+0xbc>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d002      	beq.n	8002a2a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002a24:	2301      	movs	r3, #1
 8002a26:	617b      	str	r3, [r7, #20]
 8002a28:	e001      	b.n	8002a2e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d11b      	bne.n	8002a6c <vTaskStartScheduler+0x8c>
	__asm volatile
 8002a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a38:	f383 8811 	msr	BASEPRI, r3
 8002a3c:	f3bf 8f6f 	isb	sy
 8002a40:	f3bf 8f4f 	dsb	sy
 8002a44:	613b      	str	r3, [r7, #16]
}
 8002a46:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002a48:	4b15      	ldr	r3, [pc, #84]	; (8002aa0 <vTaskStartScheduler+0xc0>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	334c      	adds	r3, #76	; 0x4c
 8002a4e:	4a15      	ldr	r2, [pc, #84]	; (8002aa4 <vTaskStartScheduler+0xc4>)
 8002a50:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002a52:	4b15      	ldr	r3, [pc, #84]	; (8002aa8 <vTaskStartScheduler+0xc8>)
 8002a54:	f04f 32ff 	mov.w	r2, #4294967295
 8002a58:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002a5a:	4b14      	ldr	r3, [pc, #80]	; (8002aac <vTaskStartScheduler+0xcc>)
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002a60:	4b13      	ldr	r3, [pc, #76]	; (8002ab0 <vTaskStartScheduler+0xd0>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002a66:	f000 fd5f 	bl	8003528 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002a6a:	e00e      	b.n	8002a8a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a72:	d10a      	bne.n	8002a8a <vTaskStartScheduler+0xaa>
	__asm volatile
 8002a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a78:	f383 8811 	msr	BASEPRI, r3
 8002a7c:	f3bf 8f6f 	isb	sy
 8002a80:	f3bf 8f4f 	dsb	sy
 8002a84:	60fb      	str	r3, [r7, #12]
}
 8002a86:	bf00      	nop
 8002a88:	e7fe      	b.n	8002a88 <vTaskStartScheduler+0xa8>
}
 8002a8a:	bf00      	nop
 8002a8c:	3718      	adds	r7, #24
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	080045e4 	.word	0x080045e4
 8002a98:	0800305d 	.word	0x0800305d
 8002a9c:	200004dc 	.word	0x200004dc
 8002aa0:	200003b8 	.word	0x200003b8
 8002aa4:	2000005c 	.word	0x2000005c
 8002aa8:	200004d8 	.word	0x200004d8
 8002aac:	200004c4 	.word	0x200004c4
 8002ab0:	200004bc 	.word	0x200004bc

08002ab4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002ab8:	4b04      	ldr	r3, [pc, #16]	; (8002acc <vTaskSuspendAll+0x18>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	3301      	adds	r3, #1
 8002abe:	4a03      	ldr	r2, [pc, #12]	; (8002acc <vTaskSuspendAll+0x18>)
 8002ac0:	6013      	str	r3, [r2, #0]
}
 8002ac2:	bf00      	nop
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bc80      	pop	{r7}
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	200004e0 	.word	0x200004e0

08002ad0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002ada:	2300      	movs	r3, #0
 8002adc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002ade:	4b41      	ldr	r3, [pc, #260]	; (8002be4 <xTaskResumeAll+0x114>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d10a      	bne.n	8002afc <xTaskResumeAll+0x2c>
	__asm volatile
 8002ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aea:	f383 8811 	msr	BASEPRI, r3
 8002aee:	f3bf 8f6f 	isb	sy
 8002af2:	f3bf 8f4f 	dsb	sy
 8002af6:	603b      	str	r3, [r7, #0]
}
 8002af8:	bf00      	nop
 8002afa:	e7fe      	b.n	8002afa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002afc:	f000 fd86 	bl	800360c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002b00:	4b38      	ldr	r3, [pc, #224]	; (8002be4 <xTaskResumeAll+0x114>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	3b01      	subs	r3, #1
 8002b06:	4a37      	ldr	r2, [pc, #220]	; (8002be4 <xTaskResumeAll+0x114>)
 8002b08:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002b0a:	4b36      	ldr	r3, [pc, #216]	; (8002be4 <xTaskResumeAll+0x114>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d161      	bne.n	8002bd6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002b12:	4b35      	ldr	r3, [pc, #212]	; (8002be8 <xTaskResumeAll+0x118>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d05d      	beq.n	8002bd6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002b1a:	e02e      	b.n	8002b7a <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002b1c:	4b33      	ldr	r3, [pc, #204]	; (8002bec <xTaskResumeAll+0x11c>)
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	3318      	adds	r3, #24
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f7ff f9a5 	bl	8001e78 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	3304      	adds	r3, #4
 8002b32:	4618      	mov	r0, r3
 8002b34:	f7ff f9a0 	bl	8001e78 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	409a      	lsls	r2, r3
 8002b40:	4b2b      	ldr	r3, [pc, #172]	; (8002bf0 <xTaskResumeAll+0x120>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	4a2a      	ldr	r2, [pc, #168]	; (8002bf0 <xTaskResumeAll+0x120>)
 8002b48:	6013      	str	r3, [r2, #0]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b4e:	4613      	mov	r3, r2
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	4413      	add	r3, r2
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	4a27      	ldr	r2, [pc, #156]	; (8002bf4 <xTaskResumeAll+0x124>)
 8002b58:	441a      	add	r2, r3
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	3304      	adds	r3, #4
 8002b5e:	4619      	mov	r1, r3
 8002b60:	4610      	mov	r0, r2
 8002b62:	f7ff f92e 	bl	8001dc2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b6a:	4b23      	ldr	r3, [pc, #140]	; (8002bf8 <xTaskResumeAll+0x128>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d302      	bcc.n	8002b7a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8002b74:	4b21      	ldr	r3, [pc, #132]	; (8002bfc <xTaskResumeAll+0x12c>)
 8002b76:	2201      	movs	r2, #1
 8002b78:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002b7a:	4b1c      	ldr	r3, [pc, #112]	; (8002bec <xTaskResumeAll+0x11c>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d1cc      	bne.n	8002b1c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d001      	beq.n	8002b8c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002b88:	f000 fb22 	bl	80031d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002b8c:	4b1c      	ldr	r3, [pc, #112]	; (8002c00 <xTaskResumeAll+0x130>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d010      	beq.n	8002bba <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002b98:	f000 f836 	bl	8002c08 <xTaskIncrementTick>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d002      	beq.n	8002ba8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8002ba2:	4b16      	ldr	r3, [pc, #88]	; (8002bfc <xTaskResumeAll+0x12c>)
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	3b01      	subs	r3, #1
 8002bac:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d1f1      	bne.n	8002b98 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8002bb4:	4b12      	ldr	r3, [pc, #72]	; (8002c00 <xTaskResumeAll+0x130>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002bba:	4b10      	ldr	r3, [pc, #64]	; (8002bfc <xTaskResumeAll+0x12c>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d009      	beq.n	8002bd6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002bc6:	4b0f      	ldr	r3, [pc, #60]	; (8002c04 <xTaskResumeAll+0x134>)
 8002bc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bcc:	601a      	str	r2, [r3, #0]
 8002bce:	f3bf 8f4f 	dsb	sy
 8002bd2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002bd6:	f000 fd49 	bl	800366c <vPortExitCritical>

	return xAlreadyYielded;
 8002bda:	68bb      	ldr	r3, [r7, #8]
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3710      	adds	r7, #16
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	200004e0 	.word	0x200004e0
 8002be8:	200004b8 	.word	0x200004b8
 8002bec:	20000478 	.word	0x20000478
 8002bf0:	200004c0 	.word	0x200004c0
 8002bf4:	200003bc 	.word	0x200003bc
 8002bf8:	200003b8 	.word	0x200003b8
 8002bfc:	200004cc 	.word	0x200004cc
 8002c00:	200004c8 	.word	0x200004c8
 8002c04:	e000ed04 	.word	0xe000ed04

08002c08 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b086      	sub	sp, #24
 8002c0c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c12:	4b51      	ldr	r3, [pc, #324]	; (8002d58 <xTaskIncrementTick+0x150>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	f040 808d 	bne.w	8002d36 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002c1c:	4b4f      	ldr	r3, [pc, #316]	; (8002d5c <xTaskIncrementTick+0x154>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	3301      	adds	r3, #1
 8002c22:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002c24:	4a4d      	ldr	r2, [pc, #308]	; (8002d5c <xTaskIncrementTick+0x154>)
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d120      	bne.n	8002c72 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002c30:	4b4b      	ldr	r3, [pc, #300]	; (8002d60 <xTaskIncrementTick+0x158>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d00a      	beq.n	8002c50 <xTaskIncrementTick+0x48>
	__asm volatile
 8002c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c3e:	f383 8811 	msr	BASEPRI, r3
 8002c42:	f3bf 8f6f 	isb	sy
 8002c46:	f3bf 8f4f 	dsb	sy
 8002c4a:	603b      	str	r3, [r7, #0]
}
 8002c4c:	bf00      	nop
 8002c4e:	e7fe      	b.n	8002c4e <xTaskIncrementTick+0x46>
 8002c50:	4b43      	ldr	r3, [pc, #268]	; (8002d60 <xTaskIncrementTick+0x158>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	60fb      	str	r3, [r7, #12]
 8002c56:	4b43      	ldr	r3, [pc, #268]	; (8002d64 <xTaskIncrementTick+0x15c>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a41      	ldr	r2, [pc, #260]	; (8002d60 <xTaskIncrementTick+0x158>)
 8002c5c:	6013      	str	r3, [r2, #0]
 8002c5e:	4a41      	ldr	r2, [pc, #260]	; (8002d64 <xTaskIncrementTick+0x15c>)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6013      	str	r3, [r2, #0]
 8002c64:	4b40      	ldr	r3, [pc, #256]	; (8002d68 <xTaskIncrementTick+0x160>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	3301      	adds	r3, #1
 8002c6a:	4a3f      	ldr	r2, [pc, #252]	; (8002d68 <xTaskIncrementTick+0x160>)
 8002c6c:	6013      	str	r3, [r2, #0]
 8002c6e:	f000 faaf 	bl	80031d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002c72:	4b3e      	ldr	r3, [pc, #248]	; (8002d6c <xTaskIncrementTick+0x164>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	693a      	ldr	r2, [r7, #16]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d34d      	bcc.n	8002d18 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002c7c:	4b38      	ldr	r3, [pc, #224]	; (8002d60 <xTaskIncrementTick+0x158>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d101      	bne.n	8002c8a <xTaskIncrementTick+0x82>
 8002c86:	2301      	movs	r3, #1
 8002c88:	e000      	b.n	8002c8c <xTaskIncrementTick+0x84>
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d004      	beq.n	8002c9a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c90:	4b36      	ldr	r3, [pc, #216]	; (8002d6c <xTaskIncrementTick+0x164>)
 8002c92:	f04f 32ff 	mov.w	r2, #4294967295
 8002c96:	601a      	str	r2, [r3, #0]
					break;
 8002c98:	e03e      	b.n	8002d18 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002c9a:	4b31      	ldr	r3, [pc, #196]	; (8002d60 <xTaskIncrementTick+0x158>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002caa:	693a      	ldr	r2, [r7, #16]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d203      	bcs.n	8002cba <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002cb2:	4a2e      	ldr	r2, [pc, #184]	; (8002d6c <xTaskIncrementTick+0x164>)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6013      	str	r3, [r2, #0]
						break;
 8002cb8:	e02e      	b.n	8002d18 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	3304      	adds	r3, #4
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f7ff f8da 	bl	8001e78 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d004      	beq.n	8002cd6 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	3318      	adds	r3, #24
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7ff f8d1 	bl	8001e78 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cda:	2201      	movs	r2, #1
 8002cdc:	409a      	lsls	r2, r3
 8002cde:	4b24      	ldr	r3, [pc, #144]	; (8002d70 <xTaskIncrementTick+0x168>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	4a22      	ldr	r2, [pc, #136]	; (8002d70 <xTaskIncrementTick+0x168>)
 8002ce6:	6013      	str	r3, [r2, #0]
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cec:	4613      	mov	r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	4413      	add	r3, r2
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	4a1f      	ldr	r2, [pc, #124]	; (8002d74 <xTaskIncrementTick+0x16c>)
 8002cf6:	441a      	add	r2, r3
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	3304      	adds	r3, #4
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	4610      	mov	r0, r2
 8002d00:	f7ff f85f 	bl	8001dc2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d08:	4b1b      	ldr	r3, [pc, #108]	; (8002d78 <xTaskIncrementTick+0x170>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d3b4      	bcc.n	8002c7c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8002d12:	2301      	movs	r3, #1
 8002d14:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d16:	e7b1      	b.n	8002c7c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002d18:	4b17      	ldr	r3, [pc, #92]	; (8002d78 <xTaskIncrementTick+0x170>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d1e:	4915      	ldr	r1, [pc, #84]	; (8002d74 <xTaskIncrementTick+0x16c>)
 8002d20:	4613      	mov	r3, r2
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	4413      	add	r3, r2
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	440b      	add	r3, r1
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d907      	bls.n	8002d40 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8002d30:	2301      	movs	r3, #1
 8002d32:	617b      	str	r3, [r7, #20]
 8002d34:	e004      	b.n	8002d40 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002d36:	4b11      	ldr	r3, [pc, #68]	; (8002d7c <xTaskIncrementTick+0x174>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	4a0f      	ldr	r2, [pc, #60]	; (8002d7c <xTaskIncrementTick+0x174>)
 8002d3e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002d40:	4b0f      	ldr	r3, [pc, #60]	; (8002d80 <xTaskIncrementTick+0x178>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d001      	beq.n	8002d4c <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002d4c:	697b      	ldr	r3, [r7, #20]
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3718      	adds	r7, #24
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	200004e0 	.word	0x200004e0
 8002d5c:	200004bc 	.word	0x200004bc
 8002d60:	20000470 	.word	0x20000470
 8002d64:	20000474 	.word	0x20000474
 8002d68:	200004d0 	.word	0x200004d0
 8002d6c:	200004d8 	.word	0x200004d8
 8002d70:	200004c0 	.word	0x200004c0
 8002d74:	200003bc 	.word	0x200003bc
 8002d78:	200003b8 	.word	0x200003b8
 8002d7c:	200004c8 	.word	0x200004c8
 8002d80:	200004cc 	.word	0x200004cc

08002d84 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002d84:	b480      	push	{r7}
 8002d86:	b087      	sub	sp, #28
 8002d88:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002d8a:	4b29      	ldr	r3, [pc, #164]	; (8002e30 <vTaskSwitchContext+0xac>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d003      	beq.n	8002d9a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002d92:	4b28      	ldr	r3, [pc, #160]	; (8002e34 <vTaskSwitchContext+0xb0>)
 8002d94:	2201      	movs	r2, #1
 8002d96:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002d98:	e044      	b.n	8002e24 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8002d9a:	4b26      	ldr	r3, [pc, #152]	; (8002e34 <vTaskSwitchContext+0xb0>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002da0:	4b25      	ldr	r3, [pc, #148]	; (8002e38 <vTaskSwitchContext+0xb4>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	fab3 f383 	clz	r3, r3
 8002dac:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002dae:	7afb      	ldrb	r3, [r7, #11]
 8002db0:	f1c3 031f 	rsb	r3, r3, #31
 8002db4:	617b      	str	r3, [r7, #20]
 8002db6:	4921      	ldr	r1, [pc, #132]	; (8002e3c <vTaskSwitchContext+0xb8>)
 8002db8:	697a      	ldr	r2, [r7, #20]
 8002dba:	4613      	mov	r3, r2
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	4413      	add	r3, r2
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	440b      	add	r3, r1
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d10a      	bne.n	8002de0 <vTaskSwitchContext+0x5c>
	__asm volatile
 8002dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dce:	f383 8811 	msr	BASEPRI, r3
 8002dd2:	f3bf 8f6f 	isb	sy
 8002dd6:	f3bf 8f4f 	dsb	sy
 8002dda:	607b      	str	r3, [r7, #4]
}
 8002ddc:	bf00      	nop
 8002dde:	e7fe      	b.n	8002dde <vTaskSwitchContext+0x5a>
 8002de0:	697a      	ldr	r2, [r7, #20]
 8002de2:	4613      	mov	r3, r2
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	4413      	add	r3, r2
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	4a14      	ldr	r2, [pc, #80]	; (8002e3c <vTaskSwitchContext+0xb8>)
 8002dec:	4413      	add	r3, r2
 8002dee:	613b      	str	r3, [r7, #16]
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	685a      	ldr	r2, [r3, #4]
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	605a      	str	r2, [r3, #4]
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	685a      	ldr	r2, [r3, #4]
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	3308      	adds	r3, #8
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d104      	bne.n	8002e10 <vTaskSwitchContext+0x8c>
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	685a      	ldr	r2, [r3, #4]
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	605a      	str	r2, [r3, #4]
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	4a0a      	ldr	r2, [pc, #40]	; (8002e40 <vTaskSwitchContext+0xbc>)
 8002e18:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002e1a:	4b09      	ldr	r3, [pc, #36]	; (8002e40 <vTaskSwitchContext+0xbc>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	334c      	adds	r3, #76	; 0x4c
 8002e20:	4a08      	ldr	r2, [pc, #32]	; (8002e44 <vTaskSwitchContext+0xc0>)
 8002e22:	6013      	str	r3, [r2, #0]
}
 8002e24:	bf00      	nop
 8002e26:	371c      	adds	r7, #28
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bc80      	pop	{r7}
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	200004e0 	.word	0x200004e0
 8002e34:	200004cc 	.word	0x200004cc
 8002e38:	200004c0 	.word	0x200004c0
 8002e3c:	200003bc 	.word	0x200003bc
 8002e40:	200003b8 	.word	0x200003b8
 8002e44:	2000005c 	.word	0x2000005c

08002e48 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d10a      	bne.n	8002e6e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8002e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e5c:	f383 8811 	msr	BASEPRI, r3
 8002e60:	f3bf 8f6f 	isb	sy
 8002e64:	f3bf 8f4f 	dsb	sy
 8002e68:	60fb      	str	r3, [r7, #12]
}
 8002e6a:	bf00      	nop
 8002e6c:	e7fe      	b.n	8002e6c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002e6e:	4b07      	ldr	r3, [pc, #28]	; (8002e8c <vTaskPlaceOnEventList+0x44>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	3318      	adds	r3, #24
 8002e74:	4619      	mov	r1, r3
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f7fe ffc6 	bl	8001e08 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002e7c:	2101      	movs	r1, #1
 8002e7e:	6838      	ldr	r0, [r7, #0]
 8002e80:	f000 fa6e 	bl	8003360 <prvAddCurrentTaskToDelayedList>
}
 8002e84:	bf00      	nop
 8002e86:	3710      	adds	r7, #16
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	200003b8 	.word	0x200003b8

08002e90 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b086      	sub	sp, #24
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d10a      	bne.n	8002ebc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8002ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eaa:	f383 8811 	msr	BASEPRI, r3
 8002eae:	f3bf 8f6f 	isb	sy
 8002eb2:	f3bf 8f4f 	dsb	sy
 8002eb6:	60fb      	str	r3, [r7, #12]
}
 8002eb8:	bf00      	nop
 8002eba:	e7fe      	b.n	8002eba <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	3318      	adds	r3, #24
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7fe ffd9 	bl	8001e78 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002ec6:	4b1d      	ldr	r3, [pc, #116]	; (8002f3c <xTaskRemoveFromEventList+0xac>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d11c      	bne.n	8002f08 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	3304      	adds	r3, #4
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7fe ffd0 	bl	8001e78 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002edc:	2201      	movs	r2, #1
 8002ede:	409a      	lsls	r2, r3
 8002ee0:	4b17      	ldr	r3, [pc, #92]	; (8002f40 <xTaskRemoveFromEventList+0xb0>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	4a16      	ldr	r2, [pc, #88]	; (8002f40 <xTaskRemoveFromEventList+0xb0>)
 8002ee8:	6013      	str	r3, [r2, #0]
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eee:	4613      	mov	r3, r2
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	4413      	add	r3, r2
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	4a13      	ldr	r2, [pc, #76]	; (8002f44 <xTaskRemoveFromEventList+0xb4>)
 8002ef8:	441a      	add	r2, r3
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	3304      	adds	r3, #4
 8002efe:	4619      	mov	r1, r3
 8002f00:	4610      	mov	r0, r2
 8002f02:	f7fe ff5e 	bl	8001dc2 <vListInsertEnd>
 8002f06:	e005      	b.n	8002f14 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	3318      	adds	r3, #24
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	480e      	ldr	r0, [pc, #56]	; (8002f48 <xTaskRemoveFromEventList+0xb8>)
 8002f10:	f7fe ff57 	bl	8001dc2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f18:	4b0c      	ldr	r3, [pc, #48]	; (8002f4c <xTaskRemoveFromEventList+0xbc>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d905      	bls.n	8002f2e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002f22:	2301      	movs	r3, #1
 8002f24:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002f26:	4b0a      	ldr	r3, [pc, #40]	; (8002f50 <xTaskRemoveFromEventList+0xc0>)
 8002f28:	2201      	movs	r2, #1
 8002f2a:	601a      	str	r2, [r3, #0]
 8002f2c:	e001      	b.n	8002f32 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8002f32:	697b      	ldr	r3, [r7, #20]
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3718      	adds	r7, #24
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	200004e0 	.word	0x200004e0
 8002f40:	200004c0 	.word	0x200004c0
 8002f44:	200003bc 	.word	0x200003bc
 8002f48:	20000478 	.word	0x20000478
 8002f4c:	200003b8 	.word	0x200003b8
 8002f50:	200004cc 	.word	0x200004cc

08002f54 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002f5c:	4b06      	ldr	r3, [pc, #24]	; (8002f78 <vTaskInternalSetTimeOutState+0x24>)
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002f64:	4b05      	ldr	r3, [pc, #20]	; (8002f7c <vTaskInternalSetTimeOutState+0x28>)
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	605a      	str	r2, [r3, #4]
}
 8002f6c:	bf00      	nop
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bc80      	pop	{r7}
 8002f74:	4770      	bx	lr
 8002f76:	bf00      	nop
 8002f78:	200004d0 	.word	0x200004d0
 8002f7c:	200004bc 	.word	0x200004bc

08002f80 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b088      	sub	sp, #32
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d10a      	bne.n	8002fa6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8002f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f94:	f383 8811 	msr	BASEPRI, r3
 8002f98:	f3bf 8f6f 	isb	sy
 8002f9c:	f3bf 8f4f 	dsb	sy
 8002fa0:	613b      	str	r3, [r7, #16]
}
 8002fa2:	bf00      	nop
 8002fa4:	e7fe      	b.n	8002fa4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d10a      	bne.n	8002fc2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8002fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fb0:	f383 8811 	msr	BASEPRI, r3
 8002fb4:	f3bf 8f6f 	isb	sy
 8002fb8:	f3bf 8f4f 	dsb	sy
 8002fbc:	60fb      	str	r3, [r7, #12]
}
 8002fbe:	bf00      	nop
 8002fc0:	e7fe      	b.n	8002fc0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8002fc2:	f000 fb23 	bl	800360c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002fc6:	4b1d      	ldr	r3, [pc, #116]	; (800303c <xTaskCheckForTimeOut+0xbc>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	69ba      	ldr	r2, [r7, #24]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fde:	d102      	bne.n	8002fe6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	61fb      	str	r3, [r7, #28]
 8002fe4:	e023      	b.n	800302e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	4b15      	ldr	r3, [pc, #84]	; (8003040 <xTaskCheckForTimeOut+0xc0>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d007      	beq.n	8003002 <xTaskCheckForTimeOut+0x82>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	69ba      	ldr	r2, [r7, #24]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d302      	bcc.n	8003002 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	61fb      	str	r3, [r7, #28]
 8003000:	e015      	b.n	800302e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	697a      	ldr	r2, [r7, #20]
 8003008:	429a      	cmp	r2, r3
 800300a:	d20b      	bcs.n	8003024 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	1ad2      	subs	r2, r2, r3
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f7ff ff9b 	bl	8002f54 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800301e:	2300      	movs	r3, #0
 8003020:	61fb      	str	r3, [r7, #28]
 8003022:	e004      	b.n	800302e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	2200      	movs	r2, #0
 8003028:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800302a:	2301      	movs	r3, #1
 800302c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800302e:	f000 fb1d 	bl	800366c <vPortExitCritical>

	return xReturn;
 8003032:	69fb      	ldr	r3, [r7, #28]
}
 8003034:	4618      	mov	r0, r3
 8003036:	3720      	adds	r7, #32
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	200004bc 	.word	0x200004bc
 8003040:	200004d0 	.word	0x200004d0

08003044 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003044:	b480      	push	{r7}
 8003046:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003048:	4b03      	ldr	r3, [pc, #12]	; (8003058 <vTaskMissedYield+0x14>)
 800304a:	2201      	movs	r2, #1
 800304c:	601a      	str	r2, [r3, #0]
}
 800304e:	bf00      	nop
 8003050:	46bd      	mov	sp, r7
 8003052:	bc80      	pop	{r7}
 8003054:	4770      	bx	lr
 8003056:	bf00      	nop
 8003058:	200004cc 	.word	0x200004cc

0800305c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003064:	f000 f852 	bl	800310c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003068:	4b06      	ldr	r3, [pc, #24]	; (8003084 <prvIdleTask+0x28>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2b01      	cmp	r3, #1
 800306e:	d9f9      	bls.n	8003064 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003070:	4b05      	ldr	r3, [pc, #20]	; (8003088 <prvIdleTask+0x2c>)
 8003072:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003076:	601a      	str	r2, [r3, #0]
 8003078:	f3bf 8f4f 	dsb	sy
 800307c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003080:	e7f0      	b.n	8003064 <prvIdleTask+0x8>
 8003082:	bf00      	nop
 8003084:	200003bc 	.word	0x200003bc
 8003088:	e000ed04 	.word	0xe000ed04

0800308c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003092:	2300      	movs	r3, #0
 8003094:	607b      	str	r3, [r7, #4]
 8003096:	e00c      	b.n	80030b2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	4613      	mov	r3, r2
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	4413      	add	r3, r2
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	4a12      	ldr	r2, [pc, #72]	; (80030ec <prvInitialiseTaskLists+0x60>)
 80030a4:	4413      	add	r3, r2
 80030a6:	4618      	mov	r0, r3
 80030a8:	f7fe fe60 	bl	8001d6c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	3301      	adds	r3, #1
 80030b0:	607b      	str	r3, [r7, #4]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2b06      	cmp	r3, #6
 80030b6:	d9ef      	bls.n	8003098 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80030b8:	480d      	ldr	r0, [pc, #52]	; (80030f0 <prvInitialiseTaskLists+0x64>)
 80030ba:	f7fe fe57 	bl	8001d6c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80030be:	480d      	ldr	r0, [pc, #52]	; (80030f4 <prvInitialiseTaskLists+0x68>)
 80030c0:	f7fe fe54 	bl	8001d6c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80030c4:	480c      	ldr	r0, [pc, #48]	; (80030f8 <prvInitialiseTaskLists+0x6c>)
 80030c6:	f7fe fe51 	bl	8001d6c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80030ca:	480c      	ldr	r0, [pc, #48]	; (80030fc <prvInitialiseTaskLists+0x70>)
 80030cc:	f7fe fe4e 	bl	8001d6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80030d0:	480b      	ldr	r0, [pc, #44]	; (8003100 <prvInitialiseTaskLists+0x74>)
 80030d2:	f7fe fe4b 	bl	8001d6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80030d6:	4b0b      	ldr	r3, [pc, #44]	; (8003104 <prvInitialiseTaskLists+0x78>)
 80030d8:	4a05      	ldr	r2, [pc, #20]	; (80030f0 <prvInitialiseTaskLists+0x64>)
 80030da:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80030dc:	4b0a      	ldr	r3, [pc, #40]	; (8003108 <prvInitialiseTaskLists+0x7c>)
 80030de:	4a05      	ldr	r2, [pc, #20]	; (80030f4 <prvInitialiseTaskLists+0x68>)
 80030e0:	601a      	str	r2, [r3, #0]
}
 80030e2:	bf00      	nop
 80030e4:	3708      	adds	r7, #8
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	200003bc 	.word	0x200003bc
 80030f0:	20000448 	.word	0x20000448
 80030f4:	2000045c 	.word	0x2000045c
 80030f8:	20000478 	.word	0x20000478
 80030fc:	2000048c 	.word	0x2000048c
 8003100:	200004a4 	.word	0x200004a4
 8003104:	20000470 	.word	0x20000470
 8003108:	20000474 	.word	0x20000474

0800310c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003112:	e019      	b.n	8003148 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003114:	f000 fa7a 	bl	800360c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003118:	4b10      	ldr	r3, [pc, #64]	; (800315c <prvCheckTasksWaitingTermination+0x50>)
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	3304      	adds	r3, #4
 8003124:	4618      	mov	r0, r3
 8003126:	f7fe fea7 	bl	8001e78 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800312a:	4b0d      	ldr	r3, [pc, #52]	; (8003160 <prvCheckTasksWaitingTermination+0x54>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	3b01      	subs	r3, #1
 8003130:	4a0b      	ldr	r2, [pc, #44]	; (8003160 <prvCheckTasksWaitingTermination+0x54>)
 8003132:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003134:	4b0b      	ldr	r3, [pc, #44]	; (8003164 <prvCheckTasksWaitingTermination+0x58>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	3b01      	subs	r3, #1
 800313a:	4a0a      	ldr	r2, [pc, #40]	; (8003164 <prvCheckTasksWaitingTermination+0x58>)
 800313c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800313e:	f000 fa95 	bl	800366c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f000 f810 	bl	8003168 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003148:	4b06      	ldr	r3, [pc, #24]	; (8003164 <prvCheckTasksWaitingTermination+0x58>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d1e1      	bne.n	8003114 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003150:	bf00      	nop
 8003152:	bf00      	nop
 8003154:	3708      	adds	r7, #8
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	2000048c 	.word	0x2000048c
 8003160:	200004b8 	.word	0x200004b8
 8003164:	200004a0 	.word	0x200004a0

08003168 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003168:	b580      	push	{r7, lr}
 800316a:	b084      	sub	sp, #16
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	334c      	adds	r3, #76	; 0x4c
 8003174:	4618      	mov	r0, r3
 8003176:	f000 fd25 	bl	8003bc4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8003180:	2b00      	cmp	r3, #0
 8003182:	d108      	bne.n	8003196 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003188:	4618      	mov	r0, r3
 800318a:	f000 fbc5 	bl	8003918 <vPortFree>
				vPortFree( pxTCB );
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f000 fbc2 	bl	8003918 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003194:	e018      	b.n	80031c8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800319c:	2b01      	cmp	r3, #1
 800319e:	d103      	bne.n	80031a8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f000 fbb9 	bl	8003918 <vPortFree>
	}
 80031a6:	e00f      	b.n	80031c8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d00a      	beq.n	80031c8 <prvDeleteTCB+0x60>
	__asm volatile
 80031b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031b6:	f383 8811 	msr	BASEPRI, r3
 80031ba:	f3bf 8f6f 	isb	sy
 80031be:	f3bf 8f4f 	dsb	sy
 80031c2:	60fb      	str	r3, [r7, #12]
}
 80031c4:	bf00      	nop
 80031c6:	e7fe      	b.n	80031c6 <prvDeleteTCB+0x5e>
	}
 80031c8:	bf00      	nop
 80031ca:	3710      	adds	r7, #16
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80031d6:	4b0e      	ldr	r3, [pc, #56]	; (8003210 <prvResetNextTaskUnblockTime+0x40>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d101      	bne.n	80031e4 <prvResetNextTaskUnblockTime+0x14>
 80031e0:	2301      	movs	r3, #1
 80031e2:	e000      	b.n	80031e6 <prvResetNextTaskUnblockTime+0x16>
 80031e4:	2300      	movs	r3, #0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d004      	beq.n	80031f4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80031ea:	4b0a      	ldr	r3, [pc, #40]	; (8003214 <prvResetNextTaskUnblockTime+0x44>)
 80031ec:	f04f 32ff 	mov.w	r2, #4294967295
 80031f0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80031f2:	e008      	b.n	8003206 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80031f4:	4b06      	ldr	r3, [pc, #24]	; (8003210 <prvResetNextTaskUnblockTime+0x40>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	4a04      	ldr	r2, [pc, #16]	; (8003214 <prvResetNextTaskUnblockTime+0x44>)
 8003204:	6013      	str	r3, [r2, #0]
}
 8003206:	bf00      	nop
 8003208:	370c      	adds	r7, #12
 800320a:	46bd      	mov	sp, r7
 800320c:	bc80      	pop	{r7}
 800320e:	4770      	bx	lr
 8003210:	20000470 	.word	0x20000470
 8003214:	200004d8 	.word	0x200004d8

08003218 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800321e:	4b0b      	ldr	r3, [pc, #44]	; (800324c <xTaskGetSchedulerState+0x34>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d102      	bne.n	800322c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003226:	2301      	movs	r3, #1
 8003228:	607b      	str	r3, [r7, #4]
 800322a:	e008      	b.n	800323e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800322c:	4b08      	ldr	r3, [pc, #32]	; (8003250 <xTaskGetSchedulerState+0x38>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d102      	bne.n	800323a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003234:	2302      	movs	r3, #2
 8003236:	607b      	str	r3, [r7, #4]
 8003238:	e001      	b.n	800323e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800323a:	2300      	movs	r3, #0
 800323c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800323e:	687b      	ldr	r3, [r7, #4]
	}
 8003240:	4618      	mov	r0, r3
 8003242:	370c      	adds	r7, #12
 8003244:	46bd      	mov	sp, r7
 8003246:	bc80      	pop	{r7}
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop
 800324c:	200004c4 	.word	0x200004c4
 8003250:	200004e0 	.word	0x200004e0

08003254 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003254:	b580      	push	{r7, lr}
 8003256:	b086      	sub	sp, #24
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003260:	2300      	movs	r3, #0
 8003262:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d06e      	beq.n	8003348 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800326a:	4b3a      	ldr	r3, [pc, #232]	; (8003354 <xTaskPriorityDisinherit+0x100>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	693a      	ldr	r2, [r7, #16]
 8003270:	429a      	cmp	r2, r3
 8003272:	d00a      	beq.n	800328a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003278:	f383 8811 	msr	BASEPRI, r3
 800327c:	f3bf 8f6f 	isb	sy
 8003280:	f3bf 8f4f 	dsb	sy
 8003284:	60fb      	str	r3, [r7, #12]
}
 8003286:	bf00      	nop
 8003288:	e7fe      	b.n	8003288 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800328e:	2b00      	cmp	r3, #0
 8003290:	d10a      	bne.n	80032a8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003296:	f383 8811 	msr	BASEPRI, r3
 800329a:	f3bf 8f6f 	isb	sy
 800329e:	f3bf 8f4f 	dsb	sy
 80032a2:	60bb      	str	r3, [r7, #8]
}
 80032a4:	bf00      	nop
 80032a6:	e7fe      	b.n	80032a6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032ac:	1e5a      	subs	r2, r3, #1
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d044      	beq.n	8003348 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d140      	bne.n	8003348 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	3304      	adds	r3, #4
 80032ca:	4618      	mov	r0, r3
 80032cc:	f7fe fdd4 	bl	8001e78 <uxListRemove>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d115      	bne.n	8003302 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032da:	491f      	ldr	r1, [pc, #124]	; (8003358 <xTaskPriorityDisinherit+0x104>)
 80032dc:	4613      	mov	r3, r2
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	4413      	add	r3, r2
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	440b      	add	r3, r1
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d10a      	bne.n	8003302 <xTaskPriorityDisinherit+0xae>
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f0:	2201      	movs	r2, #1
 80032f2:	fa02 f303 	lsl.w	r3, r2, r3
 80032f6:	43da      	mvns	r2, r3
 80032f8:	4b18      	ldr	r3, [pc, #96]	; (800335c <xTaskPriorityDisinherit+0x108>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4013      	ands	r3, r2
 80032fe:	4a17      	ldr	r2, [pc, #92]	; (800335c <xTaskPriorityDisinherit+0x108>)
 8003300:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800330e:	f1c3 0207 	rsb	r2, r3, #7
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800331a:	2201      	movs	r2, #1
 800331c:	409a      	lsls	r2, r3
 800331e:	4b0f      	ldr	r3, [pc, #60]	; (800335c <xTaskPriorityDisinherit+0x108>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4313      	orrs	r3, r2
 8003324:	4a0d      	ldr	r2, [pc, #52]	; (800335c <xTaskPriorityDisinherit+0x108>)
 8003326:	6013      	str	r3, [r2, #0]
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800332c:	4613      	mov	r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	4413      	add	r3, r2
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	4a08      	ldr	r2, [pc, #32]	; (8003358 <xTaskPriorityDisinherit+0x104>)
 8003336:	441a      	add	r2, r3
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	3304      	adds	r3, #4
 800333c:	4619      	mov	r1, r3
 800333e:	4610      	mov	r0, r2
 8003340:	f7fe fd3f 	bl	8001dc2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003344:	2301      	movs	r3, #1
 8003346:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003348:	697b      	ldr	r3, [r7, #20]
	}
 800334a:	4618      	mov	r0, r3
 800334c:	3718      	adds	r7, #24
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	200003b8 	.word	0x200003b8
 8003358:	200003bc 	.word	0x200003bc
 800335c:	200004c0 	.word	0x200004c0

08003360 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800336a:	4b29      	ldr	r3, [pc, #164]	; (8003410 <prvAddCurrentTaskToDelayedList+0xb0>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003370:	4b28      	ldr	r3, [pc, #160]	; (8003414 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	3304      	adds	r3, #4
 8003376:	4618      	mov	r0, r3
 8003378:	f7fe fd7e 	bl	8001e78 <uxListRemove>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d10b      	bne.n	800339a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003382:	4b24      	ldr	r3, [pc, #144]	; (8003414 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003388:	2201      	movs	r2, #1
 800338a:	fa02 f303 	lsl.w	r3, r2, r3
 800338e:	43da      	mvns	r2, r3
 8003390:	4b21      	ldr	r3, [pc, #132]	; (8003418 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4013      	ands	r3, r2
 8003396:	4a20      	ldr	r2, [pc, #128]	; (8003418 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003398:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033a0:	d10a      	bne.n	80033b8 <prvAddCurrentTaskToDelayedList+0x58>
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d007      	beq.n	80033b8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033a8:	4b1a      	ldr	r3, [pc, #104]	; (8003414 <prvAddCurrentTaskToDelayedList+0xb4>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	3304      	adds	r3, #4
 80033ae:	4619      	mov	r1, r3
 80033b0:	481a      	ldr	r0, [pc, #104]	; (800341c <prvAddCurrentTaskToDelayedList+0xbc>)
 80033b2:	f7fe fd06 	bl	8001dc2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80033b6:	e026      	b.n	8003406 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80033b8:	68fa      	ldr	r2, [r7, #12]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4413      	add	r3, r2
 80033be:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80033c0:	4b14      	ldr	r3, [pc, #80]	; (8003414 <prvAddCurrentTaskToDelayedList+0xb4>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	68ba      	ldr	r2, [r7, #8]
 80033c6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80033c8:	68ba      	ldr	r2, [r7, #8]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d209      	bcs.n	80033e4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033d0:	4b13      	ldr	r3, [pc, #76]	; (8003420 <prvAddCurrentTaskToDelayedList+0xc0>)
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	4b0f      	ldr	r3, [pc, #60]	; (8003414 <prvAddCurrentTaskToDelayedList+0xb4>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	3304      	adds	r3, #4
 80033da:	4619      	mov	r1, r3
 80033dc:	4610      	mov	r0, r2
 80033de:	f7fe fd13 	bl	8001e08 <vListInsert>
}
 80033e2:	e010      	b.n	8003406 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033e4:	4b0f      	ldr	r3, [pc, #60]	; (8003424 <prvAddCurrentTaskToDelayedList+0xc4>)
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	4b0a      	ldr	r3, [pc, #40]	; (8003414 <prvAddCurrentTaskToDelayedList+0xb4>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	3304      	adds	r3, #4
 80033ee:	4619      	mov	r1, r3
 80033f0:	4610      	mov	r0, r2
 80033f2:	f7fe fd09 	bl	8001e08 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80033f6:	4b0c      	ldr	r3, [pc, #48]	; (8003428 <prvAddCurrentTaskToDelayedList+0xc8>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	68ba      	ldr	r2, [r7, #8]
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d202      	bcs.n	8003406 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003400:	4a09      	ldr	r2, [pc, #36]	; (8003428 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	6013      	str	r3, [r2, #0]
}
 8003406:	bf00      	nop
 8003408:	3710      	adds	r7, #16
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	200004bc 	.word	0x200004bc
 8003414:	200003b8 	.word	0x200003b8
 8003418:	200004c0 	.word	0x200004c0
 800341c:	200004a4 	.word	0x200004a4
 8003420:	20000474 	.word	0x20000474
 8003424:	20000470 	.word	0x20000470
 8003428:	200004d8 	.word	0x200004d8

0800342c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800342c:	b480      	push	{r7}
 800342e:	b085      	sub	sp, #20
 8003430:	af00      	add	r7, sp, #0
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	60b9      	str	r1, [r7, #8]
 8003436:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	3b04      	subs	r3, #4
 800343c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003444:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	3b04      	subs	r3, #4
 800344a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	f023 0201 	bic.w	r2, r3, #1
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	3b04      	subs	r3, #4
 800345a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800345c:	4a08      	ldr	r2, [pc, #32]	; (8003480 <pxPortInitialiseStack+0x54>)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	3b14      	subs	r3, #20
 8003466:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	3b20      	subs	r3, #32
 8003472:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003474:	68fb      	ldr	r3, [r7, #12]
}
 8003476:	4618      	mov	r0, r3
 8003478:	3714      	adds	r7, #20
 800347a:	46bd      	mov	sp, r7
 800347c:	bc80      	pop	{r7}
 800347e:	4770      	bx	lr
 8003480:	08003485 	.word	0x08003485

08003484 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003484:	b480      	push	{r7}
 8003486:	b085      	sub	sp, #20
 8003488:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800348a:	2300      	movs	r3, #0
 800348c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800348e:	4b12      	ldr	r3, [pc, #72]	; (80034d8 <prvTaskExitError+0x54>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003496:	d00a      	beq.n	80034ae <prvTaskExitError+0x2a>
	__asm volatile
 8003498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800349c:	f383 8811 	msr	BASEPRI, r3
 80034a0:	f3bf 8f6f 	isb	sy
 80034a4:	f3bf 8f4f 	dsb	sy
 80034a8:	60fb      	str	r3, [r7, #12]
}
 80034aa:	bf00      	nop
 80034ac:	e7fe      	b.n	80034ac <prvTaskExitError+0x28>
	__asm volatile
 80034ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034b2:	f383 8811 	msr	BASEPRI, r3
 80034b6:	f3bf 8f6f 	isb	sy
 80034ba:	f3bf 8f4f 	dsb	sy
 80034be:	60bb      	str	r3, [r7, #8]
}
 80034c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80034c2:	bf00      	nop
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d0fc      	beq.n	80034c4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80034ca:	bf00      	nop
 80034cc:	bf00      	nop
 80034ce:	3714      	adds	r7, #20
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bc80      	pop	{r7}
 80034d4:	4770      	bx	lr
 80034d6:	bf00      	nop
 80034d8:	2000000c 	.word	0x2000000c
 80034dc:	00000000 	.word	0x00000000

080034e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80034e0:	4b07      	ldr	r3, [pc, #28]	; (8003500 <pxCurrentTCBConst2>)
 80034e2:	6819      	ldr	r1, [r3, #0]
 80034e4:	6808      	ldr	r0, [r1, #0]
 80034e6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80034ea:	f380 8809 	msr	PSP, r0
 80034ee:	f3bf 8f6f 	isb	sy
 80034f2:	f04f 0000 	mov.w	r0, #0
 80034f6:	f380 8811 	msr	BASEPRI, r0
 80034fa:	f04e 0e0d 	orr.w	lr, lr, #13
 80034fe:	4770      	bx	lr

08003500 <pxCurrentTCBConst2>:
 8003500:	200003b8 	.word	0x200003b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003504:	bf00      	nop
 8003506:	bf00      	nop

08003508 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003508:	4806      	ldr	r0, [pc, #24]	; (8003524 <prvPortStartFirstTask+0x1c>)
 800350a:	6800      	ldr	r0, [r0, #0]
 800350c:	6800      	ldr	r0, [r0, #0]
 800350e:	f380 8808 	msr	MSP, r0
 8003512:	b662      	cpsie	i
 8003514:	b661      	cpsie	f
 8003516:	f3bf 8f4f 	dsb	sy
 800351a:	f3bf 8f6f 	isb	sy
 800351e:	df00      	svc	0
 8003520:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003522:	bf00      	nop
 8003524:	e000ed08 	.word	0xe000ed08

08003528 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800352e:	4b32      	ldr	r3, [pc, #200]	; (80035f8 <xPortStartScheduler+0xd0>)
 8003530:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	b2db      	uxtb	r3, r3
 8003538:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	22f0      	movs	r2, #240	; 0xf0
 800353e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	b2db      	uxtb	r3, r3
 8003546:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003548:	78fb      	ldrb	r3, [r7, #3]
 800354a:	b2db      	uxtb	r3, r3
 800354c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003550:	b2da      	uxtb	r2, r3
 8003552:	4b2a      	ldr	r3, [pc, #168]	; (80035fc <xPortStartScheduler+0xd4>)
 8003554:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003556:	4b2a      	ldr	r3, [pc, #168]	; (8003600 <xPortStartScheduler+0xd8>)
 8003558:	2207      	movs	r2, #7
 800355a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800355c:	e009      	b.n	8003572 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800355e:	4b28      	ldr	r3, [pc, #160]	; (8003600 <xPortStartScheduler+0xd8>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	3b01      	subs	r3, #1
 8003564:	4a26      	ldr	r2, [pc, #152]	; (8003600 <xPortStartScheduler+0xd8>)
 8003566:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003568:	78fb      	ldrb	r3, [r7, #3]
 800356a:	b2db      	uxtb	r3, r3
 800356c:	005b      	lsls	r3, r3, #1
 800356e:	b2db      	uxtb	r3, r3
 8003570:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003572:	78fb      	ldrb	r3, [r7, #3]
 8003574:	b2db      	uxtb	r3, r3
 8003576:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800357a:	2b80      	cmp	r3, #128	; 0x80
 800357c:	d0ef      	beq.n	800355e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800357e:	4b20      	ldr	r3, [pc, #128]	; (8003600 <xPortStartScheduler+0xd8>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f1c3 0307 	rsb	r3, r3, #7
 8003586:	2b04      	cmp	r3, #4
 8003588:	d00a      	beq.n	80035a0 <xPortStartScheduler+0x78>
	__asm volatile
 800358a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800358e:	f383 8811 	msr	BASEPRI, r3
 8003592:	f3bf 8f6f 	isb	sy
 8003596:	f3bf 8f4f 	dsb	sy
 800359a:	60bb      	str	r3, [r7, #8]
}
 800359c:	bf00      	nop
 800359e:	e7fe      	b.n	800359e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80035a0:	4b17      	ldr	r3, [pc, #92]	; (8003600 <xPortStartScheduler+0xd8>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	021b      	lsls	r3, r3, #8
 80035a6:	4a16      	ldr	r2, [pc, #88]	; (8003600 <xPortStartScheduler+0xd8>)
 80035a8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80035aa:	4b15      	ldr	r3, [pc, #84]	; (8003600 <xPortStartScheduler+0xd8>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80035b2:	4a13      	ldr	r2, [pc, #76]	; (8003600 <xPortStartScheduler+0xd8>)
 80035b4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	b2da      	uxtb	r2, r3
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80035be:	4b11      	ldr	r3, [pc, #68]	; (8003604 <xPortStartScheduler+0xdc>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a10      	ldr	r2, [pc, #64]	; (8003604 <xPortStartScheduler+0xdc>)
 80035c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80035c8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80035ca:	4b0e      	ldr	r3, [pc, #56]	; (8003604 <xPortStartScheduler+0xdc>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a0d      	ldr	r2, [pc, #52]	; (8003604 <xPortStartScheduler+0xdc>)
 80035d0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80035d4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80035d6:	f000 f8b9 	bl	800374c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80035da:	4b0b      	ldr	r3, [pc, #44]	; (8003608 <xPortStartScheduler+0xe0>)
 80035dc:	2200      	movs	r2, #0
 80035de:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80035e0:	f7ff ff92 	bl	8003508 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80035e4:	f7ff fbce 	bl	8002d84 <vTaskSwitchContext>
	prvTaskExitError();
 80035e8:	f7ff ff4c 	bl	8003484 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80035ec:	2300      	movs	r3, #0
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3710      	adds	r7, #16
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	e000e400 	.word	0xe000e400
 80035fc:	200004e4 	.word	0x200004e4
 8003600:	200004e8 	.word	0x200004e8
 8003604:	e000ed20 	.word	0xe000ed20
 8003608:	2000000c 	.word	0x2000000c

0800360c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
	__asm volatile
 8003612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003616:	f383 8811 	msr	BASEPRI, r3
 800361a:	f3bf 8f6f 	isb	sy
 800361e:	f3bf 8f4f 	dsb	sy
 8003622:	607b      	str	r3, [r7, #4]
}
 8003624:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003626:	4b0f      	ldr	r3, [pc, #60]	; (8003664 <vPortEnterCritical+0x58>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	3301      	adds	r3, #1
 800362c:	4a0d      	ldr	r2, [pc, #52]	; (8003664 <vPortEnterCritical+0x58>)
 800362e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003630:	4b0c      	ldr	r3, [pc, #48]	; (8003664 <vPortEnterCritical+0x58>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2b01      	cmp	r3, #1
 8003636:	d10f      	bne.n	8003658 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003638:	4b0b      	ldr	r3, [pc, #44]	; (8003668 <vPortEnterCritical+0x5c>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	b2db      	uxtb	r3, r3
 800363e:	2b00      	cmp	r3, #0
 8003640:	d00a      	beq.n	8003658 <vPortEnterCritical+0x4c>
	__asm volatile
 8003642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003646:	f383 8811 	msr	BASEPRI, r3
 800364a:	f3bf 8f6f 	isb	sy
 800364e:	f3bf 8f4f 	dsb	sy
 8003652:	603b      	str	r3, [r7, #0]
}
 8003654:	bf00      	nop
 8003656:	e7fe      	b.n	8003656 <vPortEnterCritical+0x4a>
	}
}
 8003658:	bf00      	nop
 800365a:	370c      	adds	r7, #12
 800365c:	46bd      	mov	sp, r7
 800365e:	bc80      	pop	{r7}
 8003660:	4770      	bx	lr
 8003662:	bf00      	nop
 8003664:	2000000c 	.word	0x2000000c
 8003668:	e000ed04 	.word	0xe000ed04

0800366c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003672:	4b11      	ldr	r3, [pc, #68]	; (80036b8 <vPortExitCritical+0x4c>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d10a      	bne.n	8003690 <vPortExitCritical+0x24>
	__asm volatile
 800367a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800367e:	f383 8811 	msr	BASEPRI, r3
 8003682:	f3bf 8f6f 	isb	sy
 8003686:	f3bf 8f4f 	dsb	sy
 800368a:	607b      	str	r3, [r7, #4]
}
 800368c:	bf00      	nop
 800368e:	e7fe      	b.n	800368e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003690:	4b09      	ldr	r3, [pc, #36]	; (80036b8 <vPortExitCritical+0x4c>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	3b01      	subs	r3, #1
 8003696:	4a08      	ldr	r2, [pc, #32]	; (80036b8 <vPortExitCritical+0x4c>)
 8003698:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800369a:	4b07      	ldr	r3, [pc, #28]	; (80036b8 <vPortExitCritical+0x4c>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d105      	bne.n	80036ae <vPortExitCritical+0x42>
 80036a2:	2300      	movs	r3, #0
 80036a4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80036ac:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80036ae:	bf00      	nop
 80036b0:	370c      	adds	r7, #12
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bc80      	pop	{r7}
 80036b6:	4770      	bx	lr
 80036b8:	2000000c 	.word	0x2000000c
 80036bc:	00000000 	.word	0x00000000

080036c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80036c0:	f3ef 8009 	mrs	r0, PSP
 80036c4:	f3bf 8f6f 	isb	sy
 80036c8:	4b0d      	ldr	r3, [pc, #52]	; (8003700 <pxCurrentTCBConst>)
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80036d0:	6010      	str	r0, [r2, #0]
 80036d2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80036d6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80036da:	f380 8811 	msr	BASEPRI, r0
 80036de:	f7ff fb51 	bl	8002d84 <vTaskSwitchContext>
 80036e2:	f04f 0000 	mov.w	r0, #0
 80036e6:	f380 8811 	msr	BASEPRI, r0
 80036ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80036ee:	6819      	ldr	r1, [r3, #0]
 80036f0:	6808      	ldr	r0, [r1, #0]
 80036f2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80036f6:	f380 8809 	msr	PSP, r0
 80036fa:	f3bf 8f6f 	isb	sy
 80036fe:	4770      	bx	lr

08003700 <pxCurrentTCBConst>:
 8003700:	200003b8 	.word	0x200003b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003704:	bf00      	nop
 8003706:	bf00      	nop

08003708 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
	__asm volatile
 800370e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003712:	f383 8811 	msr	BASEPRI, r3
 8003716:	f3bf 8f6f 	isb	sy
 800371a:	f3bf 8f4f 	dsb	sy
 800371e:	607b      	str	r3, [r7, #4]
}
 8003720:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003722:	f7ff fa71 	bl	8002c08 <xTaskIncrementTick>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d003      	beq.n	8003734 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800372c:	4b06      	ldr	r3, [pc, #24]	; (8003748 <SysTick_Handler+0x40>)
 800372e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003732:	601a      	str	r2, [r3, #0]
 8003734:	2300      	movs	r3, #0
 8003736:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	f383 8811 	msr	BASEPRI, r3
}
 800373e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003740:	bf00      	nop
 8003742:	3708      	adds	r7, #8
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}
 8003748:	e000ed04 	.word	0xe000ed04

0800374c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800374c:	b480      	push	{r7}
 800374e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003750:	4b0a      	ldr	r3, [pc, #40]	; (800377c <vPortSetupTimerInterrupt+0x30>)
 8003752:	2200      	movs	r2, #0
 8003754:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003756:	4b0a      	ldr	r3, [pc, #40]	; (8003780 <vPortSetupTimerInterrupt+0x34>)
 8003758:	2200      	movs	r2, #0
 800375a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800375c:	4b09      	ldr	r3, [pc, #36]	; (8003784 <vPortSetupTimerInterrupt+0x38>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a09      	ldr	r2, [pc, #36]	; (8003788 <vPortSetupTimerInterrupt+0x3c>)
 8003762:	fba2 2303 	umull	r2, r3, r2, r3
 8003766:	099b      	lsrs	r3, r3, #6
 8003768:	4a08      	ldr	r2, [pc, #32]	; (800378c <vPortSetupTimerInterrupt+0x40>)
 800376a:	3b01      	subs	r3, #1
 800376c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800376e:	4b03      	ldr	r3, [pc, #12]	; (800377c <vPortSetupTimerInterrupt+0x30>)
 8003770:	2207      	movs	r2, #7
 8003772:	601a      	str	r2, [r3, #0]
}
 8003774:	bf00      	nop
 8003776:	46bd      	mov	sp, r7
 8003778:	bc80      	pop	{r7}
 800377a:	4770      	bx	lr
 800377c:	e000e010 	.word	0xe000e010
 8003780:	e000e018 	.word	0xe000e018
 8003784:	20000000 	.word	0x20000000
 8003788:	10624dd3 	.word	0x10624dd3
 800378c:	e000e014 	.word	0xe000e014

08003790 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b08a      	sub	sp, #40	; 0x28
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003798:	2300      	movs	r3, #0
 800379a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800379c:	f7ff f98a 	bl	8002ab4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80037a0:	4b58      	ldr	r3, [pc, #352]	; (8003904 <pvPortMalloc+0x174>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d101      	bne.n	80037ac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80037a8:	f000 f910 	bl	80039cc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80037ac:	4b56      	ldr	r3, [pc, #344]	; (8003908 <pvPortMalloc+0x178>)
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4013      	ands	r3, r2
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	f040 808e 	bne.w	80038d6 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d01d      	beq.n	80037fc <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80037c0:	2208      	movs	r2, #8
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4413      	add	r3, r2
 80037c6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f003 0307 	and.w	r3, r3, #7
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d014      	beq.n	80037fc <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f023 0307 	bic.w	r3, r3, #7
 80037d8:	3308      	adds	r3, #8
 80037da:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f003 0307 	and.w	r3, r3, #7
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d00a      	beq.n	80037fc <pvPortMalloc+0x6c>
	__asm volatile
 80037e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ea:	f383 8811 	msr	BASEPRI, r3
 80037ee:	f3bf 8f6f 	isb	sy
 80037f2:	f3bf 8f4f 	dsb	sy
 80037f6:	617b      	str	r3, [r7, #20]
}
 80037f8:	bf00      	nop
 80037fa:	e7fe      	b.n	80037fa <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d069      	beq.n	80038d6 <pvPortMalloc+0x146>
 8003802:	4b42      	ldr	r3, [pc, #264]	; (800390c <pvPortMalloc+0x17c>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	429a      	cmp	r2, r3
 800380a:	d864      	bhi.n	80038d6 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800380c:	4b40      	ldr	r3, [pc, #256]	; (8003910 <pvPortMalloc+0x180>)
 800380e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003810:	4b3f      	ldr	r3, [pc, #252]	; (8003910 <pvPortMalloc+0x180>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003816:	e004      	b.n	8003822 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800381c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	429a      	cmp	r2, r3
 800382a:	d903      	bls.n	8003834 <pvPortMalloc+0xa4>
 800382c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d1f1      	bne.n	8003818 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003834:	4b33      	ldr	r3, [pc, #204]	; (8003904 <pvPortMalloc+0x174>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800383a:	429a      	cmp	r2, r3
 800383c:	d04b      	beq.n	80038d6 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800383e:	6a3b      	ldr	r3, [r7, #32]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	2208      	movs	r2, #8
 8003844:	4413      	add	r3, r2
 8003846:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	6a3b      	ldr	r3, [r7, #32]
 800384e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003852:	685a      	ldr	r2, [r3, #4]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	1ad2      	subs	r2, r2, r3
 8003858:	2308      	movs	r3, #8
 800385a:	005b      	lsls	r3, r3, #1
 800385c:	429a      	cmp	r2, r3
 800385e:	d91f      	bls.n	80038a0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4413      	add	r3, r2
 8003866:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	f003 0307 	and.w	r3, r3, #7
 800386e:	2b00      	cmp	r3, #0
 8003870:	d00a      	beq.n	8003888 <pvPortMalloc+0xf8>
	__asm volatile
 8003872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003876:	f383 8811 	msr	BASEPRI, r3
 800387a:	f3bf 8f6f 	isb	sy
 800387e:	f3bf 8f4f 	dsb	sy
 8003882:	613b      	str	r3, [r7, #16]
}
 8003884:	bf00      	nop
 8003886:	e7fe      	b.n	8003886 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388a:	685a      	ldr	r2, [r3, #4]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	1ad2      	subs	r2, r2, r3
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800389a:	69b8      	ldr	r0, [r7, #24]
 800389c:	f000 f8f8 	bl	8003a90 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80038a0:	4b1a      	ldr	r3, [pc, #104]	; (800390c <pvPortMalloc+0x17c>)
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	4a18      	ldr	r2, [pc, #96]	; (800390c <pvPortMalloc+0x17c>)
 80038ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80038ae:	4b17      	ldr	r3, [pc, #92]	; (800390c <pvPortMalloc+0x17c>)
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	4b18      	ldr	r3, [pc, #96]	; (8003914 <pvPortMalloc+0x184>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d203      	bcs.n	80038c2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80038ba:	4b14      	ldr	r3, [pc, #80]	; (800390c <pvPortMalloc+0x17c>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a15      	ldr	r2, [pc, #84]	; (8003914 <pvPortMalloc+0x184>)
 80038c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80038c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c4:	685a      	ldr	r2, [r3, #4]
 80038c6:	4b10      	ldr	r3, [pc, #64]	; (8003908 <pvPortMalloc+0x178>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	431a      	orrs	r2, r3
 80038cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80038d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d2:	2200      	movs	r2, #0
 80038d4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80038d6:	f7ff f8fb 	bl	8002ad0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	f003 0307 	and.w	r3, r3, #7
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d00a      	beq.n	80038fa <pvPortMalloc+0x16a>
	__asm volatile
 80038e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038e8:	f383 8811 	msr	BASEPRI, r3
 80038ec:	f3bf 8f6f 	isb	sy
 80038f0:	f3bf 8f4f 	dsb	sy
 80038f4:	60fb      	str	r3, [r7, #12]
}
 80038f6:	bf00      	nop
 80038f8:	e7fe      	b.n	80038f8 <pvPortMalloc+0x168>
	return pvReturn;
 80038fa:	69fb      	ldr	r3, [r7, #28]
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3728      	adds	r7, #40	; 0x28
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}
 8003904:	200010f4 	.word	0x200010f4
 8003908:	20001100 	.word	0x20001100
 800390c:	200010f8 	.word	0x200010f8
 8003910:	200010ec 	.word	0x200010ec
 8003914:	200010fc 	.word	0x200010fc

08003918 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b086      	sub	sp, #24
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d048      	beq.n	80039bc <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800392a:	2308      	movs	r3, #8
 800392c:	425b      	negs	r3, r3
 800392e:	697a      	ldr	r2, [r7, #20]
 8003930:	4413      	add	r3, r2
 8003932:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	685a      	ldr	r2, [r3, #4]
 800393c:	4b21      	ldr	r3, [pc, #132]	; (80039c4 <vPortFree+0xac>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4013      	ands	r3, r2
 8003942:	2b00      	cmp	r3, #0
 8003944:	d10a      	bne.n	800395c <vPortFree+0x44>
	__asm volatile
 8003946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800394a:	f383 8811 	msr	BASEPRI, r3
 800394e:	f3bf 8f6f 	isb	sy
 8003952:	f3bf 8f4f 	dsb	sy
 8003956:	60fb      	str	r3, [r7, #12]
}
 8003958:	bf00      	nop
 800395a:	e7fe      	b.n	800395a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d00a      	beq.n	800397a <vPortFree+0x62>
	__asm volatile
 8003964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003968:	f383 8811 	msr	BASEPRI, r3
 800396c:	f3bf 8f6f 	isb	sy
 8003970:	f3bf 8f4f 	dsb	sy
 8003974:	60bb      	str	r3, [r7, #8]
}
 8003976:	bf00      	nop
 8003978:	e7fe      	b.n	8003978 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	685a      	ldr	r2, [r3, #4]
 800397e:	4b11      	ldr	r3, [pc, #68]	; (80039c4 <vPortFree+0xac>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4013      	ands	r3, r2
 8003984:	2b00      	cmp	r3, #0
 8003986:	d019      	beq.n	80039bc <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d115      	bne.n	80039bc <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	685a      	ldr	r2, [r3, #4]
 8003994:	4b0b      	ldr	r3, [pc, #44]	; (80039c4 <vPortFree+0xac>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	43db      	mvns	r3, r3
 800399a:	401a      	ands	r2, r3
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80039a0:	f7ff f888 	bl	8002ab4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	685a      	ldr	r2, [r3, #4]
 80039a8:	4b07      	ldr	r3, [pc, #28]	; (80039c8 <vPortFree+0xb0>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4413      	add	r3, r2
 80039ae:	4a06      	ldr	r2, [pc, #24]	; (80039c8 <vPortFree+0xb0>)
 80039b0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80039b2:	6938      	ldr	r0, [r7, #16]
 80039b4:	f000 f86c 	bl	8003a90 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80039b8:	f7ff f88a 	bl	8002ad0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80039bc:	bf00      	nop
 80039be:	3718      	adds	r7, #24
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	20001100 	.word	0x20001100
 80039c8:	200010f8 	.word	0x200010f8

080039cc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80039cc:	b480      	push	{r7}
 80039ce:	b085      	sub	sp, #20
 80039d0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80039d2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80039d6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80039d8:	4b27      	ldr	r3, [pc, #156]	; (8003a78 <prvHeapInit+0xac>)
 80039da:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f003 0307 	and.w	r3, r3, #7
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d00c      	beq.n	8003a00 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	3307      	adds	r3, #7
 80039ea:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f023 0307 	bic.w	r3, r3, #7
 80039f2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80039f4:	68ba      	ldr	r2, [r7, #8]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	4a1f      	ldr	r2, [pc, #124]	; (8003a78 <prvHeapInit+0xac>)
 80039fc:	4413      	add	r3, r2
 80039fe:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003a04:	4a1d      	ldr	r2, [pc, #116]	; (8003a7c <prvHeapInit+0xb0>)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003a0a:	4b1c      	ldr	r3, [pc, #112]	; (8003a7c <prvHeapInit+0xb0>)
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	68ba      	ldr	r2, [r7, #8]
 8003a14:	4413      	add	r3, r2
 8003a16:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003a18:	2208      	movs	r2, #8
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	1a9b      	subs	r3, r3, r2
 8003a1e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f023 0307 	bic.w	r3, r3, #7
 8003a26:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	4a15      	ldr	r2, [pc, #84]	; (8003a80 <prvHeapInit+0xb4>)
 8003a2c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003a2e:	4b14      	ldr	r3, [pc, #80]	; (8003a80 <prvHeapInit+0xb4>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	2200      	movs	r2, #0
 8003a34:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003a36:	4b12      	ldr	r3, [pc, #72]	; (8003a80 <prvHeapInit+0xb4>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	68fa      	ldr	r2, [r7, #12]
 8003a46:	1ad2      	subs	r2, r2, r3
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003a4c:	4b0c      	ldr	r3, [pc, #48]	; (8003a80 <prvHeapInit+0xb4>)
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	4a0a      	ldr	r2, [pc, #40]	; (8003a84 <prvHeapInit+0xb8>)
 8003a5a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	4a09      	ldr	r2, [pc, #36]	; (8003a88 <prvHeapInit+0xbc>)
 8003a62:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003a64:	4b09      	ldr	r3, [pc, #36]	; (8003a8c <prvHeapInit+0xc0>)
 8003a66:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003a6a:	601a      	str	r2, [r3, #0]
}
 8003a6c:	bf00      	nop
 8003a6e:	3714      	adds	r7, #20
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bc80      	pop	{r7}
 8003a74:	4770      	bx	lr
 8003a76:	bf00      	nop
 8003a78:	200004ec 	.word	0x200004ec
 8003a7c:	200010ec 	.word	0x200010ec
 8003a80:	200010f4 	.word	0x200010f4
 8003a84:	200010fc 	.word	0x200010fc
 8003a88:	200010f8 	.word	0x200010f8
 8003a8c:	20001100 	.word	0x20001100

08003a90 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003a90:	b480      	push	{r7}
 8003a92:	b085      	sub	sp, #20
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003a98:	4b27      	ldr	r3, [pc, #156]	; (8003b38 <prvInsertBlockIntoFreeList+0xa8>)
 8003a9a:	60fb      	str	r3, [r7, #12]
 8003a9c:	e002      	b.n	8003aa4 <prvInsertBlockIntoFreeList+0x14>
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	60fb      	str	r3, [r7, #12]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d8f7      	bhi.n	8003a9e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	68ba      	ldr	r2, [r7, #8]
 8003ab8:	4413      	add	r3, r2
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d108      	bne.n	8003ad2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	685a      	ldr	r2, [r3, #4]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	441a      	add	r2, r3
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	68ba      	ldr	r2, [r7, #8]
 8003adc:	441a      	add	r2, r3
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d118      	bne.n	8003b18 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	4b14      	ldr	r3, [pc, #80]	; (8003b3c <prvInsertBlockIntoFreeList+0xac>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d00d      	beq.n	8003b0e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685a      	ldr	r2, [r3, #4]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	441a      	add	r2, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	601a      	str	r2, [r3, #0]
 8003b0c:	e008      	b.n	8003b20 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003b0e:	4b0b      	ldr	r3, [pc, #44]	; (8003b3c <prvInsertBlockIntoFreeList+0xac>)
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	601a      	str	r2, [r3, #0]
 8003b16:	e003      	b.n	8003b20 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003b20:	68fa      	ldr	r2, [r7, #12]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d002      	beq.n	8003b2e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b2e:	bf00      	nop
 8003b30:	3714      	adds	r7, #20
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bc80      	pop	{r7}
 8003b36:	4770      	bx	lr
 8003b38:	200010ec 	.word	0x200010ec
 8003b3c:	200010f4 	.word	0x200010f4

08003b40 <_vsniprintf_r>:
 8003b40:	b530      	push	{r4, r5, lr}
 8003b42:	4614      	mov	r4, r2
 8003b44:	2c00      	cmp	r4, #0
 8003b46:	4605      	mov	r5, r0
 8003b48:	461a      	mov	r2, r3
 8003b4a:	b09b      	sub	sp, #108	; 0x6c
 8003b4c:	da05      	bge.n	8003b5a <_vsniprintf_r+0x1a>
 8003b4e:	238b      	movs	r3, #139	; 0x8b
 8003b50:	6003      	str	r3, [r0, #0]
 8003b52:	f04f 30ff 	mov.w	r0, #4294967295
 8003b56:	b01b      	add	sp, #108	; 0x6c
 8003b58:	bd30      	pop	{r4, r5, pc}
 8003b5a:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003b5e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8003b62:	bf0c      	ite	eq
 8003b64:	4623      	moveq	r3, r4
 8003b66:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003b6a:	9302      	str	r3, [sp, #8]
 8003b6c:	9305      	str	r3, [sp, #20]
 8003b6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b72:	9100      	str	r1, [sp, #0]
 8003b74:	9104      	str	r1, [sp, #16]
 8003b76:	f8ad 300e 	strh.w	r3, [sp, #14]
 8003b7a:	4669      	mov	r1, sp
 8003b7c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003b7e:	f000 f9ff 	bl	8003f80 <_svfiprintf_r>
 8003b82:	1c43      	adds	r3, r0, #1
 8003b84:	bfbc      	itt	lt
 8003b86:	238b      	movlt	r3, #139	; 0x8b
 8003b88:	602b      	strlt	r3, [r5, #0]
 8003b8a:	2c00      	cmp	r4, #0
 8003b8c:	d0e3      	beq.n	8003b56 <_vsniprintf_r+0x16>
 8003b8e:	2200      	movs	r2, #0
 8003b90:	9b00      	ldr	r3, [sp, #0]
 8003b92:	701a      	strb	r2, [r3, #0]
 8003b94:	e7df      	b.n	8003b56 <_vsniprintf_r+0x16>
	...

08003b98 <vsniprintf>:
 8003b98:	b507      	push	{r0, r1, r2, lr}
 8003b9a:	9300      	str	r3, [sp, #0]
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	460a      	mov	r2, r1
 8003ba0:	4601      	mov	r1, r0
 8003ba2:	4803      	ldr	r0, [pc, #12]	; (8003bb0 <vsniprintf+0x18>)
 8003ba4:	6800      	ldr	r0, [r0, #0]
 8003ba6:	f7ff ffcb 	bl	8003b40 <_vsniprintf_r>
 8003baa:	b003      	add	sp, #12
 8003bac:	f85d fb04 	ldr.w	pc, [sp], #4
 8003bb0:	2000005c 	.word	0x2000005c

08003bb4 <memset>:
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	4402      	add	r2, r0
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d100      	bne.n	8003bbe <memset+0xa>
 8003bbc:	4770      	bx	lr
 8003bbe:	f803 1b01 	strb.w	r1, [r3], #1
 8003bc2:	e7f9      	b.n	8003bb8 <memset+0x4>

08003bc4 <_reclaim_reent>:
 8003bc4:	4b29      	ldr	r3, [pc, #164]	; (8003c6c <_reclaim_reent+0xa8>)
 8003bc6:	b570      	push	{r4, r5, r6, lr}
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4604      	mov	r4, r0
 8003bcc:	4283      	cmp	r3, r0
 8003bce:	d04b      	beq.n	8003c68 <_reclaim_reent+0xa4>
 8003bd0:	69c3      	ldr	r3, [r0, #28]
 8003bd2:	b143      	cbz	r3, 8003be6 <_reclaim_reent+0x22>
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d144      	bne.n	8003c64 <_reclaim_reent+0xa0>
 8003bda:	69e3      	ldr	r3, [r4, #28]
 8003bdc:	6819      	ldr	r1, [r3, #0]
 8003bde:	b111      	cbz	r1, 8003be6 <_reclaim_reent+0x22>
 8003be0:	4620      	mov	r0, r4
 8003be2:	f000 f87f 	bl	8003ce4 <_free_r>
 8003be6:	6961      	ldr	r1, [r4, #20]
 8003be8:	b111      	cbz	r1, 8003bf0 <_reclaim_reent+0x2c>
 8003bea:	4620      	mov	r0, r4
 8003bec:	f000 f87a 	bl	8003ce4 <_free_r>
 8003bf0:	69e1      	ldr	r1, [r4, #28]
 8003bf2:	b111      	cbz	r1, 8003bfa <_reclaim_reent+0x36>
 8003bf4:	4620      	mov	r0, r4
 8003bf6:	f000 f875 	bl	8003ce4 <_free_r>
 8003bfa:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003bfc:	b111      	cbz	r1, 8003c04 <_reclaim_reent+0x40>
 8003bfe:	4620      	mov	r0, r4
 8003c00:	f000 f870 	bl	8003ce4 <_free_r>
 8003c04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003c06:	b111      	cbz	r1, 8003c0e <_reclaim_reent+0x4a>
 8003c08:	4620      	mov	r0, r4
 8003c0a:	f000 f86b 	bl	8003ce4 <_free_r>
 8003c0e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003c10:	b111      	cbz	r1, 8003c18 <_reclaim_reent+0x54>
 8003c12:	4620      	mov	r0, r4
 8003c14:	f000 f866 	bl	8003ce4 <_free_r>
 8003c18:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8003c1a:	b111      	cbz	r1, 8003c22 <_reclaim_reent+0x5e>
 8003c1c:	4620      	mov	r0, r4
 8003c1e:	f000 f861 	bl	8003ce4 <_free_r>
 8003c22:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003c24:	b111      	cbz	r1, 8003c2c <_reclaim_reent+0x68>
 8003c26:	4620      	mov	r0, r4
 8003c28:	f000 f85c 	bl	8003ce4 <_free_r>
 8003c2c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003c2e:	b111      	cbz	r1, 8003c36 <_reclaim_reent+0x72>
 8003c30:	4620      	mov	r0, r4
 8003c32:	f000 f857 	bl	8003ce4 <_free_r>
 8003c36:	6a23      	ldr	r3, [r4, #32]
 8003c38:	b1b3      	cbz	r3, 8003c68 <_reclaim_reent+0xa4>
 8003c3a:	4620      	mov	r0, r4
 8003c3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003c40:	4718      	bx	r3
 8003c42:	5949      	ldr	r1, [r1, r5]
 8003c44:	b941      	cbnz	r1, 8003c58 <_reclaim_reent+0x94>
 8003c46:	3504      	adds	r5, #4
 8003c48:	69e3      	ldr	r3, [r4, #28]
 8003c4a:	2d80      	cmp	r5, #128	; 0x80
 8003c4c:	68d9      	ldr	r1, [r3, #12]
 8003c4e:	d1f8      	bne.n	8003c42 <_reclaim_reent+0x7e>
 8003c50:	4620      	mov	r0, r4
 8003c52:	f000 f847 	bl	8003ce4 <_free_r>
 8003c56:	e7c0      	b.n	8003bda <_reclaim_reent+0x16>
 8003c58:	680e      	ldr	r6, [r1, #0]
 8003c5a:	4620      	mov	r0, r4
 8003c5c:	f000 f842 	bl	8003ce4 <_free_r>
 8003c60:	4631      	mov	r1, r6
 8003c62:	e7ef      	b.n	8003c44 <_reclaim_reent+0x80>
 8003c64:	2500      	movs	r5, #0
 8003c66:	e7ef      	b.n	8003c48 <_reclaim_reent+0x84>
 8003c68:	bd70      	pop	{r4, r5, r6, pc}
 8003c6a:	bf00      	nop
 8003c6c:	2000005c 	.word	0x2000005c

08003c70 <__errno>:
 8003c70:	4b01      	ldr	r3, [pc, #4]	; (8003c78 <__errno+0x8>)
 8003c72:	6818      	ldr	r0, [r3, #0]
 8003c74:	4770      	bx	lr
 8003c76:	bf00      	nop
 8003c78:	2000005c 	.word	0x2000005c

08003c7c <__libc_init_array>:
 8003c7c:	b570      	push	{r4, r5, r6, lr}
 8003c7e:	2600      	movs	r6, #0
 8003c80:	4d0c      	ldr	r5, [pc, #48]	; (8003cb4 <__libc_init_array+0x38>)
 8003c82:	4c0d      	ldr	r4, [pc, #52]	; (8003cb8 <__libc_init_array+0x3c>)
 8003c84:	1b64      	subs	r4, r4, r5
 8003c86:	10a4      	asrs	r4, r4, #2
 8003c88:	42a6      	cmp	r6, r4
 8003c8a:	d109      	bne.n	8003ca0 <__libc_init_array+0x24>
 8003c8c:	f000 fc7a 	bl	8004584 <_init>
 8003c90:	2600      	movs	r6, #0
 8003c92:	4d0a      	ldr	r5, [pc, #40]	; (8003cbc <__libc_init_array+0x40>)
 8003c94:	4c0a      	ldr	r4, [pc, #40]	; (8003cc0 <__libc_init_array+0x44>)
 8003c96:	1b64      	subs	r4, r4, r5
 8003c98:	10a4      	asrs	r4, r4, #2
 8003c9a:	42a6      	cmp	r6, r4
 8003c9c:	d105      	bne.n	8003caa <__libc_init_array+0x2e>
 8003c9e:	bd70      	pop	{r4, r5, r6, pc}
 8003ca0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ca4:	4798      	blx	r3
 8003ca6:	3601      	adds	r6, #1
 8003ca8:	e7ee      	b.n	8003c88 <__libc_init_array+0xc>
 8003caa:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cae:	4798      	blx	r3
 8003cb0:	3601      	adds	r6, #1
 8003cb2:	e7f2      	b.n	8003c9a <__libc_init_array+0x1e>
 8003cb4:	0800464c 	.word	0x0800464c
 8003cb8:	0800464c 	.word	0x0800464c
 8003cbc:	0800464c 	.word	0x0800464c
 8003cc0:	08004650 	.word	0x08004650

08003cc4 <__retarget_lock_acquire_recursive>:
 8003cc4:	4770      	bx	lr

08003cc6 <__retarget_lock_release_recursive>:
 8003cc6:	4770      	bx	lr

08003cc8 <memcpy>:
 8003cc8:	440a      	add	r2, r1
 8003cca:	4291      	cmp	r1, r2
 8003ccc:	f100 33ff 	add.w	r3, r0, #4294967295
 8003cd0:	d100      	bne.n	8003cd4 <memcpy+0xc>
 8003cd2:	4770      	bx	lr
 8003cd4:	b510      	push	{r4, lr}
 8003cd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003cda:	4291      	cmp	r1, r2
 8003cdc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003ce0:	d1f9      	bne.n	8003cd6 <memcpy+0xe>
 8003ce2:	bd10      	pop	{r4, pc}

08003ce4 <_free_r>:
 8003ce4:	b538      	push	{r3, r4, r5, lr}
 8003ce6:	4605      	mov	r5, r0
 8003ce8:	2900      	cmp	r1, #0
 8003cea:	d040      	beq.n	8003d6e <_free_r+0x8a>
 8003cec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003cf0:	1f0c      	subs	r4, r1, #4
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	bfb8      	it	lt
 8003cf6:	18e4      	addlt	r4, r4, r3
 8003cf8:	f000 f8dc 	bl	8003eb4 <__malloc_lock>
 8003cfc:	4a1c      	ldr	r2, [pc, #112]	; (8003d70 <_free_r+0x8c>)
 8003cfe:	6813      	ldr	r3, [r2, #0]
 8003d00:	b933      	cbnz	r3, 8003d10 <_free_r+0x2c>
 8003d02:	6063      	str	r3, [r4, #4]
 8003d04:	6014      	str	r4, [r2, #0]
 8003d06:	4628      	mov	r0, r5
 8003d08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d0c:	f000 b8d8 	b.w	8003ec0 <__malloc_unlock>
 8003d10:	42a3      	cmp	r3, r4
 8003d12:	d908      	bls.n	8003d26 <_free_r+0x42>
 8003d14:	6820      	ldr	r0, [r4, #0]
 8003d16:	1821      	adds	r1, r4, r0
 8003d18:	428b      	cmp	r3, r1
 8003d1a:	bf01      	itttt	eq
 8003d1c:	6819      	ldreq	r1, [r3, #0]
 8003d1e:	685b      	ldreq	r3, [r3, #4]
 8003d20:	1809      	addeq	r1, r1, r0
 8003d22:	6021      	streq	r1, [r4, #0]
 8003d24:	e7ed      	b.n	8003d02 <_free_r+0x1e>
 8003d26:	461a      	mov	r2, r3
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	b10b      	cbz	r3, 8003d30 <_free_r+0x4c>
 8003d2c:	42a3      	cmp	r3, r4
 8003d2e:	d9fa      	bls.n	8003d26 <_free_r+0x42>
 8003d30:	6811      	ldr	r1, [r2, #0]
 8003d32:	1850      	adds	r0, r2, r1
 8003d34:	42a0      	cmp	r0, r4
 8003d36:	d10b      	bne.n	8003d50 <_free_r+0x6c>
 8003d38:	6820      	ldr	r0, [r4, #0]
 8003d3a:	4401      	add	r1, r0
 8003d3c:	1850      	adds	r0, r2, r1
 8003d3e:	4283      	cmp	r3, r0
 8003d40:	6011      	str	r1, [r2, #0]
 8003d42:	d1e0      	bne.n	8003d06 <_free_r+0x22>
 8003d44:	6818      	ldr	r0, [r3, #0]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	4408      	add	r0, r1
 8003d4a:	6010      	str	r0, [r2, #0]
 8003d4c:	6053      	str	r3, [r2, #4]
 8003d4e:	e7da      	b.n	8003d06 <_free_r+0x22>
 8003d50:	d902      	bls.n	8003d58 <_free_r+0x74>
 8003d52:	230c      	movs	r3, #12
 8003d54:	602b      	str	r3, [r5, #0]
 8003d56:	e7d6      	b.n	8003d06 <_free_r+0x22>
 8003d58:	6820      	ldr	r0, [r4, #0]
 8003d5a:	1821      	adds	r1, r4, r0
 8003d5c:	428b      	cmp	r3, r1
 8003d5e:	bf01      	itttt	eq
 8003d60:	6819      	ldreq	r1, [r3, #0]
 8003d62:	685b      	ldreq	r3, [r3, #4]
 8003d64:	1809      	addeq	r1, r1, r0
 8003d66:	6021      	streq	r1, [r4, #0]
 8003d68:	6063      	str	r3, [r4, #4]
 8003d6a:	6054      	str	r4, [r2, #4]
 8003d6c:	e7cb      	b.n	8003d06 <_free_r+0x22>
 8003d6e:	bd38      	pop	{r3, r4, r5, pc}
 8003d70:	20001244 	.word	0x20001244

08003d74 <sbrk_aligned>:
 8003d74:	b570      	push	{r4, r5, r6, lr}
 8003d76:	4e0e      	ldr	r6, [pc, #56]	; (8003db0 <sbrk_aligned+0x3c>)
 8003d78:	460c      	mov	r4, r1
 8003d7a:	6831      	ldr	r1, [r6, #0]
 8003d7c:	4605      	mov	r5, r0
 8003d7e:	b911      	cbnz	r1, 8003d86 <sbrk_aligned+0x12>
 8003d80:	f000 fbaa 	bl	80044d8 <_sbrk_r>
 8003d84:	6030      	str	r0, [r6, #0]
 8003d86:	4621      	mov	r1, r4
 8003d88:	4628      	mov	r0, r5
 8003d8a:	f000 fba5 	bl	80044d8 <_sbrk_r>
 8003d8e:	1c43      	adds	r3, r0, #1
 8003d90:	d00a      	beq.n	8003da8 <sbrk_aligned+0x34>
 8003d92:	1cc4      	adds	r4, r0, #3
 8003d94:	f024 0403 	bic.w	r4, r4, #3
 8003d98:	42a0      	cmp	r0, r4
 8003d9a:	d007      	beq.n	8003dac <sbrk_aligned+0x38>
 8003d9c:	1a21      	subs	r1, r4, r0
 8003d9e:	4628      	mov	r0, r5
 8003da0:	f000 fb9a 	bl	80044d8 <_sbrk_r>
 8003da4:	3001      	adds	r0, #1
 8003da6:	d101      	bne.n	8003dac <sbrk_aligned+0x38>
 8003da8:	f04f 34ff 	mov.w	r4, #4294967295
 8003dac:	4620      	mov	r0, r4
 8003dae:	bd70      	pop	{r4, r5, r6, pc}
 8003db0:	20001248 	.word	0x20001248

08003db4 <_malloc_r>:
 8003db4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003db8:	1ccd      	adds	r5, r1, #3
 8003dba:	f025 0503 	bic.w	r5, r5, #3
 8003dbe:	3508      	adds	r5, #8
 8003dc0:	2d0c      	cmp	r5, #12
 8003dc2:	bf38      	it	cc
 8003dc4:	250c      	movcc	r5, #12
 8003dc6:	2d00      	cmp	r5, #0
 8003dc8:	4607      	mov	r7, r0
 8003dca:	db01      	blt.n	8003dd0 <_malloc_r+0x1c>
 8003dcc:	42a9      	cmp	r1, r5
 8003dce:	d905      	bls.n	8003ddc <_malloc_r+0x28>
 8003dd0:	230c      	movs	r3, #12
 8003dd2:	2600      	movs	r6, #0
 8003dd4:	603b      	str	r3, [r7, #0]
 8003dd6:	4630      	mov	r0, r6
 8003dd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ddc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003eb0 <_malloc_r+0xfc>
 8003de0:	f000 f868 	bl	8003eb4 <__malloc_lock>
 8003de4:	f8d8 3000 	ldr.w	r3, [r8]
 8003de8:	461c      	mov	r4, r3
 8003dea:	bb5c      	cbnz	r4, 8003e44 <_malloc_r+0x90>
 8003dec:	4629      	mov	r1, r5
 8003dee:	4638      	mov	r0, r7
 8003df0:	f7ff ffc0 	bl	8003d74 <sbrk_aligned>
 8003df4:	1c43      	adds	r3, r0, #1
 8003df6:	4604      	mov	r4, r0
 8003df8:	d155      	bne.n	8003ea6 <_malloc_r+0xf2>
 8003dfa:	f8d8 4000 	ldr.w	r4, [r8]
 8003dfe:	4626      	mov	r6, r4
 8003e00:	2e00      	cmp	r6, #0
 8003e02:	d145      	bne.n	8003e90 <_malloc_r+0xdc>
 8003e04:	2c00      	cmp	r4, #0
 8003e06:	d048      	beq.n	8003e9a <_malloc_r+0xe6>
 8003e08:	6823      	ldr	r3, [r4, #0]
 8003e0a:	4631      	mov	r1, r6
 8003e0c:	4638      	mov	r0, r7
 8003e0e:	eb04 0903 	add.w	r9, r4, r3
 8003e12:	f000 fb61 	bl	80044d8 <_sbrk_r>
 8003e16:	4581      	cmp	r9, r0
 8003e18:	d13f      	bne.n	8003e9a <_malloc_r+0xe6>
 8003e1a:	6821      	ldr	r1, [r4, #0]
 8003e1c:	4638      	mov	r0, r7
 8003e1e:	1a6d      	subs	r5, r5, r1
 8003e20:	4629      	mov	r1, r5
 8003e22:	f7ff ffa7 	bl	8003d74 <sbrk_aligned>
 8003e26:	3001      	adds	r0, #1
 8003e28:	d037      	beq.n	8003e9a <_malloc_r+0xe6>
 8003e2a:	6823      	ldr	r3, [r4, #0]
 8003e2c:	442b      	add	r3, r5
 8003e2e:	6023      	str	r3, [r4, #0]
 8003e30:	f8d8 3000 	ldr.w	r3, [r8]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d038      	beq.n	8003eaa <_malloc_r+0xf6>
 8003e38:	685a      	ldr	r2, [r3, #4]
 8003e3a:	42a2      	cmp	r2, r4
 8003e3c:	d12b      	bne.n	8003e96 <_malloc_r+0xe2>
 8003e3e:	2200      	movs	r2, #0
 8003e40:	605a      	str	r2, [r3, #4]
 8003e42:	e00f      	b.n	8003e64 <_malloc_r+0xb0>
 8003e44:	6822      	ldr	r2, [r4, #0]
 8003e46:	1b52      	subs	r2, r2, r5
 8003e48:	d41f      	bmi.n	8003e8a <_malloc_r+0xd6>
 8003e4a:	2a0b      	cmp	r2, #11
 8003e4c:	d917      	bls.n	8003e7e <_malloc_r+0xca>
 8003e4e:	1961      	adds	r1, r4, r5
 8003e50:	42a3      	cmp	r3, r4
 8003e52:	6025      	str	r5, [r4, #0]
 8003e54:	bf18      	it	ne
 8003e56:	6059      	strne	r1, [r3, #4]
 8003e58:	6863      	ldr	r3, [r4, #4]
 8003e5a:	bf08      	it	eq
 8003e5c:	f8c8 1000 	streq.w	r1, [r8]
 8003e60:	5162      	str	r2, [r4, r5]
 8003e62:	604b      	str	r3, [r1, #4]
 8003e64:	4638      	mov	r0, r7
 8003e66:	f104 060b 	add.w	r6, r4, #11
 8003e6a:	f000 f829 	bl	8003ec0 <__malloc_unlock>
 8003e6e:	f026 0607 	bic.w	r6, r6, #7
 8003e72:	1d23      	adds	r3, r4, #4
 8003e74:	1af2      	subs	r2, r6, r3
 8003e76:	d0ae      	beq.n	8003dd6 <_malloc_r+0x22>
 8003e78:	1b9b      	subs	r3, r3, r6
 8003e7a:	50a3      	str	r3, [r4, r2]
 8003e7c:	e7ab      	b.n	8003dd6 <_malloc_r+0x22>
 8003e7e:	42a3      	cmp	r3, r4
 8003e80:	6862      	ldr	r2, [r4, #4]
 8003e82:	d1dd      	bne.n	8003e40 <_malloc_r+0x8c>
 8003e84:	f8c8 2000 	str.w	r2, [r8]
 8003e88:	e7ec      	b.n	8003e64 <_malloc_r+0xb0>
 8003e8a:	4623      	mov	r3, r4
 8003e8c:	6864      	ldr	r4, [r4, #4]
 8003e8e:	e7ac      	b.n	8003dea <_malloc_r+0x36>
 8003e90:	4634      	mov	r4, r6
 8003e92:	6876      	ldr	r6, [r6, #4]
 8003e94:	e7b4      	b.n	8003e00 <_malloc_r+0x4c>
 8003e96:	4613      	mov	r3, r2
 8003e98:	e7cc      	b.n	8003e34 <_malloc_r+0x80>
 8003e9a:	230c      	movs	r3, #12
 8003e9c:	4638      	mov	r0, r7
 8003e9e:	603b      	str	r3, [r7, #0]
 8003ea0:	f000 f80e 	bl	8003ec0 <__malloc_unlock>
 8003ea4:	e797      	b.n	8003dd6 <_malloc_r+0x22>
 8003ea6:	6025      	str	r5, [r4, #0]
 8003ea8:	e7dc      	b.n	8003e64 <_malloc_r+0xb0>
 8003eaa:	605b      	str	r3, [r3, #4]
 8003eac:	deff      	udf	#255	; 0xff
 8003eae:	bf00      	nop
 8003eb0:	20001244 	.word	0x20001244

08003eb4 <__malloc_lock>:
 8003eb4:	4801      	ldr	r0, [pc, #4]	; (8003ebc <__malloc_lock+0x8>)
 8003eb6:	f7ff bf05 	b.w	8003cc4 <__retarget_lock_acquire_recursive>
 8003eba:	bf00      	nop
 8003ebc:	20001240 	.word	0x20001240

08003ec0 <__malloc_unlock>:
 8003ec0:	4801      	ldr	r0, [pc, #4]	; (8003ec8 <__malloc_unlock+0x8>)
 8003ec2:	f7ff bf00 	b.w	8003cc6 <__retarget_lock_release_recursive>
 8003ec6:	bf00      	nop
 8003ec8:	20001240 	.word	0x20001240

08003ecc <__ssputs_r>:
 8003ecc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ed0:	461f      	mov	r7, r3
 8003ed2:	688e      	ldr	r6, [r1, #8]
 8003ed4:	4682      	mov	sl, r0
 8003ed6:	42be      	cmp	r6, r7
 8003ed8:	460c      	mov	r4, r1
 8003eda:	4690      	mov	r8, r2
 8003edc:	680b      	ldr	r3, [r1, #0]
 8003ede:	d82c      	bhi.n	8003f3a <__ssputs_r+0x6e>
 8003ee0:	898a      	ldrh	r2, [r1, #12]
 8003ee2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003ee6:	d026      	beq.n	8003f36 <__ssputs_r+0x6a>
 8003ee8:	6965      	ldr	r5, [r4, #20]
 8003eea:	6909      	ldr	r1, [r1, #16]
 8003eec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003ef0:	eba3 0901 	sub.w	r9, r3, r1
 8003ef4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003ef8:	1c7b      	adds	r3, r7, #1
 8003efa:	444b      	add	r3, r9
 8003efc:	106d      	asrs	r5, r5, #1
 8003efe:	429d      	cmp	r5, r3
 8003f00:	bf38      	it	cc
 8003f02:	461d      	movcc	r5, r3
 8003f04:	0553      	lsls	r3, r2, #21
 8003f06:	d527      	bpl.n	8003f58 <__ssputs_r+0x8c>
 8003f08:	4629      	mov	r1, r5
 8003f0a:	f7ff ff53 	bl	8003db4 <_malloc_r>
 8003f0e:	4606      	mov	r6, r0
 8003f10:	b360      	cbz	r0, 8003f6c <__ssputs_r+0xa0>
 8003f12:	464a      	mov	r2, r9
 8003f14:	6921      	ldr	r1, [r4, #16]
 8003f16:	f7ff fed7 	bl	8003cc8 <memcpy>
 8003f1a:	89a3      	ldrh	r3, [r4, #12]
 8003f1c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003f20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f24:	81a3      	strh	r3, [r4, #12]
 8003f26:	6126      	str	r6, [r4, #16]
 8003f28:	444e      	add	r6, r9
 8003f2a:	6026      	str	r6, [r4, #0]
 8003f2c:	463e      	mov	r6, r7
 8003f2e:	6165      	str	r5, [r4, #20]
 8003f30:	eba5 0509 	sub.w	r5, r5, r9
 8003f34:	60a5      	str	r5, [r4, #8]
 8003f36:	42be      	cmp	r6, r7
 8003f38:	d900      	bls.n	8003f3c <__ssputs_r+0x70>
 8003f3a:	463e      	mov	r6, r7
 8003f3c:	4632      	mov	r2, r6
 8003f3e:	4641      	mov	r1, r8
 8003f40:	6820      	ldr	r0, [r4, #0]
 8003f42:	f000 faaf 	bl	80044a4 <memmove>
 8003f46:	2000      	movs	r0, #0
 8003f48:	68a3      	ldr	r3, [r4, #8]
 8003f4a:	1b9b      	subs	r3, r3, r6
 8003f4c:	60a3      	str	r3, [r4, #8]
 8003f4e:	6823      	ldr	r3, [r4, #0]
 8003f50:	4433      	add	r3, r6
 8003f52:	6023      	str	r3, [r4, #0]
 8003f54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f58:	462a      	mov	r2, r5
 8003f5a:	f000 fadb 	bl	8004514 <_realloc_r>
 8003f5e:	4606      	mov	r6, r0
 8003f60:	2800      	cmp	r0, #0
 8003f62:	d1e0      	bne.n	8003f26 <__ssputs_r+0x5a>
 8003f64:	4650      	mov	r0, sl
 8003f66:	6921      	ldr	r1, [r4, #16]
 8003f68:	f7ff febc 	bl	8003ce4 <_free_r>
 8003f6c:	230c      	movs	r3, #12
 8003f6e:	f8ca 3000 	str.w	r3, [sl]
 8003f72:	89a3      	ldrh	r3, [r4, #12]
 8003f74:	f04f 30ff 	mov.w	r0, #4294967295
 8003f78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f7c:	81a3      	strh	r3, [r4, #12]
 8003f7e:	e7e9      	b.n	8003f54 <__ssputs_r+0x88>

08003f80 <_svfiprintf_r>:
 8003f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f84:	4698      	mov	r8, r3
 8003f86:	898b      	ldrh	r3, [r1, #12]
 8003f88:	4607      	mov	r7, r0
 8003f8a:	061b      	lsls	r3, r3, #24
 8003f8c:	460d      	mov	r5, r1
 8003f8e:	4614      	mov	r4, r2
 8003f90:	b09d      	sub	sp, #116	; 0x74
 8003f92:	d50e      	bpl.n	8003fb2 <_svfiprintf_r+0x32>
 8003f94:	690b      	ldr	r3, [r1, #16]
 8003f96:	b963      	cbnz	r3, 8003fb2 <_svfiprintf_r+0x32>
 8003f98:	2140      	movs	r1, #64	; 0x40
 8003f9a:	f7ff ff0b 	bl	8003db4 <_malloc_r>
 8003f9e:	6028      	str	r0, [r5, #0]
 8003fa0:	6128      	str	r0, [r5, #16]
 8003fa2:	b920      	cbnz	r0, 8003fae <_svfiprintf_r+0x2e>
 8003fa4:	230c      	movs	r3, #12
 8003fa6:	603b      	str	r3, [r7, #0]
 8003fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8003fac:	e0d0      	b.n	8004150 <_svfiprintf_r+0x1d0>
 8003fae:	2340      	movs	r3, #64	; 0x40
 8003fb0:	616b      	str	r3, [r5, #20]
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	9309      	str	r3, [sp, #36]	; 0x24
 8003fb6:	2320      	movs	r3, #32
 8003fb8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003fbc:	2330      	movs	r3, #48	; 0x30
 8003fbe:	f04f 0901 	mov.w	r9, #1
 8003fc2:	f8cd 800c 	str.w	r8, [sp, #12]
 8003fc6:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8004168 <_svfiprintf_r+0x1e8>
 8003fca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003fce:	4623      	mov	r3, r4
 8003fd0:	469a      	mov	sl, r3
 8003fd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003fd6:	b10a      	cbz	r2, 8003fdc <_svfiprintf_r+0x5c>
 8003fd8:	2a25      	cmp	r2, #37	; 0x25
 8003fda:	d1f9      	bne.n	8003fd0 <_svfiprintf_r+0x50>
 8003fdc:	ebba 0b04 	subs.w	fp, sl, r4
 8003fe0:	d00b      	beq.n	8003ffa <_svfiprintf_r+0x7a>
 8003fe2:	465b      	mov	r3, fp
 8003fe4:	4622      	mov	r2, r4
 8003fe6:	4629      	mov	r1, r5
 8003fe8:	4638      	mov	r0, r7
 8003fea:	f7ff ff6f 	bl	8003ecc <__ssputs_r>
 8003fee:	3001      	adds	r0, #1
 8003ff0:	f000 80a9 	beq.w	8004146 <_svfiprintf_r+0x1c6>
 8003ff4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003ff6:	445a      	add	r2, fp
 8003ff8:	9209      	str	r2, [sp, #36]	; 0x24
 8003ffa:	f89a 3000 	ldrb.w	r3, [sl]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	f000 80a1 	beq.w	8004146 <_svfiprintf_r+0x1c6>
 8004004:	2300      	movs	r3, #0
 8004006:	f04f 32ff 	mov.w	r2, #4294967295
 800400a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800400e:	f10a 0a01 	add.w	sl, sl, #1
 8004012:	9304      	str	r3, [sp, #16]
 8004014:	9307      	str	r3, [sp, #28]
 8004016:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800401a:	931a      	str	r3, [sp, #104]	; 0x68
 800401c:	4654      	mov	r4, sl
 800401e:	2205      	movs	r2, #5
 8004020:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004024:	4850      	ldr	r0, [pc, #320]	; (8004168 <_svfiprintf_r+0x1e8>)
 8004026:	f000 fa67 	bl	80044f8 <memchr>
 800402a:	9a04      	ldr	r2, [sp, #16]
 800402c:	b9d8      	cbnz	r0, 8004066 <_svfiprintf_r+0xe6>
 800402e:	06d0      	lsls	r0, r2, #27
 8004030:	bf44      	itt	mi
 8004032:	2320      	movmi	r3, #32
 8004034:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004038:	0711      	lsls	r1, r2, #28
 800403a:	bf44      	itt	mi
 800403c:	232b      	movmi	r3, #43	; 0x2b
 800403e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004042:	f89a 3000 	ldrb.w	r3, [sl]
 8004046:	2b2a      	cmp	r3, #42	; 0x2a
 8004048:	d015      	beq.n	8004076 <_svfiprintf_r+0xf6>
 800404a:	4654      	mov	r4, sl
 800404c:	2000      	movs	r0, #0
 800404e:	f04f 0c0a 	mov.w	ip, #10
 8004052:	9a07      	ldr	r2, [sp, #28]
 8004054:	4621      	mov	r1, r4
 8004056:	f811 3b01 	ldrb.w	r3, [r1], #1
 800405a:	3b30      	subs	r3, #48	; 0x30
 800405c:	2b09      	cmp	r3, #9
 800405e:	d94d      	bls.n	80040fc <_svfiprintf_r+0x17c>
 8004060:	b1b0      	cbz	r0, 8004090 <_svfiprintf_r+0x110>
 8004062:	9207      	str	r2, [sp, #28]
 8004064:	e014      	b.n	8004090 <_svfiprintf_r+0x110>
 8004066:	eba0 0308 	sub.w	r3, r0, r8
 800406a:	fa09 f303 	lsl.w	r3, r9, r3
 800406e:	4313      	orrs	r3, r2
 8004070:	46a2      	mov	sl, r4
 8004072:	9304      	str	r3, [sp, #16]
 8004074:	e7d2      	b.n	800401c <_svfiprintf_r+0x9c>
 8004076:	9b03      	ldr	r3, [sp, #12]
 8004078:	1d19      	adds	r1, r3, #4
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	9103      	str	r1, [sp, #12]
 800407e:	2b00      	cmp	r3, #0
 8004080:	bfbb      	ittet	lt
 8004082:	425b      	neglt	r3, r3
 8004084:	f042 0202 	orrlt.w	r2, r2, #2
 8004088:	9307      	strge	r3, [sp, #28]
 800408a:	9307      	strlt	r3, [sp, #28]
 800408c:	bfb8      	it	lt
 800408e:	9204      	strlt	r2, [sp, #16]
 8004090:	7823      	ldrb	r3, [r4, #0]
 8004092:	2b2e      	cmp	r3, #46	; 0x2e
 8004094:	d10c      	bne.n	80040b0 <_svfiprintf_r+0x130>
 8004096:	7863      	ldrb	r3, [r4, #1]
 8004098:	2b2a      	cmp	r3, #42	; 0x2a
 800409a:	d134      	bne.n	8004106 <_svfiprintf_r+0x186>
 800409c:	9b03      	ldr	r3, [sp, #12]
 800409e:	3402      	adds	r4, #2
 80040a0:	1d1a      	adds	r2, r3, #4
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	9203      	str	r2, [sp, #12]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	bfb8      	it	lt
 80040aa:	f04f 33ff 	movlt.w	r3, #4294967295
 80040ae:	9305      	str	r3, [sp, #20]
 80040b0:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800416c <_svfiprintf_r+0x1ec>
 80040b4:	2203      	movs	r2, #3
 80040b6:	4650      	mov	r0, sl
 80040b8:	7821      	ldrb	r1, [r4, #0]
 80040ba:	f000 fa1d 	bl	80044f8 <memchr>
 80040be:	b138      	cbz	r0, 80040d0 <_svfiprintf_r+0x150>
 80040c0:	2240      	movs	r2, #64	; 0x40
 80040c2:	9b04      	ldr	r3, [sp, #16]
 80040c4:	eba0 000a 	sub.w	r0, r0, sl
 80040c8:	4082      	lsls	r2, r0
 80040ca:	4313      	orrs	r3, r2
 80040cc:	3401      	adds	r4, #1
 80040ce:	9304      	str	r3, [sp, #16]
 80040d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040d4:	2206      	movs	r2, #6
 80040d6:	4826      	ldr	r0, [pc, #152]	; (8004170 <_svfiprintf_r+0x1f0>)
 80040d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80040dc:	f000 fa0c 	bl	80044f8 <memchr>
 80040e0:	2800      	cmp	r0, #0
 80040e2:	d038      	beq.n	8004156 <_svfiprintf_r+0x1d6>
 80040e4:	4b23      	ldr	r3, [pc, #140]	; (8004174 <_svfiprintf_r+0x1f4>)
 80040e6:	bb1b      	cbnz	r3, 8004130 <_svfiprintf_r+0x1b0>
 80040e8:	9b03      	ldr	r3, [sp, #12]
 80040ea:	3307      	adds	r3, #7
 80040ec:	f023 0307 	bic.w	r3, r3, #7
 80040f0:	3308      	adds	r3, #8
 80040f2:	9303      	str	r3, [sp, #12]
 80040f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040f6:	4433      	add	r3, r6
 80040f8:	9309      	str	r3, [sp, #36]	; 0x24
 80040fa:	e768      	b.n	8003fce <_svfiprintf_r+0x4e>
 80040fc:	460c      	mov	r4, r1
 80040fe:	2001      	movs	r0, #1
 8004100:	fb0c 3202 	mla	r2, ip, r2, r3
 8004104:	e7a6      	b.n	8004054 <_svfiprintf_r+0xd4>
 8004106:	2300      	movs	r3, #0
 8004108:	f04f 0c0a 	mov.w	ip, #10
 800410c:	4619      	mov	r1, r3
 800410e:	3401      	adds	r4, #1
 8004110:	9305      	str	r3, [sp, #20]
 8004112:	4620      	mov	r0, r4
 8004114:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004118:	3a30      	subs	r2, #48	; 0x30
 800411a:	2a09      	cmp	r2, #9
 800411c:	d903      	bls.n	8004126 <_svfiprintf_r+0x1a6>
 800411e:	2b00      	cmp	r3, #0
 8004120:	d0c6      	beq.n	80040b0 <_svfiprintf_r+0x130>
 8004122:	9105      	str	r1, [sp, #20]
 8004124:	e7c4      	b.n	80040b0 <_svfiprintf_r+0x130>
 8004126:	4604      	mov	r4, r0
 8004128:	2301      	movs	r3, #1
 800412a:	fb0c 2101 	mla	r1, ip, r1, r2
 800412e:	e7f0      	b.n	8004112 <_svfiprintf_r+0x192>
 8004130:	ab03      	add	r3, sp, #12
 8004132:	9300      	str	r3, [sp, #0]
 8004134:	462a      	mov	r2, r5
 8004136:	4638      	mov	r0, r7
 8004138:	4b0f      	ldr	r3, [pc, #60]	; (8004178 <_svfiprintf_r+0x1f8>)
 800413a:	a904      	add	r1, sp, #16
 800413c:	f3af 8000 	nop.w
 8004140:	1c42      	adds	r2, r0, #1
 8004142:	4606      	mov	r6, r0
 8004144:	d1d6      	bne.n	80040f4 <_svfiprintf_r+0x174>
 8004146:	89ab      	ldrh	r3, [r5, #12]
 8004148:	065b      	lsls	r3, r3, #25
 800414a:	f53f af2d 	bmi.w	8003fa8 <_svfiprintf_r+0x28>
 800414e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004150:	b01d      	add	sp, #116	; 0x74
 8004152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004156:	ab03      	add	r3, sp, #12
 8004158:	9300      	str	r3, [sp, #0]
 800415a:	462a      	mov	r2, r5
 800415c:	4638      	mov	r0, r7
 800415e:	4b06      	ldr	r3, [pc, #24]	; (8004178 <_svfiprintf_r+0x1f8>)
 8004160:	a904      	add	r1, sp, #16
 8004162:	f000 f87d 	bl	8004260 <_printf_i>
 8004166:	e7eb      	b.n	8004140 <_svfiprintf_r+0x1c0>
 8004168:	08004616 	.word	0x08004616
 800416c:	0800461c 	.word	0x0800461c
 8004170:	08004620 	.word	0x08004620
 8004174:	00000000 	.word	0x00000000
 8004178:	08003ecd 	.word	0x08003ecd

0800417c <_printf_common>:
 800417c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004180:	4616      	mov	r6, r2
 8004182:	4699      	mov	r9, r3
 8004184:	688a      	ldr	r2, [r1, #8]
 8004186:	690b      	ldr	r3, [r1, #16]
 8004188:	4607      	mov	r7, r0
 800418a:	4293      	cmp	r3, r2
 800418c:	bfb8      	it	lt
 800418e:	4613      	movlt	r3, r2
 8004190:	6033      	str	r3, [r6, #0]
 8004192:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004196:	460c      	mov	r4, r1
 8004198:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800419c:	b10a      	cbz	r2, 80041a2 <_printf_common+0x26>
 800419e:	3301      	adds	r3, #1
 80041a0:	6033      	str	r3, [r6, #0]
 80041a2:	6823      	ldr	r3, [r4, #0]
 80041a4:	0699      	lsls	r1, r3, #26
 80041a6:	bf42      	ittt	mi
 80041a8:	6833      	ldrmi	r3, [r6, #0]
 80041aa:	3302      	addmi	r3, #2
 80041ac:	6033      	strmi	r3, [r6, #0]
 80041ae:	6825      	ldr	r5, [r4, #0]
 80041b0:	f015 0506 	ands.w	r5, r5, #6
 80041b4:	d106      	bne.n	80041c4 <_printf_common+0x48>
 80041b6:	f104 0a19 	add.w	sl, r4, #25
 80041ba:	68e3      	ldr	r3, [r4, #12]
 80041bc:	6832      	ldr	r2, [r6, #0]
 80041be:	1a9b      	subs	r3, r3, r2
 80041c0:	42ab      	cmp	r3, r5
 80041c2:	dc2b      	bgt.n	800421c <_printf_common+0xa0>
 80041c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80041c8:	1e13      	subs	r3, r2, #0
 80041ca:	6822      	ldr	r2, [r4, #0]
 80041cc:	bf18      	it	ne
 80041ce:	2301      	movne	r3, #1
 80041d0:	0692      	lsls	r2, r2, #26
 80041d2:	d430      	bmi.n	8004236 <_printf_common+0xba>
 80041d4:	4649      	mov	r1, r9
 80041d6:	4638      	mov	r0, r7
 80041d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80041dc:	47c0      	blx	r8
 80041de:	3001      	adds	r0, #1
 80041e0:	d023      	beq.n	800422a <_printf_common+0xae>
 80041e2:	6823      	ldr	r3, [r4, #0]
 80041e4:	6922      	ldr	r2, [r4, #16]
 80041e6:	f003 0306 	and.w	r3, r3, #6
 80041ea:	2b04      	cmp	r3, #4
 80041ec:	bf14      	ite	ne
 80041ee:	2500      	movne	r5, #0
 80041f0:	6833      	ldreq	r3, [r6, #0]
 80041f2:	f04f 0600 	mov.w	r6, #0
 80041f6:	bf08      	it	eq
 80041f8:	68e5      	ldreq	r5, [r4, #12]
 80041fa:	f104 041a 	add.w	r4, r4, #26
 80041fe:	bf08      	it	eq
 8004200:	1aed      	subeq	r5, r5, r3
 8004202:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004206:	bf08      	it	eq
 8004208:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800420c:	4293      	cmp	r3, r2
 800420e:	bfc4      	itt	gt
 8004210:	1a9b      	subgt	r3, r3, r2
 8004212:	18ed      	addgt	r5, r5, r3
 8004214:	42b5      	cmp	r5, r6
 8004216:	d11a      	bne.n	800424e <_printf_common+0xd2>
 8004218:	2000      	movs	r0, #0
 800421a:	e008      	b.n	800422e <_printf_common+0xb2>
 800421c:	2301      	movs	r3, #1
 800421e:	4652      	mov	r2, sl
 8004220:	4649      	mov	r1, r9
 8004222:	4638      	mov	r0, r7
 8004224:	47c0      	blx	r8
 8004226:	3001      	adds	r0, #1
 8004228:	d103      	bne.n	8004232 <_printf_common+0xb6>
 800422a:	f04f 30ff 	mov.w	r0, #4294967295
 800422e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004232:	3501      	adds	r5, #1
 8004234:	e7c1      	b.n	80041ba <_printf_common+0x3e>
 8004236:	2030      	movs	r0, #48	; 0x30
 8004238:	18e1      	adds	r1, r4, r3
 800423a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800423e:	1c5a      	adds	r2, r3, #1
 8004240:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004244:	4422      	add	r2, r4
 8004246:	3302      	adds	r3, #2
 8004248:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800424c:	e7c2      	b.n	80041d4 <_printf_common+0x58>
 800424e:	2301      	movs	r3, #1
 8004250:	4622      	mov	r2, r4
 8004252:	4649      	mov	r1, r9
 8004254:	4638      	mov	r0, r7
 8004256:	47c0      	blx	r8
 8004258:	3001      	adds	r0, #1
 800425a:	d0e6      	beq.n	800422a <_printf_common+0xae>
 800425c:	3601      	adds	r6, #1
 800425e:	e7d9      	b.n	8004214 <_printf_common+0x98>

08004260 <_printf_i>:
 8004260:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004264:	7e0f      	ldrb	r7, [r1, #24]
 8004266:	4691      	mov	r9, r2
 8004268:	2f78      	cmp	r7, #120	; 0x78
 800426a:	4680      	mov	r8, r0
 800426c:	460c      	mov	r4, r1
 800426e:	469a      	mov	sl, r3
 8004270:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004272:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004276:	d807      	bhi.n	8004288 <_printf_i+0x28>
 8004278:	2f62      	cmp	r7, #98	; 0x62
 800427a:	d80a      	bhi.n	8004292 <_printf_i+0x32>
 800427c:	2f00      	cmp	r7, #0
 800427e:	f000 80d5 	beq.w	800442c <_printf_i+0x1cc>
 8004282:	2f58      	cmp	r7, #88	; 0x58
 8004284:	f000 80c1 	beq.w	800440a <_printf_i+0x1aa>
 8004288:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800428c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004290:	e03a      	b.n	8004308 <_printf_i+0xa8>
 8004292:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004296:	2b15      	cmp	r3, #21
 8004298:	d8f6      	bhi.n	8004288 <_printf_i+0x28>
 800429a:	a101      	add	r1, pc, #4	; (adr r1, 80042a0 <_printf_i+0x40>)
 800429c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80042a0:	080042f9 	.word	0x080042f9
 80042a4:	0800430d 	.word	0x0800430d
 80042a8:	08004289 	.word	0x08004289
 80042ac:	08004289 	.word	0x08004289
 80042b0:	08004289 	.word	0x08004289
 80042b4:	08004289 	.word	0x08004289
 80042b8:	0800430d 	.word	0x0800430d
 80042bc:	08004289 	.word	0x08004289
 80042c0:	08004289 	.word	0x08004289
 80042c4:	08004289 	.word	0x08004289
 80042c8:	08004289 	.word	0x08004289
 80042cc:	08004413 	.word	0x08004413
 80042d0:	08004339 	.word	0x08004339
 80042d4:	080043cd 	.word	0x080043cd
 80042d8:	08004289 	.word	0x08004289
 80042dc:	08004289 	.word	0x08004289
 80042e0:	08004435 	.word	0x08004435
 80042e4:	08004289 	.word	0x08004289
 80042e8:	08004339 	.word	0x08004339
 80042ec:	08004289 	.word	0x08004289
 80042f0:	08004289 	.word	0x08004289
 80042f4:	080043d5 	.word	0x080043d5
 80042f8:	682b      	ldr	r3, [r5, #0]
 80042fa:	1d1a      	adds	r2, r3, #4
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	602a      	str	r2, [r5, #0]
 8004300:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004304:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004308:	2301      	movs	r3, #1
 800430a:	e0a0      	b.n	800444e <_printf_i+0x1ee>
 800430c:	6820      	ldr	r0, [r4, #0]
 800430e:	682b      	ldr	r3, [r5, #0]
 8004310:	0607      	lsls	r7, r0, #24
 8004312:	f103 0104 	add.w	r1, r3, #4
 8004316:	6029      	str	r1, [r5, #0]
 8004318:	d501      	bpl.n	800431e <_printf_i+0xbe>
 800431a:	681e      	ldr	r6, [r3, #0]
 800431c:	e003      	b.n	8004326 <_printf_i+0xc6>
 800431e:	0646      	lsls	r6, r0, #25
 8004320:	d5fb      	bpl.n	800431a <_printf_i+0xba>
 8004322:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004326:	2e00      	cmp	r6, #0
 8004328:	da03      	bge.n	8004332 <_printf_i+0xd2>
 800432a:	232d      	movs	r3, #45	; 0x2d
 800432c:	4276      	negs	r6, r6
 800432e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004332:	230a      	movs	r3, #10
 8004334:	4859      	ldr	r0, [pc, #356]	; (800449c <_printf_i+0x23c>)
 8004336:	e012      	b.n	800435e <_printf_i+0xfe>
 8004338:	682b      	ldr	r3, [r5, #0]
 800433a:	6820      	ldr	r0, [r4, #0]
 800433c:	1d19      	adds	r1, r3, #4
 800433e:	6029      	str	r1, [r5, #0]
 8004340:	0605      	lsls	r5, r0, #24
 8004342:	d501      	bpl.n	8004348 <_printf_i+0xe8>
 8004344:	681e      	ldr	r6, [r3, #0]
 8004346:	e002      	b.n	800434e <_printf_i+0xee>
 8004348:	0641      	lsls	r1, r0, #25
 800434a:	d5fb      	bpl.n	8004344 <_printf_i+0xe4>
 800434c:	881e      	ldrh	r6, [r3, #0]
 800434e:	2f6f      	cmp	r7, #111	; 0x6f
 8004350:	bf0c      	ite	eq
 8004352:	2308      	moveq	r3, #8
 8004354:	230a      	movne	r3, #10
 8004356:	4851      	ldr	r0, [pc, #324]	; (800449c <_printf_i+0x23c>)
 8004358:	2100      	movs	r1, #0
 800435a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800435e:	6865      	ldr	r5, [r4, #4]
 8004360:	2d00      	cmp	r5, #0
 8004362:	bfa8      	it	ge
 8004364:	6821      	ldrge	r1, [r4, #0]
 8004366:	60a5      	str	r5, [r4, #8]
 8004368:	bfa4      	itt	ge
 800436a:	f021 0104 	bicge.w	r1, r1, #4
 800436e:	6021      	strge	r1, [r4, #0]
 8004370:	b90e      	cbnz	r6, 8004376 <_printf_i+0x116>
 8004372:	2d00      	cmp	r5, #0
 8004374:	d04b      	beq.n	800440e <_printf_i+0x1ae>
 8004376:	4615      	mov	r5, r2
 8004378:	fbb6 f1f3 	udiv	r1, r6, r3
 800437c:	fb03 6711 	mls	r7, r3, r1, r6
 8004380:	5dc7      	ldrb	r7, [r0, r7]
 8004382:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004386:	4637      	mov	r7, r6
 8004388:	42bb      	cmp	r3, r7
 800438a:	460e      	mov	r6, r1
 800438c:	d9f4      	bls.n	8004378 <_printf_i+0x118>
 800438e:	2b08      	cmp	r3, #8
 8004390:	d10b      	bne.n	80043aa <_printf_i+0x14a>
 8004392:	6823      	ldr	r3, [r4, #0]
 8004394:	07de      	lsls	r6, r3, #31
 8004396:	d508      	bpl.n	80043aa <_printf_i+0x14a>
 8004398:	6923      	ldr	r3, [r4, #16]
 800439a:	6861      	ldr	r1, [r4, #4]
 800439c:	4299      	cmp	r1, r3
 800439e:	bfde      	ittt	le
 80043a0:	2330      	movle	r3, #48	; 0x30
 80043a2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80043a6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80043aa:	1b52      	subs	r2, r2, r5
 80043ac:	6122      	str	r2, [r4, #16]
 80043ae:	464b      	mov	r3, r9
 80043b0:	4621      	mov	r1, r4
 80043b2:	4640      	mov	r0, r8
 80043b4:	f8cd a000 	str.w	sl, [sp]
 80043b8:	aa03      	add	r2, sp, #12
 80043ba:	f7ff fedf 	bl	800417c <_printf_common>
 80043be:	3001      	adds	r0, #1
 80043c0:	d14a      	bne.n	8004458 <_printf_i+0x1f8>
 80043c2:	f04f 30ff 	mov.w	r0, #4294967295
 80043c6:	b004      	add	sp, #16
 80043c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043cc:	6823      	ldr	r3, [r4, #0]
 80043ce:	f043 0320 	orr.w	r3, r3, #32
 80043d2:	6023      	str	r3, [r4, #0]
 80043d4:	2778      	movs	r7, #120	; 0x78
 80043d6:	4832      	ldr	r0, [pc, #200]	; (80044a0 <_printf_i+0x240>)
 80043d8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80043dc:	6823      	ldr	r3, [r4, #0]
 80043de:	6829      	ldr	r1, [r5, #0]
 80043e0:	061f      	lsls	r7, r3, #24
 80043e2:	f851 6b04 	ldr.w	r6, [r1], #4
 80043e6:	d402      	bmi.n	80043ee <_printf_i+0x18e>
 80043e8:	065f      	lsls	r7, r3, #25
 80043ea:	bf48      	it	mi
 80043ec:	b2b6      	uxthmi	r6, r6
 80043ee:	07df      	lsls	r7, r3, #31
 80043f0:	bf48      	it	mi
 80043f2:	f043 0320 	orrmi.w	r3, r3, #32
 80043f6:	6029      	str	r1, [r5, #0]
 80043f8:	bf48      	it	mi
 80043fa:	6023      	strmi	r3, [r4, #0]
 80043fc:	b91e      	cbnz	r6, 8004406 <_printf_i+0x1a6>
 80043fe:	6823      	ldr	r3, [r4, #0]
 8004400:	f023 0320 	bic.w	r3, r3, #32
 8004404:	6023      	str	r3, [r4, #0]
 8004406:	2310      	movs	r3, #16
 8004408:	e7a6      	b.n	8004358 <_printf_i+0xf8>
 800440a:	4824      	ldr	r0, [pc, #144]	; (800449c <_printf_i+0x23c>)
 800440c:	e7e4      	b.n	80043d8 <_printf_i+0x178>
 800440e:	4615      	mov	r5, r2
 8004410:	e7bd      	b.n	800438e <_printf_i+0x12e>
 8004412:	682b      	ldr	r3, [r5, #0]
 8004414:	6826      	ldr	r6, [r4, #0]
 8004416:	1d18      	adds	r0, r3, #4
 8004418:	6961      	ldr	r1, [r4, #20]
 800441a:	6028      	str	r0, [r5, #0]
 800441c:	0635      	lsls	r5, r6, #24
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	d501      	bpl.n	8004426 <_printf_i+0x1c6>
 8004422:	6019      	str	r1, [r3, #0]
 8004424:	e002      	b.n	800442c <_printf_i+0x1cc>
 8004426:	0670      	lsls	r0, r6, #25
 8004428:	d5fb      	bpl.n	8004422 <_printf_i+0x1c2>
 800442a:	8019      	strh	r1, [r3, #0]
 800442c:	2300      	movs	r3, #0
 800442e:	4615      	mov	r5, r2
 8004430:	6123      	str	r3, [r4, #16]
 8004432:	e7bc      	b.n	80043ae <_printf_i+0x14e>
 8004434:	682b      	ldr	r3, [r5, #0]
 8004436:	2100      	movs	r1, #0
 8004438:	1d1a      	adds	r2, r3, #4
 800443a:	602a      	str	r2, [r5, #0]
 800443c:	681d      	ldr	r5, [r3, #0]
 800443e:	6862      	ldr	r2, [r4, #4]
 8004440:	4628      	mov	r0, r5
 8004442:	f000 f859 	bl	80044f8 <memchr>
 8004446:	b108      	cbz	r0, 800444c <_printf_i+0x1ec>
 8004448:	1b40      	subs	r0, r0, r5
 800444a:	6060      	str	r0, [r4, #4]
 800444c:	6863      	ldr	r3, [r4, #4]
 800444e:	6123      	str	r3, [r4, #16]
 8004450:	2300      	movs	r3, #0
 8004452:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004456:	e7aa      	b.n	80043ae <_printf_i+0x14e>
 8004458:	462a      	mov	r2, r5
 800445a:	4649      	mov	r1, r9
 800445c:	4640      	mov	r0, r8
 800445e:	6923      	ldr	r3, [r4, #16]
 8004460:	47d0      	blx	sl
 8004462:	3001      	adds	r0, #1
 8004464:	d0ad      	beq.n	80043c2 <_printf_i+0x162>
 8004466:	6823      	ldr	r3, [r4, #0]
 8004468:	079b      	lsls	r3, r3, #30
 800446a:	d413      	bmi.n	8004494 <_printf_i+0x234>
 800446c:	68e0      	ldr	r0, [r4, #12]
 800446e:	9b03      	ldr	r3, [sp, #12]
 8004470:	4298      	cmp	r0, r3
 8004472:	bfb8      	it	lt
 8004474:	4618      	movlt	r0, r3
 8004476:	e7a6      	b.n	80043c6 <_printf_i+0x166>
 8004478:	2301      	movs	r3, #1
 800447a:	4632      	mov	r2, r6
 800447c:	4649      	mov	r1, r9
 800447e:	4640      	mov	r0, r8
 8004480:	47d0      	blx	sl
 8004482:	3001      	adds	r0, #1
 8004484:	d09d      	beq.n	80043c2 <_printf_i+0x162>
 8004486:	3501      	adds	r5, #1
 8004488:	68e3      	ldr	r3, [r4, #12]
 800448a:	9903      	ldr	r1, [sp, #12]
 800448c:	1a5b      	subs	r3, r3, r1
 800448e:	42ab      	cmp	r3, r5
 8004490:	dcf2      	bgt.n	8004478 <_printf_i+0x218>
 8004492:	e7eb      	b.n	800446c <_printf_i+0x20c>
 8004494:	2500      	movs	r5, #0
 8004496:	f104 0619 	add.w	r6, r4, #25
 800449a:	e7f5      	b.n	8004488 <_printf_i+0x228>
 800449c:	08004627 	.word	0x08004627
 80044a0:	08004638 	.word	0x08004638

080044a4 <memmove>:
 80044a4:	4288      	cmp	r0, r1
 80044a6:	b510      	push	{r4, lr}
 80044a8:	eb01 0402 	add.w	r4, r1, r2
 80044ac:	d902      	bls.n	80044b4 <memmove+0x10>
 80044ae:	4284      	cmp	r4, r0
 80044b0:	4623      	mov	r3, r4
 80044b2:	d807      	bhi.n	80044c4 <memmove+0x20>
 80044b4:	1e43      	subs	r3, r0, #1
 80044b6:	42a1      	cmp	r1, r4
 80044b8:	d008      	beq.n	80044cc <memmove+0x28>
 80044ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80044be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80044c2:	e7f8      	b.n	80044b6 <memmove+0x12>
 80044c4:	4601      	mov	r1, r0
 80044c6:	4402      	add	r2, r0
 80044c8:	428a      	cmp	r2, r1
 80044ca:	d100      	bne.n	80044ce <memmove+0x2a>
 80044cc:	bd10      	pop	{r4, pc}
 80044ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80044d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80044d6:	e7f7      	b.n	80044c8 <memmove+0x24>

080044d8 <_sbrk_r>:
 80044d8:	b538      	push	{r3, r4, r5, lr}
 80044da:	2300      	movs	r3, #0
 80044dc:	4d05      	ldr	r5, [pc, #20]	; (80044f4 <_sbrk_r+0x1c>)
 80044de:	4604      	mov	r4, r0
 80044e0:	4608      	mov	r0, r1
 80044e2:	602b      	str	r3, [r5, #0]
 80044e4:	f7fc f862 	bl	80005ac <_sbrk>
 80044e8:	1c43      	adds	r3, r0, #1
 80044ea:	d102      	bne.n	80044f2 <_sbrk_r+0x1a>
 80044ec:	682b      	ldr	r3, [r5, #0]
 80044ee:	b103      	cbz	r3, 80044f2 <_sbrk_r+0x1a>
 80044f0:	6023      	str	r3, [r4, #0]
 80044f2:	bd38      	pop	{r3, r4, r5, pc}
 80044f4:	2000123c 	.word	0x2000123c

080044f8 <memchr>:
 80044f8:	4603      	mov	r3, r0
 80044fa:	b510      	push	{r4, lr}
 80044fc:	b2c9      	uxtb	r1, r1
 80044fe:	4402      	add	r2, r0
 8004500:	4293      	cmp	r3, r2
 8004502:	4618      	mov	r0, r3
 8004504:	d101      	bne.n	800450a <memchr+0x12>
 8004506:	2000      	movs	r0, #0
 8004508:	e003      	b.n	8004512 <memchr+0x1a>
 800450a:	7804      	ldrb	r4, [r0, #0]
 800450c:	3301      	adds	r3, #1
 800450e:	428c      	cmp	r4, r1
 8004510:	d1f6      	bne.n	8004500 <memchr+0x8>
 8004512:	bd10      	pop	{r4, pc}

08004514 <_realloc_r>:
 8004514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004518:	4680      	mov	r8, r0
 800451a:	4614      	mov	r4, r2
 800451c:	460e      	mov	r6, r1
 800451e:	b921      	cbnz	r1, 800452a <_realloc_r+0x16>
 8004520:	4611      	mov	r1, r2
 8004522:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004526:	f7ff bc45 	b.w	8003db4 <_malloc_r>
 800452a:	b92a      	cbnz	r2, 8004538 <_realloc_r+0x24>
 800452c:	f7ff fbda 	bl	8003ce4 <_free_r>
 8004530:	4625      	mov	r5, r4
 8004532:	4628      	mov	r0, r5
 8004534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004538:	f000 f81b 	bl	8004572 <_malloc_usable_size_r>
 800453c:	4284      	cmp	r4, r0
 800453e:	4607      	mov	r7, r0
 8004540:	d802      	bhi.n	8004548 <_realloc_r+0x34>
 8004542:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004546:	d812      	bhi.n	800456e <_realloc_r+0x5a>
 8004548:	4621      	mov	r1, r4
 800454a:	4640      	mov	r0, r8
 800454c:	f7ff fc32 	bl	8003db4 <_malloc_r>
 8004550:	4605      	mov	r5, r0
 8004552:	2800      	cmp	r0, #0
 8004554:	d0ed      	beq.n	8004532 <_realloc_r+0x1e>
 8004556:	42bc      	cmp	r4, r7
 8004558:	4622      	mov	r2, r4
 800455a:	4631      	mov	r1, r6
 800455c:	bf28      	it	cs
 800455e:	463a      	movcs	r2, r7
 8004560:	f7ff fbb2 	bl	8003cc8 <memcpy>
 8004564:	4631      	mov	r1, r6
 8004566:	4640      	mov	r0, r8
 8004568:	f7ff fbbc 	bl	8003ce4 <_free_r>
 800456c:	e7e1      	b.n	8004532 <_realloc_r+0x1e>
 800456e:	4635      	mov	r5, r6
 8004570:	e7df      	b.n	8004532 <_realloc_r+0x1e>

08004572 <_malloc_usable_size_r>:
 8004572:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004576:	1f18      	subs	r0, r3, #4
 8004578:	2b00      	cmp	r3, #0
 800457a:	bfbc      	itt	lt
 800457c:	580b      	ldrlt	r3, [r1, r0]
 800457e:	18c0      	addlt	r0, r0, r3
 8004580:	4770      	bx	lr
	...

08004584 <_init>:
 8004584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004586:	bf00      	nop
 8004588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800458a:	bc08      	pop	{r3}
 800458c:	469e      	mov	lr, r3
 800458e:	4770      	bx	lr

08004590 <_fini>:
 8004590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004592:	bf00      	nop
 8004594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004596:	bc08      	pop	{r3}
 8004598:	469e      	mov	lr, r3
 800459a:	4770      	bx	lr
