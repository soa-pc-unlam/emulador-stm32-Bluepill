
freertos_singlethread.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f194  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  0800f2a4  0800f2a4  0001f2a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f300  0800f300  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  0800f300  0800f300  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800f300  0800f300  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f300  0800f300  0001f300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f304  0800f304  0001f304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  0800f308  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011d8  20000060  0800f368  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001238  0800f368  00021238  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fd69  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b62  00000000  00000000  0002fe35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000288  00000000  00000000  00032998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000b53c  00000000  00000000  00032c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0000513a  00000000  00000000  0003e15c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000420c  00000000  00000000  00043298  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000099  00000000  00000000  000474a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 00000019  00000000  00000000  0004753d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	0800f28c 	.word	0x0800f28c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	0800f28c 	.word	0x0800f28c

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	; (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	; (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	; 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	2000007c 	.word	0x2000007c
 800017c:	2000011c 	.word	0x2000011c

08000180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000180:	b5b0      	push	{r4, r5, r7, lr}
 8000182:	b088      	sub	sp, #32
 8000184:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000186:	f000 fa31 	bl	80005ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800018a:	f000 f81b 	bl	80001c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800018e:	f000 f854 	bl	800023a <MX_GPIO_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000192:	4b0a      	ldr	r3, [pc, #40]	; (80001bc <main+0x3c>)
 8000194:	1d3c      	adds	r4, r7, #4
 8000196:	461d      	mov	r5, r3
 8000198:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800019a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800019c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80001a4:	1d3b      	adds	r3, r7, #4
 80001a6:	2100      	movs	r1, #0
 80001a8:	4618      	mov	r0, r3
 80001aa:	f00a fa19 	bl	800a5e0 <osThreadCreate>
 80001ae:	4603      	mov	r3, r0
 80001b0:	4a03      	ldr	r2, [pc, #12]	; (80001c0 <main+0x40>)
 80001b2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80001b4:	f00a f9f1 	bl	800a59a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001b8:	e7fe      	b.n	80001b8 <main+0x38>
 80001ba:	bf00      	nop
 80001bc:	0800f2b0 	.word	0x0800f2b0
 80001c0:	2000031c 	.word	0x2000031c

080001c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b090      	sub	sp, #64	; 0x40
 80001c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ca:	f107 0318 	add.w	r3, r7, #24
 80001ce:	2228      	movs	r2, #40	; 0x28
 80001d0:	2100      	movs	r1, #0
 80001d2:	4618      	mov	r0, r3
 80001d4:	f00e ff73 	bl	800f0be <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001d8:	1d3b      	adds	r3, r7, #4
 80001da:	2200      	movs	r2, #0
 80001dc:	601a      	str	r2, [r3, #0]
 80001de:	605a      	str	r2, [r3, #4]
 80001e0:	609a      	str	r2, [r3, #8]
 80001e2:	60da      	str	r2, [r3, #12]
 80001e4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001e6:	2302      	movs	r3, #2
 80001e8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001ea:	2301      	movs	r3, #1
 80001ec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001ee:	2310      	movs	r3, #16
 80001f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001f2:	2300      	movs	r3, #0
 80001f4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001f6:	f107 0318 	add.w	r3, r7, #24
 80001fa:	4618      	mov	r0, r3
 80001fc:	f001 ff2e 	bl	800205c <HAL_RCC_OscConfig>
 8000200:	4603      	mov	r3, r0
 8000202:	2b00      	cmp	r3, #0
 8000204:	d001      	beq.n	800020a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000206:	f000 f882 	bl	800030e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800020a:	230f      	movs	r3, #15
 800020c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800020e:	2300      	movs	r3, #0
 8000210:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000212:	2300      	movs	r3, #0
 8000214:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000216:	2300      	movs	r3, #0
 8000218:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800021a:	2300      	movs	r3, #0
 800021c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800021e:	1d3b      	adds	r3, r7, #4
 8000220:	2100      	movs	r1, #0
 8000222:	4618      	mov	r0, r3
 8000224:	f002 f99c 	bl	8002560 <HAL_RCC_ClockConfig>
 8000228:	4603      	mov	r3, r0
 800022a:	2b00      	cmp	r3, #0
 800022c:	d001      	beq.n	8000232 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800022e:	f000 f86e 	bl	800030e <Error_Handler>
  }
}
 8000232:	bf00      	nop
 8000234:	3740      	adds	r7, #64	; 0x40
 8000236:	46bd      	mov	sp, r7
 8000238:	bd80      	pop	{r7, pc}

0800023a <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800023a:	b580      	push	{r7, lr}
 800023c:	b088      	sub	sp, #32
 800023e:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000240:	f107 0310 	add.w	r3, r7, #16
 8000244:	2200      	movs	r2, #0
 8000246:	601a      	str	r2, [r3, #0]
 8000248:	605a      	str	r2, [r3, #4]
 800024a:	609a      	str	r2, [r3, #8]
 800024c:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800024e:	4b1e      	ldr	r3, [pc, #120]	; (80002c8 <MX_GPIO_Init+0x8e>)
 8000250:	699b      	ldr	r3, [r3, #24]
 8000252:	4a1d      	ldr	r2, [pc, #116]	; (80002c8 <MX_GPIO_Init+0x8e>)
 8000254:	f043 0310 	orr.w	r3, r3, #16
 8000258:	6193      	str	r3, [r2, #24]
 800025a:	4b1b      	ldr	r3, [pc, #108]	; (80002c8 <MX_GPIO_Init+0x8e>)
 800025c:	699b      	ldr	r3, [r3, #24]
 800025e:	f003 0310 	and.w	r3, r3, #16
 8000262:	60fb      	str	r3, [r7, #12]
 8000264:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000266:	4b18      	ldr	r3, [pc, #96]	; (80002c8 <MX_GPIO_Init+0x8e>)
 8000268:	699b      	ldr	r3, [r3, #24]
 800026a:	4a17      	ldr	r2, [pc, #92]	; (80002c8 <MX_GPIO_Init+0x8e>)
 800026c:	f043 0320 	orr.w	r3, r3, #32
 8000270:	6193      	str	r3, [r2, #24]
 8000272:	4b15      	ldr	r3, [pc, #84]	; (80002c8 <MX_GPIO_Init+0x8e>)
 8000274:	699b      	ldr	r3, [r3, #24]
 8000276:	f003 0320 	and.w	r3, r3, #32
 800027a:	60bb      	str	r3, [r7, #8]
 800027c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800027e:	4b12      	ldr	r3, [pc, #72]	; (80002c8 <MX_GPIO_Init+0x8e>)
 8000280:	699b      	ldr	r3, [r3, #24]
 8000282:	4a11      	ldr	r2, [pc, #68]	; (80002c8 <MX_GPIO_Init+0x8e>)
 8000284:	f043 0304 	orr.w	r3, r3, #4
 8000288:	6193      	str	r3, [r2, #24]
 800028a:	4b0f      	ldr	r3, [pc, #60]	; (80002c8 <MX_GPIO_Init+0x8e>)
 800028c:	699b      	ldr	r3, [r3, #24]
 800028e:	f003 0304 	and.w	r3, r3, #4
 8000292:	607b      	str	r3, [r7, #4]
 8000294:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000296:	2200      	movs	r2, #0
 8000298:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800029c:	480b      	ldr	r0, [pc, #44]	; (80002cc <MX_GPIO_Init+0x92>)
 800029e:	f001 fdc8 	bl	8001e32 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80002a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80002a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002a8:	2301      	movs	r3, #1
 80002aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ac:	2300      	movs	r3, #0
 80002ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002b0:	2302      	movs	r3, #2
 80002b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002b4:	f107 0310 	add.w	r3, r7, #16
 80002b8:	4619      	mov	r1, r3
 80002ba:	4804      	ldr	r0, [pc, #16]	; (80002cc <MX_GPIO_Init+0x92>)
 80002bc:	f001 fb62 	bl	8001984 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80002c0:	bf00      	nop
 80002c2:	3720      	adds	r7, #32
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd80      	pop	{r7, pc}
 80002c8:	40021000 	.word	0x40021000
 80002cc:	40011000 	.word	0x40011000

080002d0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b082      	sub	sp, #8
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80002d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <StartDefaultTask+0x1c>)
 80002de:	f001 fdc0 	bl	8001e62 <HAL_GPIO_TogglePin>
    osDelay(1000);
 80002e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002e6:	f00a fa1e 	bl	800a726 <osDelay>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80002ea:	e7f5      	b.n	80002d8 <StartDefaultTask+0x8>
 80002ec:	40011000 	.word	0x40011000

080002f0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b082      	sub	sp, #8
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000300:	d101      	bne.n	8000306 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000302:	f000 f9dd 	bl	80006c0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000306:	bf00      	nop
 8000308:	3708      	adds	r7, #8
 800030a:	46bd      	mov	sp, r7
 800030c:	bd80      	pop	{r7, pc}

0800030e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800030e:	b480      	push	{r7}
 8000310:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000312:	b672      	cpsid	i
}
 8000314:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000316:	e7fe      	b.n	8000316 <Error_Handler+0x8>

08000318 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b084      	sub	sp, #16
 800031c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800031e:	4b18      	ldr	r3, [pc, #96]	; (8000380 <HAL_MspInit+0x68>)
 8000320:	699b      	ldr	r3, [r3, #24]
 8000322:	4a17      	ldr	r2, [pc, #92]	; (8000380 <HAL_MspInit+0x68>)
 8000324:	f043 0301 	orr.w	r3, r3, #1
 8000328:	6193      	str	r3, [r2, #24]
 800032a:	4b15      	ldr	r3, [pc, #84]	; (8000380 <HAL_MspInit+0x68>)
 800032c:	699b      	ldr	r3, [r3, #24]
 800032e:	f003 0301 	and.w	r3, r3, #1
 8000332:	60bb      	str	r3, [r7, #8]
 8000334:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000336:	4b12      	ldr	r3, [pc, #72]	; (8000380 <HAL_MspInit+0x68>)
 8000338:	69db      	ldr	r3, [r3, #28]
 800033a:	4a11      	ldr	r2, [pc, #68]	; (8000380 <HAL_MspInit+0x68>)
 800033c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000340:	61d3      	str	r3, [r2, #28]
 8000342:	4b0f      	ldr	r3, [pc, #60]	; (8000380 <HAL_MspInit+0x68>)
 8000344:	69db      	ldr	r3, [r3, #28]
 8000346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800034a:	607b      	str	r3, [r7, #4]
 800034c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800034e:	2200      	movs	r2, #0
 8000350:	210f      	movs	r1, #15
 8000352:	f06f 0001 	mvn.w	r0, #1
 8000356:	f000 fcc8 	bl	8000cea <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800035a:	4b0a      	ldr	r3, [pc, #40]	; (8000384 <HAL_MspInit+0x6c>)
 800035c:	685b      	ldr	r3, [r3, #4]
 800035e:	60fb      	str	r3, [r7, #12]
 8000360:	68fb      	ldr	r3, [r7, #12]
 8000362:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000366:	60fb      	str	r3, [r7, #12]
 8000368:	68fb      	ldr	r3, [r7, #12]
 800036a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800036e:	60fb      	str	r3, [r7, #12]
 8000370:	4a04      	ldr	r2, [pc, #16]	; (8000384 <HAL_MspInit+0x6c>)
 8000372:	68fb      	ldr	r3, [r7, #12]
 8000374:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000376:	bf00      	nop
 8000378:	3710      	adds	r7, #16
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	40021000 	.word	0x40021000
 8000384:	40010000 	.word	0x40010000

08000388 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b08e      	sub	sp, #56	; 0x38
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000390:	2300      	movs	r3, #0
 8000392:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000394:	2300      	movs	r3, #0
 8000396:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000398:	2300      	movs	r3, #0
 800039a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800039e:	4b34      	ldr	r3, [pc, #208]	; (8000470 <HAL_InitTick+0xe8>)
 80003a0:	69db      	ldr	r3, [r3, #28]
 80003a2:	4a33      	ldr	r2, [pc, #204]	; (8000470 <HAL_InitTick+0xe8>)
 80003a4:	f043 0301 	orr.w	r3, r3, #1
 80003a8:	61d3      	str	r3, [r2, #28]
 80003aa:	4b31      	ldr	r3, [pc, #196]	; (8000470 <HAL_InitTick+0xe8>)
 80003ac:	69db      	ldr	r3, [r3, #28]
 80003ae:	f003 0301 	and.w	r3, r3, #1
 80003b2:	60fb      	str	r3, [r7, #12]
 80003b4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80003b6:	f107 0210 	add.w	r2, r7, #16
 80003ba:	f107 0314 	add.w	r3, r7, #20
 80003be:	4611      	mov	r1, r2
 80003c0:	4618      	mov	r0, r3
 80003c2:	f002 fb0f 	bl	80029e4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80003c6:	6a3b      	ldr	r3, [r7, #32]
 80003c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80003ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d103      	bne.n	80003d8 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80003d0:	f002 fa5e 	bl	8002890 <HAL_RCC_GetPCLK1Freq>
 80003d4:	6378      	str	r0, [r7, #52]	; 0x34
 80003d6:	e004      	b.n	80003e2 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80003d8:	f002 fa5a 	bl	8002890 <HAL_RCC_GetPCLK1Freq>
 80003dc:	4603      	mov	r3, r0
 80003de:	005b      	lsls	r3, r3, #1
 80003e0:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80003e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80003e4:	4a23      	ldr	r2, [pc, #140]	; (8000474 <HAL_InitTick+0xec>)
 80003e6:	fba2 2303 	umull	r2, r3, r2, r3
 80003ea:	0c9b      	lsrs	r3, r3, #18
 80003ec:	3b01      	subs	r3, #1
 80003ee:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80003f0:	4b21      	ldr	r3, [pc, #132]	; (8000478 <HAL_InitTick+0xf0>)
 80003f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003f6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80003f8:	4b1f      	ldr	r3, [pc, #124]	; (8000478 <HAL_InitTick+0xf0>)
 80003fa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80003fe:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000400:	4a1d      	ldr	r2, [pc, #116]	; (8000478 <HAL_InitTick+0xf0>)
 8000402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000404:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000406:	4b1c      	ldr	r3, [pc, #112]	; (8000478 <HAL_InitTick+0xf0>)
 8000408:	2200      	movs	r2, #0
 800040a:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800040c:	4b1a      	ldr	r3, [pc, #104]	; (8000478 <HAL_InitTick+0xf0>)
 800040e:	2200      	movs	r2, #0
 8000410:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000412:	4b19      	ldr	r3, [pc, #100]	; (8000478 <HAL_InitTick+0xf0>)
 8000414:	2200      	movs	r2, #0
 8000416:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8000418:	4817      	ldr	r0, [pc, #92]	; (8000478 <HAL_InitTick+0xf0>)
 800041a:	f002 fb4b 	bl	8002ab4 <HAL_TIM_Base_Init>
 800041e:	4603      	mov	r3, r0
 8000420:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000424:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000428:	2b00      	cmp	r3, #0
 800042a:	d11b      	bne.n	8000464 <HAL_InitTick+0xdc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 800042c:	4812      	ldr	r0, [pc, #72]	; (8000478 <HAL_InitTick+0xf0>)
 800042e:	f002 fc67 	bl	8002d00 <HAL_TIM_Base_Start_IT>
 8000432:	4603      	mov	r3, r0
 8000434:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000438:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800043c:	2b00      	cmp	r3, #0
 800043e:	d111      	bne.n	8000464 <HAL_InitTick+0xdc>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000440:	201c      	movs	r0, #28
 8000442:	f000 fc6e 	bl	8000d22 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	2b0f      	cmp	r3, #15
 800044a:	d808      	bhi.n	800045e <HAL_InitTick+0xd6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 800044c:	2200      	movs	r2, #0
 800044e:	6879      	ldr	r1, [r7, #4]
 8000450:	201c      	movs	r0, #28
 8000452:	f000 fc4a 	bl	8000cea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000456:	4a09      	ldr	r2, [pc, #36]	; (800047c <HAL_InitTick+0xf4>)
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	6013      	str	r3, [r2, #0]
 800045c:	e002      	b.n	8000464 <HAL_InitTick+0xdc>
      }
      else
      {
        status = HAL_ERROR;
 800045e:	2301      	movs	r3, #1
 8000460:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000464:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000468:	4618      	mov	r0, r3
 800046a:	3738      	adds	r7, #56	; 0x38
 800046c:	46bd      	mov	sp, r7
 800046e:	bd80      	pop	{r7, pc}
 8000470:	40021000 	.word	0x40021000
 8000474:	431bde83 	.word	0x431bde83
 8000478:	20000320 	.word	0x20000320
 800047c:	20000004 	.word	0x20000004

08000480 <HAL_SuspendTick>:
  * @note   Disable the tick increment by disabling TIM2 update interrupt.
  * @param  None
  * @retval None
  */
void HAL_SuspendTick(void)
{
 8000480:	b480      	push	{r7}
 8000482:	af00      	add	r7, sp, #0
  /* Disable TIM2 update Interrupt */
  __HAL_TIM_DISABLE_IT(&htim2, TIM_IT_UPDATE);
 8000484:	4b05      	ldr	r3, [pc, #20]	; (800049c <HAL_SuspendTick+0x1c>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	68da      	ldr	r2, [r3, #12]
 800048a:	4b04      	ldr	r3, [pc, #16]	; (800049c <HAL_SuspendTick+0x1c>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	f022 0201 	bic.w	r2, r2, #1
 8000492:	60da      	str	r2, [r3, #12]
}
 8000494:	bf00      	nop
 8000496:	46bd      	mov	sp, r7
 8000498:	bc80      	pop	{r7}
 800049a:	4770      	bx	lr
 800049c:	20000320 	.word	0x20000320

080004a0 <HAL_ResumeTick>:
  * @note   Enable the tick increment by Enabling TIM2 update interrupt.
  * @param  None
  * @retval None
  */
void HAL_ResumeTick(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0
  /* Enable TIM2 Update interrupt */
  __HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE);
 80004a4:	4b05      	ldr	r3, [pc, #20]	; (80004bc <HAL_ResumeTick+0x1c>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	68da      	ldr	r2, [r3, #12]
 80004aa:	4b04      	ldr	r3, [pc, #16]	; (80004bc <HAL_ResumeTick+0x1c>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	f042 0201 	orr.w	r2, r2, #1
 80004b2:	60da      	str	r2, [r3, #12]
}
 80004b4:	bf00      	nop
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bc80      	pop	{r7}
 80004ba:	4770      	bx	lr
 80004bc:	20000320 	.word	0x20000320

080004c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004c4:	e7fe      	b.n	80004c4 <NMI_Handler+0x4>

080004c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004c6:	b480      	push	{r7}
 80004c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004ca:	e7fe      	b.n	80004ca <HardFault_Handler+0x4>

080004cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004d0:	e7fe      	b.n	80004d0 <MemManage_Handler+0x4>

080004d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004d2:	b480      	push	{r7}
 80004d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004d6:	e7fe      	b.n	80004d6 <BusFault_Handler+0x4>

080004d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004dc:	e7fe      	b.n	80004dc <UsageFault_Handler+0x4>

080004de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004de:	b480      	push	{r7}
 80004e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004e2:	bf00      	nop
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bc80      	pop	{r7}
 80004e8:	4770      	bx	lr

080004ea <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80004ea:	b580      	push	{r7, lr}
 80004ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80004ee:	4802      	ldr	r0, [pc, #8]	; (80004f8 <TIM2_IRQHandler+0xe>)
 80004f0:	f005 fe8d 	bl	800620e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80004f4:	bf00      	nop
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	20000320 	.word	0x20000320

080004fc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000500:	bf00      	nop
 8000502:	46bd      	mov	sp, r7
 8000504:	bc80      	pop	{r7}
 8000506:	4770      	bx	lr

08000508 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8000508:	b480      	push	{r7}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0
  uint32_t tmp = 0U, pllmull = 0U, pllsource = 0U;
 800050e:	2300      	movs	r3, #0
 8000510:	60fb      	str	r3, [r7, #12]
 8000512:	2300      	movs	r3, #0
 8000514:	60bb      	str	r3, [r7, #8]
 8000516:	2300      	movs	r3, #0
 8000518:	607b      	str	r3, [r7, #4]
#if defined(STM32F100xB) || defined(STM32F100xE)
  uint32_t prediv1factor = 0U;
#endif /* STM32F100xB or STM32F100xE */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800051a:	4b2f      	ldr	r3, [pc, #188]	; (80005d8 <SystemCoreClockUpdate+0xd0>)
 800051c:	685b      	ldr	r3, [r3, #4]
 800051e:	f003 030c 	and.w	r3, r3, #12
 8000522:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	2b08      	cmp	r3, #8
 8000528:	d011      	beq.n	800054e <SystemCoreClockUpdate+0x46>
 800052a:	68fb      	ldr	r3, [r7, #12]
 800052c:	2b08      	cmp	r3, #8
 800052e:	d83a      	bhi.n	80005a6 <SystemCoreClockUpdate+0x9e>
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	2b00      	cmp	r3, #0
 8000534:	d003      	beq.n	800053e <SystemCoreClockUpdate+0x36>
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	2b04      	cmp	r3, #4
 800053a:	d004      	beq.n	8000546 <SystemCoreClockUpdate+0x3e>
 800053c:	e033      	b.n	80005a6 <SystemCoreClockUpdate+0x9e>
  {
    case 0x00U:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 800053e:	4b27      	ldr	r3, [pc, #156]	; (80005dc <SystemCoreClockUpdate+0xd4>)
 8000540:	4a27      	ldr	r2, [pc, #156]	; (80005e0 <SystemCoreClockUpdate+0xd8>)
 8000542:	601a      	str	r2, [r3, #0]
      break;
 8000544:	e033      	b.n	80005ae <SystemCoreClockUpdate+0xa6>
    case 0x04U:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8000546:	4b25      	ldr	r3, [pc, #148]	; (80005dc <SystemCoreClockUpdate+0xd4>)
 8000548:	4a25      	ldr	r2, [pc, #148]	; (80005e0 <SystemCoreClockUpdate+0xd8>)
 800054a:	601a      	str	r2, [r3, #0]
      break;
 800054c:	e02f      	b.n	80005ae <SystemCoreClockUpdate+0xa6>
    case 0x08U:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 800054e:	4b22      	ldr	r3, [pc, #136]	; (80005d8 <SystemCoreClockUpdate+0xd0>)
 8000550:	685b      	ldr	r3, [r3, #4]
 8000552:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000556:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000558:	4b1f      	ldr	r3, [pc, #124]	; (80005d8 <SystemCoreClockUpdate+0xd0>)
 800055a:	685b      	ldr	r3, [r3, #4]
 800055c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000560:	607b      	str	r3, [r7, #4]
      
#if !defined(STM32F105xC) && !defined(STM32F107xC)      
      pllmull = ( pllmull >> 18U) + 2U;
 8000562:	68bb      	ldr	r3, [r7, #8]
 8000564:	0c9b      	lsrs	r3, r3, #18
 8000566:	3302      	adds	r3, #2
 8000568:	60bb      	str	r3, [r7, #8]
      
      if (pllsource == 0x00U)
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	2b00      	cmp	r3, #0
 800056e:	d106      	bne.n	800057e <SystemCoreClockUpdate+0x76>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1U) * pllmull;
 8000570:	68bb      	ldr	r3, [r7, #8]
 8000572:	4a1c      	ldr	r2, [pc, #112]	; (80005e4 <SystemCoreClockUpdate+0xdc>)
 8000574:	fb02 f303 	mul.w	r3, r2, r3
 8000578:	4a18      	ldr	r2, [pc, #96]	; (80005dc <SystemCoreClockUpdate+0xd4>)
 800057a:	6013      	str	r3, [r2, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8U) + 2U; 
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F105xC */ 
      break;
 800057c:	e017      	b.n	80005ae <SystemCoreClockUpdate+0xa6>
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 800057e:	4b16      	ldr	r3, [pc, #88]	; (80005d8 <SystemCoreClockUpdate+0xd0>)
 8000580:	685b      	ldr	r3, [r3, #4]
 8000582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000586:	2b00      	cmp	r3, #0
 8000588:	d006      	beq.n	8000598 <SystemCoreClockUpdate+0x90>
          SystemCoreClock = (HSE_VALUE >> 1U) * pllmull;
 800058a:	68bb      	ldr	r3, [r7, #8]
 800058c:	4a15      	ldr	r2, [pc, #84]	; (80005e4 <SystemCoreClockUpdate+0xdc>)
 800058e:	fb02 f303 	mul.w	r3, r2, r3
 8000592:	4a12      	ldr	r2, [pc, #72]	; (80005dc <SystemCoreClockUpdate+0xd4>)
 8000594:	6013      	str	r3, [r2, #0]
      break;
 8000596:	e00a      	b.n	80005ae <SystemCoreClockUpdate+0xa6>
          SystemCoreClock = HSE_VALUE * pllmull;
 8000598:	68bb      	ldr	r3, [r7, #8]
 800059a:	4a11      	ldr	r2, [pc, #68]	; (80005e0 <SystemCoreClockUpdate+0xd8>)
 800059c:	fb02 f303 	mul.w	r3, r2, r3
 80005a0:	4a0e      	ldr	r2, [pc, #56]	; (80005dc <SystemCoreClockUpdate+0xd4>)
 80005a2:	6013      	str	r3, [r2, #0]
      break;
 80005a4:	e003      	b.n	80005ae <SystemCoreClockUpdate+0xa6>

    default:
      SystemCoreClock = HSI_VALUE;
 80005a6:	4b0d      	ldr	r3, [pc, #52]	; (80005dc <SystemCoreClockUpdate+0xd4>)
 80005a8:	4a0d      	ldr	r2, [pc, #52]	; (80005e0 <SystemCoreClockUpdate+0xd8>)
 80005aa:	601a      	str	r2, [r3, #0]
      break;
 80005ac:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 80005ae:	4b0a      	ldr	r3, [pc, #40]	; (80005d8 <SystemCoreClockUpdate+0xd0>)
 80005b0:	685b      	ldr	r3, [r3, #4]
 80005b2:	091b      	lsrs	r3, r3, #4
 80005b4:	f003 030f 	and.w	r3, r3, #15
 80005b8:	4a0b      	ldr	r2, [pc, #44]	; (80005e8 <SystemCoreClockUpdate+0xe0>)
 80005ba:	5cd3      	ldrb	r3, [r2, r3]
 80005bc:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 80005be:	4b07      	ldr	r3, [pc, #28]	; (80005dc <SystemCoreClockUpdate+0xd4>)
 80005c0:	681a      	ldr	r2, [r3, #0]
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	fa22 f303 	lsr.w	r3, r2, r3
 80005c8:	4a04      	ldr	r2, [pc, #16]	; (80005dc <SystemCoreClockUpdate+0xd4>)
 80005ca:	6013      	str	r3, [r2, #0]
}
 80005cc:	bf00      	nop
 80005ce:	3714      	adds	r7, #20
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bc80      	pop	{r7}
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	40021000 	.word	0x40021000
 80005dc:	20000000 	.word	0x20000000
 80005e0:	007a1200 	.word	0x007a1200
 80005e4:	003d0900 	.word	0x003d0900
 80005e8:	0800f2cc 	.word	0x0800f2cc

080005ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005f0:	4b08      	ldr	r3, [pc, #32]	; (8000614 <HAL_Init+0x28>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a07      	ldr	r2, [pc, #28]	; (8000614 <HAL_Init+0x28>)
 80005f6:	f043 0310 	orr.w	r3, r3, #16
 80005fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005fc:	2003      	movs	r0, #3
 80005fe:	f000 fb69 	bl	8000cd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000602:	200f      	movs	r0, #15
 8000604:	f7ff fec0 	bl	8000388 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000608:	f7ff fe86 	bl	8000318 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800060c:	2300      	movs	r3, #0
}
 800060e:	4618      	mov	r0, r3
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	40022000 	.word	0x40022000

08000618 <HAL_DeInit>:
  *        of time base.
  * @note This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 800061c:	4b09      	ldr	r3, [pc, #36]	; (8000644 <HAL_DeInit+0x2c>)
 800061e:	f04f 32ff 	mov.w	r2, #4294967295
 8000622:	611a      	str	r2, [r3, #16]
  __HAL_RCC_APB1_RELEASE_RESET();
 8000624:	4b07      	ldr	r3, [pc, #28]	; (8000644 <HAL_DeInit+0x2c>)
 8000626:	2200      	movs	r2, #0
 8000628:	611a      	str	r2, [r3, #16]

  __HAL_RCC_APB2_FORCE_RESET();
 800062a:	4b06      	ldr	r3, [pc, #24]	; (8000644 <HAL_DeInit+0x2c>)
 800062c:	f04f 32ff 	mov.w	r2, #4294967295
 8000630:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB2_RELEASE_RESET();
 8000632:	4b04      	ldr	r3, [pc, #16]	; (8000644 <HAL_DeInit+0x2c>)
 8000634:	2200      	movs	r2, #0
 8000636:	60da      	str	r2, [r3, #12]
  __HAL_RCC_AHB_FORCE_RESET();
  __HAL_RCC_AHB_RELEASE_RESET();
#endif

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8000638:	f000 f80c 	bl	8000654 <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 800063c:	2300      	movs	r3, #0
}
 800063e:	4618      	mov	r0, r3
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	40021000 	.word	0x40021000
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 800064c:	bf00      	nop
 800064e:	46bd      	mov	sp, r7
 8000650:	bc80      	pop	{r7}
 8000652:	4770      	bx	lr

08000654 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 8000658:	bf00      	nop
 800065a:	46bd      	mov	sp, r7
 800065c:	bc80      	pop	{r7}
 800065e:	4770      	bx	lr
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000668:	4b12      	ldr	r3, [pc, #72]	; (80006b4 <HAL_MspDeInit+0x60>)
 800066a:	681a      	ldr	r2, [r3, #0]
 800066c:	4b12      	ldr	r3, [pc, #72]	; (80006b8 <HAL_MspDeInit+0x64>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	4619      	mov	r1, r3
 8000672:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000676:	fbb3 f3f1 	udiv	r3, r3, r1
 800067a:	fbb2 f3f3 	udiv	r3, r2, r3
 800067e:	4618      	mov	r0, r3
 8000680:	f000 fb6f 	bl	8000d62 <HAL_SYSTICK_Config>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <HAL_MspDeInit+0x3a>
  {
    return HAL_ERROR;
 800068a:	2301      	movs	r3, #1
 800068c:	e00e      	b.n	80006ac <HAL_MspDeInit+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	2b0f      	cmp	r3, #15
 8000692:	d80a      	bhi.n	80006aa <HAL_MspDeInit+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000694:	2200      	movs	r2, #0
 8000696:	6879      	ldr	r1, [r7, #4]
 8000698:	f04f 30ff 	mov.w	r0, #4294967295
 800069c:	f000 fb25 	bl	8000cea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006a0:	4a06      	ldr	r2, [pc, #24]	; (80006bc <HAL_MspDeInit+0x68>)
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006a6:	2300      	movs	r3, #0
 80006a8:	e000      	b.n	80006ac <HAL_MspDeInit+0x58>
    return HAL_ERROR;
 80006aa:	2301      	movs	r3, #1
}
 80006ac:	4618      	mov	r0, r3
 80006ae:	3708      	adds	r7, #8
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	20000000 	.word	0x20000000
 80006b8:	20000008 	.word	0x20000008
 80006bc:	20000004 	.word	0x20000004

080006c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006c4:	4b05      	ldr	r3, [pc, #20]	; (80006dc <HAL_IncTick+0x1c>)
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	461a      	mov	r2, r3
 80006ca:	4b05      	ldr	r3, [pc, #20]	; (80006e0 <HAL_IncTick+0x20>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	4413      	add	r3, r2
 80006d0:	4a03      	ldr	r2, [pc, #12]	; (80006e0 <HAL_IncTick+0x20>)
 80006d2:	6013      	str	r3, [r2, #0]
}
 80006d4:	bf00      	nop
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bc80      	pop	{r7}
 80006da:	4770      	bx	lr
 80006dc:	20000008 	.word	0x20000008
 80006e0:	20000368 	.word	0x20000368

080006e4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  return uwTick;
 80006e8:	4b02      	ldr	r3, [pc, #8]	; (80006f4 <HAL_GetTick+0x10>)
 80006ea:	681b      	ldr	r3, [r3, #0]
}
 80006ec:	4618      	mov	r0, r3
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bc80      	pop	{r7}
 80006f2:	4770      	bx	lr
 80006f4:	20000368 	.word	0x20000368

080006f8 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80006fc:	4b02      	ldr	r3, [pc, #8]	; (8000708 <HAL_GetTickPrio+0x10>)
 80006fe:	681b      	ldr	r3, [r3, #0]
}
 8000700:	4618      	mov	r0, r3
 8000702:	46bd      	mov	sp, r7
 8000704:	bc80      	pop	{r7}
 8000706:	4770      	bx	lr
 8000708:	20000004 	.word	0x20000004

0800070c <HAL_SetTickFreq>:
/**
  * @brief Set new tick Freq.
  * @retval status
  */
HAL_StatusTypeDef HAL_SetTickFreq(HAL_TickFreqTypeDef Freq)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	4603      	mov	r3, r0
 8000714:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status  = HAL_OK;
 8000716:	2300      	movs	r3, #0
 8000718:	73fb      	strb	r3, [r7, #15]
  HAL_TickFreqTypeDef prevTickFreq;

  assert_param(IS_TICKFREQ(Freq));

  if (uwTickFreq != Freq)
 800071a:	4b0e      	ldr	r3, [pc, #56]	; (8000754 <HAL_SetTickFreq+0x48>)
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	79fa      	ldrb	r2, [r7, #7]
 8000720:	429a      	cmp	r2, r3
 8000722:	d012      	beq.n	800074a <HAL_SetTickFreq+0x3e>
  {
    /* Back up uwTickFreq frequency */
    prevTickFreq = uwTickFreq;
 8000724:	4b0b      	ldr	r3, [pc, #44]	; (8000754 <HAL_SetTickFreq+0x48>)
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	73bb      	strb	r3, [r7, #14]

    /* Update uwTickFreq global variable used by HAL_InitTick() */
    uwTickFreq = Freq;
 800072a:	4a0a      	ldr	r2, [pc, #40]	; (8000754 <HAL_SetTickFreq+0x48>)
 800072c:	79fb      	ldrb	r3, [r7, #7]
 800072e:	7013      	strb	r3, [r2, #0]

    /* Apply the new tick Freq  */
    status = HAL_InitTick(uwTickPrio);
 8000730:	4b09      	ldr	r3, [pc, #36]	; (8000758 <HAL_SetTickFreq+0x4c>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4618      	mov	r0, r3
 8000736:	f7ff fe27 	bl	8000388 <HAL_InitTick>
 800073a:	4603      	mov	r3, r0
 800073c:	73fb      	strb	r3, [r7, #15]

    if (status != HAL_OK)
 800073e:	7bfb      	ldrb	r3, [r7, #15]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d002      	beq.n	800074a <HAL_SetTickFreq+0x3e>
    {
      /* Restore previous tick frequency */
      uwTickFreq = prevTickFreq;
 8000744:	4a03      	ldr	r2, [pc, #12]	; (8000754 <HAL_SetTickFreq+0x48>)
 8000746:	7bbb      	ldrb	r3, [r7, #14]
 8000748:	7013      	strb	r3, [r2, #0]
    }
  }

  return status;
 800074a:	7bfb      	ldrb	r3, [r7, #15]
}
 800074c:	4618      	mov	r0, r3
 800074e:	3710      	adds	r7, #16
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	20000008 	.word	0x20000008
 8000758:	20000004 	.word	0x20000004

0800075c <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8000760:	4b02      	ldr	r3, [pc, #8]	; (800076c <HAL_GetTickFreq+0x10>)
 8000762:	781b      	ldrb	r3, [r3, #0]
}
 8000764:	4618      	mov	r0, r3
 8000766:	46bd      	mov	sp, r7
 8000768:	bc80      	pop	{r7}
 800076a:	4770      	bx	lr
 800076c:	20000008 	.word	0x20000008

08000770 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000778:	f7ff ffb4 	bl	80006e4 <HAL_GetTick>
 800077c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000788:	d005      	beq.n	8000796 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800078a:	4b0a      	ldr	r3, [pc, #40]	; (80007b4 <HAL_Delay+0x44>)
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	461a      	mov	r2, r3
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	4413      	add	r3, r2
 8000794:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000796:	bf00      	nop
 8000798:	f7ff ffa4 	bl	80006e4 <HAL_GetTick>
 800079c:	4602      	mov	r2, r0
 800079e:	68bb      	ldr	r3, [r7, #8]
 80007a0:	1ad3      	subs	r3, r2, r3
 80007a2:	68fa      	ldr	r2, [r7, #12]
 80007a4:	429a      	cmp	r2, r3
 80007a6:	d8f7      	bhi.n	8000798 <HAL_Delay+0x28>
  {
  }
}
 80007a8:	bf00      	nop
 80007aa:	bf00      	nop
 80007ac:	3710      	adds	r7, #16
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	20000008 	.word	0x20000008
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80007bc:	4b04      	ldr	r3, [pc, #16]	; (80007d0 <HAL_Delay+0x60>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a03      	ldr	r2, [pc, #12]	; (80007d0 <HAL_Delay+0x60>)
 80007c2:	f023 0302 	bic.w	r3, r3, #2
 80007c6:	6013      	str	r3, [r2, #0]
}
 80007c8:	bf00      	nop
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bc80      	pop	{r7}
 80007ce:	4770      	bx	lr
 80007d0:	e000e010 	.word	0xe000e010
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80007d8:	4b04      	ldr	r3, [pc, #16]	; (80007ec <HAL_Delay+0x7c>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a03      	ldr	r2, [pc, #12]	; (80007ec <HAL_Delay+0x7c>)
 80007de:	f043 0302 	orr.w	r3, r3, #2
 80007e2:	6013      	str	r3, [r2, #0]
}
 80007e4:	bf00      	nop
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bc80      	pop	{r7}
 80007ea:	4770      	bx	lr
 80007ec:	e000e010 	.word	0xe000e010

080007f0 <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  return __STM32F1xx_HAL_VERSION;
 80007f4:	4b02      	ldr	r3, [pc, #8]	; (8000800 <HAL_GetHalVersion+0x10>)
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bc80      	pop	{r7}
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	01010900 	.word	0x01010900

08000804 <HAL_GetREVID>:
  *       debug mode (not accessible by the user software in normal mode).
  *       Refer to errata sheet of these devices for more details.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  return ((DBGMCU->IDCODE) >> DBGMCU_IDCODE_REV_ID_Pos);
 8000808:	4b03      	ldr	r3, [pc, #12]	; (8000818 <HAL_GetREVID+0x14>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	0c1b      	lsrs	r3, r3, #16
}
 800080e:	4618      	mov	r0, r3
 8000810:	46bd      	mov	sp, r7
 8000812:	bc80      	pop	{r7}
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop
 8000818:	e0042000 	.word	0xe0042000

0800081c <HAL_GetDEVID>:
  *       debug mode (not accessible by the user software in normal mode).
  *       Refer to errata sheet of these devices for more details.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  return ((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8000820:	4b03      	ldr	r3, [pc, #12]	; (8000830 <HAL_GetDEVID+0x14>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8000828:	4618      	mov	r0, r3
 800082a:	46bd      	mov	sp, r7
 800082c:	bc80      	pop	{r7}
 800082e:	4770      	bx	lr
 8000830:	e0042000 	.word	0xe0042000

08000834 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)UID_BASE)));
 8000838:	4b02      	ldr	r3, [pc, #8]	; (8000844 <HAL_GetUIDw0+0x10>)
 800083a:	681b      	ldr	r3, [r3, #0]
}
 800083c:	4618      	mov	r0, r3
 800083e:	46bd      	mov	sp, r7
 8000840:	bc80      	pop	{r7}
 8000842:	4770      	bx	lr
 8000844:	1ffff7e8 	.word	0x1ffff7e8

08000848 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 800084c:	4b02      	ldr	r3, [pc, #8]	; (8000858 <HAL_GetUIDw1+0x10>)
 800084e:	681b      	ldr	r3, [r3, #0]
}
 8000850:	4618      	mov	r0, r3
 8000852:	46bd      	mov	sp, r7
 8000854:	bc80      	pop	{r7}
 8000856:	4770      	bx	lr
 8000858:	1ffff7ec 	.word	0x1ffff7ec

0800085c <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8000860:	4b02      	ldr	r3, [pc, #8]	; (800086c <HAL_GetUIDw2+0x10>)
 8000862:	681b      	ldr	r3, [r3, #0]
}
 8000864:	4618      	mov	r0, r3
 8000866:	46bd      	mov	sp, r7
 8000868:	bc80      	pop	{r7}
 800086a:	4770      	bx	lr
 800086c:	1ffff7f0 	.word	0x1ffff7f0

08000870 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8000874:	4b04      	ldr	r3, [pc, #16]	; (8000888 <HAL_DBGMCU_EnableDBGSleepMode+0x18>)
 8000876:	685b      	ldr	r3, [r3, #4]
 8000878:	4a03      	ldr	r2, [pc, #12]	; (8000888 <HAL_DBGMCU_EnableDBGSleepMode+0x18>)
 800087a:	f043 0301 	orr.w	r3, r3, #1
 800087e:	6053      	str	r3, [r2, #4]
}
 8000880:	bf00      	nop
 8000882:	46bd      	mov	sp, r7
 8000884:	bc80      	pop	{r7}
 8000886:	4770      	bx	lr
 8000888:	e0042000 	.word	0xe0042000

0800088c <HAL_DBGMCU_DisableDBGSleepMode>:
  *       debug mode (not accessible by the user software in normal mode).
  *       Refer to errata sheet of these devices for more details.
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8000890:	4b04      	ldr	r3, [pc, #16]	; (80008a4 <HAL_DBGMCU_DisableDBGSleepMode+0x18>)
 8000892:	685b      	ldr	r3, [r3, #4]
 8000894:	4a03      	ldr	r2, [pc, #12]	; (80008a4 <HAL_DBGMCU_DisableDBGSleepMode+0x18>)
 8000896:	f023 0301 	bic.w	r3, r3, #1
 800089a:	6053      	str	r3, [r2, #4]
}
 800089c:	bf00      	nop
 800089e:	46bd      	mov	sp, r7
 80008a0:	bc80      	pop	{r7}
 80008a2:	4770      	bx	lr
 80008a4:	e0042000 	.word	0xe0042000

080008a8 <HAL_DBGMCU_EnableDBGStopMode>:
  *       interrupt.
  *       Refer to errata sheet of these devices for more details.
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80008ac:	4b04      	ldr	r3, [pc, #16]	; (80008c0 <HAL_DBGMCU_EnableDBGStopMode+0x18>)
 80008ae:	685b      	ldr	r3, [r3, #4]
 80008b0:	4a03      	ldr	r2, [pc, #12]	; (80008c0 <HAL_DBGMCU_EnableDBGStopMode+0x18>)
 80008b2:	f043 0302 	orr.w	r3, r3, #2
 80008b6:	6053      	str	r3, [r2, #4]
}
 80008b8:	bf00      	nop
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bc80      	pop	{r7}
 80008be:	4770      	bx	lr
 80008c0:	e0042000 	.word	0xe0042000

080008c4 <HAL_DBGMCU_DisableDBGStopMode>:
  *       debug mode (not accessible by the user software in normal mode).
  *       Refer to errata sheet of these devices for more details.
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80008c8:	4b04      	ldr	r3, [pc, #16]	; (80008dc <HAL_DBGMCU_DisableDBGStopMode+0x18>)
 80008ca:	685b      	ldr	r3, [r3, #4]
 80008cc:	4a03      	ldr	r2, [pc, #12]	; (80008dc <HAL_DBGMCU_DisableDBGStopMode+0x18>)
 80008ce:	f023 0302 	bic.w	r3, r3, #2
 80008d2:	6053      	str	r3, [r2, #4]
}
 80008d4:	bf00      	nop
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bc80      	pop	{r7}
 80008da:	4770      	bx	lr
 80008dc:	e0042000 	.word	0xe0042000

080008e0 <HAL_DBGMCU_EnableDBGStandbyMode>:
  *       debug mode (not accessible by the user software in normal mode).
  *       Refer to errata sheet of these devices for more details.
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 80008e4:	4b04      	ldr	r3, [pc, #16]	; (80008f8 <HAL_DBGMCU_EnableDBGStandbyMode+0x18>)
 80008e6:	685b      	ldr	r3, [r3, #4]
 80008e8:	4a03      	ldr	r2, [pc, #12]	; (80008f8 <HAL_DBGMCU_EnableDBGStandbyMode+0x18>)
 80008ea:	f043 0304 	orr.w	r3, r3, #4
 80008ee:	6053      	str	r3, [r2, #4]
}
 80008f0:	bf00      	nop
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bc80      	pop	{r7}
 80008f6:	4770      	bx	lr
 80008f8:	e0042000 	.word	0xe0042000

080008fc <HAL_DBGMCU_DisableDBGStandbyMode>:
  *       debug mode (not accessible by the user software in normal mode).
  *       Refer to errata sheet of these devices for more details.
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8000900:	4b04      	ldr	r3, [pc, #16]	; (8000914 <HAL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8000902:	685b      	ldr	r3, [r3, #4]
 8000904:	4a03      	ldr	r2, [pc, #12]	; (8000914 <HAL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8000906:	f023 0304 	bic.w	r3, r3, #4
 800090a:	6053      	str	r3, [r2, #4]
}
 800090c:	bf00      	nop
 800090e:	46bd      	mov	sp, r7
 8000910:	bc80      	pop	{r7}
 8000912:	4770      	bx	lr
 8000914:	e0042000 	.word	0xe0042000

08000918 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000918:	b480      	push	{r7}
 800091a:	b085      	sub	sp, #20
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	f003 0307 	and.w	r3, r3, #7
 8000926:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000928:	4b0c      	ldr	r3, [pc, #48]	; (800095c <__NVIC_SetPriorityGrouping+0x44>)
 800092a:	68db      	ldr	r3, [r3, #12]
 800092c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800092e:	68ba      	ldr	r2, [r7, #8]
 8000930:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000934:	4013      	ands	r3, r2
 8000936:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800093c:	68bb      	ldr	r3, [r7, #8]
 800093e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000940:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000944:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000948:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800094a:	4a04      	ldr	r2, [pc, #16]	; (800095c <__NVIC_SetPriorityGrouping+0x44>)
 800094c:	68bb      	ldr	r3, [r7, #8]
 800094e:	60d3      	str	r3, [r2, #12]
}
 8000950:	bf00      	nop
 8000952:	3714      	adds	r7, #20
 8000954:	46bd      	mov	sp, r7
 8000956:	bc80      	pop	{r7}
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	e000ed00 	.word	0xe000ed00

08000960 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000964:	4b04      	ldr	r3, [pc, #16]	; (8000978 <__NVIC_GetPriorityGrouping+0x18>)
 8000966:	68db      	ldr	r3, [r3, #12]
 8000968:	0a1b      	lsrs	r3, r3, #8
 800096a:	f003 0307 	and.w	r3, r3, #7
}
 800096e:	4618      	mov	r0, r3
 8000970:	46bd      	mov	sp, r7
 8000972:	bc80      	pop	{r7}
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	e000ed00 	.word	0xe000ed00

0800097c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
 8000982:	4603      	mov	r3, r0
 8000984:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800098a:	2b00      	cmp	r3, #0
 800098c:	db0b      	blt.n	80009a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800098e:	79fb      	ldrb	r3, [r7, #7]
 8000990:	f003 021f 	and.w	r2, r3, #31
 8000994:	4906      	ldr	r1, [pc, #24]	; (80009b0 <__NVIC_EnableIRQ+0x34>)
 8000996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800099a:	095b      	lsrs	r3, r3, #5
 800099c:	2001      	movs	r0, #1
 800099e:	fa00 f202 	lsl.w	r2, r0, r2
 80009a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009a6:	bf00      	nop
 80009a8:	370c      	adds	r7, #12
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bc80      	pop	{r7}
 80009ae:	4770      	bx	lr
 80009b0:	e000e100 	.word	0xe000e100

080009b4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	4603      	mov	r3, r0
 80009bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	db12      	blt.n	80009ec <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009c6:	79fb      	ldrb	r3, [r7, #7]
 80009c8:	f003 021f 	and.w	r2, r3, #31
 80009cc:	490a      	ldr	r1, [pc, #40]	; (80009f8 <__NVIC_DisableIRQ+0x44>)
 80009ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d2:	095b      	lsrs	r3, r3, #5
 80009d4:	2001      	movs	r0, #1
 80009d6:	fa00 f202 	lsl.w	r2, r0, r2
 80009da:	3320      	adds	r3, #32
 80009dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80009e0:	f3bf 8f4f 	dsb	sy
}
 80009e4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80009e6:	f3bf 8f6f 	isb	sy
}
 80009ea:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80009ec:	bf00      	nop
 80009ee:	370c      	adds	r7, #12
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bc80      	pop	{r7}
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	e000e100 	.word	0xe000e100

080009fc <__NVIC_GetPendingIRQ>:
  \return             0  Interrupt status is not pending.
  \return             1  Interrupt status is pending.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	4603      	mov	r3, r0
 8000a04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	db0e      	blt.n	8000a2c <__NVIC_GetPendingIRQ+0x30>
  {
    return((uint32_t)(((NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 8000a0e:	4a0a      	ldr	r2, [pc, #40]	; (8000a38 <__NVIC_GetPendingIRQ+0x3c>)
 8000a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a14:	095b      	lsrs	r3, r3, #5
 8000a16:	3340      	adds	r3, #64	; 0x40
 8000a18:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a1c:	79fb      	ldrb	r3, [r7, #7]
 8000a1e:	f003 031f 	and.w	r3, r3, #31
 8000a22:	fa22 f303 	lsr.w	r3, r2, r3
 8000a26:	f003 0301 	and.w	r3, r3, #1
 8000a2a:	e000      	b.n	8000a2e <__NVIC_GetPendingIRQ+0x32>
  }
  else
  {
    return(0U);
 8000a2c:	2300      	movs	r3, #0
  }
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	370c      	adds	r7, #12
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bc80      	pop	{r7}
 8000a36:	4770      	bx	lr
 8000a38:	e000e100 	.word	0xe000e100

08000a3c <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	4603      	mov	r3, r0
 8000a44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	db0c      	blt.n	8000a68 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a4e:	79fb      	ldrb	r3, [r7, #7]
 8000a50:	f003 021f 	and.w	r2, r3, #31
 8000a54:	4907      	ldr	r1, [pc, #28]	; (8000a74 <__NVIC_SetPendingIRQ+0x38>)
 8000a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a5a:	095b      	lsrs	r3, r3, #5
 8000a5c:	2001      	movs	r0, #1
 8000a5e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a62:	3340      	adds	r3, #64	; 0x40
 8000a64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a68:	bf00      	nop
 8000a6a:	370c      	adds	r7, #12
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bc80      	pop	{r7}
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	e000e100 	.word	0xe000e100

08000a78 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	4603      	mov	r3, r0
 8000a80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	db0c      	blt.n	8000aa4 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a8a:	79fb      	ldrb	r3, [r7, #7]
 8000a8c:	f003 021f 	and.w	r2, r3, #31
 8000a90:	4907      	ldr	r1, [pc, #28]	; (8000ab0 <__NVIC_ClearPendingIRQ+0x38>)
 8000a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a96:	095b      	lsrs	r3, r3, #5
 8000a98:	2001      	movs	r0, #1
 8000a9a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a9e:	3360      	adds	r3, #96	; 0x60
 8000aa0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000aa4:	bf00      	nop
 8000aa6:	370c      	adds	r7, #12
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bc80      	pop	{r7}
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	e000e100 	.word	0xe000e100

08000ab4 <__NVIC_GetActive>:
  \return             0  Interrupt status is not active.
  \return             1  Interrupt status is active.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetActive(IRQn_Type IRQn)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	4603      	mov	r3, r0
 8000abc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	db0e      	blt.n	8000ae4 <__NVIC_GetActive+0x30>
  {
    return((uint32_t)(((NVIC->IABR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 8000ac6:	4a0a      	ldr	r2, [pc, #40]	; (8000af0 <__NVIC_GetActive+0x3c>)
 8000ac8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000acc:	095b      	lsrs	r3, r3, #5
 8000ace:	3380      	adds	r3, #128	; 0x80
 8000ad0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ad4:	79fb      	ldrb	r3, [r7, #7]
 8000ad6:	f003 031f 	and.w	r3, r3, #31
 8000ada:	fa22 f303 	lsr.w	r3, r2, r3
 8000ade:	f003 0301 	and.w	r3, r3, #1
 8000ae2:	e000      	b.n	8000ae6 <__NVIC_GetActive+0x32>
  }
  else
  {
    return(0U);
 8000ae4:	2300      	movs	r3, #0
  }
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	370c      	adds	r7, #12
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bc80      	pop	{r7}
 8000aee:	4770      	bx	lr
 8000af0:	e000e100 	.word	0xe000e100

08000af4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	4603      	mov	r3, r0
 8000afc:	6039      	str	r1, [r7, #0]
 8000afe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	db0a      	blt.n	8000b1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	b2da      	uxtb	r2, r3
 8000b0c:	490c      	ldr	r1, [pc, #48]	; (8000b40 <__NVIC_SetPriority+0x4c>)
 8000b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b12:	0112      	lsls	r2, r2, #4
 8000b14:	b2d2      	uxtb	r2, r2
 8000b16:	440b      	add	r3, r1
 8000b18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b1c:	e00a      	b.n	8000b34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	b2da      	uxtb	r2, r3
 8000b22:	4908      	ldr	r1, [pc, #32]	; (8000b44 <__NVIC_SetPriority+0x50>)
 8000b24:	79fb      	ldrb	r3, [r7, #7]
 8000b26:	f003 030f 	and.w	r3, r3, #15
 8000b2a:	3b04      	subs	r3, #4
 8000b2c:	0112      	lsls	r2, r2, #4
 8000b2e:	b2d2      	uxtb	r2, r2
 8000b30:	440b      	add	r3, r1
 8000b32:	761a      	strb	r2, [r3, #24]
}
 8000b34:	bf00      	nop
 8000b36:	370c      	adds	r7, #12
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bc80      	pop	{r7}
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	e000e100 	.word	0xe000e100
 8000b44:	e000ed00 	.word	0xe000ed00

08000b48 <__NVIC_GetPriority>:
  \param [in]   IRQn  Interrupt number.
  \return             Interrupt Priority.
                      Value is aligned automatically to the implemented priority bits of the microcontroller.
 */
__STATIC_INLINE uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	4603      	mov	r3, r0
 8000b50:	71fb      	strb	r3, [r7, #7]

  if ((int32_t)(IRQn) >= 0)
 8000b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	db09      	blt.n	8000b6e <__NVIC_GetPriority+0x26>
  {
    return(((uint32_t)NVIC->IP[((uint32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
 8000b5a:	4a0c      	ldr	r2, [pc, #48]	; (8000b8c <__NVIC_GetPriority+0x44>)
 8000b5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b60:	4413      	add	r3, r2
 8000b62:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
 8000b66:	b2db      	uxtb	r3, r3
 8000b68:	091b      	lsrs	r3, r3, #4
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	e009      	b.n	8000b82 <__NVIC_GetPriority+0x3a>
  }
  else
  {
    return(((uint32_t)SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
 8000b6e:	4a08      	ldr	r2, [pc, #32]	; (8000b90 <__NVIC_GetPriority+0x48>)
 8000b70:	79fb      	ldrb	r3, [r7, #7]
 8000b72:	f003 030f 	and.w	r3, r3, #15
 8000b76:	3b04      	subs	r3, #4
 8000b78:	4413      	add	r3, r2
 8000b7a:	7e1b      	ldrb	r3, [r3, #24]
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	091b      	lsrs	r3, r3, #4
 8000b80:	b2db      	uxtb	r3, r3
  }
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	370c      	adds	r7, #12
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bc80      	pop	{r7}
 8000b8a:	4770      	bx	lr
 8000b8c:	e000e100 	.word	0xe000e100
 8000b90:	e000ed00 	.word	0xe000ed00

08000b94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b089      	sub	sp, #36	; 0x24
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	60f8      	str	r0, [r7, #12]
 8000b9c:	60b9      	str	r1, [r7, #8]
 8000b9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	f003 0307 	and.w	r3, r3, #7
 8000ba6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ba8:	69fb      	ldr	r3, [r7, #28]
 8000baa:	f1c3 0307 	rsb	r3, r3, #7
 8000bae:	2b04      	cmp	r3, #4
 8000bb0:	bf28      	it	cs
 8000bb2:	2304      	movcs	r3, #4
 8000bb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bb6:	69fb      	ldr	r3, [r7, #28]
 8000bb8:	3304      	adds	r3, #4
 8000bba:	2b06      	cmp	r3, #6
 8000bbc:	d902      	bls.n	8000bc4 <NVIC_EncodePriority+0x30>
 8000bbe:	69fb      	ldr	r3, [r7, #28]
 8000bc0:	3b03      	subs	r3, #3
 8000bc2:	e000      	b.n	8000bc6 <NVIC_EncodePriority+0x32>
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc8:	f04f 32ff 	mov.w	r2, #4294967295
 8000bcc:	69bb      	ldr	r3, [r7, #24]
 8000bce:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd2:	43da      	mvns	r2, r3
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	401a      	ands	r2, r3
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bdc:	f04f 31ff 	mov.w	r1, #4294967295
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	fa01 f303 	lsl.w	r3, r1, r3
 8000be6:	43d9      	mvns	r1, r3
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bec:	4313      	orrs	r3, r2
         );
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3724      	adds	r7, #36	; 0x24
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bc80      	pop	{r7}
 8000bf6:	4770      	bx	lr

08000bf8 <NVIC_DecodePriority>:
  \param [in]     PriorityGroup  Used priority group.
  \param [out] pPreemptPriority  Preemptive priority value (starting from 0).
  \param [out]     pSubPriority  Subpriority value (starting from 0).
 */
__STATIC_INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* const pPreemptPriority, uint32_t* const pSubPriority)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b089      	sub	sp, #36	; 0x24
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	60f8      	str	r0, [r7, #12]
 8000c00:	60b9      	str	r1, [r7, #8]
 8000c02:	607a      	str	r2, [r7, #4]
 8000c04:	603b      	str	r3, [r7, #0]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c06:	68bb      	ldr	r3, [r7, #8]
 8000c08:	f003 0307 	and.w	r3, r3, #7
 8000c0c:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c0e:	69fb      	ldr	r3, [r7, #28]
 8000c10:	f1c3 0307 	rsb	r3, r3, #7
 8000c14:	2b04      	cmp	r3, #4
 8000c16:	bf28      	it	cs
 8000c18:	2304      	movcs	r3, #4
 8000c1a:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c1c:	69fb      	ldr	r3, [r7, #28]
 8000c1e:	3304      	adds	r3, #4
 8000c20:	2b06      	cmp	r3, #6
 8000c22:	d902      	bls.n	8000c2a <NVIC_DecodePriority+0x32>
 8000c24:	69fb      	ldr	r3, [r7, #28]
 8000c26:	3b03      	subs	r3, #3
 8000c28:	e000      	b.n	8000c2c <NVIC_DecodePriority+0x34>
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	617b      	str	r3, [r7, #20]

  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
 8000c2e:	68fa      	ldr	r2, [r7, #12]
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	40da      	lsrs	r2, r3
 8000c34:	f04f 31ff 	mov.w	r1, #4294967295
 8000c38:	69bb      	ldr	r3, [r7, #24]
 8000c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c3e:	43db      	mvns	r3, r3
 8000c40:	401a      	ands	r2, r3
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	601a      	str	r2, [r3, #0]
  *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL);
 8000c46:	f04f 32ff 	mov.w	r2, #4294967295
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c50:	43da      	mvns	r2, r3
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	401a      	ands	r2, r3
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	601a      	str	r2, [r3, #0]
}
 8000c5a:	bf00      	nop
 8000c5c:	3724      	adds	r7, #36	; 0x24
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bc80      	pop	{r7}
 8000c62:	4770      	bx	lr

08000c64 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8000c68:	f3bf 8f4f 	dsb	sy
}
 8000c6c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000c6e:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <__NVIC_SystemReset+0x24>)
 8000c70:	68db      	ldr	r3, [r3, #12]
 8000c72:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000c76:	4904      	ldr	r1, [pc, #16]	; (8000c88 <__NVIC_SystemReset+0x24>)
 8000c78:	4b04      	ldr	r3, [pc, #16]	; (8000c8c <__NVIC_SystemReset+0x28>)
 8000c7a:	4313      	orrs	r3, r2
 8000c7c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000c7e:	f3bf 8f4f 	dsb	sy
}
 8000c82:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000c84:	bf00      	nop
 8000c86:	e7fd      	b.n	8000c84 <__NVIC_SystemReset+0x20>
 8000c88:	e000ed00 	.word	0xe000ed00
 8000c8c:	05fa0004 	.word	0x05fa0004

08000c90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	3b01      	subs	r3, #1
 8000c9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ca0:	d301      	bcc.n	8000ca6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	e00f      	b.n	8000cc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ca6:	4a0a      	ldr	r2, [pc, #40]	; (8000cd0 <SysTick_Config+0x40>)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	3b01      	subs	r3, #1
 8000cac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cae:	210f      	movs	r1, #15
 8000cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb4:	f7ff ff1e 	bl	8000af4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cb8:	4b05      	ldr	r3, [pc, #20]	; (8000cd0 <SysTick_Config+0x40>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cbe:	4b04      	ldr	r3, [pc, #16]	; (8000cd0 <SysTick_Config+0x40>)
 8000cc0:	2207      	movs	r2, #7
 8000cc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cc4:	2300      	movs	r3, #0
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	e000e010 	.word	0xe000e010

08000cd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cdc:	6878      	ldr	r0, [r7, #4]
 8000cde:	f7ff fe1b 	bl	8000918 <__NVIC_SetPriorityGrouping>
}
 8000ce2:	bf00      	nop
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b086      	sub	sp, #24
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	60b9      	str	r1, [r7, #8]
 8000cf4:	607a      	str	r2, [r7, #4]
 8000cf6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cfc:	f7ff fe30 	bl	8000960 <__NVIC_GetPriorityGrouping>
 8000d00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d02:	687a      	ldr	r2, [r7, #4]
 8000d04:	68b9      	ldr	r1, [r7, #8]
 8000d06:	6978      	ldr	r0, [r7, #20]
 8000d08:	f7ff ff44 	bl	8000b94 <NVIC_EncodePriority>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d12:	4611      	mov	r1, r2
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff feed 	bl	8000af4 <__NVIC_SetPriority>
}
 8000d1a:	bf00      	nop
 8000d1c:	3718      	adds	r7, #24
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b082      	sub	sp, #8
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	4603      	mov	r3, r0
 8000d2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d30:	4618      	mov	r0, r3
 8000d32:	f7ff fe23 	bl	800097c <__NVIC_EnableIRQ>
}
 8000d36:	bf00      	nop
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	b082      	sub	sp, #8
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	4603      	mov	r3, r0
 8000d46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8000d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f7ff fe31 	bl	80009b4 <__NVIC_DisableIRQ>
}
 8000d52:	bf00      	nop
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8000d5e:	f7ff ff81 	bl	8000c64 <__NVIC_SystemReset>

08000d62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b082      	sub	sp, #8
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d6a:	6878      	ldr	r0, [r7, #4]
 8000d6c:	f7ff ff90 	bl	8000c90 <SysTick_Config>
 8000d70:	4603      	mov	r3, r0
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}

08000d7a <HAL_NVIC_GetPriorityGrouping>:
/**
  * @brief  Gets the priority grouping field from the NVIC Interrupt Controller.
  * @retval Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field)
  */
uint32_t HAL_NVIC_GetPriorityGrouping(void)
{
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	af00      	add	r7, sp, #0
  /* Get the PRIGROUP[10:8] field value */
  return NVIC_GetPriorityGrouping();
 8000d7e:	f7ff fdef 	bl	8000960 <__NVIC_GetPriorityGrouping>
 8000d82:	4603      	mov	r3, r0
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <HAL_NVIC_GetPriority>:
  * @param  pPreemptPriority: Pointer on the Preemptive priority value (starting from 0).
  * @param  pSubPriority: Pointer on the Subpriority value (starting from 0).
  * @retval None
  */
void HAL_NVIC_GetPriority(IRQn_Type IRQn, uint32_t PriorityGroup, uint32_t *pPreemptPriority, uint32_t *pSubPriority)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	60b9      	str	r1, [r7, #8]
 8000d90:	607a      	str	r2, [r7, #4]
 8000d92:	603b      	str	r3, [r7, #0]
 8000d94:	4603      	mov	r3, r0
 8000d96:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 /* Get priority for Cortex-M system or device specific interrupts */
  NVIC_DecodePriority(NVIC_GetPriority(IRQn), PriorityGroup, pPreemptPriority, pSubPriority);
 8000d98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff fed3 	bl	8000b48 <__NVIC_GetPriority>
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	687a      	ldr	r2, [r7, #4]
 8000da6:	68b9      	ldr	r1, [r7, #8]
 8000da8:	f7ff ff26 	bl	8000bf8 <NVIC_DecodePriority>
}
 8000dac:	bf00      	nop
 8000dae:	3710      	adds	r7, #16
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}

08000db4 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8000dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f7ff fe3a 	bl	8000a3c <__NVIC_SetPendingIRQ>
}
 8000dc8:	bf00      	nop
 8000dca:	3708      	adds	r7, #8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <HAL_NVIC_GetPendingIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
 8000dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dde:	4618      	mov	r0, r3
 8000de0:	f7ff fe0c 	bl	80009fc <__NVIC_GetPendingIRQ>
 8000de4:	4603      	mov	r3, r0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b082      	sub	sp, #8
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	4603      	mov	r3, r0
 8000df6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8000df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff fe3b 	bl	8000a78 <__NVIC_ClearPendingIRQ>
}
 8000e02:	bf00      	nop
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}

08000e0a <HAL_NVIC_GetActive>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetActive(IRQn_Type IRQn)
{
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	b082      	sub	sp, #8
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	4603      	mov	r3, r0
 8000e12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Return 1 if active else 0 */
  return NVIC_GetActive(IRQn);
 8000e14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff fe4b 	bl	8000ab4 <__NVIC_GetActive>
 8000e1e:	4603      	mov	r3, r0
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3708      	adds	r7, #8
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2b04      	cmp	r3, #4
 8000e34:	d106      	bne.n	8000e44 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000e36:	4b09      	ldr	r3, [pc, #36]	; (8000e5c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a08      	ldr	r2, [pc, #32]	; (8000e5c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000e3c:	f043 0304 	orr.w	r3, r3, #4
 8000e40:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000e42:	e005      	b.n	8000e50 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000e44:	4b05      	ldr	r3, [pc, #20]	; (8000e5c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a04      	ldr	r2, [pc, #16]	; (8000e5c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000e4a:	f023 0304 	bic.w	r3, r3, #4
 8000e4e:	6013      	str	r3, [r2, #0]
}
 8000e50:	bf00      	nop
 8000e52:	370c      	adds	r7, #12
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bc80      	pop	{r7}
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	e000e010 	.word	0xe000e010

08000e60 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000e64:	f000 f802 	bl	8000e6c <HAL_SYSTICK_Callback>
}
 8000e68:	bf00      	nop
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bc80      	pop	{r7}
 8000e76:	4770      	bx	lr

08000e78 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000e80:	2300      	movs	r3, #0
 8000e82:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d101      	bne.n	8000e8e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e043      	b.n	8000f16 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	461a      	mov	r2, r3
 8000e94:	4b22      	ldr	r3, [pc, #136]	; (8000f20 <HAL_DMA_Init+0xa8>)
 8000e96:	4413      	add	r3, r2
 8000e98:	4a22      	ldr	r2, [pc, #136]	; (8000f24 <HAL_DMA_Init+0xac>)
 8000e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e9e:	091b      	lsrs	r3, r3, #4
 8000ea0:	009a      	lsls	r2, r3, #2
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4a1f      	ldr	r2, [pc, #124]	; (8000f28 <HAL_DMA_Init+0xb0>)
 8000eaa:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2202      	movs	r2, #2
 8000eb0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000ec2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000ec6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000ed0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	68db      	ldr	r3, [r3, #12]
 8000ed6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000edc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	695b      	ldr	r3, [r3, #20]
 8000ee2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ee8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	69db      	ldr	r3, [r3, #28]
 8000eee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000ef0:	68fa      	ldr	r2, [r7, #12]
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	68fa      	ldr	r2, [r7, #12]
 8000efc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2200      	movs	r2, #0
 8000f02:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2201      	movs	r2, #1
 8000f08:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2200      	movs	r2, #0
 8000f10:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000f14:	2300      	movs	r3, #0
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3714      	adds	r7, #20
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bc80      	pop	{r7}
 8000f1e:	4770      	bx	lr
 8000f20:	bffdfff8 	.word	0xbffdfff8
 8000f24:	cccccccd 	.word	0xcccccccd
 8000f28:	40020000 	.word	0x40020000

08000f2c <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d101      	bne.n	8000f3e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e046      	b.n	8000fcc <HAL_DMA_DeInit+0xa0>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f022 0201 	bic.w	r2, r2, #1
 8000f4c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	2200      	movs	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel Number of Data to Transfer register */
  hdma->Instance->CNDTR = 0U;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Channel peripheral address register */
  hdma->Instance->CPAR  = 0U;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	2200      	movs	r2, #0
 8000f64:	609a      	str	r2, [r3, #8]

  /* Reset DMA Channel memory address register */
  hdma->Instance->CMAR = 0U;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	60da      	str	r2, [r3, #12]
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	461a      	mov	r2, r3
 8000f74:	4b18      	ldr	r3, [pc, #96]	; (8000fd8 <HAL_DMA_DeInit+0xac>)
 8000f76:	4413      	add	r3, r2
 8000f78:	4a18      	ldr	r2, [pc, #96]	; (8000fdc <HAL_DMA_DeInit+0xb0>)
 8000f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f7e:	091b      	lsrs	r3, r3, #4
 8000f80:	009a      	lsls	r2, r3, #2
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a15      	ldr	r2, [pc, #84]	; (8000fe0 <HAL_DMA_DeInit+0xb4>)
 8000f8a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f94:	2101      	movs	r1, #1
 8000f96:	fa01 f202 	lsl.w	r2, r1, r2
 8000f9a:	605a      	str	r2, [r3, #4]

  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2200      	movs	r2, #0
 8000fac:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000fca:	2300      	movs	r3, #0
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bc80      	pop	{r7}
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	bffdfff8 	.word	0xbffdfff8
 8000fdc:	cccccccd 	.word	0xcccccccd
 8000fe0:	40020000 	.word	0x40020000

08000fe4 <HAL_DMA_Start>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	60b9      	str	r1, [r7, #8]
 8000fee:	607a      	str	r2, [r7, #4]
 8000ff0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d101      	bne.n	8001004 <HAL_DMA_Start+0x20>
 8001000:	2302      	movs	r3, #2
 8001002:	e02e      	b.n	8001062 <HAL_DMA_Start+0x7e>
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	2201      	movs	r2, #1
 8001008:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001012:	b2db      	uxtb	r3, r3
 8001014:	2b01      	cmp	r3, #1
 8001016:	d11d      	bne.n	8001054 <HAL_DMA_Start+0x70>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	2202      	movs	r2, #2
 800101c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	2200      	movs	r2, #0
 8001024:	639a      	str	r2, [r3, #56]	; 0x38
            
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f022 0201 	bic.w	r2, r2, #1
 8001034:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	687a      	ldr	r2, [r7, #4]
 800103a:	68b9      	ldr	r1, [r7, #8]
 800103c:	68f8      	ldr	r0, [r7, #12]
 800103e:	f000 fc73 	bl	8001928 <DMA_SetConfig>
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f042 0201 	orr.w	r2, r2, #1
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	e005      	b.n	8001060 <HAL_DMA_Start+0x7c>
  }
  else
  {
   /* Process Unlocked */
   __HAL_UNLOCK(hdma);  
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	2200      	movs	r2, #0
 8001058:	f883 2020 	strb.w	r2, [r3, #32]
   status = HAL_BUSY;
 800105c:	2302      	movs	r3, #2
 800105e:	75fb      	strb	r3, [r7, #23]
  }  
  return status;
 8001060:	7dfb      	ldrb	r3, [r7, #23]
}
 8001062:	4618      	mov	r0, r3
 8001064:	3718      	adds	r7, #24
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800106a:	b580      	push	{r7, lr}
 800106c:	b086      	sub	sp, #24
 800106e:	af00      	add	r7, sp, #0
 8001070:	60f8      	str	r0, [r7, #12]
 8001072:	60b9      	str	r1, [r7, #8]
 8001074:	607a      	str	r2, [r7, #4]
 8001076:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001078:	2300      	movs	r3, #0
 800107a:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001082:	2b01      	cmp	r3, #1
 8001084:	d101      	bne.n	800108a <HAL_DMA_Start_IT+0x20>
 8001086:	2302      	movs	r3, #2
 8001088:	e04b      	b.n	8001122 <HAL_DMA_Start_IT+0xb8>
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	2201      	movs	r2, #1
 800108e:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001098:	b2db      	uxtb	r3, r3
 800109a:	2b01      	cmp	r3, #1
 800109c:	d13a      	bne.n	8001114 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	2202      	movs	r2, #2
 80010a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	2200      	movs	r2, #0
 80010aa:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f022 0201 	bic.w	r2, r2, #1
 80010ba:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	68b9      	ldr	r1, [r7, #8]
 80010c2:	68f8      	ldr	r0, [r7, #12]
 80010c4:	f000 fc30 	bl	8001928 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d008      	beq.n	80010e2 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f042 020e 	orr.w	r2, r2, #14
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	e00f      	b.n	8001102 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f022 0204 	bic.w	r2, r2, #4
 80010f0:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f042 020a 	orr.w	r2, r2, #10
 8001100:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f042 0201 	orr.w	r2, r2, #1
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	e005      	b.n	8001120 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	2200      	movs	r2, #0
 8001118:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800111c:	2302      	movs	r3, #2
 800111e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001120:	7dfb      	ldrb	r3, [r7, #23]
}
 8001122:	4618      	mov	r0, r3
 8001124:	3718      	adds	r7, #24
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800112a:	b480      	push	{r7}
 800112c:	b085      	sub	sp, #20
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001132:	2300      	movs	r3, #0
 8001134:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800113c:	b2db      	uxtb	r3, r3
 800113e:	2b02      	cmp	r3, #2
 8001140:	d008      	beq.n	8001154 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2204      	movs	r2, #4
 8001146:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2200      	movs	r2, #0
 800114c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001150:	2301      	movs	r3, #1
 8001152:	e020      	b.n	8001196 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f022 020e 	bic.w	r2, r2, #14
 8001162:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f022 0201 	bic.w	r2, r2, #1
 8001172:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800117c:	2101      	movs	r1, #1
 800117e:	fa01 f202 	lsl.w	r2, r1, r2
 8001182:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2201      	movs	r2, #1
 8001188:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2200      	movs	r2, #0
 8001190:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001194:	7bfb      	ldrb	r3, [r7, #15]
}
 8001196:	4618      	mov	r0, r3
 8001198:	3714      	adds	r7, #20
 800119a:	46bd      	mov	sp, r7
 800119c:	bc80      	pop	{r7}
 800119e:	4770      	bx	lr

080011a0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011a8:	2300      	movs	r3, #0
 80011aa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	d005      	beq.n	80011c4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2204      	movs	r2, #4
 80011bc:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	73fb      	strb	r3, [r7, #15]
 80011c2:	e051      	b.n	8001268 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f022 020e 	bic.w	r2, r2, #14
 80011d2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f022 0201 	bic.w	r2, r2, #1
 80011e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a22      	ldr	r2, [pc, #136]	; (8001274 <HAL_DMA_Abort_IT+0xd4>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d029      	beq.n	8001242 <HAL_DMA_Abort_IT+0xa2>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a21      	ldr	r2, [pc, #132]	; (8001278 <HAL_DMA_Abort_IT+0xd8>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d022      	beq.n	800123e <HAL_DMA_Abort_IT+0x9e>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a1f      	ldr	r2, [pc, #124]	; (800127c <HAL_DMA_Abort_IT+0xdc>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d01a      	beq.n	8001238 <HAL_DMA_Abort_IT+0x98>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a1e      	ldr	r2, [pc, #120]	; (8001280 <HAL_DMA_Abort_IT+0xe0>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d012      	beq.n	8001232 <HAL_DMA_Abort_IT+0x92>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a1c      	ldr	r2, [pc, #112]	; (8001284 <HAL_DMA_Abort_IT+0xe4>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d00a      	beq.n	800122c <HAL_DMA_Abort_IT+0x8c>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a1b      	ldr	r2, [pc, #108]	; (8001288 <HAL_DMA_Abort_IT+0xe8>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d102      	bne.n	8001226 <HAL_DMA_Abort_IT+0x86>
 8001220:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001224:	e00e      	b.n	8001244 <HAL_DMA_Abort_IT+0xa4>
 8001226:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800122a:	e00b      	b.n	8001244 <HAL_DMA_Abort_IT+0xa4>
 800122c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001230:	e008      	b.n	8001244 <HAL_DMA_Abort_IT+0xa4>
 8001232:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001236:	e005      	b.n	8001244 <HAL_DMA_Abort_IT+0xa4>
 8001238:	f44f 7380 	mov.w	r3, #256	; 0x100
 800123c:	e002      	b.n	8001244 <HAL_DMA_Abort_IT+0xa4>
 800123e:	2310      	movs	r3, #16
 8001240:	e000      	b.n	8001244 <HAL_DMA_Abort_IT+0xa4>
 8001242:	2301      	movs	r3, #1
 8001244:	4a11      	ldr	r2, [pc, #68]	; (800128c <HAL_DMA_Abort_IT+0xec>)
 8001246:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2201      	movs	r2, #1
 800124c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2200      	movs	r2, #0
 8001254:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800125c:	2b00      	cmp	r3, #0
 800125e:	d003      	beq.n	8001268 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	4798      	blx	r3
    } 
  }
  return status;
 8001268:	7bfb      	ldrb	r3, [r7, #15]
}
 800126a:	4618      	mov	r0, r3
 800126c:	3710      	adds	r7, #16
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	40020008 	.word	0x40020008
 8001278:	4002001c 	.word	0x4002001c
 800127c:	40020030 	.word	0x40020030
 8001280:	40020044 	.word	0x40020044
 8001284:	40020058 	.word	0x40020058
 8001288:	4002006c 	.word	0x4002006c
 800128c:	40020000 	.word	0x40020000

08001290 <HAL_DMA_PollForTransfer>:
  * @param  CompleteLevel: Specifies the DMA level complete.
  * @param  Timeout:       Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, uint32_t CompleteLevel, uint32_t Timeout)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af00      	add	r7, sp, #0
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	60b9      	str	r1, [r7, #8]
 800129a:	607a      	str	r2, [r7, #4]
  uint32_t temp;
  uint32_t tickstart = 0U;
 800129c:	2300      	movs	r3, #0
 800129e:	613b      	str	r3, [r7, #16]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	2b02      	cmp	r3, #2
 80012aa:	d008      	beq.n	80012be <HAL_DMA_PollForTransfer+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	2204      	movs	r2, #4
 80012b0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	2200      	movs	r2, #0
 80012b6:	f883 2020 	strb.w	r2, [r3, #32]
    return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e167      	b.n	800158e <HAL_DMA_PollForTransfer+0x2fe>
  }

  /* Polling mode not supported in circular mode */
  if (RESET != (hdma->Instance->CCR & DMA_CCR_CIRC))
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f003 0320 	and.w	r3, r3, #32
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d005      	beq.n	80012d8 <HAL_DMA_PollForTransfer+0x48>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012d2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80012d4:	2301      	movs	r3, #1
 80012d6:	e15a      	b.n	800158e <HAL_DMA_PollForTransfer+0x2fe>
  }
  
  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d131      	bne.n	8001342 <HAL_DMA_PollForTransfer+0xb2>
  {
    /* Transfer Complete flag */
    temp = __HAL_DMA_GET_TC_FLAG_INDEX(hdma);
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a88      	ldr	r2, [pc, #544]	; (8001504 <HAL_DMA_PollForTransfer+0x274>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d029      	beq.n	800133c <HAL_DMA_PollForTransfer+0xac>
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a86      	ldr	r2, [pc, #536]	; (8001508 <HAL_DMA_PollForTransfer+0x278>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d022      	beq.n	8001338 <HAL_DMA_PollForTransfer+0xa8>
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a85      	ldr	r2, [pc, #532]	; (800150c <HAL_DMA_PollForTransfer+0x27c>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d01a      	beq.n	8001332 <HAL_DMA_PollForTransfer+0xa2>
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a83      	ldr	r2, [pc, #524]	; (8001510 <HAL_DMA_PollForTransfer+0x280>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d012      	beq.n	800132c <HAL_DMA_PollForTransfer+0x9c>
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a82      	ldr	r2, [pc, #520]	; (8001514 <HAL_DMA_PollForTransfer+0x284>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d00a      	beq.n	8001326 <HAL_DMA_PollForTransfer+0x96>
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a80      	ldr	r2, [pc, #512]	; (8001518 <HAL_DMA_PollForTransfer+0x288>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d102      	bne.n	8001320 <HAL_DMA_PollForTransfer+0x90>
 800131a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800131e:	e00e      	b.n	800133e <HAL_DMA_PollForTransfer+0xae>
 8001320:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001324:	e00b      	b.n	800133e <HAL_DMA_PollForTransfer+0xae>
 8001326:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800132a:	e008      	b.n	800133e <HAL_DMA_PollForTransfer+0xae>
 800132c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001330:	e005      	b.n	800133e <HAL_DMA_PollForTransfer+0xae>
 8001332:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001336:	e002      	b.n	800133e <HAL_DMA_PollForTransfer+0xae>
 8001338:	2320      	movs	r3, #32
 800133a:	e000      	b.n	800133e <HAL_DMA_PollForTransfer+0xae>
 800133c:	2302      	movs	r3, #2
 800133e:	617b      	str	r3, [r7, #20]
 8001340:	e030      	b.n	80013a4 <HAL_DMA_PollForTransfer+0x114>
  }
  else
  {
    /* Half Transfer Complete flag */
    temp = __HAL_DMA_GET_HT_FLAG_INDEX(hdma);
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a6f      	ldr	r2, [pc, #444]	; (8001504 <HAL_DMA_PollForTransfer+0x274>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d029      	beq.n	80013a0 <HAL_DMA_PollForTransfer+0x110>
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a6d      	ldr	r2, [pc, #436]	; (8001508 <HAL_DMA_PollForTransfer+0x278>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d022      	beq.n	800139c <HAL_DMA_PollForTransfer+0x10c>
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a6c      	ldr	r2, [pc, #432]	; (800150c <HAL_DMA_PollForTransfer+0x27c>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d01a      	beq.n	8001396 <HAL_DMA_PollForTransfer+0x106>
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a6a      	ldr	r2, [pc, #424]	; (8001510 <HAL_DMA_PollForTransfer+0x280>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d012      	beq.n	8001390 <HAL_DMA_PollForTransfer+0x100>
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a69      	ldr	r2, [pc, #420]	; (8001514 <HAL_DMA_PollForTransfer+0x284>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d00a      	beq.n	800138a <HAL_DMA_PollForTransfer+0xfa>
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a67      	ldr	r2, [pc, #412]	; (8001518 <HAL_DMA_PollForTransfer+0x288>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d102      	bne.n	8001384 <HAL_DMA_PollForTransfer+0xf4>
 800137e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001382:	e00e      	b.n	80013a2 <HAL_DMA_PollForTransfer+0x112>
 8001384:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001388:	e00b      	b.n	80013a2 <HAL_DMA_PollForTransfer+0x112>
 800138a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800138e:	e008      	b.n	80013a2 <HAL_DMA_PollForTransfer+0x112>
 8001390:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001394:	e005      	b.n	80013a2 <HAL_DMA_PollForTransfer+0x112>
 8001396:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800139a:	e002      	b.n	80013a2 <HAL_DMA_PollForTransfer+0x112>
 800139c:	2340      	movs	r3, #64	; 0x40
 800139e:	e000      	b.n	80013a2 <HAL_DMA_PollForTransfer+0x112>
 80013a0:	2304      	movs	r3, #4
 80013a2:	617b      	str	r3, [r7, #20]
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80013a4:	f7ff f99e 	bl	80006e4 <HAL_GetTick>
 80013a8:	6138      	str	r0, [r7, #16]

  while(__HAL_DMA_GET_FLAG(hdma, temp) == RESET)
 80013aa:	e06b      	b.n	8001484 <HAL_DMA_PollForTransfer+0x1f4>
  {
    if((__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET))
 80013ac:	4b5b      	ldr	r3, [pc, #364]	; (800151c <HAL_DMA_PollForTransfer+0x28c>)
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4953      	ldr	r1, [pc, #332]	; (8001504 <HAL_DMA_PollForTransfer+0x274>)
 80013b6:	428b      	cmp	r3, r1
 80013b8:	d029      	beq.n	800140e <HAL_DMA_PollForTransfer+0x17e>
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4952      	ldr	r1, [pc, #328]	; (8001508 <HAL_DMA_PollForTransfer+0x278>)
 80013c0:	428b      	cmp	r3, r1
 80013c2:	d022      	beq.n	800140a <HAL_DMA_PollForTransfer+0x17a>
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4950      	ldr	r1, [pc, #320]	; (800150c <HAL_DMA_PollForTransfer+0x27c>)
 80013ca:	428b      	cmp	r3, r1
 80013cc:	d01a      	beq.n	8001404 <HAL_DMA_PollForTransfer+0x174>
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	494f      	ldr	r1, [pc, #316]	; (8001510 <HAL_DMA_PollForTransfer+0x280>)
 80013d4:	428b      	cmp	r3, r1
 80013d6:	d012      	beq.n	80013fe <HAL_DMA_PollForTransfer+0x16e>
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	494d      	ldr	r1, [pc, #308]	; (8001514 <HAL_DMA_PollForTransfer+0x284>)
 80013de:	428b      	cmp	r3, r1
 80013e0:	d00a      	beq.n	80013f8 <HAL_DMA_PollForTransfer+0x168>
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	494c      	ldr	r1, [pc, #304]	; (8001518 <HAL_DMA_PollForTransfer+0x288>)
 80013e8:	428b      	cmp	r3, r1
 80013ea:	d102      	bne.n	80013f2 <HAL_DMA_PollForTransfer+0x162>
 80013ec:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80013f0:	e00e      	b.n	8001410 <HAL_DMA_PollForTransfer+0x180>
 80013f2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80013f6:	e00b      	b.n	8001410 <HAL_DMA_PollForTransfer+0x180>
 80013f8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80013fc:	e008      	b.n	8001410 <HAL_DMA_PollForTransfer+0x180>
 80013fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001402:	e005      	b.n	8001410 <HAL_DMA_PollForTransfer+0x180>
 8001404:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001408:	e002      	b.n	8001410 <HAL_DMA_PollForTransfer+0x180>
 800140a:	2380      	movs	r3, #128	; 0x80
 800140c:	e000      	b.n	8001410 <HAL_DMA_PollForTransfer+0x180>
 800140e:	2308      	movs	r3, #8
 8001410:	4013      	ands	r3, r2
 8001412:	2b00      	cmp	r3, #0
 8001414:	d017      	beq.n	8001446 <HAL_DMA_PollForTransfer+0x1b6>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Clear all flags */
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800141e:	2101      	movs	r1, #1
 8001420:	fa01 f202 	lsl.w	r2, r1, r2
 8001424:	605a      	str	r2, [r3, #4]

      /* Update error code */
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800142a:	f043 0201 	orr.w	r2, r3, #1
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	639a      	str	r2, [r3, #56]	; 0x38

      /* Change the DMA state */
      hdma->State= HAL_DMA_STATE_READY;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	2201      	movs	r2, #1
 8001436:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	2200      	movs	r2, #0
 800143e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e0a3      	b.n	800158e <HAL_DMA_PollForTransfer+0x2fe>
    }
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800144c:	d01a      	beq.n	8001484 <HAL_DMA_PollForTransfer+0x1f4>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d007      	beq.n	8001464 <HAL_DMA_PollForTransfer+0x1d4>
 8001454:	f7ff f946 	bl	80006e4 <HAL_GetTick>
 8001458:	4602      	mov	r2, r0
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	687a      	ldr	r2, [r7, #4]
 8001460:	429a      	cmp	r2, r3
 8001462:	d20f      	bcs.n	8001484 <HAL_DMA_PollForTransfer+0x1f4>
      {
        /* Update error code */
        SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001468:	f043 0220 	orr.w	r2, r3, #32
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	639a      	str	r2, [r3, #56]	; 0x38

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	2201      	movs	r2, #1
 8001474:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	2200      	movs	r2, #0
 800147c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	e084      	b.n	800158e <HAL_DMA_PollForTransfer+0x2fe>
  while(__HAL_DMA_GET_FLAG(hdma, temp) == RESET)
 8001484:	4b25      	ldr	r3, [pc, #148]	; (800151c <HAL_DMA_PollForTransfer+0x28c>)
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	4013      	ands	r3, r2
 800148c:	2b00      	cmp	r3, #0
 800148e:	d08d      	beq.n	80013ac <HAL_DMA_PollForTransfer+0x11c>
      }
    }
  }

  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d144      	bne.n	8001520 <HAL_DMA_PollForTransfer+0x290>
  {
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a1a      	ldr	r2, [pc, #104]	; (8001504 <HAL_DMA_PollForTransfer+0x274>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d029      	beq.n	80014f4 <HAL_DMA_PollForTransfer+0x264>
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a18      	ldr	r2, [pc, #96]	; (8001508 <HAL_DMA_PollForTransfer+0x278>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d022      	beq.n	80014f0 <HAL_DMA_PollForTransfer+0x260>
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a17      	ldr	r2, [pc, #92]	; (800150c <HAL_DMA_PollForTransfer+0x27c>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d01a      	beq.n	80014ea <HAL_DMA_PollForTransfer+0x25a>
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a15      	ldr	r2, [pc, #84]	; (8001510 <HAL_DMA_PollForTransfer+0x280>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d012      	beq.n	80014e4 <HAL_DMA_PollForTransfer+0x254>
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a14      	ldr	r2, [pc, #80]	; (8001514 <HAL_DMA_PollForTransfer+0x284>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d00a      	beq.n	80014de <HAL_DMA_PollForTransfer+0x24e>
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a12      	ldr	r2, [pc, #72]	; (8001518 <HAL_DMA_PollForTransfer+0x288>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d102      	bne.n	80014d8 <HAL_DMA_PollForTransfer+0x248>
 80014d2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80014d6:	e00e      	b.n	80014f6 <HAL_DMA_PollForTransfer+0x266>
 80014d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80014dc:	e00b      	b.n	80014f6 <HAL_DMA_PollForTransfer+0x266>
 80014de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014e2:	e008      	b.n	80014f6 <HAL_DMA_PollForTransfer+0x266>
 80014e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014e8:	e005      	b.n	80014f6 <HAL_DMA_PollForTransfer+0x266>
 80014ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014ee:	e002      	b.n	80014f6 <HAL_DMA_PollForTransfer+0x266>
 80014f0:	2320      	movs	r3, #32
 80014f2:	e000      	b.n	80014f6 <HAL_DMA_PollForTransfer+0x266>
 80014f4:	2302      	movs	r3, #2
 80014f6:	4a09      	ldr	r2, [pc, #36]	; (800151c <HAL_DMA_PollForTransfer+0x28c>)
 80014f8:	6053      	str	r3, [r2, #4]

    /* The selected Channelx EN bit is cleared (DMA is disabled and
    all transfers are complete) */
    hdma->State = HAL_DMA_STATE_READY;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	2201      	movs	r2, #1
 80014fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8001502:	e03f      	b.n	8001584 <HAL_DMA_PollForTransfer+0x2f4>
 8001504:	40020008 	.word	0x40020008
 8001508:	4002001c 	.word	0x4002001c
 800150c:	40020030 	.word	0x40020030
 8001510:	40020044 	.word	0x40020044
 8001514:	40020058 	.word	0x40020058
 8001518:	4002006c 	.word	0x4002006c
 800151c:	40020000 	.word	0x40020000
  }
  else
  {
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a1c      	ldr	r2, [pc, #112]	; (8001598 <HAL_DMA_PollForTransfer+0x308>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d029      	beq.n	800157e <HAL_DMA_PollForTransfer+0x2ee>
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a1b      	ldr	r2, [pc, #108]	; (800159c <HAL_DMA_PollForTransfer+0x30c>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d022      	beq.n	800157a <HAL_DMA_PollForTransfer+0x2ea>
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a19      	ldr	r2, [pc, #100]	; (80015a0 <HAL_DMA_PollForTransfer+0x310>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d01a      	beq.n	8001574 <HAL_DMA_PollForTransfer+0x2e4>
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a18      	ldr	r2, [pc, #96]	; (80015a4 <HAL_DMA_PollForTransfer+0x314>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d012      	beq.n	800156e <HAL_DMA_PollForTransfer+0x2de>
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a16      	ldr	r2, [pc, #88]	; (80015a8 <HAL_DMA_PollForTransfer+0x318>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d00a      	beq.n	8001568 <HAL_DMA_PollForTransfer+0x2d8>
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a15      	ldr	r2, [pc, #84]	; (80015ac <HAL_DMA_PollForTransfer+0x31c>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d102      	bne.n	8001562 <HAL_DMA_PollForTransfer+0x2d2>
 800155c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001560:	e00e      	b.n	8001580 <HAL_DMA_PollForTransfer+0x2f0>
 8001562:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001566:	e00b      	b.n	8001580 <HAL_DMA_PollForTransfer+0x2f0>
 8001568:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800156c:	e008      	b.n	8001580 <HAL_DMA_PollForTransfer+0x2f0>
 800156e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001572:	e005      	b.n	8001580 <HAL_DMA_PollForTransfer+0x2f0>
 8001574:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001578:	e002      	b.n	8001580 <HAL_DMA_PollForTransfer+0x2f0>
 800157a:	2340      	movs	r3, #64	; 0x40
 800157c:	e000      	b.n	8001580 <HAL_DMA_PollForTransfer+0x2f0>
 800157e:	2304      	movs	r3, #4
 8001580:	4a0b      	ldr	r2, [pc, #44]	; (80015b0 <HAL_DMA_PollForTransfer+0x320>)
 8001582:	6053      	str	r3, [r2, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hdma);
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	2200      	movs	r2, #0
 8001588:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800158c:	2300      	movs	r3, #0
}
 800158e:	4618      	mov	r0, r3
 8001590:	3718      	adds	r7, #24
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	40020008 	.word	0x40020008
 800159c:	4002001c 	.word	0x4002001c
 80015a0:	40020030 	.word	0x40020030
 80015a4:	40020044 	.word	0x40020044
 80015a8:	40020058 	.word	0x40020058
 80015ac:	4002006c 	.word	0x4002006c
 80015b0:	40020000 	.word	0x40020000

080015b4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d0:	2204      	movs	r2, #4
 80015d2:	409a      	lsls	r2, r3
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	4013      	ands	r3, r2
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d04f      	beq.n	800167c <HAL_DMA_IRQHandler+0xc8>
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	f003 0304 	and.w	r3, r3, #4
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d04a      	beq.n	800167c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0320 	and.w	r3, r3, #32
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d107      	bne.n	8001604 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f022 0204 	bic.w	r2, r2, #4
 8001602:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a66      	ldr	r2, [pc, #408]	; (80017a4 <HAL_DMA_IRQHandler+0x1f0>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d029      	beq.n	8001662 <HAL_DMA_IRQHandler+0xae>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a65      	ldr	r2, [pc, #404]	; (80017a8 <HAL_DMA_IRQHandler+0x1f4>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d022      	beq.n	800165e <HAL_DMA_IRQHandler+0xaa>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a63      	ldr	r2, [pc, #396]	; (80017ac <HAL_DMA_IRQHandler+0x1f8>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d01a      	beq.n	8001658 <HAL_DMA_IRQHandler+0xa4>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a62      	ldr	r2, [pc, #392]	; (80017b0 <HAL_DMA_IRQHandler+0x1fc>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d012      	beq.n	8001652 <HAL_DMA_IRQHandler+0x9e>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a60      	ldr	r2, [pc, #384]	; (80017b4 <HAL_DMA_IRQHandler+0x200>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d00a      	beq.n	800164c <HAL_DMA_IRQHandler+0x98>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a5f      	ldr	r2, [pc, #380]	; (80017b8 <HAL_DMA_IRQHandler+0x204>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d102      	bne.n	8001646 <HAL_DMA_IRQHandler+0x92>
 8001640:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001644:	e00e      	b.n	8001664 <HAL_DMA_IRQHandler+0xb0>
 8001646:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800164a:	e00b      	b.n	8001664 <HAL_DMA_IRQHandler+0xb0>
 800164c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001650:	e008      	b.n	8001664 <HAL_DMA_IRQHandler+0xb0>
 8001652:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001656:	e005      	b.n	8001664 <HAL_DMA_IRQHandler+0xb0>
 8001658:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800165c:	e002      	b.n	8001664 <HAL_DMA_IRQHandler+0xb0>
 800165e:	2340      	movs	r3, #64	; 0x40
 8001660:	e000      	b.n	8001664 <HAL_DMA_IRQHandler+0xb0>
 8001662:	2304      	movs	r3, #4
 8001664:	4a55      	ldr	r2, [pc, #340]	; (80017bc <HAL_DMA_IRQHandler+0x208>)
 8001666:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800166c:	2b00      	cmp	r3, #0
 800166e:	f000 8094 	beq.w	800179a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800167a:	e08e      	b.n	800179a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001680:	2202      	movs	r2, #2
 8001682:	409a      	lsls	r2, r3
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	4013      	ands	r3, r2
 8001688:	2b00      	cmp	r3, #0
 800168a:	d056      	beq.n	800173a <HAL_DMA_IRQHandler+0x186>
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	2b00      	cmp	r3, #0
 8001694:	d051      	beq.n	800173a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0320 	and.w	r3, r3, #32
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d10b      	bne.n	80016bc <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f022 020a 	bic.w	r2, r2, #10
 80016b2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2201      	movs	r2, #1
 80016b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a38      	ldr	r2, [pc, #224]	; (80017a4 <HAL_DMA_IRQHandler+0x1f0>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d029      	beq.n	800171a <HAL_DMA_IRQHandler+0x166>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a37      	ldr	r2, [pc, #220]	; (80017a8 <HAL_DMA_IRQHandler+0x1f4>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d022      	beq.n	8001716 <HAL_DMA_IRQHandler+0x162>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a35      	ldr	r2, [pc, #212]	; (80017ac <HAL_DMA_IRQHandler+0x1f8>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d01a      	beq.n	8001710 <HAL_DMA_IRQHandler+0x15c>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a34      	ldr	r2, [pc, #208]	; (80017b0 <HAL_DMA_IRQHandler+0x1fc>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d012      	beq.n	800170a <HAL_DMA_IRQHandler+0x156>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a32      	ldr	r2, [pc, #200]	; (80017b4 <HAL_DMA_IRQHandler+0x200>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d00a      	beq.n	8001704 <HAL_DMA_IRQHandler+0x150>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a31      	ldr	r2, [pc, #196]	; (80017b8 <HAL_DMA_IRQHandler+0x204>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d102      	bne.n	80016fe <HAL_DMA_IRQHandler+0x14a>
 80016f8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80016fc:	e00e      	b.n	800171c <HAL_DMA_IRQHandler+0x168>
 80016fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001702:	e00b      	b.n	800171c <HAL_DMA_IRQHandler+0x168>
 8001704:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001708:	e008      	b.n	800171c <HAL_DMA_IRQHandler+0x168>
 800170a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800170e:	e005      	b.n	800171c <HAL_DMA_IRQHandler+0x168>
 8001710:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001714:	e002      	b.n	800171c <HAL_DMA_IRQHandler+0x168>
 8001716:	2320      	movs	r3, #32
 8001718:	e000      	b.n	800171c <HAL_DMA_IRQHandler+0x168>
 800171a:	2302      	movs	r3, #2
 800171c:	4a27      	ldr	r2, [pc, #156]	; (80017bc <HAL_DMA_IRQHandler+0x208>)
 800171e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2200      	movs	r2, #0
 8001724:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800172c:	2b00      	cmp	r3, #0
 800172e:	d034      	beq.n	800179a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001738:	e02f      	b.n	800179a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173e:	2208      	movs	r2, #8
 8001740:	409a      	lsls	r2, r3
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	4013      	ands	r3, r2
 8001746:	2b00      	cmp	r3, #0
 8001748:	d028      	beq.n	800179c <HAL_DMA_IRQHandler+0x1e8>
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	f003 0308 	and.w	r3, r3, #8
 8001750:	2b00      	cmp	r3, #0
 8001752:	d023      	beq.n	800179c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f022 020e 	bic.w	r2, r2, #14
 8001762:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800176c:	2101      	movs	r1, #1
 800176e:	fa01 f202 	lsl.w	r2, r1, r2
 8001772:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2201      	movs	r2, #1
 8001778:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2201      	movs	r2, #1
 800177e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2200      	movs	r2, #0
 8001786:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178e:	2b00      	cmp	r3, #0
 8001790:	d004      	beq.n	800179c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	4798      	blx	r3
    }
  }
  return;
 800179a:	bf00      	nop
 800179c:	bf00      	nop
}
 800179e:	3710      	adds	r7, #16
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	40020008 	.word	0x40020008
 80017a8:	4002001c 	.word	0x4002001c
 80017ac:	40020030 	.word	0x40020030
 80017b0:	40020044 	.word	0x40020044
 80017b4:	40020058 	.word	0x40020058
 80017b8:	4002006c 	.word	0x4002006c
 80017bc:	40020000 	.word	0x40020000

080017c0 <HAL_DMA_RegisterCallback>:
  * @param pCallback: pointer to private callback function which has pointer to 
  *                   a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                          
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)( DMA_HandleTypeDef * _hdma))
{
 80017c0:	b480      	push	{r7}
 80017c2:	b087      	sub	sp, #28
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	60f8      	str	r0, [r7, #12]
 80017c8:	460b      	mov	r3, r1
 80017ca:	607a      	str	r2, [r7, #4]
 80017cc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80017ce:	2300      	movs	r3, #0
 80017d0:	75fb      	strb	r3, [r7, #23]
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d101      	bne.n	80017e0 <HAL_DMA_RegisterCallback+0x20>
 80017dc:	2302      	movs	r3, #2
 80017de:	e031      	b.n	8001844 <HAL_DMA_RegisterCallback+0x84>
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	2201      	movs	r2, #1
 80017e4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d120      	bne.n	8001836 <HAL_DMA_RegisterCallback+0x76>
  {
    switch (CallbackID)
 80017f4:	7afb      	ldrb	r3, [r7, #11]
 80017f6:	2b03      	cmp	r3, #3
 80017f8:	d81a      	bhi.n	8001830 <HAL_DMA_RegisterCallback+0x70>
 80017fa:	a201      	add	r2, pc, #4	; (adr r2, 8001800 <HAL_DMA_RegisterCallback+0x40>)
 80017fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001800:	08001811 	.word	0x08001811
 8001804:	08001819 	.word	0x08001819
 8001808:	08001821 	.word	0x08001821
 800180c:	08001829 	.word	0x08001829
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8001816:	e010      	b.n	800183a <HAL_DMA_RegisterCallback+0x7a>
      
    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	62da      	str	r2, [r3, #44]	; 0x2c
      break;         
 800181e:	e00c      	b.n	800183a <HAL_DMA_RegisterCallback+0x7a>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	631a      	str	r2, [r3, #48]	; 0x30
      break;         
 8001826:	e008      	b.n	800183a <HAL_DMA_RegisterCallback+0x7a>
      
    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	635a      	str	r2, [r3, #52]	; 0x34
      break; 
 800182e:	e004      	b.n	800183a <HAL_DMA_RegisterCallback+0x7a>
      
    default:
      status = HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	75fb      	strb	r3, [r7, #23]
      break;                                                            
 8001834:	e001      	b.n	800183a <HAL_DMA_RegisterCallback+0x7a>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	75fb      	strb	r3, [r7, #23]
  } 
  
  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	2200      	movs	r2, #0
 800183e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status;
 8001842:	7dfb      	ldrb	r3, [r7, #23]
}
 8001844:	4618      	mov	r0, r3
 8001846:	371c      	adds	r7, #28
 8001848:	46bd      	mov	sp, r7
 800184a:	bc80      	pop	{r7}
 800184c:	4770      	bx	lr

0800184e <HAL_DMA_UnRegisterCallback>:
  * @param CallbackID: User Callback identifier
  *                    a HAL_DMA_CallbackIDTypeDef ENUM as parameter.
  * @retval HAL status
  */              
HAL_StatusTypeDef HAL_DMA_UnRegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID)
{
 800184e:	b480      	push	{r7}
 8001850:	b085      	sub	sp, #20
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
 8001856:	460b      	mov	r3, r1
 8001858:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800185a:	2300      	movs	r3, #0
 800185c:	73fb      	strb	r3, [r7, #15]

  /* Process locked */
  __HAL_LOCK(hdma);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001864:	2b01      	cmp	r3, #1
 8001866:	d101      	bne.n	800186c <HAL_DMA_UnRegisterCallback+0x1e>
 8001868:	2302      	movs	r3, #2
 800186a:	e040      	b.n	80018ee <HAL_DMA_UnRegisterCallback+0xa0>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2201      	movs	r2, #1
 8001870:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800187a:	b2db      	uxtb	r3, r3
 800187c:	2b01      	cmp	r3, #1
 800187e:	d12f      	bne.n	80018e0 <HAL_DMA_UnRegisterCallback+0x92>
  {
    switch (CallbackID)
 8001880:	78fb      	ldrb	r3, [r7, #3]
 8001882:	2b04      	cmp	r3, #4
 8001884:	d829      	bhi.n	80018da <HAL_DMA_UnRegisterCallback+0x8c>
 8001886:	a201      	add	r2, pc, #4	; (adr r2, 800188c <HAL_DMA_UnRegisterCallback+0x3e>)
 8001888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800188c:	080018a1 	.word	0x080018a1
 8001890:	080018a9 	.word	0x080018a9
 8001894:	080018b1 	.word	0x080018b1
 8001898:	080018b9 	.word	0x080018b9
 800189c:	080018c1 	.word	0x080018c1
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = NULL;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2200      	movs	r2, #0
 80018a4:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80018a6:	e01d      	b.n	80018e4 <HAL_DMA_UnRegisterCallback+0x96>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = NULL;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2200      	movs	r2, #0
 80018ac:	62da      	str	r2, [r3, #44]	; 0x2c
      break;         
 80018ae:	e019      	b.n	80018e4 <HAL_DMA_UnRegisterCallback+0x96>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = NULL;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2200      	movs	r2, #0
 80018b4:	631a      	str	r2, [r3, #48]	; 0x30
      break;         
 80018b6:	e015      	b.n	80018e4 <HAL_DMA_UnRegisterCallback+0x96>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = NULL;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2200      	movs	r2, #0
 80018bc:	635a      	str	r2, [r3, #52]	; 0x34
      break; 
 80018be:	e011      	b.n	80018e4 <HAL_DMA_UnRegisterCallback+0x96>

    case   HAL_DMA_XFER_ALL_CB_ID:
      hdma->XferCpltCallback = NULL;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2200      	movs	r2, #0
 80018c4:	629a      	str	r2, [r3, #40]	; 0x28
      hdma->XferHalfCpltCallback = NULL;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	62da      	str	r2, [r3, #44]	; 0x2c
      hdma->XferErrorCallback = NULL;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2200      	movs	r2, #0
 80018d0:	631a      	str	r2, [r3, #48]	; 0x30
      hdma->XferAbortCallback = NULL;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2200      	movs	r2, #0
 80018d6:	635a      	str	r2, [r3, #52]	; 0x34
      break; 
 80018d8:	e004      	b.n	80018e4 <HAL_DMA_UnRegisterCallback+0x96>

    default:
      status = HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	73fb      	strb	r3, [r7, #15]
      break;
 80018de:	e001      	b.n	80018e4 <HAL_DMA_UnRegisterCallback+0x96>
    }
  }
  else
  {
    status = HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	73fb      	strb	r3, [r7, #15]
  } 
  
  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2200      	movs	r2, #0
 80018e8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status;
 80018ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3714      	adds	r7, #20
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bc80      	pop	{r7}
 80018f6:	4770      	bx	lr

080018f8 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001906:	b2db      	uxtb	r3, r3
}
 8001908:	4618      	mov	r0, r3
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	bc80      	pop	{r7}
 8001910:	4770      	bx	lr

08001912 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001912:	b480      	push	{r7}
 8001914:	b083      	sub	sp, #12
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 800191e:	4618      	mov	r0, r3
 8001920:	370c      	adds	r7, #12
 8001922:	46bd      	mov	sp, r7
 8001924:	bc80      	pop	{r7}
 8001926:	4770      	bx	lr

08001928 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001928:	b480      	push	{r7}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0
 800192e:	60f8      	str	r0, [r7, #12]
 8001930:	60b9      	str	r1, [r7, #8]
 8001932:	607a      	str	r2, [r7, #4]
 8001934:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800193e:	2101      	movs	r1, #1
 8001940:	fa01 f202 	lsl.w	r2, r1, r2
 8001944:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	683a      	ldr	r2, [r7, #0]
 800194c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	2b10      	cmp	r3, #16
 8001954:	d108      	bne.n	8001968 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	68ba      	ldr	r2, [r7, #8]
 8001964:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001966:	e007      	b.n	8001978 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	68ba      	ldr	r2, [r7, #8]
 800196e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	60da      	str	r2, [r3, #12]
}
 8001978:	bf00      	nop
 800197a:	3714      	adds	r7, #20
 800197c:	46bd      	mov	sp, r7
 800197e:	bc80      	pop	{r7}
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop

08001984 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001984:	b480      	push	{r7}
 8001986:	b08b      	sub	sp, #44	; 0x2c
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800198e:	2300      	movs	r3, #0
 8001990:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001992:	2300      	movs	r3, #0
 8001994:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001996:	e169      	b.n	8001c6c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001998:	2201      	movs	r2, #1
 800199a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	69fa      	ldr	r2, [r7, #28]
 80019a8:	4013      	ands	r3, r2
 80019aa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	f040 8158 	bne.w	8001c66 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	4a9a      	ldr	r2, [pc, #616]	; (8001c24 <HAL_GPIO_Init+0x2a0>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d05e      	beq.n	8001a7e <HAL_GPIO_Init+0xfa>
 80019c0:	4a98      	ldr	r2, [pc, #608]	; (8001c24 <HAL_GPIO_Init+0x2a0>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d875      	bhi.n	8001ab2 <HAL_GPIO_Init+0x12e>
 80019c6:	4a98      	ldr	r2, [pc, #608]	; (8001c28 <HAL_GPIO_Init+0x2a4>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d058      	beq.n	8001a7e <HAL_GPIO_Init+0xfa>
 80019cc:	4a96      	ldr	r2, [pc, #600]	; (8001c28 <HAL_GPIO_Init+0x2a4>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d86f      	bhi.n	8001ab2 <HAL_GPIO_Init+0x12e>
 80019d2:	4a96      	ldr	r2, [pc, #600]	; (8001c2c <HAL_GPIO_Init+0x2a8>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d052      	beq.n	8001a7e <HAL_GPIO_Init+0xfa>
 80019d8:	4a94      	ldr	r2, [pc, #592]	; (8001c2c <HAL_GPIO_Init+0x2a8>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d869      	bhi.n	8001ab2 <HAL_GPIO_Init+0x12e>
 80019de:	4a94      	ldr	r2, [pc, #592]	; (8001c30 <HAL_GPIO_Init+0x2ac>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d04c      	beq.n	8001a7e <HAL_GPIO_Init+0xfa>
 80019e4:	4a92      	ldr	r2, [pc, #584]	; (8001c30 <HAL_GPIO_Init+0x2ac>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d863      	bhi.n	8001ab2 <HAL_GPIO_Init+0x12e>
 80019ea:	4a92      	ldr	r2, [pc, #584]	; (8001c34 <HAL_GPIO_Init+0x2b0>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d046      	beq.n	8001a7e <HAL_GPIO_Init+0xfa>
 80019f0:	4a90      	ldr	r2, [pc, #576]	; (8001c34 <HAL_GPIO_Init+0x2b0>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d85d      	bhi.n	8001ab2 <HAL_GPIO_Init+0x12e>
 80019f6:	2b12      	cmp	r3, #18
 80019f8:	d82a      	bhi.n	8001a50 <HAL_GPIO_Init+0xcc>
 80019fa:	2b12      	cmp	r3, #18
 80019fc:	d859      	bhi.n	8001ab2 <HAL_GPIO_Init+0x12e>
 80019fe:	a201      	add	r2, pc, #4	; (adr r2, 8001a04 <HAL_GPIO_Init+0x80>)
 8001a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a04:	08001a7f 	.word	0x08001a7f
 8001a08:	08001a59 	.word	0x08001a59
 8001a0c:	08001a6b 	.word	0x08001a6b
 8001a10:	08001aad 	.word	0x08001aad
 8001a14:	08001ab3 	.word	0x08001ab3
 8001a18:	08001ab3 	.word	0x08001ab3
 8001a1c:	08001ab3 	.word	0x08001ab3
 8001a20:	08001ab3 	.word	0x08001ab3
 8001a24:	08001ab3 	.word	0x08001ab3
 8001a28:	08001ab3 	.word	0x08001ab3
 8001a2c:	08001ab3 	.word	0x08001ab3
 8001a30:	08001ab3 	.word	0x08001ab3
 8001a34:	08001ab3 	.word	0x08001ab3
 8001a38:	08001ab3 	.word	0x08001ab3
 8001a3c:	08001ab3 	.word	0x08001ab3
 8001a40:	08001ab3 	.word	0x08001ab3
 8001a44:	08001ab3 	.word	0x08001ab3
 8001a48:	08001a61 	.word	0x08001a61
 8001a4c:	08001a75 	.word	0x08001a75
 8001a50:	4a79      	ldr	r2, [pc, #484]	; (8001c38 <HAL_GPIO_Init+0x2b4>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d013      	beq.n	8001a7e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a56:	e02c      	b.n	8001ab2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	623b      	str	r3, [r7, #32]
          break;
 8001a5e:	e029      	b.n	8001ab4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	3304      	adds	r3, #4
 8001a66:	623b      	str	r3, [r7, #32]
          break;
 8001a68:	e024      	b.n	8001ab4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	3308      	adds	r3, #8
 8001a70:	623b      	str	r3, [r7, #32]
          break;
 8001a72:	e01f      	b.n	8001ab4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	330c      	adds	r3, #12
 8001a7a:	623b      	str	r3, [r7, #32]
          break;
 8001a7c:	e01a      	b.n	8001ab4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d102      	bne.n	8001a8c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a86:	2304      	movs	r3, #4
 8001a88:	623b      	str	r3, [r7, #32]
          break;
 8001a8a:	e013      	b.n	8001ab4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d105      	bne.n	8001aa0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a94:	2308      	movs	r3, #8
 8001a96:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	69fa      	ldr	r2, [r7, #28]
 8001a9c:	611a      	str	r2, [r3, #16]
          break;
 8001a9e:	e009      	b.n	8001ab4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001aa0:	2308      	movs	r3, #8
 8001aa2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	69fa      	ldr	r2, [r7, #28]
 8001aa8:	615a      	str	r2, [r3, #20]
          break;
 8001aaa:	e003      	b.n	8001ab4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001aac:	2300      	movs	r3, #0
 8001aae:	623b      	str	r3, [r7, #32]
          break;
 8001ab0:	e000      	b.n	8001ab4 <HAL_GPIO_Init+0x130>
          break;
 8001ab2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	2bff      	cmp	r3, #255	; 0xff
 8001ab8:	d801      	bhi.n	8001abe <HAL_GPIO_Init+0x13a>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	e001      	b.n	8001ac2 <HAL_GPIO_Init+0x13e>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	3304      	adds	r3, #4
 8001ac2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ac4:	69bb      	ldr	r3, [r7, #24]
 8001ac6:	2bff      	cmp	r3, #255	; 0xff
 8001ac8:	d802      	bhi.n	8001ad0 <HAL_GPIO_Init+0x14c>
 8001aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	e002      	b.n	8001ad6 <HAL_GPIO_Init+0x152>
 8001ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad2:	3b08      	subs	r3, #8
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	210f      	movs	r1, #15
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	401a      	ands	r2, r3
 8001ae8:	6a39      	ldr	r1, [r7, #32]
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	fa01 f303 	lsl.w	r3, r1, r3
 8001af0:	431a      	orrs	r2, r3
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	f000 80b1 	beq.w	8001c66 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b04:	4b4d      	ldr	r3, [pc, #308]	; (8001c3c <HAL_GPIO_Init+0x2b8>)
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	4a4c      	ldr	r2, [pc, #304]	; (8001c3c <HAL_GPIO_Init+0x2b8>)
 8001b0a:	f043 0301 	orr.w	r3, r3, #1
 8001b0e:	6193      	str	r3, [r2, #24]
 8001b10:	4b4a      	ldr	r3, [pc, #296]	; (8001c3c <HAL_GPIO_Init+0x2b8>)
 8001b12:	699b      	ldr	r3, [r3, #24]
 8001b14:	f003 0301 	and.w	r3, r3, #1
 8001b18:	60bb      	str	r3, [r7, #8]
 8001b1a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b1c:	4a48      	ldr	r2, [pc, #288]	; (8001c40 <HAL_GPIO_Init+0x2bc>)
 8001b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b20:	089b      	lsrs	r3, r3, #2
 8001b22:	3302      	adds	r3, #2
 8001b24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b28:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2c:	f003 0303 	and.w	r3, r3, #3
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	220f      	movs	r2, #15
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	68fa      	ldr	r2, [r7, #12]
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	4a40      	ldr	r2, [pc, #256]	; (8001c44 <HAL_GPIO_Init+0x2c0>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d013      	beq.n	8001b70 <HAL_GPIO_Init+0x1ec>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	4a3f      	ldr	r2, [pc, #252]	; (8001c48 <HAL_GPIO_Init+0x2c4>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d00d      	beq.n	8001b6c <HAL_GPIO_Init+0x1e8>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	4a3e      	ldr	r2, [pc, #248]	; (8001c4c <HAL_GPIO_Init+0x2c8>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d007      	beq.n	8001b68 <HAL_GPIO_Init+0x1e4>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	4a3d      	ldr	r2, [pc, #244]	; (8001c50 <HAL_GPIO_Init+0x2cc>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d101      	bne.n	8001b64 <HAL_GPIO_Init+0x1e0>
 8001b60:	2303      	movs	r3, #3
 8001b62:	e006      	b.n	8001b72 <HAL_GPIO_Init+0x1ee>
 8001b64:	2304      	movs	r3, #4
 8001b66:	e004      	b.n	8001b72 <HAL_GPIO_Init+0x1ee>
 8001b68:	2302      	movs	r3, #2
 8001b6a:	e002      	b.n	8001b72 <HAL_GPIO_Init+0x1ee>
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e000      	b.n	8001b72 <HAL_GPIO_Init+0x1ee>
 8001b70:	2300      	movs	r3, #0
 8001b72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b74:	f002 0203 	and.w	r2, r2, #3
 8001b78:	0092      	lsls	r2, r2, #2
 8001b7a:	4093      	lsls	r3, r2
 8001b7c:	68fa      	ldr	r2, [r7, #12]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b82:	492f      	ldr	r1, [pc, #188]	; (8001c40 <HAL_GPIO_Init+0x2bc>)
 8001b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b86:	089b      	lsrs	r3, r3, #2
 8001b88:	3302      	adds	r3, #2
 8001b8a:	68fa      	ldr	r2, [r7, #12]
 8001b8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d006      	beq.n	8001baa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b9c:	4b2d      	ldr	r3, [pc, #180]	; (8001c54 <HAL_GPIO_Init+0x2d0>)
 8001b9e:	689a      	ldr	r2, [r3, #8]
 8001ba0:	492c      	ldr	r1, [pc, #176]	; (8001c54 <HAL_GPIO_Init+0x2d0>)
 8001ba2:	69bb      	ldr	r3, [r7, #24]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	608b      	str	r3, [r1, #8]
 8001ba8:	e006      	b.n	8001bb8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001baa:	4b2a      	ldr	r3, [pc, #168]	; (8001c54 <HAL_GPIO_Init+0x2d0>)
 8001bac:	689a      	ldr	r2, [r3, #8]
 8001bae:	69bb      	ldr	r3, [r7, #24]
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	4928      	ldr	r1, [pc, #160]	; (8001c54 <HAL_GPIO_Init+0x2d0>)
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d006      	beq.n	8001bd2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001bc4:	4b23      	ldr	r3, [pc, #140]	; (8001c54 <HAL_GPIO_Init+0x2d0>)
 8001bc6:	68da      	ldr	r2, [r3, #12]
 8001bc8:	4922      	ldr	r1, [pc, #136]	; (8001c54 <HAL_GPIO_Init+0x2d0>)
 8001bca:	69bb      	ldr	r3, [r7, #24]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	60cb      	str	r3, [r1, #12]
 8001bd0:	e006      	b.n	8001be0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001bd2:	4b20      	ldr	r3, [pc, #128]	; (8001c54 <HAL_GPIO_Init+0x2d0>)
 8001bd4:	68da      	ldr	r2, [r3, #12]
 8001bd6:	69bb      	ldr	r3, [r7, #24]
 8001bd8:	43db      	mvns	r3, r3
 8001bda:	491e      	ldr	r1, [pc, #120]	; (8001c54 <HAL_GPIO_Init+0x2d0>)
 8001bdc:	4013      	ands	r3, r2
 8001bde:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d006      	beq.n	8001bfa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001bec:	4b19      	ldr	r3, [pc, #100]	; (8001c54 <HAL_GPIO_Init+0x2d0>)
 8001bee:	685a      	ldr	r2, [r3, #4]
 8001bf0:	4918      	ldr	r1, [pc, #96]	; (8001c54 <HAL_GPIO_Init+0x2d0>)
 8001bf2:	69bb      	ldr	r3, [r7, #24]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	604b      	str	r3, [r1, #4]
 8001bf8:	e006      	b.n	8001c08 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001bfa:	4b16      	ldr	r3, [pc, #88]	; (8001c54 <HAL_GPIO_Init+0x2d0>)
 8001bfc:	685a      	ldr	r2, [r3, #4]
 8001bfe:	69bb      	ldr	r3, [r7, #24]
 8001c00:	43db      	mvns	r3, r3
 8001c02:	4914      	ldr	r1, [pc, #80]	; (8001c54 <HAL_GPIO_Init+0x2d0>)
 8001c04:	4013      	ands	r3, r2
 8001c06:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d021      	beq.n	8001c58 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c14:	4b0f      	ldr	r3, [pc, #60]	; (8001c54 <HAL_GPIO_Init+0x2d0>)
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	490e      	ldr	r1, [pc, #56]	; (8001c54 <HAL_GPIO_Init+0x2d0>)
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	600b      	str	r3, [r1, #0]
 8001c20:	e021      	b.n	8001c66 <HAL_GPIO_Init+0x2e2>
 8001c22:	bf00      	nop
 8001c24:	10320000 	.word	0x10320000
 8001c28:	10310000 	.word	0x10310000
 8001c2c:	10220000 	.word	0x10220000
 8001c30:	10210000 	.word	0x10210000
 8001c34:	10120000 	.word	0x10120000
 8001c38:	10110000 	.word	0x10110000
 8001c3c:	40021000 	.word	0x40021000
 8001c40:	40010000 	.word	0x40010000
 8001c44:	40010800 	.word	0x40010800
 8001c48:	40010c00 	.word	0x40010c00
 8001c4c:	40011000 	.word	0x40011000
 8001c50:	40011400 	.word	0x40011400
 8001c54:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c58:	4b0b      	ldr	r3, [pc, #44]	; (8001c88 <HAL_GPIO_Init+0x304>)
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	43db      	mvns	r3, r3
 8001c60:	4909      	ldr	r1, [pc, #36]	; (8001c88 <HAL_GPIO_Init+0x304>)
 8001c62:	4013      	ands	r3, r2
 8001c64:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c68:	3301      	adds	r3, #1
 8001c6a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c72:	fa22 f303 	lsr.w	r3, r2, r3
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	f47f ae8e 	bne.w	8001998 <HAL_GPIO_Init+0x14>
  }
}
 8001c7c:	bf00      	nop
 8001c7e:	bf00      	nop
 8001c80:	372c      	adds	r7, #44	; 0x2c
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bc80      	pop	{r7}
 8001c86:	4770      	bx	lr
 8001c88:	40010400 	.word	0x40010400

08001c8c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b089      	sub	sp, #36	; 0x24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c96:	2300      	movs	r3, #0
 8001c98:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8001c9a:	e09a      	b.n	8001dd2 <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca4:	683a      	ldr	r2, [r7, #0]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	f000 808d 	beq.w	8001dcc <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8001cb2:	4a4e      	ldr	r2, [pc, #312]	; (8001dec <HAL_GPIO_DeInit+0x160>)
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	089b      	lsrs	r3, r3, #2
 8001cb8:	3302      	adds	r3, #2
 8001cba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cbe:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	f003 0303 	and.w	r3, r3, #3
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	220f      	movs	r2, #15
 8001cca:	fa02 f303 	lsl.w	r3, r2, r3
 8001cce:	697a      	ldr	r2, [r7, #20]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	4a46      	ldr	r2, [pc, #280]	; (8001df0 <HAL_GPIO_DeInit+0x164>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d013      	beq.n	8001d04 <HAL_GPIO_DeInit+0x78>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	4a45      	ldr	r2, [pc, #276]	; (8001df4 <HAL_GPIO_DeInit+0x168>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d00d      	beq.n	8001d00 <HAL_GPIO_DeInit+0x74>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	4a44      	ldr	r2, [pc, #272]	; (8001df8 <HAL_GPIO_DeInit+0x16c>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d007      	beq.n	8001cfc <HAL_GPIO_DeInit+0x70>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	4a43      	ldr	r2, [pc, #268]	; (8001dfc <HAL_GPIO_DeInit+0x170>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d101      	bne.n	8001cf8 <HAL_GPIO_DeInit+0x6c>
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	e006      	b.n	8001d06 <HAL_GPIO_DeInit+0x7a>
 8001cf8:	2304      	movs	r3, #4
 8001cfa:	e004      	b.n	8001d06 <HAL_GPIO_DeInit+0x7a>
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	e002      	b.n	8001d06 <HAL_GPIO_DeInit+0x7a>
 8001d00:	2301      	movs	r3, #1
 8001d02:	e000      	b.n	8001d06 <HAL_GPIO_DeInit+0x7a>
 8001d04:	2300      	movs	r3, #0
 8001d06:	69fa      	ldr	r2, [r7, #28]
 8001d08:	f002 0203 	and.w	r2, r2, #3
 8001d0c:	0092      	lsls	r2, r2, #2
 8001d0e:	4093      	lsls	r3, r2
 8001d10:	697a      	ldr	r2, [r7, #20]
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d132      	bne.n	8001d7c <HAL_GPIO_DeInit+0xf0>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8001d16:	4b3a      	ldr	r3, [pc, #232]	; (8001e00 <HAL_GPIO_DeInit+0x174>)
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	43db      	mvns	r3, r3
 8001d1e:	4938      	ldr	r1, [pc, #224]	; (8001e00 <HAL_GPIO_DeInit+0x174>)
 8001d20:	4013      	ands	r3, r2
 8001d22:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8001d24:	4b36      	ldr	r3, [pc, #216]	; (8001e00 <HAL_GPIO_DeInit+0x174>)
 8001d26:	685a      	ldr	r2, [r3, #4]
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	43db      	mvns	r3, r3
 8001d2c:	4934      	ldr	r1, [pc, #208]	; (8001e00 <HAL_GPIO_DeInit+0x174>)
 8001d2e:	4013      	ands	r3, r2
 8001d30:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8001d32:	4b33      	ldr	r3, [pc, #204]	; (8001e00 <HAL_GPIO_DeInit+0x174>)
 8001d34:	68da      	ldr	r2, [r3, #12]
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	4931      	ldr	r1, [pc, #196]	; (8001e00 <HAL_GPIO_DeInit+0x174>)
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8001d40:	4b2f      	ldr	r3, [pc, #188]	; (8001e00 <HAL_GPIO_DeInit+0x174>)
 8001d42:	689a      	ldr	r2, [r3, #8]
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	43db      	mvns	r3, r3
 8001d48:	492d      	ldr	r1, [pc, #180]	; (8001e00 <HAL_GPIO_DeInit+0x174>)
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	f003 0303 	and.w	r3, r3, #3
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	220f      	movs	r2, #15
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8001d5e:	4a23      	ldr	r2, [pc, #140]	; (8001dec <HAL_GPIO_DeInit+0x160>)
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	089b      	lsrs	r3, r3, #2
 8001d64:	3302      	adds	r3, #2
 8001d66:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	43da      	mvns	r2, r3
 8001d6e:	481f      	ldr	r0, [pc, #124]	; (8001dec <HAL_GPIO_DeInit+0x160>)
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	089b      	lsrs	r3, r3, #2
 8001d74:	400a      	ands	r2, r1
 8001d76:	3302      	adds	r3, #2
 8001d78:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	2bff      	cmp	r3, #255	; 0xff
 8001d80:	d801      	bhi.n	8001d86 <HAL_GPIO_DeInit+0xfa>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	e001      	b.n	8001d8a <HAL_GPIO_DeInit+0xfe>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	3304      	adds	r3, #4
 8001d8a:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	2bff      	cmp	r3, #255	; 0xff
 8001d90:	d802      	bhi.n	8001d98 <HAL_GPIO_DeInit+0x10c>
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	e002      	b.n	8001d9e <HAL_GPIO_DeInit+0x112>
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	3b08      	subs	r3, #8
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	210f      	movs	r1, #15
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dac:	43db      	mvns	r3, r3
 8001dae:	401a      	ands	r2, r3
 8001db0:	2104      	movs	r1, #4
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	fa01 f303 	lsl.w	r3, r1, r3
 8001db8:	431a      	orrs	r2, r3
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	68da      	ldr	r2, [r3, #12]
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	43db      	mvns	r3, r3
 8001dc6:	401a      	ands	r2, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	60da      	str	r2, [r3, #12]
    }

    position++;
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	3301      	adds	r3, #1
 8001dd0:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8001dd2:	683a      	ldr	r2, [r7, #0]
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	fa22 f303 	lsr.w	r3, r2, r3
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	f47f af5e 	bne.w	8001c9c <HAL_GPIO_DeInit+0x10>
  }
}
 8001de0:	bf00      	nop
 8001de2:	bf00      	nop
 8001de4:	3724      	adds	r7, #36	; 0x24
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bc80      	pop	{r7}
 8001dea:	4770      	bx	lr
 8001dec:	40010000 	.word	0x40010000
 8001df0:	40010800 	.word	0x40010800
 8001df4:	40010c00 	.word	0x40010c00
 8001df8:	40011000 	.word	0x40011000
 8001dfc:	40011400 	.word	0x40011400
 8001e00:	40010400 	.word	0x40010400

08001e04 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b085      	sub	sp, #20
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689a      	ldr	r2, [r3, #8]
 8001e14:	887b      	ldrh	r3, [r7, #2]
 8001e16:	4013      	ands	r3, r2
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d002      	beq.n	8001e22 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	73fb      	strb	r3, [r7, #15]
 8001e20:	e001      	b.n	8001e26 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e22:	2300      	movs	r3, #0
 8001e24:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e26:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3714      	adds	r7, #20
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bc80      	pop	{r7}
 8001e30:	4770      	bx	lr

08001e32 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e32:	b480      	push	{r7}
 8001e34:	b083      	sub	sp, #12
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	807b      	strh	r3, [r7, #2]
 8001e3e:	4613      	mov	r3, r2
 8001e40:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e42:	787b      	ldrb	r3, [r7, #1]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d003      	beq.n	8001e50 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e48:	887a      	ldrh	r2, [r7, #2]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e4e:	e003      	b.n	8001e58 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e50:	887b      	ldrh	r3, [r7, #2]
 8001e52:	041a      	lsls	r2, r3, #16
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	611a      	str	r2, [r3, #16]
}
 8001e58:	bf00      	nop
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bc80      	pop	{r7}
 8001e60:	4770      	bx	lr

08001e62 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e62:	b480      	push	{r7}
 8001e64:	b085      	sub	sp, #20
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]
 8001e6a:	460b      	mov	r3, r1
 8001e6c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e74:	887a      	ldrh	r2, [r7, #2]
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	041a      	lsls	r2, r3, #16
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	43d9      	mvns	r1, r3
 8001e80:	887b      	ldrh	r3, [r7, #2]
 8001e82:	400b      	ands	r3, r1
 8001e84:	431a      	orrs	r2, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	611a      	str	r2, [r3, #16]
}
 8001e8a:	bf00      	nop
 8001e8c:	3714      	adds	r7, #20
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bc80      	pop	{r7}
 8001e92:	4770      	bx	lr

08001e94 <HAL_GPIO_LockPin>:
* @param  GPIO_Pin: specifies the port bit to be locked.
*         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
* @retval None
*/
HAL_StatusTypeDef HAL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b085      	sub	sp, #20
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = GPIO_LCKR_LCKK;
 8001ea0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ea4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_LOCK_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Apply lock key write sequence */
  SET_BIT(tmp, GPIO_Pin);
 8001ea6:	887a      	ldrh	r2, [r7, #2]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	60fb      	str	r3, [r7, #12]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 8001eae:	68fa      	ldr	r2, [r7, #12]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	619a      	str	r2, [r3, #24]
  /* Reset LCKx bit(s): LCKK='0' + LCK[15-0] */
  GPIOx->LCKR = GPIO_Pin;
 8001eb4:	887a      	ldrh	r2, [r7, #2]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	619a      	str	r2, [r3, #24]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 8001eba:	68fa      	ldr	r2, [r7, #12]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	619a      	str	r2, [r3, #24]
  /* Read LCKK register. This read is mandatory to complete key lock sequence */
  tmp = GPIOx->LCKR;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	60fb      	str	r3, [r7, #12]

  /* read again in order to confirm lock is active */
  if ((uint32_t)(GPIOx->LCKR & GPIO_LCKR_LCKK))
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	699b      	ldr	r3, [r3, #24]
 8001eca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <HAL_GPIO_LockPin+0x42>
  {
    return HAL_OK;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	e000      	b.n	8001ed8 <HAL_GPIO_LockPin+0x44>
  }
  else
  {
    return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
  }
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3714      	adds	r7, #20
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bc80      	pop	{r7}
 8001ee0:	4770      	bx	lr

08001ee2 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b082      	sub	sp, #8
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	4603      	mov	r3, r0
 8001eea:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001eec:	4b08      	ldr	r3, [pc, #32]	; (8001f10 <HAL_GPIO_EXTI_IRQHandler+0x2e>)
 8001eee:	695a      	ldr	r2, [r3, #20]
 8001ef0:	88fb      	ldrh	r3, [r7, #6]
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d006      	beq.n	8001f06 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ef8:	4a05      	ldr	r2, [pc, #20]	; (8001f10 <HAL_GPIO_EXTI_IRQHandler+0x2e>)
 8001efa:	88fb      	ldrh	r3, [r7, #6]
 8001efc:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001efe:	88fb      	ldrh	r3, [r7, #6]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f000 f807 	bl	8001f14 <HAL_GPIO_EXTI_Callback>
  }
}
 8001f06:	bf00      	nop
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	40010400 	.word	0x40010400

08001f14 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001f1e:	bf00      	nop
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bc80      	pop	{r7}
 8001f26:	4770      	bx	lr

08001f28 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001f2e:	f7fe fbd9 	bl	80006e4 <HAL_GetTick>
 8001f32:	6078      	str	r0, [r7, #4]

  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001f34:	4b45      	ldr	r3, [pc, #276]	; (800204c <HAL_RCC_DeInit+0x124>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a44      	ldr	r2, [pc, #272]	; (800204c <HAL_RCC_DeInit+0x124>)
 8001f3a:	f043 0301 	orr.w	r3, r3, #1
 8001f3e:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001f40:	e008      	b.n	8001f54 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f42:	f7fe fbcf 	bl	80006e4 <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d901      	bls.n	8001f54 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8001f50:	2303      	movs	r3, #3
 8001f52:	e077      	b.n	8002044 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001f54:	4b3d      	ldr	r3, [pc, #244]	; (800204c <HAL_RCC_DeInit+0x124>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0302 	and.w	r3, r3, #2
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d0f0      	beq.n	8001f42 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM bits to the reset value */
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, (0x10U << RCC_CR_HSITRIM_Pos));
 8001f60:	4b3a      	ldr	r3, [pc, #232]	; (800204c <HAL_RCC_DeInit+0x124>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001f68:	4a38      	ldr	r2, [pc, #224]	; (800204c <HAL_RCC_DeInit+0x124>)
 8001f6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f6e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001f70:	f7fe fbb8 	bl	80006e4 <HAL_GetTick>
 8001f74:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8001f76:	4b35      	ldr	r3, [pc, #212]	; (800204c <HAL_RCC_DeInit+0x124>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	605a      	str	r2, [r3, #4]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8001f7c:	e00a      	b.n	8001f94 <HAL_RCC_DeInit+0x6c>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f7e:	f7fe fbb1 	bl	80006e4 <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d901      	bls.n	8001f94 <HAL_RCC_DeInit+0x6c>
    {
      return HAL_TIMEOUT;
 8001f90:	2303      	movs	r3, #3
 8001f92:	e057      	b.n	8002044 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8001f94:	4b2d      	ldr	r3, [pc, #180]	; (800204c <HAL_RCC_DeInit+0x124>)
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f003 030c 	and.w	r3, r3, #12
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d1ee      	bne.n	8001f7e <HAL_RCC_DeInit+0x56>
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8001fa0:	4b2b      	ldr	r3, [pc, #172]	; (8002050 <HAL_RCC_DeInit+0x128>)
 8001fa2:	4a2c      	ldr	r2, [pc, #176]	; (8002054 <HAL_RCC_DeInit+0x12c>)
 8001fa4:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001fa6:	4b2c      	ldr	r3, [pc, #176]	; (8002058 <HAL_RCC_DeInit+0x130>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7fe f9ec 	bl	8000388 <HAL_InitTick>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <HAL_RCC_DeInit+0x92>
  {
    return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e044      	b.n	8002044 <HAL_RCC_DeInit+0x11c>
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001fba:	f7fe fb93 	bl	80006e4 <HAL_GetTick>
 8001fbe:	6078      	str	r0, [r7, #4]

  /* Second step is to clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001fc0:	4b22      	ldr	r3, [pc, #136]	; (800204c <HAL_RCC_DeInit+0x124>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a21      	ldr	r2, [pc, #132]	; (800204c <HAL_RCC_DeInit+0x124>)
 8001fc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fca:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8001fcc:	e008      	b.n	8001fe0 <HAL_RCC_DeInit+0xb8>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fce:	f7fe fb89 	bl	80006e4 <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d901      	bls.n	8001fe0 <HAL_RCC_DeInit+0xb8>
    {
      return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e031      	b.n	8002044 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8001fe0:	4b1a      	ldr	r3, [pc, #104]	; (800204c <HAL_RCC_DeInit+0x124>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d1f0      	bne.n	8001fce <HAL_RCC_DeInit+0xa6>
    }
  }

  /* Ensure to reset PLLSRC and PLLMUL bits */
  CLEAR_REG(RCC->CFGR);
 8001fec:	4b17      	ldr	r3, [pc, #92]	; (800204c <HAL_RCC_DeInit+0x124>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	605a      	str	r2, [r3, #4]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001ff2:	f7fe fb77 	bl	80006e4 <HAL_GetTick>
 8001ff6:	6078      	str	r0, [r7, #4]

  /* Reset HSEON & CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_CSSON);
 8001ff8:	4b14      	ldr	r3, [pc, #80]	; (800204c <HAL_RCC_DeInit+0x124>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a13      	ldr	r2, [pc, #76]	; (800204c <HAL_RCC_DeInit+0x124>)
 8001ffe:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002002:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8002004:	e008      	b.n	8002018 <HAL_RCC_DeInit+0xf0>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002006:	f7fe fb6d 	bl	80006e4 <HAL_GetTick>
 800200a:	4602      	mov	r2, r0
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	2b64      	cmp	r3, #100	; 0x64
 8002012:	d901      	bls.n	8002018 <HAL_RCC_DeInit+0xf0>
    {
      return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	e015      	b.n	8002044 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8002018:	4b0c      	ldr	r3, [pc, #48]	; (800204c <HAL_RCC_DeInit+0x124>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d1f0      	bne.n	8002006 <HAL_RCC_DeInit+0xde>
    }
  }

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8002024:	4b09      	ldr	r3, [pc, #36]	; (800204c <HAL_RCC_DeInit+0x124>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a08      	ldr	r2, [pc, #32]	; (800204c <HAL_RCC_DeInit+0x124>)
 800202a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800202e:	6013      	str	r3, [r2, #0]
  /* Reset CFGR2 register */
  CLEAR_REG(RCC->CFGR2);
#endif /* RCC_CFGR2_PREDIV1 */

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8002030:	4b06      	ldr	r3, [pc, #24]	; (800204c <HAL_RCC_DeInit+0x124>)
 8002032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002034:	4a05      	ldr	r2, [pc, #20]	; (800204c <HAL_RCC_DeInit+0x124>)
 8002036:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800203a:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIR);
 800203c:	4b03      	ldr	r3, [pc, #12]	; (800204c <HAL_RCC_DeInit+0x124>)
 800203e:	2200      	movs	r2, #0
 8002040:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8002042:	2300      	movs	r3, #0
}
 8002044:	4618      	mov	r0, r3
 8002046:	3708      	adds	r7, #8
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	40021000 	.word	0x40021000
 8002050:	20000000 	.word	0x20000000
 8002054:	007a1200 	.word	0x007a1200
 8002058:	20000004 	.word	0x20000004

0800205c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b086      	sub	sp, #24
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d101      	bne.n	800206e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e272      	b.n	8002554 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	2b00      	cmp	r3, #0
 8002078:	f000 8087 	beq.w	800218a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800207c:	4b92      	ldr	r3, [pc, #584]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f003 030c 	and.w	r3, r3, #12
 8002084:	2b04      	cmp	r3, #4
 8002086:	d00c      	beq.n	80020a2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002088:	4b8f      	ldr	r3, [pc, #572]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f003 030c 	and.w	r3, r3, #12
 8002090:	2b08      	cmp	r3, #8
 8002092:	d112      	bne.n	80020ba <HAL_RCC_OscConfig+0x5e>
 8002094:	4b8c      	ldr	r3, [pc, #560]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800209c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020a0:	d10b      	bne.n	80020ba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020a2:	4b89      	ldr	r3, [pc, #548]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d06c      	beq.n	8002188 <HAL_RCC_OscConfig+0x12c>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d168      	bne.n	8002188 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e24c      	b.n	8002554 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020c2:	d106      	bne.n	80020d2 <HAL_RCC_OscConfig+0x76>
 80020c4:	4b80      	ldr	r3, [pc, #512]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a7f      	ldr	r2, [pc, #508]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 80020ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020ce:	6013      	str	r3, [r2, #0]
 80020d0:	e02e      	b.n	8002130 <HAL_RCC_OscConfig+0xd4>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d10c      	bne.n	80020f4 <HAL_RCC_OscConfig+0x98>
 80020da:	4b7b      	ldr	r3, [pc, #492]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a7a      	ldr	r2, [pc, #488]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 80020e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020e4:	6013      	str	r3, [r2, #0]
 80020e6:	4b78      	ldr	r3, [pc, #480]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a77      	ldr	r2, [pc, #476]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 80020ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020f0:	6013      	str	r3, [r2, #0]
 80020f2:	e01d      	b.n	8002130 <HAL_RCC_OscConfig+0xd4>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020fc:	d10c      	bne.n	8002118 <HAL_RCC_OscConfig+0xbc>
 80020fe:	4b72      	ldr	r3, [pc, #456]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a71      	ldr	r2, [pc, #452]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 8002104:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002108:	6013      	str	r3, [r2, #0]
 800210a:	4b6f      	ldr	r3, [pc, #444]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a6e      	ldr	r2, [pc, #440]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 8002110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002114:	6013      	str	r3, [r2, #0]
 8002116:	e00b      	b.n	8002130 <HAL_RCC_OscConfig+0xd4>
 8002118:	4b6b      	ldr	r3, [pc, #428]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a6a      	ldr	r2, [pc, #424]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 800211e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002122:	6013      	str	r3, [r2, #0]
 8002124:	4b68      	ldr	r3, [pc, #416]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a67      	ldr	r2, [pc, #412]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 800212a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800212e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d013      	beq.n	8002160 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002138:	f7fe fad4 	bl	80006e4 <HAL_GetTick>
 800213c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800213e:	e008      	b.n	8002152 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002140:	f7fe fad0 	bl	80006e4 <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	2b64      	cmp	r3, #100	; 0x64
 800214c:	d901      	bls.n	8002152 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e200      	b.n	8002554 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002152:	4b5d      	ldr	r3, [pc, #372]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d0f0      	beq.n	8002140 <HAL_RCC_OscConfig+0xe4>
 800215e:	e014      	b.n	800218a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002160:	f7fe fac0 	bl	80006e4 <HAL_GetTick>
 8002164:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002166:	e008      	b.n	800217a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002168:	f7fe fabc 	bl	80006e4 <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	2b64      	cmp	r3, #100	; 0x64
 8002174:	d901      	bls.n	800217a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e1ec      	b.n	8002554 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800217a:	4b53      	ldr	r3, [pc, #332]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d1f0      	bne.n	8002168 <HAL_RCC_OscConfig+0x10c>
 8002186:	e000      	b.n	800218a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002188:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	2b00      	cmp	r3, #0
 8002194:	d063      	beq.n	800225e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002196:	4b4c      	ldr	r3, [pc, #304]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f003 030c 	and.w	r3, r3, #12
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d00b      	beq.n	80021ba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80021a2:	4b49      	ldr	r3, [pc, #292]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f003 030c 	and.w	r3, r3, #12
 80021aa:	2b08      	cmp	r3, #8
 80021ac:	d11c      	bne.n	80021e8 <HAL_RCC_OscConfig+0x18c>
 80021ae:	4b46      	ldr	r3, [pc, #280]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d116      	bne.n	80021e8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021ba:	4b43      	ldr	r3, [pc, #268]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d005      	beq.n	80021d2 <HAL_RCC_OscConfig+0x176>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	691b      	ldr	r3, [r3, #16]
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d001      	beq.n	80021d2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e1c0      	b.n	8002554 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021d2:	4b3d      	ldr	r3, [pc, #244]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	695b      	ldr	r3, [r3, #20]
 80021de:	00db      	lsls	r3, r3, #3
 80021e0:	4939      	ldr	r1, [pc, #228]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 80021e2:	4313      	orrs	r3, r2
 80021e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021e6:	e03a      	b.n	800225e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	691b      	ldr	r3, [r3, #16]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d020      	beq.n	8002232 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021f0:	4b36      	ldr	r3, [pc, #216]	; (80022cc <HAL_RCC_OscConfig+0x270>)
 80021f2:	2201      	movs	r2, #1
 80021f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f6:	f7fe fa75 	bl	80006e4 <HAL_GetTick>
 80021fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021fc:	e008      	b.n	8002210 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021fe:	f7fe fa71 	bl	80006e4 <HAL_GetTick>
 8002202:	4602      	mov	r2, r0
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	2b02      	cmp	r3, #2
 800220a:	d901      	bls.n	8002210 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	e1a1      	b.n	8002554 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002210:	4b2d      	ldr	r3, [pc, #180]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0302 	and.w	r3, r3, #2
 8002218:	2b00      	cmp	r3, #0
 800221a:	d0f0      	beq.n	80021fe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800221c:	4b2a      	ldr	r3, [pc, #168]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	695b      	ldr	r3, [r3, #20]
 8002228:	00db      	lsls	r3, r3, #3
 800222a:	4927      	ldr	r1, [pc, #156]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 800222c:	4313      	orrs	r3, r2
 800222e:	600b      	str	r3, [r1, #0]
 8002230:	e015      	b.n	800225e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002232:	4b26      	ldr	r3, [pc, #152]	; (80022cc <HAL_RCC_OscConfig+0x270>)
 8002234:	2200      	movs	r2, #0
 8002236:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002238:	f7fe fa54 	bl	80006e4 <HAL_GetTick>
 800223c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800223e:	e008      	b.n	8002252 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002240:	f7fe fa50 	bl	80006e4 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b02      	cmp	r3, #2
 800224c:	d901      	bls.n	8002252 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e180      	b.n	8002554 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002252:	4b1d      	ldr	r3, [pc, #116]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0302 	and.w	r3, r3, #2
 800225a:	2b00      	cmp	r3, #0
 800225c:	d1f0      	bne.n	8002240 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0308 	and.w	r3, r3, #8
 8002266:	2b00      	cmp	r3, #0
 8002268:	d03a      	beq.n	80022e0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	699b      	ldr	r3, [r3, #24]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d019      	beq.n	80022a6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002272:	4b17      	ldr	r3, [pc, #92]	; (80022d0 <HAL_RCC_OscConfig+0x274>)
 8002274:	2201      	movs	r2, #1
 8002276:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002278:	f7fe fa34 	bl	80006e4 <HAL_GetTick>
 800227c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800227e:	e008      	b.n	8002292 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002280:	f7fe fa30 	bl	80006e4 <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	2b02      	cmp	r3, #2
 800228c:	d901      	bls.n	8002292 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e160      	b.n	8002554 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002292:	4b0d      	ldr	r3, [pc, #52]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 8002294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002296:	f003 0302 	and.w	r3, r3, #2
 800229a:	2b00      	cmp	r3, #0
 800229c:	d0f0      	beq.n	8002280 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800229e:	2001      	movs	r0, #1
 80022a0:	f000 fbe4 	bl	8002a6c <RCC_Delay>
 80022a4:	e01c      	b.n	80022e0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022a6:	4b0a      	ldr	r3, [pc, #40]	; (80022d0 <HAL_RCC_OscConfig+0x274>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ac:	f7fe fa1a 	bl	80006e4 <HAL_GetTick>
 80022b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022b2:	e00f      	b.n	80022d4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022b4:	f7fe fa16 	bl	80006e4 <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d908      	bls.n	80022d4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e146      	b.n	8002554 <HAL_RCC_OscConfig+0x4f8>
 80022c6:	bf00      	nop
 80022c8:	40021000 	.word	0x40021000
 80022cc:	42420000 	.word	0x42420000
 80022d0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022d4:	4b92      	ldr	r3, [pc, #584]	; (8002520 <HAL_RCC_OscConfig+0x4c4>)
 80022d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d8:	f003 0302 	and.w	r3, r3, #2
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d1e9      	bne.n	80022b4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0304 	and.w	r3, r3, #4
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	f000 80a6 	beq.w	800243a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022ee:	2300      	movs	r3, #0
 80022f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022f2:	4b8b      	ldr	r3, [pc, #556]	; (8002520 <HAL_RCC_OscConfig+0x4c4>)
 80022f4:	69db      	ldr	r3, [r3, #28]
 80022f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d10d      	bne.n	800231a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022fe:	4b88      	ldr	r3, [pc, #544]	; (8002520 <HAL_RCC_OscConfig+0x4c4>)
 8002300:	69db      	ldr	r3, [r3, #28]
 8002302:	4a87      	ldr	r2, [pc, #540]	; (8002520 <HAL_RCC_OscConfig+0x4c4>)
 8002304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002308:	61d3      	str	r3, [r2, #28]
 800230a:	4b85      	ldr	r3, [pc, #532]	; (8002520 <HAL_RCC_OscConfig+0x4c4>)
 800230c:	69db      	ldr	r3, [r3, #28]
 800230e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002312:	60bb      	str	r3, [r7, #8]
 8002314:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002316:	2301      	movs	r3, #1
 8002318:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800231a:	4b82      	ldr	r3, [pc, #520]	; (8002524 <HAL_RCC_OscConfig+0x4c8>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002322:	2b00      	cmp	r3, #0
 8002324:	d118      	bne.n	8002358 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002326:	4b7f      	ldr	r3, [pc, #508]	; (8002524 <HAL_RCC_OscConfig+0x4c8>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a7e      	ldr	r2, [pc, #504]	; (8002524 <HAL_RCC_OscConfig+0x4c8>)
 800232c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002330:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002332:	f7fe f9d7 	bl	80006e4 <HAL_GetTick>
 8002336:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002338:	e008      	b.n	800234c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800233a:	f7fe f9d3 	bl	80006e4 <HAL_GetTick>
 800233e:	4602      	mov	r2, r0
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	2b64      	cmp	r3, #100	; 0x64
 8002346:	d901      	bls.n	800234c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002348:	2303      	movs	r3, #3
 800234a:	e103      	b.n	8002554 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800234c:	4b75      	ldr	r3, [pc, #468]	; (8002524 <HAL_RCC_OscConfig+0x4c8>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002354:	2b00      	cmp	r3, #0
 8002356:	d0f0      	beq.n	800233a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	2b01      	cmp	r3, #1
 800235e:	d106      	bne.n	800236e <HAL_RCC_OscConfig+0x312>
 8002360:	4b6f      	ldr	r3, [pc, #444]	; (8002520 <HAL_RCC_OscConfig+0x4c4>)
 8002362:	6a1b      	ldr	r3, [r3, #32]
 8002364:	4a6e      	ldr	r2, [pc, #440]	; (8002520 <HAL_RCC_OscConfig+0x4c4>)
 8002366:	f043 0301 	orr.w	r3, r3, #1
 800236a:	6213      	str	r3, [r2, #32]
 800236c:	e02d      	b.n	80023ca <HAL_RCC_OscConfig+0x36e>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	68db      	ldr	r3, [r3, #12]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d10c      	bne.n	8002390 <HAL_RCC_OscConfig+0x334>
 8002376:	4b6a      	ldr	r3, [pc, #424]	; (8002520 <HAL_RCC_OscConfig+0x4c4>)
 8002378:	6a1b      	ldr	r3, [r3, #32]
 800237a:	4a69      	ldr	r2, [pc, #420]	; (8002520 <HAL_RCC_OscConfig+0x4c4>)
 800237c:	f023 0301 	bic.w	r3, r3, #1
 8002380:	6213      	str	r3, [r2, #32]
 8002382:	4b67      	ldr	r3, [pc, #412]	; (8002520 <HAL_RCC_OscConfig+0x4c4>)
 8002384:	6a1b      	ldr	r3, [r3, #32]
 8002386:	4a66      	ldr	r2, [pc, #408]	; (8002520 <HAL_RCC_OscConfig+0x4c4>)
 8002388:	f023 0304 	bic.w	r3, r3, #4
 800238c:	6213      	str	r3, [r2, #32]
 800238e:	e01c      	b.n	80023ca <HAL_RCC_OscConfig+0x36e>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	2b05      	cmp	r3, #5
 8002396:	d10c      	bne.n	80023b2 <HAL_RCC_OscConfig+0x356>
 8002398:	4b61      	ldr	r3, [pc, #388]	; (8002520 <HAL_RCC_OscConfig+0x4c4>)
 800239a:	6a1b      	ldr	r3, [r3, #32]
 800239c:	4a60      	ldr	r2, [pc, #384]	; (8002520 <HAL_RCC_OscConfig+0x4c4>)
 800239e:	f043 0304 	orr.w	r3, r3, #4
 80023a2:	6213      	str	r3, [r2, #32]
 80023a4:	4b5e      	ldr	r3, [pc, #376]	; (8002520 <HAL_RCC_OscConfig+0x4c4>)
 80023a6:	6a1b      	ldr	r3, [r3, #32]
 80023a8:	4a5d      	ldr	r2, [pc, #372]	; (8002520 <HAL_RCC_OscConfig+0x4c4>)
 80023aa:	f043 0301 	orr.w	r3, r3, #1
 80023ae:	6213      	str	r3, [r2, #32]
 80023b0:	e00b      	b.n	80023ca <HAL_RCC_OscConfig+0x36e>
 80023b2:	4b5b      	ldr	r3, [pc, #364]	; (8002520 <HAL_RCC_OscConfig+0x4c4>)
 80023b4:	6a1b      	ldr	r3, [r3, #32]
 80023b6:	4a5a      	ldr	r2, [pc, #360]	; (8002520 <HAL_RCC_OscConfig+0x4c4>)
 80023b8:	f023 0301 	bic.w	r3, r3, #1
 80023bc:	6213      	str	r3, [r2, #32]
 80023be:	4b58      	ldr	r3, [pc, #352]	; (8002520 <HAL_RCC_OscConfig+0x4c4>)
 80023c0:	6a1b      	ldr	r3, [r3, #32]
 80023c2:	4a57      	ldr	r2, [pc, #348]	; (8002520 <HAL_RCC_OscConfig+0x4c4>)
 80023c4:	f023 0304 	bic.w	r3, r3, #4
 80023c8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d015      	beq.n	80023fe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023d2:	f7fe f987 	bl	80006e4 <HAL_GetTick>
 80023d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023d8:	e00a      	b.n	80023f0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023da:	f7fe f983 	bl	80006e4 <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d901      	bls.n	80023f0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	e0b1      	b.n	8002554 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023f0:	4b4b      	ldr	r3, [pc, #300]	; (8002520 <HAL_RCC_OscConfig+0x4c4>)
 80023f2:	6a1b      	ldr	r3, [r3, #32]
 80023f4:	f003 0302 	and.w	r3, r3, #2
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d0ee      	beq.n	80023da <HAL_RCC_OscConfig+0x37e>
 80023fc:	e014      	b.n	8002428 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023fe:	f7fe f971 	bl	80006e4 <HAL_GetTick>
 8002402:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002404:	e00a      	b.n	800241c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002406:	f7fe f96d 	bl	80006e4 <HAL_GetTick>
 800240a:	4602      	mov	r2, r0
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	f241 3288 	movw	r2, #5000	; 0x1388
 8002414:	4293      	cmp	r3, r2
 8002416:	d901      	bls.n	800241c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002418:	2303      	movs	r3, #3
 800241a:	e09b      	b.n	8002554 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800241c:	4b40      	ldr	r3, [pc, #256]	; (8002520 <HAL_RCC_OscConfig+0x4c4>)
 800241e:	6a1b      	ldr	r3, [r3, #32]
 8002420:	f003 0302 	and.w	r3, r3, #2
 8002424:	2b00      	cmp	r3, #0
 8002426:	d1ee      	bne.n	8002406 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002428:	7dfb      	ldrb	r3, [r7, #23]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d105      	bne.n	800243a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800242e:	4b3c      	ldr	r3, [pc, #240]	; (8002520 <HAL_RCC_OscConfig+0x4c4>)
 8002430:	69db      	ldr	r3, [r3, #28]
 8002432:	4a3b      	ldr	r2, [pc, #236]	; (8002520 <HAL_RCC_OscConfig+0x4c4>)
 8002434:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002438:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	69db      	ldr	r3, [r3, #28]
 800243e:	2b00      	cmp	r3, #0
 8002440:	f000 8087 	beq.w	8002552 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002444:	4b36      	ldr	r3, [pc, #216]	; (8002520 <HAL_RCC_OscConfig+0x4c4>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f003 030c 	and.w	r3, r3, #12
 800244c:	2b08      	cmp	r3, #8
 800244e:	d061      	beq.n	8002514 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	69db      	ldr	r3, [r3, #28]
 8002454:	2b02      	cmp	r3, #2
 8002456:	d146      	bne.n	80024e6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002458:	4b33      	ldr	r3, [pc, #204]	; (8002528 <HAL_RCC_OscConfig+0x4cc>)
 800245a:	2200      	movs	r2, #0
 800245c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800245e:	f7fe f941 	bl	80006e4 <HAL_GetTick>
 8002462:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002464:	e008      	b.n	8002478 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002466:	f7fe f93d 	bl	80006e4 <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	2b02      	cmp	r3, #2
 8002472:	d901      	bls.n	8002478 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e06d      	b.n	8002554 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002478:	4b29      	ldr	r3, [pc, #164]	; (8002520 <HAL_RCC_OscConfig+0x4c4>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d1f0      	bne.n	8002466 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6a1b      	ldr	r3, [r3, #32]
 8002488:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800248c:	d108      	bne.n	80024a0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800248e:	4b24      	ldr	r3, [pc, #144]	; (8002520 <HAL_RCC_OscConfig+0x4c4>)
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	4921      	ldr	r1, [pc, #132]	; (8002520 <HAL_RCC_OscConfig+0x4c4>)
 800249c:	4313      	orrs	r3, r2
 800249e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024a0:	4b1f      	ldr	r3, [pc, #124]	; (8002520 <HAL_RCC_OscConfig+0x4c4>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6a19      	ldr	r1, [r3, #32]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b0:	430b      	orrs	r3, r1
 80024b2:	491b      	ldr	r1, [pc, #108]	; (8002520 <HAL_RCC_OscConfig+0x4c4>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024b8:	4b1b      	ldr	r3, [pc, #108]	; (8002528 <HAL_RCC_OscConfig+0x4cc>)
 80024ba:	2201      	movs	r2, #1
 80024bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024be:	f7fe f911 	bl	80006e4 <HAL_GetTick>
 80024c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024c4:	e008      	b.n	80024d8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024c6:	f7fe f90d 	bl	80006e4 <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d901      	bls.n	80024d8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	e03d      	b.n	8002554 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024d8:	4b11      	ldr	r3, [pc, #68]	; (8002520 <HAL_RCC_OscConfig+0x4c4>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d0f0      	beq.n	80024c6 <HAL_RCC_OscConfig+0x46a>
 80024e4:	e035      	b.n	8002552 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024e6:	4b10      	ldr	r3, [pc, #64]	; (8002528 <HAL_RCC_OscConfig+0x4cc>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ec:	f7fe f8fa 	bl	80006e4 <HAL_GetTick>
 80024f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024f2:	e008      	b.n	8002506 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024f4:	f7fe f8f6 	bl	80006e4 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d901      	bls.n	8002506 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e026      	b.n	8002554 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002506:	4b06      	ldr	r3, [pc, #24]	; (8002520 <HAL_RCC_OscConfig+0x4c4>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d1f0      	bne.n	80024f4 <HAL_RCC_OscConfig+0x498>
 8002512:	e01e      	b.n	8002552 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	69db      	ldr	r3, [r3, #28]
 8002518:	2b01      	cmp	r3, #1
 800251a:	d107      	bne.n	800252c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e019      	b.n	8002554 <HAL_RCC_OscConfig+0x4f8>
 8002520:	40021000 	.word	0x40021000
 8002524:	40007000 	.word	0x40007000
 8002528:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800252c:	4b0b      	ldr	r3, [pc, #44]	; (800255c <HAL_RCC_OscConfig+0x500>)
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6a1b      	ldr	r3, [r3, #32]
 800253c:	429a      	cmp	r2, r3
 800253e:	d106      	bne.n	800254e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800254a:	429a      	cmp	r2, r3
 800254c:	d001      	beq.n	8002552 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e000      	b.n	8002554 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002552:	2300      	movs	r3, #0
}
 8002554:	4618      	mov	r0, r3
 8002556:	3718      	adds	r7, #24
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	40021000 	.word	0x40021000

08002560 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d101      	bne.n	8002574 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e0d0      	b.n	8002716 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002574:	4b6a      	ldr	r3, [pc, #424]	; (8002720 <HAL_RCC_ClockConfig+0x1c0>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0307 	and.w	r3, r3, #7
 800257c:	683a      	ldr	r2, [r7, #0]
 800257e:	429a      	cmp	r2, r3
 8002580:	d910      	bls.n	80025a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002582:	4b67      	ldr	r3, [pc, #412]	; (8002720 <HAL_RCC_ClockConfig+0x1c0>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f023 0207 	bic.w	r2, r3, #7
 800258a:	4965      	ldr	r1, [pc, #404]	; (8002720 <HAL_RCC_ClockConfig+0x1c0>)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	4313      	orrs	r3, r2
 8002590:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002592:	4b63      	ldr	r3, [pc, #396]	; (8002720 <HAL_RCC_ClockConfig+0x1c0>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0307 	and.w	r3, r3, #7
 800259a:	683a      	ldr	r2, [r7, #0]
 800259c:	429a      	cmp	r2, r3
 800259e:	d001      	beq.n	80025a4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e0b8      	b.n	8002716 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0302 	and.w	r3, r3, #2
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d020      	beq.n	80025f2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0304 	and.w	r3, r3, #4
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d005      	beq.n	80025c8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025bc:	4b59      	ldr	r3, [pc, #356]	; (8002724 <HAL_RCC_ClockConfig+0x1c4>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	4a58      	ldr	r2, [pc, #352]	; (8002724 <HAL_RCC_ClockConfig+0x1c4>)
 80025c2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80025c6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0308 	and.w	r3, r3, #8
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d005      	beq.n	80025e0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025d4:	4b53      	ldr	r3, [pc, #332]	; (8002724 <HAL_RCC_ClockConfig+0x1c4>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	4a52      	ldr	r2, [pc, #328]	; (8002724 <HAL_RCC_ClockConfig+0x1c4>)
 80025da:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80025de:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025e0:	4b50      	ldr	r3, [pc, #320]	; (8002724 <HAL_RCC_ClockConfig+0x1c4>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	494d      	ldr	r1, [pc, #308]	; (8002724 <HAL_RCC_ClockConfig+0x1c4>)
 80025ee:	4313      	orrs	r3, r2
 80025f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d040      	beq.n	8002680 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	2b01      	cmp	r3, #1
 8002604:	d107      	bne.n	8002616 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002606:	4b47      	ldr	r3, [pc, #284]	; (8002724 <HAL_RCC_ClockConfig+0x1c4>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d115      	bne.n	800263e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e07f      	b.n	8002716 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	2b02      	cmp	r3, #2
 800261c:	d107      	bne.n	800262e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800261e:	4b41      	ldr	r3, [pc, #260]	; (8002724 <HAL_RCC_ClockConfig+0x1c4>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d109      	bne.n	800263e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e073      	b.n	8002716 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800262e:	4b3d      	ldr	r3, [pc, #244]	; (8002724 <HAL_RCC_ClockConfig+0x1c4>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0302 	and.w	r3, r3, #2
 8002636:	2b00      	cmp	r3, #0
 8002638:	d101      	bne.n	800263e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e06b      	b.n	8002716 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800263e:	4b39      	ldr	r3, [pc, #228]	; (8002724 <HAL_RCC_ClockConfig+0x1c4>)
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f023 0203 	bic.w	r2, r3, #3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	4936      	ldr	r1, [pc, #216]	; (8002724 <HAL_RCC_ClockConfig+0x1c4>)
 800264c:	4313      	orrs	r3, r2
 800264e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002650:	f7fe f848 	bl	80006e4 <HAL_GetTick>
 8002654:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002656:	e00a      	b.n	800266e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002658:	f7fe f844 	bl	80006e4 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	f241 3288 	movw	r2, #5000	; 0x1388
 8002666:	4293      	cmp	r3, r2
 8002668:	d901      	bls.n	800266e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e053      	b.n	8002716 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800266e:	4b2d      	ldr	r3, [pc, #180]	; (8002724 <HAL_RCC_ClockConfig+0x1c4>)
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f003 020c 	and.w	r2, r3, #12
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	429a      	cmp	r2, r3
 800267e:	d1eb      	bne.n	8002658 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002680:	4b27      	ldr	r3, [pc, #156]	; (8002720 <HAL_RCC_ClockConfig+0x1c0>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0307 	and.w	r3, r3, #7
 8002688:	683a      	ldr	r2, [r7, #0]
 800268a:	429a      	cmp	r2, r3
 800268c:	d210      	bcs.n	80026b0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800268e:	4b24      	ldr	r3, [pc, #144]	; (8002720 <HAL_RCC_ClockConfig+0x1c0>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f023 0207 	bic.w	r2, r3, #7
 8002696:	4922      	ldr	r1, [pc, #136]	; (8002720 <HAL_RCC_ClockConfig+0x1c0>)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	4313      	orrs	r3, r2
 800269c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800269e:	4b20      	ldr	r3, [pc, #128]	; (8002720 <HAL_RCC_ClockConfig+0x1c0>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0307 	and.w	r3, r3, #7
 80026a6:	683a      	ldr	r2, [r7, #0]
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d001      	beq.n	80026b0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e032      	b.n	8002716 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0304 	and.w	r3, r3, #4
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d008      	beq.n	80026ce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026bc:	4b19      	ldr	r3, [pc, #100]	; (8002724 <HAL_RCC_ClockConfig+0x1c4>)
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	4916      	ldr	r1, [pc, #88]	; (8002724 <HAL_RCC_ClockConfig+0x1c4>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0308 	and.w	r3, r3, #8
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d009      	beq.n	80026ee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80026da:	4b12      	ldr	r3, [pc, #72]	; (8002724 <HAL_RCC_ClockConfig+0x1c4>)
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	00db      	lsls	r3, r3, #3
 80026e8:	490e      	ldr	r1, [pc, #56]	; (8002724 <HAL_RCC_ClockConfig+0x1c4>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026ee:	f000 f871 	bl	80027d4 <HAL_RCC_GetSysClockFreq>
 80026f2:	4602      	mov	r2, r0
 80026f4:	4b0b      	ldr	r3, [pc, #44]	; (8002724 <HAL_RCC_ClockConfig+0x1c4>)
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	091b      	lsrs	r3, r3, #4
 80026fa:	f003 030f 	and.w	r3, r3, #15
 80026fe:	490a      	ldr	r1, [pc, #40]	; (8002728 <HAL_RCC_ClockConfig+0x1c8>)
 8002700:	5ccb      	ldrb	r3, [r1, r3]
 8002702:	fa22 f303 	lsr.w	r3, r2, r3
 8002706:	4a09      	ldr	r2, [pc, #36]	; (800272c <HAL_RCC_ClockConfig+0x1cc>)
 8002708:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800270a:	4b09      	ldr	r3, [pc, #36]	; (8002730 <HAL_RCC_ClockConfig+0x1d0>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4618      	mov	r0, r3
 8002710:	f7fd fe3a 	bl	8000388 <HAL_InitTick>

  return HAL_OK;
 8002714:	2300      	movs	r3, #0
}
 8002716:	4618      	mov	r0, r3
 8002718:	3710      	adds	r7, #16
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	40022000 	.word	0x40022000
 8002724:	40021000 	.word	0x40021000
 8002728:	0800f2cc 	.word	0x0800f2cc
 800272c:	20000000 	.word	0x20000000
 8002730:	20000004 	.word	0x20000004

08002734 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b08a      	sub	sp, #40	; 0x28
 8002738:	af00      	add	r7, sp, #0
 800273a:	60f8      	str	r0, [r7, #12]
 800273c:	60b9      	str	r1, [r7, #8]
 800273e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef gpio = {0U};
 8002740:	f107 0318 	add.w	r3, r7, #24
 8002744:	2200      	movs	r2, #0
 8002746:	601a      	str	r2, [r3, #0]
 8002748:	605a      	str	r2, [r3, #4]
 800274a:	609a      	str	r2, [r3, #8]
 800274c:	60da      	str	r2, [r3, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(RCC_MCOx);
  UNUSED(RCC_MCODiv);

  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 800274e:	2302      	movs	r3, #2
 8002750:	61fb      	str	r3, [r7, #28]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002752:	2303      	movs	r3, #3
 8002754:	627b      	str	r3, [r7, #36]	; 0x24
  gpio.Pull      = GPIO_NOPULL;
 8002756:	2300      	movs	r3, #0
 8002758:	623b      	str	r3, [r7, #32]
  gpio.Pin       = MCO1_PIN;
 800275a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800275e:	61bb      	str	r3, [r7, #24]

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 8002760:	4b0e      	ldr	r3, [pc, #56]	; (800279c <HAL_RCC_MCOConfig+0x68>)
 8002762:	699b      	ldr	r3, [r3, #24]
 8002764:	4a0d      	ldr	r2, [pc, #52]	; (800279c <HAL_RCC_MCOConfig+0x68>)
 8002766:	f043 0304 	orr.w	r3, r3, #4
 800276a:	6193      	str	r3, [r2, #24]
 800276c:	4b0b      	ldr	r3, [pc, #44]	; (800279c <HAL_RCC_MCOConfig+0x68>)
 800276e:	699b      	ldr	r3, [r3, #24]
 8002770:	f003 0304 	and.w	r3, r3, #4
 8002774:	617b      	str	r3, [r7, #20]
 8002776:	697b      	ldr	r3, [r7, #20]

  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8002778:	f107 0318 	add.w	r3, r7, #24
 800277c:	4619      	mov	r1, r3
 800277e:	4808      	ldr	r0, [pc, #32]	; (80027a0 <HAL_RCC_MCOConfig+0x6c>)
 8002780:	f7ff f900 	bl	8001984 <HAL_GPIO_Init>

  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 8002784:	4b05      	ldr	r3, [pc, #20]	; (800279c <HAL_RCC_MCOConfig+0x68>)
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800278c:	4903      	ldr	r1, [pc, #12]	; (800279c <HAL_RCC_MCOConfig+0x68>)
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	4313      	orrs	r3, r2
 8002792:	604b      	str	r3, [r1, #4]
}
 8002794:	bf00      	nop
 8002796:	3728      	adds	r7, #40	; 0x28
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	40021000 	.word	0x40021000
 80027a0:	40010800 	.word	0x40010800

080027a4 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80027a8:	4b03      	ldr	r3, [pc, #12]	; (80027b8 <HAL_RCC_EnableCSS+0x14>)
 80027aa:	2201      	movs	r2, #1
 80027ac:	601a      	str	r2, [r3, #0]
}
 80027ae:	bf00      	nop
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bc80      	pop	{r7}
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop
 80027b8:	4242004c 	.word	0x4242004c

080027bc <HAL_RCC_DisableCSS>:
/**
  * @brief  Disables the Clock Security System.
  * @retval None
  */
void HAL_RCC_DisableCSS(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)DISABLE;
 80027c0:	4b03      	ldr	r3, [pc, #12]	; (80027d0 <HAL_RCC_DisableCSS+0x14>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	601a      	str	r2, [r3, #0]
}
 80027c6:	bf00      	nop
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bc80      	pop	{r7}
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	4242004c 	.word	0x4242004c

080027d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b087      	sub	sp, #28
 80027d8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027da:	2300      	movs	r3, #0
 80027dc:	60fb      	str	r3, [r7, #12]
 80027de:	2300      	movs	r3, #0
 80027e0:	60bb      	str	r3, [r7, #8]
 80027e2:	2300      	movs	r3, #0
 80027e4:	617b      	str	r3, [r7, #20]
 80027e6:	2300      	movs	r3, #0
 80027e8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80027ea:	2300      	movs	r3, #0
 80027ec:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80027ee:	4b1e      	ldr	r3, [pc, #120]	; (8002868 <HAL_RCC_GetSysClockFreq+0x94>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f003 030c 	and.w	r3, r3, #12
 80027fa:	2b04      	cmp	r3, #4
 80027fc:	d002      	beq.n	8002804 <HAL_RCC_GetSysClockFreq+0x30>
 80027fe:	2b08      	cmp	r3, #8
 8002800:	d003      	beq.n	800280a <HAL_RCC_GetSysClockFreq+0x36>
 8002802:	e027      	b.n	8002854 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002804:	4b19      	ldr	r3, [pc, #100]	; (800286c <HAL_RCC_GetSysClockFreq+0x98>)
 8002806:	613b      	str	r3, [r7, #16]
      break;
 8002808:	e027      	b.n	800285a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	0c9b      	lsrs	r3, r3, #18
 800280e:	f003 030f 	and.w	r3, r3, #15
 8002812:	4a17      	ldr	r2, [pc, #92]	; (8002870 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002814:	5cd3      	ldrb	r3, [r2, r3]
 8002816:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d010      	beq.n	8002844 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002822:	4b11      	ldr	r3, [pc, #68]	; (8002868 <HAL_RCC_GetSysClockFreq+0x94>)
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	0c5b      	lsrs	r3, r3, #17
 8002828:	f003 0301 	and.w	r3, r3, #1
 800282c:	4a11      	ldr	r2, [pc, #68]	; (8002874 <HAL_RCC_GetSysClockFreq+0xa0>)
 800282e:	5cd3      	ldrb	r3, [r2, r3]
 8002830:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4a0d      	ldr	r2, [pc, #52]	; (800286c <HAL_RCC_GetSysClockFreq+0x98>)
 8002836:	fb03 f202 	mul.w	r2, r3, r2
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002840:	617b      	str	r3, [r7, #20]
 8002842:	e004      	b.n	800284e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	4a0c      	ldr	r2, [pc, #48]	; (8002878 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002848:	fb02 f303 	mul.w	r3, r2, r3
 800284c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	613b      	str	r3, [r7, #16]
      break;
 8002852:	e002      	b.n	800285a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002854:	4b05      	ldr	r3, [pc, #20]	; (800286c <HAL_RCC_GetSysClockFreq+0x98>)
 8002856:	613b      	str	r3, [r7, #16]
      break;
 8002858:	bf00      	nop
    }
  }
  return sysclockfreq;
 800285a:	693b      	ldr	r3, [r7, #16]
}
 800285c:	4618      	mov	r0, r3
 800285e:	371c      	adds	r7, #28
 8002860:	46bd      	mov	sp, r7
 8002862:	bc80      	pop	{r7}
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	40021000 	.word	0x40021000
 800286c:	007a1200 	.word	0x007a1200
 8002870:	0800f2e4 	.word	0x0800f2e4
 8002874:	0800f2f4 	.word	0x0800f2f4
 8002878:	003d0900 	.word	0x003d0900

0800287c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002880:	4b02      	ldr	r3, [pc, #8]	; (800288c <HAL_RCC_GetHCLKFreq+0x10>)
 8002882:	681b      	ldr	r3, [r3, #0]
}
 8002884:	4618      	mov	r0, r3
 8002886:	46bd      	mov	sp, r7
 8002888:	bc80      	pop	{r7}
 800288a:	4770      	bx	lr
 800288c:	20000000 	.word	0x20000000

08002890 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002894:	f7ff fff2 	bl	800287c <HAL_RCC_GetHCLKFreq>
 8002898:	4602      	mov	r2, r0
 800289a:	4b05      	ldr	r3, [pc, #20]	; (80028b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	0a1b      	lsrs	r3, r3, #8
 80028a0:	f003 0307 	and.w	r3, r3, #7
 80028a4:	4903      	ldr	r1, [pc, #12]	; (80028b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028a6:	5ccb      	ldrb	r3, [r1, r3]
 80028a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	40021000 	.word	0x40021000
 80028b4:	0800f2dc 	.word	0x0800f2dc

080028b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80028bc:	f7ff ffde 	bl	800287c <HAL_RCC_GetHCLKFreq>
 80028c0:	4602      	mov	r2, r0
 80028c2:	4b05      	ldr	r3, [pc, #20]	; (80028d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	0adb      	lsrs	r3, r3, #11
 80028c8:	f003 0307 	and.w	r3, r3, #7
 80028cc:	4903      	ldr	r1, [pc, #12]	; (80028dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80028ce:	5ccb      	ldrb	r3, [r1, r3]
 80028d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	40021000 	.word	0x40021000
 80028dc:	0800f2dc 	.word	0x0800f2dc

080028e0 <HAL_RCC_GetOscConfig>:
  * @param  RCC_OscInitStruct pointer to an RCC_OscInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);

  /* Set all possible values for the Oscillator type parameter ---------------*/
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI  \
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	220f      	movs	r2, #15
 80028ec:	601a      	str	r2, [r3, #0]
  /* Get the Prediv1 source --------------------------------------------------*/
  RCC_OscInitStruct->Prediv1Source = READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
#endif /* RCC_CFGR2_PREDIV1SRC */

  /* Get the HSE configuration -----------------------------------------------*/
  if ((RCC->CR & RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
 80028ee:	4b3c      	ldr	r3, [pc, #240]	; (80029e0 <HAL_RCC_GetOscConfig+0x100>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028f6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80028fa:	d104      	bne.n	8002906 <HAL_RCC_GetOscConfig+0x26>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8002902:	605a      	str	r2, [r3, #4]
 8002904:	e00e      	b.n	8002924 <HAL_RCC_GetOscConfig+0x44>
  }
  else if ((RCC->CR & RCC_CR_HSEON) == RCC_CR_HSEON)
 8002906:	4b36      	ldr	r3, [pc, #216]	; (80029e0 <HAL_RCC_GetOscConfig+0x100>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800290e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002912:	d104      	bne.n	800291e <HAL_RCC_GetOscConfig+0x3e>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_ON;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800291a:	605a      	str	r2, [r3, #4]
 800291c:	e002      	b.n	8002924 <HAL_RCC_GetOscConfig+0x44>
  }
  else
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2200      	movs	r2, #0
 8002922:	605a      	str	r2, [r3, #4]
  }
  RCC_OscInitStruct->HSEPredivValue = __HAL_RCC_HSE_GET_PREDIV();
 8002924:	4b2e      	ldr	r3, [pc, #184]	; (80029e0 <HAL_RCC_GetOscConfig+0x100>)
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f403 3200 	and.w	r2, r3, #131072	; 0x20000
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	609a      	str	r2, [r3, #8]

  /* Get the HSI configuration -----------------------------------------------*/
  if ((RCC->CR & RCC_CR_HSION) == RCC_CR_HSION)
 8002930:	4b2b      	ldr	r3, [pc, #172]	; (80029e0 <HAL_RCC_GetOscConfig+0x100>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0301 	and.w	r3, r3, #1
 8002938:	2b01      	cmp	r3, #1
 800293a:	d103      	bne.n	8002944 <HAL_RCC_GetOscConfig+0x64>
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_ON;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	611a      	str	r2, [r3, #16]
 8002942:	e002      	b.n	800294a <HAL_RCC_GetOscConfig+0x6a>
  }
  else
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	611a      	str	r2, [r3, #16]
  }

  RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->CR & RCC_CR_HSITRIM) >> RCC_CR_HSITRIM_Pos);
 800294a:	4b25      	ldr	r3, [pc, #148]	; (80029e0 <HAL_RCC_GetOscConfig+0x100>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	08db      	lsrs	r3, r3, #3
 8002950:	f003 021f 	and.w	r2, r3, #31
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	615a      	str	r2, [r3, #20]

  /* Get the LSE configuration -----------------------------------------------*/
  if ((RCC->BDCR & RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
 8002958:	4b21      	ldr	r3, [pc, #132]	; (80029e0 <HAL_RCC_GetOscConfig+0x100>)
 800295a:	6a1b      	ldr	r3, [r3, #32]
 800295c:	f003 0304 	and.w	r3, r3, #4
 8002960:	2b04      	cmp	r3, #4
 8002962:	d103      	bne.n	800296c <HAL_RCC_GetOscConfig+0x8c>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2205      	movs	r2, #5
 8002968:	60da      	str	r2, [r3, #12]
 800296a:	e00c      	b.n	8002986 <HAL_RCC_GetOscConfig+0xa6>
  }
  else if ((RCC->BDCR & RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
 800296c:	4b1c      	ldr	r3, [pc, #112]	; (80029e0 <HAL_RCC_GetOscConfig+0x100>)
 800296e:	6a1b      	ldr	r3, [r3, #32]
 8002970:	f003 0301 	and.w	r3, r3, #1
 8002974:	2b01      	cmp	r3, #1
 8002976:	d103      	bne.n	8002980 <HAL_RCC_GetOscConfig+0xa0>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_ON;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	60da      	str	r2, [r3, #12]
 800297e:	e002      	b.n	8002986 <HAL_RCC_GetOscConfig+0xa6>
  }
  else
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	60da      	str	r2, [r3, #12]
  }

  /* Get the LSI configuration -----------------------------------------------*/
  if ((RCC->CSR & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002986:	4b16      	ldr	r3, [pc, #88]	; (80029e0 <HAL_RCC_GetOscConfig+0x100>)
 8002988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298a:	f003 0301 	and.w	r3, r3, #1
 800298e:	2b01      	cmp	r3, #1
 8002990:	d103      	bne.n	800299a <HAL_RCC_GetOscConfig+0xba>
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_ON;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2201      	movs	r2, #1
 8002996:	619a      	str	r2, [r3, #24]
 8002998:	e002      	b.n	80029a0 <HAL_RCC_GetOscConfig+0xc0>
  }
  else
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	619a      	str	r2, [r3, #24]
  }


  /* Get the PLL configuration -----------------------------------------------*/
  if ((RCC->CR & RCC_CR_PLLON) == RCC_CR_PLLON)
 80029a0:	4b0f      	ldr	r3, [pc, #60]	; (80029e0 <HAL_RCC_GetOscConfig+0x100>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029ac:	d103      	bne.n	80029b6 <HAL_RCC_GetOscConfig+0xd6>
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2202      	movs	r2, #2
 80029b2:	61da      	str	r2, [r3, #28]
 80029b4:	e002      	b.n	80029bc <HAL_RCC_GetOscConfig+0xdc>
  }
  else
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2201      	movs	r2, #1
 80029ba:	61da      	str	r2, [r3, #28]
  }
  RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->CFGR & RCC_CFGR_PLLSRC);
 80029bc:	4b08      	ldr	r3, [pc, #32]	; (80029e0 <HAL_RCC_GetOscConfig+0x100>)
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct->PLL.PLLMUL = (uint32_t)(RCC->CFGR & RCC_CFGR_PLLMULL);
 80029c8:	4b05      	ldr	r3, [pc, #20]	; (80029e0 <HAL_RCC_GetOscConfig+0x100>)
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	625a      	str	r2, [r3, #36]	; 0x24
    RCC_OscInitStruct->PLL2.PLL2State = RCC_PLL2_OFF;
  }
  RCC_OscInitStruct->PLL2.HSEPrediv2Value = __HAL_RCC_HSE_GET_PREDIV2();
  RCC_OscInitStruct->PLL2.PLL2MUL = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PLL2MUL);
#endif /* RCC_CR_PLL2ON */
}
 80029d4:	bf00      	nop
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	bc80      	pop	{r7}
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	40021000 	.word	0x40021000

080029e4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	220f      	movs	r2, #15
 80029f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80029f4:	4b11      	ldr	r3, [pc, #68]	; (8002a3c <HAL_RCC_GetClockConfig+0x58>)
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f003 0203 	and.w	r2, r3, #3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002a00:	4b0e      	ldr	r3, [pc, #56]	; (8002a3c <HAL_RCC_GetClockConfig+0x58>)
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002a0c:	4b0b      	ldr	r3, [pc, #44]	; (8002a3c <HAL_RCC_GetClockConfig+0x58>)
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002a18:	4b08      	ldr	r3, [pc, #32]	; (8002a3c <HAL_RCC_GetClockConfig+0x58>)
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	08db      	lsrs	r3, r3, #3
 8002a1e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002a26:	4b06      	ldr	r3, [pc, #24]	; (8002a40 <HAL_RCC_GetClockConfig+0x5c>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0207 	and.w	r2, r3, #7
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002a32:	bf00      	nop
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bc80      	pop	{r7}
 8002a3a:	4770      	bx	lr
 8002a3c:	40021000 	.word	0x40021000
 8002a40:	40022000 	.word	0x40022000

08002a44 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8002a48:	4b06      	ldr	r3, [pc, #24]	; (8002a64 <HAL_RCC_NMI_IRQHandler+0x20>)
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a50:	2b80      	cmp	r3, #128	; 0x80
 8002a52:	d104      	bne.n	8002a5e <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8002a54:	f000 f828 	bl	8002aa8 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8002a58:	4b03      	ldr	r3, [pc, #12]	; (8002a68 <HAL_RCC_NMI_IRQHandler+0x24>)
 8002a5a:	2280      	movs	r2, #128	; 0x80
 8002a5c:	701a      	strb	r2, [r3, #0]
  }
}
 8002a5e:	bf00      	nop
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	40021000 	.word	0x40021000
 8002a68:	4002100a 	.word	0x4002100a

08002a6c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b085      	sub	sp, #20
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002a74:	4b0a      	ldr	r3, [pc, #40]	; (8002aa0 <RCC_Delay+0x34>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a0a      	ldr	r2, [pc, #40]	; (8002aa4 <RCC_Delay+0x38>)
 8002a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a7e:	0a5b      	lsrs	r3, r3, #9
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	fb02 f303 	mul.w	r3, r2, r3
 8002a86:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a88:	bf00      	nop
  }
  while (Delay --);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	1e5a      	subs	r2, r3, #1
 8002a8e:	60fa      	str	r2, [r7, #12]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d1f9      	bne.n	8002a88 <RCC_Delay+0x1c>
}
 8002a94:	bf00      	nop
 8002a96:	bf00      	nop
 8002a98:	3714      	adds	r7, #20
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bc80      	pop	{r7}
 8002a9e:	4770      	bx	lr
 8002aa0:	20000000 	.word	0x20000000
 8002aa4:	10624dd3 	.word	0x10624dd3

08002aa8 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 8002aac:	bf00      	nop
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bc80      	pop	{r7}
 8002ab2:	4770      	bx	lr

08002ab4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d101      	bne.n	8002ac6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e041      	b.n	8002b4a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d106      	bne.n	8002ae0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f000 f88d 	bl	8002bfa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2202      	movs	r2, #2
 8002ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	3304      	adds	r3, #4
 8002af0:	4619      	mov	r1, r3
 8002af2:	4610      	mov	r0, r2
 8002af4:	f005 f824 	bl	8007b40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3708      	adds	r7, #8
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <HAL_TIM_Base_DeInit>:
  * @brief  DeInitializes the TIM Base peripheral
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
 8002b52:	b580      	push	{r7, lr}
 8002b54:	b082      	sub	sp, #8
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2202      	movs	r2, #2
 8002b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	6a1a      	ldr	r2, [r3, #32]
 8002b68:	f241 1311 	movw	r3, #4369	; 0x1111
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d10f      	bne.n	8002b92 <HAL_TIM_Base_DeInit+0x40>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	6a1a      	ldr	r2, [r3, #32]
 8002b78:	f240 4344 	movw	r3, #1092	; 0x444
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d107      	bne.n	8002b92 <HAL_TIM_Base_DeInit+0x40>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f022 0201 	bic.w	r2, r2, #1
 8002b90:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Base_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f000 f83a 	bl	8002c0c <HAL_TIM_Base_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3708      	adds	r7, #8
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}

08002bfa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002bfa:	b480      	push	{r7}
 8002bfc:	b083      	sub	sp, #12
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002c02:	bf00      	nop
 8002c04:	370c      	adds	r7, #12
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bc80      	pop	{r7}
 8002c0a:	4770      	bx	lr

08002c0c <HAL_TIM_Base_MspDeInit>:
  * @brief  DeInitializes TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef *htim)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspDeInit could be implemented in the user file
   */
}
 8002c14:	bf00      	nop
 8002c16:	370c      	adds	r7, #12
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bc80      	pop	{r7}
 8002c1c:	4770      	bx	lr

08002c1e <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002c1e:	b480      	push	{r7}
 8002c20:	b085      	sub	sp, #20
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d001      	beq.n	8002c36 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e032      	b.n	8002c9c <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2202      	movs	r2, #2
 8002c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a19      	ldr	r2, [pc, #100]	; (8002ca8 <HAL_TIM_Base_Start+0x8a>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d00e      	beq.n	8002c66 <HAL_TIM_Base_Start+0x48>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c50:	d009      	beq.n	8002c66 <HAL_TIM_Base_Start+0x48>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a15      	ldr	r2, [pc, #84]	; (8002cac <HAL_TIM_Base_Start+0x8e>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d004      	beq.n	8002c66 <HAL_TIM_Base_Start+0x48>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a13      	ldr	r2, [pc, #76]	; (8002cb0 <HAL_TIM_Base_Start+0x92>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d111      	bne.n	8002c8a <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f003 0307 	and.w	r3, r3, #7
 8002c70:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2b06      	cmp	r3, #6
 8002c76:	d010      	beq.n	8002c9a <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f042 0201 	orr.w	r2, r2, #1
 8002c86:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c88:	e007      	b.n	8002c9a <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f042 0201 	orr.w	r2, r2, #1
 8002c98:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c9a:	2300      	movs	r3, #0
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3714      	adds	r7, #20
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bc80      	pop	{r7}
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop
 8002ca8:	40012c00 	.word	0x40012c00
 8002cac:	40000400 	.word	0x40000400
 8002cb0:	40000800 	.word	0x40000800

08002cb4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	6a1a      	ldr	r2, [r3, #32]
 8002cc2:	f241 1311 	movw	r3, #4369	; 0x1111
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d10f      	bne.n	8002cec <HAL_TIM_Base_Stop+0x38>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	6a1a      	ldr	r2, [r3, #32]
 8002cd2:	f240 4344 	movw	r3, #1092	; 0x444
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d107      	bne.n	8002cec <HAL_TIM_Base_Stop+0x38>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f022 0201 	bic.w	r2, r2, #1
 8002cea:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	370c      	adds	r7, #12
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bc80      	pop	{r7}
 8002cfe:	4770      	bx	lr

08002d00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b085      	sub	sp, #20
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d001      	beq.n	8002d18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e03a      	b.n	8002d8e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2202      	movs	r2, #2
 8002d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	68da      	ldr	r2, [r3, #12]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f042 0201 	orr.w	r2, r2, #1
 8002d2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a18      	ldr	r2, [pc, #96]	; (8002d98 <HAL_TIM_Base_Start_IT+0x98>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d00e      	beq.n	8002d58 <HAL_TIM_Base_Start_IT+0x58>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d42:	d009      	beq.n	8002d58 <HAL_TIM_Base_Start_IT+0x58>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a14      	ldr	r2, [pc, #80]	; (8002d9c <HAL_TIM_Base_Start_IT+0x9c>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d004      	beq.n	8002d58 <HAL_TIM_Base_Start_IT+0x58>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a13      	ldr	r2, [pc, #76]	; (8002da0 <HAL_TIM_Base_Start_IT+0xa0>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d111      	bne.n	8002d7c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	f003 0307 	and.w	r3, r3, #7
 8002d62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2b06      	cmp	r3, #6
 8002d68:	d010      	beq.n	8002d8c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f042 0201 	orr.w	r2, r2, #1
 8002d78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d7a:	e007      	b.n	8002d8c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f042 0201 	orr.w	r2, r2, #1
 8002d8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3714      	adds	r7, #20
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bc80      	pop	{r7}
 8002d96:	4770      	bx	lr
 8002d98:	40012c00 	.word	0x40012c00
 8002d9c:	40000400 	.word	0x40000400
 8002da0:	40000800 	.word	0x40000800

08002da4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	68da      	ldr	r2, [r3, #12]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f022 0201 	bic.w	r2, r2, #1
 8002dba:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	6a1a      	ldr	r2, [r3, #32]
 8002dc2:	f241 1311 	movw	r3, #4369	; 0x1111
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d10f      	bne.n	8002dec <HAL_TIM_Base_Stop_IT+0x48>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	6a1a      	ldr	r2, [r3, #32]
 8002dd2:	f240 4344 	movw	r3, #1092	; 0x444
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d107      	bne.n	8002dec <HAL_TIM_Base_Stop_IT+0x48>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f022 0201 	bic.w	r2, r2, #1
 8002dea:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	370c      	adds	r7, #12
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bc80      	pop	{r7}
 8002dfe:	4770      	bx	lr

08002e00 <HAL_TIM_Base_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_DMA(TIM_HandleTypeDef *htim, const uint32_t *pData, uint16_t Length)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b086      	sub	sp, #24
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	60b9      	str	r1, [r7, #8]
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	80fb      	strh	r3, [r7, #6]

  /* Check the parameters */
  assert_param(IS_TIM_DMA_INSTANCE(htim->Instance));

  /* Set the TIM state */
  if (htim->State == HAL_TIM_STATE_BUSY)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d101      	bne.n	8002e1e <HAL_TIM_Base_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 8002e1a:	2302      	movs	r3, #2
 8002e1c:	e066      	b.n	8002eec <HAL_TIM_Base_Start_DMA+0xec>
  }
  else if (htim->State == HAL_TIM_STATE_READY)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d125      	bne.n	8002e76 <HAL_TIM_Base_Start_DMA+0x76>
  {
    if ((pData == NULL) || (Length == 0U))
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d002      	beq.n	8002e36 <HAL_TIM_Base_Start_DMA+0x36>
 8002e30:	88fb      	ldrh	r3, [r7, #6]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d101      	bne.n	8002e3a <HAL_TIM_Base_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e058      	b.n	8002eec <HAL_TIM_Base_Start_DMA+0xec>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2202      	movs	r2, #2
 8002e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  {
    return HAL_ERROR;
  }

  /* Set the DMA Period elapsed callbacks */
  htim->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = TIM_DMAPeriodElapsedCplt;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	6a1b      	ldr	r3, [r3, #32]
 8002e46:	4a2b      	ldr	r2, [pc, #172]	; (8002ef4 <HAL_TIM_Base_Start_DMA+0xf4>)
 8002e48:	629a      	str	r2, [r3, #40]	; 0x28
  htim->hdma[TIM_DMA_ID_UPDATE]->XferHalfCpltCallback = TIM_DMAPeriodElapsedHalfCplt;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6a1b      	ldr	r3, [r3, #32]
 8002e4e:	4a2a      	ldr	r2, [pc, #168]	; (8002ef8 <HAL_TIM_Base_Start_DMA+0xf8>)
 8002e50:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  htim->hdma[TIM_DMA_ID_UPDATE]->XferErrorCallback = TIM_DMAError ;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	6a1b      	ldr	r3, [r3, #32]
 8002e56:	4a29      	ldr	r2, [pc, #164]	; (8002efc <HAL_TIM_Base_Start_DMA+0xfc>)
 8002e58:	631a      	str	r2, [r3, #48]	; 0x30

  /* Enable the DMA channel */
  if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_UPDATE], (uint32_t)pData, (uint32_t)&htim->Instance->ARR,
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	6a18      	ldr	r0, [r3, #32]
 8002e5e:	68b9      	ldr	r1, [r7, #8]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	332c      	adds	r3, #44	; 0x2c
 8002e66:	461a      	mov	r2, r3
 8002e68:	88fb      	ldrh	r3, [r7, #6]
 8002e6a:	f7fe f8fe 	bl	800106a <HAL_DMA_Start_IT>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d004      	beq.n	8002e7e <HAL_TIM_Base_Start_DMA+0x7e>
 8002e74:	e001      	b.n	8002e7a <HAL_TIM_Base_Start_DMA+0x7a>
    return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e038      	b.n	8002eec <HAL_TIM_Base_Start_DMA+0xec>
                       Length) != HAL_OK)
  {
    /* Return error status */
    return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e036      	b.n	8002eec <HAL_TIM_Base_Start_DMA+0xec>
  }

  /* Enable the TIM Update DMA request */
  __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_UPDATE);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	68da      	ldr	r2, [r3, #12]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e8c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a1b      	ldr	r2, [pc, #108]	; (8002f00 <HAL_TIM_Base_Start_DMA+0x100>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d00e      	beq.n	8002eb6 <HAL_TIM_Base_Start_DMA+0xb6>
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ea0:	d009      	beq.n	8002eb6 <HAL_TIM_Base_Start_DMA+0xb6>
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a17      	ldr	r2, [pc, #92]	; (8002f04 <HAL_TIM_Base_Start_DMA+0x104>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d004      	beq.n	8002eb6 <HAL_TIM_Base_Start_DMA+0xb6>
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a15      	ldr	r2, [pc, #84]	; (8002f08 <HAL_TIM_Base_Start_DMA+0x108>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d111      	bne.n	8002eda <HAL_TIM_Base_Start_DMA+0xda>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	f003 0307 	and.w	r3, r3, #7
 8002ec0:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	2b06      	cmp	r3, #6
 8002ec6:	d010      	beq.n	8002eea <HAL_TIM_Base_Start_DMA+0xea>
    {
      __HAL_TIM_ENABLE(htim);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f042 0201 	orr.w	r2, r2, #1
 8002ed6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ed8:	e007      	b.n	8002eea <HAL_TIM_Base_Start_DMA+0xea>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f042 0201 	orr.w	r2, r2, #1
 8002ee8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002eea:	2300      	movs	r3, #0
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3718      	adds	r7, #24
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	08007aad 	.word	0x08007aad
 8002ef8:	08007adb 	.word	0x08007adb
 8002efc:	080077db 	.word	0x080077db
 8002f00:	40012c00 	.word	0x40012c00
 8002f04:	40000400 	.word	0x40000400
 8002f08:	40000800 	.word	0x40000800

08002f0c <HAL_TIM_Base_Stop_DMA>:
  * @brief  Stops the TIM Base generation in DMA mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_DMA(TIM_HandleTypeDef *htim)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_DMA_INSTANCE(htim->Instance));

  /* Disable the TIM Update DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_UPDATE);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	68da      	ldr	r2, [r3, #12]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f22:	60da      	str	r2, [r3, #12]

  (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_UPDATE]);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6a1b      	ldr	r3, [r3, #32]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7fe f939 	bl	80011a0 <HAL_DMA_Abort_IT>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	6a1a      	ldr	r2, [r3, #32]
 8002f34:	f241 1311 	movw	r3, #4369	; 0x1111
 8002f38:	4013      	ands	r3, r2
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d10f      	bne.n	8002f5e <HAL_TIM_Base_Stop_DMA+0x52>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	6a1a      	ldr	r2, [r3, #32]
 8002f44:	f240 4344 	movw	r3, #1092	; 0x444
 8002f48:	4013      	ands	r3, r2
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d107      	bne.n	8002f5e <HAL_TIM_Base_Stop_DMA+0x52>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f022 0201 	bic.w	r2, r2, #1
 8002f5c:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2201      	movs	r2, #1
 8002f62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002f66:	2300      	movs	r3, #0
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3708      	adds	r7, #8
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}

08002f70 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d101      	bne.n	8002f82 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e041      	b.n	8003006 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d106      	bne.n	8002f9c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f000 f88d 	bl	80030b6 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2202      	movs	r2, #2
 8002fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	3304      	adds	r3, #4
 8002fac:	4619      	mov	r1, r3
 8002fae:	4610      	mov	r0, r2
 8002fb0:	f004 fdc6 	bl	8007b40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	3708      	adds	r7, #8
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}

0800300e <HAL_TIM_OC_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_DeInit(TIM_HandleTypeDef *htim)
{
 800300e:	b580      	push	{r7, lr}
 8003010:	b082      	sub	sp, #8
 8003012:	af00      	add	r7, sp, #0
 8003014:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2202      	movs	r2, #2
 800301a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	6a1a      	ldr	r2, [r3, #32]
 8003024:	f241 1311 	movw	r3, #4369	; 0x1111
 8003028:	4013      	ands	r3, r2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d10f      	bne.n	800304e <HAL_TIM_OC_DeInit+0x40>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	6a1a      	ldr	r2, [r3, #32]
 8003034:	f240 4344 	movw	r3, #1092	; 0x444
 8003038:	4013      	ands	r3, r2
 800303a:	2b00      	cmp	r3, #0
 800303c:	d107      	bne.n	800304e <HAL_TIM_OC_DeInit+0x40>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f022 0201 	bic.w	r2, r2, #1
 800304c:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->OC_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_OC_MspDeInit(htim);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f000 f83a 	bl	80030c8 <HAL_TIM_OC_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3708      	adds	r7, #8
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}

080030b6 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80030b6:	b480      	push	{r7}
 80030b8:	b083      	sub	sp, #12
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80030be:	bf00      	nop
 80030c0:	370c      	adds	r7, #12
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bc80      	pop	{r7}
 80030c6:	4770      	bx	lr

080030c8 <HAL_TIM_OC_MspDeInit>:
  * @brief  DeInitializes TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspDeInit(TIM_HandleTypeDef *htim)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspDeInit could be implemented in the user file
   */
}
 80030d0:	bf00      	nop
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bc80      	pop	{r7}
 80030d8:	4770      	bx	lr

080030da <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030da:	b580      	push	{r7, lr}
 80030dc:	b084      	sub	sp, #16
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
 80030e2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d109      	bne.n	80030fe <HAL_TIM_OC_Start+0x24>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	bf14      	ite	ne
 80030f6:	2301      	movne	r3, #1
 80030f8:	2300      	moveq	r3, #0
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	e022      	b.n	8003144 <HAL_TIM_OC_Start+0x6a>
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	2b04      	cmp	r3, #4
 8003102:	d109      	bne.n	8003118 <HAL_TIM_OC_Start+0x3e>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800310a:	b2db      	uxtb	r3, r3
 800310c:	2b01      	cmp	r3, #1
 800310e:	bf14      	ite	ne
 8003110:	2301      	movne	r3, #1
 8003112:	2300      	moveq	r3, #0
 8003114:	b2db      	uxtb	r3, r3
 8003116:	e015      	b.n	8003144 <HAL_TIM_OC_Start+0x6a>
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	2b08      	cmp	r3, #8
 800311c:	d109      	bne.n	8003132 <HAL_TIM_OC_Start+0x58>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b01      	cmp	r3, #1
 8003128:	bf14      	ite	ne
 800312a:	2301      	movne	r3, #1
 800312c:	2300      	moveq	r3, #0
 800312e:	b2db      	uxtb	r3, r3
 8003130:	e008      	b.n	8003144 <HAL_TIM_OC_Start+0x6a>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003138:	b2db      	uxtb	r3, r3
 800313a:	2b01      	cmp	r3, #1
 800313c:	bf14      	ite	ne
 800313e:	2301      	movne	r3, #1
 8003140:	2300      	moveq	r3, #0
 8003142:	b2db      	uxtb	r3, r3
 8003144:	2b00      	cmp	r3, #0
 8003146:	d001      	beq.n	800314c <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e05e      	b.n	800320a <HAL_TIM_OC_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d104      	bne.n	800315c <HAL_TIM_OC_Start+0x82>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2202      	movs	r2, #2
 8003156:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800315a:	e013      	b.n	8003184 <HAL_TIM_OC_Start+0xaa>
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	2b04      	cmp	r3, #4
 8003160:	d104      	bne.n	800316c <HAL_TIM_OC_Start+0x92>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2202      	movs	r2, #2
 8003166:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800316a:	e00b      	b.n	8003184 <HAL_TIM_OC_Start+0xaa>
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	2b08      	cmp	r3, #8
 8003170:	d104      	bne.n	800317c <HAL_TIM_OC_Start+0xa2>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2202      	movs	r2, #2
 8003176:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800317a:	e003      	b.n	8003184 <HAL_TIM_OC_Start+0xaa>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2202      	movs	r2, #2
 8003180:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2201      	movs	r2, #1
 800318a:	6839      	ldr	r1, [r7, #0]
 800318c:	4618      	mov	r0, r3
 800318e:	f005 f8f6 	bl	800837e <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a1f      	ldr	r2, [pc, #124]	; (8003214 <HAL_TIM_OC_Start+0x13a>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d107      	bne.n	80031ac <HAL_TIM_OC_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031aa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a18      	ldr	r2, [pc, #96]	; (8003214 <HAL_TIM_OC_Start+0x13a>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d00e      	beq.n	80031d4 <HAL_TIM_OC_Start+0xfa>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031be:	d009      	beq.n	80031d4 <HAL_TIM_OC_Start+0xfa>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a14      	ldr	r2, [pc, #80]	; (8003218 <HAL_TIM_OC_Start+0x13e>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d004      	beq.n	80031d4 <HAL_TIM_OC_Start+0xfa>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a13      	ldr	r2, [pc, #76]	; (800321c <HAL_TIM_OC_Start+0x142>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d111      	bne.n	80031f8 <HAL_TIM_OC_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	f003 0307 	and.w	r3, r3, #7
 80031de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2b06      	cmp	r3, #6
 80031e4:	d010      	beq.n	8003208 <HAL_TIM_OC_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f042 0201 	orr.w	r2, r2, #1
 80031f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031f6:	e007      	b.n	8003208 <HAL_TIM_OC_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f042 0201 	orr.w	r2, r2, #1
 8003206:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3710      	adds	r7, #16
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	40012c00 	.word	0x40012c00
 8003218:	40000400 	.word	0x40000400
 800321c:	40000800 	.word	0x40000800

08003220 <HAL_TIM_OC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	2200      	movs	r2, #0
 8003230:	6839      	ldr	r1, [r7, #0]
 8003232:	4618      	mov	r0, r3
 8003234:	f005 f8a3 	bl	800837e <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a29      	ldr	r2, [pc, #164]	; (80032e4 <HAL_TIM_OC_Stop+0xc4>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d117      	bne.n	8003272 <HAL_TIM_OC_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	6a1a      	ldr	r2, [r3, #32]
 8003248:	f241 1311 	movw	r3, #4369	; 0x1111
 800324c:	4013      	ands	r3, r2
 800324e:	2b00      	cmp	r3, #0
 8003250:	d10f      	bne.n	8003272 <HAL_TIM_OC_Stop+0x52>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	6a1a      	ldr	r2, [r3, #32]
 8003258:	f240 4344 	movw	r3, #1092	; 0x444
 800325c:	4013      	ands	r3, r2
 800325e:	2b00      	cmp	r3, #0
 8003260:	d107      	bne.n	8003272 <HAL_TIM_OC_Stop+0x52>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003270:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	6a1a      	ldr	r2, [r3, #32]
 8003278:	f241 1311 	movw	r3, #4369	; 0x1111
 800327c:	4013      	ands	r3, r2
 800327e:	2b00      	cmp	r3, #0
 8003280:	d10f      	bne.n	80032a2 <HAL_TIM_OC_Stop+0x82>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	6a1a      	ldr	r2, [r3, #32]
 8003288:	f240 4344 	movw	r3, #1092	; 0x444
 800328c:	4013      	ands	r3, r2
 800328e:	2b00      	cmp	r3, #0
 8003290:	d107      	bne.n	80032a2 <HAL_TIM_OC_Stop+0x82>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f022 0201 	bic.w	r2, r2, #1
 80032a0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d104      	bne.n	80032b2 <HAL_TIM_OC_Stop+0x92>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2201      	movs	r2, #1
 80032ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032b0:	e013      	b.n	80032da <HAL_TIM_OC_Stop+0xba>
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	2b04      	cmp	r3, #4
 80032b6:	d104      	bne.n	80032c2 <HAL_TIM_OC_Stop+0xa2>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032c0:	e00b      	b.n	80032da <HAL_TIM_OC_Stop+0xba>
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	2b08      	cmp	r3, #8
 80032c6:	d104      	bne.n	80032d2 <HAL_TIM_OC_Stop+0xb2>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032d0:	e003      	b.n	80032da <HAL_TIM_OC_Stop+0xba>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2201      	movs	r2, #1
 80032d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80032da:	2300      	movs	r3, #0
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3708      	adds	r7, #8
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	40012c00 	.word	0x40012c00

080032e8 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032f2:	2300      	movs	r3, #0
 80032f4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d109      	bne.n	8003310 <HAL_TIM_OC_Start_IT+0x28>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003302:	b2db      	uxtb	r3, r3
 8003304:	2b01      	cmp	r3, #1
 8003306:	bf14      	ite	ne
 8003308:	2301      	movne	r3, #1
 800330a:	2300      	moveq	r3, #0
 800330c:	b2db      	uxtb	r3, r3
 800330e:	e022      	b.n	8003356 <HAL_TIM_OC_Start_IT+0x6e>
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	2b04      	cmp	r3, #4
 8003314:	d109      	bne.n	800332a <HAL_TIM_OC_Start_IT+0x42>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800331c:	b2db      	uxtb	r3, r3
 800331e:	2b01      	cmp	r3, #1
 8003320:	bf14      	ite	ne
 8003322:	2301      	movne	r3, #1
 8003324:	2300      	moveq	r3, #0
 8003326:	b2db      	uxtb	r3, r3
 8003328:	e015      	b.n	8003356 <HAL_TIM_OC_Start_IT+0x6e>
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	2b08      	cmp	r3, #8
 800332e:	d109      	bne.n	8003344 <HAL_TIM_OC_Start_IT+0x5c>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003336:	b2db      	uxtb	r3, r3
 8003338:	2b01      	cmp	r3, #1
 800333a:	bf14      	ite	ne
 800333c:	2301      	movne	r3, #1
 800333e:	2300      	moveq	r3, #0
 8003340:	b2db      	uxtb	r3, r3
 8003342:	e008      	b.n	8003356 <HAL_TIM_OC_Start_IT+0x6e>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800334a:	b2db      	uxtb	r3, r3
 800334c:	2b01      	cmp	r3, #1
 800334e:	bf14      	ite	ne
 8003350:	2301      	movne	r3, #1
 8003352:	2300      	moveq	r3, #0
 8003354:	b2db      	uxtb	r3, r3
 8003356:	2b00      	cmp	r3, #0
 8003358:	d001      	beq.n	800335e <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e0a9      	b.n	80034b2 <HAL_TIM_OC_Start_IT+0x1ca>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d104      	bne.n	800336e <HAL_TIM_OC_Start_IT+0x86>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2202      	movs	r2, #2
 8003368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800336c:	e013      	b.n	8003396 <HAL_TIM_OC_Start_IT+0xae>
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	2b04      	cmp	r3, #4
 8003372:	d104      	bne.n	800337e <HAL_TIM_OC_Start_IT+0x96>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2202      	movs	r2, #2
 8003378:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800337c:	e00b      	b.n	8003396 <HAL_TIM_OC_Start_IT+0xae>
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	2b08      	cmp	r3, #8
 8003382:	d104      	bne.n	800338e <HAL_TIM_OC_Start_IT+0xa6>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2202      	movs	r2, #2
 8003388:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800338c:	e003      	b.n	8003396 <HAL_TIM_OC_Start_IT+0xae>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2202      	movs	r2, #2
 8003392:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	2b0c      	cmp	r3, #12
 800339a:	d841      	bhi.n	8003420 <HAL_TIM_OC_Start_IT+0x138>
 800339c:	a201      	add	r2, pc, #4	; (adr r2, 80033a4 <HAL_TIM_OC_Start_IT+0xbc>)
 800339e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033a2:	bf00      	nop
 80033a4:	080033d9 	.word	0x080033d9
 80033a8:	08003421 	.word	0x08003421
 80033ac:	08003421 	.word	0x08003421
 80033b0:	08003421 	.word	0x08003421
 80033b4:	080033eb 	.word	0x080033eb
 80033b8:	08003421 	.word	0x08003421
 80033bc:	08003421 	.word	0x08003421
 80033c0:	08003421 	.word	0x08003421
 80033c4:	080033fd 	.word	0x080033fd
 80033c8:	08003421 	.word	0x08003421
 80033cc:	08003421 	.word	0x08003421
 80033d0:	08003421 	.word	0x08003421
 80033d4:	0800340f 	.word	0x0800340f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	68da      	ldr	r2, [r3, #12]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f042 0202 	orr.w	r2, r2, #2
 80033e6:	60da      	str	r2, [r3, #12]
      break;
 80033e8:	e01d      	b.n	8003426 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	68da      	ldr	r2, [r3, #12]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f042 0204 	orr.w	r2, r2, #4
 80033f8:	60da      	str	r2, [r3, #12]
      break;
 80033fa:	e014      	b.n	8003426 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	68da      	ldr	r2, [r3, #12]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f042 0208 	orr.w	r2, r2, #8
 800340a:	60da      	str	r2, [r3, #12]
      break;
 800340c:	e00b      	b.n	8003426 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	68da      	ldr	r2, [r3, #12]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f042 0210 	orr.w	r2, r2, #16
 800341c:	60da      	str	r2, [r3, #12]
      break;
 800341e:	e002      	b.n	8003426 <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	73fb      	strb	r3, [r7, #15]
      break;
 8003424:	bf00      	nop
  }

  if (status == HAL_OK)
 8003426:	7bfb      	ldrb	r3, [r7, #15]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d141      	bne.n	80034b0 <HAL_TIM_OC_Start_IT+0x1c8>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	2201      	movs	r2, #1
 8003432:	6839      	ldr	r1, [r7, #0]
 8003434:	4618      	mov	r0, r3
 8003436:	f004 ffa2 	bl	800837e <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a1f      	ldr	r2, [pc, #124]	; (80034bc <HAL_TIM_OC_Start_IT+0x1d4>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d107      	bne.n	8003454 <HAL_TIM_OC_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003452:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a18      	ldr	r2, [pc, #96]	; (80034bc <HAL_TIM_OC_Start_IT+0x1d4>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d00e      	beq.n	800347c <HAL_TIM_OC_Start_IT+0x194>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003466:	d009      	beq.n	800347c <HAL_TIM_OC_Start_IT+0x194>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a14      	ldr	r2, [pc, #80]	; (80034c0 <HAL_TIM_OC_Start_IT+0x1d8>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d004      	beq.n	800347c <HAL_TIM_OC_Start_IT+0x194>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a13      	ldr	r2, [pc, #76]	; (80034c4 <HAL_TIM_OC_Start_IT+0x1dc>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d111      	bne.n	80034a0 <HAL_TIM_OC_Start_IT+0x1b8>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	f003 0307 	and.w	r3, r3, #7
 8003486:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	2b06      	cmp	r3, #6
 800348c:	d010      	beq.n	80034b0 <HAL_TIM_OC_Start_IT+0x1c8>
      {
        __HAL_TIM_ENABLE(htim);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f042 0201 	orr.w	r2, r2, #1
 800349c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800349e:	e007      	b.n	80034b0 <HAL_TIM_OC_Start_IT+0x1c8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f042 0201 	orr.w	r2, r2, #1
 80034ae:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80034b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3710      	adds	r7, #16
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	40012c00 	.word	0x40012c00
 80034c0:	40000400 	.word	0x40000400
 80034c4:	40000800 	.word	0x40000800

080034c8 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b084      	sub	sp, #16
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034d2:	2300      	movs	r3, #0
 80034d4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	2b0c      	cmp	r3, #12
 80034da:	d841      	bhi.n	8003560 <HAL_TIM_OC_Stop_IT+0x98>
 80034dc:	a201      	add	r2, pc, #4	; (adr r2, 80034e4 <HAL_TIM_OC_Stop_IT+0x1c>)
 80034de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034e2:	bf00      	nop
 80034e4:	08003519 	.word	0x08003519
 80034e8:	08003561 	.word	0x08003561
 80034ec:	08003561 	.word	0x08003561
 80034f0:	08003561 	.word	0x08003561
 80034f4:	0800352b 	.word	0x0800352b
 80034f8:	08003561 	.word	0x08003561
 80034fc:	08003561 	.word	0x08003561
 8003500:	08003561 	.word	0x08003561
 8003504:	0800353d 	.word	0x0800353d
 8003508:	08003561 	.word	0x08003561
 800350c:	08003561 	.word	0x08003561
 8003510:	08003561 	.word	0x08003561
 8003514:	0800354f 	.word	0x0800354f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	68da      	ldr	r2, [r3, #12]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f022 0202 	bic.w	r2, r2, #2
 8003526:	60da      	str	r2, [r3, #12]
      break;
 8003528:	e01d      	b.n	8003566 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	68da      	ldr	r2, [r3, #12]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f022 0204 	bic.w	r2, r2, #4
 8003538:	60da      	str	r2, [r3, #12]
      break;
 800353a:	e014      	b.n	8003566 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	68da      	ldr	r2, [r3, #12]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f022 0208 	bic.w	r2, r2, #8
 800354a:	60da      	str	r2, [r3, #12]
      break;
 800354c:	e00b      	b.n	8003566 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	68da      	ldr	r2, [r3, #12]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f022 0210 	bic.w	r2, r2, #16
 800355c:	60da      	str	r2, [r3, #12]
      break;
 800355e:	e002      	b.n	8003566 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	73fb      	strb	r3, [r7, #15]
      break;
 8003564:	bf00      	nop
  }

  if (status == HAL_OK)
 8003566:	7bfb      	ldrb	r3, [r7, #15]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d157      	bne.n	800361c <HAL_TIM_OC_Stop_IT+0x154>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	2200      	movs	r2, #0
 8003572:	6839      	ldr	r1, [r7, #0]
 8003574:	4618      	mov	r0, r3
 8003576:	f004 ff02 	bl	800837e <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a2a      	ldr	r2, [pc, #168]	; (8003628 <HAL_TIM_OC_Stop_IT+0x160>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d117      	bne.n	80035b4 <HAL_TIM_OC_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	6a1a      	ldr	r2, [r3, #32]
 800358a:	f241 1311 	movw	r3, #4369	; 0x1111
 800358e:	4013      	ands	r3, r2
 8003590:	2b00      	cmp	r3, #0
 8003592:	d10f      	bne.n	80035b4 <HAL_TIM_OC_Stop_IT+0xec>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	6a1a      	ldr	r2, [r3, #32]
 800359a:	f240 4344 	movw	r3, #1092	; 0x444
 800359e:	4013      	ands	r3, r2
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d107      	bne.n	80035b4 <HAL_TIM_OC_Stop_IT+0xec>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035b2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	6a1a      	ldr	r2, [r3, #32]
 80035ba:	f241 1311 	movw	r3, #4369	; 0x1111
 80035be:	4013      	ands	r3, r2
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d10f      	bne.n	80035e4 <HAL_TIM_OC_Stop_IT+0x11c>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	6a1a      	ldr	r2, [r3, #32]
 80035ca:	f240 4344 	movw	r3, #1092	; 0x444
 80035ce:	4013      	ands	r3, r2
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d107      	bne.n	80035e4 <HAL_TIM_OC_Stop_IT+0x11c>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f022 0201 	bic.w	r2, r2, #1
 80035e2:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d104      	bne.n	80035f4 <HAL_TIM_OC_Stop_IT+0x12c>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2201      	movs	r2, #1
 80035ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035f2:	e013      	b.n	800361c <HAL_TIM_OC_Stop_IT+0x154>
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	2b04      	cmp	r3, #4
 80035f8:	d104      	bne.n	8003604 <HAL_TIM_OC_Stop_IT+0x13c>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2201      	movs	r2, #1
 80035fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003602:	e00b      	b.n	800361c <HAL_TIM_OC_Stop_IT+0x154>
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	2b08      	cmp	r3, #8
 8003608:	d104      	bne.n	8003614 <HAL_TIM_OC_Stop_IT+0x14c>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2201      	movs	r2, #1
 800360e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003612:	e003      	b.n	800361c <HAL_TIM_OC_Stop_IT+0x154>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 800361c:	7bfb      	ldrb	r3, [r7, #15]
}
 800361e:	4618      	mov	r0, r3
 8003620:	3710      	adds	r7, #16
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	40012c00 	.word	0x40012c00

0800362c <HAL_TIM_OC_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                       uint16_t Length)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b086      	sub	sp, #24
 8003630:	af00      	add	r7, sp, #0
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	60b9      	str	r1, [r7, #8]
 8003636:	607a      	str	r2, [r7, #4]
 8003638:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800363a:	2300      	movs	r3, #0
 800363c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d109      	bne.n	8003658 <HAL_TIM_OC_Start_DMA+0x2c>
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800364a:	b2db      	uxtb	r3, r3
 800364c:	2b02      	cmp	r3, #2
 800364e:	bf0c      	ite	eq
 8003650:	2301      	moveq	r3, #1
 8003652:	2300      	movne	r3, #0
 8003654:	b2db      	uxtb	r3, r3
 8003656:	e022      	b.n	800369e <HAL_TIM_OC_Start_DMA+0x72>
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	2b04      	cmp	r3, #4
 800365c:	d109      	bne.n	8003672 <HAL_TIM_OC_Start_DMA+0x46>
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003664:	b2db      	uxtb	r3, r3
 8003666:	2b02      	cmp	r3, #2
 8003668:	bf0c      	ite	eq
 800366a:	2301      	moveq	r3, #1
 800366c:	2300      	movne	r3, #0
 800366e:	b2db      	uxtb	r3, r3
 8003670:	e015      	b.n	800369e <HAL_TIM_OC_Start_DMA+0x72>
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	2b08      	cmp	r3, #8
 8003676:	d109      	bne.n	800368c <HAL_TIM_OC_Start_DMA+0x60>
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800367e:	b2db      	uxtb	r3, r3
 8003680:	2b02      	cmp	r3, #2
 8003682:	bf0c      	ite	eq
 8003684:	2301      	moveq	r3, #1
 8003686:	2300      	movne	r3, #0
 8003688:	b2db      	uxtb	r3, r3
 800368a:	e008      	b.n	800369e <HAL_TIM_OC_Start_DMA+0x72>
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003692:	b2db      	uxtb	r3, r3
 8003694:	2b02      	cmp	r3, #2
 8003696:	bf0c      	ite	eq
 8003698:	2301      	moveq	r3, #1
 800369a:	2300      	movne	r3, #0
 800369c:	b2db      	uxtb	r3, r3
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d001      	beq.n	80036a6 <HAL_TIM_OC_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 80036a2:	2302      	movs	r3, #2
 80036a4:	e153      	b.n	800394e <HAL_TIM_OC_Start_DMA+0x322>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d109      	bne.n	80036c0 <HAL_TIM_OC_Start_DMA+0x94>
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	bf0c      	ite	eq
 80036b8:	2301      	moveq	r3, #1
 80036ba:	2300      	movne	r3, #0
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	e022      	b.n	8003706 <HAL_TIM_OC_Start_DMA+0xda>
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	2b04      	cmp	r3, #4
 80036c4:	d109      	bne.n	80036da <HAL_TIM_OC_Start_DMA+0xae>
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	bf0c      	ite	eq
 80036d2:	2301      	moveq	r3, #1
 80036d4:	2300      	movne	r3, #0
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	e015      	b.n	8003706 <HAL_TIM_OC_Start_DMA+0xda>
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	2b08      	cmp	r3, #8
 80036de:	d109      	bne.n	80036f4 <HAL_TIM_OC_Start_DMA+0xc8>
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	bf0c      	ite	eq
 80036ec:	2301      	moveq	r3, #1
 80036ee:	2300      	movne	r3, #0
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	e008      	b.n	8003706 <HAL_TIM_OC_Start_DMA+0xda>
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	bf0c      	ite	eq
 8003700:	2301      	moveq	r3, #1
 8003702:	2300      	movne	r3, #0
 8003704:	b2db      	uxtb	r3, r3
 8003706:	2b00      	cmp	r3, #0
 8003708:	d024      	beq.n	8003754 <HAL_TIM_OC_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d002      	beq.n	8003716 <HAL_TIM_OC_Start_DMA+0xea>
 8003710:	887b      	ldrh	r3, [r7, #2]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d101      	bne.n	800371a <HAL_TIM_OC_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e119      	b.n	800394e <HAL_TIM_OC_Start_DMA+0x322>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d104      	bne.n	800372a <HAL_TIM_OC_Start_DMA+0xfe>
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2202      	movs	r2, #2
 8003724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003728:	e016      	b.n	8003758 <HAL_TIM_OC_Start_DMA+0x12c>
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	2b04      	cmp	r3, #4
 800372e:	d104      	bne.n	800373a <HAL_TIM_OC_Start_DMA+0x10e>
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2202      	movs	r2, #2
 8003734:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003738:	e00e      	b.n	8003758 <HAL_TIM_OC_Start_DMA+0x12c>
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	2b08      	cmp	r3, #8
 800373e:	d104      	bne.n	800374a <HAL_TIM_OC_Start_DMA+0x11e>
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2202      	movs	r2, #2
 8003744:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003748:	e006      	b.n	8003758 <HAL_TIM_OC_Start_DMA+0x12c>
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2202      	movs	r2, #2
 800374e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003752:	e001      	b.n	8003758 <HAL_TIM_OC_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e0fa      	b.n	800394e <HAL_TIM_OC_Start_DMA+0x322>
  }

  switch (Channel)
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	2b0c      	cmp	r3, #12
 800375c:	f200 80ae 	bhi.w	80038bc <HAL_TIM_OC_Start_DMA+0x290>
 8003760:	a201      	add	r2, pc, #4	; (adr r2, 8003768 <HAL_TIM_OC_Start_DMA+0x13c>)
 8003762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003766:	bf00      	nop
 8003768:	0800379d 	.word	0x0800379d
 800376c:	080038bd 	.word	0x080038bd
 8003770:	080038bd 	.word	0x080038bd
 8003774:	080038bd 	.word	0x080038bd
 8003778:	080037e5 	.word	0x080037e5
 800377c:	080038bd 	.word	0x080038bd
 8003780:	080038bd 	.word	0x080038bd
 8003784:	080038bd 	.word	0x080038bd
 8003788:	0800382d 	.word	0x0800382d
 800378c:	080038bd 	.word	0x080038bd
 8003790:	080038bd 	.word	0x080038bd
 8003794:	080038bd 	.word	0x080038bd
 8003798:	08003875 	.word	0x08003875
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a0:	4a6d      	ldr	r2, [pc, #436]	; (8003958 <HAL_TIM_OC_Start_DMA+0x32c>)
 80037a2:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a8:	4a6c      	ldr	r2, [pc, #432]	; (800395c <HAL_TIM_OC_Start_DMA+0x330>)
 80037aa:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b0:	4a6b      	ldr	r2, [pc, #428]	; (8003960 <HAL_TIM_OC_Start_DMA+0x334>)
 80037b2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80037b8:	6879      	ldr	r1, [r7, #4]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	3334      	adds	r3, #52	; 0x34
 80037c0:	461a      	mov	r2, r3
 80037c2:	887b      	ldrh	r3, [r7, #2]
 80037c4:	f7fd fc51 	bl	800106a <HAL_DMA_Start_IT>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d001      	beq.n	80037d2 <HAL_TIM_OC_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e0bd      	b.n	800394e <HAL_TIM_OC_Start_DMA+0x322>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	68da      	ldr	r2, [r3, #12]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037e0:	60da      	str	r2, [r3, #12]
      break;
 80037e2:	e06e      	b.n	80038c2 <HAL_TIM_OC_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e8:	4a5b      	ldr	r2, [pc, #364]	; (8003958 <HAL_TIM_OC_Start_DMA+0x32c>)
 80037ea:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f0:	4a5a      	ldr	r2, [pc, #360]	; (800395c <HAL_TIM_OC_Start_DMA+0x330>)
 80037f2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f8:	4a59      	ldr	r2, [pc, #356]	; (8003960 <HAL_TIM_OC_Start_DMA+0x334>)
 80037fa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003800:	6879      	ldr	r1, [r7, #4]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	3338      	adds	r3, #56	; 0x38
 8003808:	461a      	mov	r2, r3
 800380a:	887b      	ldrh	r3, [r7, #2]
 800380c:	f7fd fc2d 	bl	800106a <HAL_DMA_Start_IT>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d001      	beq.n	800381a <HAL_TIM_OC_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e099      	b.n	800394e <HAL_TIM_OC_Start_DMA+0x322>
      }

      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	68da      	ldr	r2, [r3, #12]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003828:	60da      	str	r2, [r3, #12]
      break;
 800382a:	e04a      	b.n	80038c2 <HAL_TIM_OC_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003830:	4a49      	ldr	r2, [pc, #292]	; (8003958 <HAL_TIM_OC_Start_DMA+0x32c>)
 8003832:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003838:	4a48      	ldr	r2, [pc, #288]	; (800395c <HAL_TIM_OC_Start_DMA+0x330>)
 800383a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003840:	4a47      	ldr	r2, [pc, #284]	; (8003960 <HAL_TIM_OC_Start_DMA+0x334>)
 8003842:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003848:	6879      	ldr	r1, [r7, #4]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	333c      	adds	r3, #60	; 0x3c
 8003850:	461a      	mov	r2, r3
 8003852:	887b      	ldrh	r3, [r7, #2]
 8003854:	f7fd fc09 	bl	800106a <HAL_DMA_Start_IT>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d001      	beq.n	8003862 <HAL_TIM_OC_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e075      	b.n	800394e <HAL_TIM_OC_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	68da      	ldr	r2, [r3, #12]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003870:	60da      	str	r2, [r3, #12]
      break;
 8003872:	e026      	b.n	80038c2 <HAL_TIM_OC_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003878:	4a37      	ldr	r2, [pc, #220]	; (8003958 <HAL_TIM_OC_Start_DMA+0x32c>)
 800387a:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003880:	4a36      	ldr	r2, [pc, #216]	; (800395c <HAL_TIM_OC_Start_DMA+0x330>)
 8003882:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003888:	4a35      	ldr	r2, [pc, #212]	; (8003960 <HAL_TIM_OC_Start_DMA+0x334>)
 800388a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003890:	6879      	ldr	r1, [r7, #4]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	3340      	adds	r3, #64	; 0x40
 8003898:	461a      	mov	r2, r3
 800389a:	887b      	ldrh	r3, [r7, #2]
 800389c:	f7fd fbe5 	bl	800106a <HAL_DMA_Start_IT>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d001      	beq.n	80038aa <HAL_TIM_OC_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e051      	b.n	800394e <HAL_TIM_OC_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	68da      	ldr	r2, [r3, #12]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80038b8:	60da      	str	r2, [r3, #12]
      break;
 80038ba:	e002      	b.n	80038c2 <HAL_TIM_OC_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	75fb      	strb	r3, [r7, #23]
      break;
 80038c0:	bf00      	nop
  }

  if (status == HAL_OK)
 80038c2:	7dfb      	ldrb	r3, [r7, #23]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d141      	bne.n	800394c <HAL_TIM_OC_Start_DMA+0x320>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2201      	movs	r2, #1
 80038ce:	68b9      	ldr	r1, [r7, #8]
 80038d0:	4618      	mov	r0, r3
 80038d2:	f004 fd54 	bl	800837e <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a22      	ldr	r2, [pc, #136]	; (8003964 <HAL_TIM_OC_Start_DMA+0x338>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d107      	bne.n	80038f0 <HAL_TIM_OC_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80038ee:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a1b      	ldr	r2, [pc, #108]	; (8003964 <HAL_TIM_OC_Start_DMA+0x338>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d00e      	beq.n	8003918 <HAL_TIM_OC_Start_DMA+0x2ec>
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003902:	d009      	beq.n	8003918 <HAL_TIM_OC_Start_DMA+0x2ec>
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a17      	ldr	r2, [pc, #92]	; (8003968 <HAL_TIM_OC_Start_DMA+0x33c>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d004      	beq.n	8003918 <HAL_TIM_OC_Start_DMA+0x2ec>
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a16      	ldr	r2, [pc, #88]	; (800396c <HAL_TIM_OC_Start_DMA+0x340>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d111      	bne.n	800393c <HAL_TIM_OC_Start_DMA+0x310>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	f003 0307 	and.w	r3, r3, #7
 8003922:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	2b06      	cmp	r3, #6
 8003928:	d010      	beq.n	800394c <HAL_TIM_OC_Start_DMA+0x320>
      {
        __HAL_TIM_ENABLE(htim);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f042 0201 	orr.w	r2, r2, #1
 8003938:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800393a:	e007      	b.n	800394c <HAL_TIM_OC_Start_DMA+0x320>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f042 0201 	orr.w	r2, r2, #1
 800394a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800394c:	7dfb      	ldrb	r3, [r7, #23]
}
 800394e:	4618      	mov	r0, r3
 8003950:	3718      	adds	r7, #24
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	0800786d 	.word	0x0800786d
 800395c:	08007915 	.word	0x08007915
 8003960:	080077db 	.word	0x080077db
 8003964:	40012c00 	.word	0x40012c00
 8003968:	40000400 	.word	0x40000400
 800396c:	40000800 	.word	0x40000800

08003970 <HAL_TIM_OC_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800397a:	2300      	movs	r3, #0
 800397c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	2b0c      	cmp	r3, #12
 8003982:	d855      	bhi.n	8003a30 <HAL_TIM_OC_Stop_DMA+0xc0>
 8003984:	a201      	add	r2, pc, #4	; (adr r2, 800398c <HAL_TIM_OC_Stop_DMA+0x1c>)
 8003986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800398a:	bf00      	nop
 800398c:	080039c1 	.word	0x080039c1
 8003990:	08003a31 	.word	0x08003a31
 8003994:	08003a31 	.word	0x08003a31
 8003998:	08003a31 	.word	0x08003a31
 800399c:	080039dd 	.word	0x080039dd
 80039a0:	08003a31 	.word	0x08003a31
 80039a4:	08003a31 	.word	0x08003a31
 80039a8:	08003a31 	.word	0x08003a31
 80039ac:	080039f9 	.word	0x080039f9
 80039b0:	08003a31 	.word	0x08003a31
 80039b4:	08003a31 	.word	0x08003a31
 80039b8:	08003a31 	.word	0x08003a31
 80039bc:	08003a15 	.word	0x08003a15
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	68da      	ldr	r2, [r3, #12]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80039ce:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d4:	4618      	mov	r0, r3
 80039d6:	f7fd fbe3 	bl	80011a0 <HAL_DMA_Abort_IT>
      break;
 80039da:	e02c      	b.n	8003a36 <HAL_TIM_OC_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	68da      	ldr	r2, [r3, #12]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039ea:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f0:	4618      	mov	r0, r3
 80039f2:	f7fd fbd5 	bl	80011a0 <HAL_DMA_Abort_IT>
      break;
 80039f6:	e01e      	b.n	8003a36 <HAL_TIM_OC_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	68da      	ldr	r2, [r3, #12]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a06:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f7fd fbc7 	bl	80011a0 <HAL_DMA_Abort_IT>
      break;
 8003a12:	e010      	b.n	8003a36 <HAL_TIM_OC_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	68da      	ldr	r2, [r3, #12]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003a22:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f7fd fbb9 	bl	80011a0 <HAL_DMA_Abort_IT>
      break;
 8003a2e:	e002      	b.n	8003a36 <HAL_TIM_OC_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	73fb      	strb	r3, [r7, #15]
      break;
 8003a34:	bf00      	nop
  }

  if (status == HAL_OK)
 8003a36:	7bfb      	ldrb	r3, [r7, #15]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d157      	bne.n	8003aec <HAL_TIM_OC_Stop_DMA+0x17c>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2200      	movs	r2, #0
 8003a42:	6839      	ldr	r1, [r7, #0]
 8003a44:	4618      	mov	r0, r3
 8003a46:	f004 fc9a 	bl	800837e <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a2a      	ldr	r2, [pc, #168]	; (8003af8 <HAL_TIM_OC_Stop_DMA+0x188>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d117      	bne.n	8003a84 <HAL_TIM_OC_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	6a1a      	ldr	r2, [r3, #32]
 8003a5a:	f241 1311 	movw	r3, #4369	; 0x1111
 8003a5e:	4013      	ands	r3, r2
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d10f      	bne.n	8003a84 <HAL_TIM_OC_Stop_DMA+0x114>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	6a1a      	ldr	r2, [r3, #32]
 8003a6a:	f240 4344 	movw	r3, #1092	; 0x444
 8003a6e:	4013      	ands	r3, r2
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d107      	bne.n	8003a84 <HAL_TIM_OC_Stop_DMA+0x114>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a82:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	6a1a      	ldr	r2, [r3, #32]
 8003a8a:	f241 1311 	movw	r3, #4369	; 0x1111
 8003a8e:	4013      	ands	r3, r2
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d10f      	bne.n	8003ab4 <HAL_TIM_OC_Stop_DMA+0x144>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	6a1a      	ldr	r2, [r3, #32]
 8003a9a:	f240 4344 	movw	r3, #1092	; 0x444
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d107      	bne.n	8003ab4 <HAL_TIM_OC_Stop_DMA+0x144>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f022 0201 	bic.w	r2, r2, #1
 8003ab2:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d104      	bne.n	8003ac4 <HAL_TIM_OC_Stop_DMA+0x154>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2201      	movs	r2, #1
 8003abe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ac2:	e013      	b.n	8003aec <HAL_TIM_OC_Stop_DMA+0x17c>
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	2b04      	cmp	r3, #4
 8003ac8:	d104      	bne.n	8003ad4 <HAL_TIM_OC_Stop_DMA+0x164>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2201      	movs	r2, #1
 8003ace:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ad2:	e00b      	b.n	8003aec <HAL_TIM_OC_Stop_DMA+0x17c>
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	2b08      	cmp	r3, #8
 8003ad8:	d104      	bne.n	8003ae4 <HAL_TIM_OC_Stop_DMA+0x174>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2201      	movs	r2, #1
 8003ade:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ae2:	e003      	b.n	8003aec <HAL_TIM_OC_Stop_DMA+0x17c>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8003aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3710      	adds	r7, #16
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	40012c00 	.word	0x40012c00

08003afc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d101      	bne.n	8003b0e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e041      	b.n	8003b92 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d106      	bne.n	8003b28 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f000 f88d 	bl	8003c42 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2202      	movs	r2, #2
 8003b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	3304      	adds	r3, #4
 8003b38:	4619      	mov	r1, r3
 8003b3a:	4610      	mov	r0, r2
 8003b3c:	f004 f800 	bl	8007b40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b90:	2300      	movs	r3, #0
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3708      	adds	r7, #8
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}

08003b9a <HAL_TIM_PWM_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_DeInit(TIM_HandleTypeDef *htim)
{
 8003b9a:	b580      	push	{r7, lr}
 8003b9c:	b082      	sub	sp, #8
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2202      	movs	r2, #2
 8003ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	6a1a      	ldr	r2, [r3, #32]
 8003bb0:	f241 1311 	movw	r3, #4369	; 0x1111
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d10f      	bne.n	8003bda <HAL_TIM_PWM_DeInit+0x40>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	6a1a      	ldr	r2, [r3, #32]
 8003bc0:	f240 4344 	movw	r3, #1092	; 0x444
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d107      	bne.n	8003bda <HAL_TIM_PWM_DeInit+0x40>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f022 0201 	bic.w	r2, r2, #1
 8003bd8:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->PWM_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_PWM_MspDeInit(htim);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f000 f83a 	bl	8003c54 <HAL_TIM_PWM_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2200      	movs	r2, #0
 8003bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3708      	adds	r7, #8
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}

08003c42 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003c42:	b480      	push	{r7}
 8003c44:	b083      	sub	sp, #12
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003c4a:	bf00      	nop
 8003c4c:	370c      	adds	r7, #12
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bc80      	pop	{r7}
 8003c52:	4770      	bx	lr

08003c54 <HAL_TIM_PWM_MspDeInit>:
  * @brief  DeInitializes TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef *htim)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspDeInit could be implemented in the user file
   */
}
 8003c5c:	bf00      	nop
 8003c5e:	370c      	adds	r7, #12
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bc80      	pop	{r7}
 8003c64:	4770      	bx	lr

08003c66 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c66:	b580      	push	{r7, lr}
 8003c68:	b084      	sub	sp, #16
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
 8003c6e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d109      	bne.n	8003c8a <HAL_TIM_PWM_Start+0x24>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	bf14      	ite	ne
 8003c82:	2301      	movne	r3, #1
 8003c84:	2300      	moveq	r3, #0
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	e022      	b.n	8003cd0 <HAL_TIM_PWM_Start+0x6a>
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	2b04      	cmp	r3, #4
 8003c8e:	d109      	bne.n	8003ca4 <HAL_TIM_PWM_Start+0x3e>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	bf14      	ite	ne
 8003c9c:	2301      	movne	r3, #1
 8003c9e:	2300      	moveq	r3, #0
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	e015      	b.n	8003cd0 <HAL_TIM_PWM_Start+0x6a>
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	2b08      	cmp	r3, #8
 8003ca8:	d109      	bne.n	8003cbe <HAL_TIM_PWM_Start+0x58>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	bf14      	ite	ne
 8003cb6:	2301      	movne	r3, #1
 8003cb8:	2300      	moveq	r3, #0
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	e008      	b.n	8003cd0 <HAL_TIM_PWM_Start+0x6a>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	bf14      	ite	ne
 8003cca:	2301      	movne	r3, #1
 8003ccc:	2300      	moveq	r3, #0
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d001      	beq.n	8003cd8 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e05e      	b.n	8003d96 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d104      	bne.n	8003ce8 <HAL_TIM_PWM_Start+0x82>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2202      	movs	r2, #2
 8003ce2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ce6:	e013      	b.n	8003d10 <HAL_TIM_PWM_Start+0xaa>
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	2b04      	cmp	r3, #4
 8003cec:	d104      	bne.n	8003cf8 <HAL_TIM_PWM_Start+0x92>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2202      	movs	r2, #2
 8003cf2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cf6:	e00b      	b.n	8003d10 <HAL_TIM_PWM_Start+0xaa>
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	2b08      	cmp	r3, #8
 8003cfc:	d104      	bne.n	8003d08 <HAL_TIM_PWM_Start+0xa2>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2202      	movs	r2, #2
 8003d02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d06:	e003      	b.n	8003d10 <HAL_TIM_PWM_Start+0xaa>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2202      	movs	r2, #2
 8003d0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2201      	movs	r2, #1
 8003d16:	6839      	ldr	r1, [r7, #0]
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f004 fb30 	bl	800837e <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a1f      	ldr	r2, [pc, #124]	; (8003da0 <HAL_TIM_PWM_Start+0x13a>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d107      	bne.n	8003d38 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d36:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a18      	ldr	r2, [pc, #96]	; (8003da0 <HAL_TIM_PWM_Start+0x13a>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d00e      	beq.n	8003d60 <HAL_TIM_PWM_Start+0xfa>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d4a:	d009      	beq.n	8003d60 <HAL_TIM_PWM_Start+0xfa>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a14      	ldr	r2, [pc, #80]	; (8003da4 <HAL_TIM_PWM_Start+0x13e>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d004      	beq.n	8003d60 <HAL_TIM_PWM_Start+0xfa>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a13      	ldr	r2, [pc, #76]	; (8003da8 <HAL_TIM_PWM_Start+0x142>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d111      	bne.n	8003d84 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	f003 0307 	and.w	r3, r3, #7
 8003d6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2b06      	cmp	r3, #6
 8003d70:	d010      	beq.n	8003d94 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f042 0201 	orr.w	r2, r2, #1
 8003d80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d82:	e007      	b.n	8003d94 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f042 0201 	orr.w	r2, r2, #1
 8003d92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d94:	2300      	movs	r3, #0
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3710      	adds	r7, #16
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	40012c00 	.word	0x40012c00
 8003da4:	40000400 	.word	0x40000400
 8003da8:	40000800 	.word	0x40000800

08003dac <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	6839      	ldr	r1, [r7, #0]
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f004 fadd 	bl	800837e <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a29      	ldr	r2, [pc, #164]	; (8003e70 <HAL_TIM_PWM_Stop+0xc4>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d117      	bne.n	8003dfe <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	6a1a      	ldr	r2, [r3, #32]
 8003dd4:	f241 1311 	movw	r3, #4369	; 0x1111
 8003dd8:	4013      	ands	r3, r2
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d10f      	bne.n	8003dfe <HAL_TIM_PWM_Stop+0x52>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	6a1a      	ldr	r2, [r3, #32]
 8003de4:	f240 4344 	movw	r3, #1092	; 0x444
 8003de8:	4013      	ands	r3, r2
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d107      	bne.n	8003dfe <HAL_TIM_PWM_Stop+0x52>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003dfc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	6a1a      	ldr	r2, [r3, #32]
 8003e04:	f241 1311 	movw	r3, #4369	; 0x1111
 8003e08:	4013      	ands	r3, r2
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d10f      	bne.n	8003e2e <HAL_TIM_PWM_Stop+0x82>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	6a1a      	ldr	r2, [r3, #32]
 8003e14:	f240 4344 	movw	r3, #1092	; 0x444
 8003e18:	4013      	ands	r3, r2
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d107      	bne.n	8003e2e <HAL_TIM_PWM_Stop+0x82>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f022 0201 	bic.w	r2, r2, #1
 8003e2c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d104      	bne.n	8003e3e <HAL_TIM_PWM_Stop+0x92>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e3c:	e013      	b.n	8003e66 <HAL_TIM_PWM_Stop+0xba>
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	2b04      	cmp	r3, #4
 8003e42:	d104      	bne.n	8003e4e <HAL_TIM_PWM_Stop+0xa2>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e4c:	e00b      	b.n	8003e66 <HAL_TIM_PWM_Stop+0xba>
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	2b08      	cmp	r3, #8
 8003e52:	d104      	bne.n	8003e5e <HAL_TIM_PWM_Stop+0xb2>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e5c:	e003      	b.n	8003e66 <HAL_TIM_PWM_Stop+0xba>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2201      	movs	r2, #1
 8003e62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8003e66:	2300      	movs	r3, #0
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3708      	adds	r7, #8
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	40012c00 	.word	0x40012c00

08003e74 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d109      	bne.n	8003e9c <HAL_TIM_PWM_Start_IT+0x28>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	bf14      	ite	ne
 8003e94:	2301      	movne	r3, #1
 8003e96:	2300      	moveq	r3, #0
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	e022      	b.n	8003ee2 <HAL_TIM_PWM_Start_IT+0x6e>
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	2b04      	cmp	r3, #4
 8003ea0:	d109      	bne.n	8003eb6 <HAL_TIM_PWM_Start_IT+0x42>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	bf14      	ite	ne
 8003eae:	2301      	movne	r3, #1
 8003eb0:	2300      	moveq	r3, #0
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	e015      	b.n	8003ee2 <HAL_TIM_PWM_Start_IT+0x6e>
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	2b08      	cmp	r3, #8
 8003eba:	d109      	bne.n	8003ed0 <HAL_TIM_PWM_Start_IT+0x5c>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	bf14      	ite	ne
 8003ec8:	2301      	movne	r3, #1
 8003eca:	2300      	moveq	r3, #0
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	e008      	b.n	8003ee2 <HAL_TIM_PWM_Start_IT+0x6e>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	bf14      	ite	ne
 8003edc:	2301      	movne	r3, #1
 8003ede:	2300      	moveq	r3, #0
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d001      	beq.n	8003eea <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e0a9      	b.n	800403e <HAL_TIM_PWM_Start_IT+0x1ca>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d104      	bne.n	8003efa <HAL_TIM_PWM_Start_IT+0x86>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2202      	movs	r2, #2
 8003ef4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ef8:	e013      	b.n	8003f22 <HAL_TIM_PWM_Start_IT+0xae>
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	2b04      	cmp	r3, #4
 8003efe:	d104      	bne.n	8003f0a <HAL_TIM_PWM_Start_IT+0x96>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2202      	movs	r2, #2
 8003f04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f08:	e00b      	b.n	8003f22 <HAL_TIM_PWM_Start_IT+0xae>
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	2b08      	cmp	r3, #8
 8003f0e:	d104      	bne.n	8003f1a <HAL_TIM_PWM_Start_IT+0xa6>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2202      	movs	r2, #2
 8003f14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f18:	e003      	b.n	8003f22 <HAL_TIM_PWM_Start_IT+0xae>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2202      	movs	r2, #2
 8003f1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	2b0c      	cmp	r3, #12
 8003f26:	d841      	bhi.n	8003fac <HAL_TIM_PWM_Start_IT+0x138>
 8003f28:	a201      	add	r2, pc, #4	; (adr r2, 8003f30 <HAL_TIM_PWM_Start_IT+0xbc>)
 8003f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f2e:	bf00      	nop
 8003f30:	08003f65 	.word	0x08003f65
 8003f34:	08003fad 	.word	0x08003fad
 8003f38:	08003fad 	.word	0x08003fad
 8003f3c:	08003fad 	.word	0x08003fad
 8003f40:	08003f77 	.word	0x08003f77
 8003f44:	08003fad 	.word	0x08003fad
 8003f48:	08003fad 	.word	0x08003fad
 8003f4c:	08003fad 	.word	0x08003fad
 8003f50:	08003f89 	.word	0x08003f89
 8003f54:	08003fad 	.word	0x08003fad
 8003f58:	08003fad 	.word	0x08003fad
 8003f5c:	08003fad 	.word	0x08003fad
 8003f60:	08003f9b 	.word	0x08003f9b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	68da      	ldr	r2, [r3, #12]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f042 0202 	orr.w	r2, r2, #2
 8003f72:	60da      	str	r2, [r3, #12]
      break;
 8003f74:	e01d      	b.n	8003fb2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	68da      	ldr	r2, [r3, #12]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f042 0204 	orr.w	r2, r2, #4
 8003f84:	60da      	str	r2, [r3, #12]
      break;
 8003f86:	e014      	b.n	8003fb2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	68da      	ldr	r2, [r3, #12]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f042 0208 	orr.w	r2, r2, #8
 8003f96:	60da      	str	r2, [r3, #12]
      break;
 8003f98:	e00b      	b.n	8003fb2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	68da      	ldr	r2, [r3, #12]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f042 0210 	orr.w	r2, r2, #16
 8003fa8:	60da      	str	r2, [r3, #12]
      break;
 8003faa:	e002      	b.n	8003fb2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	73fb      	strb	r3, [r7, #15]
      break;
 8003fb0:	bf00      	nop
  }

  if (status == HAL_OK)
 8003fb2:	7bfb      	ldrb	r3, [r7, #15]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d141      	bne.n	800403c <HAL_TIM_PWM_Start_IT+0x1c8>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	6839      	ldr	r1, [r7, #0]
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f004 f9dc 	bl	800837e <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a1f      	ldr	r2, [pc, #124]	; (8004048 <HAL_TIM_PWM_Start_IT+0x1d4>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d107      	bne.n	8003fe0 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003fde:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a18      	ldr	r2, [pc, #96]	; (8004048 <HAL_TIM_PWM_Start_IT+0x1d4>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d00e      	beq.n	8004008 <HAL_TIM_PWM_Start_IT+0x194>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ff2:	d009      	beq.n	8004008 <HAL_TIM_PWM_Start_IT+0x194>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a14      	ldr	r2, [pc, #80]	; (800404c <HAL_TIM_PWM_Start_IT+0x1d8>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d004      	beq.n	8004008 <HAL_TIM_PWM_Start_IT+0x194>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a13      	ldr	r2, [pc, #76]	; (8004050 <HAL_TIM_PWM_Start_IT+0x1dc>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d111      	bne.n	800402c <HAL_TIM_PWM_Start_IT+0x1b8>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	f003 0307 	and.w	r3, r3, #7
 8004012:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	2b06      	cmp	r3, #6
 8004018:	d010      	beq.n	800403c <HAL_TIM_PWM_Start_IT+0x1c8>
      {
        __HAL_TIM_ENABLE(htim);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f042 0201 	orr.w	r2, r2, #1
 8004028:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800402a:	e007      	b.n	800403c <HAL_TIM_PWM_Start_IT+0x1c8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f042 0201 	orr.w	r2, r2, #1
 800403a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800403c:	7bfb      	ldrb	r3, [r7, #15]
}
 800403e:	4618      	mov	r0, r3
 8004040:	3710      	adds	r7, #16
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	40012c00 	.word	0x40012c00
 800404c:	40000400 	.word	0x40000400
 8004050:	40000800 	.word	0x40000800

08004054 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800405e:	2300      	movs	r3, #0
 8004060:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	2b0c      	cmp	r3, #12
 8004066:	d841      	bhi.n	80040ec <HAL_TIM_PWM_Stop_IT+0x98>
 8004068:	a201      	add	r2, pc, #4	; (adr r2, 8004070 <HAL_TIM_PWM_Stop_IT+0x1c>)
 800406a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800406e:	bf00      	nop
 8004070:	080040a5 	.word	0x080040a5
 8004074:	080040ed 	.word	0x080040ed
 8004078:	080040ed 	.word	0x080040ed
 800407c:	080040ed 	.word	0x080040ed
 8004080:	080040b7 	.word	0x080040b7
 8004084:	080040ed 	.word	0x080040ed
 8004088:	080040ed 	.word	0x080040ed
 800408c:	080040ed 	.word	0x080040ed
 8004090:	080040c9 	.word	0x080040c9
 8004094:	080040ed 	.word	0x080040ed
 8004098:	080040ed 	.word	0x080040ed
 800409c:	080040ed 	.word	0x080040ed
 80040a0:	080040db 	.word	0x080040db
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	68da      	ldr	r2, [r3, #12]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f022 0202 	bic.w	r2, r2, #2
 80040b2:	60da      	str	r2, [r3, #12]
      break;
 80040b4:	e01d      	b.n	80040f2 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	68da      	ldr	r2, [r3, #12]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f022 0204 	bic.w	r2, r2, #4
 80040c4:	60da      	str	r2, [r3, #12]
      break;
 80040c6:	e014      	b.n	80040f2 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	68da      	ldr	r2, [r3, #12]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f022 0208 	bic.w	r2, r2, #8
 80040d6:	60da      	str	r2, [r3, #12]
      break;
 80040d8:	e00b      	b.n	80040f2 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	68da      	ldr	r2, [r3, #12]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f022 0210 	bic.w	r2, r2, #16
 80040e8:	60da      	str	r2, [r3, #12]
      break;
 80040ea:	e002      	b.n	80040f2 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	73fb      	strb	r3, [r7, #15]
      break;
 80040f0:	bf00      	nop
  }

  if (status == HAL_OK)
 80040f2:	7bfb      	ldrb	r3, [r7, #15]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d157      	bne.n	80041a8 <HAL_TIM_PWM_Stop_IT+0x154>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	2200      	movs	r2, #0
 80040fe:	6839      	ldr	r1, [r7, #0]
 8004100:	4618      	mov	r0, r3
 8004102:	f004 f93c 	bl	800837e <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a2a      	ldr	r2, [pc, #168]	; (80041b4 <HAL_TIM_PWM_Stop_IT+0x160>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d117      	bne.n	8004140 <HAL_TIM_PWM_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	6a1a      	ldr	r2, [r3, #32]
 8004116:	f241 1311 	movw	r3, #4369	; 0x1111
 800411a:	4013      	ands	r3, r2
 800411c:	2b00      	cmp	r3, #0
 800411e:	d10f      	bne.n	8004140 <HAL_TIM_PWM_Stop_IT+0xec>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	6a1a      	ldr	r2, [r3, #32]
 8004126:	f240 4344 	movw	r3, #1092	; 0x444
 800412a:	4013      	ands	r3, r2
 800412c:	2b00      	cmp	r3, #0
 800412e:	d107      	bne.n	8004140 <HAL_TIM_PWM_Stop_IT+0xec>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800413e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	6a1a      	ldr	r2, [r3, #32]
 8004146:	f241 1311 	movw	r3, #4369	; 0x1111
 800414a:	4013      	ands	r3, r2
 800414c:	2b00      	cmp	r3, #0
 800414e:	d10f      	bne.n	8004170 <HAL_TIM_PWM_Stop_IT+0x11c>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	6a1a      	ldr	r2, [r3, #32]
 8004156:	f240 4344 	movw	r3, #1092	; 0x444
 800415a:	4013      	ands	r3, r2
 800415c:	2b00      	cmp	r3, #0
 800415e:	d107      	bne.n	8004170 <HAL_TIM_PWM_Stop_IT+0x11c>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f022 0201 	bic.w	r2, r2, #1
 800416e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d104      	bne.n	8004180 <HAL_TIM_PWM_Stop_IT+0x12c>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2201      	movs	r2, #1
 800417a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800417e:	e013      	b.n	80041a8 <HAL_TIM_PWM_Stop_IT+0x154>
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	2b04      	cmp	r3, #4
 8004184:	d104      	bne.n	8004190 <HAL_TIM_PWM_Stop_IT+0x13c>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2201      	movs	r2, #1
 800418a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800418e:	e00b      	b.n	80041a8 <HAL_TIM_PWM_Stop_IT+0x154>
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	2b08      	cmp	r3, #8
 8004194:	d104      	bne.n	80041a0 <HAL_TIM_PWM_Stop_IT+0x14c>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2201      	movs	r2, #1
 800419a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800419e:	e003      	b.n	80041a8 <HAL_TIM_PWM_Stop_IT+0x154>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 80041a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3710      	adds	r7, #16
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	40012c00 	.word	0x40012c00

080041b8 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b086      	sub	sp, #24
 80041bc:	af00      	add	r7, sp, #0
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	60b9      	str	r1, [r7, #8]
 80041c2:	607a      	str	r2, [r7, #4]
 80041c4:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80041c6:	2300      	movs	r3, #0
 80041c8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d109      	bne.n	80041e4 <HAL_TIM_PWM_Start_DMA+0x2c>
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	2b02      	cmp	r3, #2
 80041da:	bf0c      	ite	eq
 80041dc:	2301      	moveq	r3, #1
 80041de:	2300      	movne	r3, #0
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	e022      	b.n	800422a <HAL_TIM_PWM_Start_DMA+0x72>
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	2b04      	cmp	r3, #4
 80041e8:	d109      	bne.n	80041fe <HAL_TIM_PWM_Start_DMA+0x46>
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	bf0c      	ite	eq
 80041f6:	2301      	moveq	r3, #1
 80041f8:	2300      	movne	r3, #0
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	e015      	b.n	800422a <HAL_TIM_PWM_Start_DMA+0x72>
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	2b08      	cmp	r3, #8
 8004202:	d109      	bne.n	8004218 <HAL_TIM_PWM_Start_DMA+0x60>
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800420a:	b2db      	uxtb	r3, r3
 800420c:	2b02      	cmp	r3, #2
 800420e:	bf0c      	ite	eq
 8004210:	2301      	moveq	r3, #1
 8004212:	2300      	movne	r3, #0
 8004214:	b2db      	uxtb	r3, r3
 8004216:	e008      	b.n	800422a <HAL_TIM_PWM_Start_DMA+0x72>
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800421e:	b2db      	uxtb	r3, r3
 8004220:	2b02      	cmp	r3, #2
 8004222:	bf0c      	ite	eq
 8004224:	2301      	moveq	r3, #1
 8004226:	2300      	movne	r3, #0
 8004228:	b2db      	uxtb	r3, r3
 800422a:	2b00      	cmp	r3, #0
 800422c:	d001      	beq.n	8004232 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 800422e:	2302      	movs	r3, #2
 8004230:	e153      	b.n	80044da <HAL_TIM_PWM_Start_DMA+0x322>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d109      	bne.n	800424c <HAL_TIM_PWM_Start_DMA+0x94>
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800423e:	b2db      	uxtb	r3, r3
 8004240:	2b01      	cmp	r3, #1
 8004242:	bf0c      	ite	eq
 8004244:	2301      	moveq	r3, #1
 8004246:	2300      	movne	r3, #0
 8004248:	b2db      	uxtb	r3, r3
 800424a:	e022      	b.n	8004292 <HAL_TIM_PWM_Start_DMA+0xda>
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	2b04      	cmp	r3, #4
 8004250:	d109      	bne.n	8004266 <HAL_TIM_PWM_Start_DMA+0xae>
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004258:	b2db      	uxtb	r3, r3
 800425a:	2b01      	cmp	r3, #1
 800425c:	bf0c      	ite	eq
 800425e:	2301      	moveq	r3, #1
 8004260:	2300      	movne	r3, #0
 8004262:	b2db      	uxtb	r3, r3
 8004264:	e015      	b.n	8004292 <HAL_TIM_PWM_Start_DMA+0xda>
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	2b08      	cmp	r3, #8
 800426a:	d109      	bne.n	8004280 <HAL_TIM_PWM_Start_DMA+0xc8>
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004272:	b2db      	uxtb	r3, r3
 8004274:	2b01      	cmp	r3, #1
 8004276:	bf0c      	ite	eq
 8004278:	2301      	moveq	r3, #1
 800427a:	2300      	movne	r3, #0
 800427c:	b2db      	uxtb	r3, r3
 800427e:	e008      	b.n	8004292 <HAL_TIM_PWM_Start_DMA+0xda>
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004286:	b2db      	uxtb	r3, r3
 8004288:	2b01      	cmp	r3, #1
 800428a:	bf0c      	ite	eq
 800428c:	2301      	moveq	r3, #1
 800428e:	2300      	movne	r3, #0
 8004290:	b2db      	uxtb	r3, r3
 8004292:	2b00      	cmp	r3, #0
 8004294:	d024      	beq.n	80042e0 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d002      	beq.n	80042a2 <HAL_TIM_PWM_Start_DMA+0xea>
 800429c:	887b      	ldrh	r3, [r7, #2]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d101      	bne.n	80042a6 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e119      	b.n	80044da <HAL_TIM_PWM_Start_DMA+0x322>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d104      	bne.n	80042b6 <HAL_TIM_PWM_Start_DMA+0xfe>
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2202      	movs	r2, #2
 80042b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042b4:	e016      	b.n	80042e4 <HAL_TIM_PWM_Start_DMA+0x12c>
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	2b04      	cmp	r3, #4
 80042ba:	d104      	bne.n	80042c6 <HAL_TIM_PWM_Start_DMA+0x10e>
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2202      	movs	r2, #2
 80042c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042c4:	e00e      	b.n	80042e4 <HAL_TIM_PWM_Start_DMA+0x12c>
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	2b08      	cmp	r3, #8
 80042ca:	d104      	bne.n	80042d6 <HAL_TIM_PWM_Start_DMA+0x11e>
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2202      	movs	r2, #2
 80042d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042d4:	e006      	b.n	80042e4 <HAL_TIM_PWM_Start_DMA+0x12c>
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2202      	movs	r2, #2
 80042da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80042de:	e001      	b.n	80042e4 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e0fa      	b.n	80044da <HAL_TIM_PWM_Start_DMA+0x322>
  }

  switch (Channel)
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	2b0c      	cmp	r3, #12
 80042e8:	f200 80ae 	bhi.w	8004448 <HAL_TIM_PWM_Start_DMA+0x290>
 80042ec:	a201      	add	r2, pc, #4	; (adr r2, 80042f4 <HAL_TIM_PWM_Start_DMA+0x13c>)
 80042ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042f2:	bf00      	nop
 80042f4:	08004329 	.word	0x08004329
 80042f8:	08004449 	.word	0x08004449
 80042fc:	08004449 	.word	0x08004449
 8004300:	08004449 	.word	0x08004449
 8004304:	08004371 	.word	0x08004371
 8004308:	08004449 	.word	0x08004449
 800430c:	08004449 	.word	0x08004449
 8004310:	08004449 	.word	0x08004449
 8004314:	080043b9 	.word	0x080043b9
 8004318:	08004449 	.word	0x08004449
 800431c:	08004449 	.word	0x08004449
 8004320:	08004449 	.word	0x08004449
 8004324:	08004401 	.word	0x08004401
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432c:	4a6d      	ldr	r2, [pc, #436]	; (80044e4 <HAL_TIM_PWM_Start_DMA+0x32c>)
 800432e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004334:	4a6c      	ldr	r2, [pc, #432]	; (80044e8 <HAL_TIM_PWM_Start_DMA+0x330>)
 8004336:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433c:	4a6b      	ldr	r2, [pc, #428]	; (80044ec <HAL_TIM_PWM_Start_DMA+0x334>)
 800433e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004344:	6879      	ldr	r1, [r7, #4]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	3334      	adds	r3, #52	; 0x34
 800434c:	461a      	mov	r2, r3
 800434e:	887b      	ldrh	r3, [r7, #2]
 8004350:	f7fc fe8b 	bl	800106a <HAL_DMA_Start_IT>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d001      	beq.n	800435e <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e0bd      	b.n	80044da <HAL_TIM_PWM_Start_DMA+0x322>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	68da      	ldr	r2, [r3, #12]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800436c:	60da      	str	r2, [r3, #12]
      break;
 800436e:	e06e      	b.n	800444e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004374:	4a5b      	ldr	r2, [pc, #364]	; (80044e4 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8004376:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800437c:	4a5a      	ldr	r2, [pc, #360]	; (80044e8 <HAL_TIM_PWM_Start_DMA+0x330>)
 800437e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004384:	4a59      	ldr	r2, [pc, #356]	; (80044ec <HAL_TIM_PWM_Start_DMA+0x334>)
 8004386:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800438c:	6879      	ldr	r1, [r7, #4]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	3338      	adds	r3, #56	; 0x38
 8004394:	461a      	mov	r2, r3
 8004396:	887b      	ldrh	r3, [r7, #2]
 8004398:	f7fc fe67 	bl	800106a <HAL_DMA_Start_IT>
 800439c:	4603      	mov	r3, r0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d001      	beq.n	80043a6 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e099      	b.n	80044da <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	68da      	ldr	r2, [r3, #12]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80043b4:	60da      	str	r2, [r3, #12]
      break;
 80043b6:	e04a      	b.n	800444e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043bc:	4a49      	ldr	r2, [pc, #292]	; (80044e4 <HAL_TIM_PWM_Start_DMA+0x32c>)
 80043be:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c4:	4a48      	ldr	r2, [pc, #288]	; (80044e8 <HAL_TIM_PWM_Start_DMA+0x330>)
 80043c6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043cc:	4a47      	ldr	r2, [pc, #284]	; (80044ec <HAL_TIM_PWM_Start_DMA+0x334>)
 80043ce:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80043d4:	6879      	ldr	r1, [r7, #4]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	333c      	adds	r3, #60	; 0x3c
 80043dc:	461a      	mov	r2, r3
 80043de:	887b      	ldrh	r3, [r7, #2]
 80043e0:	f7fc fe43 	bl	800106a <HAL_DMA_Start_IT>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d001      	beq.n	80043ee <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e075      	b.n	80044da <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	68da      	ldr	r2, [r3, #12]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043fc:	60da      	str	r2, [r3, #12]
      break;
 80043fe:	e026      	b.n	800444e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004404:	4a37      	ldr	r2, [pc, #220]	; (80044e4 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8004406:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440c:	4a36      	ldr	r2, [pc, #216]	; (80044e8 <HAL_TIM_PWM_Start_DMA+0x330>)
 800440e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004414:	4a35      	ldr	r2, [pc, #212]	; (80044ec <HAL_TIM_PWM_Start_DMA+0x334>)
 8004416:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800441c:	6879      	ldr	r1, [r7, #4]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	3340      	adds	r3, #64	; 0x40
 8004424:	461a      	mov	r2, r3
 8004426:	887b      	ldrh	r3, [r7, #2]
 8004428:	f7fc fe1f 	bl	800106a <HAL_DMA_Start_IT>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d001      	beq.n	8004436 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e051      	b.n	80044da <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	68da      	ldr	r2, [r3, #12]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004444:	60da      	str	r2, [r3, #12]
      break;
 8004446:	e002      	b.n	800444e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	75fb      	strb	r3, [r7, #23]
      break;
 800444c:	bf00      	nop
  }

  if (status == HAL_OK)
 800444e:	7dfb      	ldrb	r3, [r7, #23]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d141      	bne.n	80044d8 <HAL_TIM_PWM_Start_DMA+0x320>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	2201      	movs	r2, #1
 800445a:	68b9      	ldr	r1, [r7, #8]
 800445c:	4618      	mov	r0, r3
 800445e:	f003 ff8e 	bl	800837e <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a22      	ldr	r2, [pc, #136]	; (80044f0 <HAL_TIM_PWM_Start_DMA+0x338>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d107      	bne.n	800447c <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800447a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a1b      	ldr	r2, [pc, #108]	; (80044f0 <HAL_TIM_PWM_Start_DMA+0x338>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d00e      	beq.n	80044a4 <HAL_TIM_PWM_Start_DMA+0x2ec>
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800448e:	d009      	beq.n	80044a4 <HAL_TIM_PWM_Start_DMA+0x2ec>
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a17      	ldr	r2, [pc, #92]	; (80044f4 <HAL_TIM_PWM_Start_DMA+0x33c>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d004      	beq.n	80044a4 <HAL_TIM_PWM_Start_DMA+0x2ec>
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a16      	ldr	r2, [pc, #88]	; (80044f8 <HAL_TIM_PWM_Start_DMA+0x340>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d111      	bne.n	80044c8 <HAL_TIM_PWM_Start_DMA+0x310>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	f003 0307 	and.w	r3, r3, #7
 80044ae:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	2b06      	cmp	r3, #6
 80044b4:	d010      	beq.n	80044d8 <HAL_TIM_PWM_Start_DMA+0x320>
      {
        __HAL_TIM_ENABLE(htim);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f042 0201 	orr.w	r2, r2, #1
 80044c4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044c6:	e007      	b.n	80044d8 <HAL_TIM_PWM_Start_DMA+0x320>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f042 0201 	orr.w	r2, r2, #1
 80044d6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80044d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3718      	adds	r7, #24
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	0800786d 	.word	0x0800786d
 80044e8:	08007915 	.word	0x08007915
 80044ec:	080077db 	.word	0x080077db
 80044f0:	40012c00 	.word	0x40012c00
 80044f4:	40000400 	.word	0x40000400
 80044f8:	40000800 	.word	0x40000800

080044fc <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b084      	sub	sp, #16
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004506:	2300      	movs	r3, #0
 8004508:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	2b0c      	cmp	r3, #12
 800450e:	d855      	bhi.n	80045bc <HAL_TIM_PWM_Stop_DMA+0xc0>
 8004510:	a201      	add	r2, pc, #4	; (adr r2, 8004518 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8004512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004516:	bf00      	nop
 8004518:	0800454d 	.word	0x0800454d
 800451c:	080045bd 	.word	0x080045bd
 8004520:	080045bd 	.word	0x080045bd
 8004524:	080045bd 	.word	0x080045bd
 8004528:	08004569 	.word	0x08004569
 800452c:	080045bd 	.word	0x080045bd
 8004530:	080045bd 	.word	0x080045bd
 8004534:	080045bd 	.word	0x080045bd
 8004538:	08004585 	.word	0x08004585
 800453c:	080045bd 	.word	0x080045bd
 8004540:	080045bd 	.word	0x080045bd
 8004544:	080045bd 	.word	0x080045bd
 8004548:	080045a1 	.word	0x080045a1
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	68da      	ldr	r2, [r3, #12]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800455a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004560:	4618      	mov	r0, r3
 8004562:	f7fc fe1d 	bl	80011a0 <HAL_DMA_Abort_IT>
      break;
 8004566:	e02c      	b.n	80045c2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	68da      	ldr	r2, [r3, #12]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004576:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800457c:	4618      	mov	r0, r3
 800457e:	f7fc fe0f 	bl	80011a0 <HAL_DMA_Abort_IT>
      break;
 8004582:	e01e      	b.n	80045c2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	68da      	ldr	r2, [r3, #12]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004592:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004598:	4618      	mov	r0, r3
 800459a:	f7fc fe01 	bl	80011a0 <HAL_DMA_Abort_IT>
      break;
 800459e:	e010      	b.n	80045c2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68da      	ldr	r2, [r3, #12]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80045ae:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b4:	4618      	mov	r0, r3
 80045b6:	f7fc fdf3 	bl	80011a0 <HAL_DMA_Abort_IT>
      break;
 80045ba:	e002      	b.n	80045c2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	73fb      	strb	r3, [r7, #15]
      break;
 80045c0:	bf00      	nop
  }

  if (status == HAL_OK)
 80045c2:	7bfb      	ldrb	r3, [r7, #15]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d157      	bne.n	8004678 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	2200      	movs	r2, #0
 80045ce:	6839      	ldr	r1, [r7, #0]
 80045d0:	4618      	mov	r0, r3
 80045d2:	f003 fed4 	bl	800837e <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a2a      	ldr	r2, [pc, #168]	; (8004684 <HAL_TIM_PWM_Stop_DMA+0x188>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d117      	bne.n	8004610 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	6a1a      	ldr	r2, [r3, #32]
 80045e6:	f241 1311 	movw	r3, #4369	; 0x1111
 80045ea:	4013      	ands	r3, r2
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d10f      	bne.n	8004610 <HAL_TIM_PWM_Stop_DMA+0x114>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	6a1a      	ldr	r2, [r3, #32]
 80045f6:	f240 4344 	movw	r3, #1092	; 0x444
 80045fa:	4013      	ands	r3, r2
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d107      	bne.n	8004610 <HAL_TIM_PWM_Stop_DMA+0x114>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800460e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	6a1a      	ldr	r2, [r3, #32]
 8004616:	f241 1311 	movw	r3, #4369	; 0x1111
 800461a:	4013      	ands	r3, r2
 800461c:	2b00      	cmp	r3, #0
 800461e:	d10f      	bne.n	8004640 <HAL_TIM_PWM_Stop_DMA+0x144>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	6a1a      	ldr	r2, [r3, #32]
 8004626:	f240 4344 	movw	r3, #1092	; 0x444
 800462a:	4013      	ands	r3, r2
 800462c:	2b00      	cmp	r3, #0
 800462e:	d107      	bne.n	8004640 <HAL_TIM_PWM_Stop_DMA+0x144>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f022 0201 	bic.w	r2, r2, #1
 800463e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d104      	bne.n	8004650 <HAL_TIM_PWM_Stop_DMA+0x154>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2201      	movs	r2, #1
 800464a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800464e:	e013      	b.n	8004678 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	2b04      	cmp	r3, #4
 8004654:	d104      	bne.n	8004660 <HAL_TIM_PWM_Stop_DMA+0x164>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2201      	movs	r2, #1
 800465a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800465e:	e00b      	b.n	8004678 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	2b08      	cmp	r3, #8
 8004664:	d104      	bne.n	8004670 <HAL_TIM_PWM_Stop_DMA+0x174>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2201      	movs	r2, #1
 800466a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800466e:	e003      	b.n	8004678 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8004678:	7bfb      	ldrb	r3, [r7, #15]
}
 800467a:	4618      	mov	r0, r3
 800467c:	3710      	adds	r7, #16
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	40012c00 	.word	0x40012c00

08004688 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b082      	sub	sp, #8
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d101      	bne.n	800469a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e041      	b.n	800471e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d106      	bne.n	80046b4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f000 f88d 	bl	80047ce <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2202      	movs	r2, #2
 80046b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	3304      	adds	r3, #4
 80046c4:	4619      	mov	r1, r3
 80046c6:	4610      	mov	r0, r2
 80046c8:	f003 fa3a 	bl	8007b40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800471c:	2300      	movs	r3, #0
}
 800471e:	4618      	mov	r0, r3
 8004720:	3708      	adds	r7, #8
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}

08004726 <HAL_TIM_IC_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_DeInit(TIM_HandleTypeDef *htim)
{
 8004726:	b580      	push	{r7, lr}
 8004728:	b082      	sub	sp, #8
 800472a:	af00      	add	r7, sp, #0
 800472c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2202      	movs	r2, #2
 8004732:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	6a1a      	ldr	r2, [r3, #32]
 800473c:	f241 1311 	movw	r3, #4369	; 0x1111
 8004740:	4013      	ands	r3, r2
 8004742:	2b00      	cmp	r3, #0
 8004744:	d10f      	bne.n	8004766 <HAL_TIM_IC_DeInit+0x40>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	6a1a      	ldr	r2, [r3, #32]
 800474c:	f240 4344 	movw	r3, #1092	; 0x444
 8004750:	4013      	ands	r3, r2
 8004752:	2b00      	cmp	r3, #0
 8004754:	d107      	bne.n	8004766 <HAL_TIM_IC_DeInit+0x40>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f022 0201 	bic.w	r2, r2, #1
 8004764:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->IC_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_IC_MspDeInit(htim);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f000 f83a 	bl	80047e0 <HAL_TIM_IC_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047c4:	2300      	movs	r3, #0
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3708      	adds	r7, #8
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}

080047ce <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80047ce:	b480      	push	{r7}
 80047d0:	b083      	sub	sp, #12
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80047d6:	bf00      	nop
 80047d8:	370c      	adds	r7, #12
 80047da:	46bd      	mov	sp, r7
 80047dc:	bc80      	pop	{r7}
 80047de:	4770      	bx	lr

080047e0 <HAL_TIM_IC_MspDeInit>:
  * @brief  DeInitializes TIM Input Capture MSP.
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspDeInit(TIM_HandleTypeDef *htim)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspDeInit could be implemented in the user file
   */
}
 80047e8:	bf00      	nop
 80047ea:	370c      	adds	r7, #12
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bc80      	pop	{r7}
 80047f0:	4770      	bx	lr

080047f2 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047f2:	b580      	push	{r7, lr}
 80047f4:	b084      	sub	sp, #16
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	6078      	str	r0, [r7, #4]
 80047fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d104      	bne.n	800480c <HAL_TIM_IC_Start+0x1a>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004808:	b2db      	uxtb	r3, r3
 800480a:	e013      	b.n	8004834 <HAL_TIM_IC_Start+0x42>
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	2b04      	cmp	r3, #4
 8004810:	d104      	bne.n	800481c <HAL_TIM_IC_Start+0x2a>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004818:	b2db      	uxtb	r3, r3
 800481a:	e00b      	b.n	8004834 <HAL_TIM_IC_Start+0x42>
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	2b08      	cmp	r3, #8
 8004820:	d104      	bne.n	800482c <HAL_TIM_IC_Start+0x3a>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004828:	b2db      	uxtb	r3, r3
 800482a:	e003      	b.n	8004834 <HAL_TIM_IC_Start+0x42>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004832:	b2db      	uxtb	r3, r3
 8004834:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d104      	bne.n	8004846 <HAL_TIM_IC_Start+0x54>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004842:	b2db      	uxtb	r3, r3
 8004844:	e013      	b.n	800486e <HAL_TIM_IC_Start+0x7c>
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	2b04      	cmp	r3, #4
 800484a:	d104      	bne.n	8004856 <HAL_TIM_IC_Start+0x64>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004852:	b2db      	uxtb	r3, r3
 8004854:	e00b      	b.n	800486e <HAL_TIM_IC_Start+0x7c>
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	2b08      	cmp	r3, #8
 800485a:	d104      	bne.n	8004866 <HAL_TIM_IC_Start+0x74>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004862:	b2db      	uxtb	r3, r3
 8004864:	e003      	b.n	800486e <HAL_TIM_IC_Start+0x7c>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800486c:	b2db      	uxtb	r3, r3
 800486e:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004870:	7bfb      	ldrb	r3, [r7, #15]
 8004872:	2b01      	cmp	r3, #1
 8004874:	d102      	bne.n	800487c <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004876:	7bbb      	ldrb	r3, [r7, #14]
 8004878:	2b01      	cmp	r3, #1
 800487a:	d001      	beq.n	8004880 <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	e06d      	b.n	800495c <HAL_TIM_IC_Start+0x16a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d104      	bne.n	8004890 <HAL_TIM_IC_Start+0x9e>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2202      	movs	r2, #2
 800488a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800488e:	e013      	b.n	80048b8 <HAL_TIM_IC_Start+0xc6>
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	2b04      	cmp	r3, #4
 8004894:	d104      	bne.n	80048a0 <HAL_TIM_IC_Start+0xae>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2202      	movs	r2, #2
 800489a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800489e:	e00b      	b.n	80048b8 <HAL_TIM_IC_Start+0xc6>
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	2b08      	cmp	r3, #8
 80048a4:	d104      	bne.n	80048b0 <HAL_TIM_IC_Start+0xbe>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2202      	movs	r2, #2
 80048aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048ae:	e003      	b.n	80048b8 <HAL_TIM_IC_Start+0xc6>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2202      	movs	r2, #2
 80048b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d104      	bne.n	80048c8 <HAL_TIM_IC_Start+0xd6>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2202      	movs	r2, #2
 80048c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048c6:	e013      	b.n	80048f0 <HAL_TIM_IC_Start+0xfe>
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	2b04      	cmp	r3, #4
 80048cc:	d104      	bne.n	80048d8 <HAL_TIM_IC_Start+0xe6>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2202      	movs	r2, #2
 80048d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80048d6:	e00b      	b.n	80048f0 <HAL_TIM_IC_Start+0xfe>
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	2b08      	cmp	r3, #8
 80048dc:	d104      	bne.n	80048e8 <HAL_TIM_IC_Start+0xf6>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2202      	movs	r2, #2
 80048e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048e6:	e003      	b.n	80048f0 <HAL_TIM_IC_Start+0xfe>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2202      	movs	r2, #2
 80048ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	2201      	movs	r2, #1
 80048f6:	6839      	ldr	r1, [r7, #0]
 80048f8:	4618      	mov	r0, r3
 80048fa:	f003 fd40 	bl	800837e <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a18      	ldr	r2, [pc, #96]	; (8004964 <HAL_TIM_IC_Start+0x172>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d00e      	beq.n	8004926 <HAL_TIM_IC_Start+0x134>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004910:	d009      	beq.n	8004926 <HAL_TIM_IC_Start+0x134>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a14      	ldr	r2, [pc, #80]	; (8004968 <HAL_TIM_IC_Start+0x176>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d004      	beq.n	8004926 <HAL_TIM_IC_Start+0x134>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a12      	ldr	r2, [pc, #72]	; (800496c <HAL_TIM_IC_Start+0x17a>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d111      	bne.n	800494a <HAL_TIM_IC_Start+0x158>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	f003 0307 	and.w	r3, r3, #7
 8004930:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	2b06      	cmp	r3, #6
 8004936:	d010      	beq.n	800495a <HAL_TIM_IC_Start+0x168>
    {
      __HAL_TIM_ENABLE(htim);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f042 0201 	orr.w	r2, r2, #1
 8004946:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004948:	e007      	b.n	800495a <HAL_TIM_IC_Start+0x168>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f042 0201 	orr.w	r2, r2, #1
 8004958:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800495a:	2300      	movs	r3, #0
}
 800495c:	4618      	mov	r0, r3
 800495e:	3710      	adds	r7, #16
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}
 8004964:	40012c00 	.word	0x40012c00
 8004968:	40000400 	.word	0x40000400
 800496c:	40000800 	.word	0x40000800

08004970 <HAL_TIM_IC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b082      	sub	sp, #8
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	2200      	movs	r2, #0
 8004980:	6839      	ldr	r1, [r7, #0]
 8004982:	4618      	mov	r0, r3
 8004984:	f003 fcfb 	bl	800837e <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	6a1a      	ldr	r2, [r3, #32]
 800498e:	f241 1311 	movw	r3, #4369	; 0x1111
 8004992:	4013      	ands	r3, r2
 8004994:	2b00      	cmp	r3, #0
 8004996:	d10f      	bne.n	80049b8 <HAL_TIM_IC_Stop+0x48>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	6a1a      	ldr	r2, [r3, #32]
 800499e:	f240 4344 	movw	r3, #1092	; 0x444
 80049a2:	4013      	ands	r3, r2
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d107      	bne.n	80049b8 <HAL_TIM_IC_Stop+0x48>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f022 0201 	bic.w	r2, r2, #1
 80049b6:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d104      	bne.n	80049c8 <HAL_TIM_IC_Stop+0x58>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2201      	movs	r2, #1
 80049c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049c6:	e013      	b.n	80049f0 <HAL_TIM_IC_Stop+0x80>
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	2b04      	cmp	r3, #4
 80049cc:	d104      	bne.n	80049d8 <HAL_TIM_IC_Stop+0x68>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2201      	movs	r2, #1
 80049d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049d6:	e00b      	b.n	80049f0 <HAL_TIM_IC_Stop+0x80>
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	2b08      	cmp	r3, #8
 80049dc:	d104      	bne.n	80049e8 <HAL_TIM_IC_Stop+0x78>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2201      	movs	r2, #1
 80049e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049e6:	e003      	b.n	80049f0 <HAL_TIM_IC_Stop+0x80>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d104      	bne.n	8004a00 <HAL_TIM_IC_Stop+0x90>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2201      	movs	r2, #1
 80049fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049fe:	e013      	b.n	8004a28 <HAL_TIM_IC_Stop+0xb8>
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	2b04      	cmp	r3, #4
 8004a04:	d104      	bne.n	8004a10 <HAL_TIM_IC_Stop+0xa0>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2201      	movs	r2, #1
 8004a0a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a0e:	e00b      	b.n	8004a28 <HAL_TIM_IC_Stop+0xb8>
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	2b08      	cmp	r3, #8
 8004a14:	d104      	bne.n	8004a20 <HAL_TIM_IC_Stop+0xb0>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2201      	movs	r2, #1
 8004a1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a1e:	e003      	b.n	8004a28 <HAL_TIM_IC_Stop+0xb8>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8004a28:	2300      	movs	r3, #0
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3708      	adds	r7, #8
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}

08004a32 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a32:	b580      	push	{r7, lr}
 8004a34:	b084      	sub	sp, #16
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	6078      	str	r0, [r7, #4]
 8004a3a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d104      	bne.n	8004a50 <HAL_TIM_IC_Start_IT+0x1e>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	e013      	b.n	8004a78 <HAL_TIM_IC_Start_IT+0x46>
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	2b04      	cmp	r3, #4
 8004a54:	d104      	bne.n	8004a60 <HAL_TIM_IC_Start_IT+0x2e>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	e00b      	b.n	8004a78 <HAL_TIM_IC_Start_IT+0x46>
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	2b08      	cmp	r3, #8
 8004a64:	d104      	bne.n	8004a70 <HAL_TIM_IC_Start_IT+0x3e>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	e003      	b.n	8004a78 <HAL_TIM_IC_Start_IT+0x46>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d104      	bne.n	8004a8a <HAL_TIM_IC_Start_IT+0x58>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	e013      	b.n	8004ab2 <HAL_TIM_IC_Start_IT+0x80>
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	2b04      	cmp	r3, #4
 8004a8e:	d104      	bne.n	8004a9a <HAL_TIM_IC_Start_IT+0x68>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	e00b      	b.n	8004ab2 <HAL_TIM_IC_Start_IT+0x80>
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	2b08      	cmp	r3, #8
 8004a9e:	d104      	bne.n	8004aaa <HAL_TIM_IC_Start_IT+0x78>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	e003      	b.n	8004ab2 <HAL_TIM_IC_Start_IT+0x80>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ab4:	7bbb      	ldrb	r3, [r7, #14]
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d102      	bne.n	8004ac0 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004aba:	7b7b      	ldrb	r3, [r7, #13]
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d001      	beq.n	8004ac4 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e0b7      	b.n	8004c34 <HAL_TIM_IC_Start_IT+0x202>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d104      	bne.n	8004ad4 <HAL_TIM_IC_Start_IT+0xa2>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2202      	movs	r2, #2
 8004ace:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ad2:	e013      	b.n	8004afc <HAL_TIM_IC_Start_IT+0xca>
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	2b04      	cmp	r3, #4
 8004ad8:	d104      	bne.n	8004ae4 <HAL_TIM_IC_Start_IT+0xb2>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2202      	movs	r2, #2
 8004ade:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ae2:	e00b      	b.n	8004afc <HAL_TIM_IC_Start_IT+0xca>
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	2b08      	cmp	r3, #8
 8004ae8:	d104      	bne.n	8004af4 <HAL_TIM_IC_Start_IT+0xc2>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2202      	movs	r2, #2
 8004aee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004af2:	e003      	b.n	8004afc <HAL_TIM_IC_Start_IT+0xca>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2202      	movs	r2, #2
 8004af8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d104      	bne.n	8004b0c <HAL_TIM_IC_Start_IT+0xda>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2202      	movs	r2, #2
 8004b06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b0a:	e013      	b.n	8004b34 <HAL_TIM_IC_Start_IT+0x102>
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	2b04      	cmp	r3, #4
 8004b10:	d104      	bne.n	8004b1c <HAL_TIM_IC_Start_IT+0xea>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2202      	movs	r2, #2
 8004b16:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b1a:	e00b      	b.n	8004b34 <HAL_TIM_IC_Start_IT+0x102>
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	2b08      	cmp	r3, #8
 8004b20:	d104      	bne.n	8004b2c <HAL_TIM_IC_Start_IT+0xfa>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2202      	movs	r2, #2
 8004b26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b2a:	e003      	b.n	8004b34 <HAL_TIM_IC_Start_IT+0x102>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2202      	movs	r2, #2
 8004b30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	2b0c      	cmp	r3, #12
 8004b38:	d840      	bhi.n	8004bbc <HAL_TIM_IC_Start_IT+0x18a>
 8004b3a:	a201      	add	r2, pc, #4	; (adr r2, 8004b40 <HAL_TIM_IC_Start_IT+0x10e>)
 8004b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b40:	08004b75 	.word	0x08004b75
 8004b44:	08004bbd 	.word	0x08004bbd
 8004b48:	08004bbd 	.word	0x08004bbd
 8004b4c:	08004bbd 	.word	0x08004bbd
 8004b50:	08004b87 	.word	0x08004b87
 8004b54:	08004bbd 	.word	0x08004bbd
 8004b58:	08004bbd 	.word	0x08004bbd
 8004b5c:	08004bbd 	.word	0x08004bbd
 8004b60:	08004b99 	.word	0x08004b99
 8004b64:	08004bbd 	.word	0x08004bbd
 8004b68:	08004bbd 	.word	0x08004bbd
 8004b6c:	08004bbd 	.word	0x08004bbd
 8004b70:	08004bab 	.word	0x08004bab
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	68da      	ldr	r2, [r3, #12]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f042 0202 	orr.w	r2, r2, #2
 8004b82:	60da      	str	r2, [r3, #12]
      break;
 8004b84:	e01d      	b.n	8004bc2 <HAL_TIM_IC_Start_IT+0x190>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	68da      	ldr	r2, [r3, #12]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f042 0204 	orr.w	r2, r2, #4
 8004b94:	60da      	str	r2, [r3, #12]
      break;
 8004b96:	e014      	b.n	8004bc2 <HAL_TIM_IC_Start_IT+0x190>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	68da      	ldr	r2, [r3, #12]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f042 0208 	orr.w	r2, r2, #8
 8004ba6:	60da      	str	r2, [r3, #12]
      break;
 8004ba8:	e00b      	b.n	8004bc2 <HAL_TIM_IC_Start_IT+0x190>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	68da      	ldr	r2, [r3, #12]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f042 0210 	orr.w	r2, r2, #16
 8004bb8:	60da      	str	r2, [r3, #12]
      break;
 8004bba:	e002      	b.n	8004bc2 <HAL_TIM_IC_Start_IT+0x190>
    }

    default:
      status = HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	73fb      	strb	r3, [r7, #15]
      break;
 8004bc0:	bf00      	nop
  }

  if (status == HAL_OK)
 8004bc2:	7bfb      	ldrb	r3, [r7, #15]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d134      	bne.n	8004c32 <HAL_TIM_IC_Start_IT+0x200>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2201      	movs	r2, #1
 8004bce:	6839      	ldr	r1, [r7, #0]
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f003 fbd4 	bl	800837e <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a18      	ldr	r2, [pc, #96]	; (8004c3c <HAL_TIM_IC_Start_IT+0x20a>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d00e      	beq.n	8004bfe <HAL_TIM_IC_Start_IT+0x1cc>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004be8:	d009      	beq.n	8004bfe <HAL_TIM_IC_Start_IT+0x1cc>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a14      	ldr	r2, [pc, #80]	; (8004c40 <HAL_TIM_IC_Start_IT+0x20e>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d004      	beq.n	8004bfe <HAL_TIM_IC_Start_IT+0x1cc>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a12      	ldr	r2, [pc, #72]	; (8004c44 <HAL_TIM_IC_Start_IT+0x212>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d111      	bne.n	8004c22 <HAL_TIM_IC_Start_IT+0x1f0>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	f003 0307 	and.w	r3, r3, #7
 8004c08:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	2b06      	cmp	r3, #6
 8004c0e:	d010      	beq.n	8004c32 <HAL_TIM_IC_Start_IT+0x200>
      {
        __HAL_TIM_ENABLE(htim);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f042 0201 	orr.w	r2, r2, #1
 8004c1e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c20:	e007      	b.n	8004c32 <HAL_TIM_IC_Start_IT+0x200>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f042 0201 	orr.w	r2, r2, #1
 8004c30:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004c32:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3710      	adds	r7, #16
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	40012c00 	.word	0x40012c00
 8004c40:	40000400 	.word	0x40000400
 8004c44:	40000800 	.word	0x40000800

08004c48 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c52:	2300      	movs	r3, #0
 8004c54:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	2b0c      	cmp	r3, #12
 8004c5a:	d841      	bhi.n	8004ce0 <HAL_TIM_IC_Stop_IT+0x98>
 8004c5c:	a201      	add	r2, pc, #4	; (adr r2, 8004c64 <HAL_TIM_IC_Stop_IT+0x1c>)
 8004c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c62:	bf00      	nop
 8004c64:	08004c99 	.word	0x08004c99
 8004c68:	08004ce1 	.word	0x08004ce1
 8004c6c:	08004ce1 	.word	0x08004ce1
 8004c70:	08004ce1 	.word	0x08004ce1
 8004c74:	08004cab 	.word	0x08004cab
 8004c78:	08004ce1 	.word	0x08004ce1
 8004c7c:	08004ce1 	.word	0x08004ce1
 8004c80:	08004ce1 	.word	0x08004ce1
 8004c84:	08004cbd 	.word	0x08004cbd
 8004c88:	08004ce1 	.word	0x08004ce1
 8004c8c:	08004ce1 	.word	0x08004ce1
 8004c90:	08004ce1 	.word	0x08004ce1
 8004c94:	08004ccf 	.word	0x08004ccf
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	68da      	ldr	r2, [r3, #12]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f022 0202 	bic.w	r2, r2, #2
 8004ca6:	60da      	str	r2, [r3, #12]
      break;
 8004ca8:	e01d      	b.n	8004ce6 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	68da      	ldr	r2, [r3, #12]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f022 0204 	bic.w	r2, r2, #4
 8004cb8:	60da      	str	r2, [r3, #12]
      break;
 8004cba:	e014      	b.n	8004ce6 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	68da      	ldr	r2, [r3, #12]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f022 0208 	bic.w	r2, r2, #8
 8004cca:	60da      	str	r2, [r3, #12]
      break;
 8004ccc:	e00b      	b.n	8004ce6 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	68da      	ldr	r2, [r3, #12]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f022 0210 	bic.w	r2, r2, #16
 8004cdc:	60da      	str	r2, [r3, #12]
      break;
 8004cde:	e002      	b.n	8004ce6 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	73fb      	strb	r3, [r7, #15]
      break;
 8004ce4:	bf00      	nop
  }

  if (status == HAL_OK)
 8004ce6:	7bfb      	ldrb	r3, [r7, #15]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d156      	bne.n	8004d9a <HAL_TIM_IC_Stop_IT+0x152>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	6839      	ldr	r1, [r7, #0]
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f003 fb42 	bl	800837e <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	6a1a      	ldr	r2, [r3, #32]
 8004d00:	f241 1311 	movw	r3, #4369	; 0x1111
 8004d04:	4013      	ands	r3, r2
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d10f      	bne.n	8004d2a <HAL_TIM_IC_Stop_IT+0xe2>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	6a1a      	ldr	r2, [r3, #32]
 8004d10:	f240 4344 	movw	r3, #1092	; 0x444
 8004d14:	4013      	ands	r3, r2
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d107      	bne.n	8004d2a <HAL_TIM_IC_Stop_IT+0xe2>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f022 0201 	bic.w	r2, r2, #1
 8004d28:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d104      	bne.n	8004d3a <HAL_TIM_IC_Stop_IT+0xf2>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d38:	e013      	b.n	8004d62 <HAL_TIM_IC_Stop_IT+0x11a>
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	2b04      	cmp	r3, #4
 8004d3e:	d104      	bne.n	8004d4a <HAL_TIM_IC_Stop_IT+0x102>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d48:	e00b      	b.n	8004d62 <HAL_TIM_IC_Stop_IT+0x11a>
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	2b08      	cmp	r3, #8
 8004d4e:	d104      	bne.n	8004d5a <HAL_TIM_IC_Stop_IT+0x112>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d58:	e003      	b.n	8004d62 <HAL_TIM_IC_Stop_IT+0x11a>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d104      	bne.n	8004d72 <HAL_TIM_IC_Stop_IT+0x12a>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d70:	e013      	b.n	8004d9a <HAL_TIM_IC_Stop_IT+0x152>
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	2b04      	cmp	r3, #4
 8004d76:	d104      	bne.n	8004d82 <HAL_TIM_IC_Stop_IT+0x13a>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d80:	e00b      	b.n	8004d9a <HAL_TIM_IC_Stop_IT+0x152>
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	2b08      	cmp	r3, #8
 8004d86:	d104      	bne.n	8004d92 <HAL_TIM_IC_Stop_IT+0x14a>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d90:	e003      	b.n	8004d9a <HAL_TIM_IC_Stop_IT+0x152>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2201      	movs	r2, #1
 8004d96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

  /* Return function status */
  return status;
 8004d9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3710      	adds	r7, #16
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}

08004da4 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b086      	sub	sp, #24
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	60f8      	str	r0, [r7, #12]
 8004dac:	60b9      	str	r1, [r7, #8]
 8004dae:	607a      	str	r2, [r7, #4]
 8004db0:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8004db2:	2300      	movs	r3, #0
 8004db4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d104      	bne.n	8004dc6 <HAL_TIM_IC_Start_DMA+0x22>
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	e013      	b.n	8004dee <HAL_TIM_IC_Start_DMA+0x4a>
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	2b04      	cmp	r3, #4
 8004dca:	d104      	bne.n	8004dd6 <HAL_TIM_IC_Start_DMA+0x32>
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	e00b      	b.n	8004dee <HAL_TIM_IC_Start_DMA+0x4a>
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	2b08      	cmp	r3, #8
 8004dda:	d104      	bne.n	8004de6 <HAL_TIM_IC_Start_DMA+0x42>
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	e003      	b.n	8004dee <HAL_TIM_IC_Start_DMA+0x4a>
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d104      	bne.n	8004e00 <HAL_TIM_IC_Start_DMA+0x5c>
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	e013      	b.n	8004e28 <HAL_TIM_IC_Start_DMA+0x84>
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	2b04      	cmp	r3, #4
 8004e04:	d104      	bne.n	8004e10 <HAL_TIM_IC_Start_DMA+0x6c>
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	e00b      	b.n	8004e28 <HAL_TIM_IC_Start_DMA+0x84>
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	2b08      	cmp	r3, #8
 8004e14:	d104      	bne.n	8004e20 <HAL_TIM_IC_Start_DMA+0x7c>
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	e003      	b.n	8004e28 <HAL_TIM_IC_Start_DMA+0x84>
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	757b      	strb	r3, [r7, #21]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 8004e2a:	7dbb      	ldrb	r3, [r7, #22]
 8004e2c:	2b02      	cmp	r3, #2
 8004e2e:	d002      	beq.n	8004e36 <HAL_TIM_IC_Start_DMA+0x92>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 8004e30:	7d7b      	ldrb	r3, [r7, #21]
 8004e32:	2b02      	cmp	r3, #2
 8004e34:	d101      	bne.n	8004e3a <HAL_TIM_IC_Start_DMA+0x96>
  {
    return HAL_BUSY;
 8004e36:	2302      	movs	r3, #2
 8004e38:	e132      	b.n	80050a0 <HAL_TIM_IC_Start_DMA+0x2fc>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 8004e3a:	7dbb      	ldrb	r3, [r7, #22]
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d143      	bne.n	8004ec8 <HAL_TIM_IC_Start_DMA+0x124>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 8004e40:	7d7b      	ldrb	r3, [r7, #21]
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d140      	bne.n	8004ec8 <HAL_TIM_IC_Start_DMA+0x124>
  {
    if ((pData == NULL) || (Length == 0U))
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d002      	beq.n	8004e52 <HAL_TIM_IC_Start_DMA+0xae>
 8004e4c:	887b      	ldrh	r3, [r7, #2]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d101      	bne.n	8004e56 <HAL_TIM_IC_Start_DMA+0xb2>
    {
      return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e124      	b.n	80050a0 <HAL_TIM_IC_Start_DMA+0x2fc>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d104      	bne.n	8004e66 <HAL_TIM_IC_Start_DMA+0xc2>
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2202      	movs	r2, #2
 8004e60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e64:	e013      	b.n	8004e8e <HAL_TIM_IC_Start_DMA+0xea>
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	2b04      	cmp	r3, #4
 8004e6a:	d104      	bne.n	8004e76 <HAL_TIM_IC_Start_DMA+0xd2>
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2202      	movs	r2, #2
 8004e70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e74:	e00b      	b.n	8004e8e <HAL_TIM_IC_Start_DMA+0xea>
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	2b08      	cmp	r3, #8
 8004e7a:	d104      	bne.n	8004e86 <HAL_TIM_IC_Start_DMA+0xe2>
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2202      	movs	r2, #2
 8004e80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e84:	e003      	b.n	8004e8e <HAL_TIM_IC_Start_DMA+0xea>
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2202      	movs	r2, #2
 8004e8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d104      	bne.n	8004e9e <HAL_TIM_IC_Start_DMA+0xfa>
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2202      	movs	r2, #2
 8004e98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    if ((pData == NULL) || (Length == 0U))
 8004e9c:	e016      	b.n	8004ecc <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	2b04      	cmp	r3, #4
 8004ea2:	d104      	bne.n	8004eae <HAL_TIM_IC_Start_DMA+0x10a>
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2202      	movs	r2, #2
 8004ea8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    if ((pData == NULL) || (Length == 0U))
 8004eac:	e00e      	b.n	8004ecc <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	2b08      	cmp	r3, #8
 8004eb2:	d104      	bne.n	8004ebe <HAL_TIM_IC_Start_DMA+0x11a>
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2202      	movs	r2, #2
 8004eb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if ((pData == NULL) || (Length == 0U))
 8004ebc:	e006      	b.n	8004ecc <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2202      	movs	r2, #2
 8004ec2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ((pData == NULL) || (Length == 0U))
 8004ec6:	e001      	b.n	8004ecc <HAL_TIM_IC_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e0e9      	b.n	80050a0 <HAL_TIM_IC_Start_DMA+0x2fc>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	68b9      	ldr	r1, [r7, #8]
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f003 fa52 	bl	800837e <TIM_CCxChannelCmd>

  switch (Channel)
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	2b0c      	cmp	r3, #12
 8004ede:	f200 80ad 	bhi.w	800503c <HAL_TIM_IC_Start_DMA+0x298>
 8004ee2:	a201      	add	r2, pc, #4	; (adr r2, 8004ee8 <HAL_TIM_IC_Start_DMA+0x144>)
 8004ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ee8:	08004f1d 	.word	0x08004f1d
 8004eec:	0800503d 	.word	0x0800503d
 8004ef0:	0800503d 	.word	0x0800503d
 8004ef4:	0800503d 	.word	0x0800503d
 8004ef8:	08004f65 	.word	0x08004f65
 8004efc:	0800503d 	.word	0x0800503d
 8004f00:	0800503d 	.word	0x0800503d
 8004f04:	0800503d 	.word	0x0800503d
 8004f08:	08004fad 	.word	0x08004fad
 8004f0c:	0800503d 	.word	0x0800503d
 8004f10:	0800503d 	.word	0x0800503d
 8004f14:	0800503d 	.word	0x0800503d
 8004f18:	08004ff5 	.word	0x08004ff5
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f20:	4a61      	ldr	r2, [pc, #388]	; (80050a8 <HAL_TIM_IC_Start_DMA+0x304>)
 8004f22:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f28:	4a60      	ldr	r2, [pc, #384]	; (80050ac <HAL_TIM_IC_Start_DMA+0x308>)
 8004f2a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f30:	4a5f      	ldr	r2, [pc, #380]	; (80050b0 <HAL_TIM_IC_Start_DMA+0x30c>)
 8004f32:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	3334      	adds	r3, #52	; 0x34
 8004f3e:	4619      	mov	r1, r3
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	887b      	ldrh	r3, [r7, #2]
 8004f44:	f7fc f891 	bl	800106a <HAL_DMA_Start_IT>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d001      	beq.n	8004f52 <HAL_TIM_IC_Start_DMA+0x1ae>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e0a6      	b.n	80050a0 <HAL_TIM_IC_Start_DMA+0x2fc>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	68da      	ldr	r2, [r3, #12]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f60:	60da      	str	r2, [r3, #12]
      break;
 8004f62:	e06e      	b.n	8005042 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f68:	4a4f      	ldr	r2, [pc, #316]	; (80050a8 <HAL_TIM_IC_Start_DMA+0x304>)
 8004f6a:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f70:	4a4e      	ldr	r2, [pc, #312]	; (80050ac <HAL_TIM_IC_Start_DMA+0x308>)
 8004f72:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f78:	4a4d      	ldr	r2, [pc, #308]	; (80050b0 <HAL_TIM_IC_Start_DMA+0x30c>)
 8004f7a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	3338      	adds	r3, #56	; 0x38
 8004f86:	4619      	mov	r1, r3
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	887b      	ldrh	r3, [r7, #2]
 8004f8c:	f7fc f86d 	bl	800106a <HAL_DMA_Start_IT>
 8004f90:	4603      	mov	r3, r0
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d001      	beq.n	8004f9a <HAL_TIM_IC_Start_DMA+0x1f6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e082      	b.n	80050a0 <HAL_TIM_IC_Start_DMA+0x2fc>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	68da      	ldr	r2, [r3, #12]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004fa8:	60da      	str	r2, [r3, #12]
      break;
 8004faa:	e04a      	b.n	8005042 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb0:	4a3d      	ldr	r2, [pc, #244]	; (80050a8 <HAL_TIM_IC_Start_DMA+0x304>)
 8004fb2:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb8:	4a3c      	ldr	r2, [pc, #240]	; (80050ac <HAL_TIM_IC_Start_DMA+0x308>)
 8004fba:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc0:	4a3b      	ldr	r2, [pc, #236]	; (80050b0 <HAL_TIM_IC_Start_DMA+0x30c>)
 8004fc2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	333c      	adds	r3, #60	; 0x3c
 8004fce:	4619      	mov	r1, r3
 8004fd0:	687a      	ldr	r2, [r7, #4]
 8004fd2:	887b      	ldrh	r3, [r7, #2]
 8004fd4:	f7fc f849 	bl	800106a <HAL_DMA_Start_IT>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d001      	beq.n	8004fe2 <HAL_TIM_IC_Start_DMA+0x23e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e05e      	b.n	80050a0 <HAL_TIM_IC_Start_DMA+0x2fc>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	68da      	ldr	r2, [r3, #12]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ff0:	60da      	str	r2, [r3, #12]
      break;
 8004ff2:	e026      	b.n	8005042 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ff8:	4a2b      	ldr	r2, [pc, #172]	; (80050a8 <HAL_TIM_IC_Start_DMA+0x304>)
 8004ffa:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005000:	4a2a      	ldr	r2, [pc, #168]	; (80050ac <HAL_TIM_IC_Start_DMA+0x308>)
 8005002:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005008:	4a29      	ldr	r2, [pc, #164]	; (80050b0 <HAL_TIM_IC_Start_DMA+0x30c>)
 800500a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	3340      	adds	r3, #64	; 0x40
 8005016:	4619      	mov	r1, r3
 8005018:	687a      	ldr	r2, [r7, #4]
 800501a:	887b      	ldrh	r3, [r7, #2]
 800501c:	f7fc f825 	bl	800106a <HAL_DMA_Start_IT>
 8005020:	4603      	mov	r3, r0
 8005022:	2b00      	cmp	r3, #0
 8005024:	d001      	beq.n	800502a <HAL_TIM_IC_Start_DMA+0x286>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e03a      	b.n	80050a0 <HAL_TIM_IC_Start_DMA+0x2fc>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	68da      	ldr	r2, [r3, #12]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005038:	60da      	str	r2, [r3, #12]
      break;
 800503a:	e002      	b.n	8005042 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    default:
      status = HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	75fb      	strb	r3, [r7, #23]
      break;
 8005040:	bf00      	nop
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a1b      	ldr	r2, [pc, #108]	; (80050b4 <HAL_TIM_IC_Start_DMA+0x310>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d00e      	beq.n	800506a <HAL_TIM_IC_Start_DMA+0x2c6>
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005054:	d009      	beq.n	800506a <HAL_TIM_IC_Start_DMA+0x2c6>
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a17      	ldr	r2, [pc, #92]	; (80050b8 <HAL_TIM_IC_Start_DMA+0x314>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d004      	beq.n	800506a <HAL_TIM_IC_Start_DMA+0x2c6>
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a15      	ldr	r2, [pc, #84]	; (80050bc <HAL_TIM_IC_Start_DMA+0x318>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d111      	bne.n	800508e <HAL_TIM_IC_Start_DMA+0x2ea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	f003 0307 	and.w	r3, r3, #7
 8005074:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	2b06      	cmp	r3, #6
 800507a:	d010      	beq.n	800509e <HAL_TIM_IC_Start_DMA+0x2fa>
    {
      __HAL_TIM_ENABLE(htim);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f042 0201 	orr.w	r2, r2, #1
 800508a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800508c:	e007      	b.n	800509e <HAL_TIM_IC_Start_DMA+0x2fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f042 0201 	orr.w	r2, r2, #1
 800509c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800509e:	7dfb      	ldrb	r3, [r7, #23]
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3718      	adds	r7, #24
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}
 80050a8:	0800797d 	.word	0x0800797d
 80050ac:	08007a45 	.word	0x08007a45
 80050b0:	080077db 	.word	0x080077db
 80050b4:	40012c00 	.word	0x40012c00
 80050b8:	40000400 	.word	0x40000400
 80050bc:	40000800 	.word	0x40000800

080050c0 <HAL_TIM_IC_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b084      	sub	sp, #16
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050ca:	2300      	movs	r3, #0
 80050cc:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	2200      	movs	r2, #0
 80050d4:	6839      	ldr	r1, [r7, #0]
 80050d6:	4618      	mov	r0, r3
 80050d8:	f003 f951 	bl	800837e <TIM_CCxChannelCmd>

  switch (Channel)
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	2b0c      	cmp	r3, #12
 80050e0:	d854      	bhi.n	800518c <HAL_TIM_IC_Stop_DMA+0xcc>
 80050e2:	a201      	add	r2, pc, #4	; (adr r2, 80050e8 <HAL_TIM_IC_Stop_DMA+0x28>)
 80050e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050e8:	0800511d 	.word	0x0800511d
 80050ec:	0800518d 	.word	0x0800518d
 80050f0:	0800518d 	.word	0x0800518d
 80050f4:	0800518d 	.word	0x0800518d
 80050f8:	08005139 	.word	0x08005139
 80050fc:	0800518d 	.word	0x0800518d
 8005100:	0800518d 	.word	0x0800518d
 8005104:	0800518d 	.word	0x0800518d
 8005108:	08005155 	.word	0x08005155
 800510c:	0800518d 	.word	0x0800518d
 8005110:	0800518d 	.word	0x0800518d
 8005114:	0800518d 	.word	0x0800518d
 8005118:	08005171 	.word	0x08005171
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	68da      	ldr	r2, [r3, #12]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800512a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005130:	4618      	mov	r0, r3
 8005132:	f7fc f835 	bl	80011a0 <HAL_DMA_Abort_IT>
      break;
 8005136:	e02c      	b.n	8005192 <HAL_TIM_IC_Stop_DMA+0xd2>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	68da      	ldr	r2, [r3, #12]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005146:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800514c:	4618      	mov	r0, r3
 800514e:	f7fc f827 	bl	80011a0 <HAL_DMA_Abort_IT>
      break;
 8005152:	e01e      	b.n	8005192 <HAL_TIM_IC_Stop_DMA+0xd2>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	68da      	ldr	r2, [r3, #12]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005162:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005168:	4618      	mov	r0, r3
 800516a:	f7fc f819 	bl	80011a0 <HAL_DMA_Abort_IT>
      break;
 800516e:	e010      	b.n	8005192 <HAL_TIM_IC_Stop_DMA+0xd2>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	68da      	ldr	r2, [r3, #12]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800517e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005184:	4618      	mov	r0, r3
 8005186:	f7fc f80b 	bl	80011a0 <HAL_DMA_Abort_IT>
      break;
 800518a:	e002      	b.n	8005192 <HAL_TIM_IC_Stop_DMA+0xd2>
    }

    default:
      status = HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	73fb      	strb	r3, [r7, #15]
      break;
 8005190:	bf00      	nop
  }

  if (status == HAL_OK)
 8005192:	7bfb      	ldrb	r3, [r7, #15]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d14f      	bne.n	8005238 <HAL_TIM_IC_Stop_DMA+0x178>
  {
    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	6a1a      	ldr	r2, [r3, #32]
 800519e:	f241 1311 	movw	r3, #4369	; 0x1111
 80051a2:	4013      	ands	r3, r2
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d10f      	bne.n	80051c8 <HAL_TIM_IC_Stop_DMA+0x108>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	6a1a      	ldr	r2, [r3, #32]
 80051ae:	f240 4344 	movw	r3, #1092	; 0x444
 80051b2:	4013      	ands	r3, r2
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d107      	bne.n	80051c8 <HAL_TIM_IC_Stop_DMA+0x108>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f022 0201 	bic.w	r2, r2, #1
 80051c6:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d104      	bne.n	80051d8 <HAL_TIM_IC_Stop_DMA+0x118>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2201      	movs	r2, #1
 80051d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051d6:	e013      	b.n	8005200 <HAL_TIM_IC_Stop_DMA+0x140>
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	2b04      	cmp	r3, #4
 80051dc:	d104      	bne.n	80051e8 <HAL_TIM_IC_Stop_DMA+0x128>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2201      	movs	r2, #1
 80051e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051e6:	e00b      	b.n	8005200 <HAL_TIM_IC_Stop_DMA+0x140>
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	2b08      	cmp	r3, #8
 80051ec:	d104      	bne.n	80051f8 <HAL_TIM_IC_Stop_DMA+0x138>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2201      	movs	r2, #1
 80051f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051f6:	e003      	b.n	8005200 <HAL_TIM_IC_Stop_DMA+0x140>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d104      	bne.n	8005210 <HAL_TIM_IC_Stop_DMA+0x150>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2201      	movs	r2, #1
 800520a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800520e:	e013      	b.n	8005238 <HAL_TIM_IC_Stop_DMA+0x178>
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	2b04      	cmp	r3, #4
 8005214:	d104      	bne.n	8005220 <HAL_TIM_IC_Stop_DMA+0x160>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2201      	movs	r2, #1
 800521a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800521e:	e00b      	b.n	8005238 <HAL_TIM_IC_Stop_DMA+0x178>
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	2b08      	cmp	r3, #8
 8005224:	d104      	bne.n	8005230 <HAL_TIM_IC_Stop_DMA+0x170>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2201      	movs	r2, #1
 800522a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800522e:	e003      	b.n	8005238 <HAL_TIM_IC_Stop_DMA+0x178>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2201      	movs	r2, #1
 8005234:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

  /* Return function status */
  return status;
 8005238:	7bfb      	ldrb	r3, [r7, #15]
}
 800523a:	4618      	mov	r0, r3
 800523c:	3710      	adds	r7, #16
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}

08005242 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8005242:	b580      	push	{r7, lr}
 8005244:	b082      	sub	sp, #8
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]
 800524a:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d101      	bne.n	8005256 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	e041      	b.n	80052da <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800525c:	b2db      	uxtb	r3, r3
 800525e:	2b00      	cmp	r3, #0
 8005260:	d106      	bne.n	8005270 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f000 f87d 	bl	800536a <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2202      	movs	r2, #2
 8005274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	3304      	adds	r3, #4
 8005280:	4619      	mov	r1, r3
 8005282:	4610      	mov	r0, r2
 8005284:	f002 fc5c 	bl	8007b40 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f022 0208 	bic.w	r2, r2, #8
 8005296:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	6819      	ldr	r1, [r3, #0]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	683a      	ldr	r2, [r7, #0]
 80052a4:	430a      	orrs	r2, r1
 80052a6:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2201      	movs	r2, #1
 80052ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2201      	movs	r2, #1
 80052b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2201      	movs	r2, #1
 80052bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2201      	movs	r2, #1
 80052c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2201      	movs	r2, #1
 80052cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2201      	movs	r2, #1
 80052d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052d8:	2300      	movs	r3, #0
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3708      	adds	r7, #8
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}

080052e2 <HAL_TIM_OnePulse_DeInit>:
  * @brief  DeInitializes the TIM One Pulse
  * @param  htim TIM One Pulse handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_DeInit(TIM_HandleTypeDef *htim)
{
 80052e2:	b580      	push	{r7, lr}
 80052e4:	b082      	sub	sp, #8
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2202      	movs	r2, #2
 80052ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	6a1a      	ldr	r2, [r3, #32]
 80052f8:	f241 1311 	movw	r3, #4369	; 0x1111
 80052fc:	4013      	ands	r3, r2
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d10f      	bne.n	8005322 <HAL_TIM_OnePulse_DeInit+0x40>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	6a1a      	ldr	r2, [r3, #32]
 8005308:	f240 4344 	movw	r3, #1092	; 0x444
 800530c:	4013      	ands	r3, r2
 800530e:	2b00      	cmp	r3, #0
 8005310:	d107      	bne.n	8005322 <HAL_TIM_OnePulse_DeInit+0x40>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f022 0201 	bic.w	r2, r2, #1
 8005320:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->OnePulse_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_OnePulse_MspDeInit(htim);
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f000 f82a 	bl	800537c <HAL_TIM_OnePulse_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2200      	movs	r2, #0
 800532c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_RESET);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_RESET);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2200      	movs	r2, #0
 800533c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_RESET);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_RESET);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2200      	movs	r2, #0
 800534c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005360:	2300      	movs	r3, #0
}
 8005362:	4618      	mov	r0, r3
 8005364:	3708      	adds	r7, #8
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}

0800536a <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800536a:	b480      	push	{r7}
 800536c:	b083      	sub	sp, #12
 800536e:	af00      	add	r7, sp, #0
 8005370:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8005372:	bf00      	nop
 8005374:	370c      	adds	r7, #12
 8005376:	46bd      	mov	sp, r7
 8005378:	bc80      	pop	{r7}
 800537a:	4770      	bx	lr

0800537c <HAL_TIM_OnePulse_MspDeInit>:
  * @brief  DeInitializes TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspDeInit(TIM_HandleTypeDef *htim)
{
 800537c:	b480      	push	{r7}
 800537e:	b083      	sub	sp, #12
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspDeInit could be implemented in the user file
   */
}
 8005384:	bf00      	nop
 8005386:	370c      	adds	r7, #12
 8005388:	46bd      	mov	sp, r7
 800538a:	bc80      	pop	{r7}
 800538c:	4770      	bx	lr

0800538e <HAL_TIM_OnePulse_Start>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800538e:	b580      	push	{r7, lr}
 8005390:	b084      	sub	sp, #16
 8005392:	af00      	add	r7, sp, #0
 8005394:	6078      	str	r0, [r7, #4]
 8005396:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800539e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80053a6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80053ae:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80053b6:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80053b8:	7bfb      	ldrb	r3, [r7, #15]
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d108      	bne.n	80053d0 <HAL_TIM_OnePulse_Start+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80053be:	7bbb      	ldrb	r3, [r7, #14]
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	d105      	bne.n	80053d0 <HAL_TIM_OnePulse_Start+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80053c4:	7b7b      	ldrb	r3, [r7, #13]
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d102      	bne.n	80053d0 <HAL_TIM_OnePulse_Start+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80053ca:	7b3b      	ldrb	r3, [r7, #12]
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d001      	beq.n	80053d4 <HAL_TIM_OnePulse_Start+0x46>
  {
    return HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	e02b      	b.n	800542c <HAL_TIM_OnePulse_Start+0x9e>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2202      	movs	r2, #2
 80053d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2202      	movs	r2, #2
 80053e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2202      	movs	r2, #2
 80053e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2202      	movs	r2, #2
 80053f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    whatever the combination, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be enabled together

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	2201      	movs	r2, #1
 80053fa:	2100      	movs	r1, #0
 80053fc:	4618      	mov	r0, r3
 80053fe:	f002 ffbe 	bl	800837e <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	2201      	movs	r2, #1
 8005408:	2104      	movs	r1, #4
 800540a:	4618      	mov	r0, r3
 800540c:	f002 ffb7 	bl	800837e <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a07      	ldr	r2, [pc, #28]	; (8005434 <HAL_TIM_OnePulse_Start+0xa6>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d107      	bne.n	800542a <HAL_TIM_OnePulse_Start+0x9c>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005428:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 800542a:	2300      	movs	r3, #0
}
 800542c:	4618      	mov	r0, r3
 800542e:	3710      	adds	r7, #16
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}
 8005434:	40012c00 	.word	0x40012c00

08005438 <HAL_TIM_OnePulse_Stop>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Stop(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b082      	sub	sp, #8
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	6039      	str	r1, [r7, #0]
  (in the OPM Mode the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2)
  if TIM_CHANNEL_1 is used as output, the TIM_CHANNEL_2 will be used as input and
  if TIM_CHANNEL_1 is used as input, the TIM_CHANNEL_2 will be used as output
  whatever the combination, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be disabled together */

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	2200      	movs	r2, #0
 8005448:	2100      	movs	r1, #0
 800544a:	4618      	mov	r0, r3
 800544c:	f002 ff97 	bl	800837e <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	2200      	movs	r2, #0
 8005456:	2104      	movs	r1, #4
 8005458:	4618      	mov	r0, r3
 800545a:	f002 ff90 	bl	800837e <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a24      	ldr	r2, [pc, #144]	; (80054f4 <HAL_TIM_OnePulse_Stop+0xbc>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d117      	bne.n	8005498 <HAL_TIM_OnePulse_Stop+0x60>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	6a1a      	ldr	r2, [r3, #32]
 800546e:	f241 1311 	movw	r3, #4369	; 0x1111
 8005472:	4013      	ands	r3, r2
 8005474:	2b00      	cmp	r3, #0
 8005476:	d10f      	bne.n	8005498 <HAL_TIM_OnePulse_Stop+0x60>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	6a1a      	ldr	r2, [r3, #32]
 800547e:	f240 4344 	movw	r3, #1092	; 0x444
 8005482:	4013      	ands	r3, r2
 8005484:	2b00      	cmp	r3, #0
 8005486:	d107      	bne.n	8005498 <HAL_TIM_OnePulse_Stop+0x60>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005496:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	6a1a      	ldr	r2, [r3, #32]
 800549e:	f241 1311 	movw	r3, #4369	; 0x1111
 80054a2:	4013      	ands	r3, r2
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d10f      	bne.n	80054c8 <HAL_TIM_OnePulse_Stop+0x90>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	6a1a      	ldr	r2, [r3, #32]
 80054ae:	f240 4344 	movw	r3, #1092	; 0x444
 80054b2:	4013      	ands	r3, r2
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d107      	bne.n	80054c8 <HAL_TIM_OnePulse_Stop+0x90>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f022 0201 	bic.w	r2, r2, #1
 80054c6:	601a      	str	r2, [r3, #0]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2201      	movs	r2, #1
 80054cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2201      	movs	r2, #1
 80054d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2201      	movs	r2, #1
 80054dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2201      	movs	r2, #1
 80054e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80054e8:	2300      	movs	r3, #0
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3708      	adds	r7, #8
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}
 80054f2:	bf00      	nop
 80054f4:	40012c00 	.word	0x40012c00

080054f8 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b084      	sub	sp, #16
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
 8005500:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005508:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005510:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005518:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005520:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005522:	7bfb      	ldrb	r3, [r7, #15]
 8005524:	2b01      	cmp	r3, #1
 8005526:	d108      	bne.n	800553a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005528:	7bbb      	ldrb	r3, [r7, #14]
 800552a:	2b01      	cmp	r3, #1
 800552c:	d105      	bne.n	800553a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800552e:	7b7b      	ldrb	r3, [r7, #13]
 8005530:	2b01      	cmp	r3, #1
 8005532:	d102      	bne.n	800553a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005534:	7b3b      	ldrb	r3, [r7, #12]
 8005536:	2b01      	cmp	r3, #1
 8005538:	d001      	beq.n	800553e <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	e03b      	b.n	80055b6 <HAL_TIM_OnePulse_Start_IT+0xbe>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2202      	movs	r2, #2
 8005542:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2202      	movs	r2, #2
 800554a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2202      	movs	r2, #2
 8005552:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2202      	movs	r2, #2
 800555a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	68da      	ldr	r2, [r3, #12]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f042 0202 	orr.w	r2, r2, #2
 800556c:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	68da      	ldr	r2, [r3, #12]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f042 0204 	orr.w	r2, r2, #4
 800557c:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	2201      	movs	r2, #1
 8005584:	2100      	movs	r1, #0
 8005586:	4618      	mov	r0, r3
 8005588:	f002 fef9 	bl	800837e <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	2201      	movs	r2, #1
 8005592:	2104      	movs	r1, #4
 8005594:	4618      	mov	r0, r3
 8005596:	f002 fef2 	bl	800837e <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a08      	ldr	r2, [pc, #32]	; (80055c0 <HAL_TIM_OnePulse_Start_IT+0xc8>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d107      	bne.n	80055b4 <HAL_TIM_OnePulse_Start_IT+0xbc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80055b2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 80055b4:	2300      	movs	r3, #0
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3710      	adds	r7, #16
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}
 80055be:	bf00      	nop
 80055c0:	40012c00 	.word	0x40012c00

080055c4 <HAL_TIM_OnePulse_Stop_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Stop_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b082      	sub	sp, #8
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Disable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	68da      	ldr	r2, [r3, #12]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f022 0202 	bic.w	r2, r2, #2
 80055dc:	60da      	str	r2, [r3, #12]

  /* Disable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	68da      	ldr	r2, [r3, #12]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f022 0204 	bic.w	r2, r2, #4
 80055ec:	60da      	str	r2, [r3, #12]
  /* Disable the Capture compare and the Input Capture channels
  (in the OPM Mode the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2)
  if TIM_CHANNEL_1 is used as output, the TIM_CHANNEL_2 will be used as input and
  if TIM_CHANNEL_1 is used as input, the TIM_CHANNEL_2 will be used as output
  whatever the combination, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be disabled together */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	2200      	movs	r2, #0
 80055f4:	2100      	movs	r1, #0
 80055f6:	4618      	mov	r0, r3
 80055f8:	f002 fec1 	bl	800837e <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	2200      	movs	r2, #0
 8005602:	2104      	movs	r1, #4
 8005604:	4618      	mov	r0, r3
 8005606:	f002 feba 	bl	800837e <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a24      	ldr	r2, [pc, #144]	; (80056a0 <HAL_TIM_OnePulse_Stop_IT+0xdc>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d117      	bne.n	8005644 <HAL_TIM_OnePulse_Stop_IT+0x80>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	6a1a      	ldr	r2, [r3, #32]
 800561a:	f241 1311 	movw	r3, #4369	; 0x1111
 800561e:	4013      	ands	r3, r2
 8005620:	2b00      	cmp	r3, #0
 8005622:	d10f      	bne.n	8005644 <HAL_TIM_OnePulse_Stop_IT+0x80>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	6a1a      	ldr	r2, [r3, #32]
 800562a:	f240 4344 	movw	r3, #1092	; 0x444
 800562e:	4013      	ands	r3, r2
 8005630:	2b00      	cmp	r3, #0
 8005632:	d107      	bne.n	8005644 <HAL_TIM_OnePulse_Stop_IT+0x80>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005642:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	6a1a      	ldr	r2, [r3, #32]
 800564a:	f241 1311 	movw	r3, #4369	; 0x1111
 800564e:	4013      	ands	r3, r2
 8005650:	2b00      	cmp	r3, #0
 8005652:	d10f      	bne.n	8005674 <HAL_TIM_OnePulse_Stop_IT+0xb0>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	6a1a      	ldr	r2, [r3, #32]
 800565a:	f240 4344 	movw	r3, #1092	; 0x444
 800565e:	4013      	ands	r3, r2
 8005660:	2b00      	cmp	r3, #0
 8005662:	d107      	bne.n	8005674 <HAL_TIM_OnePulse_Stop_IT+0xb0>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f022 0201 	bic.w	r2, r2, #1
 8005672:	601a      	str	r2, [r3, #0]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2201      	movs	r2, #1
 8005680:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2201      	movs	r2, #1
 8005688:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2201      	movs	r2, #1
 8005690:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8005694:	2300      	movs	r3, #0
}
 8005696:	4618      	mov	r0, r3
 8005698:	3708      	adds	r7, #8
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}
 800569e:	bf00      	nop
 80056a0:	40012c00 	.word	0x40012c00

080056a4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b086      	sub	sp, #24
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d101      	bne.n	80056b8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	e093      	b.n	80057e0 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d106      	bne.n	80056d2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f000 f8cf 	bl	8005870 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2202      	movs	r2, #2
 80056d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	687a      	ldr	r2, [r7, #4]
 80056e2:	6812      	ldr	r2, [r2, #0]
 80056e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056e8:	f023 0307 	bic.w	r3, r3, #7
 80056ec:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	3304      	adds	r3, #4
 80056f6:	4619      	mov	r1, r3
 80056f8:	4610      	mov	r0, r2
 80056fa:	f002 fa21 	bl	8007b40 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	699b      	ldr	r3, [r3, #24]
 800570c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	6a1b      	ldr	r3, [r3, #32]
 8005714:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	697a      	ldr	r2, [r7, #20]
 800571c:	4313      	orrs	r3, r2
 800571e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005726:	f023 0303 	bic.w	r3, r3, #3
 800572a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	689a      	ldr	r2, [r3, #8]
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	699b      	ldr	r3, [r3, #24]
 8005734:	021b      	lsls	r3, r3, #8
 8005736:	4313      	orrs	r3, r2
 8005738:	693a      	ldr	r2, [r7, #16]
 800573a:	4313      	orrs	r3, r2
 800573c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005744:	f023 030c 	bic.w	r3, r3, #12
 8005748:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005750:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005754:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	68da      	ldr	r2, [r3, #12]
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	69db      	ldr	r3, [r3, #28]
 800575e:	021b      	lsls	r3, r3, #8
 8005760:	4313      	orrs	r3, r2
 8005762:	693a      	ldr	r2, [r7, #16]
 8005764:	4313      	orrs	r3, r2
 8005766:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	691b      	ldr	r3, [r3, #16]
 800576c:	011a      	lsls	r2, r3, #4
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	6a1b      	ldr	r3, [r3, #32]
 8005772:	031b      	lsls	r3, r3, #12
 8005774:	4313      	orrs	r3, r2
 8005776:	693a      	ldr	r2, [r7, #16]
 8005778:	4313      	orrs	r3, r2
 800577a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005782:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	685a      	ldr	r2, [r3, #4]
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	695b      	ldr	r3, [r3, #20]
 800578c:	011b      	lsls	r3, r3, #4
 800578e:	4313      	orrs	r3, r2
 8005790:	68fa      	ldr	r2, [r7, #12]
 8005792:	4313      	orrs	r3, r2
 8005794:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	697a      	ldr	r2, [r7, #20]
 800579c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	693a      	ldr	r2, [r7, #16]
 80057a4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	68fa      	ldr	r2, [r7, #12]
 80057ac:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2201      	movs	r2, #1
 80057b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2201      	movs	r2, #1
 80057ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2201      	movs	r2, #1
 80057c2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2201      	movs	r2, #1
 80057ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2201      	movs	r2, #1
 80057d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2201      	movs	r2, #1
 80057da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057de:	2300      	movs	r3, #0
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3718      	adds	r7, #24
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}

080057e8 <HAL_TIM_Encoder_DeInit>:
  * @brief  DeInitializes the TIM Encoder interface
  * @param  htim TIM Encoder Interface handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_DeInit(TIM_HandleTypeDef *htim)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b082      	sub	sp, #8
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2202      	movs	r2, #2
 80057f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	6a1a      	ldr	r2, [r3, #32]
 80057fe:	f241 1311 	movw	r3, #4369	; 0x1111
 8005802:	4013      	ands	r3, r2
 8005804:	2b00      	cmp	r3, #0
 8005806:	d10f      	bne.n	8005828 <HAL_TIM_Encoder_DeInit+0x40>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	6a1a      	ldr	r2, [r3, #32]
 800580e:	f240 4344 	movw	r3, #1092	; 0x444
 8005812:	4013      	ands	r3, r2
 8005814:	2b00      	cmp	r3, #0
 8005816:	d107      	bne.n	8005828 <HAL_TIM_Encoder_DeInit+0x40>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	681a      	ldr	r2, [r3, #0]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f022 0201 	bic.w	r2, r2, #1
 8005826:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Encoder_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Encoder_MspDeInit(htim);
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f000 f82a 	bl	8005882 <HAL_TIM_Encoder_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_RESET);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_RESET);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2200      	movs	r2, #0
 8005842:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_RESET);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2200      	movs	r2, #0
 800584a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_RESET);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2200      	movs	r2, #0
 8005852:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2200      	movs	r2, #0
 800585a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005866:	2300      	movs	r3, #0
}
 8005868:	4618      	mov	r0, r3
 800586a:	3708      	adds	r7, #8
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}

08005870 <HAL_TIM_Encoder_MspInit>:
  * @brief  Initializes the TIM Encoder Interface MSP.
  * @param  htim TIM Encoder Interface handle
  * @retval None
  */
__weak void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef *htim)
{
 8005870:	b480      	push	{r7}
 8005872:	b083      	sub	sp, #12
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Encoder_MspInit could be implemented in the user file
   */
}
 8005878:	bf00      	nop
 800587a:	370c      	adds	r7, #12
 800587c:	46bd      	mov	sp, r7
 800587e:	bc80      	pop	{r7}
 8005880:	4770      	bx	lr

08005882 <HAL_TIM_Encoder_MspDeInit>:
  * @brief  DeInitializes TIM Encoder Interface MSP.
  * @param  htim TIM Encoder Interface handle
  * @retval None
  */
__weak void HAL_TIM_Encoder_MspDeInit(TIM_HandleTypeDef *htim)
{
 8005882:	b480      	push	{r7}
 8005884:	b083      	sub	sp, #12
 8005886:	af00      	add	r7, sp, #0
 8005888:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Encoder_MspDeInit could be implemented in the user file
   */
}
 800588a:	bf00      	nop
 800588c:	370c      	adds	r7, #12
 800588e:	46bd      	mov	sp, r7
 8005890:	bc80      	pop	{r7}
 8005892:	4770      	bx	lr

08005894 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b084      	sub	sp, #16
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058a4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80058ac:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80058b4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80058bc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d110      	bne.n	80058e6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80058c4:	7bfb      	ldrb	r3, [r7, #15]
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d102      	bne.n	80058d0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80058ca:	7b7b      	ldrb	r3, [r7, #13]
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d001      	beq.n	80058d4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	e069      	b.n	80059a8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2202      	movs	r2, #2
 80058d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2202      	movs	r2, #2
 80058e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80058e4:	e031      	b.n	800594a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	2b04      	cmp	r3, #4
 80058ea:	d110      	bne.n	800590e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80058ec:	7bbb      	ldrb	r3, [r7, #14]
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d102      	bne.n	80058f8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80058f2:	7b3b      	ldrb	r3, [r7, #12]
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d001      	beq.n	80058fc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	e055      	b.n	80059a8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2202      	movs	r2, #2
 8005900:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2202      	movs	r2, #2
 8005908:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800590c:	e01d      	b.n	800594a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800590e:	7bfb      	ldrb	r3, [r7, #15]
 8005910:	2b01      	cmp	r3, #1
 8005912:	d108      	bne.n	8005926 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005914:	7bbb      	ldrb	r3, [r7, #14]
 8005916:	2b01      	cmp	r3, #1
 8005918:	d105      	bne.n	8005926 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800591a:	7b7b      	ldrb	r3, [r7, #13]
 800591c:	2b01      	cmp	r3, #1
 800591e:	d102      	bne.n	8005926 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005920:	7b3b      	ldrb	r3, [r7, #12]
 8005922:	2b01      	cmp	r3, #1
 8005924:	d001      	beq.n	800592a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	e03e      	b.n	80059a8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2202      	movs	r2, #2
 800592e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2202      	movs	r2, #2
 8005936:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2202      	movs	r2, #2
 800593e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2202      	movs	r2, #2
 8005946:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d003      	beq.n	8005958 <HAL_TIM_Encoder_Start+0xc4>
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	2b04      	cmp	r3, #4
 8005954:	d008      	beq.n	8005968 <HAL_TIM_Encoder_Start+0xd4>
 8005956:	e00f      	b.n	8005978 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	2201      	movs	r2, #1
 800595e:	2100      	movs	r1, #0
 8005960:	4618      	mov	r0, r3
 8005962:	f002 fd0c 	bl	800837e <TIM_CCxChannelCmd>
      break;
 8005966:	e016      	b.n	8005996 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	2201      	movs	r2, #1
 800596e:	2104      	movs	r1, #4
 8005970:	4618      	mov	r0, r3
 8005972:	f002 fd04 	bl	800837e <TIM_CCxChannelCmd>
      break;
 8005976:	e00e      	b.n	8005996 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	2201      	movs	r2, #1
 800597e:	2100      	movs	r1, #0
 8005980:	4618      	mov	r0, r3
 8005982:	f002 fcfc 	bl	800837e <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	2201      	movs	r2, #1
 800598c:	2104      	movs	r1, #4
 800598e:	4618      	mov	r0, r3
 8005990:	f002 fcf5 	bl	800837e <TIM_CCxChannelCmd>
      break;
 8005994:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f042 0201 	orr.w	r2, r2, #1
 80059a4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80059a6:	2300      	movs	r3, #0
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3710      	adds	r7, #16
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}

080059b0 <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b082      	sub	sp, #8
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d003      	beq.n	80059c8 <HAL_TIM_Encoder_Stop+0x18>
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	2b04      	cmp	r3, #4
 80059c4:	d008      	beq.n	80059d8 <HAL_TIM_Encoder_Stop+0x28>
 80059c6:	e00f      	b.n	80059e8 <HAL_TIM_Encoder_Stop+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	2200      	movs	r2, #0
 80059ce:	2100      	movs	r1, #0
 80059d0:	4618      	mov	r0, r3
 80059d2:	f002 fcd4 	bl	800837e <TIM_CCxChannelCmd>
      break;
 80059d6:	e016      	b.n	8005a06 <HAL_TIM_Encoder_Stop+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	2200      	movs	r2, #0
 80059de:	2104      	movs	r1, #4
 80059e0:	4618      	mov	r0, r3
 80059e2:	f002 fccc 	bl	800837e <TIM_CCxChannelCmd>
      break;
 80059e6:	e00e      	b.n	8005a06 <HAL_TIM_Encoder_Stop+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	2200      	movs	r2, #0
 80059ee:	2100      	movs	r1, #0
 80059f0:	4618      	mov	r0, r3
 80059f2:	f002 fcc4 	bl	800837e <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	2200      	movs	r2, #0
 80059fc:	2104      	movs	r1, #4
 80059fe:	4618      	mov	r0, r3
 8005a00:	f002 fcbd 	bl	800837e <TIM_CCxChannelCmd>
      break;
 8005a04:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	6a1a      	ldr	r2, [r3, #32]
 8005a0c:	f241 1311 	movw	r3, #4369	; 0x1111
 8005a10:	4013      	ands	r3, r2
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d10f      	bne.n	8005a36 <HAL_TIM_Encoder_Stop+0x86>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	6a1a      	ldr	r2, [r3, #32]
 8005a1c:	f240 4344 	movw	r3, #1092	; 0x444
 8005a20:	4013      	ands	r3, r2
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d107      	bne.n	8005a36 <HAL_TIM_Encoder_Stop+0x86>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	681a      	ldr	r2, [r3, #0]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f022 0201 	bic.w	r2, r2, #1
 8005a34:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d002      	beq.n	8005a42 <HAL_TIM_Encoder_Stop+0x92>
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	2b04      	cmp	r3, #4
 8005a40:	d138      	bne.n	8005ab4 <HAL_TIM_Encoder_Stop+0x104>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d104      	bne.n	8005a52 <HAL_TIM_Encoder_Stop+0xa2>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a50:	e013      	b.n	8005a7a <HAL_TIM_Encoder_Stop+0xca>
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	2b04      	cmp	r3, #4
 8005a56:	d104      	bne.n	8005a62 <HAL_TIM_Encoder_Stop+0xb2>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a60:	e00b      	b.n	8005a7a <HAL_TIM_Encoder_Stop+0xca>
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	2b08      	cmp	r3, #8
 8005a66:	d104      	bne.n	8005a72 <HAL_TIM_Encoder_Stop+0xc2>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a70:	e003      	b.n	8005a7a <HAL_TIM_Encoder_Stop+0xca>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2201      	movs	r2, #1
 8005a76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d104      	bne.n	8005a8a <HAL_TIM_Encoder_Stop+0xda>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2201      	movs	r2, #1
 8005a84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a88:	e024      	b.n	8005ad4 <HAL_TIM_Encoder_Stop+0x124>
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	2b04      	cmp	r3, #4
 8005a8e:	d104      	bne.n	8005a9a <HAL_TIM_Encoder_Stop+0xea>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2201      	movs	r2, #1
 8005a94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a98:	e01c      	b.n	8005ad4 <HAL_TIM_Encoder_Stop+0x124>
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	2b08      	cmp	r3, #8
 8005a9e:	d104      	bne.n	8005aaa <HAL_TIM_Encoder_Stop+0xfa>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005aa8:	e014      	b.n	8005ad4 <HAL_TIM_Encoder_Stop+0x124>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2201      	movs	r2, #1
 8005aae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ab2:	e00f      	b.n	8005ad4 <HAL_TIM_Encoder_Stop+0x124>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return HAL_OK;
 8005ad4:	2300      	movs	r3, #0
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3708      	adds	r7, #8
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}

08005ade <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ade:	b580      	push	{r7, lr}
 8005ae0:	b084      	sub	sp, #16
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	6078      	str	r0, [r7, #4]
 8005ae6:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005aee:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005af6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005afe:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005b06:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d110      	bne.n	8005b30 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b0e:	7bfb      	ldrb	r3, [r7, #15]
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d102      	bne.n	8005b1a <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005b14:	7b7b      	ldrb	r3, [r7, #13]
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	d001      	beq.n	8005b1e <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e089      	b.n	8005c32 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2202      	movs	r2, #2
 8005b22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2202      	movs	r2, #2
 8005b2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b2e:	e031      	b.n	8005b94 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	2b04      	cmp	r3, #4
 8005b34:	d110      	bne.n	8005b58 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b36:	7bbb      	ldrb	r3, [r7, #14]
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d102      	bne.n	8005b42 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005b3c:	7b3b      	ldrb	r3, [r7, #12]
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	d001      	beq.n	8005b46 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	e075      	b.n	8005c32 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2202      	movs	r2, #2
 8005b4a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2202      	movs	r2, #2
 8005b52:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b56:	e01d      	b.n	8005b94 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b58:	7bfb      	ldrb	r3, [r7, #15]
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d108      	bne.n	8005b70 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b5e:	7bbb      	ldrb	r3, [r7, #14]
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d105      	bne.n	8005b70 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b64:	7b7b      	ldrb	r3, [r7, #13]
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d102      	bne.n	8005b70 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005b6a:	7b3b      	ldrb	r3, [r7, #12]
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d001      	beq.n	8005b74 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8005b70:	2301      	movs	r3, #1
 8005b72:	e05e      	b.n	8005c32 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2202      	movs	r2, #2
 8005b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2202      	movs	r2, #2
 8005b80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2202      	movs	r2, #2
 8005b88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2202      	movs	r2, #2
 8005b90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d003      	beq.n	8005ba2 <HAL_TIM_Encoder_Start_IT+0xc4>
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	2b04      	cmp	r3, #4
 8005b9e:	d010      	beq.n	8005bc2 <HAL_TIM_Encoder_Start_IT+0xe4>
 8005ba0:	e01f      	b.n	8005be2 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	2100      	movs	r1, #0
 8005baa:	4618      	mov	r0, r3
 8005bac:	f002 fbe7 	bl	800837e <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	68da      	ldr	r2, [r3, #12]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f042 0202 	orr.w	r2, r2, #2
 8005bbe:	60da      	str	r2, [r3, #12]
      break;
 8005bc0:	e02e      	b.n	8005c20 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	2104      	movs	r1, #4
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f002 fbd7 	bl	800837e <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	68da      	ldr	r2, [r3, #12]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f042 0204 	orr.w	r2, r2, #4
 8005bde:	60da      	str	r2, [r3, #12]
      break;
 8005be0:	e01e      	b.n	8005c20 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	2201      	movs	r2, #1
 8005be8:	2100      	movs	r1, #0
 8005bea:	4618      	mov	r0, r3
 8005bec:	f002 fbc7 	bl	800837e <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	2104      	movs	r1, #4
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f002 fbc0 	bl	800837e <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	68da      	ldr	r2, [r3, #12]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f042 0202 	orr.w	r2, r2, #2
 8005c0c:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	68da      	ldr	r2, [r3, #12]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f042 0204 	orr.w	r2, r2, #4
 8005c1c:	60da      	str	r2, [r3, #12]
      break;
 8005c1e:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f042 0201 	orr.w	r2, r2, #1
 8005c2e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005c30:	2300      	movs	r3, #0
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3710      	adds	r7, #16
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}

08005c3a <HAL_TIM_Encoder_Stop_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c3a:	b580      	push	{r7, lr}
 8005c3c:	b082      	sub	sp, #8
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	6078      	str	r0, [r7, #4]
 8005c42:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  if (Channel == TIM_CHANNEL_1)
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d10f      	bne.n	8005c6a <HAL_TIM_Encoder_Stop_IT+0x30>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	2100      	movs	r1, #0
 8005c52:	4618      	mov	r0, r3
 8005c54:	f002 fb93 	bl	800837e <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 1 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	68da      	ldr	r2, [r3, #12]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f022 0202 	bic.w	r2, r2, #2
 8005c66:	60da      	str	r2, [r3, #12]
 8005c68:	e030      	b.n	8005ccc <HAL_TIM_Encoder_Stop_IT+0x92>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	2b04      	cmp	r3, #4
 8005c6e:	d10f      	bne.n	8005c90 <HAL_TIM_Encoder_Stop_IT+0x56>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	2200      	movs	r2, #0
 8005c76:	2104      	movs	r1, #4
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f002 fb80 	bl	800837e <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 2 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	68da      	ldr	r2, [r3, #12]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f022 0204 	bic.w	r2, r2, #4
 8005c8c:	60da      	str	r2, [r3, #12]
 8005c8e:	e01d      	b.n	8005ccc <HAL_TIM_Encoder_Stop_IT+0x92>
  }
  else
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	2200      	movs	r2, #0
 8005c96:	2100      	movs	r1, #0
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f002 fb70 	bl	800837e <TIM_CCxChannelCmd>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	2104      	movs	r1, #4
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f002 fb69 	bl	800837e <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 1 and 2 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	68da      	ldr	r2, [r3, #12]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f022 0202 	bic.w	r2, r2, #2
 8005cba:	60da      	str	r2, [r3, #12]
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	68da      	ldr	r2, [r3, #12]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f022 0204 	bic.w	r2, r2, #4
 8005cca:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	6a1a      	ldr	r2, [r3, #32]
 8005cd2:	f241 1311 	movw	r3, #4369	; 0x1111
 8005cd6:	4013      	ands	r3, r2
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d10f      	bne.n	8005cfc <HAL_TIM_Encoder_Stop_IT+0xc2>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	6a1a      	ldr	r2, [r3, #32]
 8005ce2:	f240 4344 	movw	r3, #1092	; 0x444
 8005ce6:	4013      	ands	r3, r2
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d107      	bne.n	8005cfc <HAL_TIM_Encoder_Stop_IT+0xc2>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f022 0201 	bic.w	r2, r2, #1
 8005cfa:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d002      	beq.n	8005d08 <HAL_TIM_Encoder_Stop_IT+0xce>
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	2b04      	cmp	r3, #4
 8005d06:	d138      	bne.n	8005d7a <HAL_TIM_Encoder_Stop_IT+0x140>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d104      	bne.n	8005d18 <HAL_TIM_Encoder_Stop_IT+0xde>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2201      	movs	r2, #1
 8005d12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d16:	e013      	b.n	8005d40 <HAL_TIM_Encoder_Stop_IT+0x106>
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	2b04      	cmp	r3, #4
 8005d1c:	d104      	bne.n	8005d28 <HAL_TIM_Encoder_Stop_IT+0xee>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2201      	movs	r2, #1
 8005d22:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d26:	e00b      	b.n	8005d40 <HAL_TIM_Encoder_Stop_IT+0x106>
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	2b08      	cmp	r3, #8
 8005d2c:	d104      	bne.n	8005d38 <HAL_TIM_Encoder_Stop_IT+0xfe>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2201      	movs	r2, #1
 8005d32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d36:	e003      	b.n	8005d40 <HAL_TIM_Encoder_Stop_IT+0x106>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d104      	bne.n	8005d50 <HAL_TIM_Encoder_Stop_IT+0x116>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2201      	movs	r2, #1
 8005d4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d4e:	e024      	b.n	8005d9a <HAL_TIM_Encoder_Stop_IT+0x160>
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	2b04      	cmp	r3, #4
 8005d54:	d104      	bne.n	8005d60 <HAL_TIM_Encoder_Stop_IT+0x126>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2201      	movs	r2, #1
 8005d5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d5e:	e01c      	b.n	8005d9a <HAL_TIM_Encoder_Stop_IT+0x160>
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	2b08      	cmp	r3, #8
 8005d64:	d104      	bne.n	8005d70 <HAL_TIM_Encoder_Stop_IT+0x136>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2201      	movs	r2, #1
 8005d6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d6e:	e014      	b.n	8005d9a <HAL_TIM_Encoder_Stop_IT+0x160>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d78:	e00f      	b.n	8005d9a <HAL_TIM_Encoder_Stop_IT+0x160>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2201      	movs	r2, #1
 8005d86:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2201      	movs	r2, #1
 8005d96:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return HAL_OK;
 8005d9a:	2300      	movs	r3, #0
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3708      	adds	r7, #8
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}

08005da4 <HAL_TIM_Encoder_Start_DMA>:
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData1,
                                            uint32_t *pData2, uint16_t Length)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b086      	sub	sp, #24
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	60f8      	str	r0, [r7, #12]
 8005dac:	60b9      	str	r1, [r7, #8]
 8005dae:	607a      	str	r2, [r7, #4]
 8005db0:	603b      	str	r3, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005db8:	75fb      	strb	r3, [r7, #23]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005dc0:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005dc8:	757b      	strb	r3, [r7, #21]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005dd0:	753b      	strb	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d120      	bne.n	8005e1a <HAL_TIM_Encoder_Start_DMA+0x76>
  {
    if ((channel_1_state == HAL_TIM_CHANNEL_STATE_BUSY)
 8005dd8:	7dfb      	ldrb	r3, [r7, #23]
 8005dda:	2b02      	cmp	r3, #2
 8005ddc:	d002      	beq.n	8005de4 <HAL_TIM_Encoder_Start_DMA+0x40>
        || (complementary_channel_1_state == HAL_TIM_CHANNEL_STATE_BUSY))
 8005dde:	7d7b      	ldrb	r3, [r7, #21]
 8005de0:	2b02      	cmp	r3, #2
 8005de2:	d101      	bne.n	8005de8 <HAL_TIM_Encoder_Start_DMA+0x44>
    {
      return HAL_BUSY;
 8005de4:	2302      	movs	r3, #2
 8005de6:	e13f      	b.n	8006068 <HAL_TIM_Encoder_Start_DMA+0x2c4>
    }
    else if ((channel_1_state == HAL_TIM_CHANNEL_STATE_READY)
 8005de8:	7dfb      	ldrb	r3, [r7, #23]
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d113      	bne.n	8005e16 <HAL_TIM_Encoder_Start_DMA+0x72>
             && (complementary_channel_1_state == HAL_TIM_CHANNEL_STATE_READY))
 8005dee:	7d7b      	ldrb	r3, [r7, #21]
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d110      	bne.n	8005e16 <HAL_TIM_Encoder_Start_DMA+0x72>
    {
      if ((pData1 == NULL) || (Length == 0U))
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d002      	beq.n	8005e00 <HAL_TIM_Encoder_Start_DMA+0x5c>
 8005dfa:	8c3b      	ldrh	r3, [r7, #32]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d101      	bne.n	8005e04 <HAL_TIM_Encoder_Start_DMA+0x60>
      {
        return HAL_ERROR;
 8005e00:	2301      	movs	r3, #1
 8005e02:	e131      	b.n	8006068 <HAL_TIM_Encoder_Start_DMA+0x2c4>
      }
      else
      {
        TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2202      	movs	r2, #2
 8005e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2202      	movs	r2, #2
 8005e10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      if ((pData1 == NULL) || (Length == 0U))
 8005e14:	e05d      	b.n	8005ed2 <HAL_TIM_Encoder_Start_DMA+0x12e>
      }
    }
    else
    {
      return HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	e126      	b.n	8006068 <HAL_TIM_Encoder_Start_DMA+0x2c4>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	2b04      	cmp	r3, #4
 8005e1e:	d120      	bne.n	8005e62 <HAL_TIM_Encoder_Start_DMA+0xbe>
  {
    if ((channel_2_state == HAL_TIM_CHANNEL_STATE_BUSY)
 8005e20:	7dbb      	ldrb	r3, [r7, #22]
 8005e22:	2b02      	cmp	r3, #2
 8005e24:	d002      	beq.n	8005e2c <HAL_TIM_Encoder_Start_DMA+0x88>
        || (complementary_channel_2_state == HAL_TIM_CHANNEL_STATE_BUSY))
 8005e26:	7d3b      	ldrb	r3, [r7, #20]
 8005e28:	2b02      	cmp	r3, #2
 8005e2a:	d101      	bne.n	8005e30 <HAL_TIM_Encoder_Start_DMA+0x8c>
    {
      return HAL_BUSY;
 8005e2c:	2302      	movs	r3, #2
 8005e2e:	e11b      	b.n	8006068 <HAL_TIM_Encoder_Start_DMA+0x2c4>
    }
    else if ((channel_2_state == HAL_TIM_CHANNEL_STATE_READY)
 8005e30:	7dbb      	ldrb	r3, [r7, #22]
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	d113      	bne.n	8005e5e <HAL_TIM_Encoder_Start_DMA+0xba>
             && (complementary_channel_2_state == HAL_TIM_CHANNEL_STATE_READY))
 8005e36:	7d3b      	ldrb	r3, [r7, #20]
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d110      	bne.n	8005e5e <HAL_TIM_Encoder_Start_DMA+0xba>
    {
      if ((pData2 == NULL) || (Length == 0U))
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d002      	beq.n	8005e48 <HAL_TIM_Encoder_Start_DMA+0xa4>
 8005e42:	8c3b      	ldrh	r3, [r7, #32]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d101      	bne.n	8005e4c <HAL_TIM_Encoder_Start_DMA+0xa8>
      {
        return HAL_ERROR;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	e10d      	b.n	8006068 <HAL_TIM_Encoder_Start_DMA+0x2c4>
      }
      else
      {
        TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2202      	movs	r2, #2
 8005e50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
        TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2202      	movs	r2, #2
 8005e58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      if ((pData2 == NULL) || (Length == 0U))
 8005e5c:	e039      	b.n	8005ed2 <HAL_TIM_Encoder_Start_DMA+0x12e>
      }
    }
    else
    {
      return HAL_ERROR;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	e102      	b.n	8006068 <HAL_TIM_Encoder_Start_DMA+0x2c4>
    }
  }
  else
  {
    if ((channel_1_state == HAL_TIM_CHANNEL_STATE_BUSY)
 8005e62:	7dfb      	ldrb	r3, [r7, #23]
 8005e64:	2b02      	cmp	r3, #2
 8005e66:	d008      	beq.n	8005e7a <HAL_TIM_Encoder_Start_DMA+0xd6>
        || (channel_2_state == HAL_TIM_CHANNEL_STATE_BUSY)
 8005e68:	7dbb      	ldrb	r3, [r7, #22]
 8005e6a:	2b02      	cmp	r3, #2
 8005e6c:	d005      	beq.n	8005e7a <HAL_TIM_Encoder_Start_DMA+0xd6>
        || (complementary_channel_1_state == HAL_TIM_CHANNEL_STATE_BUSY)
 8005e6e:	7d7b      	ldrb	r3, [r7, #21]
 8005e70:	2b02      	cmp	r3, #2
 8005e72:	d002      	beq.n	8005e7a <HAL_TIM_Encoder_Start_DMA+0xd6>
        || (complementary_channel_2_state == HAL_TIM_CHANNEL_STATE_BUSY))
 8005e74:	7d3b      	ldrb	r3, [r7, #20]
 8005e76:	2b02      	cmp	r3, #2
 8005e78:	d101      	bne.n	8005e7e <HAL_TIM_Encoder_Start_DMA+0xda>
    {
      return HAL_BUSY;
 8005e7a:	2302      	movs	r3, #2
 8005e7c:	e0f4      	b.n	8006068 <HAL_TIM_Encoder_Start_DMA+0x2c4>
    }
    else if ((channel_1_state == HAL_TIM_CHANNEL_STATE_READY)
 8005e7e:	7dfb      	ldrb	r3, [r7, #23]
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d124      	bne.n	8005ece <HAL_TIM_Encoder_Start_DMA+0x12a>
             && (channel_2_state == HAL_TIM_CHANNEL_STATE_READY)
 8005e84:	7dbb      	ldrb	r3, [r7, #22]
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	d121      	bne.n	8005ece <HAL_TIM_Encoder_Start_DMA+0x12a>
             && (complementary_channel_1_state == HAL_TIM_CHANNEL_STATE_READY)
 8005e8a:	7d7b      	ldrb	r3, [r7, #21]
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d11e      	bne.n	8005ece <HAL_TIM_Encoder_Start_DMA+0x12a>
             && (complementary_channel_2_state == HAL_TIM_CHANNEL_STATE_READY))
 8005e90:	7d3b      	ldrb	r3, [r7, #20]
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d11b      	bne.n	8005ece <HAL_TIM_Encoder_Start_DMA+0x12a>
    {
      if ((((pData1 == NULL) || (pData2 == NULL))) || (Length == 0U))
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d005      	beq.n	8005ea8 <HAL_TIM_Encoder_Start_DMA+0x104>
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d002      	beq.n	8005ea8 <HAL_TIM_Encoder_Start_DMA+0x104>
 8005ea2:	8c3b      	ldrh	r3, [r7, #32]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d101      	bne.n	8005eac <HAL_TIM_Encoder_Start_DMA+0x108>
      {
        return HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	e0dd      	b.n	8006068 <HAL_TIM_Encoder_Start_DMA+0x2c4>
      }
      else
      {
        TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2202      	movs	r2, #2
 8005eb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2202      	movs	r2, #2
 8005eb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
        TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2202      	movs	r2, #2
 8005ec0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2202      	movs	r2, #2
 8005ec8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      if ((((pData1 == NULL) || (pData2 == NULL))) || (Length == 0U))
 8005ecc:	e001      	b.n	8005ed2 <HAL_TIM_Encoder_Start_DMA+0x12e>
      }
    }
    else
    {
      return HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	e0ca      	b.n	8006068 <HAL_TIM_Encoder_Start_DMA+0x2c4>
    }
  }

  switch (Channel)
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d003      	beq.n	8005ee0 <HAL_TIM_Encoder_Start_DMA+0x13c>
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	2b04      	cmp	r3, #4
 8005edc:	d033      	beq.n	8005f46 <HAL_TIM_Encoder_Start_DMA+0x1a2>
 8005ede:	e065      	b.n	8005fac <HAL_TIM_Encoder_Start_DMA+0x208>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee4:	4a62      	ldr	r2, [pc, #392]	; (8006070 <HAL_TIM_Encoder_Start_DMA+0x2cc>)
 8005ee6:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eec:	4a61      	ldr	r2, [pc, #388]	; (8006074 <HAL_TIM_Encoder_Start_DMA+0x2d0>)
 8005eee:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef4:	4a60      	ldr	r2, [pc, #384]	; (8006078 <HAL_TIM_Encoder_Start_DMA+0x2d4>)
 8005ef6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData1,
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	3334      	adds	r3, #52	; 0x34
 8005f02:	4619      	mov	r1, r3
 8005f04:	687a      	ldr	r2, [r7, #4]
 8005f06:	8c3b      	ldrh	r3, [r7, #32]
 8005f08:	f7fb f8af 	bl	800106a <HAL_DMA_Start_IT>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d001      	beq.n	8005f16 <HAL_TIM_Encoder_Start_DMA+0x172>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	e0a8      	b.n	8006068 <HAL_TIM_Encoder_Start_DMA+0x2c4>
      }
      /* Enable the TIM Input Capture DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	68da      	ldr	r2, [r3, #12]
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f24:	60da      	str	r2, [r3, #12]

      /* Enable the Capture compare channel */
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	2100      	movs	r1, #0
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f002 fa25 	bl	800837e <TIM_CCxChannelCmd>

      /* Enable the Peripheral */
      __HAL_TIM_ENABLE(htim);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f042 0201 	orr.w	r2, r2, #1
 8005f42:	601a      	str	r2, [r3, #0]

      break;
 8005f44:	e08f      	b.n	8006066 <HAL_TIM_Encoder_Start_DMA+0x2c2>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f4a:	4a49      	ldr	r2, [pc, #292]	; (8006070 <HAL_TIM_Encoder_Start_DMA+0x2cc>)
 8005f4c:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f52:	4a48      	ldr	r2, [pc, #288]	; (8006074 <HAL_TIM_Encoder_Start_DMA+0x2d0>)
 8005f54:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f5a:	4a47      	ldr	r2, [pc, #284]	; (8006078 <HAL_TIM_Encoder_Start_DMA+0x2d4>)
 8005f5c:	631a      	str	r2, [r3, #48]	; 0x30
      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData2,
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	3338      	adds	r3, #56	; 0x38
 8005f68:	4619      	mov	r1, r3
 8005f6a:	683a      	ldr	r2, [r7, #0]
 8005f6c:	8c3b      	ldrh	r3, [r7, #32]
 8005f6e:	f7fb f87c 	bl	800106a <HAL_DMA_Start_IT>
 8005f72:	4603      	mov	r3, r0
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d001      	beq.n	8005f7c <HAL_TIM_Encoder_Start_DMA+0x1d8>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	e075      	b.n	8006068 <HAL_TIM_Encoder_Start_DMA+0x2c4>
      }
      /* Enable the TIM Input Capture  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	68da      	ldr	r2, [r3, #12]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005f8a:	60da      	str	r2, [r3, #12]

      /* Enable the Capture compare channel */
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	2201      	movs	r2, #1
 8005f92:	2104      	movs	r1, #4
 8005f94:	4618      	mov	r0, r3
 8005f96:	f002 f9f2 	bl	800837e <TIM_CCxChannelCmd>

      /* Enable the Peripheral */
      __HAL_TIM_ENABLE(htim);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	681a      	ldr	r2, [r3, #0]
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f042 0201 	orr.w	r2, r2, #1
 8005fa8:	601a      	str	r2, [r3, #0]

      break;
 8005faa:	e05c      	b.n	8006066 <HAL_TIM_Encoder_Start_DMA+0x2c2>
    }

    default:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb0:	4a2f      	ldr	r2, [pc, #188]	; (8006070 <HAL_TIM_Encoder_Start_DMA+0x2cc>)
 8005fb2:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb8:	4a2e      	ldr	r2, [pc, #184]	; (8006074 <HAL_TIM_Encoder_Start_DMA+0x2d0>)
 8005fba:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc0:	4a2d      	ldr	r2, [pc, #180]	; (8006078 <HAL_TIM_Encoder_Start_DMA+0x2d4>)
 8005fc2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData1,
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	3334      	adds	r3, #52	; 0x34
 8005fce:	4619      	mov	r1, r3
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	8c3b      	ldrh	r3, [r7, #32]
 8005fd4:	f7fb f849 	bl	800106a <HAL_DMA_Start_IT>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d001      	beq.n	8005fe2 <HAL_TIM_Encoder_Start_DMA+0x23e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	e042      	b.n	8006068 <HAL_TIM_Encoder_Start_DMA+0x2c4>
      }

      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fe6:	4a22      	ldr	r2, [pc, #136]	; (8006070 <HAL_TIM_Encoder_Start_DMA+0x2cc>)
 8005fe8:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fee:	4a21      	ldr	r2, [pc, #132]	; (8006074 <HAL_TIM_Encoder_Start_DMA+0x2d0>)
 8005ff0:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ff6:	4a20      	ldr	r2, [pc, #128]	; (8006078 <HAL_TIM_Encoder_Start_DMA+0x2d4>)
 8005ff8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData2,
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	3338      	adds	r3, #56	; 0x38
 8006004:	4619      	mov	r1, r3
 8006006:	683a      	ldr	r2, [r7, #0]
 8006008:	8c3b      	ldrh	r3, [r7, #32]
 800600a:	f7fb f82e 	bl	800106a <HAL_DMA_Start_IT>
 800600e:	4603      	mov	r3, r0
 8006010:	2b00      	cmp	r3, #0
 8006012:	d001      	beq.n	8006018 <HAL_TIM_Encoder_Start_DMA+0x274>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006014:	2301      	movs	r3, #1
 8006016:	e027      	b.n	8006068 <HAL_TIM_Encoder_Start_DMA+0x2c4>
      }

      /* Enable the TIM Input Capture  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	68da      	ldr	r2, [r3, #12]
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006026:	60da      	str	r2, [r3, #12]
      /* Enable the TIM Input Capture  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	68da      	ldr	r2, [r3, #12]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006036:	60da      	str	r2, [r3, #12]

      /* Enable the Capture compare channel */
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	2201      	movs	r2, #1
 800603e:	2100      	movs	r1, #0
 8006040:	4618      	mov	r0, r3
 8006042:	f002 f99c 	bl	800837e <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	2201      	movs	r2, #1
 800604c:	2104      	movs	r1, #4
 800604e:	4618      	mov	r0, r3
 8006050:	f002 f995 	bl	800837e <TIM_CCxChannelCmd>

      /* Enable the Peripheral */
      __HAL_TIM_ENABLE(htim);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	681a      	ldr	r2, [r3, #0]
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f042 0201 	orr.w	r2, r2, #1
 8006062:	601a      	str	r2, [r3, #0]

      break;
 8006064:	bf00      	nop
    }
  }

  /* Return function status */
  return HAL_OK;
 8006066:	2300      	movs	r3, #0
}
 8006068:	4618      	mov	r0, r3
 800606a:	3718      	adds	r7, #24
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}
 8006070:	0800797d 	.word	0x0800797d
 8006074:	08007a45 	.word	0x08007a45
 8006078:	080077db 	.word	0x080077db

0800607c <HAL_TIM_Encoder_Stop_DMA>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b082      	sub	sp, #8
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
 8006084:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  if (Channel == TIM_CHANNEL_1)
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d114      	bne.n	80060b6 <HAL_TIM_Encoder_Stop_DMA+0x3a>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	2200      	movs	r2, #0
 8006092:	2100      	movs	r1, #0
 8006094:	4618      	mov	r0, r3
 8006096:	f002 f972 	bl	800837e <TIM_CCxChannelCmd>

    /* Disable the capture compare DMA Request 1 */
    __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	68da      	ldr	r2, [r3, #12]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80060a8:	60da      	str	r2, [r3, #12]
    (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ae:	4618      	mov	r0, r3
 80060b0:	f7fb f876 	bl	80011a0 <HAL_DMA_Abort_IT>
 80060b4:	e03f      	b.n	8006136 <HAL_TIM_Encoder_Stop_DMA+0xba>
  }
  else if (Channel == TIM_CHANNEL_2)
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	2b04      	cmp	r3, #4
 80060ba:	d114      	bne.n	80060e6 <HAL_TIM_Encoder_Stop_DMA+0x6a>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	2200      	movs	r2, #0
 80060c2:	2104      	movs	r1, #4
 80060c4:	4618      	mov	r0, r3
 80060c6:	f002 f95a 	bl	800837e <TIM_CCxChannelCmd>

    /* Disable the capture compare DMA Request 2 */
    __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	68da      	ldr	r2, [r3, #12]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060d8:	60da      	str	r2, [r3, #12]
    (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060de:	4618      	mov	r0, r3
 80060e0:	f7fb f85e 	bl	80011a0 <HAL_DMA_Abort_IT>
 80060e4:	e027      	b.n	8006136 <HAL_TIM_Encoder_Stop_DMA+0xba>
  }
  else
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	2200      	movs	r2, #0
 80060ec:	2100      	movs	r1, #0
 80060ee:	4618      	mov	r0, r3
 80060f0:	f002 f945 	bl	800837e <TIM_CCxChannelCmd>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	2200      	movs	r2, #0
 80060fa:	2104      	movs	r1, #4
 80060fc:	4618      	mov	r0, r3
 80060fe:	f002 f93e 	bl	800837e <TIM_CCxChannelCmd>

    /* Disable the capture compare DMA Request 1 and 2 */
    __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	68da      	ldr	r2, [r3, #12]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006110:	60da      	str	r2, [r3, #12]
    __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	68da      	ldr	r2, [r3, #12]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006120:	60da      	str	r2, [r3, #12]
    (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006126:	4618      	mov	r0, r3
 8006128:	f7fb f83a 	bl	80011a0 <HAL_DMA_Abort_IT>
    (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006130:	4618      	mov	r0, r3
 8006132:	f7fb f835 	bl	80011a0 <HAL_DMA_Abort_IT>
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	6a1a      	ldr	r2, [r3, #32]
 800613c:	f241 1311 	movw	r3, #4369	; 0x1111
 8006140:	4013      	ands	r3, r2
 8006142:	2b00      	cmp	r3, #0
 8006144:	d10f      	bne.n	8006166 <HAL_TIM_Encoder_Stop_DMA+0xea>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	6a1a      	ldr	r2, [r3, #32]
 800614c:	f240 4344 	movw	r3, #1092	; 0x444
 8006150:	4013      	ands	r3, r2
 8006152:	2b00      	cmp	r3, #0
 8006154:	d107      	bne.n	8006166 <HAL_TIM_Encoder_Stop_DMA+0xea>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	681a      	ldr	r2, [r3, #0]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f022 0201 	bic.w	r2, r2, #1
 8006164:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d002      	beq.n	8006172 <HAL_TIM_Encoder_Stop_DMA+0xf6>
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	2b04      	cmp	r3, #4
 8006170:	d138      	bne.n	80061e4 <HAL_TIM_Encoder_Stop_DMA+0x168>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d104      	bne.n	8006182 <HAL_TIM_Encoder_Stop_DMA+0x106>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2201      	movs	r2, #1
 800617c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006180:	e013      	b.n	80061aa <HAL_TIM_Encoder_Stop_DMA+0x12e>
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	2b04      	cmp	r3, #4
 8006186:	d104      	bne.n	8006192 <HAL_TIM_Encoder_Stop_DMA+0x116>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2201      	movs	r2, #1
 800618c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006190:	e00b      	b.n	80061aa <HAL_TIM_Encoder_Stop_DMA+0x12e>
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	2b08      	cmp	r3, #8
 8006196:	d104      	bne.n	80061a2 <HAL_TIM_Encoder_Stop_DMA+0x126>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2201      	movs	r2, #1
 800619c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061a0:	e003      	b.n	80061aa <HAL_TIM_Encoder_Stop_DMA+0x12e>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2201      	movs	r2, #1
 80061a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d104      	bne.n	80061ba <HAL_TIM_Encoder_Stop_DMA+0x13e>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2201      	movs	r2, #1
 80061b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80061b8:	e024      	b.n	8006204 <HAL_TIM_Encoder_Stop_DMA+0x188>
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	2b04      	cmp	r3, #4
 80061be:	d104      	bne.n	80061ca <HAL_TIM_Encoder_Stop_DMA+0x14e>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80061c8:	e01c      	b.n	8006204 <HAL_TIM_Encoder_Stop_DMA+0x188>
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	2b08      	cmp	r3, #8
 80061ce:	d104      	bne.n	80061da <HAL_TIM_Encoder_Stop_DMA+0x15e>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2201      	movs	r2, #1
 80061d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061d8:	e014      	b.n	8006204 <HAL_TIM_Encoder_Stop_DMA+0x188>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2201      	movs	r2, #1
 80061de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061e2:	e00f      	b.n	8006204 <HAL_TIM_Encoder_Stop_DMA+0x188>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2201      	movs	r2, #1
 80061e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2201      	movs	r2, #1
 80061f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2201      	movs	r2, #1
 80061f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2201      	movs	r2, #1
 8006200:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return HAL_OK;
 8006204:	2300      	movs	r3, #0
}
 8006206:	4618      	mov	r0, r3
 8006208:	3708      	adds	r7, #8
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}

0800620e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800620e:	b580      	push	{r7, lr}
 8006210:	b082      	sub	sp, #8
 8006212:	af00      	add	r7, sp, #0
 8006214:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	691b      	ldr	r3, [r3, #16]
 800621c:	f003 0302 	and.w	r3, r3, #2
 8006220:	2b02      	cmp	r3, #2
 8006222:	d122      	bne.n	800626a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	68db      	ldr	r3, [r3, #12]
 800622a:	f003 0302 	and.w	r3, r3, #2
 800622e:	2b02      	cmp	r3, #2
 8006230:	d11b      	bne.n	800626a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f06f 0202 	mvn.w	r2, #2
 800623a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2201      	movs	r2, #1
 8006240:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	699b      	ldr	r3, [r3, #24]
 8006248:	f003 0303 	and.w	r3, r3, #3
 800624c:	2b00      	cmp	r3, #0
 800624e:	d003      	beq.n	8006258 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f001 f9f5 	bl	8007640 <HAL_TIM_IC_CaptureCallback>
 8006256:	e005      	b.n	8006264 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f001 f9e8 	bl	800762e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f001 fa00 	bl	8007664 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2200      	movs	r2, #0
 8006268:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	691b      	ldr	r3, [r3, #16]
 8006270:	f003 0304 	and.w	r3, r3, #4
 8006274:	2b04      	cmp	r3, #4
 8006276:	d122      	bne.n	80062be <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	68db      	ldr	r3, [r3, #12]
 800627e:	f003 0304 	and.w	r3, r3, #4
 8006282:	2b04      	cmp	r3, #4
 8006284:	d11b      	bne.n	80062be <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f06f 0204 	mvn.w	r2, #4
 800628e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2202      	movs	r2, #2
 8006294:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	699b      	ldr	r3, [r3, #24]
 800629c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d003      	beq.n	80062ac <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f001 f9cb 	bl	8007640 <HAL_TIM_IC_CaptureCallback>
 80062aa:	e005      	b.n	80062b8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f001 f9be 	bl	800762e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f001 f9d6 	bl	8007664 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2200      	movs	r2, #0
 80062bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	691b      	ldr	r3, [r3, #16]
 80062c4:	f003 0308 	and.w	r3, r3, #8
 80062c8:	2b08      	cmp	r3, #8
 80062ca:	d122      	bne.n	8006312 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	68db      	ldr	r3, [r3, #12]
 80062d2:	f003 0308 	and.w	r3, r3, #8
 80062d6:	2b08      	cmp	r3, #8
 80062d8:	d11b      	bne.n	8006312 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f06f 0208 	mvn.w	r2, #8
 80062e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2204      	movs	r2, #4
 80062e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	69db      	ldr	r3, [r3, #28]
 80062f0:	f003 0303 	and.w	r3, r3, #3
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d003      	beq.n	8006300 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f001 f9a1 	bl	8007640 <HAL_TIM_IC_CaptureCallback>
 80062fe:	e005      	b.n	800630c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f001 f994 	bl	800762e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f001 f9ac 	bl	8007664 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2200      	movs	r2, #0
 8006310:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	691b      	ldr	r3, [r3, #16]
 8006318:	f003 0310 	and.w	r3, r3, #16
 800631c:	2b10      	cmp	r3, #16
 800631e:	d122      	bne.n	8006366 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	68db      	ldr	r3, [r3, #12]
 8006326:	f003 0310 	and.w	r3, r3, #16
 800632a:	2b10      	cmp	r3, #16
 800632c:	d11b      	bne.n	8006366 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f06f 0210 	mvn.w	r2, #16
 8006336:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2208      	movs	r2, #8
 800633c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	69db      	ldr	r3, [r3, #28]
 8006344:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006348:	2b00      	cmp	r3, #0
 800634a:	d003      	beq.n	8006354 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f001 f977 	bl	8007640 <HAL_TIM_IC_CaptureCallback>
 8006352:	e005      	b.n	8006360 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f001 f96a 	bl	800762e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f001 f982 	bl	8007664 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2200      	movs	r2, #0
 8006364:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	691b      	ldr	r3, [r3, #16]
 800636c:	f003 0301 	and.w	r3, r3, #1
 8006370:	2b01      	cmp	r3, #1
 8006372:	d10e      	bne.n	8006392 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	68db      	ldr	r3, [r3, #12]
 800637a:	f003 0301 	and.w	r3, r3, #1
 800637e:	2b01      	cmp	r3, #1
 8006380:	d107      	bne.n	8006392 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f06f 0201 	mvn.w	r2, #1
 800638a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f7f9 ffaf 	bl	80002f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	691b      	ldr	r3, [r3, #16]
 8006398:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800639c:	2b80      	cmp	r3, #128	; 0x80
 800639e:	d10e      	bne.n	80063be <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	68db      	ldr	r3, [r3, #12]
 80063a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063aa:	2b80      	cmp	r3, #128	; 0x80
 80063ac:	d107      	bne.n	80063be <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80063b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f003 ff9f 	bl	800a2fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	691b      	ldr	r3, [r3, #16]
 80063c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063c8:	2b40      	cmp	r3, #64	; 0x40
 80063ca:	d10e      	bne.n	80063ea <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	68db      	ldr	r3, [r3, #12]
 80063d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063d6:	2b40      	cmp	r3, #64	; 0x40
 80063d8:	d107      	bne.n	80063ea <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80063e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f001 f94f 	bl	8007688 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	691b      	ldr	r3, [r3, #16]
 80063f0:	f003 0320 	and.w	r3, r3, #32
 80063f4:	2b20      	cmp	r3, #32
 80063f6:	d10e      	bne.n	8006416 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	68db      	ldr	r3, [r3, #12]
 80063fe:	f003 0320 	and.w	r3, r3, #32
 8006402:	2b20      	cmp	r3, #32
 8006404:	d107      	bne.n	8006416 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f06f 0220 	mvn.w	r2, #32
 800640e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f003 ff61 	bl	800a2d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006416:	bf00      	nop
 8006418:	3708      	adds	r7, #8
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}

0800641e <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800641e:	b580      	push	{r7, lr}
 8006420:	b086      	sub	sp, #24
 8006422:	af00      	add	r7, sp, #0
 8006424:	60f8      	str	r0, [r7, #12]
 8006426:	60b9      	str	r1, [r7, #8]
 8006428:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800642a:	2300      	movs	r3, #0
 800642c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006434:	2b01      	cmp	r3, #1
 8006436:	d101      	bne.n	800643c <HAL_TIM_OC_ConfigChannel+0x1e>
 8006438:	2302      	movs	r3, #2
 800643a:	e047      	b.n	80064cc <HAL_TIM_OC_ConfigChannel+0xae>
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2201      	movs	r2, #1
 8006440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2b0c      	cmp	r3, #12
 8006448:	d838      	bhi.n	80064bc <HAL_TIM_OC_ConfigChannel+0x9e>
 800644a:	a201      	add	r2, pc, #4	; (adr r2, 8006450 <HAL_TIM_OC_ConfigChannel+0x32>)
 800644c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006450:	08006485 	.word	0x08006485
 8006454:	080064bd 	.word	0x080064bd
 8006458:	080064bd 	.word	0x080064bd
 800645c:	080064bd 	.word	0x080064bd
 8006460:	08006493 	.word	0x08006493
 8006464:	080064bd 	.word	0x080064bd
 8006468:	080064bd 	.word	0x080064bd
 800646c:	080064bd 	.word	0x080064bd
 8006470:	080064a1 	.word	0x080064a1
 8006474:	080064bd 	.word	0x080064bd
 8006478:	080064bd 	.word	0x080064bd
 800647c:	080064bd 	.word	0x080064bd
 8006480:	080064af 	.word	0x080064af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	68b9      	ldr	r1, [r7, #8]
 800648a:	4618      	mov	r0, r3
 800648c:	f001 fbba 	bl	8007c04 <TIM_OC1_SetConfig>
      break;
 8006490:	e017      	b.n	80064c2 <HAL_TIM_OC_ConfigChannel+0xa4>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	68b9      	ldr	r1, [r7, #8]
 8006498:	4618      	mov	r0, r3
 800649a:	f001 fc19 	bl	8007cd0 <TIM_OC2_SetConfig>
      break;
 800649e:	e010      	b.n	80064c2 <HAL_TIM_OC_ConfigChannel+0xa4>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	68b9      	ldr	r1, [r7, #8]
 80064a6:	4618      	mov	r0, r3
 80064a8:	f001 fc7c 	bl	8007da4 <TIM_OC3_SetConfig>
      break;
 80064ac:	e009      	b.n	80064c2 <HAL_TIM_OC_ConfigChannel+0xa4>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	68b9      	ldr	r1, [r7, #8]
 80064b4:	4618      	mov	r0, r3
 80064b6:	f001 fcdf 	bl	8007e78 <TIM_OC4_SetConfig>
      break;
 80064ba:	e002      	b.n	80064c2 <HAL_TIM_OC_ConfigChannel+0xa4>
    }

    default:
      status = HAL_ERROR;
 80064bc:	2301      	movs	r3, #1
 80064be:	75fb      	strb	r3, [r7, #23]
      break;
 80064c0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2200      	movs	r2, #0
 80064c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80064ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3718      	adds	r7, #24
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}

080064d4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b086      	sub	sp, #24
 80064d8:	af00      	add	r7, sp, #0
 80064da:	60f8      	str	r0, [r7, #12]
 80064dc:	60b9      	str	r1, [r7, #8]
 80064de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80064e0:	2300      	movs	r3, #0
 80064e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	d101      	bne.n	80064f2 <HAL_TIM_IC_ConfigChannel+0x1e>
 80064ee:	2302      	movs	r3, #2
 80064f0:	e088      	b.n	8006604 <HAL_TIM_IC_ConfigChannel+0x130>
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2201      	movs	r2, #1
 80064f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d11b      	bne.n	8006538 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8006510:	f001 fd91 	bl	8008036 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	699a      	ldr	r2, [r3, #24]
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f022 020c 	bic.w	r2, r2, #12
 8006522:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	6999      	ldr	r1, [r3, #24]
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	689a      	ldr	r2, [r3, #8]
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	430a      	orrs	r2, r1
 8006534:	619a      	str	r2, [r3, #24]
 8006536:	e060      	b.n	80065fa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2b04      	cmp	r3, #4
 800653c:	d11c      	bne.n	8006578 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800654e:	f001 fdfb 	bl	8008148 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	699a      	ldr	r2, [r3, #24]
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006560:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	6999      	ldr	r1, [r3, #24]
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	689b      	ldr	r3, [r3, #8]
 800656c:	021a      	lsls	r2, r3, #8
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	430a      	orrs	r2, r1
 8006574:	619a      	str	r2, [r3, #24]
 8006576:	e040      	b.n	80065fa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2b08      	cmp	r3, #8
 800657c:	d11b      	bne.n	80065b6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800658e:	f001 fe46 	bl	800821e <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	69da      	ldr	r2, [r3, #28]
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f022 020c 	bic.w	r2, r2, #12
 80065a0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	69d9      	ldr	r1, [r3, #28]
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	689a      	ldr	r2, [r3, #8]
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	430a      	orrs	r2, r1
 80065b2:	61da      	str	r2, [r3, #28]
 80065b4:	e021      	b.n	80065fa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2b0c      	cmp	r3, #12
 80065ba:	d11c      	bne.n	80065f6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80065cc:	f001 fe62 	bl	8008294 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	69da      	ldr	r2, [r3, #28]
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80065de:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	69d9      	ldr	r1, [r3, #28]
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	021a      	lsls	r2, r3, #8
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	430a      	orrs	r2, r1
 80065f2:	61da      	str	r2, [r3, #28]
 80065f4:	e001      	b.n	80065fa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80065f6:	2301      	movs	r3, #1
 80065f8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2200      	movs	r2, #0
 80065fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006602:	7dfb      	ldrb	r3, [r7, #23]
}
 8006604:	4618      	mov	r0, r3
 8006606:	3718      	adds	r7, #24
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}

0800660c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b086      	sub	sp, #24
 8006610:	af00      	add	r7, sp, #0
 8006612:	60f8      	str	r0, [r7, #12]
 8006614:	60b9      	str	r1, [r7, #8]
 8006616:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006618:	2300      	movs	r3, #0
 800661a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006622:	2b01      	cmp	r3, #1
 8006624:	d101      	bne.n	800662a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006626:	2302      	movs	r3, #2
 8006628:	e0ae      	b.n	8006788 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2201      	movs	r2, #1
 800662e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2b0c      	cmp	r3, #12
 8006636:	f200 809f 	bhi.w	8006778 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800663a:	a201      	add	r2, pc, #4	; (adr r2, 8006640 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800663c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006640:	08006675 	.word	0x08006675
 8006644:	08006779 	.word	0x08006779
 8006648:	08006779 	.word	0x08006779
 800664c:	08006779 	.word	0x08006779
 8006650:	080066b5 	.word	0x080066b5
 8006654:	08006779 	.word	0x08006779
 8006658:	08006779 	.word	0x08006779
 800665c:	08006779 	.word	0x08006779
 8006660:	080066f7 	.word	0x080066f7
 8006664:	08006779 	.word	0x08006779
 8006668:	08006779 	.word	0x08006779
 800666c:	08006779 	.word	0x08006779
 8006670:	08006737 	.word	0x08006737
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	68b9      	ldr	r1, [r7, #8]
 800667a:	4618      	mov	r0, r3
 800667c:	f001 fac2 	bl	8007c04 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	699a      	ldr	r2, [r3, #24]
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f042 0208 	orr.w	r2, r2, #8
 800668e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	699a      	ldr	r2, [r3, #24]
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f022 0204 	bic.w	r2, r2, #4
 800669e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	6999      	ldr	r1, [r3, #24]
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	691a      	ldr	r2, [r3, #16]
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	430a      	orrs	r2, r1
 80066b0:	619a      	str	r2, [r3, #24]
      break;
 80066b2:	e064      	b.n	800677e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	68b9      	ldr	r1, [r7, #8]
 80066ba:	4618      	mov	r0, r3
 80066bc:	f001 fb08 	bl	8007cd0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	699a      	ldr	r2, [r3, #24]
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	699a      	ldr	r2, [r3, #24]
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	6999      	ldr	r1, [r3, #24]
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	691b      	ldr	r3, [r3, #16]
 80066ea:	021a      	lsls	r2, r3, #8
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	430a      	orrs	r2, r1
 80066f2:	619a      	str	r2, [r3, #24]
      break;
 80066f4:	e043      	b.n	800677e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	68b9      	ldr	r1, [r7, #8]
 80066fc:	4618      	mov	r0, r3
 80066fe:	f001 fb51 	bl	8007da4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	69da      	ldr	r2, [r3, #28]
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f042 0208 	orr.w	r2, r2, #8
 8006710:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	69da      	ldr	r2, [r3, #28]
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f022 0204 	bic.w	r2, r2, #4
 8006720:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	69d9      	ldr	r1, [r3, #28]
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	691a      	ldr	r2, [r3, #16]
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	430a      	orrs	r2, r1
 8006732:	61da      	str	r2, [r3, #28]
      break;
 8006734:	e023      	b.n	800677e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	68b9      	ldr	r1, [r7, #8]
 800673c:	4618      	mov	r0, r3
 800673e:	f001 fb9b 	bl	8007e78 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	69da      	ldr	r2, [r3, #28]
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006750:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	69da      	ldr	r2, [r3, #28]
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006760:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	69d9      	ldr	r1, [r3, #28]
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	691b      	ldr	r3, [r3, #16]
 800676c:	021a      	lsls	r2, r3, #8
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	430a      	orrs	r2, r1
 8006774:	61da      	str	r2, [r3, #28]
      break;
 8006776:	e002      	b.n	800677e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006778:	2301      	movs	r3, #1
 800677a:	75fb      	strb	r3, [r7, #23]
      break;
 800677c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2200      	movs	r2, #0
 8006782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006786:	7dfb      	ldrb	r3, [r7, #23]
}
 8006788:	4618      	mov	r0, r3
 800678a:	3718      	adds	r7, #24
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}

08006790 <HAL_TIM_OnePulse_ConfigChannel>:
  *        without taking in account the comparison.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_ConfigChannel(TIM_HandleTypeDef *htim,  TIM_OnePulse_InitTypeDef *sConfig,
                                                 uint32_t OutputChannel,  uint32_t InputChannel)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b08c      	sub	sp, #48	; 0x30
 8006794:	af00      	add	r7, sp, #0
 8006796:	60f8      	str	r0, [r7, #12]
 8006798:	60b9      	str	r1, [r7, #8]
 800679a:	607a      	str	r2, [r7, #4]
 800679c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800679e:	2300      	movs	r3, #0
 80067a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_TIM_OPM_CHANNELS(OutputChannel));
  assert_param(IS_TIM_OPM_CHANNELS(InputChannel));

  if (OutputChannel != InputChannel)
 80067a4:	687a      	ldr	r2, [r7, #4]
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	429a      	cmp	r2, r3
 80067aa:	f000 80be 	beq.w	800692a <HAL_TIM_OnePulse_ConfigChannel+0x19a>
  {
    /* Process Locked */
    __HAL_LOCK(htim);
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d101      	bne.n	80067bc <HAL_TIM_OnePulse_ConfigChannel+0x2c>
 80067b8:	2302      	movs	r3, #2
 80067ba:	e0b7      	b.n	800692c <HAL_TIM_OnePulse_ConfigChannel+0x19c>
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2201      	movs	r2, #1
 80067c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    htim->State = HAL_TIM_STATE_BUSY;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	2202      	movs	r2, #2
 80067c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Extract the Output compare configuration from sConfig structure */
    temp1.OCMode = sConfig->OCMode;
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	613b      	str	r3, [r7, #16]
    temp1.Pulse = sConfig->Pulse;
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	617b      	str	r3, [r7, #20]
    temp1.OCPolarity = sConfig->OCPolarity;
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	689b      	ldr	r3, [r3, #8]
 80067dc:	61bb      	str	r3, [r7, #24]
    temp1.OCNPolarity = sConfig->OCNPolarity;
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	68db      	ldr	r3, [r3, #12]
 80067e2:	61fb      	str	r3, [r7, #28]
    temp1.OCIdleState = sConfig->OCIdleState;
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	691b      	ldr	r3, [r3, #16]
 80067e8:	627b      	str	r3, [r7, #36]	; 0x24
    temp1.OCNIdleState = sConfig->OCNIdleState;
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	695b      	ldr	r3, [r3, #20]
 80067ee:	62bb      	str	r3, [r7, #40]	; 0x28

    switch (OutputChannel)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d003      	beq.n	80067fe <HAL_TIM_OnePulse_ConfigChannel+0x6e>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2b04      	cmp	r3, #4
 80067fa:	d009      	beq.n	8006810 <HAL_TIM_OnePulse_ConfigChannel+0x80>
 80067fc:	e011      	b.n	8006822 <HAL_TIM_OnePulse_ConfigChannel+0x92>
    {
      case TIM_CHANNEL_1:
      {
        assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

        TIM_OC1_SetConfig(htim->Instance, &temp1);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f107 0210 	add.w	r2, r7, #16
 8006806:	4611      	mov	r1, r2
 8006808:	4618      	mov	r0, r3
 800680a:	f001 f9fb 	bl	8007c04 <TIM_OC1_SetConfig>
        break;
 800680e:	e00c      	b.n	800682a <HAL_TIM_OnePulse_ConfigChannel+0x9a>

      case TIM_CHANNEL_2:
      {
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

        TIM_OC2_SetConfig(htim->Instance, &temp1);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f107 0210 	add.w	r2, r7, #16
 8006818:	4611      	mov	r1, r2
 800681a:	4618      	mov	r0, r3
 800681c:	f001 fa58 	bl	8007cd0 <TIM_OC2_SetConfig>
        break;
 8006820:	e003      	b.n	800682a <HAL_TIM_OnePulse_ConfigChannel+0x9a>
      }

      default:
        status = HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        break;
 8006828:	bf00      	nop
    }

    if (status == HAL_OK)
 800682a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800682e:	2b00      	cmp	r3, #0
 8006830:	d170      	bne.n	8006914 <HAL_TIM_OnePulse_ConfigChannel+0x184>
    {
      switch (InputChannel)
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d003      	beq.n	8006840 <HAL_TIM_OnePulse_ConfigChannel+0xb0>
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	2b04      	cmp	r3, #4
 800683c:	d033      	beq.n	80068a6 <HAL_TIM_OnePulse_ConfigChannel+0x116>
 800683e:	e065      	b.n	800690c <HAL_TIM_OnePulse_ConfigChannel+0x17c>
      {
        case TIM_CHANNEL_1:
        {
          assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

          TIM_TI1_SetConfig(htim->Instance, sConfig->ICPolarity,
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	6818      	ldr	r0, [r3, #0]
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	6999      	ldr	r1, [r3, #24]
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	69da      	ldr	r2, [r3, #28]
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	6a1b      	ldr	r3, [r3, #32]
 8006850:	f001 fbf1 	bl	8008036 <TIM_TI1_SetConfig>
                            sConfig->ICSelection, sConfig->ICFilter);

          /* Reset the IC1PSC Bits */
          htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	699a      	ldr	r2, [r3, #24]
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f022 020c 	bic.w	r2, r2, #12
 8006862:	619a      	str	r2, [r3, #24]

          /* Select the Trigger source */
          htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	689a      	ldr	r2, [r3, #8]
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006872:	609a      	str	r2, [r3, #8]
          htim->Instance->SMCR |= TIM_TS_TI1FP1;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	689a      	ldr	r2, [r3, #8]
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8006882:	609a      	str	r2, [r3, #8]

          /* Select the Slave Mode */
          htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	689a      	ldr	r2, [r3, #8]
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f022 0207 	bic.w	r2, r2, #7
 8006892:	609a      	str	r2, [r3, #8]
          htim->Instance->SMCR |= TIM_SLAVEMODE_TRIGGER;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	689a      	ldr	r2, [r3, #8]
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f042 0206 	orr.w	r2, r2, #6
 80068a2:	609a      	str	r2, [r3, #8]
          break;
 80068a4:	e036      	b.n	8006914 <HAL_TIM_OnePulse_ConfigChannel+0x184>

        case TIM_CHANNEL_2:
        {
          assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

          TIM_TI2_SetConfig(htim->Instance, sConfig->ICPolarity,
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	6818      	ldr	r0, [r3, #0]
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	6999      	ldr	r1, [r3, #24]
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	69da      	ldr	r2, [r3, #28]
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	6a1b      	ldr	r3, [r3, #32]
 80068b6:	f001 fc47 	bl	8008148 <TIM_TI2_SetConfig>
                            sConfig->ICSelection, sConfig->ICFilter);

          /* Reset the IC2PSC Bits */
          htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	699a      	ldr	r2, [r3, #24]
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80068c8:	619a      	str	r2, [r3, #24]

          /* Select the Trigger source */
          htim->Instance->SMCR &= ~TIM_SMCR_TS;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	689a      	ldr	r2, [r3, #8]
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80068d8:	609a      	str	r2, [r3, #8]
          htim->Instance->SMCR |= TIM_TS_TI2FP2;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	689a      	ldr	r2, [r3, #8]
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80068e8:	609a      	str	r2, [r3, #8]

          /* Select the Slave Mode */
          htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	689a      	ldr	r2, [r3, #8]
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f022 0207 	bic.w	r2, r2, #7
 80068f8:	609a      	str	r2, [r3, #8]
          htim->Instance->SMCR |= TIM_SLAVEMODE_TRIGGER;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	689a      	ldr	r2, [r3, #8]
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f042 0206 	orr.w	r2, r2, #6
 8006908:	609a      	str	r2, [r3, #8]
          break;
 800690a:	e003      	b.n	8006914 <HAL_TIM_OnePulse_ConfigChannel+0x184>
        }

        default:
          status = HAL_ERROR;
 800690c:	2301      	movs	r3, #1
 800690e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          break;
 8006912:	bf00      	nop
      }
    }

    htim->State = HAL_TIM_STATE_READY;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2201      	movs	r2, #1
 8006918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    __HAL_UNLOCK(htim);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2200      	movs	r2, #0
 8006920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return status;
 8006924:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006928:	e000      	b.n	800692c <HAL_TIM_OnePulse_ConfigChannel+0x19c>
  }
  else
  {
    return HAL_ERROR;
 800692a:	2301      	movs	r3, #1
  }
}
 800692c:	4618      	mov	r0, r3
 800692e:	3730      	adds	r7, #48	; 0x30
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}

08006934 <HAL_TIM_DMABurst_WriteStart>:
  * @note   This function should be used only when BurstLength is equal to DMA data transfer length.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_DMABurst_WriteStart(TIM_HandleTypeDef *htim, uint32_t BurstBaseAddress,
                                              uint32_t BurstRequestSrc, const uint32_t *BurstBuffer, uint32_t  BurstLength)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b088      	sub	sp, #32
 8006938:	af02      	add	r7, sp, #8
 800693a:	60f8      	str	r0, [r7, #12]
 800693c:	60b9      	str	r1, [r7, #8]
 800693e:	607a      	str	r2, [r7, #4]
 8006940:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;

  status = HAL_TIM_DMABurst_MultiWriteStart(htim, BurstBaseAddress, BurstRequestSrc, BurstBuffer, BurstLength,
                                            ((BurstLength) >> 8U) + 1U);
 8006942:	6a3b      	ldr	r3, [r7, #32]
 8006944:	0a1b      	lsrs	r3, r3, #8
  status = HAL_TIM_DMABurst_MultiWriteStart(htim, BurstBaseAddress, BurstRequestSrc, BurstBuffer, BurstLength,
 8006946:	3301      	adds	r3, #1
 8006948:	9301      	str	r3, [sp, #4]
 800694a:	6a3b      	ldr	r3, [r7, #32]
 800694c:	9300      	str	r3, [sp, #0]
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	687a      	ldr	r2, [r7, #4]
 8006952:	68b9      	ldr	r1, [r7, #8]
 8006954:	68f8      	ldr	r0, [r7, #12]
 8006956:	f000 f807 	bl	8006968 <HAL_TIM_DMABurst_MultiWriteStart>
 800695a:	4603      	mov	r3, r0
 800695c:	75fb      	strb	r3, [r7, #23]



  return status;
 800695e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006960:	4618      	mov	r0, r3
 8006962:	3718      	adds	r7, #24
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}

08006968 <HAL_TIM_DMABurst_MultiWriteStart>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_DMABurst_MultiWriteStart(TIM_HandleTypeDef *htim, uint32_t BurstBaseAddress,
                                                   uint32_t BurstRequestSrc, const uint32_t *BurstBuffer,
                                                   uint32_t  BurstLength,  uint32_t  DataLength)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b086      	sub	sp, #24
 800696c:	af00      	add	r7, sp, #0
 800696e:	60f8      	str	r0, [r7, #12]
 8006970:	60b9      	str	r1, [r7, #8]
 8006972:	607a      	str	r2, [r7, #4]
 8006974:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006976:	2300      	movs	r3, #0
 8006978:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_DMA_BASE(BurstBaseAddress));
  assert_param(IS_TIM_DMA_SOURCE(BurstRequestSrc));
  assert_param(IS_TIM_DMA_LENGTH(BurstLength));
  assert_param(IS_TIM_DMA_DATA_LENGTH(DataLength));

  if (htim->DMABurstState == HAL_DMA_BURST_STATE_BUSY)
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006980:	b2db      	uxtb	r3, r3
 8006982:	2b02      	cmp	r3, #2
 8006984:	d101      	bne.n	800698a <HAL_TIM_DMABurst_MultiWriteStart+0x22>
  {
    return HAL_BUSY;
 8006986:	2302      	movs	r3, #2
 8006988:	e12b      	b.n	8006be2 <HAL_TIM_DMABurst_MultiWriteStart+0x27a>
  }
  else if (htim->DMABurstState == HAL_DMA_BURST_STATE_READY)
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006990:	b2db      	uxtb	r3, r3
 8006992:	2b01      	cmp	r3, #1
 8006994:	d10b      	bne.n	80069ae <HAL_TIM_DMABurst_MultiWriteStart+0x46>
  {
    if ((BurstBuffer == NULL) && (BurstLength > 0U))
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d104      	bne.n	80069a6 <HAL_TIM_DMABurst_MultiWriteStart+0x3e>
 800699c:	6a3b      	ldr	r3, [r7, #32]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d001      	beq.n	80069a6 <HAL_TIM_DMABurst_MultiWriteStart+0x3e>
    {
      return HAL_ERROR;
 80069a2:	2301      	movs	r3, #1
 80069a4:	e11d      	b.n	8006be2 <HAL_TIM_DMABurst_MultiWriteStart+0x27a>
    }
    else
    {
      htim->DMABurstState = HAL_DMA_BURST_STATE_BUSY;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2202      	movs	r2, #2
 80069aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
  else
  {
    /* nothing to do */
  }

  switch (BurstRequestSrc)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80069b4:	f000 80d8 	beq.w	8006b68 <HAL_TIM_DMABurst_MultiWriteStart+0x200>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80069be:	f200 80ee 	bhi.w	8006b9e <HAL_TIM_DMABurst_MultiWriteStart+0x236>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069c8:	f000 80b3 	beq.w	8006b32 <HAL_TIM_DMABurst_MultiWriteStart+0x1ca>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069d2:	f200 80e4 	bhi.w	8006b9e <HAL_TIM_DMABurst_MultiWriteStart+0x236>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069dc:	f000 808e 	beq.w	8006afc <HAL_TIM_DMABurst_MultiWriteStart+0x194>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069e6:	f200 80da 	bhi.w	8006b9e <HAL_TIM_DMABurst_MultiWriteStart+0x236>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069f0:	d069      	beq.n	8006ac6 <HAL_TIM_DMABurst_MultiWriteStart+0x15e>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069f8:	f200 80d1 	bhi.w	8006b9e <HAL_TIM_DMABurst_MultiWriteStart+0x236>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a02:	d045      	beq.n	8006a90 <HAL_TIM_DMABurst_MultiWriteStart+0x128>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a0a:	f200 80c8 	bhi.w	8006b9e <HAL_TIM_DMABurst_MultiWriteStart+0x236>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a14:	d004      	beq.n	8006a20 <HAL_TIM_DMABurst_MultiWriteStart+0xb8>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a1c:	d01c      	beq.n	8006a58 <HAL_TIM_DMABurst_MultiWriteStart+0xf0>
 8006a1e:	e0be      	b.n	8006b9e <HAL_TIM_DMABurst_MultiWriteStart+0x236>
  {
    case TIM_DMA_UPDATE:
    {
      /* Set the DMA Period elapsed callbacks */
      htim->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = TIM_DMAPeriodElapsedCplt;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	6a1b      	ldr	r3, [r3, #32]
 8006a24:	4a71      	ldr	r2, [pc, #452]	; (8006bec <HAL_TIM_DMABurst_MultiWriteStart+0x284>)
 8006a26:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_UPDATE]->XferHalfCpltCallback = TIM_DMAPeriodElapsedHalfCplt;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	6a1b      	ldr	r3, [r3, #32]
 8006a2c:	4a70      	ldr	r2, [pc, #448]	; (8006bf0 <HAL_TIM_DMABurst_MultiWriteStart+0x288>)
 8006a2e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_UPDATE]->XferErrorCallback = TIM_DMAError ;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	6a1b      	ldr	r3, [r3, #32]
 8006a34:	4a6f      	ldr	r2, [pc, #444]	; (8006bf4 <HAL_TIM_DMABurst_MultiWriteStart+0x28c>)
 8006a36:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_UPDATE], (uint32_t)BurstBuffer,
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	6a18      	ldr	r0, [r3, #32]
 8006a3c:	6839      	ldr	r1, [r7, #0]
                           (uint32_t)&htim->Instance->DMAR, DataLength) != HAL_OK)
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	334c      	adds	r3, #76	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_UPDATE], (uint32_t)BurstBuffer,
 8006a44:	461a      	mov	r2, r3
 8006a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a48:	f7fa fb0f 	bl	800106a <HAL_DMA_Start_IT>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	f000 80a8 	beq.w	8006ba4 <HAL_TIM_DMABurst_MultiWriteStart+0x23c>
      {
        /* Return error status */
        return HAL_ERROR;
 8006a54:	2301      	movs	r3, #1
 8006a56:	e0c4      	b.n	8006be2 <HAL_TIM_DMABurst_MultiWriteStart+0x27a>
      break;
    }
    case TIM_DMA_CC1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a5c:	4a66      	ldr	r2, [pc, #408]	; (8006bf8 <HAL_TIM_DMABurst_MultiWriteStart+0x290>)
 8006a5e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a64:	4a65      	ldr	r2, [pc, #404]	; (8006bfc <HAL_TIM_DMABurst_MultiWriteStart+0x294>)
 8006a66:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a6c:	4a61      	ldr	r2, [pc, #388]	; (8006bf4 <HAL_TIM_DMABurst_MultiWriteStart+0x28c>)
 8006a6e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)BurstBuffer,
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8006a74:	6839      	ldr	r1, [r7, #0]
                           (uint32_t)&htim->Instance->DMAR, DataLength) != HAL_OK)
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	334c      	adds	r3, #76	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)BurstBuffer,
 8006a7c:	461a      	mov	r2, r3
 8006a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a80:	f7fa faf3 	bl	800106a <HAL_DMA_Start_IT>
 8006a84:	4603      	mov	r3, r0
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	f000 808e 	beq.w	8006ba8 <HAL_TIM_DMABurst_MultiWriteStart+0x240>
      {
        /* Return error status */
        return HAL_ERROR;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	e0a8      	b.n	8006be2 <HAL_TIM_DMABurst_MultiWriteStart+0x27a>
      break;
    }
    case TIM_DMA_CC2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a94:	4a58      	ldr	r2, [pc, #352]	; (8006bf8 <HAL_TIM_DMABurst_MultiWriteStart+0x290>)
 8006a96:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a9c:	4a57      	ldr	r2, [pc, #348]	; (8006bfc <HAL_TIM_DMABurst_MultiWriteStart+0x294>)
 8006a9e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aa4:	4a53      	ldr	r2, [pc, #332]	; (8006bf4 <HAL_TIM_DMABurst_MultiWriteStart+0x28c>)
 8006aa6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)BurstBuffer,
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8006aac:	6839      	ldr	r1, [r7, #0]
                           (uint32_t)&htim->Instance->DMAR, DataLength) != HAL_OK)
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	334c      	adds	r3, #76	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)BurstBuffer,
 8006ab4:	461a      	mov	r2, r3
 8006ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab8:	f7fa fad7 	bl	800106a <HAL_DMA_Start_IT>
 8006abc:	4603      	mov	r3, r0
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d074      	beq.n	8006bac <HAL_TIM_DMABurst_MultiWriteStart+0x244>
      {
        /* Return error status */
        return HAL_ERROR;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	e08d      	b.n	8006be2 <HAL_TIM_DMABurst_MultiWriteStart+0x27a>
      break;
    }
    case TIM_DMA_CC3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aca:	4a4b      	ldr	r2, [pc, #300]	; (8006bf8 <HAL_TIM_DMABurst_MultiWriteStart+0x290>)
 8006acc:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad2:	4a4a      	ldr	r2, [pc, #296]	; (8006bfc <HAL_TIM_DMABurst_MultiWriteStart+0x294>)
 8006ad4:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ada:	4a46      	ldr	r2, [pc, #280]	; (8006bf4 <HAL_TIM_DMABurst_MultiWriteStart+0x28c>)
 8006adc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)BurstBuffer,
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006ae2:	6839      	ldr	r1, [r7, #0]
                           (uint32_t)&htim->Instance->DMAR, DataLength) != HAL_OK)
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	334c      	adds	r3, #76	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)BurstBuffer,
 8006aea:	461a      	mov	r2, r3
 8006aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aee:	f7fa fabc 	bl	800106a <HAL_DMA_Start_IT>
 8006af2:	4603      	mov	r3, r0
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d05b      	beq.n	8006bb0 <HAL_TIM_DMABurst_MultiWriteStart+0x248>
      {
        /* Return error status */
        return HAL_ERROR;
 8006af8:	2301      	movs	r3, #1
 8006afa:	e072      	b.n	8006be2 <HAL_TIM_DMABurst_MultiWriteStart+0x27a>
      break;
    }
    case TIM_DMA_CC4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b00:	4a3d      	ldr	r2, [pc, #244]	; (8006bf8 <HAL_TIM_DMABurst_MultiWriteStart+0x290>)
 8006b02:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b08:	4a3c      	ldr	r2, [pc, #240]	; (8006bfc <HAL_TIM_DMABurst_MultiWriteStart+0x294>)
 8006b0a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b10:	4a38      	ldr	r2, [pc, #224]	; (8006bf4 <HAL_TIM_DMABurst_MultiWriteStart+0x28c>)
 8006b12:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)BurstBuffer,
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006b18:	6839      	ldr	r1, [r7, #0]
                           (uint32_t)&htim->Instance->DMAR, DataLength) != HAL_OK)
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	334c      	adds	r3, #76	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)BurstBuffer,
 8006b20:	461a      	mov	r2, r3
 8006b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b24:	f7fa faa1 	bl	800106a <HAL_DMA_Start_IT>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d042      	beq.n	8006bb4 <HAL_TIM_DMABurst_MultiWriteStart+0x24c>
      {
        /* Return error status */
        return HAL_ERROR;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	e057      	b.n	8006be2 <HAL_TIM_DMABurst_MultiWriteStart+0x27a>
      break;
    }
    case TIM_DMA_COM:
    {
      /* Set the DMA commutation callbacks */
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferCpltCallback =  TIMEx_DMACommutationCplt;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b36:	4a32      	ldr	r2, [pc, #200]	; (8006c00 <HAL_TIM_DMABurst_MultiWriteStart+0x298>)
 8006b38:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferHalfCpltCallback =  TIMEx_DMACommutationHalfCplt;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b3e:	4a31      	ldr	r2, [pc, #196]	; (8006c04 <HAL_TIM_DMABurst_MultiWriteStart+0x29c>)
 8006b40:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferErrorCallback = TIM_DMAError ;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b46:	4a2b      	ldr	r2, [pc, #172]	; (8006bf4 <HAL_TIM_DMABurst_MultiWriteStart+0x28c>)
 8006b48:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_COMMUTATION], (uint32_t)BurstBuffer,
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006b4e:	6839      	ldr	r1, [r7, #0]
                           (uint32_t)&htim->Instance->DMAR, DataLength) != HAL_OK)
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	334c      	adds	r3, #76	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_COMMUTATION], (uint32_t)BurstBuffer,
 8006b56:	461a      	mov	r2, r3
 8006b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b5a:	f7fa fa86 	bl	800106a <HAL_DMA_Start_IT>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d029      	beq.n	8006bb8 <HAL_TIM_DMABurst_MultiWriteStart+0x250>
      {
        /* Return error status */
        return HAL_ERROR;
 8006b64:	2301      	movs	r3, #1
 8006b66:	e03c      	b.n	8006be2 <HAL_TIM_DMABurst_MultiWriteStart+0x27a>
      break;
    }
    case TIM_DMA_TRIGGER:
    {
      /* Set the DMA trigger callbacks */
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferCpltCallback = TIM_DMATriggerCplt;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b6c:	4a26      	ldr	r2, [pc, #152]	; (8006c08 <HAL_TIM_DMABurst_MultiWriteStart+0x2a0>)
 8006b6e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferHalfCpltCallback = TIM_DMATriggerHalfCplt;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b74:	4a25      	ldr	r2, [pc, #148]	; (8006c0c <HAL_TIM_DMABurst_MultiWriteStart+0x2a4>)
 8006b76:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferErrorCallback = TIM_DMAError ;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b7c:	4a1d      	ldr	r2, [pc, #116]	; (8006bf4 <HAL_TIM_DMABurst_MultiWriteStart+0x28c>)
 8006b7e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_TRIGGER], (uint32_t)BurstBuffer,
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006b84:	6839      	ldr	r1, [r7, #0]
                           (uint32_t)&htim->Instance->DMAR, DataLength) != HAL_OK)
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	334c      	adds	r3, #76	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_TRIGGER], (uint32_t)BurstBuffer,
 8006b8c:	461a      	mov	r2, r3
 8006b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b90:	f7fa fa6b 	bl	800106a <HAL_DMA_Start_IT>
 8006b94:	4603      	mov	r3, r0
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d010      	beq.n	8006bbc <HAL_TIM_DMABurst_MultiWriteStart+0x254>
      {
        /* Return error status */
        return HAL_ERROR;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	e021      	b.n	8006be2 <HAL_TIM_DMABurst_MultiWriteStart+0x27a>
      }
      break;
    }
    default:
      status = HAL_ERROR;
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	75fb      	strb	r3, [r7, #23]
      break;
 8006ba2:	e00c      	b.n	8006bbe <HAL_TIM_DMABurst_MultiWriteStart+0x256>
      break;
 8006ba4:	bf00      	nop
 8006ba6:	e00a      	b.n	8006bbe <HAL_TIM_DMABurst_MultiWriteStart+0x256>
      break;
 8006ba8:	bf00      	nop
 8006baa:	e008      	b.n	8006bbe <HAL_TIM_DMABurst_MultiWriteStart+0x256>
      break;
 8006bac:	bf00      	nop
 8006bae:	e006      	b.n	8006bbe <HAL_TIM_DMABurst_MultiWriteStart+0x256>
      break;
 8006bb0:	bf00      	nop
 8006bb2:	e004      	b.n	8006bbe <HAL_TIM_DMABurst_MultiWriteStart+0x256>
      break;
 8006bb4:	bf00      	nop
 8006bb6:	e002      	b.n	8006bbe <HAL_TIM_DMABurst_MultiWriteStart+0x256>
      break;
 8006bb8:	bf00      	nop
 8006bba:	e000      	b.n	8006bbe <HAL_TIM_DMABurst_MultiWriteStart+0x256>
      break;
 8006bbc:	bf00      	nop
  }

  if (status == HAL_OK)
 8006bbe:	7dfb      	ldrb	r3, [r7, #23]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d10d      	bne.n	8006be0 <HAL_TIM_DMABurst_MultiWriteStart+0x278>
  {
    /* Configure the DMA Burst Mode */
    htim->Instance->DCR = (BurstBaseAddress | BurstLength);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	68b9      	ldr	r1, [r7, #8]
 8006bca:	6a3a      	ldr	r2, [r7, #32]
 8006bcc:	430a      	orrs	r2, r1
 8006bce:	649a      	str	r2, [r3, #72]	; 0x48
    /* Enable the TIM DMA Request */
    __HAL_TIM_ENABLE_DMA(htim, BurstRequestSrc);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	68d9      	ldr	r1, [r3, #12]
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	687a      	ldr	r2, [r7, #4]
 8006bdc:	430a      	orrs	r2, r1
 8006bde:	60da      	str	r2, [r3, #12]
  }

  /* Return function status */
  return status;
 8006be0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3718      	adds	r7, #24
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}
 8006bea:	bf00      	nop
 8006bec:	08007aad 	.word	0x08007aad
 8006bf0:	08007adb 	.word	0x08007adb
 8006bf4:	080077db 	.word	0x080077db
 8006bf8:	0800786d 	.word	0x0800786d
 8006bfc:	08007915 	.word	0x08007915
 8006c00:	0800a379 	.word	0x0800a379
 8006c04:	0800a39d 	.word	0x0800a39d
 8006c08:	08007af7 	.word	0x08007af7
 8006c0c:	08007b25 	.word	0x08007b25

08006c10 <HAL_TIM_DMABurst_WriteStop>:
  * @param  htim TIM handle
  * @param  BurstRequestSrc TIM DMA Request sources to disable
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_DMABurst_WriteStop(TIM_HandleTypeDef *htim, uint32_t BurstRequestSrc)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b084      	sub	sp, #16
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_DMA_SOURCE(BurstRequestSrc));

  /* Abort the DMA transfer (at least disable the DMA channel) */
  switch (BurstRequestSrc)
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c24:	d050      	beq.n	8006cc8 <HAL_TIM_DMABurst_WriteStop+0xb8>
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c2c:	d852      	bhi.n	8006cd4 <HAL_TIM_DMABurst_WriteStop+0xc4>
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c34:	d042      	beq.n	8006cbc <HAL_TIM_DMABurst_WriteStop+0xac>
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c3c:	d84a      	bhi.n	8006cd4 <HAL_TIM_DMABurst_WriteStop+0xc4>
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c44:	d034      	beq.n	8006cb0 <HAL_TIM_DMABurst_WriteStop+0xa0>
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c4c:	d842      	bhi.n	8006cd4 <HAL_TIM_DMABurst_WriteStop+0xc4>
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c54:	d026      	beq.n	8006ca4 <HAL_TIM_DMABurst_WriteStop+0x94>
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c5c:	d83a      	bhi.n	8006cd4 <HAL_TIM_DMABurst_WriteStop+0xc4>
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c64:	d018      	beq.n	8006c98 <HAL_TIM_DMABurst_WriteStop+0x88>
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c6c:	d832      	bhi.n	8006cd4 <HAL_TIM_DMABurst_WriteStop+0xc4>
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c74:	d004      	beq.n	8006c80 <HAL_TIM_DMABurst_WriteStop+0x70>
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c7c:	d006      	beq.n	8006c8c <HAL_TIM_DMABurst_WriteStop+0x7c>
 8006c7e:	e029      	b.n	8006cd4 <HAL_TIM_DMABurst_WriteStop+0xc4>
  {
    case TIM_DMA_UPDATE:
    {
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_UPDATE]);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6a1b      	ldr	r3, [r3, #32]
 8006c84:	4618      	mov	r0, r3
 8006c86:	f7fa fa8b 	bl	80011a0 <HAL_DMA_Abort_IT>
      break;
 8006c8a:	e026      	b.n	8006cda <HAL_TIM_DMABurst_WriteStop+0xca>
    }
    case TIM_DMA_CC1:
    {
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c90:	4618      	mov	r0, r3
 8006c92:	f7fa fa85 	bl	80011a0 <HAL_DMA_Abort_IT>
      break;
 8006c96:	e020      	b.n	8006cda <HAL_TIM_DMABurst_WriteStop+0xca>
    }
    case TIM_DMA_CC2:
    {
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f7fa fa7f 	bl	80011a0 <HAL_DMA_Abort_IT>
      break;
 8006ca2:	e01a      	b.n	8006cda <HAL_TIM_DMABurst_WriteStop+0xca>
    }
    case TIM_DMA_CC3:
    {
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ca8:	4618      	mov	r0, r3
 8006caa:	f7fa fa79 	bl	80011a0 <HAL_DMA_Abort_IT>
      break;
 8006cae:	e014      	b.n	8006cda <HAL_TIM_DMABurst_WriteStop+0xca>
    }
    case TIM_DMA_CC4:
    {
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f7fa fa73 	bl	80011a0 <HAL_DMA_Abort_IT>
      break;
 8006cba:	e00e      	b.n	8006cda <HAL_TIM_DMABurst_WriteStop+0xca>
    }
    case TIM_DMA_COM:
    {
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_COMMUTATION]);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f7fa fa6d 	bl	80011a0 <HAL_DMA_Abort_IT>
      break;
 8006cc6:	e008      	b.n	8006cda <HAL_TIM_DMABurst_WriteStop+0xca>
    }
    case TIM_DMA_TRIGGER:
    {
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_TRIGGER]);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f7fa fa67 	bl	80011a0 <HAL_DMA_Abort_IT>
      break;
 8006cd2:	e002      	b.n	8006cda <HAL_TIM_DMABurst_WriteStop+0xca>
    }
    default:
      status = HAL_ERROR;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	73fb      	strb	r3, [r7, #15]
      break;
 8006cd8:	bf00      	nop
  }

  if (status == HAL_OK)
 8006cda:	7bfb      	ldrb	r3, [r7, #15]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d10c      	bne.n	8006cfa <HAL_TIM_DMABurst_WriteStop+0xea>
  {
    /* Disable the TIM Update DMA request */
    __HAL_TIM_DISABLE_DMA(htim, BurstRequestSrc);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	68d9      	ldr	r1, [r3, #12]
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	43da      	mvns	r2, r3
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	400a      	ands	r2, r1
 8006cf0:	60da      	str	r2, [r3, #12]

    /* Change the DMA burst operation state */
    htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2201      	movs	r2, #1
 8006cf6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
  }

  /* Return function status */
  return status;
 8006cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	3710      	adds	r7, #16
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bd80      	pop	{r7, pc}

08006d04 <HAL_TIM_DMABurst_ReadStart>:
  * @note   This function should be used only when BurstLength is equal to DMA data transfer length.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_DMABurst_ReadStart(TIM_HandleTypeDef *htim, uint32_t BurstBaseAddress,
                                             uint32_t BurstRequestSrc, uint32_t  *BurstBuffer, uint32_t  BurstLength)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b088      	sub	sp, #32
 8006d08:	af02      	add	r7, sp, #8
 8006d0a:	60f8      	str	r0, [r7, #12]
 8006d0c:	60b9      	str	r1, [r7, #8]
 8006d0e:	607a      	str	r2, [r7, #4]
 8006d10:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;

  status = HAL_TIM_DMABurst_MultiReadStart(htim, BurstBaseAddress, BurstRequestSrc, BurstBuffer, BurstLength,
                                           ((BurstLength) >> 8U) + 1U);
 8006d12:	6a3b      	ldr	r3, [r7, #32]
 8006d14:	0a1b      	lsrs	r3, r3, #8
  status = HAL_TIM_DMABurst_MultiReadStart(htim, BurstBaseAddress, BurstRequestSrc, BurstBuffer, BurstLength,
 8006d16:	3301      	adds	r3, #1
 8006d18:	9301      	str	r3, [sp, #4]
 8006d1a:	6a3b      	ldr	r3, [r7, #32]
 8006d1c:	9300      	str	r3, [sp, #0]
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	687a      	ldr	r2, [r7, #4]
 8006d22:	68b9      	ldr	r1, [r7, #8]
 8006d24:	68f8      	ldr	r0, [r7, #12]
 8006d26:	f000 f807 	bl	8006d38 <HAL_TIM_DMABurst_MultiReadStart>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	75fb      	strb	r3, [r7, #23]


  return status;
 8006d2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3718      	adds	r7, #24
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}

08006d38 <HAL_TIM_DMABurst_MultiReadStart>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_DMABurst_MultiReadStart(TIM_HandleTypeDef *htim, uint32_t BurstBaseAddress,
                                                  uint32_t BurstRequestSrc, uint32_t  *BurstBuffer,
                                                  uint32_t  BurstLength, uint32_t  DataLength)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b086      	sub	sp, #24
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	60f8      	str	r0, [r7, #12]
 8006d40:	60b9      	str	r1, [r7, #8]
 8006d42:	607a      	str	r2, [r7, #4]
 8006d44:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d46:	2300      	movs	r3, #0
 8006d48:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_DMA_BASE(BurstBaseAddress));
  assert_param(IS_TIM_DMA_SOURCE(BurstRequestSrc));
  assert_param(IS_TIM_DMA_LENGTH(BurstLength));
  assert_param(IS_TIM_DMA_DATA_LENGTH(DataLength));

  if (htim->DMABurstState == HAL_DMA_BURST_STATE_BUSY)
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006d50:	b2db      	uxtb	r3, r3
 8006d52:	2b02      	cmp	r3, #2
 8006d54:	d101      	bne.n	8006d5a <HAL_TIM_DMABurst_MultiReadStart+0x22>
  {
    return HAL_BUSY;
 8006d56:	2302      	movs	r3, #2
 8006d58:	e12b      	b.n	8006fb2 <HAL_TIM_DMABurst_MultiReadStart+0x27a>
  }
  else if (htim->DMABurstState == HAL_DMA_BURST_STATE_READY)
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006d60:	b2db      	uxtb	r3, r3
 8006d62:	2b01      	cmp	r3, #1
 8006d64:	d10b      	bne.n	8006d7e <HAL_TIM_DMABurst_MultiReadStart+0x46>
  {
    if ((BurstBuffer == NULL) && (BurstLength > 0U))
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d104      	bne.n	8006d76 <HAL_TIM_DMABurst_MultiReadStart+0x3e>
 8006d6c:	6a3b      	ldr	r3, [r7, #32]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d001      	beq.n	8006d76 <HAL_TIM_DMABurst_MultiReadStart+0x3e>
    {
      return HAL_ERROR;
 8006d72:	2301      	movs	r3, #1
 8006d74:	e11d      	b.n	8006fb2 <HAL_TIM_DMABurst_MultiReadStart+0x27a>
    }
    else
    {
      htim->DMABurstState = HAL_DMA_BURST_STATE_BUSY;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2202      	movs	r2, #2
 8006d7a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
  }
  else
  {
    /* nothing to do */
  }
  switch (BurstRequestSrc)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d84:	f000 80d8 	beq.w	8006f38 <HAL_TIM_DMABurst_MultiReadStart+0x200>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d8e:	f200 80ee 	bhi.w	8006f6e <HAL_TIM_DMABurst_MultiReadStart+0x236>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d98:	f000 80b3 	beq.w	8006f02 <HAL_TIM_DMABurst_MultiReadStart+0x1ca>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006da2:	f200 80e4 	bhi.w	8006f6e <HAL_TIM_DMABurst_MultiReadStart+0x236>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dac:	f000 808e 	beq.w	8006ecc <HAL_TIM_DMABurst_MultiReadStart+0x194>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006db6:	f200 80da 	bhi.w	8006f6e <HAL_TIM_DMABurst_MultiReadStart+0x236>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006dc0:	d069      	beq.n	8006e96 <HAL_TIM_DMABurst_MultiReadStart+0x15e>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006dc8:	f200 80d1 	bhi.w	8006f6e <HAL_TIM_DMABurst_MultiReadStart+0x236>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006dd2:	d045      	beq.n	8006e60 <HAL_TIM_DMABurst_MultiReadStart+0x128>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006dda:	f200 80c8 	bhi.w	8006f6e <HAL_TIM_DMABurst_MultiReadStart+0x236>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006de4:	d004      	beq.n	8006df0 <HAL_TIM_DMABurst_MultiReadStart+0xb8>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006dec:	d01c      	beq.n	8006e28 <HAL_TIM_DMABurst_MultiReadStart+0xf0>
 8006dee:	e0be      	b.n	8006f6e <HAL_TIM_DMABurst_MultiReadStart+0x236>
  {
    case TIM_DMA_UPDATE:
    {
      /* Set the DMA Period elapsed callbacks */
      htim->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = TIM_DMAPeriodElapsedCplt;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	6a1b      	ldr	r3, [r3, #32]
 8006df4:	4a71      	ldr	r2, [pc, #452]	; (8006fbc <HAL_TIM_DMABurst_MultiReadStart+0x284>)
 8006df6:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_UPDATE]->XferHalfCpltCallback = TIM_DMAPeriodElapsedHalfCplt;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	6a1b      	ldr	r3, [r3, #32]
 8006dfc:	4a70      	ldr	r2, [pc, #448]	; (8006fc0 <HAL_TIM_DMABurst_MultiReadStart+0x288>)
 8006dfe:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_UPDATE]->XferErrorCallback = TIM_DMAError ;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	6a1b      	ldr	r3, [r3, #32]
 8006e04:	4a6f      	ldr	r2, [pc, #444]	; (8006fc4 <HAL_TIM_DMABurst_MultiReadStart+0x28c>)
 8006e06:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_UPDATE], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer,
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	6a18      	ldr	r0, [r3, #32]
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	334c      	adds	r3, #76	; 0x4c
 8006e12:	4619      	mov	r1, r3
 8006e14:	683a      	ldr	r2, [r7, #0]
 8006e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e18:	f7fa f927 	bl	800106a <HAL_DMA_Start_IT>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	f000 80a8 	beq.w	8006f74 <HAL_TIM_DMABurst_MultiReadStart+0x23c>
                           DataLength) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006e24:	2301      	movs	r3, #1
 8006e26:	e0c4      	b.n	8006fb2 <HAL_TIM_DMABurst_MultiReadStart+0x27a>
      break;
    }
    case TIM_DMA_CC1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e2c:	4a66      	ldr	r2, [pc, #408]	; (8006fc8 <HAL_TIM_DMABurst_MultiReadStart+0x290>)
 8006e2e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e34:	4a65      	ldr	r2, [pc, #404]	; (8006fcc <HAL_TIM_DMABurst_MultiReadStart+0x294>)
 8006e36:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e3c:	4a61      	ldr	r2, [pc, #388]	; (8006fc4 <HAL_TIM_DMABurst_MultiReadStart+0x28c>)
 8006e3e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer,
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	334c      	adds	r3, #76	; 0x4c
 8006e4a:	4619      	mov	r1, r3
 8006e4c:	683a      	ldr	r2, [r7, #0]
 8006e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e50:	f7fa f90b 	bl	800106a <HAL_DMA_Start_IT>
 8006e54:	4603      	mov	r3, r0
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	f000 808e 	beq.w	8006f78 <HAL_TIM_DMABurst_MultiReadStart+0x240>
                           DataLength) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	e0a8      	b.n	8006fb2 <HAL_TIM_DMABurst_MultiReadStart+0x27a>
      break;
    }
    case TIM_DMA_CC2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e64:	4a58      	ldr	r2, [pc, #352]	; (8006fc8 <HAL_TIM_DMABurst_MultiReadStart+0x290>)
 8006e66:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e6c:	4a57      	ldr	r2, [pc, #348]	; (8006fcc <HAL_TIM_DMABurst_MultiReadStart+0x294>)
 8006e6e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e74:	4a53      	ldr	r2, [pc, #332]	; (8006fc4 <HAL_TIM_DMABurst_MultiReadStart+0x28c>)
 8006e76:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer,
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	334c      	adds	r3, #76	; 0x4c
 8006e82:	4619      	mov	r1, r3
 8006e84:	683a      	ldr	r2, [r7, #0]
 8006e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e88:	f7fa f8ef 	bl	800106a <HAL_DMA_Start_IT>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d074      	beq.n	8006f7c <HAL_TIM_DMABurst_MultiReadStart+0x244>
                           DataLength) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006e92:	2301      	movs	r3, #1
 8006e94:	e08d      	b.n	8006fb2 <HAL_TIM_DMABurst_MultiReadStart+0x27a>
      break;
    }
    case TIM_DMA_CC3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e9a:	4a4b      	ldr	r2, [pc, #300]	; (8006fc8 <HAL_TIM_DMABurst_MultiReadStart+0x290>)
 8006e9c:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ea2:	4a4a      	ldr	r2, [pc, #296]	; (8006fcc <HAL_TIM_DMABurst_MultiReadStart+0x294>)
 8006ea4:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eaa:	4a46      	ldr	r2, [pc, #280]	; (8006fc4 <HAL_TIM_DMABurst_MultiReadStart+0x28c>)
 8006eac:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer,
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	334c      	adds	r3, #76	; 0x4c
 8006eb8:	4619      	mov	r1, r3
 8006eba:	683a      	ldr	r2, [r7, #0]
 8006ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ebe:	f7fa f8d4 	bl	800106a <HAL_DMA_Start_IT>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d05b      	beq.n	8006f80 <HAL_TIM_DMABurst_MultiReadStart+0x248>
                           DataLength) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	e072      	b.n	8006fb2 <HAL_TIM_DMABurst_MultiReadStart+0x27a>
      break;
    }
    case TIM_DMA_CC4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ed0:	4a3d      	ldr	r2, [pc, #244]	; (8006fc8 <HAL_TIM_DMABurst_MultiReadStart+0x290>)
 8006ed2:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ed8:	4a3c      	ldr	r2, [pc, #240]	; (8006fcc <HAL_TIM_DMABurst_MultiReadStart+0x294>)
 8006eda:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ee0:	4a38      	ldr	r2, [pc, #224]	; (8006fc4 <HAL_TIM_DMABurst_MultiReadStart+0x28c>)
 8006ee2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer,
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	334c      	adds	r3, #76	; 0x4c
 8006eee:	4619      	mov	r1, r3
 8006ef0:	683a      	ldr	r2, [r7, #0]
 8006ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef4:	f7fa f8b9 	bl	800106a <HAL_DMA_Start_IT>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d042      	beq.n	8006f84 <HAL_TIM_DMABurst_MultiReadStart+0x24c>
                           DataLength) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006efe:	2301      	movs	r3, #1
 8006f00:	e057      	b.n	8006fb2 <HAL_TIM_DMABurst_MultiReadStart+0x27a>
      break;
    }
    case TIM_DMA_COM:
    {
      /* Set the DMA commutation callbacks */
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferCpltCallback =  TIMEx_DMACommutationCplt;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f06:	4a32      	ldr	r2, [pc, #200]	; (8006fd0 <HAL_TIM_DMABurst_MultiReadStart+0x298>)
 8006f08:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferHalfCpltCallback =  TIMEx_DMACommutationHalfCplt;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f0e:	4a31      	ldr	r2, [pc, #196]	; (8006fd4 <HAL_TIM_DMABurst_MultiReadStart+0x29c>)
 8006f10:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferErrorCallback = TIM_DMAError ;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f16:	4a2b      	ldr	r2, [pc, #172]	; (8006fc4 <HAL_TIM_DMABurst_MultiReadStart+0x28c>)
 8006f18:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_COMMUTATION], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer,
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	334c      	adds	r3, #76	; 0x4c
 8006f24:	4619      	mov	r1, r3
 8006f26:	683a      	ldr	r2, [r7, #0]
 8006f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f2a:	f7fa f89e 	bl	800106a <HAL_DMA_Start_IT>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d029      	beq.n	8006f88 <HAL_TIM_DMABurst_MultiReadStart+0x250>
                           DataLength) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006f34:	2301      	movs	r3, #1
 8006f36:	e03c      	b.n	8006fb2 <HAL_TIM_DMABurst_MultiReadStart+0x27a>
      break;
    }
    case TIM_DMA_TRIGGER:
    {
      /* Set the DMA trigger callbacks */
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferCpltCallback = TIM_DMATriggerCplt;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f3c:	4a26      	ldr	r2, [pc, #152]	; (8006fd8 <HAL_TIM_DMABurst_MultiReadStart+0x2a0>)
 8006f3e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferHalfCpltCallback = TIM_DMATriggerHalfCplt;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f44:	4a25      	ldr	r2, [pc, #148]	; (8006fdc <HAL_TIM_DMABurst_MultiReadStart+0x2a4>)
 8006f46:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferErrorCallback = TIM_DMAError ;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f4c:	4a1d      	ldr	r2, [pc, #116]	; (8006fc4 <HAL_TIM_DMABurst_MultiReadStart+0x28c>)
 8006f4e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_TRIGGER], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer,
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	334c      	adds	r3, #76	; 0x4c
 8006f5a:	4619      	mov	r1, r3
 8006f5c:	683a      	ldr	r2, [r7, #0]
 8006f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f60:	f7fa f883 	bl	800106a <HAL_DMA_Start_IT>
 8006f64:	4603      	mov	r3, r0
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d010      	beq.n	8006f8c <HAL_TIM_DMABurst_MultiReadStart+0x254>
                           DataLength) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	e021      	b.n	8006fb2 <HAL_TIM_DMABurst_MultiReadStart+0x27a>
      }
      break;
    }
    default:
      status = HAL_ERROR;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	75fb      	strb	r3, [r7, #23]
      break;
 8006f72:	e00c      	b.n	8006f8e <HAL_TIM_DMABurst_MultiReadStart+0x256>
      break;
 8006f74:	bf00      	nop
 8006f76:	e00a      	b.n	8006f8e <HAL_TIM_DMABurst_MultiReadStart+0x256>
      break;
 8006f78:	bf00      	nop
 8006f7a:	e008      	b.n	8006f8e <HAL_TIM_DMABurst_MultiReadStart+0x256>
      break;
 8006f7c:	bf00      	nop
 8006f7e:	e006      	b.n	8006f8e <HAL_TIM_DMABurst_MultiReadStart+0x256>
      break;
 8006f80:	bf00      	nop
 8006f82:	e004      	b.n	8006f8e <HAL_TIM_DMABurst_MultiReadStart+0x256>
      break;
 8006f84:	bf00      	nop
 8006f86:	e002      	b.n	8006f8e <HAL_TIM_DMABurst_MultiReadStart+0x256>
      break;
 8006f88:	bf00      	nop
 8006f8a:	e000      	b.n	8006f8e <HAL_TIM_DMABurst_MultiReadStart+0x256>
      break;
 8006f8c:	bf00      	nop
  }

  if (status == HAL_OK)
 8006f8e:	7dfb      	ldrb	r3, [r7, #23]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d10d      	bne.n	8006fb0 <HAL_TIM_DMABurst_MultiReadStart+0x278>
  {
    /* Configure the DMA Burst Mode */
    htim->Instance->DCR = (BurstBaseAddress | BurstLength);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	68b9      	ldr	r1, [r7, #8]
 8006f9a:	6a3a      	ldr	r2, [r7, #32]
 8006f9c:	430a      	orrs	r2, r1
 8006f9e:	649a      	str	r2, [r3, #72]	; 0x48

    /* Enable the TIM DMA Request */
    __HAL_TIM_ENABLE_DMA(htim, BurstRequestSrc);
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	68d9      	ldr	r1, [r3, #12]
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	687a      	ldr	r2, [r7, #4]
 8006fac:	430a      	orrs	r2, r1
 8006fae:	60da      	str	r2, [r3, #12]
  }

  /* Return function status */
  return status;
 8006fb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3718      	adds	r7, #24
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}
 8006fba:	bf00      	nop
 8006fbc:	08007aad 	.word	0x08007aad
 8006fc0:	08007adb 	.word	0x08007adb
 8006fc4:	080077db 	.word	0x080077db
 8006fc8:	0800797d 	.word	0x0800797d
 8006fcc:	08007a45 	.word	0x08007a45
 8006fd0:	0800a379 	.word	0x0800a379
 8006fd4:	0800a39d 	.word	0x0800a39d
 8006fd8:	08007af7 	.word	0x08007af7
 8006fdc:	08007b25 	.word	0x08007b25

08006fe0 <HAL_TIM_DMABurst_ReadStop>:
  * @param  htim TIM handle
  * @param  BurstRequestSrc TIM DMA Request sources to disable.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_DMABurst_ReadStop(TIM_HandleTypeDef *htim, uint32_t BurstRequestSrc)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b084      	sub	sp, #16
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
 8006fe8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006fea:	2300      	movs	r3, #0
 8006fec:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_DMA_SOURCE(BurstRequestSrc));

  /* Abort the DMA transfer (at least disable the DMA channel) */
  switch (BurstRequestSrc)
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ff4:	d050      	beq.n	8007098 <HAL_TIM_DMABurst_ReadStop+0xb8>
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ffc:	d852      	bhi.n	80070a4 <HAL_TIM_DMABurst_ReadStop+0xc4>
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007004:	d042      	beq.n	800708c <HAL_TIM_DMABurst_ReadStop+0xac>
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800700c:	d84a      	bhi.n	80070a4 <HAL_TIM_DMABurst_ReadStop+0xc4>
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007014:	d034      	beq.n	8007080 <HAL_TIM_DMABurst_ReadStop+0xa0>
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800701c:	d842      	bhi.n	80070a4 <HAL_TIM_DMABurst_ReadStop+0xc4>
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007024:	d026      	beq.n	8007074 <HAL_TIM_DMABurst_ReadStop+0x94>
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800702c:	d83a      	bhi.n	80070a4 <HAL_TIM_DMABurst_ReadStop+0xc4>
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007034:	d018      	beq.n	8007068 <HAL_TIM_DMABurst_ReadStop+0x88>
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800703c:	d832      	bhi.n	80070a4 <HAL_TIM_DMABurst_ReadStop+0xc4>
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007044:	d004      	beq.n	8007050 <HAL_TIM_DMABurst_ReadStop+0x70>
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800704c:	d006      	beq.n	800705c <HAL_TIM_DMABurst_ReadStop+0x7c>
 800704e:	e029      	b.n	80070a4 <HAL_TIM_DMABurst_ReadStop+0xc4>
  {
    case TIM_DMA_UPDATE:
    {
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_UPDATE]);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6a1b      	ldr	r3, [r3, #32]
 8007054:	4618      	mov	r0, r3
 8007056:	f7fa f8a3 	bl	80011a0 <HAL_DMA_Abort_IT>
      break;
 800705a:	e026      	b.n	80070aa <HAL_TIM_DMABurst_ReadStop+0xca>
    }
    case TIM_DMA_CC1:
    {
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007060:	4618      	mov	r0, r3
 8007062:	f7fa f89d 	bl	80011a0 <HAL_DMA_Abort_IT>
      break;
 8007066:	e020      	b.n	80070aa <HAL_TIM_DMABurst_ReadStop+0xca>
    }
    case TIM_DMA_CC2:
    {
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800706c:	4618      	mov	r0, r3
 800706e:	f7fa f897 	bl	80011a0 <HAL_DMA_Abort_IT>
      break;
 8007072:	e01a      	b.n	80070aa <HAL_TIM_DMABurst_ReadStop+0xca>
    }
    case TIM_DMA_CC3:
    {
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007078:	4618      	mov	r0, r3
 800707a:	f7fa f891 	bl	80011a0 <HAL_DMA_Abort_IT>
      break;
 800707e:	e014      	b.n	80070aa <HAL_TIM_DMABurst_ReadStop+0xca>
    }
    case TIM_DMA_CC4:
    {
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007084:	4618      	mov	r0, r3
 8007086:	f7fa f88b 	bl	80011a0 <HAL_DMA_Abort_IT>
      break;
 800708a:	e00e      	b.n	80070aa <HAL_TIM_DMABurst_ReadStop+0xca>
    }
    case TIM_DMA_COM:
    {
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_COMMUTATION]);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007090:	4618      	mov	r0, r3
 8007092:	f7fa f885 	bl	80011a0 <HAL_DMA_Abort_IT>
      break;
 8007096:	e008      	b.n	80070aa <HAL_TIM_DMABurst_ReadStop+0xca>
    }
    case TIM_DMA_TRIGGER:
    {
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_TRIGGER]);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800709c:	4618      	mov	r0, r3
 800709e:	f7fa f87f 	bl	80011a0 <HAL_DMA_Abort_IT>
      break;
 80070a2:	e002      	b.n	80070aa <HAL_TIM_DMABurst_ReadStop+0xca>
    }
    default:
      status = HAL_ERROR;
 80070a4:	2301      	movs	r3, #1
 80070a6:	73fb      	strb	r3, [r7, #15]
      break;
 80070a8:	bf00      	nop
  }

  if (status == HAL_OK)
 80070aa:	7bfb      	ldrb	r3, [r7, #15]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d10c      	bne.n	80070ca <HAL_TIM_DMABurst_ReadStop+0xea>
  {
    /* Disable the TIM Update DMA request */
    __HAL_TIM_DISABLE_DMA(htim, BurstRequestSrc);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	68d9      	ldr	r1, [r3, #12]
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	43da      	mvns	r2, r3
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	400a      	ands	r2, r1
 80070c0:	60da      	str	r2, [r3, #12]

    /* Change the DMA burst operation state */
    htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2201      	movs	r2, #1
 80070c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
  }

  /* Return function status */
  return status;
 80070ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3710      	adds	r7, #16
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <HAL_TIM_GenerateEvent>:
  *         supporting a break input.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_TIM_GenerateEvent(TIM_HandleTypeDef *htim, uint32_t EventSource)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b083      	sub	sp, #12
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_EVENT_SOURCE(EventSource));

  /* Process Locked */
  __HAL_LOCK(htim);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070e4:	2b01      	cmp	r3, #1
 80070e6:	d101      	bne.n	80070ec <HAL_TIM_GenerateEvent+0x18>
 80070e8:	2302      	movs	r3, #2
 80070ea:	e014      	b.n	8007116 <HAL_TIM_GenerateEvent+0x42>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2201      	movs	r2, #1
 80070f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2202      	movs	r2, #2
 80070f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the event sources */
  htim->Instance->EGR = EventSource;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	683a      	ldr	r2, [r7, #0]
 8007102:	615a      	str	r2, [r3, #20]

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2201      	movs	r2, #1
 8007108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2200      	movs	r2, #0
 8007110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8007114:	2300      	movs	r3, #0
}
 8007116:	4618      	mov	r0, r3
 8007118:	370c      	adds	r7, #12
 800711a:	46bd      	mov	sp, r7
 800711c:	bc80      	pop	{r7}
 800711e:	4770      	bx	lr

08007120 <HAL_TIM_ConfigOCrefClear>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigOCrefClear(TIM_HandleTypeDef *htim,
                                           const TIM_ClearInputConfigTypeDef *sClearInputConfig,
                                           uint32_t Channel)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b086      	sub	sp, #24
 8007124:	af00      	add	r7, sp, #0
 8007126:	60f8      	str	r0, [r7, #12]
 8007128:	60b9      	str	r1, [r7, #8]
 800712a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800712c:	2300      	movs	r3, #0
 800712e:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_TIM_OCXREF_CLEAR_INSTANCE(htim->Instance));
  assert_param(IS_TIM_CLEARINPUT_SOURCE(sClearInputConfig->ClearInputSource));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007136:	2b01      	cmp	r3, #1
 8007138:	d101      	bne.n	800713e <HAL_TIM_ConfigOCrefClear+0x1e>
 800713a:	2302      	movs	r3, #2
 800713c:	e0b8      	b.n	80072b0 <HAL_TIM_ConfigOCrefClear+0x190>
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2201      	movs	r2, #1
 8007142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2202      	movs	r2, #2
 800714a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (sClearInputConfig->ClearInputSource)
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	685b      	ldr	r3, [r3, #4]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d002      	beq.n	800715c <HAL_TIM_ConfigOCrefClear+0x3c>
 8007156:	2b01      	cmp	r3, #1
 8007158:	d009      	beq.n	800716e <HAL_TIM_ConfigOCrefClear+0x4e>
 800715a:	e021      	b.n	80071a0 <HAL_TIM_ConfigOCrefClear+0x80>
  {
    case TIM_CLEARINPUTSOURCE_NONE:
    {
      /* Clear the OCREF clear selection bit and the the ETR Bits */
      CLEAR_BIT(htim->Instance->SMCR, (TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP));
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	689a      	ldr	r2, [r3, #8]
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800716a:	609a      	str	r2, [r3, #8]
      break;
 800716c:	e01b      	b.n	80071a6 <HAL_TIM_ConfigOCrefClear+0x86>
      assert_param(IS_TIM_CLEARINPUT_POLARITY(sClearInputConfig->ClearInputPolarity));
      assert_param(IS_TIM_CLEARINPUT_PRESCALER(sClearInputConfig->ClearInputPrescaler));
      assert_param(IS_TIM_CLEARINPUT_FILTER(sClearInputConfig->ClearInputFilter));

      /* When OCRef clear feature is used with ETR source, ETR prescaler must be off */
      if (sClearInputConfig->ClearInputPrescaler != TIM_CLEARINPUTPRESCALER_DIV1)
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	68db      	ldr	r3, [r3, #12]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d009      	beq.n	800718a <HAL_TIM_ConfigOCrefClear+0x6a>
      {
        htim->State = HAL_TIM_STATE_READY;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	2201      	movs	r2, #1
 800717a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        __HAL_UNLOCK(htim);
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	2200      	movs	r2, #0
 8007182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8007186:	2301      	movs	r3, #1
 8007188:	e092      	b.n	80072b0 <HAL_TIM_ConfigOCrefClear+0x190>
      }

      TIM_ETR_SetConfig(htim->Instance,
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	6818      	ldr	r0, [r3, #0]
                        sClearInputConfig->ClearInputPrescaler,
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	68d9      	ldr	r1, [r3, #12]
                        sClearInputConfig->ClearInputPolarity,
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	689a      	ldr	r2, [r3, #8]
                        sClearInputConfig->ClearInputFilter);
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800719a:	f001 f8d1 	bl	8008340 <TIM_ETR_SetConfig>
      break;
 800719e:	e002      	b.n	80071a6 <HAL_TIM_ConfigOCrefClear+0x86>
    }

    default:
      status = HAL_ERROR;
 80071a0:	2301      	movs	r3, #1
 80071a2:	75fb      	strb	r3, [r7, #23]
      break;
 80071a4:	bf00      	nop
  }

  if (status == HAL_OK)
 80071a6:	7dfb      	ldrb	r3, [r7, #23]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d178      	bne.n	800729e <HAL_TIM_ConfigOCrefClear+0x17e>
  {
    switch (Channel)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2b0c      	cmp	r3, #12
 80071b0:	d874      	bhi.n	800729c <HAL_TIM_ConfigOCrefClear+0x17c>
 80071b2:	a201      	add	r2, pc, #4	; (adr r2, 80071b8 <HAL_TIM_ConfigOCrefClear+0x98>)
 80071b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071b8:	080071ed 	.word	0x080071ed
 80071bc:	0800729d 	.word	0x0800729d
 80071c0:	0800729d 	.word	0x0800729d
 80071c4:	0800729d 	.word	0x0800729d
 80071c8:	08007219 	.word	0x08007219
 80071cc:	0800729d 	.word	0x0800729d
 80071d0:	0800729d 	.word	0x0800729d
 80071d4:	0800729d 	.word	0x0800729d
 80071d8:	08007245 	.word	0x08007245
 80071dc:	0800729d 	.word	0x0800729d
 80071e0:	0800729d 	.word	0x0800729d
 80071e4:	0800729d 	.word	0x0800729d
 80071e8:	08007271 	.word	0x08007271
    {
      case TIM_CHANNEL_1:
      {
        if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d008      	beq.n	8007206 <HAL_TIM_ConfigOCrefClear+0xe6>
        {
          /* Enable the OCREF clear feature for Channel 1 */
          SET_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC1CE);
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	699a      	ldr	r2, [r3, #24]
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007202:	619a      	str	r2, [r3, #24]
        else
        {
          /* Disable the OCREF clear feature for Channel 1 */
          CLEAR_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC1CE);
        }
        break;
 8007204:	e04b      	b.n	800729e <HAL_TIM_ConfigOCrefClear+0x17e>
          CLEAR_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC1CE);
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	699a      	ldr	r2, [r3, #24]
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007214:	619a      	str	r2, [r3, #24]
        break;
 8007216:	e042      	b.n	800729e <HAL_TIM_ConfigOCrefClear+0x17e>
      }
      case TIM_CHANNEL_2:
      {
        if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d008      	beq.n	8007232 <HAL_TIM_ConfigOCrefClear+0x112>
        {
          /* Enable the OCREF clear feature for Channel 2 */
          SET_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC2CE);
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	699a      	ldr	r2, [r3, #24]
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800722e:	619a      	str	r2, [r3, #24]
        else
        {
          /* Disable the OCREF clear feature for Channel 2 */
          CLEAR_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC2CE);
        }
        break;
 8007230:	e035      	b.n	800729e <HAL_TIM_ConfigOCrefClear+0x17e>
          CLEAR_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC2CE);
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	699a      	ldr	r2, [r3, #24]
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007240:	619a      	str	r2, [r3, #24]
        break;
 8007242:	e02c      	b.n	800729e <HAL_TIM_ConfigOCrefClear+0x17e>
      }
      case TIM_CHANNEL_3:
      {
        if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d008      	beq.n	800725e <HAL_TIM_ConfigOCrefClear+0x13e>
        {
          /* Enable the OCREF clear feature for Channel 3 */
          SET_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC3CE);
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	69da      	ldr	r2, [r3, #28]
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800725a:	61da      	str	r2, [r3, #28]
        else
        {
          /* Disable the OCREF clear feature for Channel 3 */
          CLEAR_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC3CE);
        }
        break;
 800725c:	e01f      	b.n	800729e <HAL_TIM_ConfigOCrefClear+0x17e>
          CLEAR_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC3CE);
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	69da      	ldr	r2, [r3, #28]
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800726c:	61da      	str	r2, [r3, #28]
        break;
 800726e:	e016      	b.n	800729e <HAL_TIM_ConfigOCrefClear+0x17e>
      }
      case TIM_CHANNEL_4:
      {
        if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d008      	beq.n	800728a <HAL_TIM_ConfigOCrefClear+0x16a>
        {
          /* Enable the OCREF clear feature for Channel 4 */
          SET_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC4CE);
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	69da      	ldr	r2, [r3, #28]
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007286:	61da      	str	r2, [r3, #28]
        else
        {
          /* Disable the OCREF clear feature for Channel 4 */
          CLEAR_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC4CE);
        }
        break;
 8007288:	e009      	b.n	800729e <HAL_TIM_ConfigOCrefClear+0x17e>
          CLEAR_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC4CE);
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	69da      	ldr	r2, [r3, #28]
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007298:	61da      	str	r2, [r3, #28]
        break;
 800729a:	e000      	b.n	800729e <HAL_TIM_ConfigOCrefClear+0x17e>
      }
      default:
        break;
 800729c:	bf00      	nop
    }
  }

  htim->State = HAL_TIM_STATE_READY;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2201      	movs	r2, #1
 80072a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2200      	movs	r2, #0
 80072aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80072ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	3718      	adds	r7, #24
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}

080072b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b084      	sub	sp, #16
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
 80072c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80072c2:	2300      	movs	r3, #0
 80072c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072cc:	2b01      	cmp	r3, #1
 80072ce:	d101      	bne.n	80072d4 <HAL_TIM_ConfigClockSource+0x1c>
 80072d0:	2302      	movs	r3, #2
 80072d2:	e0b4      	b.n	800743e <HAL_TIM_ConfigClockSource+0x186>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2201      	movs	r2, #1
 80072d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2202      	movs	r2, #2
 80072e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	689b      	ldr	r3, [r3, #8]
 80072ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80072f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80072fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	68ba      	ldr	r2, [r7, #8]
 8007302:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800730c:	d03e      	beq.n	800738c <HAL_TIM_ConfigClockSource+0xd4>
 800730e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007312:	f200 8087 	bhi.w	8007424 <HAL_TIM_ConfigClockSource+0x16c>
 8007316:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800731a:	f000 8086 	beq.w	800742a <HAL_TIM_ConfigClockSource+0x172>
 800731e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007322:	d87f      	bhi.n	8007424 <HAL_TIM_ConfigClockSource+0x16c>
 8007324:	2b70      	cmp	r3, #112	; 0x70
 8007326:	d01a      	beq.n	800735e <HAL_TIM_ConfigClockSource+0xa6>
 8007328:	2b70      	cmp	r3, #112	; 0x70
 800732a:	d87b      	bhi.n	8007424 <HAL_TIM_ConfigClockSource+0x16c>
 800732c:	2b60      	cmp	r3, #96	; 0x60
 800732e:	d050      	beq.n	80073d2 <HAL_TIM_ConfigClockSource+0x11a>
 8007330:	2b60      	cmp	r3, #96	; 0x60
 8007332:	d877      	bhi.n	8007424 <HAL_TIM_ConfigClockSource+0x16c>
 8007334:	2b50      	cmp	r3, #80	; 0x50
 8007336:	d03c      	beq.n	80073b2 <HAL_TIM_ConfigClockSource+0xfa>
 8007338:	2b50      	cmp	r3, #80	; 0x50
 800733a:	d873      	bhi.n	8007424 <HAL_TIM_ConfigClockSource+0x16c>
 800733c:	2b40      	cmp	r3, #64	; 0x40
 800733e:	d058      	beq.n	80073f2 <HAL_TIM_ConfigClockSource+0x13a>
 8007340:	2b40      	cmp	r3, #64	; 0x40
 8007342:	d86f      	bhi.n	8007424 <HAL_TIM_ConfigClockSource+0x16c>
 8007344:	2b30      	cmp	r3, #48	; 0x30
 8007346:	d064      	beq.n	8007412 <HAL_TIM_ConfigClockSource+0x15a>
 8007348:	2b30      	cmp	r3, #48	; 0x30
 800734a:	d86b      	bhi.n	8007424 <HAL_TIM_ConfigClockSource+0x16c>
 800734c:	2b20      	cmp	r3, #32
 800734e:	d060      	beq.n	8007412 <HAL_TIM_ConfigClockSource+0x15a>
 8007350:	2b20      	cmp	r3, #32
 8007352:	d867      	bhi.n	8007424 <HAL_TIM_ConfigClockSource+0x16c>
 8007354:	2b00      	cmp	r3, #0
 8007356:	d05c      	beq.n	8007412 <HAL_TIM_ConfigClockSource+0x15a>
 8007358:	2b10      	cmp	r3, #16
 800735a:	d05a      	beq.n	8007412 <HAL_TIM_ConfigClockSource+0x15a>
 800735c:	e062      	b.n	8007424 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800736e:	f000 ffe7 	bl	8008340 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	689b      	ldr	r3, [r3, #8]
 8007378:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007380:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	68ba      	ldr	r2, [r7, #8]
 8007388:	609a      	str	r2, [r3, #8]
      break;
 800738a:	e04f      	b.n	800742c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800739c:	f000 ffd0 	bl	8008340 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	689a      	ldr	r2, [r3, #8]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80073ae:	609a      	str	r2, [r3, #8]
      break;
 80073b0:	e03c      	b.n	800742c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80073be:	461a      	mov	r2, r3
 80073c0:	f000 fe94 	bl	80080ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	2150      	movs	r1, #80	; 0x50
 80073ca:	4618      	mov	r0, r3
 80073cc:	f000 ff9e 	bl	800830c <TIM_ITRx_SetConfig>
      break;
 80073d0:	e02c      	b.n	800742c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80073de:	461a      	mov	r2, r3
 80073e0:	f000 feee 	bl	80081c0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	2160      	movs	r1, #96	; 0x60
 80073ea:	4618      	mov	r0, r3
 80073ec:	f000 ff8e 	bl	800830c <TIM_ITRx_SetConfig>
      break;
 80073f0:	e01c      	b.n	800742c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80073fe:	461a      	mov	r2, r3
 8007400:	f000 fe74 	bl	80080ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	2140      	movs	r1, #64	; 0x40
 800740a:	4618      	mov	r0, r3
 800740c:	f000 ff7e 	bl	800830c <TIM_ITRx_SetConfig>
      break;
 8007410:	e00c      	b.n	800742c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681a      	ldr	r2, [r3, #0]
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4619      	mov	r1, r3
 800741c:	4610      	mov	r0, r2
 800741e:	f000 ff75 	bl	800830c <TIM_ITRx_SetConfig>
      break;
 8007422:	e003      	b.n	800742c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007424:	2301      	movs	r3, #1
 8007426:	73fb      	strb	r3, [r7, #15]
      break;
 8007428:	e000      	b.n	800742c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800742a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2201      	movs	r2, #1
 8007430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2200      	movs	r2, #0
 8007438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800743c:	7bfb      	ldrb	r3, [r7, #15]
}
 800743e:	4618      	mov	r0, r3
 8007440:	3710      	adds	r7, #16
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}

08007446 <HAL_TIM_ConfigTI1Input>:
  *            @arg TIM_TI1SELECTION_XORCOMBINATION: The TIMx_CH1, CH2 and CH3
  *            pins are connected to the TI1 input (XOR combination)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigTI1Input(TIM_HandleTypeDef *htim, uint32_t TI1_Selection)
{
 8007446:	b480      	push	{r7}
 8007448:	b085      	sub	sp, #20
 800744a:	af00      	add	r7, sp, #0
 800744c:	6078      	str	r0, [r7, #4]
 800744e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TI1SELECTION(TI1_Selection));

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	60fb      	str	r3, [r7, #12]

  /* Reset the TI1 selection */
  tmpcr2 &= ~TIM_CR2_TI1S;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800745e:	60fb      	str	r3, [r7, #12]

  /* Set the TI1 selection */
  tmpcr2 |= TI1_Selection;
 8007460:	68fa      	ldr	r2, [r7, #12]
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	4313      	orrs	r3, r2
 8007466:	60fb      	str	r3, [r7, #12]

  /* Write to TIMxCR2 */
  htim->Instance->CR2 = tmpcr2;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	68fa      	ldr	r2, [r7, #12]
 800746e:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007470:	2300      	movs	r3, #0
}
 8007472:	4618      	mov	r0, r3
 8007474:	3714      	adds	r7, #20
 8007476:	46bd      	mov	sp, r7
 8007478:	bc80      	pop	{r7}
 800747a:	4770      	bx	lr

0800747c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b082      	sub	sp, #8
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
 8007484:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800748c:	2b01      	cmp	r3, #1
 800748e:	d101      	bne.n	8007494 <HAL_TIM_SlaveConfigSynchro+0x18>
 8007490:	2302      	movs	r3, #2
 8007492:	e031      	b.n	80074f8 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2201      	movs	r2, #1
 8007498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2202      	movs	r2, #2
 80074a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80074a4:	6839      	ldr	r1, [r7, #0]
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f000 fd34 	bl	8007f14 <TIM_SlaveTimer_SetConfig>
 80074ac:	4603      	mov	r3, r0
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d009      	beq.n	80074c6 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2201      	movs	r2, #1
 80074b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2200      	movs	r2, #0
 80074be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80074c2:	2301      	movs	r3, #1
 80074c4:	e018      	b.n	80074f8 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	68da      	ldr	r2, [r3, #12]
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074d4:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	68da      	ldr	r2, [r3, #12]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80074e4:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2201      	movs	r2, #1
 80074ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2200      	movs	r2, #0
 80074f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80074f6:	2300      	movs	r3, #0
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3708      	adds	r7, #8
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}

08007500 <HAL_TIM_SlaveConfigSynchro_IT>:
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro_IT(TIM_HandleTypeDef *htim,
                                                const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b082      	sub	sp, #8
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
 8007508:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007510:	2b01      	cmp	r3, #1
 8007512:	d101      	bne.n	8007518 <HAL_TIM_SlaveConfigSynchro_IT+0x18>
 8007514:	2302      	movs	r3, #2
 8007516:	e031      	b.n	800757c <HAL_TIM_SlaveConfigSynchro_IT+0x7c>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2201      	movs	r2, #1
 800751c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2202      	movs	r2, #2
 8007524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8007528:	6839      	ldr	r1, [r7, #0]
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f000 fcf2 	bl	8007f14 <TIM_SlaveTimer_SetConfig>
 8007530:	4603      	mov	r3, r0
 8007532:	2b00      	cmp	r3, #0
 8007534:	d009      	beq.n	800754a <HAL_TIM_SlaveConfigSynchro_IT+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2201      	movs	r2, #1
 800753a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2200      	movs	r2, #0
 8007542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8007546:	2301      	movs	r3, #1
 8007548:	e018      	b.n	800757c <HAL_TIM_SlaveConfigSynchro_IT+0x7c>
  }

  /* Enable Trigger Interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_TRIGGER);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	68da      	ldr	r2, [r3, #12]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007558:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	68da      	ldr	r2, [r3, #12]
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007568:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2201      	movs	r2, #1
 800756e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2200      	movs	r2, #0
 8007576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800757a:	2300      	movs	r3, #0
}
 800757c:	4618      	mov	r0, r3
 800757e:	3708      	adds	r7, #8
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}

08007584 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007584:	b480      	push	{r7}
 8007586:	b085      	sub	sp, #20
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
 800758c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800758e:	2300      	movs	r3, #0
 8007590:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	2b0c      	cmp	r3, #12
 8007596:	d831      	bhi.n	80075fc <HAL_TIM_ReadCapturedValue+0x78>
 8007598:	a201      	add	r2, pc, #4	; (adr r2, 80075a0 <HAL_TIM_ReadCapturedValue+0x1c>)
 800759a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800759e:	bf00      	nop
 80075a0:	080075d5 	.word	0x080075d5
 80075a4:	080075fd 	.word	0x080075fd
 80075a8:	080075fd 	.word	0x080075fd
 80075ac:	080075fd 	.word	0x080075fd
 80075b0:	080075df 	.word	0x080075df
 80075b4:	080075fd 	.word	0x080075fd
 80075b8:	080075fd 	.word	0x080075fd
 80075bc:	080075fd 	.word	0x080075fd
 80075c0:	080075e9 	.word	0x080075e9
 80075c4:	080075fd 	.word	0x080075fd
 80075c8:	080075fd 	.word	0x080075fd
 80075cc:	080075fd 	.word	0x080075fd
 80075d0:	080075f3 	.word	0x080075f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075da:	60fb      	str	r3, [r7, #12]

      break;
 80075dc:	e00f      	b.n	80075fe <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075e4:	60fb      	str	r3, [r7, #12]

      break;
 80075e6:	e00a      	b.n	80075fe <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075ee:	60fb      	str	r3, [r7, #12]

      break;
 80075f0:	e005      	b.n	80075fe <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075f8:	60fb      	str	r3, [r7, #12]

      break;
 80075fa:	e000      	b.n	80075fe <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80075fc:	bf00      	nop
  }

  return tmpreg;
 80075fe:	68fb      	ldr	r3, [r7, #12]
}
 8007600:	4618      	mov	r0, r3
 8007602:	3714      	adds	r7, #20
 8007604:	46bd      	mov	sp, r7
 8007606:	bc80      	pop	{r7}
 8007608:	4770      	bx	lr
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800760a:	b480      	push	{r7}
 800760c:	b083      	sub	sp, #12
 800760e:	af00      	add	r7, sp, #0
 8007610:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007612:	bf00      	nop
 8007614:	370c      	adds	r7, #12
 8007616:	46bd      	mov	sp, r7
 8007618:	bc80      	pop	{r7}
 800761a:	4770      	bx	lr

0800761c <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800761c:	b480      	push	{r7}
 800761e:	b083      	sub	sp, #12
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8007624:	bf00      	nop
 8007626:	370c      	adds	r7, #12
 8007628:	46bd      	mov	sp, r7
 800762a:	bc80      	pop	{r7}
 800762c:	4770      	bx	lr

0800762e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800762e:	b480      	push	{r7}
 8007630:	b083      	sub	sp, #12
 8007632:	af00      	add	r7, sp, #0
 8007634:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007636:	bf00      	nop
 8007638:	370c      	adds	r7, #12
 800763a:	46bd      	mov	sp, r7
 800763c:	bc80      	pop	{r7}
 800763e:	4770      	bx	lr

08007640 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007640:	b480      	push	{r7}
 8007642:	b083      	sub	sp, #12
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007648:	bf00      	nop
 800764a:	370c      	adds	r7, #12
 800764c:	46bd      	mov	sp, r7
 800764e:	bc80      	pop	{r7}
 8007650:	4770      	bx	lr

08007652 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007652:	b480      	push	{r7}
 8007654:	b083      	sub	sp, #12
 8007656:	af00      	add	r7, sp, #0
 8007658:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800765a:	bf00      	nop
 800765c:	370c      	adds	r7, #12
 800765e:	46bd      	mov	sp, r7
 8007660:	bc80      	pop	{r7}
 8007662:	4770      	bx	lr

08007664 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007664:	b480      	push	{r7}
 8007666:	b083      	sub	sp, #12
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800766c:	bf00      	nop
 800766e:	370c      	adds	r7, #12
 8007670:	46bd      	mov	sp, r7
 8007672:	bc80      	pop	{r7}
 8007674:	4770      	bx	lr

08007676 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007676:	b480      	push	{r7}
 8007678:	b083      	sub	sp, #12
 800767a:	af00      	add	r7, sp, #0
 800767c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800767e:	bf00      	nop
 8007680:	370c      	adds	r7, #12
 8007682:	46bd      	mov	sp, r7
 8007684:	bc80      	pop	{r7}
 8007686:	4770      	bx	lr

08007688 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007688:	b480      	push	{r7}
 800768a:	b083      	sub	sp, #12
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007690:	bf00      	nop
 8007692:	370c      	adds	r7, #12
 8007694:	46bd      	mov	sp, r7
 8007696:	bc80      	pop	{r7}
 8007698:	4770      	bx	lr

0800769a <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800769a:	b480      	push	{r7}
 800769c:	b083      	sub	sp, #12
 800769e:	af00      	add	r7, sp, #0
 80076a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 80076a2:	bf00      	nop
 80076a4:	370c      	adds	r7, #12
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bc80      	pop	{r7}
 80076aa:	4770      	bx	lr

080076ac <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80076ac:	b480      	push	{r7}
 80076ae:	b083      	sub	sp, #12
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80076b4:	bf00      	nop
 80076b6:	370c      	adds	r7, #12
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bc80      	pop	{r7}
 80076bc:	4770      	bx	lr

080076be <HAL_TIM_Base_GetState>:
  * @brief  Return the TIM Base handle state.
  * @param  htim TIM Base handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_Base_GetState(const TIM_HandleTypeDef *htim)
{
 80076be:	b480      	push	{r7}
 80076c0:	b083      	sub	sp, #12
 80076c2:	af00      	add	r7, sp, #0
 80076c4:	6078      	str	r0, [r7, #4]
  return htim->State;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076cc:	b2db      	uxtb	r3, r3
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	370c      	adds	r7, #12
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bc80      	pop	{r7}
 80076d6:	4770      	bx	lr

080076d8 <HAL_TIM_OC_GetState>:
  * @brief  Return the TIM OC handle state.
  * @param  htim TIM Output Compare handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_OC_GetState(const TIM_HandleTypeDef *htim)
{
 80076d8:	b480      	push	{r7}
 80076da:	b083      	sub	sp, #12
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  return htim->State;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076e6:	b2db      	uxtb	r3, r3
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	370c      	adds	r7, #12
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bc80      	pop	{r7}
 80076f0:	4770      	bx	lr

080076f2 <HAL_TIM_PWM_GetState>:
  * @brief  Return the TIM PWM handle state.
  * @param  htim TIM handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_PWM_GetState(const TIM_HandleTypeDef *htim)
{
 80076f2:	b480      	push	{r7}
 80076f4:	b083      	sub	sp, #12
 80076f6:	af00      	add	r7, sp, #0
 80076f8:	6078      	str	r0, [r7, #4]
  return htim->State;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007700:	b2db      	uxtb	r3, r3
}
 8007702:	4618      	mov	r0, r3
 8007704:	370c      	adds	r7, #12
 8007706:	46bd      	mov	sp, r7
 8007708:	bc80      	pop	{r7}
 800770a:	4770      	bx	lr

0800770c <HAL_TIM_IC_GetState>:
  * @brief  Return the TIM Input Capture handle state.
  * @param  htim TIM IC handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_IC_GetState(const TIM_HandleTypeDef *htim)
{
 800770c:	b480      	push	{r7}
 800770e:	b083      	sub	sp, #12
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
  return htim->State;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800771a:	b2db      	uxtb	r3, r3
}
 800771c:	4618      	mov	r0, r3
 800771e:	370c      	adds	r7, #12
 8007720:	46bd      	mov	sp, r7
 8007722:	bc80      	pop	{r7}
 8007724:	4770      	bx	lr

08007726 <HAL_TIM_OnePulse_GetState>:
  * @brief  Return the TIM One Pulse Mode handle state.
  * @param  htim TIM OPM handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_OnePulse_GetState(const TIM_HandleTypeDef *htim)
{
 8007726:	b480      	push	{r7}
 8007728:	b083      	sub	sp, #12
 800772a:	af00      	add	r7, sp, #0
 800772c:	6078      	str	r0, [r7, #4]
  return htim->State;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007734:	b2db      	uxtb	r3, r3
}
 8007736:	4618      	mov	r0, r3
 8007738:	370c      	adds	r7, #12
 800773a:	46bd      	mov	sp, r7
 800773c:	bc80      	pop	{r7}
 800773e:	4770      	bx	lr

08007740 <HAL_TIM_Encoder_GetState>:
  * @brief  Return the TIM Encoder Mode handle state.
  * @param  htim TIM Encoder Interface handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_Encoder_GetState(const TIM_HandleTypeDef *htim)
{
 8007740:	b480      	push	{r7}
 8007742:	b083      	sub	sp, #12
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
  return htim->State;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800774e:	b2db      	uxtb	r3, r3
}
 8007750:	4618      	mov	r0, r3
 8007752:	370c      	adds	r7, #12
 8007754:	46bd      	mov	sp, r7
 8007756:	bc80      	pop	{r7}
 8007758:	4770      	bx	lr

0800775a <HAL_TIM_GetActiveChannel>:
  * @brief  Return the TIM Encoder Mode handle state.
  * @param  htim TIM handle
  * @retval Active channel
  */
HAL_TIM_ActiveChannel HAL_TIM_GetActiveChannel(const TIM_HandleTypeDef *htim)
{
 800775a:	b480      	push	{r7}
 800775c:	b083      	sub	sp, #12
 800775e:	af00      	add	r7, sp, #0
 8007760:	6078      	str	r0, [r7, #4]
  return htim->Channel;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	7f1b      	ldrb	r3, [r3, #28]
}
 8007766:	4618      	mov	r0, r3
 8007768:	370c      	adds	r7, #12
 800776a:	46bd      	mov	sp, r7
 800776c:	bc80      	pop	{r7}
 800776e:	4770      	bx	lr

08007770 <HAL_TIM_GetChannelState>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5
  *            @arg TIM_CHANNEL_6: TIM Channel 6
  * @retval TIM Channel state
  */
HAL_TIM_ChannelStateTypeDef HAL_TIM_GetChannelState(const TIM_HandleTypeDef *htim,  uint32_t Channel)
{
 8007770:	b480      	push	{r7}
 8007772:	b085      	sub	sp, #20
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
 8007778:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_state;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d104      	bne.n	800778a <HAL_TIM_GetChannelState+0x1a>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007786:	b2db      	uxtb	r3, r3
 8007788:	e013      	b.n	80077b2 <HAL_TIM_GetChannelState+0x42>
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	2b04      	cmp	r3, #4
 800778e:	d104      	bne.n	800779a <HAL_TIM_GetChannelState+0x2a>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007796:	b2db      	uxtb	r3, r3
 8007798:	e00b      	b.n	80077b2 <HAL_TIM_GetChannelState+0x42>
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	2b08      	cmp	r3, #8
 800779e:	d104      	bne.n	80077aa <HAL_TIM_GetChannelState+0x3a>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80077a6:	b2db      	uxtb	r3, r3
 80077a8:	e003      	b.n	80077b2 <HAL_TIM_GetChannelState+0x42>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80077b0:	b2db      	uxtb	r3, r3
 80077b2:	73fb      	strb	r3, [r7, #15]

  return channel_state;
 80077b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3714      	adds	r7, #20
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bc80      	pop	{r7}
 80077be:	4770      	bx	lr

080077c0 <HAL_TIM_DMABurstState>:
  * @brief  Return actual state of a DMA burst operation.
  * @param  htim TIM handle
  * @retval DMA burst state
  */
HAL_TIM_DMABurstStateTypeDef HAL_TIM_DMABurstState(const TIM_HandleTypeDef *htim)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b083      	sub	sp, #12
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_DMABURST_INSTANCE(htim->Instance));

  return htim->DMABurstState;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80077ce:	b2db      	uxtb	r3, r3
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	370c      	adds	r7, #12
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bc80      	pop	{r7}
 80077d8:	4770      	bx	lr

080077da <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80077da:	b580      	push	{r7, lr}
 80077dc:	b084      	sub	sp, #16
 80077de:	af00      	add	r7, sp, #0
 80077e0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ec:	687a      	ldr	r2, [r7, #4]
 80077ee:	429a      	cmp	r2, r3
 80077f0:	d107      	bne.n	8007802 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2201      	movs	r2, #1
 80077f6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	2201      	movs	r2, #1
 80077fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007800:	e02a      	b.n	8007858 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007806:	687a      	ldr	r2, [r7, #4]
 8007808:	429a      	cmp	r2, r3
 800780a:	d107      	bne.n	800781c <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2202      	movs	r2, #2
 8007810:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2201      	movs	r2, #1
 8007816:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800781a:	e01d      	b.n	8007858 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007820:	687a      	ldr	r2, [r7, #4]
 8007822:	429a      	cmp	r2, r3
 8007824:	d107      	bne.n	8007836 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	2204      	movs	r2, #4
 800782a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	2201      	movs	r2, #1
 8007830:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007834:	e010      	b.n	8007858 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800783a:	687a      	ldr	r2, [r7, #4]
 800783c:	429a      	cmp	r2, r3
 800783e:	d107      	bne.n	8007850 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	2208      	movs	r2, #8
 8007844:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	2201      	movs	r2, #1
 800784a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800784e:	e003      	b.n	8007858 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	2201      	movs	r2, #1
 8007854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8007858:	68f8      	ldr	r0, [r7, #12]
 800785a:	f7ff ff27 	bl	80076ac <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	2200      	movs	r2, #0
 8007862:	771a      	strb	r2, [r3, #28]
}
 8007864:	bf00      	nop
 8007866:	3710      	adds	r7, #16
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}

0800786c <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b084      	sub	sp, #16
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007878:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800787e:	687a      	ldr	r2, [r7, #4]
 8007880:	429a      	cmp	r2, r3
 8007882:	d10b      	bne.n	800789c <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	2201      	movs	r2, #1
 8007888:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	699b      	ldr	r3, [r3, #24]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d136      	bne.n	8007900 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	2201      	movs	r2, #1
 8007896:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800789a:	e031      	b.n	8007900 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078a0:	687a      	ldr	r2, [r7, #4]
 80078a2:	429a      	cmp	r2, r3
 80078a4:	d10b      	bne.n	80078be <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	2202      	movs	r2, #2
 80078aa:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	699b      	ldr	r3, [r3, #24]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d125      	bne.n	8007900 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	2201      	movs	r2, #1
 80078b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80078bc:	e020      	b.n	8007900 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078c2:	687a      	ldr	r2, [r7, #4]
 80078c4:	429a      	cmp	r2, r3
 80078c6:	d10b      	bne.n	80078e0 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	2204      	movs	r2, #4
 80078cc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	699b      	ldr	r3, [r3, #24]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d114      	bne.n	8007900 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	2201      	movs	r2, #1
 80078da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80078de:	e00f      	b.n	8007900 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078e4:	687a      	ldr	r2, [r7, #4]
 80078e6:	429a      	cmp	r2, r3
 80078e8:	d10a      	bne.n	8007900 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	2208      	movs	r2, #8
 80078ee:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	699b      	ldr	r3, [r3, #24]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d103      	bne.n	8007900 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	2201      	movs	r2, #1
 80078fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007900:	68f8      	ldr	r0, [r7, #12]
 8007902:	f7ff feaf 	bl	8007664 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	2200      	movs	r2, #0
 800790a:	771a      	strb	r2, [r3, #28]
}
 800790c:	bf00      	nop
 800790e:	3710      	adds	r7, #16
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}

08007914 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b084      	sub	sp, #16
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007920:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007926:	687a      	ldr	r2, [r7, #4]
 8007928:	429a      	cmp	r2, r3
 800792a:	d103      	bne.n	8007934 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	2201      	movs	r2, #1
 8007930:	771a      	strb	r2, [r3, #28]
 8007932:	e019      	b.n	8007968 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007938:	687a      	ldr	r2, [r7, #4]
 800793a:	429a      	cmp	r2, r3
 800793c:	d103      	bne.n	8007946 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	2202      	movs	r2, #2
 8007942:	771a      	strb	r2, [r3, #28]
 8007944:	e010      	b.n	8007968 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800794a:	687a      	ldr	r2, [r7, #4]
 800794c:	429a      	cmp	r2, r3
 800794e:	d103      	bne.n	8007958 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	2204      	movs	r2, #4
 8007954:	771a      	strb	r2, [r3, #28]
 8007956:	e007      	b.n	8007968 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800795c:	687a      	ldr	r2, [r7, #4]
 800795e:	429a      	cmp	r2, r3
 8007960:	d102      	bne.n	8007968 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	2208      	movs	r2, #8
 8007966:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8007968:	68f8      	ldr	r0, [r7, #12]
 800796a:	f7ff fe84 	bl	8007676 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	2200      	movs	r2, #0
 8007972:	771a      	strb	r2, [r3, #28]
}
 8007974:	bf00      	nop
 8007976:	3710      	adds	r7, #16
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}

0800797c <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b084      	sub	sp, #16
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007988:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800798e:	687a      	ldr	r2, [r7, #4]
 8007990:	429a      	cmp	r2, r3
 8007992:	d10f      	bne.n	80079b4 <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	2201      	movs	r2, #1
 8007998:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	699b      	ldr	r3, [r3, #24]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d146      	bne.n	8007a30 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	2201      	movs	r2, #1
 80079a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	2201      	movs	r2, #1
 80079ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80079b2:	e03d      	b.n	8007a30 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079b8:	687a      	ldr	r2, [r7, #4]
 80079ba:	429a      	cmp	r2, r3
 80079bc:	d10f      	bne.n	80079de <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	2202      	movs	r2, #2
 80079c2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	699b      	ldr	r3, [r3, #24]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d131      	bne.n	8007a30 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2201      	movs	r2, #1
 80079d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	2201      	movs	r2, #1
 80079d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80079dc:	e028      	b.n	8007a30 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079e2:	687a      	ldr	r2, [r7, #4]
 80079e4:	429a      	cmp	r2, r3
 80079e6:	d10f      	bne.n	8007a08 <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	2204      	movs	r2, #4
 80079ec:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	699b      	ldr	r3, [r3, #24]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d11c      	bne.n	8007a30 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	2201      	movs	r2, #1
 80079fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2201      	movs	r2, #1
 8007a02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a06:	e013      	b.n	8007a30 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a0c:	687a      	ldr	r2, [r7, #4]
 8007a0e:	429a      	cmp	r2, r3
 8007a10:	d10e      	bne.n	8007a30 <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	2208      	movs	r2, #8
 8007a16:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	699b      	ldr	r3, [r3, #24]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d107      	bne.n	8007a30 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	2201      	movs	r2, #1
 8007a24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 8007a30:	68f8      	ldr	r0, [r7, #12]
 8007a32:	f7ff fe05 	bl	8007640 <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	771a      	strb	r2, [r3, #28]
}
 8007a3c:	bf00      	nop
 8007a3e:	3710      	adds	r7, #16
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}

08007a44 <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b084      	sub	sp, #16
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a50:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a56:	687a      	ldr	r2, [r7, #4]
 8007a58:	429a      	cmp	r2, r3
 8007a5a:	d103      	bne.n	8007a64 <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	2201      	movs	r2, #1
 8007a60:	771a      	strb	r2, [r3, #28]
 8007a62:	e019      	b.n	8007a98 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a68:	687a      	ldr	r2, [r7, #4]
 8007a6a:	429a      	cmp	r2, r3
 8007a6c:	d103      	bne.n	8007a76 <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	2202      	movs	r2, #2
 8007a72:	771a      	strb	r2, [r3, #28]
 8007a74:	e010      	b.n	8007a98 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a7a:	687a      	ldr	r2, [r7, #4]
 8007a7c:	429a      	cmp	r2, r3
 8007a7e:	d103      	bne.n	8007a88 <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	2204      	movs	r2, #4
 8007a84:	771a      	strb	r2, [r3, #28]
 8007a86:	e007      	b.n	8007a98 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a8c:	687a      	ldr	r2, [r7, #4]
 8007a8e:	429a      	cmp	r2, r3
 8007a90:	d102      	bne.n	8007a98 <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	2208      	movs	r2, #8
 8007a96:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8007a98:	68f8      	ldr	r0, [r7, #12]
 8007a9a:	f7ff fdda 	bl	8007652 <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	771a      	strb	r2, [r3, #28]
}
 8007aa4:	bf00      	nop
 8007aa6:	3710      	adds	r7, #16
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bd80      	pop	{r7, pc}

08007aac <TIM_DMAPeriodElapsedCplt>:
  * @brief  TIM DMA Period Elapse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMAPeriodElapsedCplt(DMA_HandleTypeDef *hdma)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b084      	sub	sp, #16
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab8:	60fb      	str	r3, [r7, #12]

  if (htim->hdma[TIM_DMA_ID_UPDATE]->Init.Mode == DMA_NORMAL)
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	6a1b      	ldr	r3, [r3, #32]
 8007abe:	699b      	ldr	r3, [r3, #24]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d103      	bne.n	8007acc <TIM_DMAPeriodElapsedCplt+0x20>
  {
    htim->State = HAL_TIM_STATE_READY;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	2201      	movs	r2, #1
 8007ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PeriodElapsedCallback(htim);
#else
  HAL_TIM_PeriodElapsedCallback(htim);
 8007acc:	68f8      	ldr	r0, [r7, #12]
 8007ace:	f7f8 fc0f 	bl	80002f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 8007ad2:	bf00      	nop
 8007ad4:	3710      	adds	r7, #16
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bd80      	pop	{r7, pc}

08007ada <TIM_DMAPeriodElapsedHalfCplt>:
  * @brief  TIM DMA Period Elapse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMAPeriodElapsedHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007ada:	b580      	push	{r7, lr}
 8007adc:	b084      	sub	sp, #16
 8007ade:	af00      	add	r7, sp, #0
 8007ae0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae6:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PeriodElapsedHalfCpltCallback(htim);
#else
  HAL_TIM_PeriodElapsedHalfCpltCallback(htim);
 8007ae8:	68f8      	ldr	r0, [r7, #12]
 8007aea:	f7ff fd97 	bl	800761c <HAL_TIM_PeriodElapsedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 8007aee:	bf00      	nop
 8007af0:	3710      	adds	r7, #16
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}

08007af6 <TIM_DMATriggerCplt>:
  * @brief  TIM DMA Trigger callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMATriggerCplt(DMA_HandleTypeDef *hdma)
{
 8007af6:	b580      	push	{r7, lr}
 8007af8:	b084      	sub	sp, #16
 8007afa:	af00      	add	r7, sp, #0
 8007afc:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b02:	60fb      	str	r3, [r7, #12]

  if (htim->hdma[TIM_DMA_ID_TRIGGER]->Init.Mode == DMA_NORMAL)
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b08:	699b      	ldr	r3, [r3, #24]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d103      	bne.n	8007b16 <TIM_DMATriggerCplt+0x20>
  {
    htim->State = HAL_TIM_STATE_READY;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	2201      	movs	r2, #1
 8007b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->TriggerCallback(htim);
#else
  HAL_TIM_TriggerCallback(htim);
 8007b16:	68f8      	ldr	r0, [r7, #12]
 8007b18:	f7ff fdb6 	bl	8007688 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 8007b1c:	bf00      	nop
 8007b1e:	3710      	adds	r7, #16
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}

08007b24 <TIM_DMATriggerHalfCplt>:
  * @brief  TIM DMA Trigger half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMATriggerHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b084      	sub	sp, #16
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b30:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->TriggerHalfCpltCallback(htim);
#else
  HAL_TIM_TriggerHalfCpltCallback(htim);
 8007b32:	68f8      	ldr	r0, [r7, #12]
 8007b34:	f7ff fdb1 	bl	800769a <HAL_TIM_TriggerHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 8007b38:	bf00      	nop
 8007b3a:	3710      	adds	r7, #16
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}

08007b40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007b40:	b480      	push	{r7}
 8007b42:	b085      	sub	sp, #20
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
 8007b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	4a29      	ldr	r2, [pc, #164]	; (8007bf8 <TIM_Base_SetConfig+0xb8>)
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d00b      	beq.n	8007b70 <TIM_Base_SetConfig+0x30>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b5e:	d007      	beq.n	8007b70 <TIM_Base_SetConfig+0x30>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	4a26      	ldr	r2, [pc, #152]	; (8007bfc <TIM_Base_SetConfig+0xbc>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d003      	beq.n	8007b70 <TIM_Base_SetConfig+0x30>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	4a25      	ldr	r2, [pc, #148]	; (8007c00 <TIM_Base_SetConfig+0xc0>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d108      	bne.n	8007b82 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	685b      	ldr	r3, [r3, #4]
 8007b7c:	68fa      	ldr	r2, [r7, #12]
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	4a1c      	ldr	r2, [pc, #112]	; (8007bf8 <TIM_Base_SetConfig+0xb8>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d00b      	beq.n	8007ba2 <TIM_Base_SetConfig+0x62>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b90:	d007      	beq.n	8007ba2 <TIM_Base_SetConfig+0x62>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	4a19      	ldr	r2, [pc, #100]	; (8007bfc <TIM_Base_SetConfig+0xbc>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d003      	beq.n	8007ba2 <TIM_Base_SetConfig+0x62>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	4a18      	ldr	r2, [pc, #96]	; (8007c00 <TIM_Base_SetConfig+0xc0>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d108      	bne.n	8007bb4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ba8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	68db      	ldr	r3, [r3, #12]
 8007bae:	68fa      	ldr	r2, [r7, #12]
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	695b      	ldr	r3, [r3, #20]
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	68fa      	ldr	r2, [r7, #12]
 8007bc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	689a      	ldr	r2, [r3, #8]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	681a      	ldr	r2, [r3, #0]
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	4a07      	ldr	r2, [pc, #28]	; (8007bf8 <TIM_Base_SetConfig+0xb8>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d103      	bne.n	8007be8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	691a      	ldr	r2, [r3, #16]
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2201      	movs	r2, #1
 8007bec:	615a      	str	r2, [r3, #20]
}
 8007bee:	bf00      	nop
 8007bf0:	3714      	adds	r7, #20
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bc80      	pop	{r7}
 8007bf6:	4770      	bx	lr
 8007bf8:	40012c00 	.word	0x40012c00
 8007bfc:	40000400 	.word	0x40000400
 8007c00:	40000800 	.word	0x40000800

08007c04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c04:	b480      	push	{r7}
 8007c06:	b087      	sub	sp, #28
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
 8007c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6a1b      	ldr	r3, [r3, #32]
 8007c12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6a1b      	ldr	r3, [r3, #32]
 8007c18:	f023 0201 	bic.w	r2, r3, #1
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	699b      	ldr	r3, [r3, #24]
 8007c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	f023 0303 	bic.w	r3, r3, #3
 8007c3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	68fa      	ldr	r2, [r7, #12]
 8007c42:	4313      	orrs	r3, r2
 8007c44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	f023 0302 	bic.w	r3, r3, #2
 8007c4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	689b      	ldr	r3, [r3, #8]
 8007c52:	697a      	ldr	r2, [r7, #20]
 8007c54:	4313      	orrs	r3, r2
 8007c56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	4a1c      	ldr	r2, [pc, #112]	; (8007ccc <TIM_OC1_SetConfig+0xc8>)
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d10c      	bne.n	8007c7a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007c60:	697b      	ldr	r3, [r7, #20]
 8007c62:	f023 0308 	bic.w	r3, r3, #8
 8007c66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	68db      	ldr	r3, [r3, #12]
 8007c6c:	697a      	ldr	r2, [r7, #20]
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	f023 0304 	bic.w	r3, r3, #4
 8007c78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	4a13      	ldr	r2, [pc, #76]	; (8007ccc <TIM_OC1_SetConfig+0xc8>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d111      	bne.n	8007ca6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007c82:	693b      	ldr	r3, [r7, #16]
 8007c84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007c8a:	693b      	ldr	r3, [r7, #16]
 8007c8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007c90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	695b      	ldr	r3, [r3, #20]
 8007c96:	693a      	ldr	r2, [r7, #16]
 8007c98:	4313      	orrs	r3, r2
 8007c9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	699b      	ldr	r3, [r3, #24]
 8007ca0:	693a      	ldr	r2, [r7, #16]
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	693a      	ldr	r2, [r7, #16]
 8007caa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	68fa      	ldr	r2, [r7, #12]
 8007cb0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	685a      	ldr	r2, [r3, #4]
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	697a      	ldr	r2, [r7, #20]
 8007cbe:	621a      	str	r2, [r3, #32]
}
 8007cc0:	bf00      	nop
 8007cc2:	371c      	adds	r7, #28
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bc80      	pop	{r7}
 8007cc8:	4770      	bx	lr
 8007cca:	bf00      	nop
 8007ccc:	40012c00 	.word	0x40012c00

08007cd0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b087      	sub	sp, #28
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
 8007cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6a1b      	ldr	r3, [r3, #32]
 8007cde:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6a1b      	ldr	r3, [r3, #32]
 8007ce4:	f023 0210 	bic.w	r2, r3, #16
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	685b      	ldr	r3, [r3, #4]
 8007cf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	699b      	ldr	r3, [r3, #24]
 8007cf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	021b      	lsls	r3, r3, #8
 8007d0e:	68fa      	ldr	r2, [r7, #12]
 8007d10:	4313      	orrs	r3, r2
 8007d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	f023 0320 	bic.w	r3, r3, #32
 8007d1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	689b      	ldr	r3, [r3, #8]
 8007d20:	011b      	lsls	r3, r3, #4
 8007d22:	697a      	ldr	r2, [r7, #20]
 8007d24:	4313      	orrs	r3, r2
 8007d26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	4a1d      	ldr	r2, [pc, #116]	; (8007da0 <TIM_OC2_SetConfig+0xd0>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d10d      	bne.n	8007d4c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007d30:	697b      	ldr	r3, [r7, #20]
 8007d32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	68db      	ldr	r3, [r3, #12]
 8007d3c:	011b      	lsls	r3, r3, #4
 8007d3e:	697a      	ldr	r2, [r7, #20]
 8007d40:	4313      	orrs	r3, r2
 8007d42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007d44:	697b      	ldr	r3, [r7, #20]
 8007d46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d4a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	4a14      	ldr	r2, [pc, #80]	; (8007da0 <TIM_OC2_SetConfig+0xd0>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d113      	bne.n	8007d7c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007d5a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007d5c:	693b      	ldr	r3, [r7, #16]
 8007d5e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007d62:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	695b      	ldr	r3, [r3, #20]
 8007d68:	009b      	lsls	r3, r3, #2
 8007d6a:	693a      	ldr	r2, [r7, #16]
 8007d6c:	4313      	orrs	r3, r2
 8007d6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	699b      	ldr	r3, [r3, #24]
 8007d74:	009b      	lsls	r3, r3, #2
 8007d76:	693a      	ldr	r2, [r7, #16]
 8007d78:	4313      	orrs	r3, r2
 8007d7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	693a      	ldr	r2, [r7, #16]
 8007d80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	68fa      	ldr	r2, [r7, #12]
 8007d86:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	685a      	ldr	r2, [r3, #4]
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	697a      	ldr	r2, [r7, #20]
 8007d94:	621a      	str	r2, [r3, #32]
}
 8007d96:	bf00      	nop
 8007d98:	371c      	adds	r7, #28
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bc80      	pop	{r7}
 8007d9e:	4770      	bx	lr
 8007da0:	40012c00 	.word	0x40012c00

08007da4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b087      	sub	sp, #28
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
 8007dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6a1b      	ldr	r3, [r3, #32]
 8007db2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6a1b      	ldr	r3, [r3, #32]
 8007db8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	685b      	ldr	r3, [r3, #4]
 8007dc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	69db      	ldr	r3, [r3, #28]
 8007dca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	f023 0303 	bic.w	r3, r3, #3
 8007dda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	68fa      	ldr	r2, [r7, #12]
 8007de2:	4313      	orrs	r3, r2
 8007de4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007de6:	697b      	ldr	r3, [r7, #20]
 8007de8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007dec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	689b      	ldr	r3, [r3, #8]
 8007df2:	021b      	lsls	r3, r3, #8
 8007df4:	697a      	ldr	r2, [r7, #20]
 8007df6:	4313      	orrs	r3, r2
 8007df8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	4a1d      	ldr	r2, [pc, #116]	; (8007e74 <TIM_OC3_SetConfig+0xd0>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d10d      	bne.n	8007e1e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007e02:	697b      	ldr	r3, [r7, #20]
 8007e04:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007e08:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	68db      	ldr	r3, [r3, #12]
 8007e0e:	021b      	lsls	r3, r3, #8
 8007e10:	697a      	ldr	r2, [r7, #20]
 8007e12:	4313      	orrs	r3, r2
 8007e14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007e16:	697b      	ldr	r3, [r7, #20]
 8007e18:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007e1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	4a14      	ldr	r2, [pc, #80]	; (8007e74 <TIM_OC3_SetConfig+0xd0>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d113      	bne.n	8007e4e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007e2e:	693b      	ldr	r3, [r7, #16]
 8007e30:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007e34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	695b      	ldr	r3, [r3, #20]
 8007e3a:	011b      	lsls	r3, r3, #4
 8007e3c:	693a      	ldr	r2, [r7, #16]
 8007e3e:	4313      	orrs	r3, r2
 8007e40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	699b      	ldr	r3, [r3, #24]
 8007e46:	011b      	lsls	r3, r3, #4
 8007e48:	693a      	ldr	r2, [r7, #16]
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	693a      	ldr	r2, [r7, #16]
 8007e52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	68fa      	ldr	r2, [r7, #12]
 8007e58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	685a      	ldr	r2, [r3, #4]
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	697a      	ldr	r2, [r7, #20]
 8007e66:	621a      	str	r2, [r3, #32]
}
 8007e68:	bf00      	nop
 8007e6a:	371c      	adds	r7, #28
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bc80      	pop	{r7}
 8007e70:	4770      	bx	lr
 8007e72:	bf00      	nop
 8007e74:	40012c00 	.word	0x40012c00

08007e78 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b087      	sub	sp, #28
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
 8007e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6a1b      	ldr	r3, [r3, #32]
 8007e86:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6a1b      	ldr	r3, [r3, #32]
 8007e8c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	685b      	ldr	r3, [r3, #4]
 8007e98:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	69db      	ldr	r3, [r3, #28]
 8007e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ea6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007eae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	021b      	lsls	r3, r3, #8
 8007eb6:	68fa      	ldr	r2, [r7, #12]
 8007eb8:	4313      	orrs	r3, r2
 8007eba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007ebc:	693b      	ldr	r3, [r7, #16]
 8007ebe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007ec2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	689b      	ldr	r3, [r3, #8]
 8007ec8:	031b      	lsls	r3, r3, #12
 8007eca:	693a      	ldr	r2, [r7, #16]
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	4a0f      	ldr	r2, [pc, #60]	; (8007f10 <TIM_OC4_SetConfig+0x98>)
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d109      	bne.n	8007eec <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ede:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	695b      	ldr	r3, [r3, #20]
 8007ee4:	019b      	lsls	r3, r3, #6
 8007ee6:	697a      	ldr	r2, [r7, #20]
 8007ee8:	4313      	orrs	r3, r2
 8007eea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	697a      	ldr	r2, [r7, #20]
 8007ef0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	68fa      	ldr	r2, [r7, #12]
 8007ef6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	685a      	ldr	r2, [r3, #4]
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	693a      	ldr	r2, [r7, #16]
 8007f04:	621a      	str	r2, [r3, #32]
}
 8007f06:	bf00      	nop
 8007f08:	371c      	adds	r7, #28
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bc80      	pop	{r7}
 8007f0e:	4770      	bx	lr
 8007f10:	40012c00 	.word	0x40012c00

08007f14 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b086      	sub	sp, #24
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
 8007f1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	689b      	ldr	r3, [r3, #8]
 8007f28:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007f2a:	693b      	ldr	r3, [r7, #16]
 8007f2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f30:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	685b      	ldr	r3, [r3, #4]
 8007f36:	693a      	ldr	r2, [r7, #16]
 8007f38:	4313      	orrs	r3, r2
 8007f3a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8007f3c:	693b      	ldr	r3, [r7, #16]
 8007f3e:	f023 0307 	bic.w	r3, r3, #7
 8007f42:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	693a      	ldr	r2, [r7, #16]
 8007f4a:	4313      	orrs	r3, r2
 8007f4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	693a      	ldr	r2, [r7, #16]
 8007f54:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	685b      	ldr	r3, [r3, #4]
 8007f5a:	2b70      	cmp	r3, #112	; 0x70
 8007f5c:	d01a      	beq.n	8007f94 <TIM_SlaveTimer_SetConfig+0x80>
 8007f5e:	2b70      	cmp	r3, #112	; 0x70
 8007f60:	d860      	bhi.n	8008024 <TIM_SlaveTimer_SetConfig+0x110>
 8007f62:	2b60      	cmp	r3, #96	; 0x60
 8007f64:	d054      	beq.n	8008010 <TIM_SlaveTimer_SetConfig+0xfc>
 8007f66:	2b60      	cmp	r3, #96	; 0x60
 8007f68:	d85c      	bhi.n	8008024 <TIM_SlaveTimer_SetConfig+0x110>
 8007f6a:	2b50      	cmp	r3, #80	; 0x50
 8007f6c:	d046      	beq.n	8007ffc <TIM_SlaveTimer_SetConfig+0xe8>
 8007f6e:	2b50      	cmp	r3, #80	; 0x50
 8007f70:	d858      	bhi.n	8008024 <TIM_SlaveTimer_SetConfig+0x110>
 8007f72:	2b40      	cmp	r3, #64	; 0x40
 8007f74:	d019      	beq.n	8007faa <TIM_SlaveTimer_SetConfig+0x96>
 8007f76:	2b40      	cmp	r3, #64	; 0x40
 8007f78:	d854      	bhi.n	8008024 <TIM_SlaveTimer_SetConfig+0x110>
 8007f7a:	2b30      	cmp	r3, #48	; 0x30
 8007f7c:	d055      	beq.n	800802a <TIM_SlaveTimer_SetConfig+0x116>
 8007f7e:	2b30      	cmp	r3, #48	; 0x30
 8007f80:	d850      	bhi.n	8008024 <TIM_SlaveTimer_SetConfig+0x110>
 8007f82:	2b20      	cmp	r3, #32
 8007f84:	d051      	beq.n	800802a <TIM_SlaveTimer_SetConfig+0x116>
 8007f86:	2b20      	cmp	r3, #32
 8007f88:	d84c      	bhi.n	8008024 <TIM_SlaveTimer_SetConfig+0x110>
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d04d      	beq.n	800802a <TIM_SlaveTimer_SetConfig+0x116>
 8007f8e:	2b10      	cmp	r3, #16
 8007f90:	d04b      	beq.n	800802a <TIM_SlaveTimer_SetConfig+0x116>
 8007f92:	e047      	b.n	8008024 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8007fa4:	f000 f9cc 	bl	8008340 <TIM_ETR_SetConfig>
      break;
 8007fa8:	e040      	b.n	800802c <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	2b05      	cmp	r3, #5
 8007fb0:	d101      	bne.n	8007fb6 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	e03b      	b.n	800802e <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	6a1b      	ldr	r3, [r3, #32]
 8007fbc:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	6a1a      	ldr	r2, [r3, #32]
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f022 0201 	bic.w	r2, r2, #1
 8007fcc:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	699b      	ldr	r3, [r3, #24]
 8007fd4:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007fdc:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	691b      	ldr	r3, [r3, #16]
 8007fe2:	011b      	lsls	r3, r3, #4
 8007fe4:	68ba      	ldr	r2, [r7, #8]
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	68ba      	ldr	r2, [r7, #8]
 8007ff0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	68fa      	ldr	r2, [r7, #12]
 8007ff8:	621a      	str	r2, [r3, #32]
      break;
 8007ffa:	e017      	b.n	800802c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008008:	461a      	mov	r2, r3
 800800a:	f000 f86f 	bl	80080ec <TIM_TI1_ConfigInputStage>
      break;
 800800e:	e00d      	b.n	800802c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800801c:	461a      	mov	r2, r3
 800801e:	f000 f8cf 	bl	80081c0 <TIM_TI2_ConfigInputStage>
      break;
 8008022:	e003      	b.n	800802c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8008024:	2301      	movs	r3, #1
 8008026:	75fb      	strb	r3, [r7, #23]
      break;
 8008028:	e000      	b.n	800802c <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800802a:	bf00      	nop
  }

  return status;
 800802c:	7dfb      	ldrb	r3, [r7, #23]
}
 800802e:	4618      	mov	r0, r3
 8008030:	3718      	adds	r7, #24
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}

08008036 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008036:	b480      	push	{r7}
 8008038:	b087      	sub	sp, #28
 800803a:	af00      	add	r7, sp, #0
 800803c:	60f8      	str	r0, [r7, #12]
 800803e:	60b9      	str	r1, [r7, #8]
 8008040:	607a      	str	r2, [r7, #4]
 8008042:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	6a1b      	ldr	r3, [r3, #32]
 8008048:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	6a1b      	ldr	r3, [r3, #32]
 800804e:	f023 0201 	bic.w	r2, r3, #1
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	699b      	ldr	r3, [r3, #24]
 800805a:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	4a20      	ldr	r2, [pc, #128]	; (80080e0 <TIM_TI1_SetConfig+0xaa>)
 8008060:	4293      	cmp	r3, r2
 8008062:	d00b      	beq.n	800807c <TIM_TI1_SetConfig+0x46>
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800806a:	d007      	beq.n	800807c <TIM_TI1_SetConfig+0x46>
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	4a1d      	ldr	r2, [pc, #116]	; (80080e4 <TIM_TI1_SetConfig+0xae>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d003      	beq.n	800807c <TIM_TI1_SetConfig+0x46>
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	4a1c      	ldr	r2, [pc, #112]	; (80080e8 <TIM_TI1_SetConfig+0xb2>)
 8008078:	4293      	cmp	r3, r2
 800807a:	d101      	bne.n	8008080 <TIM_TI1_SetConfig+0x4a>
 800807c:	2301      	movs	r3, #1
 800807e:	e000      	b.n	8008082 <TIM_TI1_SetConfig+0x4c>
 8008080:	2300      	movs	r3, #0
 8008082:	2b00      	cmp	r3, #0
 8008084:	d008      	beq.n	8008098 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	f023 0303 	bic.w	r3, r3, #3
 800808c:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800808e:	697a      	ldr	r2, [r7, #20]
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	4313      	orrs	r3, r2
 8008094:	617b      	str	r3, [r7, #20]
 8008096:	e003      	b.n	80080a0 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	f043 0301 	orr.w	r3, r3, #1
 800809e:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80080a0:	697b      	ldr	r3, [r7, #20]
 80080a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80080a6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	011b      	lsls	r3, r3, #4
 80080ac:	b2db      	uxtb	r3, r3
 80080ae:	697a      	ldr	r2, [r7, #20]
 80080b0:	4313      	orrs	r3, r2
 80080b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80080b4:	693b      	ldr	r3, [r7, #16]
 80080b6:	f023 030a 	bic.w	r3, r3, #10
 80080ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	f003 030a 	and.w	r3, r3, #10
 80080c2:	693a      	ldr	r2, [r7, #16]
 80080c4:	4313      	orrs	r3, r2
 80080c6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	697a      	ldr	r2, [r7, #20]
 80080cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	693a      	ldr	r2, [r7, #16]
 80080d2:	621a      	str	r2, [r3, #32]
}
 80080d4:	bf00      	nop
 80080d6:	371c      	adds	r7, #28
 80080d8:	46bd      	mov	sp, r7
 80080da:	bc80      	pop	{r7}
 80080dc:	4770      	bx	lr
 80080de:	bf00      	nop
 80080e0:	40012c00 	.word	0x40012c00
 80080e4:	40000400 	.word	0x40000400
 80080e8:	40000800 	.word	0x40000800

080080ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80080ec:	b480      	push	{r7}
 80080ee:	b087      	sub	sp, #28
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	60f8      	str	r0, [r7, #12]
 80080f4:	60b9      	str	r1, [r7, #8]
 80080f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	6a1b      	ldr	r3, [r3, #32]
 80080fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	6a1b      	ldr	r3, [r3, #32]
 8008102:	f023 0201 	bic.w	r2, r3, #1
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	699b      	ldr	r3, [r3, #24]
 800810e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008110:	693b      	ldr	r3, [r7, #16]
 8008112:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008116:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	011b      	lsls	r3, r3, #4
 800811c:	693a      	ldr	r2, [r7, #16]
 800811e:	4313      	orrs	r3, r2
 8008120:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	f023 030a 	bic.w	r3, r3, #10
 8008128:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800812a:	697a      	ldr	r2, [r7, #20]
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	4313      	orrs	r3, r2
 8008130:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	693a      	ldr	r2, [r7, #16]
 8008136:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	697a      	ldr	r2, [r7, #20]
 800813c:	621a      	str	r2, [r3, #32]
}
 800813e:	bf00      	nop
 8008140:	371c      	adds	r7, #28
 8008142:	46bd      	mov	sp, r7
 8008144:	bc80      	pop	{r7}
 8008146:	4770      	bx	lr

08008148 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008148:	b480      	push	{r7}
 800814a:	b087      	sub	sp, #28
 800814c:	af00      	add	r7, sp, #0
 800814e:	60f8      	str	r0, [r7, #12]
 8008150:	60b9      	str	r1, [r7, #8]
 8008152:	607a      	str	r2, [r7, #4]
 8008154:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	6a1b      	ldr	r3, [r3, #32]
 800815a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	6a1b      	ldr	r3, [r3, #32]
 8008160:	f023 0210 	bic.w	r2, r3, #16
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	699b      	ldr	r3, [r3, #24]
 800816c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800816e:	693b      	ldr	r3, [r7, #16]
 8008170:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008174:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	021b      	lsls	r3, r3, #8
 800817a:	693a      	ldr	r2, [r7, #16]
 800817c:	4313      	orrs	r3, r2
 800817e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008180:	693b      	ldr	r3, [r7, #16]
 8008182:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008186:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	031b      	lsls	r3, r3, #12
 800818c:	b29b      	uxth	r3, r3
 800818e:	693a      	ldr	r2, [r7, #16]
 8008190:	4313      	orrs	r3, r2
 8008192:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800819a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	011b      	lsls	r3, r3, #4
 80081a0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80081a4:	697a      	ldr	r2, [r7, #20]
 80081a6:	4313      	orrs	r3, r2
 80081a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	693a      	ldr	r2, [r7, #16]
 80081ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	697a      	ldr	r2, [r7, #20]
 80081b4:	621a      	str	r2, [r3, #32]
}
 80081b6:	bf00      	nop
 80081b8:	371c      	adds	r7, #28
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bc80      	pop	{r7}
 80081be:	4770      	bx	lr

080081c0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80081c0:	b480      	push	{r7}
 80081c2:	b087      	sub	sp, #28
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	60f8      	str	r0, [r7, #12]
 80081c8:	60b9      	str	r1, [r7, #8]
 80081ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	6a1b      	ldr	r3, [r3, #32]
 80081d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	6a1b      	ldr	r3, [r3, #32]
 80081d6:	f023 0210 	bic.w	r2, r3, #16
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	699b      	ldr	r3, [r3, #24]
 80081e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80081ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	031b      	lsls	r3, r3, #12
 80081f0:	693a      	ldr	r2, [r7, #16]
 80081f2:	4313      	orrs	r3, r2
 80081f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80081f6:	697b      	ldr	r3, [r7, #20]
 80081f8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80081fc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	011b      	lsls	r3, r3, #4
 8008202:	697a      	ldr	r2, [r7, #20]
 8008204:	4313      	orrs	r3, r2
 8008206:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	693a      	ldr	r2, [r7, #16]
 800820c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	697a      	ldr	r2, [r7, #20]
 8008212:	621a      	str	r2, [r3, #32]
}
 8008214:	bf00      	nop
 8008216:	371c      	adds	r7, #28
 8008218:	46bd      	mov	sp, r7
 800821a:	bc80      	pop	{r7}
 800821c:	4770      	bx	lr

0800821e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800821e:	b480      	push	{r7}
 8008220:	b087      	sub	sp, #28
 8008222:	af00      	add	r7, sp, #0
 8008224:	60f8      	str	r0, [r7, #12]
 8008226:	60b9      	str	r1, [r7, #8]
 8008228:	607a      	str	r2, [r7, #4]
 800822a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	6a1b      	ldr	r3, [r3, #32]
 8008230:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	6a1b      	ldr	r3, [r3, #32]
 8008236:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	69db      	ldr	r3, [r3, #28]
 8008242:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008244:	693b      	ldr	r3, [r7, #16]
 8008246:	f023 0303 	bic.w	r3, r3, #3
 800824a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800824c:	693a      	ldr	r2, [r7, #16]
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	4313      	orrs	r3, r2
 8008252:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008254:	693b      	ldr	r3, [r7, #16]
 8008256:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800825a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	011b      	lsls	r3, r3, #4
 8008260:	b2db      	uxtb	r3, r3
 8008262:	693a      	ldr	r2, [r7, #16]
 8008264:	4313      	orrs	r3, r2
 8008266:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8008268:	697b      	ldr	r3, [r7, #20]
 800826a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800826e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	021b      	lsls	r3, r3, #8
 8008274:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008278:	697a      	ldr	r2, [r7, #20]
 800827a:	4313      	orrs	r3, r2
 800827c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	693a      	ldr	r2, [r7, #16]
 8008282:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	697a      	ldr	r2, [r7, #20]
 8008288:	621a      	str	r2, [r3, #32]
}
 800828a:	bf00      	nop
 800828c:	371c      	adds	r7, #28
 800828e:	46bd      	mov	sp, r7
 8008290:	bc80      	pop	{r7}
 8008292:	4770      	bx	lr

08008294 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008294:	b480      	push	{r7}
 8008296:	b087      	sub	sp, #28
 8008298:	af00      	add	r7, sp, #0
 800829a:	60f8      	str	r0, [r7, #12]
 800829c:	60b9      	str	r1, [r7, #8]
 800829e:	607a      	str	r2, [r7, #4]
 80082a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	6a1b      	ldr	r3, [r3, #32]
 80082a6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	6a1b      	ldr	r3, [r3, #32]
 80082ac:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	69db      	ldr	r3, [r3, #28]
 80082b8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80082ba:	693b      	ldr	r3, [r7, #16]
 80082bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082c0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	021b      	lsls	r3, r3, #8
 80082c6:	693a      	ldr	r2, [r7, #16]
 80082c8:	4313      	orrs	r3, r2
 80082ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80082cc:	693b      	ldr	r3, [r7, #16]
 80082ce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80082d2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	031b      	lsls	r3, r3, #12
 80082d8:	b29b      	uxth	r3, r3
 80082da:	693a      	ldr	r2, [r7, #16]
 80082dc:	4313      	orrs	r3, r2
 80082de:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 80082e0:	697b      	ldr	r3, [r7, #20]
 80082e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80082e6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	031b      	lsls	r3, r3, #12
 80082ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80082f0:	697a      	ldr	r2, [r7, #20]
 80082f2:	4313      	orrs	r3, r2
 80082f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	693a      	ldr	r2, [r7, #16]
 80082fa:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	697a      	ldr	r2, [r7, #20]
 8008300:	621a      	str	r2, [r3, #32]
}
 8008302:	bf00      	nop
 8008304:	371c      	adds	r7, #28
 8008306:	46bd      	mov	sp, r7
 8008308:	bc80      	pop	{r7}
 800830a:	4770      	bx	lr

0800830c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800830c:	b480      	push	{r7}
 800830e:	b085      	sub	sp, #20
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
 8008314:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	689b      	ldr	r3, [r3, #8]
 800831a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008322:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008324:	683a      	ldr	r2, [r7, #0]
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	4313      	orrs	r3, r2
 800832a:	f043 0307 	orr.w	r3, r3, #7
 800832e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	68fa      	ldr	r2, [r7, #12]
 8008334:	609a      	str	r2, [r3, #8]
}
 8008336:	bf00      	nop
 8008338:	3714      	adds	r7, #20
 800833a:	46bd      	mov	sp, r7
 800833c:	bc80      	pop	{r7}
 800833e:	4770      	bx	lr

08008340 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008340:	b480      	push	{r7}
 8008342:	b087      	sub	sp, #28
 8008344:	af00      	add	r7, sp, #0
 8008346:	60f8      	str	r0, [r7, #12]
 8008348:	60b9      	str	r1, [r7, #8]
 800834a:	607a      	str	r2, [r7, #4]
 800834c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	689b      	ldr	r3, [r3, #8]
 8008352:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800835a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	021a      	lsls	r2, r3, #8
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	431a      	orrs	r2, r3
 8008364:	68bb      	ldr	r3, [r7, #8]
 8008366:	4313      	orrs	r3, r2
 8008368:	697a      	ldr	r2, [r7, #20]
 800836a:	4313      	orrs	r3, r2
 800836c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	697a      	ldr	r2, [r7, #20]
 8008372:	609a      	str	r2, [r3, #8]
}
 8008374:	bf00      	nop
 8008376:	371c      	adds	r7, #28
 8008378:	46bd      	mov	sp, r7
 800837a:	bc80      	pop	{r7}
 800837c:	4770      	bx	lr

0800837e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800837e:	b480      	push	{r7}
 8008380:	b087      	sub	sp, #28
 8008382:	af00      	add	r7, sp, #0
 8008384:	60f8      	str	r0, [r7, #12]
 8008386:	60b9      	str	r1, [r7, #8]
 8008388:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	f003 031f 	and.w	r3, r3, #31
 8008390:	2201      	movs	r2, #1
 8008392:	fa02 f303 	lsl.w	r3, r2, r3
 8008396:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	6a1a      	ldr	r2, [r3, #32]
 800839c:	697b      	ldr	r3, [r7, #20]
 800839e:	43db      	mvns	r3, r3
 80083a0:	401a      	ands	r2, r3
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	6a1a      	ldr	r2, [r3, #32]
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	f003 031f 	and.w	r3, r3, #31
 80083b0:	6879      	ldr	r1, [r7, #4]
 80083b2:	fa01 f303 	lsl.w	r3, r1, r3
 80083b6:	431a      	orrs	r2, r3
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	621a      	str	r2, [r3, #32]
}
 80083bc:	bf00      	nop
 80083be:	371c      	adds	r7, #28
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bc80      	pop	{r7}
 80083c4:	4770      	bx	lr
 80083c6:	bf00      	nop

080083c8 <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, const TIM_HallSensor_InitTypeDef *sConfig)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b08a      	sub	sp, #40	; 0x28
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
 80083d0:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d101      	bne.n	80083dc <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 80083d8:	2301      	movs	r3, #1
 80083da:	e09a      	b.n	8008512 <HAL_TIMEx_HallSensor_Init+0x14a>
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083e2:	b2db      	uxtb	r3, r3
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d106      	bne.n	80083f6 <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2200      	movs	r2, #0
 80083ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f000 f8d6 	bl	80085a2 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2202      	movs	r2, #2
 80083fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681a      	ldr	r2, [r3, #0]
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	3304      	adds	r3, #4
 8008406:	4619      	mov	r1, r3
 8008408:	4610      	mov	r0, r2
 800840a:	f7ff fb99 	bl	8007b40 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6818      	ldr	r0, [r3, #0]
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	6819      	ldr	r1, [r3, #0]
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	689b      	ldr	r3, [r3, #8]
 800841a:	2203      	movs	r2, #3
 800841c:	f7ff fe0b 	bl	8008036 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	699a      	ldr	r2, [r3, #24]
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f022 020c 	bic.w	r2, r2, #12
 800842e:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	6999      	ldr	r1, [r3, #24]
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	685a      	ldr	r2, [r3, #4]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	430a      	orrs	r2, r1
 8008440:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	685a      	ldr	r2, [r3, #4]
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008450:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	689a      	ldr	r2, [r3, #8]
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008460:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	689a      	ldr	r2, [r3, #8]
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008470:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	689a      	ldr	r2, [r3, #8]
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f022 0207 	bic.w	r2, r2, #7
 8008480:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	689a      	ldr	r2, [r3, #8]
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f042 0204 	orr.w	r2, r2, #4
 8008490:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8008492:	2300      	movs	r3, #0
 8008494:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8008496:	2300      	movs	r3, #0
 8008498:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 800849a:	2370      	movs	r3, #112	; 0x70
 800849c:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800849e:	2300      	movs	r3, #0
 80084a0:	627b      	str	r3, [r7, #36]	; 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80084a2:	2300      	movs	r3, #0
 80084a4:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 80084a6:	2300      	movs	r3, #0
 80084a8:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	68db      	ldr	r3, [r3, #12]
 80084ae:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f107 020c 	add.w	r2, r7, #12
 80084b8:	4611      	mov	r1, r2
 80084ba:	4618      	mov	r0, r3
 80084bc:	f7ff fc08 	bl	8007cd0 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	685a      	ldr	r2, [r3, #4]
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80084ce:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	685a      	ldr	r2, [r3, #4]
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 80084de:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2201      	movs	r2, #1
 80084e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2201      	movs	r2, #1
 80084ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2201      	movs	r2, #1
 80084f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2201      	movs	r2, #1
 80084fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2201      	movs	r2, #1
 8008504:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2201      	movs	r2, #1
 800850c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008510:	2300      	movs	r3, #0
}
 8008512:	4618      	mov	r0, r3
 8008514:	3728      	adds	r7, #40	; 0x28
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}

0800851a <HAL_TIMEx_HallSensor_DeInit>:
  * @brief  DeInitializes the TIM Hall Sensor interface
  * @param  htim TIM Hall Sensor Interface handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_DeInit(TIM_HandleTypeDef *htim)
{
 800851a:	b580      	push	{r7, lr}
 800851c:	b082      	sub	sp, #8
 800851e:	af00      	add	r7, sp, #0
 8008520:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2202      	movs	r2, #2
 8008526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	6a1a      	ldr	r2, [r3, #32]
 8008530:	f241 1311 	movw	r3, #4369	; 0x1111
 8008534:	4013      	ands	r3, r2
 8008536:	2b00      	cmp	r3, #0
 8008538:	d10f      	bne.n	800855a <HAL_TIMEx_HallSensor_DeInit+0x40>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	6a1a      	ldr	r2, [r3, #32]
 8008540:	f240 4344 	movw	r3, #1092	; 0x444
 8008544:	4013      	ands	r3, r2
 8008546:	2b00      	cmp	r3, #0
 8008548:	d107      	bne.n	800855a <HAL_TIMEx_HallSensor_DeInit+0x40>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	681a      	ldr	r2, [r3, #0]
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f022 0201 	bic.w	r2, r2, #1
 8008558:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->HallSensor_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIMEx_HallSensor_MspDeInit(htim);
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f000 f82a 	bl	80085b4 <HAL_TIMEx_HallSensor_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2200      	movs	r2, #0
 8008564:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_RESET);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2200      	movs	r2, #0
 800856c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_RESET);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2200      	movs	r2, #0
 8008574:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_RESET);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2200      	movs	r2, #0
 800857c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_RESET);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2200      	movs	r2, #0
 8008584:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2200      	movs	r2, #0
 800858c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2200      	movs	r2, #0
 8008594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008598:	2300      	movs	r3, #0
}
 800859a:	4618      	mov	r0, r3
 800859c:	3708      	adds	r7, #8
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}

080085a2 <HAL_TIMEx_HallSensor_MspInit>:
  * @brief  Initializes the TIM Hall Sensor MSP.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval None
  */
__weak void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef *htim)
{
 80085a2:	b480      	push	{r7}
 80085a4:	b083      	sub	sp, #12
 80085a6:	af00      	add	r7, sp, #0
 80085a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
   */
}
 80085aa:	bf00      	nop
 80085ac:	370c      	adds	r7, #12
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bc80      	pop	{r7}
 80085b2:	4770      	bx	lr

080085b4 <HAL_TIMEx_HallSensor_MspDeInit>:
  * @brief  DeInitializes TIM Hall Sensor MSP.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval None
  */
__weak void HAL_TIMEx_HallSensor_MspDeInit(TIM_HandleTypeDef *htim)
{
 80085b4:	b480      	push	{r7}
 80085b6:	b083      	sub	sp, #12
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspDeInit could be implemented in the user file
   */
}
 80085bc:	bf00      	nop
 80085be:	370c      	adds	r7, #12
 80085c0:	46bd      	mov	sp, r7
 80085c2:	bc80      	pop	{r7}
 80085c4:	4770      	bx	lr

080085c6 <HAL_TIMEx_HallSensor_Start>:
  * @brief  Starts the TIM Hall Sensor Interface.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start(TIM_HandleTypeDef *htim)
{
 80085c6:	b580      	push	{r7, lr}
 80085c8:	b084      	sub	sp, #16
 80085ca:	af00      	add	r7, sp, #0
 80085cc:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80085d4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80085dc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80085e4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80085ec:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(htim->Instance));

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80085ee:	7bfb      	ldrb	r3, [r7, #15]
 80085f0:	2b01      	cmp	r3, #1
 80085f2:	d108      	bne.n	8008606 <HAL_TIMEx_HallSensor_Start+0x40>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80085f4:	7bbb      	ldrb	r3, [r7, #14]
 80085f6:	2b01      	cmp	r3, #1
 80085f8:	d105      	bne.n	8008606 <HAL_TIMEx_HallSensor_Start+0x40>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80085fa:	7b7b      	ldrb	r3, [r7, #13]
 80085fc:	2b01      	cmp	r3, #1
 80085fe:	d102      	bne.n	8008606 <HAL_TIMEx_HallSensor_Start+0x40>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008600:	7b3b      	ldrb	r3, [r7, #12]
 8008602:	2b01      	cmp	r3, #1
 8008604:	d001      	beq.n	800860a <HAL_TIMEx_HallSensor_Start+0x44>
  {
    return HAL_ERROR;
 8008606:	2301      	movs	r3, #1
 8008608:	e045      	b.n	8008696 <HAL_TIMEx_HallSensor_Start+0xd0>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2202      	movs	r2, #2
 800860e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2202      	movs	r2, #2
 8008616:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2202      	movs	r2, #2
 800861e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2202      	movs	r2, #2
 8008626:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Input Capture channel 1
  (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1,
  TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	2201      	movs	r2, #1
 8008630:	2100      	movs	r1, #0
 8008632:	4618      	mov	r0, r3
 8008634:	f7ff fea3 	bl	800837e <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	4a18      	ldr	r2, [pc, #96]	; (80086a0 <HAL_TIMEx_HallSensor_Start+0xda>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d00e      	beq.n	8008660 <HAL_TIMEx_HallSensor_Start+0x9a>
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800864a:	d009      	beq.n	8008660 <HAL_TIMEx_HallSensor_Start+0x9a>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4a14      	ldr	r2, [pc, #80]	; (80086a4 <HAL_TIMEx_HallSensor_Start+0xde>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d004      	beq.n	8008660 <HAL_TIMEx_HallSensor_Start+0x9a>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4a13      	ldr	r2, [pc, #76]	; (80086a8 <HAL_TIMEx_HallSensor_Start+0xe2>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d111      	bne.n	8008684 <HAL_TIMEx_HallSensor_Start+0xbe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	689b      	ldr	r3, [r3, #8]
 8008666:	f003 0307 	and.w	r3, r3, #7
 800866a:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	2b06      	cmp	r3, #6
 8008670:	d010      	beq.n	8008694 <HAL_TIMEx_HallSensor_Start+0xce>
    {
      __HAL_TIM_ENABLE(htim);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	681a      	ldr	r2, [r3, #0]
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f042 0201 	orr.w	r2, r2, #1
 8008680:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008682:	e007      	b.n	8008694 <HAL_TIMEx_HallSensor_Start+0xce>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	681a      	ldr	r2, [r3, #0]
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f042 0201 	orr.w	r2, r2, #1
 8008692:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008694:	2300      	movs	r3, #0
}
 8008696:	4618      	mov	r0, r3
 8008698:	3710      	adds	r7, #16
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}
 800869e:	bf00      	nop
 80086a0:	40012c00 	.word	0x40012c00
 80086a4:	40000400 	.word	0x40000400
 80086a8:	40000800 	.word	0x40000800

080086ac <HAL_TIMEx_HallSensor_Stop>:
  * @brief  Stops the TIM Hall sensor Interface.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop(TIM_HandleTypeDef *htim)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b082      	sub	sp, #8
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
  assert_param(IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1, 2 and 3
  (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1,
  TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	2200      	movs	r2, #0
 80086ba:	2100      	movs	r1, #0
 80086bc:	4618      	mov	r0, r3
 80086be:	f7ff fe5e 	bl	800837e <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	6a1a      	ldr	r2, [r3, #32]
 80086c8:	f241 1311 	movw	r3, #4369	; 0x1111
 80086cc:	4013      	ands	r3, r2
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d10f      	bne.n	80086f2 <HAL_TIMEx_HallSensor_Stop+0x46>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	6a1a      	ldr	r2, [r3, #32]
 80086d8:	f240 4344 	movw	r3, #1092	; 0x444
 80086dc:	4013      	ands	r3, r2
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d107      	bne.n	80086f2 <HAL_TIMEx_HallSensor_Stop+0x46>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	681a      	ldr	r2, [r3, #0]
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f022 0201 	bic.w	r2, r2, #1
 80086f0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2201      	movs	r2, #1
 80086f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2201      	movs	r2, #1
 80086fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2201      	movs	r2, #1
 8008706:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2201      	movs	r2, #1
 800870e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8008712:	2300      	movs	r3, #0
}
 8008714:	4618      	mov	r0, r3
 8008716:	3708      	adds	r7, #8
 8008718:	46bd      	mov	sp, r7
 800871a:	bd80      	pop	{r7, pc}

0800871c <HAL_TIMEx_HallSensor_Start_IT>:
  * @brief  Starts the TIM Hall Sensor Interface in interrupt mode.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start_IT(TIM_HandleTypeDef *htim)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b084      	sub	sp, #16
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800872a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008732:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800873a:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008742:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(htim->Instance));

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008744:	7bfb      	ldrb	r3, [r7, #15]
 8008746:	2b01      	cmp	r3, #1
 8008748:	d108      	bne.n	800875c <HAL_TIMEx_HallSensor_Start_IT+0x40>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800874a:	7bbb      	ldrb	r3, [r7, #14]
 800874c:	2b01      	cmp	r3, #1
 800874e:	d105      	bne.n	800875c <HAL_TIMEx_HallSensor_Start_IT+0x40>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008750:	7b7b      	ldrb	r3, [r7, #13]
 8008752:	2b01      	cmp	r3, #1
 8008754:	d102      	bne.n	800875c <HAL_TIMEx_HallSensor_Start_IT+0x40>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008756:	7b3b      	ldrb	r3, [r7, #12]
 8008758:	2b01      	cmp	r3, #1
 800875a:	d001      	beq.n	8008760 <HAL_TIMEx_HallSensor_Start_IT+0x44>
  {
    return HAL_ERROR;
 800875c:	2301      	movs	r3, #1
 800875e:	e04d      	b.n	80087fc <HAL_TIMEx_HallSensor_Start_IT+0xe0>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2202      	movs	r2, #2
 8008764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2202      	movs	r2, #2
 800876c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2202      	movs	r2, #2
 8008774:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2202      	movs	r2, #2
 800877c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the capture compare Interrupts 1 event */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	68da      	ldr	r2, [r3, #12]
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f042 0202 	orr.w	r2, r2, #2
 800878e:	60da      	str	r2, [r3, #12]

  /* Enable the Input Capture channel 1
  (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1,
  TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	2201      	movs	r2, #1
 8008796:	2100      	movs	r1, #0
 8008798:	4618      	mov	r0, r3
 800879a:	f7ff fdf0 	bl	800837e <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	4a18      	ldr	r2, [pc, #96]	; (8008804 <HAL_TIMEx_HallSensor_Start_IT+0xe8>)
 80087a4:	4293      	cmp	r3, r2
 80087a6:	d00e      	beq.n	80087c6 <HAL_TIMEx_HallSensor_Start_IT+0xaa>
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087b0:	d009      	beq.n	80087c6 <HAL_TIMEx_HallSensor_Start_IT+0xaa>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	4a14      	ldr	r2, [pc, #80]	; (8008808 <HAL_TIMEx_HallSensor_Start_IT+0xec>)
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d004      	beq.n	80087c6 <HAL_TIMEx_HallSensor_Start_IT+0xaa>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	4a12      	ldr	r2, [pc, #72]	; (800880c <HAL_TIMEx_HallSensor_Start_IT+0xf0>)
 80087c2:	4293      	cmp	r3, r2
 80087c4:	d111      	bne.n	80087ea <HAL_TIMEx_HallSensor_Start_IT+0xce>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	689b      	ldr	r3, [r3, #8]
 80087cc:	f003 0307 	and.w	r3, r3, #7
 80087d0:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	2b06      	cmp	r3, #6
 80087d6:	d010      	beq.n	80087fa <HAL_TIMEx_HallSensor_Start_IT+0xde>
    {
      __HAL_TIM_ENABLE(htim);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	681a      	ldr	r2, [r3, #0]
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f042 0201 	orr.w	r2, r2, #1
 80087e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087e8:	e007      	b.n	80087fa <HAL_TIMEx_HallSensor_Start_IT+0xde>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	681a      	ldr	r2, [r3, #0]
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f042 0201 	orr.w	r2, r2, #1
 80087f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80087fa:	2300      	movs	r3, #0
}
 80087fc:	4618      	mov	r0, r3
 80087fe:	3710      	adds	r7, #16
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}
 8008804:	40012c00 	.word	0x40012c00
 8008808:	40000400 	.word	0x40000400
 800880c:	40000800 	.word	0x40000800

08008810 <HAL_TIMEx_HallSensor_Stop_IT>:
  * @brief  Stops the TIM Hall Sensor Interface in interrupt mode.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b082      	sub	sp, #8
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
  assert_param(IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channel 1
  (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1,
  TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	2200      	movs	r2, #0
 800881e:	2100      	movs	r1, #0
 8008820:	4618      	mov	r0, r3
 8008822:	f7ff fdac 	bl	800837e <TIM_CCxChannelCmd>

  /* Disable the capture compare Interrupts event */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	68da      	ldr	r2, [r3, #12]
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f022 0202 	bic.w	r2, r2, #2
 8008834:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	6a1a      	ldr	r2, [r3, #32]
 800883c:	f241 1311 	movw	r3, #4369	; 0x1111
 8008840:	4013      	ands	r3, r2
 8008842:	2b00      	cmp	r3, #0
 8008844:	d10f      	bne.n	8008866 <HAL_TIMEx_HallSensor_Stop_IT+0x56>
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	6a1a      	ldr	r2, [r3, #32]
 800884c:	f240 4344 	movw	r3, #1092	; 0x444
 8008850:	4013      	ands	r3, r2
 8008852:	2b00      	cmp	r3, #0
 8008854:	d107      	bne.n	8008866 <HAL_TIMEx_HallSensor_Stop_IT+0x56>
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	681a      	ldr	r2, [r3, #0]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f022 0201 	bic.w	r2, r2, #1
 8008864:	601a      	str	r2, [r3, #0]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2201      	movs	r2, #1
 800886a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2201      	movs	r2, #1
 8008872:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2201      	movs	r2, #1
 800887a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2201      	movs	r2, #1
 8008882:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8008886:	2300      	movs	r3, #0
}
 8008888:	4618      	mov	r0, r3
 800888a:	3708      	adds	r7, #8
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}

08008890 <HAL_TIMEx_HallSensor_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start_DMA(TIM_HandleTypeDef *htim, uint32_t *pData, uint16_t Length)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b086      	sub	sp, #24
 8008894:	af00      	add	r7, sp, #0
 8008896:	60f8      	str	r0, [r7, #12]
 8008898:	60b9      	str	r1, [r7, #8]
 800889a:	4613      	mov	r3, r2
 800889c:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80088a4:	75fb      	strb	r3, [r7, #23]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80088ac:	75bb      	strb	r3, [r7, #22]

  /* Check the parameters */
  assert_param(IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_1_state == HAL_TIM_CHANNEL_STATE_BUSY)
 80088ae:	7dfb      	ldrb	r3, [r7, #23]
 80088b0:	2b02      	cmp	r3, #2
 80088b2:	d002      	beq.n	80088ba <HAL_TIMEx_HallSensor_Start_DMA+0x2a>
      || (complementary_channel_1_state == HAL_TIM_CHANNEL_STATE_BUSY))
 80088b4:	7dbb      	ldrb	r3, [r7, #22]
 80088b6:	2b02      	cmp	r3, #2
 80088b8:	d101      	bne.n	80088be <HAL_TIMEx_HallSensor_Start_DMA+0x2e>
  {
    return HAL_BUSY;
 80088ba:	2302      	movs	r3, #2
 80088bc:	e072      	b.n	80089a4 <HAL_TIMEx_HallSensor_Start_DMA+0x114>
  }
  else if ((channel_1_state == HAL_TIM_CHANNEL_STATE_READY)
 80088be:	7dfb      	ldrb	r3, [r7, #23]
 80088c0:	2b01      	cmp	r3, #1
 80088c2:	d134      	bne.n	800892e <HAL_TIMEx_HallSensor_Start_DMA+0x9e>
           && (complementary_channel_1_state == HAL_TIM_CHANNEL_STATE_READY))
 80088c4:	7dbb      	ldrb	r3, [r7, #22]
 80088c6:	2b01      	cmp	r3, #1
 80088c8:	d131      	bne.n	800892e <HAL_TIMEx_HallSensor_Start_DMA+0x9e>
  {
    if ((pData == NULL) || (Length == 0U))
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d002      	beq.n	80088d6 <HAL_TIMEx_HallSensor_Start_DMA+0x46>
 80088d0:	88fb      	ldrh	r3, [r7, #6]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d101      	bne.n	80088da <HAL_TIMEx_HallSensor_Start_DMA+0x4a>
    {
      return HAL_ERROR;
 80088d6:	2301      	movs	r3, #1
 80088d8:	e064      	b.n	80089a4 <HAL_TIMEx_HallSensor_Start_DMA+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	2202      	movs	r2, #2
 80088de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	2202      	movs	r2, #2
 80088e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    if ((pData == NULL) || (Length == 0U))
 80088ea:	bf00      	nop
  }

  /* Enable the Input Capture channel 1
  (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1,
  TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	2201      	movs	r2, #1
 80088f2:	2100      	movs	r1, #0
 80088f4:	4618      	mov	r0, r3
 80088f6:	f7ff fd42 	bl	800837e <TIM_CCxChannelCmd>

  /* Set the DMA Input Capture 1 Callbacks */
  htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088fe:	4a2b      	ldr	r2, [pc, #172]	; (80089ac <HAL_TIMEx_HallSensor_Start_DMA+0x11c>)
 8008900:	629a      	str	r2, [r3, #40]	; 0x28
  htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008906:	4a2a      	ldr	r2, [pc, #168]	; (80089b0 <HAL_TIMEx_HallSensor_Start_DMA+0x120>)
 8008908:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Set the DMA error callback */
  htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800890e:	4a29      	ldr	r2, [pc, #164]	; (80089b4 <HAL_TIMEx_HallSensor_Start_DMA+0x124>)
 8008910:	631a      	str	r2, [r3, #48]	; 0x30

  /* Enable the DMA channel for Capture 1*/
  if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length) != HAL_OK)
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	3334      	adds	r3, #52	; 0x34
 800891c:	4619      	mov	r1, r3
 800891e:	68ba      	ldr	r2, [r7, #8]
 8008920:	88fb      	ldrh	r3, [r7, #6]
 8008922:	f7f8 fba2 	bl	800106a <HAL_DMA_Start_IT>
 8008926:	4603      	mov	r3, r0
 8008928:	2b00      	cmp	r3, #0
 800892a:	d004      	beq.n	8008936 <HAL_TIMEx_HallSensor_Start_DMA+0xa6>
 800892c:	e001      	b.n	8008932 <HAL_TIMEx_HallSensor_Start_DMA+0xa2>
    return HAL_ERROR;
 800892e:	2301      	movs	r3, #1
 8008930:	e038      	b.n	80089a4 <HAL_TIMEx_HallSensor_Start_DMA+0x114>
  {
    /* Return error status */
    return HAL_ERROR;
 8008932:	2301      	movs	r3, #1
 8008934:	e036      	b.n	80089a4 <HAL_TIMEx_HallSensor_Start_DMA+0x114>
  }
  /* Enable the capture compare 1 Interrupt */
  __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	68da      	ldr	r2, [r3, #12]
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008944:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	4a1b      	ldr	r2, [pc, #108]	; (80089b8 <HAL_TIMEx_HallSensor_Start_DMA+0x128>)
 800894c:	4293      	cmp	r3, r2
 800894e:	d00e      	beq.n	800896e <HAL_TIMEx_HallSensor_Start_DMA+0xde>
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008958:	d009      	beq.n	800896e <HAL_TIMEx_HallSensor_Start_DMA+0xde>
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	4a17      	ldr	r2, [pc, #92]	; (80089bc <HAL_TIMEx_HallSensor_Start_DMA+0x12c>)
 8008960:	4293      	cmp	r3, r2
 8008962:	d004      	beq.n	800896e <HAL_TIMEx_HallSensor_Start_DMA+0xde>
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	4a15      	ldr	r2, [pc, #84]	; (80089c0 <HAL_TIMEx_HallSensor_Start_DMA+0x130>)
 800896a:	4293      	cmp	r3, r2
 800896c:	d111      	bne.n	8008992 <HAL_TIMEx_HallSensor_Start_DMA+0x102>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	689b      	ldr	r3, [r3, #8]
 8008974:	f003 0307 	and.w	r3, r3, #7
 8008978:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800897a:	693b      	ldr	r3, [r7, #16]
 800897c:	2b06      	cmp	r3, #6
 800897e:	d010      	beq.n	80089a2 <HAL_TIMEx_HallSensor_Start_DMA+0x112>
    {
      __HAL_TIM_ENABLE(htim);
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	681a      	ldr	r2, [r3, #0]
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f042 0201 	orr.w	r2, r2, #1
 800898e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008990:	e007      	b.n	80089a2 <HAL_TIMEx_HallSensor_Start_DMA+0x112>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	681a      	ldr	r2, [r3, #0]
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f042 0201 	orr.w	r2, r2, #1
 80089a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80089a2:	2300      	movs	r3, #0
}
 80089a4:	4618      	mov	r0, r3
 80089a6:	3718      	adds	r7, #24
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}
 80089ac:	0800797d 	.word	0x0800797d
 80089b0:	08007a45 	.word	0x08007a45
 80089b4:	080077db 	.word	0x080077db
 80089b8:	40012c00 	.word	0x40012c00
 80089bc:	40000400 	.word	0x40000400
 80089c0:	40000800 	.word	0x40000800

080089c4 <HAL_TIMEx_HallSensor_Stop_DMA>:
  * @brief  Stops the TIM Hall Sensor Interface in DMA mode.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop_DMA(TIM_HandleTypeDef *htim)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b082      	sub	sp, #8
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
  assert_param(IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channel 1
  (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1,
  TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	2200      	movs	r2, #0
 80089d2:	2100      	movs	r1, #0
 80089d4:	4618      	mov	r0, r3
 80089d6:	f7ff fcd2 	bl	800837e <TIM_CCxChannelCmd>


  /* Disable the capture compare Interrupts 1 event */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	68da      	ldr	r2, [r3, #12]
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80089e8:	60da      	str	r2, [r3, #12]

  (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ee:	4618      	mov	r0, r3
 80089f0:	f7f8 fbd6 	bl	80011a0 <HAL_DMA_Abort_IT>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	6a1a      	ldr	r2, [r3, #32]
 80089fa:	f241 1311 	movw	r3, #4369	; 0x1111
 80089fe:	4013      	ands	r3, r2
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d10f      	bne.n	8008a24 <HAL_TIMEx_HallSensor_Stop_DMA+0x60>
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	6a1a      	ldr	r2, [r3, #32]
 8008a0a:	f240 4344 	movw	r3, #1092	; 0x444
 8008a0e:	4013      	ands	r3, r2
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d107      	bne.n	8008a24 <HAL_TIMEx_HallSensor_Stop_DMA+0x60>
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	681a      	ldr	r2, [r3, #0]
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f022 0201 	bic.w	r2, r2, #1
 8008a22:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2201      	movs	r2, #1
 8008a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2201      	movs	r2, #1
 8008a30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Return function status */
  return HAL_OK;
 8008a34:	2300      	movs	r3, #0
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	3708      	adds	r7, #8
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}

08008a3e <HAL_TIMEx_OCN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008a3e:	b580      	push	{r7, lr}
 8008a40:	b084      	sub	sp, #16
 8008a42:	af00      	add	r7, sp, #0
 8008a44:	6078      	str	r0, [r7, #4]
 8008a46:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d109      	bne.n	8008a62 <HAL_TIMEx_OCN_Start+0x24>
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008a54:	b2db      	uxtb	r3, r3
 8008a56:	2b01      	cmp	r3, #1
 8008a58:	bf14      	ite	ne
 8008a5a:	2301      	movne	r3, #1
 8008a5c:	2300      	moveq	r3, #0
 8008a5e:	b2db      	uxtb	r3, r3
 8008a60:	e022      	b.n	8008aa8 <HAL_TIMEx_OCN_Start+0x6a>
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	2b04      	cmp	r3, #4
 8008a66:	d109      	bne.n	8008a7c <HAL_TIMEx_OCN_Start+0x3e>
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008a6e:	b2db      	uxtb	r3, r3
 8008a70:	2b01      	cmp	r3, #1
 8008a72:	bf14      	ite	ne
 8008a74:	2301      	movne	r3, #1
 8008a76:	2300      	moveq	r3, #0
 8008a78:	b2db      	uxtb	r3, r3
 8008a7a:	e015      	b.n	8008aa8 <HAL_TIMEx_OCN_Start+0x6a>
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	2b08      	cmp	r3, #8
 8008a80:	d109      	bne.n	8008a96 <HAL_TIMEx_OCN_Start+0x58>
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008a88:	b2db      	uxtb	r3, r3
 8008a8a:	2b01      	cmp	r3, #1
 8008a8c:	bf14      	ite	ne
 8008a8e:	2301      	movne	r3, #1
 8008a90:	2300      	moveq	r3, #0
 8008a92:	b2db      	uxtb	r3, r3
 8008a94:	e008      	b.n	8008aa8 <HAL_TIMEx_OCN_Start+0x6a>
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a9c:	b2db      	uxtb	r3, r3
 8008a9e:	2b01      	cmp	r3, #1
 8008aa0:	bf14      	ite	ne
 8008aa2:	2301      	movne	r3, #1
 8008aa4:	2300      	moveq	r3, #0
 8008aa6:	b2db      	uxtb	r3, r3
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d001      	beq.n	8008ab0 <HAL_TIMEx_OCN_Start+0x72>
  {
    return HAL_ERROR;
 8008aac:	2301      	movs	r3, #1
 8008aae:	e059      	b.n	8008b64 <HAL_TIMEx_OCN_Start+0x126>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d104      	bne.n	8008ac0 <HAL_TIMEx_OCN_Start+0x82>
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2202      	movs	r2, #2
 8008aba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008abe:	e013      	b.n	8008ae8 <HAL_TIMEx_OCN_Start+0xaa>
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	2b04      	cmp	r3, #4
 8008ac4:	d104      	bne.n	8008ad0 <HAL_TIMEx_OCN_Start+0x92>
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2202      	movs	r2, #2
 8008aca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008ace:	e00b      	b.n	8008ae8 <HAL_TIMEx_OCN_Start+0xaa>
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	2b08      	cmp	r3, #8
 8008ad4:	d104      	bne.n	8008ae0 <HAL_TIMEx_OCN_Start+0xa2>
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2202      	movs	r2, #2
 8008ada:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ade:	e003      	b.n	8008ae8 <HAL_TIMEx_OCN_Start+0xaa>
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2202      	movs	r2, #2
 8008ae4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	2204      	movs	r2, #4
 8008aee:	6839      	ldr	r1, [r7, #0]
 8008af0:	4618      	mov	r0, r3
 8008af2:	f001 fcf0 	bl	800a4d6 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008b04:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	4a18      	ldr	r2, [pc, #96]	; (8008b6c <HAL_TIMEx_OCN_Start+0x12e>)
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	d00e      	beq.n	8008b2e <HAL_TIMEx_OCN_Start+0xf0>
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b18:	d009      	beq.n	8008b2e <HAL_TIMEx_OCN_Start+0xf0>
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	4a14      	ldr	r2, [pc, #80]	; (8008b70 <HAL_TIMEx_OCN_Start+0x132>)
 8008b20:	4293      	cmp	r3, r2
 8008b22:	d004      	beq.n	8008b2e <HAL_TIMEx_OCN_Start+0xf0>
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	4a12      	ldr	r2, [pc, #72]	; (8008b74 <HAL_TIMEx_OCN_Start+0x136>)
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	d111      	bne.n	8008b52 <HAL_TIMEx_OCN_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	689b      	ldr	r3, [r3, #8]
 8008b34:	f003 0307 	and.w	r3, r3, #7
 8008b38:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	2b06      	cmp	r3, #6
 8008b3e:	d010      	beq.n	8008b62 <HAL_TIMEx_OCN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	681a      	ldr	r2, [r3, #0]
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f042 0201 	orr.w	r2, r2, #1
 8008b4e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b50:	e007      	b.n	8008b62 <HAL_TIMEx_OCN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	681a      	ldr	r2, [r3, #0]
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f042 0201 	orr.w	r2, r2, #1
 8008b60:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008b62:	2300      	movs	r3, #0
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	3710      	adds	r7, #16
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}
 8008b6c:	40012c00 	.word	0x40012c00
 8008b70:	40000400 	.word	0x40000400
 8008b74:	40000800 	.word	0x40000800

08008b78 <HAL_TIMEx_OCN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b082      	sub	sp, #8
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
 8008b80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	2200      	movs	r2, #0
 8008b88:	6839      	ldr	r1, [r7, #0]
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f001 fca3 	bl	800a4d6 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	6a1a      	ldr	r2, [r3, #32]
 8008b96:	f241 1311 	movw	r3, #4369	; 0x1111
 8008b9a:	4013      	ands	r3, r2
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d10f      	bne.n	8008bc0 <HAL_TIMEx_OCN_Stop+0x48>
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	6a1a      	ldr	r2, [r3, #32]
 8008ba6:	f240 4344 	movw	r3, #1092	; 0x444
 8008baa:	4013      	ands	r3, r2
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d107      	bne.n	8008bc0 <HAL_TIMEx_OCN_Stop+0x48>
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008bbe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	6a1a      	ldr	r2, [r3, #32]
 8008bc6:	f241 1311 	movw	r3, #4369	; 0x1111
 8008bca:	4013      	ands	r3, r2
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d10f      	bne.n	8008bf0 <HAL_TIMEx_OCN_Stop+0x78>
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	6a1a      	ldr	r2, [r3, #32]
 8008bd6:	f240 4344 	movw	r3, #1092	; 0x444
 8008bda:	4013      	ands	r3, r2
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d107      	bne.n	8008bf0 <HAL_TIMEx_OCN_Stop+0x78>
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	681a      	ldr	r2, [r3, #0]
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f022 0201 	bic.w	r2, r2, #1
 8008bee:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d104      	bne.n	8008c00 <HAL_TIMEx_OCN_Stop+0x88>
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2201      	movs	r2, #1
 8008bfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008bfe:	e013      	b.n	8008c28 <HAL_TIMEx_OCN_Stop+0xb0>
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	2b04      	cmp	r3, #4
 8008c04:	d104      	bne.n	8008c10 <HAL_TIMEx_OCN_Stop+0x98>
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2201      	movs	r2, #1
 8008c0a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008c0e:	e00b      	b.n	8008c28 <HAL_TIMEx_OCN_Stop+0xb0>
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	2b08      	cmp	r3, #8
 8008c14:	d104      	bne.n	8008c20 <HAL_TIMEx_OCN_Stop+0xa8>
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2201      	movs	r2, #1
 8008c1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008c1e:	e003      	b.n	8008c28 <HAL_TIMEx_OCN_Stop+0xb0>
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2201      	movs	r2, #1
 8008c24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8008c28:	2300      	movs	r3, #0
}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	3708      	adds	r7, #8
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}

08008c32 <HAL_TIMEx_OCN_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008c32:	b580      	push	{r7, lr}
 8008c34:	b084      	sub	sp, #16
 8008c36:	af00      	add	r7, sp, #0
 8008c38:	6078      	str	r0, [r7, #4]
 8008c3a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d109      	bne.n	8008c5a <HAL_TIMEx_OCN_Start_IT+0x28>
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008c4c:	b2db      	uxtb	r3, r3
 8008c4e:	2b01      	cmp	r3, #1
 8008c50:	bf14      	ite	ne
 8008c52:	2301      	movne	r3, #1
 8008c54:	2300      	moveq	r3, #0
 8008c56:	b2db      	uxtb	r3, r3
 8008c58:	e022      	b.n	8008ca0 <HAL_TIMEx_OCN_Start_IT+0x6e>
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	2b04      	cmp	r3, #4
 8008c5e:	d109      	bne.n	8008c74 <HAL_TIMEx_OCN_Start_IT+0x42>
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008c66:	b2db      	uxtb	r3, r3
 8008c68:	2b01      	cmp	r3, #1
 8008c6a:	bf14      	ite	ne
 8008c6c:	2301      	movne	r3, #1
 8008c6e:	2300      	moveq	r3, #0
 8008c70:	b2db      	uxtb	r3, r3
 8008c72:	e015      	b.n	8008ca0 <HAL_TIMEx_OCN_Start_IT+0x6e>
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	2b08      	cmp	r3, #8
 8008c78:	d109      	bne.n	8008c8e <HAL_TIMEx_OCN_Start_IT+0x5c>
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008c80:	b2db      	uxtb	r3, r3
 8008c82:	2b01      	cmp	r3, #1
 8008c84:	bf14      	ite	ne
 8008c86:	2301      	movne	r3, #1
 8008c88:	2300      	moveq	r3, #0
 8008c8a:	b2db      	uxtb	r3, r3
 8008c8c:	e008      	b.n	8008ca0 <HAL_TIMEx_OCN_Start_IT+0x6e>
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008c94:	b2db      	uxtb	r3, r3
 8008c96:	2b01      	cmp	r3, #1
 8008c98:	bf14      	ite	ne
 8008c9a:	2301      	movne	r3, #1
 8008c9c:	2300      	moveq	r3, #0
 8008c9e:	b2db      	uxtb	r3, r3
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d001      	beq.n	8008ca8 <HAL_TIMEx_OCN_Start_IT+0x76>
  {
    return HAL_ERROR;
 8008ca4:	2301      	movs	r3, #1
 8008ca6:	e08f      	b.n	8008dc8 <HAL_TIMEx_OCN_Start_IT+0x196>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d104      	bne.n	8008cb8 <HAL_TIMEx_OCN_Start_IT+0x86>
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2202      	movs	r2, #2
 8008cb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008cb6:	e013      	b.n	8008ce0 <HAL_TIMEx_OCN_Start_IT+0xae>
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	2b04      	cmp	r3, #4
 8008cbc:	d104      	bne.n	8008cc8 <HAL_TIMEx_OCN_Start_IT+0x96>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2202      	movs	r2, #2
 8008cc2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008cc6:	e00b      	b.n	8008ce0 <HAL_TIMEx_OCN_Start_IT+0xae>
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	2b08      	cmp	r3, #8
 8008ccc:	d104      	bne.n	8008cd8 <HAL_TIMEx_OCN_Start_IT+0xa6>
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2202      	movs	r2, #2
 8008cd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008cd6:	e003      	b.n	8008ce0 <HAL_TIMEx_OCN_Start_IT+0xae>
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2202      	movs	r2, #2
 8008cdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	2b08      	cmp	r3, #8
 8008ce4:	d01b      	beq.n	8008d1e <HAL_TIMEx_OCN_Start_IT+0xec>
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	2b08      	cmp	r3, #8
 8008cea:	d821      	bhi.n	8008d30 <HAL_TIMEx_OCN_Start_IT+0xfe>
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d003      	beq.n	8008cfa <HAL_TIMEx_OCN_Start_IT+0xc8>
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	2b04      	cmp	r3, #4
 8008cf6:	d009      	beq.n	8008d0c <HAL_TIMEx_OCN_Start_IT+0xda>
 8008cf8:	e01a      	b.n	8008d30 <HAL_TIMEx_OCN_Start_IT+0xfe>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Output Compare interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	68da      	ldr	r2, [r3, #12]
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f042 0202 	orr.w	r2, r2, #2
 8008d08:	60da      	str	r2, [r3, #12]
      break;
 8008d0a:	e014      	b.n	8008d36 <HAL_TIMEx_OCN_Start_IT+0x104>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Output Compare interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	68da      	ldr	r2, [r3, #12]
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f042 0204 	orr.w	r2, r2, #4
 8008d1a:	60da      	str	r2, [r3, #12]
      break;
 8008d1c:	e00b      	b.n	8008d36 <HAL_TIMEx_OCN_Start_IT+0x104>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Output Compare interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	68da      	ldr	r2, [r3, #12]
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f042 0208 	orr.w	r2, r2, #8
 8008d2c:	60da      	str	r2, [r3, #12]
      break;
 8008d2e:	e002      	b.n	8008d36 <HAL_TIMEx_OCN_Start_IT+0x104>
    }


    default:
      status = HAL_ERROR;
 8008d30:	2301      	movs	r3, #1
 8008d32:	73fb      	strb	r3, [r7, #15]
      break;
 8008d34:	bf00      	nop
  }

  if (status == HAL_OK)
 8008d36:	7bfb      	ldrb	r3, [r7, #15]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d144      	bne.n	8008dc6 <HAL_TIMEx_OCN_Start_IT+0x194>
  {
    /* Enable the TIM Break interrupt */
    __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	68da      	ldr	r2, [r3, #12]
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008d4a:	60da      	str	r2, [r3, #12]

    /* Enable the Capture compare channel N */
    TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	2204      	movs	r2, #4
 8008d52:	6839      	ldr	r1, [r7, #0]
 8008d54:	4618      	mov	r0, r3
 8008d56:	f001 fbbe 	bl	800a4d6 <TIM_CCxNChannelCmd>

    /* Enable the Main Output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008d68:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	4a18      	ldr	r2, [pc, #96]	; (8008dd0 <HAL_TIMEx_OCN_Start_IT+0x19e>)
 8008d70:	4293      	cmp	r3, r2
 8008d72:	d00e      	beq.n	8008d92 <HAL_TIMEx_OCN_Start_IT+0x160>
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d7c:	d009      	beq.n	8008d92 <HAL_TIMEx_OCN_Start_IT+0x160>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	4a14      	ldr	r2, [pc, #80]	; (8008dd4 <HAL_TIMEx_OCN_Start_IT+0x1a2>)
 8008d84:	4293      	cmp	r3, r2
 8008d86:	d004      	beq.n	8008d92 <HAL_TIMEx_OCN_Start_IT+0x160>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	4a12      	ldr	r2, [pc, #72]	; (8008dd8 <HAL_TIMEx_OCN_Start_IT+0x1a6>)
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	d111      	bne.n	8008db6 <HAL_TIMEx_OCN_Start_IT+0x184>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	689b      	ldr	r3, [r3, #8]
 8008d98:	f003 0307 	and.w	r3, r3, #7
 8008d9c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d9e:	68bb      	ldr	r3, [r7, #8]
 8008da0:	2b06      	cmp	r3, #6
 8008da2:	d010      	beq.n	8008dc6 <HAL_TIMEx_OCN_Start_IT+0x194>
      {
        __HAL_TIM_ENABLE(htim);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	681a      	ldr	r2, [r3, #0]
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	f042 0201 	orr.w	r2, r2, #1
 8008db2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008db4:	e007      	b.n	8008dc6 <HAL_TIMEx_OCN_Start_IT+0x194>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	681a      	ldr	r2, [r3, #0]
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	f042 0201 	orr.w	r2, r2, #1
 8008dc4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8008dc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	3710      	adds	r7, #16
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}
 8008dd0:	40012c00 	.word	0x40012c00
 8008dd4:	40000400 	.word	0x40000400
 8008dd8:	40000800 	.word	0x40000800

08008ddc <HAL_TIMEx_OCN_Stop_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b084      	sub	sp, #16
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
 8008de4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008de6:	2300      	movs	r3, #0
 8008de8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpccer;

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	2b08      	cmp	r3, #8
 8008dee:	d01b      	beq.n	8008e28 <HAL_TIMEx_OCN_Stop_IT+0x4c>
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	2b08      	cmp	r3, #8
 8008df4:	d821      	bhi.n	8008e3a <HAL_TIMEx_OCN_Stop_IT+0x5e>
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d003      	beq.n	8008e04 <HAL_TIMEx_OCN_Stop_IT+0x28>
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	2b04      	cmp	r3, #4
 8008e00:	d009      	beq.n	8008e16 <HAL_TIMEx_OCN_Stop_IT+0x3a>
 8008e02:	e01a      	b.n	8008e3a <HAL_TIMEx_OCN_Stop_IT+0x5e>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Output Compare interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	68da      	ldr	r2, [r3, #12]
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	f022 0202 	bic.w	r2, r2, #2
 8008e12:	60da      	str	r2, [r3, #12]
      break;
 8008e14:	e014      	b.n	8008e40 <HAL_TIMEx_OCN_Stop_IT+0x64>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Output Compare interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	68da      	ldr	r2, [r3, #12]
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f022 0204 	bic.w	r2, r2, #4
 8008e24:	60da      	str	r2, [r3, #12]
      break;
 8008e26:	e00b      	b.n	8008e40 <HAL_TIMEx_OCN_Stop_IT+0x64>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Output Compare interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	68da      	ldr	r2, [r3, #12]
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f022 0208 	bic.w	r2, r2, #8
 8008e36:	60da      	str	r2, [r3, #12]
      break;
 8008e38:	e002      	b.n	8008e40 <HAL_TIMEx_OCN_Stop_IT+0x64>
    }

    default:
      status = HAL_ERROR;
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	73fb      	strb	r3, [r7, #15]
      break;
 8008e3e:	bf00      	nop
  }

  if (status == HAL_OK)
 8008e40:	7bfb      	ldrb	r3, [r7, #15]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d164      	bne.n	8008f10 <HAL_TIMEx_OCN_Stop_IT+0x134>
  {
    /* Disable the Capture compare channel N */
    TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	6839      	ldr	r1, [r7, #0]
 8008e4e:	4618      	mov	r0, r3
 8008e50:	f001 fb41 	bl	800a4d6 <TIM_CCxNChannelCmd>

    /* Disable the TIM Break interrupt (only if no more channel is active) */
    tmpccer = htim->Instance->CCER;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	6a1b      	ldr	r3, [r3, #32]
 8008e5a:	60bb      	str	r3, [r7, #8]
    if ((tmpccer & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == (uint32_t)RESET)
 8008e5c:	68ba      	ldr	r2, [r7, #8]
 8008e5e:	f240 4344 	movw	r3, #1092	; 0x444
 8008e62:	4013      	ands	r3, r2
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d107      	bne.n	8008e78 <HAL_TIMEx_OCN_Stop_IT+0x9c>
    {
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	68da      	ldr	r2, [r3, #12]
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008e76:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	6a1a      	ldr	r2, [r3, #32]
 8008e7e:	f241 1311 	movw	r3, #4369	; 0x1111
 8008e82:	4013      	ands	r3, r2
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d10f      	bne.n	8008ea8 <HAL_TIMEx_OCN_Stop_IT+0xcc>
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	6a1a      	ldr	r2, [r3, #32]
 8008e8e:	f240 4344 	movw	r3, #1092	; 0x444
 8008e92:	4013      	ands	r3, r2
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d107      	bne.n	8008ea8 <HAL_TIMEx_OCN_Stop_IT+0xcc>
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008ea6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	6a1a      	ldr	r2, [r3, #32]
 8008eae:	f241 1311 	movw	r3, #4369	; 0x1111
 8008eb2:	4013      	ands	r3, r2
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d10f      	bne.n	8008ed8 <HAL_TIMEx_OCN_Stop_IT+0xfc>
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	6a1a      	ldr	r2, [r3, #32]
 8008ebe:	f240 4344 	movw	r3, #1092	; 0x444
 8008ec2:	4013      	ands	r3, r2
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d107      	bne.n	8008ed8 <HAL_TIMEx_OCN_Stop_IT+0xfc>
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	681a      	ldr	r2, [r3, #0]
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f022 0201 	bic.w	r2, r2, #1
 8008ed6:	601a      	str	r2, [r3, #0]

    /* Set the TIM complementary channel state */
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d104      	bne.n	8008ee8 <HAL_TIMEx_OCN_Stop_IT+0x10c>
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2201      	movs	r2, #1
 8008ee2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008ee6:	e013      	b.n	8008f10 <HAL_TIMEx_OCN_Stop_IT+0x134>
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	2b04      	cmp	r3, #4
 8008eec:	d104      	bne.n	8008ef8 <HAL_TIMEx_OCN_Stop_IT+0x11c>
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	2201      	movs	r2, #1
 8008ef2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008ef6:	e00b      	b.n	8008f10 <HAL_TIMEx_OCN_Stop_IT+0x134>
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	2b08      	cmp	r3, #8
 8008efc:	d104      	bne.n	8008f08 <HAL_TIMEx_OCN_Stop_IT+0x12c>
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2201      	movs	r2, #1
 8008f02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f06:	e003      	b.n	8008f10 <HAL_TIMEx_OCN_Stop_IT+0x134>
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2201      	movs	r2, #1
 8008f0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

  /* Return function status */
  return status;
 8008f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f12:	4618      	mov	r0, r3
 8008f14:	3710      	adds	r7, #16
 8008f16:	46bd      	mov	sp, r7
 8008f18:	bd80      	pop	{r7, pc}

08008f1a <HAL_TIMEx_OCN_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                          uint16_t Length)
{
 8008f1a:	b580      	push	{r7, lr}
 8008f1c:	b086      	sub	sp, #24
 8008f1e:	af00      	add	r7, sp, #0
 8008f20:	60f8      	str	r0, [r7, #12]
 8008f22:	60b9      	str	r1, [r7, #8]
 8008f24:	607a      	str	r2, [r7, #4]
 8008f26:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8008f28:	2300      	movs	r3, #0
 8008f2a:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Set the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d109      	bne.n	8008f46 <HAL_TIMEx_OCN_Start_DMA+0x2c>
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008f38:	b2db      	uxtb	r3, r3
 8008f3a:	2b02      	cmp	r3, #2
 8008f3c:	bf0c      	ite	eq
 8008f3e:	2301      	moveq	r3, #1
 8008f40:	2300      	movne	r3, #0
 8008f42:	b2db      	uxtb	r3, r3
 8008f44:	e022      	b.n	8008f8c <HAL_TIMEx_OCN_Start_DMA+0x72>
 8008f46:	68bb      	ldr	r3, [r7, #8]
 8008f48:	2b04      	cmp	r3, #4
 8008f4a:	d109      	bne.n	8008f60 <HAL_TIMEx_OCN_Start_DMA+0x46>
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008f52:	b2db      	uxtb	r3, r3
 8008f54:	2b02      	cmp	r3, #2
 8008f56:	bf0c      	ite	eq
 8008f58:	2301      	moveq	r3, #1
 8008f5a:	2300      	movne	r3, #0
 8008f5c:	b2db      	uxtb	r3, r3
 8008f5e:	e015      	b.n	8008f8c <HAL_TIMEx_OCN_Start_DMA+0x72>
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	2b08      	cmp	r3, #8
 8008f64:	d109      	bne.n	8008f7a <HAL_TIMEx_OCN_Start_DMA+0x60>
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008f6c:	b2db      	uxtb	r3, r3
 8008f6e:	2b02      	cmp	r3, #2
 8008f70:	bf0c      	ite	eq
 8008f72:	2301      	moveq	r3, #1
 8008f74:	2300      	movne	r3, #0
 8008f76:	b2db      	uxtb	r3, r3
 8008f78:	e008      	b.n	8008f8c <HAL_TIMEx_OCN_Start_DMA+0x72>
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008f80:	b2db      	uxtb	r3, r3
 8008f82:	2b02      	cmp	r3, #2
 8008f84:	bf0c      	ite	eq
 8008f86:	2301      	moveq	r3, #1
 8008f88:	2300      	movne	r3, #0
 8008f8a:	b2db      	uxtb	r3, r3
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d001      	beq.n	8008f94 <HAL_TIMEx_OCN_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8008f90:	2302      	movs	r3, #2
 8008f92:	e115      	b.n	80091c0 <HAL_TIMEx_OCN_Start_DMA+0x2a6>
  }
  else if (TIM_CHANNEL_N_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d109      	bne.n	8008fae <HAL_TIMEx_OCN_Start_DMA+0x94>
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008fa0:	b2db      	uxtb	r3, r3
 8008fa2:	2b01      	cmp	r3, #1
 8008fa4:	bf0c      	ite	eq
 8008fa6:	2301      	moveq	r3, #1
 8008fa8:	2300      	movne	r3, #0
 8008faa:	b2db      	uxtb	r3, r3
 8008fac:	e022      	b.n	8008ff4 <HAL_TIMEx_OCN_Start_DMA+0xda>
 8008fae:	68bb      	ldr	r3, [r7, #8]
 8008fb0:	2b04      	cmp	r3, #4
 8008fb2:	d109      	bne.n	8008fc8 <HAL_TIMEx_OCN_Start_DMA+0xae>
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008fba:	b2db      	uxtb	r3, r3
 8008fbc:	2b01      	cmp	r3, #1
 8008fbe:	bf0c      	ite	eq
 8008fc0:	2301      	moveq	r3, #1
 8008fc2:	2300      	movne	r3, #0
 8008fc4:	b2db      	uxtb	r3, r3
 8008fc6:	e015      	b.n	8008ff4 <HAL_TIMEx_OCN_Start_DMA+0xda>
 8008fc8:	68bb      	ldr	r3, [r7, #8]
 8008fca:	2b08      	cmp	r3, #8
 8008fcc:	d109      	bne.n	8008fe2 <HAL_TIMEx_OCN_Start_DMA+0xc8>
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008fd4:	b2db      	uxtb	r3, r3
 8008fd6:	2b01      	cmp	r3, #1
 8008fd8:	bf0c      	ite	eq
 8008fda:	2301      	moveq	r3, #1
 8008fdc:	2300      	movne	r3, #0
 8008fde:	b2db      	uxtb	r3, r3
 8008fe0:	e008      	b.n	8008ff4 <HAL_TIMEx_OCN_Start_DMA+0xda>
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008fe8:	b2db      	uxtb	r3, r3
 8008fea:	2b01      	cmp	r3, #1
 8008fec:	bf0c      	ite	eq
 8008fee:	2301      	moveq	r3, #1
 8008ff0:	2300      	movne	r3, #0
 8008ff2:	b2db      	uxtb	r3, r3
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d024      	beq.n	8009042 <HAL_TIMEx_OCN_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d002      	beq.n	8009004 <HAL_TIMEx_OCN_Start_DMA+0xea>
 8008ffe:	887b      	ldrh	r3, [r7, #2]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d101      	bne.n	8009008 <HAL_TIMEx_OCN_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8009004:	2301      	movs	r3, #1
 8009006:	e0db      	b.n	80091c0 <HAL_TIMEx_OCN_Start_DMA+0x2a6>
    }
    else
    {
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d104      	bne.n	8009018 <HAL_TIMEx_OCN_Start_DMA+0xfe>
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	2202      	movs	r2, #2
 8009012:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009016:	e016      	b.n	8009046 <HAL_TIMEx_OCN_Start_DMA+0x12c>
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	2b04      	cmp	r3, #4
 800901c:	d104      	bne.n	8009028 <HAL_TIMEx_OCN_Start_DMA+0x10e>
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	2202      	movs	r2, #2
 8009022:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009026:	e00e      	b.n	8009046 <HAL_TIMEx_OCN_Start_DMA+0x12c>
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	2b08      	cmp	r3, #8
 800902c:	d104      	bne.n	8009038 <HAL_TIMEx_OCN_Start_DMA+0x11e>
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	2202      	movs	r2, #2
 8009032:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009036:	e006      	b.n	8009046 <HAL_TIMEx_OCN_Start_DMA+0x12c>
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	2202      	movs	r2, #2
 800903c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009040:	e001      	b.n	8009046 <HAL_TIMEx_OCN_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8009042:	2301      	movs	r3, #1
 8009044:	e0bc      	b.n	80091c0 <HAL_TIMEx_OCN_Start_DMA+0x2a6>
  }

  switch (Channel)
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	2b08      	cmp	r3, #8
 800904a:	d051      	beq.n	80090f0 <HAL_TIMEx_OCN_Start_DMA+0x1d6>
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	2b08      	cmp	r3, #8
 8009050:	d872      	bhi.n	8009138 <HAL_TIMEx_OCN_Start_DMA+0x21e>
 8009052:	68bb      	ldr	r3, [r7, #8]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d003      	beq.n	8009060 <HAL_TIMEx_OCN_Start_DMA+0x146>
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	2b04      	cmp	r3, #4
 800905c:	d024      	beq.n	80090a8 <HAL_TIMEx_OCN_Start_DMA+0x18e>
 800905e:	e06b      	b.n	8009138 <HAL_TIMEx_OCN_Start_DMA+0x21e>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseNCplt;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009064:	4a58      	ldr	r2, [pc, #352]	; (80091c8 <HAL_TIMEx_OCN_Start_DMA+0x2ae>)
 8009066:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800906c:	4a57      	ldr	r2, [pc, #348]	; (80091cc <HAL_TIMEx_OCN_Start_DMA+0x2b2>)
 800906e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAErrorCCxN ;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009074:	4a56      	ldr	r2, [pc, #344]	; (80091d0 <HAL_TIMEx_OCN_Start_DMA+0x2b6>)
 8009076:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800907c:	6879      	ldr	r1, [r7, #4]
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	3334      	adds	r3, #52	; 0x34
 8009084:	461a      	mov	r2, r3
 8009086:	887b      	ldrh	r3, [r7, #2]
 8009088:	f7f7 ffef 	bl	800106a <HAL_DMA_Start_IT>
 800908c:	4603      	mov	r3, r0
 800908e:	2b00      	cmp	r3, #0
 8009090:	d001      	beq.n	8009096 <HAL_TIMEx_OCN_Start_DMA+0x17c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8009092:	2301      	movs	r3, #1
 8009094:	e094      	b.n	80091c0 <HAL_TIMEx_OCN_Start_DMA+0x2a6>
      }
      /* Enable the TIM Output Compare DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	68da      	ldr	r2, [r3, #12]
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80090a4:	60da      	str	r2, [r3, #12]
      break;
 80090a6:	e04a      	b.n	800913e <HAL_TIMEx_OCN_Start_DMA+0x224>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseNCplt;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090ac:	4a46      	ldr	r2, [pc, #280]	; (80091c8 <HAL_TIMEx_OCN_Start_DMA+0x2ae>)
 80090ae:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090b4:	4a45      	ldr	r2, [pc, #276]	; (80091cc <HAL_TIMEx_OCN_Start_DMA+0x2b2>)
 80090b6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAErrorCCxN ;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090bc:	4a44      	ldr	r2, [pc, #272]	; (80091d0 <HAL_TIMEx_OCN_Start_DMA+0x2b6>)
 80090be:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80090c4:	6879      	ldr	r1, [r7, #4]
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	3338      	adds	r3, #56	; 0x38
 80090cc:	461a      	mov	r2, r3
 80090ce:	887b      	ldrh	r3, [r7, #2]
 80090d0:	f7f7 ffcb 	bl	800106a <HAL_DMA_Start_IT>
 80090d4:	4603      	mov	r3, r0
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d001      	beq.n	80090de <HAL_TIMEx_OCN_Start_DMA+0x1c4>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80090da:	2301      	movs	r3, #1
 80090dc:	e070      	b.n	80091c0 <HAL_TIMEx_OCN_Start_DMA+0x2a6>
      }
      /* Enable the TIM Output Compare DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	68da      	ldr	r2, [r3, #12]
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80090ec:	60da      	str	r2, [r3, #12]
      break;
 80090ee:	e026      	b.n	800913e <HAL_TIMEx_OCN_Start_DMA+0x224>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseNCplt;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090f4:	4a34      	ldr	r2, [pc, #208]	; (80091c8 <HAL_TIMEx_OCN_Start_DMA+0x2ae>)
 80090f6:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090fc:	4a33      	ldr	r2, [pc, #204]	; (80091cc <HAL_TIMEx_OCN_Start_DMA+0x2b2>)
 80090fe:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAErrorCCxN ;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009104:	4a32      	ldr	r2, [pc, #200]	; (80091d0 <HAL_TIMEx_OCN_Start_DMA+0x2b6>)
 8009106:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800910c:	6879      	ldr	r1, [r7, #4]
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	333c      	adds	r3, #60	; 0x3c
 8009114:	461a      	mov	r2, r3
 8009116:	887b      	ldrh	r3, [r7, #2]
 8009118:	f7f7 ffa7 	bl	800106a <HAL_DMA_Start_IT>
 800911c:	4603      	mov	r3, r0
 800911e:	2b00      	cmp	r3, #0
 8009120:	d001      	beq.n	8009126 <HAL_TIMEx_OCN_Start_DMA+0x20c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8009122:	2301      	movs	r3, #1
 8009124:	e04c      	b.n	80091c0 <HAL_TIMEx_OCN_Start_DMA+0x2a6>
      }
      /* Enable the TIM Output Compare DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	68da      	ldr	r2, [r3, #12]
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009134:	60da      	str	r2, [r3, #12]
      break;
 8009136:	e002      	b.n	800913e <HAL_TIMEx_OCN_Start_DMA+0x224>
    }

    default:
      status = HAL_ERROR;
 8009138:	2301      	movs	r3, #1
 800913a:	75fb      	strb	r3, [r7, #23]
      break;
 800913c:	bf00      	nop
  }

  if (status == HAL_OK)
 800913e:	7dfb      	ldrb	r3, [r7, #23]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d13c      	bne.n	80091be <HAL_TIMEx_OCN_Start_DMA+0x2a4>
  {
    /* Enable the Capture compare channel N */
    TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	2204      	movs	r2, #4
 800914a:	68b9      	ldr	r1, [r7, #8]
 800914c:	4618      	mov	r0, r3
 800914e:	f001 f9c2 	bl	800a4d6 <TIM_CCxNChannelCmd>

    /* Enable the Main Output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009160:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	4a1b      	ldr	r2, [pc, #108]	; (80091d4 <HAL_TIMEx_OCN_Start_DMA+0x2ba>)
 8009168:	4293      	cmp	r3, r2
 800916a:	d00e      	beq.n	800918a <HAL_TIMEx_OCN_Start_DMA+0x270>
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009174:	d009      	beq.n	800918a <HAL_TIMEx_OCN_Start_DMA+0x270>
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	4a17      	ldr	r2, [pc, #92]	; (80091d8 <HAL_TIMEx_OCN_Start_DMA+0x2be>)
 800917c:	4293      	cmp	r3, r2
 800917e:	d004      	beq.n	800918a <HAL_TIMEx_OCN_Start_DMA+0x270>
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	4a15      	ldr	r2, [pc, #84]	; (80091dc <HAL_TIMEx_OCN_Start_DMA+0x2c2>)
 8009186:	4293      	cmp	r3, r2
 8009188:	d111      	bne.n	80091ae <HAL_TIMEx_OCN_Start_DMA+0x294>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	689b      	ldr	r3, [r3, #8]
 8009190:	f003 0307 	and.w	r3, r3, #7
 8009194:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009196:	693b      	ldr	r3, [r7, #16]
 8009198:	2b06      	cmp	r3, #6
 800919a:	d010      	beq.n	80091be <HAL_TIMEx_OCN_Start_DMA+0x2a4>
      {
        __HAL_TIM_ENABLE(htim);
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	681a      	ldr	r2, [r3, #0]
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f042 0201 	orr.w	r2, r2, #1
 80091aa:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091ac:	e007      	b.n	80091be <HAL_TIMEx_OCN_Start_DMA+0x2a4>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	681a      	ldr	r2, [r3, #0]
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f042 0201 	orr.w	r2, r2, #1
 80091bc:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80091be:	7dfb      	ldrb	r3, [r7, #23]
}
 80091c0:	4618      	mov	r0, r3
 80091c2:	3718      	adds	r7, #24
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}
 80091c8:	0800a3c1 	.word	0x0800a3c1
 80091cc:	08007915 	.word	0x08007915
 80091d0:	0800a469 	.word	0x0800a469
 80091d4:	40012c00 	.word	0x40012c00
 80091d8:	40000400 	.word	0x40000400
 80091dc:	40000800 	.word	0x40000800

080091e0 <HAL_TIMEx_OCN_Stop_DMA>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b084      	sub	sp, #16
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
 80091e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80091ea:	2300      	movs	r3, #0
 80091ec:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	2b08      	cmp	r3, #8
 80091f2:	d025      	beq.n	8009240 <HAL_TIMEx_OCN_Stop_DMA+0x60>
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	2b08      	cmp	r3, #8
 80091f8:	d830      	bhi.n	800925c <HAL_TIMEx_OCN_Stop_DMA+0x7c>
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d003      	beq.n	8009208 <HAL_TIMEx_OCN_Stop_DMA+0x28>
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	2b04      	cmp	r3, #4
 8009204:	d00e      	beq.n	8009224 <HAL_TIMEx_OCN_Stop_DMA+0x44>
 8009206:	e029      	b.n	800925c <HAL_TIMEx_OCN_Stop_DMA+0x7c>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Output Compare DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	68da      	ldr	r2, [r3, #12]
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009216:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800921c:	4618      	mov	r0, r3
 800921e:	f7f7 ffbf 	bl	80011a0 <HAL_DMA_Abort_IT>
      break;
 8009222:	e01e      	b.n	8009262 <HAL_TIMEx_OCN_Stop_DMA+0x82>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Output Compare DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	68da      	ldr	r2, [r3, #12]
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009232:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009238:	4618      	mov	r0, r3
 800923a:	f7f7 ffb1 	bl	80011a0 <HAL_DMA_Abort_IT>
      break;
 800923e:	e010      	b.n	8009262 <HAL_TIMEx_OCN_Stop_DMA+0x82>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Output Compare DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	68da      	ldr	r2, [r3, #12]
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800924e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009254:	4618      	mov	r0, r3
 8009256:	f7f7 ffa3 	bl	80011a0 <HAL_DMA_Abort_IT>
      break;
 800925a:	e002      	b.n	8009262 <HAL_TIMEx_OCN_Stop_DMA+0x82>
    }

    default:
      status = HAL_ERROR;
 800925c:	2301      	movs	r3, #1
 800925e:	73fb      	strb	r3, [r7, #15]
      break;
 8009260:	bf00      	nop
  }

  if (status == HAL_OK)
 8009262:	7bfb      	ldrb	r3, [r7, #15]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d152      	bne.n	800930e <HAL_TIMEx_OCN_Stop_DMA+0x12e>
  {
    /* Disable the Capture compare channel N */
    TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	2200      	movs	r2, #0
 800926e:	6839      	ldr	r1, [r7, #0]
 8009270:	4618      	mov	r0, r3
 8009272:	f001 f930 	bl	800a4d6 <TIM_CCxNChannelCmd>

    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	6a1a      	ldr	r2, [r3, #32]
 800927c:	f241 1311 	movw	r3, #4369	; 0x1111
 8009280:	4013      	ands	r3, r2
 8009282:	2b00      	cmp	r3, #0
 8009284:	d10f      	bne.n	80092a6 <HAL_TIMEx_OCN_Stop_DMA+0xc6>
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	6a1a      	ldr	r2, [r3, #32]
 800928c:	f240 4344 	movw	r3, #1092	; 0x444
 8009290:	4013      	ands	r3, r2
 8009292:	2b00      	cmp	r3, #0
 8009294:	d107      	bne.n	80092a6 <HAL_TIMEx_OCN_Stop_DMA+0xc6>
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80092a4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	6a1a      	ldr	r2, [r3, #32]
 80092ac:	f241 1311 	movw	r3, #4369	; 0x1111
 80092b0:	4013      	ands	r3, r2
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d10f      	bne.n	80092d6 <HAL_TIMEx_OCN_Stop_DMA+0xf6>
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	6a1a      	ldr	r2, [r3, #32]
 80092bc:	f240 4344 	movw	r3, #1092	; 0x444
 80092c0:	4013      	ands	r3, r2
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d107      	bne.n	80092d6 <HAL_TIMEx_OCN_Stop_DMA+0xf6>
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	681a      	ldr	r2, [r3, #0]
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f022 0201 	bic.w	r2, r2, #1
 80092d4:	601a      	str	r2, [r3, #0]

    /* Set the TIM complementary channel state */
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d104      	bne.n	80092e6 <HAL_TIMEx_OCN_Stop_DMA+0x106>
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2201      	movs	r2, #1
 80092e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80092e4:	e013      	b.n	800930e <HAL_TIMEx_OCN_Stop_DMA+0x12e>
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	2b04      	cmp	r3, #4
 80092ea:	d104      	bne.n	80092f6 <HAL_TIMEx_OCN_Stop_DMA+0x116>
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2201      	movs	r2, #1
 80092f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80092f4:	e00b      	b.n	800930e <HAL_TIMEx_OCN_Stop_DMA+0x12e>
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	2b08      	cmp	r3, #8
 80092fa:	d104      	bne.n	8009306 <HAL_TIMEx_OCN_Stop_DMA+0x126>
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2201      	movs	r2, #1
 8009300:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009304:	e003      	b.n	800930e <HAL_TIMEx_OCN_Stop_DMA+0x12e>
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2201      	movs	r2, #1
 800930a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

  /* Return function status */
  return status;
 800930e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009310:	4618      	mov	r0, r3
 8009312:	3710      	adds	r7, #16
 8009314:	46bd      	mov	sp, r7
 8009316:	bd80      	pop	{r7, pc}

08009318 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b084      	sub	sp, #16
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
 8009320:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d109      	bne.n	800933c <HAL_TIMEx_PWMN_Start+0x24>
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800932e:	b2db      	uxtb	r3, r3
 8009330:	2b01      	cmp	r3, #1
 8009332:	bf14      	ite	ne
 8009334:	2301      	movne	r3, #1
 8009336:	2300      	moveq	r3, #0
 8009338:	b2db      	uxtb	r3, r3
 800933a:	e022      	b.n	8009382 <HAL_TIMEx_PWMN_Start+0x6a>
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	2b04      	cmp	r3, #4
 8009340:	d109      	bne.n	8009356 <HAL_TIMEx_PWMN_Start+0x3e>
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009348:	b2db      	uxtb	r3, r3
 800934a:	2b01      	cmp	r3, #1
 800934c:	bf14      	ite	ne
 800934e:	2301      	movne	r3, #1
 8009350:	2300      	moveq	r3, #0
 8009352:	b2db      	uxtb	r3, r3
 8009354:	e015      	b.n	8009382 <HAL_TIMEx_PWMN_Start+0x6a>
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	2b08      	cmp	r3, #8
 800935a:	d109      	bne.n	8009370 <HAL_TIMEx_PWMN_Start+0x58>
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009362:	b2db      	uxtb	r3, r3
 8009364:	2b01      	cmp	r3, #1
 8009366:	bf14      	ite	ne
 8009368:	2301      	movne	r3, #1
 800936a:	2300      	moveq	r3, #0
 800936c:	b2db      	uxtb	r3, r3
 800936e:	e008      	b.n	8009382 <HAL_TIMEx_PWMN_Start+0x6a>
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009376:	b2db      	uxtb	r3, r3
 8009378:	2b01      	cmp	r3, #1
 800937a:	bf14      	ite	ne
 800937c:	2301      	movne	r3, #1
 800937e:	2300      	moveq	r3, #0
 8009380:	b2db      	uxtb	r3, r3
 8009382:	2b00      	cmp	r3, #0
 8009384:	d001      	beq.n	800938a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8009386:	2301      	movs	r3, #1
 8009388:	e059      	b.n	800943e <HAL_TIMEx_PWMN_Start+0x126>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d104      	bne.n	800939a <HAL_TIMEx_PWMN_Start+0x82>
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2202      	movs	r2, #2
 8009394:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009398:	e013      	b.n	80093c2 <HAL_TIMEx_PWMN_Start+0xaa>
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	2b04      	cmp	r3, #4
 800939e:	d104      	bne.n	80093aa <HAL_TIMEx_PWMN_Start+0x92>
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2202      	movs	r2, #2
 80093a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80093a8:	e00b      	b.n	80093c2 <HAL_TIMEx_PWMN_Start+0xaa>
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	2b08      	cmp	r3, #8
 80093ae:	d104      	bne.n	80093ba <HAL_TIMEx_PWMN_Start+0xa2>
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2202      	movs	r2, #2
 80093b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80093b8:	e003      	b.n	80093c2 <HAL_TIMEx_PWMN_Start+0xaa>
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2202      	movs	r2, #2
 80093be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	2204      	movs	r2, #4
 80093c8:	6839      	ldr	r1, [r7, #0]
 80093ca:	4618      	mov	r0, r3
 80093cc:	f001 f883 	bl	800a4d6 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80093de:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	4a18      	ldr	r2, [pc, #96]	; (8009448 <HAL_TIMEx_PWMN_Start+0x130>)
 80093e6:	4293      	cmp	r3, r2
 80093e8:	d00e      	beq.n	8009408 <HAL_TIMEx_PWMN_Start+0xf0>
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093f2:	d009      	beq.n	8009408 <HAL_TIMEx_PWMN_Start+0xf0>
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	4a14      	ldr	r2, [pc, #80]	; (800944c <HAL_TIMEx_PWMN_Start+0x134>)
 80093fa:	4293      	cmp	r3, r2
 80093fc:	d004      	beq.n	8009408 <HAL_TIMEx_PWMN_Start+0xf0>
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	4a13      	ldr	r2, [pc, #76]	; (8009450 <HAL_TIMEx_PWMN_Start+0x138>)
 8009404:	4293      	cmp	r3, r2
 8009406:	d111      	bne.n	800942c <HAL_TIMEx_PWMN_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	689b      	ldr	r3, [r3, #8]
 800940e:	f003 0307 	and.w	r3, r3, #7
 8009412:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	2b06      	cmp	r3, #6
 8009418:	d010      	beq.n	800943c <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	681a      	ldr	r2, [r3, #0]
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f042 0201 	orr.w	r2, r2, #1
 8009428:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800942a:	e007      	b.n	800943c <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	681a      	ldr	r2, [r3, #0]
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	f042 0201 	orr.w	r2, r2, #1
 800943a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800943c:	2300      	movs	r3, #0
}
 800943e:	4618      	mov	r0, r3
 8009440:	3710      	adds	r7, #16
 8009442:	46bd      	mov	sp, r7
 8009444:	bd80      	pop	{r7, pc}
 8009446:	bf00      	nop
 8009448:	40012c00 	.word	0x40012c00
 800944c:	40000400 	.word	0x40000400
 8009450:	40000800 	.word	0x40000800

08009454 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b082      	sub	sp, #8
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
 800945c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	2200      	movs	r2, #0
 8009464:	6839      	ldr	r1, [r7, #0]
 8009466:	4618      	mov	r0, r3
 8009468:	f001 f835 	bl	800a4d6 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	6a1a      	ldr	r2, [r3, #32]
 8009472:	f241 1311 	movw	r3, #4369	; 0x1111
 8009476:	4013      	ands	r3, r2
 8009478:	2b00      	cmp	r3, #0
 800947a:	d10f      	bne.n	800949c <HAL_TIMEx_PWMN_Stop+0x48>
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	6a1a      	ldr	r2, [r3, #32]
 8009482:	f240 4344 	movw	r3, #1092	; 0x444
 8009486:	4013      	ands	r3, r2
 8009488:	2b00      	cmp	r3, #0
 800948a:	d107      	bne.n	800949c <HAL_TIMEx_PWMN_Stop+0x48>
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800949a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	6a1a      	ldr	r2, [r3, #32]
 80094a2:	f241 1311 	movw	r3, #4369	; 0x1111
 80094a6:	4013      	ands	r3, r2
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d10f      	bne.n	80094cc <HAL_TIMEx_PWMN_Stop+0x78>
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	6a1a      	ldr	r2, [r3, #32]
 80094b2:	f240 4344 	movw	r3, #1092	; 0x444
 80094b6:	4013      	ands	r3, r2
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d107      	bne.n	80094cc <HAL_TIMEx_PWMN_Stop+0x78>
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	681a      	ldr	r2, [r3, #0]
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	f022 0201 	bic.w	r2, r2, #1
 80094ca:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d104      	bne.n	80094dc <HAL_TIMEx_PWMN_Stop+0x88>
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2201      	movs	r2, #1
 80094d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80094da:	e013      	b.n	8009504 <HAL_TIMEx_PWMN_Stop+0xb0>
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	2b04      	cmp	r3, #4
 80094e0:	d104      	bne.n	80094ec <HAL_TIMEx_PWMN_Stop+0x98>
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2201      	movs	r2, #1
 80094e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80094ea:	e00b      	b.n	8009504 <HAL_TIMEx_PWMN_Stop+0xb0>
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	2b08      	cmp	r3, #8
 80094f0:	d104      	bne.n	80094fc <HAL_TIMEx_PWMN_Stop+0xa8>
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2201      	movs	r2, #1
 80094f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80094fa:	e003      	b.n	8009504 <HAL_TIMEx_PWMN_Stop+0xb0>
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2201      	movs	r2, #1
 8009500:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8009504:	2300      	movs	r3, #0
}
 8009506:	4618      	mov	r0, r3
 8009508:	3708      	adds	r7, #8
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}

0800950e <HAL_TIMEx_PWMN_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800950e:	b580      	push	{r7, lr}
 8009510:	b084      	sub	sp, #16
 8009512:	af00      	add	r7, sp, #0
 8009514:	6078      	str	r0, [r7, #4]
 8009516:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009518:	2300      	movs	r3, #0
 800951a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d109      	bne.n	8009536 <HAL_TIMEx_PWMN_Start_IT+0x28>
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009528:	b2db      	uxtb	r3, r3
 800952a:	2b01      	cmp	r3, #1
 800952c:	bf14      	ite	ne
 800952e:	2301      	movne	r3, #1
 8009530:	2300      	moveq	r3, #0
 8009532:	b2db      	uxtb	r3, r3
 8009534:	e022      	b.n	800957c <HAL_TIMEx_PWMN_Start_IT+0x6e>
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	2b04      	cmp	r3, #4
 800953a:	d109      	bne.n	8009550 <HAL_TIMEx_PWMN_Start_IT+0x42>
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009542:	b2db      	uxtb	r3, r3
 8009544:	2b01      	cmp	r3, #1
 8009546:	bf14      	ite	ne
 8009548:	2301      	movne	r3, #1
 800954a:	2300      	moveq	r3, #0
 800954c:	b2db      	uxtb	r3, r3
 800954e:	e015      	b.n	800957c <HAL_TIMEx_PWMN_Start_IT+0x6e>
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	2b08      	cmp	r3, #8
 8009554:	d109      	bne.n	800956a <HAL_TIMEx_PWMN_Start_IT+0x5c>
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800955c:	b2db      	uxtb	r3, r3
 800955e:	2b01      	cmp	r3, #1
 8009560:	bf14      	ite	ne
 8009562:	2301      	movne	r3, #1
 8009564:	2300      	moveq	r3, #0
 8009566:	b2db      	uxtb	r3, r3
 8009568:	e008      	b.n	800957c <HAL_TIMEx_PWMN_Start_IT+0x6e>
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009570:	b2db      	uxtb	r3, r3
 8009572:	2b01      	cmp	r3, #1
 8009574:	bf14      	ite	ne
 8009576:	2301      	movne	r3, #1
 8009578:	2300      	moveq	r3, #0
 800957a:	b2db      	uxtb	r3, r3
 800957c:	2b00      	cmp	r3, #0
 800957e:	d001      	beq.n	8009584 <HAL_TIMEx_PWMN_Start_IT+0x76>
  {
    return HAL_ERROR;
 8009580:	2301      	movs	r3, #1
 8009582:	e08f      	b.n	80096a4 <HAL_TIMEx_PWMN_Start_IT+0x196>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d104      	bne.n	8009594 <HAL_TIMEx_PWMN_Start_IT+0x86>
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	2202      	movs	r2, #2
 800958e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009592:	e013      	b.n	80095bc <HAL_TIMEx_PWMN_Start_IT+0xae>
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	2b04      	cmp	r3, #4
 8009598:	d104      	bne.n	80095a4 <HAL_TIMEx_PWMN_Start_IT+0x96>
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2202      	movs	r2, #2
 800959e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80095a2:	e00b      	b.n	80095bc <HAL_TIMEx_PWMN_Start_IT+0xae>
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	2b08      	cmp	r3, #8
 80095a8:	d104      	bne.n	80095b4 <HAL_TIMEx_PWMN_Start_IT+0xa6>
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2202      	movs	r2, #2
 80095ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80095b2:	e003      	b.n	80095bc <HAL_TIMEx_PWMN_Start_IT+0xae>
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2202      	movs	r2, #2
 80095b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	2b08      	cmp	r3, #8
 80095c0:	d01b      	beq.n	80095fa <HAL_TIMEx_PWMN_Start_IT+0xec>
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	2b08      	cmp	r3, #8
 80095c6:	d821      	bhi.n	800960c <HAL_TIMEx_PWMN_Start_IT+0xfe>
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d003      	beq.n	80095d6 <HAL_TIMEx_PWMN_Start_IT+0xc8>
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	2b04      	cmp	r3, #4
 80095d2:	d009      	beq.n	80095e8 <HAL_TIMEx_PWMN_Start_IT+0xda>
 80095d4:	e01a      	b.n	800960c <HAL_TIMEx_PWMN_Start_IT+0xfe>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	68da      	ldr	r2, [r3, #12]
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	f042 0202 	orr.w	r2, r2, #2
 80095e4:	60da      	str	r2, [r3, #12]
      break;
 80095e6:	e014      	b.n	8009612 <HAL_TIMEx_PWMN_Start_IT+0x104>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	68da      	ldr	r2, [r3, #12]
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f042 0204 	orr.w	r2, r2, #4
 80095f6:	60da      	str	r2, [r3, #12]
      break;
 80095f8:	e00b      	b.n	8009612 <HAL_TIMEx_PWMN_Start_IT+0x104>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	68da      	ldr	r2, [r3, #12]
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	f042 0208 	orr.w	r2, r2, #8
 8009608:	60da      	str	r2, [r3, #12]
      break;
 800960a:	e002      	b.n	8009612 <HAL_TIMEx_PWMN_Start_IT+0x104>
    }

    default:
      status = HAL_ERROR;
 800960c:	2301      	movs	r3, #1
 800960e:	73fb      	strb	r3, [r7, #15]
      break;
 8009610:	bf00      	nop
  }

  if (status == HAL_OK)
 8009612:	7bfb      	ldrb	r3, [r7, #15]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d144      	bne.n	80096a2 <HAL_TIMEx_PWMN_Start_IT+0x194>
  {
    /* Enable the TIM Break interrupt */
    __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	68da      	ldr	r2, [r3, #12]
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009626:	60da      	str	r2, [r3, #12]

    /* Enable the complementary PWM output  */
    TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	2204      	movs	r2, #4
 800962e:	6839      	ldr	r1, [r7, #0]
 8009630:	4618      	mov	r0, r3
 8009632:	f000 ff50 	bl	800a4d6 <TIM_CCxNChannelCmd>

    /* Enable the Main Output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009644:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	4a18      	ldr	r2, [pc, #96]	; (80096ac <HAL_TIMEx_PWMN_Start_IT+0x19e>)
 800964c:	4293      	cmp	r3, r2
 800964e:	d00e      	beq.n	800966e <HAL_TIMEx_PWMN_Start_IT+0x160>
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009658:	d009      	beq.n	800966e <HAL_TIMEx_PWMN_Start_IT+0x160>
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	4a14      	ldr	r2, [pc, #80]	; (80096b0 <HAL_TIMEx_PWMN_Start_IT+0x1a2>)
 8009660:	4293      	cmp	r3, r2
 8009662:	d004      	beq.n	800966e <HAL_TIMEx_PWMN_Start_IT+0x160>
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	4a12      	ldr	r2, [pc, #72]	; (80096b4 <HAL_TIMEx_PWMN_Start_IT+0x1a6>)
 800966a:	4293      	cmp	r3, r2
 800966c:	d111      	bne.n	8009692 <HAL_TIMEx_PWMN_Start_IT+0x184>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	689b      	ldr	r3, [r3, #8]
 8009674:	f003 0307 	and.w	r3, r3, #7
 8009678:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800967a:	68bb      	ldr	r3, [r7, #8]
 800967c:	2b06      	cmp	r3, #6
 800967e:	d010      	beq.n	80096a2 <HAL_TIMEx_PWMN_Start_IT+0x194>
      {
        __HAL_TIM_ENABLE(htim);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	681a      	ldr	r2, [r3, #0]
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	f042 0201 	orr.w	r2, r2, #1
 800968e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009690:	e007      	b.n	80096a2 <HAL_TIMEx_PWMN_Start_IT+0x194>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	681a      	ldr	r2, [r3, #0]
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	f042 0201 	orr.w	r2, r2, #1
 80096a0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80096a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80096a4:	4618      	mov	r0, r3
 80096a6:	3710      	adds	r7, #16
 80096a8:	46bd      	mov	sp, r7
 80096aa:	bd80      	pop	{r7, pc}
 80096ac:	40012c00 	.word	0x40012c00
 80096b0:	40000400 	.word	0x40000400
 80096b4:	40000800 	.word	0x40000800

080096b8 <HAL_TIMEx_PWMN_Stop_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b084      	sub	sp, #16
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
 80096c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80096c2:	2300      	movs	r3, #0
 80096c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpccer;

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	2b08      	cmp	r3, #8
 80096ca:	d01b      	beq.n	8009704 <HAL_TIMEx_PWMN_Stop_IT+0x4c>
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	2b08      	cmp	r3, #8
 80096d0:	d821      	bhi.n	8009716 <HAL_TIMEx_PWMN_Stop_IT+0x5e>
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d003      	beq.n	80096e0 <HAL_TIMEx_PWMN_Stop_IT+0x28>
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	2b04      	cmp	r3, #4
 80096dc:	d009      	beq.n	80096f2 <HAL_TIMEx_PWMN_Stop_IT+0x3a>
 80096de:	e01a      	b.n	8009716 <HAL_TIMEx_PWMN_Stop_IT+0x5e>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	68da      	ldr	r2, [r3, #12]
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f022 0202 	bic.w	r2, r2, #2
 80096ee:	60da      	str	r2, [r3, #12]
      break;
 80096f0:	e014      	b.n	800971c <HAL_TIMEx_PWMN_Stop_IT+0x64>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	68da      	ldr	r2, [r3, #12]
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	f022 0204 	bic.w	r2, r2, #4
 8009700:	60da      	str	r2, [r3, #12]
      break;
 8009702:	e00b      	b.n	800971c <HAL_TIMEx_PWMN_Stop_IT+0x64>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	68da      	ldr	r2, [r3, #12]
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f022 0208 	bic.w	r2, r2, #8
 8009712:	60da      	str	r2, [r3, #12]
      break;
 8009714:	e002      	b.n	800971c <HAL_TIMEx_PWMN_Stop_IT+0x64>
    }

    default:
      status = HAL_ERROR;
 8009716:	2301      	movs	r3, #1
 8009718:	73fb      	strb	r3, [r7, #15]
      break;
 800971a:	bf00      	nop
  }

  if (status == HAL_OK)
 800971c:	7bfb      	ldrb	r3, [r7, #15]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d164      	bne.n	80097ec <HAL_TIMEx_PWMN_Stop_IT+0x134>
  {
    /* Disable the complementary PWM output  */
    TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	2200      	movs	r2, #0
 8009728:	6839      	ldr	r1, [r7, #0]
 800972a:	4618      	mov	r0, r3
 800972c:	f000 fed3 	bl	800a4d6 <TIM_CCxNChannelCmd>

    /* Disable the TIM Break interrupt (only if no more channel is active) */
    tmpccer = htim->Instance->CCER;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	6a1b      	ldr	r3, [r3, #32]
 8009736:	60bb      	str	r3, [r7, #8]
    if ((tmpccer & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == (uint32_t)RESET)
 8009738:	68ba      	ldr	r2, [r7, #8]
 800973a:	f240 4344 	movw	r3, #1092	; 0x444
 800973e:	4013      	ands	r3, r2
 8009740:	2b00      	cmp	r3, #0
 8009742:	d107      	bne.n	8009754 <HAL_TIMEx_PWMN_Stop_IT+0x9c>
    {
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	68da      	ldr	r2, [r3, #12]
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009752:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	6a1a      	ldr	r2, [r3, #32]
 800975a:	f241 1311 	movw	r3, #4369	; 0x1111
 800975e:	4013      	ands	r3, r2
 8009760:	2b00      	cmp	r3, #0
 8009762:	d10f      	bne.n	8009784 <HAL_TIMEx_PWMN_Stop_IT+0xcc>
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	6a1a      	ldr	r2, [r3, #32]
 800976a:	f240 4344 	movw	r3, #1092	; 0x444
 800976e:	4013      	ands	r3, r2
 8009770:	2b00      	cmp	r3, #0
 8009772:	d107      	bne.n	8009784 <HAL_TIMEx_PWMN_Stop_IT+0xcc>
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009782:	645a      	str	r2, [r3, #68]	; 0x44

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	6a1a      	ldr	r2, [r3, #32]
 800978a:	f241 1311 	movw	r3, #4369	; 0x1111
 800978e:	4013      	ands	r3, r2
 8009790:	2b00      	cmp	r3, #0
 8009792:	d10f      	bne.n	80097b4 <HAL_TIMEx_PWMN_Stop_IT+0xfc>
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	6a1a      	ldr	r2, [r3, #32]
 800979a:	f240 4344 	movw	r3, #1092	; 0x444
 800979e:	4013      	ands	r3, r2
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d107      	bne.n	80097b4 <HAL_TIMEx_PWMN_Stop_IT+0xfc>
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	681a      	ldr	r2, [r3, #0]
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f022 0201 	bic.w	r2, r2, #1
 80097b2:	601a      	str	r2, [r3, #0]

    /* Set the TIM complementary channel state */
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d104      	bne.n	80097c4 <HAL_TIMEx_PWMN_Stop_IT+0x10c>
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2201      	movs	r2, #1
 80097be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80097c2:	e013      	b.n	80097ec <HAL_TIMEx_PWMN_Stop_IT+0x134>
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	2b04      	cmp	r3, #4
 80097c8:	d104      	bne.n	80097d4 <HAL_TIMEx_PWMN_Stop_IT+0x11c>
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2201      	movs	r2, #1
 80097ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80097d2:	e00b      	b.n	80097ec <HAL_TIMEx_PWMN_Stop_IT+0x134>
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	2b08      	cmp	r3, #8
 80097d8:	d104      	bne.n	80097e4 <HAL_TIMEx_PWMN_Stop_IT+0x12c>
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	2201      	movs	r2, #1
 80097de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80097e2:	e003      	b.n	80097ec <HAL_TIMEx_PWMN_Stop_IT+0x134>
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2201      	movs	r2, #1
 80097e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

  /* Return function status */
  return status;
 80097ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80097ee:	4618      	mov	r0, r3
 80097f0:	3710      	adds	r7, #16
 80097f2:	46bd      	mov	sp, r7
 80097f4:	bd80      	pop	{r7, pc}

080097f6 <HAL_TIMEx_PWMN_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                           uint16_t Length)
{
 80097f6:	b580      	push	{r7, lr}
 80097f8:	b086      	sub	sp, #24
 80097fa:	af00      	add	r7, sp, #0
 80097fc:	60f8      	str	r0, [r7, #12]
 80097fe:	60b9      	str	r1, [r7, #8]
 8009800:	607a      	str	r2, [r7, #4]
 8009802:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8009804:	2300      	movs	r3, #0
 8009806:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Set the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8009808:	68bb      	ldr	r3, [r7, #8]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d109      	bne.n	8009822 <HAL_TIMEx_PWMN_Start_DMA+0x2c>
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009814:	b2db      	uxtb	r3, r3
 8009816:	2b02      	cmp	r3, #2
 8009818:	bf0c      	ite	eq
 800981a:	2301      	moveq	r3, #1
 800981c:	2300      	movne	r3, #0
 800981e:	b2db      	uxtb	r3, r3
 8009820:	e022      	b.n	8009868 <HAL_TIMEx_PWMN_Start_DMA+0x72>
 8009822:	68bb      	ldr	r3, [r7, #8]
 8009824:	2b04      	cmp	r3, #4
 8009826:	d109      	bne.n	800983c <HAL_TIMEx_PWMN_Start_DMA+0x46>
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800982e:	b2db      	uxtb	r3, r3
 8009830:	2b02      	cmp	r3, #2
 8009832:	bf0c      	ite	eq
 8009834:	2301      	moveq	r3, #1
 8009836:	2300      	movne	r3, #0
 8009838:	b2db      	uxtb	r3, r3
 800983a:	e015      	b.n	8009868 <HAL_TIMEx_PWMN_Start_DMA+0x72>
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	2b08      	cmp	r3, #8
 8009840:	d109      	bne.n	8009856 <HAL_TIMEx_PWMN_Start_DMA+0x60>
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009848:	b2db      	uxtb	r3, r3
 800984a:	2b02      	cmp	r3, #2
 800984c:	bf0c      	ite	eq
 800984e:	2301      	moveq	r3, #1
 8009850:	2300      	movne	r3, #0
 8009852:	b2db      	uxtb	r3, r3
 8009854:	e008      	b.n	8009868 <HAL_TIMEx_PWMN_Start_DMA+0x72>
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800985c:	b2db      	uxtb	r3, r3
 800985e:	2b02      	cmp	r3, #2
 8009860:	bf0c      	ite	eq
 8009862:	2301      	moveq	r3, #1
 8009864:	2300      	movne	r3, #0
 8009866:	b2db      	uxtb	r3, r3
 8009868:	2b00      	cmp	r3, #0
 800986a:	d001      	beq.n	8009870 <HAL_TIMEx_PWMN_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 800986c:	2302      	movs	r3, #2
 800986e:	e115      	b.n	8009a9c <HAL_TIMEx_PWMN_Start_DMA+0x2a6>
  }
  else if (TIM_CHANNEL_N_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8009870:	68bb      	ldr	r3, [r7, #8]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d109      	bne.n	800988a <HAL_TIMEx_PWMN_Start_DMA+0x94>
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800987c:	b2db      	uxtb	r3, r3
 800987e:	2b01      	cmp	r3, #1
 8009880:	bf0c      	ite	eq
 8009882:	2301      	moveq	r3, #1
 8009884:	2300      	movne	r3, #0
 8009886:	b2db      	uxtb	r3, r3
 8009888:	e022      	b.n	80098d0 <HAL_TIMEx_PWMN_Start_DMA+0xda>
 800988a:	68bb      	ldr	r3, [r7, #8]
 800988c:	2b04      	cmp	r3, #4
 800988e:	d109      	bne.n	80098a4 <HAL_TIMEx_PWMN_Start_DMA+0xae>
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009896:	b2db      	uxtb	r3, r3
 8009898:	2b01      	cmp	r3, #1
 800989a:	bf0c      	ite	eq
 800989c:	2301      	moveq	r3, #1
 800989e:	2300      	movne	r3, #0
 80098a0:	b2db      	uxtb	r3, r3
 80098a2:	e015      	b.n	80098d0 <HAL_TIMEx_PWMN_Start_DMA+0xda>
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	2b08      	cmp	r3, #8
 80098a8:	d109      	bne.n	80098be <HAL_TIMEx_PWMN_Start_DMA+0xc8>
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80098b0:	b2db      	uxtb	r3, r3
 80098b2:	2b01      	cmp	r3, #1
 80098b4:	bf0c      	ite	eq
 80098b6:	2301      	moveq	r3, #1
 80098b8:	2300      	movne	r3, #0
 80098ba:	b2db      	uxtb	r3, r3
 80098bc:	e008      	b.n	80098d0 <HAL_TIMEx_PWMN_Start_DMA+0xda>
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80098c4:	b2db      	uxtb	r3, r3
 80098c6:	2b01      	cmp	r3, #1
 80098c8:	bf0c      	ite	eq
 80098ca:	2301      	moveq	r3, #1
 80098cc:	2300      	movne	r3, #0
 80098ce:	b2db      	uxtb	r3, r3
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d024      	beq.n	800991e <HAL_TIMEx_PWMN_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d002      	beq.n	80098e0 <HAL_TIMEx_PWMN_Start_DMA+0xea>
 80098da:	887b      	ldrh	r3, [r7, #2]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d101      	bne.n	80098e4 <HAL_TIMEx_PWMN_Start_DMA+0xee>
    {
      return HAL_ERROR;
 80098e0:	2301      	movs	r3, #1
 80098e2:	e0db      	b.n	8009a9c <HAL_TIMEx_PWMN_Start_DMA+0x2a6>
    }
    else
    {
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80098e4:	68bb      	ldr	r3, [r7, #8]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d104      	bne.n	80098f4 <HAL_TIMEx_PWMN_Start_DMA+0xfe>
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	2202      	movs	r2, #2
 80098ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80098f2:	e016      	b.n	8009922 <HAL_TIMEx_PWMN_Start_DMA+0x12c>
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	2b04      	cmp	r3, #4
 80098f8:	d104      	bne.n	8009904 <HAL_TIMEx_PWMN_Start_DMA+0x10e>
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	2202      	movs	r2, #2
 80098fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009902:	e00e      	b.n	8009922 <HAL_TIMEx_PWMN_Start_DMA+0x12c>
 8009904:	68bb      	ldr	r3, [r7, #8]
 8009906:	2b08      	cmp	r3, #8
 8009908:	d104      	bne.n	8009914 <HAL_TIMEx_PWMN_Start_DMA+0x11e>
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	2202      	movs	r2, #2
 800990e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009912:	e006      	b.n	8009922 <HAL_TIMEx_PWMN_Start_DMA+0x12c>
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	2202      	movs	r2, #2
 8009918:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800991c:	e001      	b.n	8009922 <HAL_TIMEx_PWMN_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 800991e:	2301      	movs	r3, #1
 8009920:	e0bc      	b.n	8009a9c <HAL_TIMEx_PWMN_Start_DMA+0x2a6>
  }

  switch (Channel)
 8009922:	68bb      	ldr	r3, [r7, #8]
 8009924:	2b08      	cmp	r3, #8
 8009926:	d051      	beq.n	80099cc <HAL_TIMEx_PWMN_Start_DMA+0x1d6>
 8009928:	68bb      	ldr	r3, [r7, #8]
 800992a:	2b08      	cmp	r3, #8
 800992c:	d872      	bhi.n	8009a14 <HAL_TIMEx_PWMN_Start_DMA+0x21e>
 800992e:	68bb      	ldr	r3, [r7, #8]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d003      	beq.n	800993c <HAL_TIMEx_PWMN_Start_DMA+0x146>
 8009934:	68bb      	ldr	r3, [r7, #8]
 8009936:	2b04      	cmp	r3, #4
 8009938:	d024      	beq.n	8009984 <HAL_TIMEx_PWMN_Start_DMA+0x18e>
 800993a:	e06b      	b.n	8009a14 <HAL_TIMEx_PWMN_Start_DMA+0x21e>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseNCplt;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009940:	4a58      	ldr	r2, [pc, #352]	; (8009aa4 <HAL_TIMEx_PWMN_Start_DMA+0x2ae>)
 8009942:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009948:	4a57      	ldr	r2, [pc, #348]	; (8009aa8 <HAL_TIMEx_PWMN_Start_DMA+0x2b2>)
 800994a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAErrorCCxN ;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009950:	4a56      	ldr	r2, [pc, #344]	; (8009aac <HAL_TIMEx_PWMN_Start_DMA+0x2b6>)
 8009952:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8009958:	6879      	ldr	r1, [r7, #4]
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	3334      	adds	r3, #52	; 0x34
 8009960:	461a      	mov	r2, r3
 8009962:	887b      	ldrh	r3, [r7, #2]
 8009964:	f7f7 fb81 	bl	800106a <HAL_DMA_Start_IT>
 8009968:	4603      	mov	r3, r0
 800996a:	2b00      	cmp	r3, #0
 800996c:	d001      	beq.n	8009972 <HAL_TIMEx_PWMN_Start_DMA+0x17c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800996e:	2301      	movs	r3, #1
 8009970:	e094      	b.n	8009a9c <HAL_TIMEx_PWMN_Start_DMA+0x2a6>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	68da      	ldr	r2, [r3, #12]
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009980:	60da      	str	r2, [r3, #12]
      break;
 8009982:	e04a      	b.n	8009a1a <HAL_TIMEx_PWMN_Start_DMA+0x224>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseNCplt;
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009988:	4a46      	ldr	r2, [pc, #280]	; (8009aa4 <HAL_TIMEx_PWMN_Start_DMA+0x2ae>)
 800998a:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009990:	4a45      	ldr	r2, [pc, #276]	; (8009aa8 <HAL_TIMEx_PWMN_Start_DMA+0x2b2>)
 8009992:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAErrorCCxN ;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009998:	4a44      	ldr	r2, [pc, #272]	; (8009aac <HAL_TIMEx_PWMN_Start_DMA+0x2b6>)
 800999a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80099a0:	6879      	ldr	r1, [r7, #4]
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	3338      	adds	r3, #56	; 0x38
 80099a8:	461a      	mov	r2, r3
 80099aa:	887b      	ldrh	r3, [r7, #2]
 80099ac:	f7f7 fb5d 	bl	800106a <HAL_DMA_Start_IT>
 80099b0:	4603      	mov	r3, r0
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d001      	beq.n	80099ba <HAL_TIMEx_PWMN_Start_DMA+0x1c4>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80099b6:	2301      	movs	r3, #1
 80099b8:	e070      	b.n	8009a9c <HAL_TIMEx_PWMN_Start_DMA+0x2a6>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	68da      	ldr	r2, [r3, #12]
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80099c8:	60da      	str	r2, [r3, #12]
      break;
 80099ca:	e026      	b.n	8009a1a <HAL_TIMEx_PWMN_Start_DMA+0x224>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseNCplt;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099d0:	4a34      	ldr	r2, [pc, #208]	; (8009aa4 <HAL_TIMEx_PWMN_Start_DMA+0x2ae>)
 80099d2:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099d8:	4a33      	ldr	r2, [pc, #204]	; (8009aa8 <HAL_TIMEx_PWMN_Start_DMA+0x2b2>)
 80099da:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAErrorCCxN ;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099e0:	4a32      	ldr	r2, [pc, #200]	; (8009aac <HAL_TIMEx_PWMN_Start_DMA+0x2b6>)
 80099e2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80099e8:	6879      	ldr	r1, [r7, #4]
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	333c      	adds	r3, #60	; 0x3c
 80099f0:	461a      	mov	r2, r3
 80099f2:	887b      	ldrh	r3, [r7, #2]
 80099f4:	f7f7 fb39 	bl	800106a <HAL_DMA_Start_IT>
 80099f8:	4603      	mov	r3, r0
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d001      	beq.n	8009a02 <HAL_TIMEx_PWMN_Start_DMA+0x20c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80099fe:	2301      	movs	r3, #1
 8009a00:	e04c      	b.n	8009a9c <HAL_TIMEx_PWMN_Start_DMA+0x2a6>
      }
      /* Enable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	68da      	ldr	r2, [r3, #12]
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009a10:	60da      	str	r2, [r3, #12]
      break;
 8009a12:	e002      	b.n	8009a1a <HAL_TIMEx_PWMN_Start_DMA+0x224>
    }

    default:
      status = HAL_ERROR;
 8009a14:	2301      	movs	r3, #1
 8009a16:	75fb      	strb	r3, [r7, #23]
      break;
 8009a18:	bf00      	nop
  }

  if (status == HAL_OK)
 8009a1a:	7dfb      	ldrb	r3, [r7, #23]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d13c      	bne.n	8009a9a <HAL_TIMEx_PWMN_Start_DMA+0x2a4>
  {
    /* Enable the complementary PWM output  */
    TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	2204      	movs	r2, #4
 8009a26:	68b9      	ldr	r1, [r7, #8]
 8009a28:	4618      	mov	r0, r3
 8009a2a:	f000 fd54 	bl	800a4d6 <TIM_CCxNChannelCmd>

    /* Enable the Main Output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009a3c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	4a1b      	ldr	r2, [pc, #108]	; (8009ab0 <HAL_TIMEx_PWMN_Start_DMA+0x2ba>)
 8009a44:	4293      	cmp	r3, r2
 8009a46:	d00e      	beq.n	8009a66 <HAL_TIMEx_PWMN_Start_DMA+0x270>
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a50:	d009      	beq.n	8009a66 <HAL_TIMEx_PWMN_Start_DMA+0x270>
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	4a17      	ldr	r2, [pc, #92]	; (8009ab4 <HAL_TIMEx_PWMN_Start_DMA+0x2be>)
 8009a58:	4293      	cmp	r3, r2
 8009a5a:	d004      	beq.n	8009a66 <HAL_TIMEx_PWMN_Start_DMA+0x270>
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	4a15      	ldr	r2, [pc, #84]	; (8009ab8 <HAL_TIMEx_PWMN_Start_DMA+0x2c2>)
 8009a62:	4293      	cmp	r3, r2
 8009a64:	d111      	bne.n	8009a8a <HAL_TIMEx_PWMN_Start_DMA+0x294>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	689b      	ldr	r3, [r3, #8]
 8009a6c:	f003 0307 	and.w	r3, r3, #7
 8009a70:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a72:	693b      	ldr	r3, [r7, #16]
 8009a74:	2b06      	cmp	r3, #6
 8009a76:	d010      	beq.n	8009a9a <HAL_TIMEx_PWMN_Start_DMA+0x2a4>
      {
        __HAL_TIM_ENABLE(htim);
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	681a      	ldr	r2, [r3, #0]
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	f042 0201 	orr.w	r2, r2, #1
 8009a86:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a88:	e007      	b.n	8009a9a <HAL_TIMEx_PWMN_Start_DMA+0x2a4>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	681a      	ldr	r2, [r3, #0]
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	f042 0201 	orr.w	r2, r2, #1
 8009a98:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8009a9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	3718      	adds	r7, #24
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	bd80      	pop	{r7, pc}
 8009aa4:	0800a3c1 	.word	0x0800a3c1
 8009aa8:	08007915 	.word	0x08007915
 8009aac:	0800a469 	.word	0x0800a469
 8009ab0:	40012c00 	.word	0x40012c00
 8009ab4:	40000400 	.word	0x40000400
 8009ab8:	40000800 	.word	0x40000800

08009abc <HAL_TIMEx_PWMN_Stop_DMA>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b084      	sub	sp, #16
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
 8009ac4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	2b08      	cmp	r3, #8
 8009ace:	d025      	beq.n	8009b1c <HAL_TIMEx_PWMN_Stop_DMA+0x60>
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	2b08      	cmp	r3, #8
 8009ad4:	d830      	bhi.n	8009b38 <HAL_TIMEx_PWMN_Stop_DMA+0x7c>
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d003      	beq.n	8009ae4 <HAL_TIMEx_PWMN_Stop_DMA+0x28>
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	2b04      	cmp	r3, #4
 8009ae0:	d00e      	beq.n	8009b00 <HAL_TIMEx_PWMN_Stop_DMA+0x44>
 8009ae2:	e029      	b.n	8009b38 <HAL_TIMEx_PWMN_Stop_DMA+0x7c>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	68da      	ldr	r2, [r3, #12]
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009af2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009af8:	4618      	mov	r0, r3
 8009afa:	f7f7 fb51 	bl	80011a0 <HAL_DMA_Abort_IT>
      break;
 8009afe:	e01e      	b.n	8009b3e <HAL_TIMEx_PWMN_Stop_DMA+0x82>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	68da      	ldr	r2, [r3, #12]
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009b0e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b14:	4618      	mov	r0, r3
 8009b16:	f7f7 fb43 	bl	80011a0 <HAL_DMA_Abort_IT>
      break;
 8009b1a:	e010      	b.n	8009b3e <HAL_TIMEx_PWMN_Stop_DMA+0x82>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	68da      	ldr	r2, [r3, #12]
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009b2a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b30:	4618      	mov	r0, r3
 8009b32:	f7f7 fb35 	bl	80011a0 <HAL_DMA_Abort_IT>
      break;
 8009b36:	e002      	b.n	8009b3e <HAL_TIMEx_PWMN_Stop_DMA+0x82>
    }

    default:
      status = HAL_ERROR;
 8009b38:	2301      	movs	r3, #1
 8009b3a:	73fb      	strb	r3, [r7, #15]
      break;
 8009b3c:	bf00      	nop
  }

  if (status == HAL_OK)
 8009b3e:	7bfb      	ldrb	r3, [r7, #15]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d152      	bne.n	8009bea <HAL_TIMEx_PWMN_Stop_DMA+0x12e>
  {
    /* Disable the complementary PWM output */
    TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	2200      	movs	r2, #0
 8009b4a:	6839      	ldr	r1, [r7, #0]
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	f000 fcc2 	bl	800a4d6 <TIM_CCxNChannelCmd>

    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	6a1a      	ldr	r2, [r3, #32]
 8009b58:	f241 1311 	movw	r3, #4369	; 0x1111
 8009b5c:	4013      	ands	r3, r2
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d10f      	bne.n	8009b82 <HAL_TIMEx_PWMN_Stop_DMA+0xc6>
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	6a1a      	ldr	r2, [r3, #32]
 8009b68:	f240 4344 	movw	r3, #1092	; 0x444
 8009b6c:	4013      	ands	r3, r2
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d107      	bne.n	8009b82 <HAL_TIMEx_PWMN_Stop_DMA+0xc6>
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009b80:	645a      	str	r2, [r3, #68]	; 0x44

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	6a1a      	ldr	r2, [r3, #32]
 8009b88:	f241 1311 	movw	r3, #4369	; 0x1111
 8009b8c:	4013      	ands	r3, r2
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d10f      	bne.n	8009bb2 <HAL_TIMEx_PWMN_Stop_DMA+0xf6>
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	6a1a      	ldr	r2, [r3, #32]
 8009b98:	f240 4344 	movw	r3, #1092	; 0x444
 8009b9c:	4013      	ands	r3, r2
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d107      	bne.n	8009bb2 <HAL_TIMEx_PWMN_Stop_DMA+0xf6>
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	681a      	ldr	r2, [r3, #0]
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	f022 0201 	bic.w	r2, r2, #1
 8009bb0:	601a      	str	r2, [r3, #0]

    /* Set the TIM complementary channel state */
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d104      	bne.n	8009bc2 <HAL_TIMEx_PWMN_Stop_DMA+0x106>
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2201      	movs	r2, #1
 8009bbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009bc0:	e013      	b.n	8009bea <HAL_TIMEx_PWMN_Stop_DMA+0x12e>
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	2b04      	cmp	r3, #4
 8009bc6:	d104      	bne.n	8009bd2 <HAL_TIMEx_PWMN_Stop_DMA+0x116>
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2201      	movs	r2, #1
 8009bcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009bd0:	e00b      	b.n	8009bea <HAL_TIMEx_PWMN_Stop_DMA+0x12e>
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	2b08      	cmp	r3, #8
 8009bd6:	d104      	bne.n	8009be2 <HAL_TIMEx_PWMN_Stop_DMA+0x126>
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2201      	movs	r2, #1
 8009bdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009be0:	e003      	b.n	8009bea <HAL_TIMEx_PWMN_Stop_DMA+0x12e>
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2201      	movs	r2, #1
 8009be6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

  /* Return function status */
  return status;
 8009bea:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bec:	4618      	mov	r0, r3
 8009bee:	3710      	adds	r7, #16
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	bd80      	pop	{r7, pc}

08009bf4 <HAL_TIMEx_OnePulseN_Start>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Start(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b084      	sub	sp, #16
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
 8009bfc:	6039      	str	r1, [r7, #0]
  uint32_t input_channel = (OutputChannel == TIM_CHANNEL_1) ? TIM_CHANNEL_2 : TIM_CHANNEL_1;
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d101      	bne.n	8009c08 <HAL_TIMEx_OnePulseN_Start+0x14>
 8009c04:	2304      	movs	r3, #4
 8009c06:	e000      	b.n	8009c0a <HAL_TIMEx_OnePulseN_Start+0x16>
 8009c08:	2300      	movs	r3, #0
 8009c0a:	60fb      	str	r3, [r7, #12]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009c12:	72fb      	strb	r3, [r7, #11]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009c1a:	72bb      	strb	r3, [r7, #10]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009c22:	727b      	strb	r3, [r7, #9]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009c2a:	723b      	strb	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, OutputChannel));

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009c2c:	7afb      	ldrb	r3, [r7, #11]
 8009c2e:	2b01      	cmp	r3, #1
 8009c30:	d108      	bne.n	8009c44 <HAL_TIMEx_OnePulseN_Start+0x50>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009c32:	7abb      	ldrb	r3, [r7, #10]
 8009c34:	2b01      	cmp	r3, #1
 8009c36:	d105      	bne.n	8009c44 <HAL_TIMEx_OnePulseN_Start+0x50>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009c38:	7a7b      	ldrb	r3, [r7, #9]
 8009c3a:	2b01      	cmp	r3, #1
 8009c3c:	d102      	bne.n	8009c44 <HAL_TIMEx_OnePulseN_Start+0x50>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009c3e:	7a3b      	ldrb	r3, [r7, #8]
 8009c40:	2b01      	cmp	r3, #1
 8009c42:	d001      	beq.n	8009c48 <HAL_TIMEx_OnePulseN_Start+0x54>
  {
    return HAL_ERROR;
 8009c44:	2301      	movs	r3, #1
 8009c46:	e026      	b.n	8009c96 <HAL_TIMEx_OnePulseN_Start+0xa2>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2202      	movs	r2, #2
 8009c4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2202      	movs	r2, #2
 8009c54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2202      	movs	r2, #2
 8009c5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	2202      	movs	r2, #2
 8009c64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the complementary One Pulse output channel and the Input Capture channel */
  TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_ENABLE);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	2204      	movs	r2, #4
 8009c6e:	6839      	ldr	r1, [r7, #0]
 8009c70:	4618      	mov	r0, r3
 8009c72:	f000 fc30 	bl	800a4d6 <TIM_CCxNChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, input_channel, TIM_CCx_ENABLE);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	2201      	movs	r2, #1
 8009c7c:	68f9      	ldr	r1, [r7, #12]
 8009c7e:	4618      	mov	r0, r3
 8009c80:	f7fe fb7d 	bl	800837e <TIM_CCxChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009c92:	645a      	str	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 8009c94:	2300      	movs	r3, #0
}
 8009c96:	4618      	mov	r0, r3
 8009c98:	3710      	adds	r7, #16
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	bd80      	pop	{r7, pc}

08009c9e <HAL_TIMEx_OnePulseN_Stop>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Stop(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8009c9e:	b580      	push	{r7, lr}
 8009ca0:	b084      	sub	sp, #16
 8009ca2:	af00      	add	r7, sp, #0
 8009ca4:	6078      	str	r0, [r7, #4]
 8009ca6:	6039      	str	r1, [r7, #0]
  uint32_t input_channel = (OutputChannel == TIM_CHANNEL_1) ? TIM_CHANNEL_2 : TIM_CHANNEL_1;
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d101      	bne.n	8009cb2 <HAL_TIMEx_OnePulseN_Stop+0x14>
 8009cae:	2304      	movs	r3, #4
 8009cb0:	e000      	b.n	8009cb4 <HAL_TIMEx_OnePulseN_Stop+0x16>
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, OutputChannel));

  /* Disable the complementary One Pulse output channel and the Input Capture channel */
  TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_DISABLE);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	2200      	movs	r2, #0
 8009cbc:	6839      	ldr	r1, [r7, #0]
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	f000 fc09 	bl	800a4d6 <TIM_CCxNChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, input_channel, TIM_CCx_DISABLE);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	2200      	movs	r2, #0
 8009cca:	68f9      	ldr	r1, [r7, #12]
 8009ccc:	4618      	mov	r0, r3
 8009cce:	f7fe fb56 	bl	800837e <TIM_CCxChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	6a1a      	ldr	r2, [r3, #32]
 8009cd8:	f241 1311 	movw	r3, #4369	; 0x1111
 8009cdc:	4013      	ands	r3, r2
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d10f      	bne.n	8009d02 <HAL_TIMEx_OnePulseN_Stop+0x64>
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	6a1a      	ldr	r2, [r3, #32]
 8009ce8:	f240 4344 	movw	r3, #1092	; 0x444
 8009cec:	4013      	ands	r3, r2
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d107      	bne.n	8009d02 <HAL_TIMEx_OnePulseN_Stop+0x64>
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009d00:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	6a1a      	ldr	r2, [r3, #32]
 8009d08:	f241 1311 	movw	r3, #4369	; 0x1111
 8009d0c:	4013      	ands	r3, r2
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d10f      	bne.n	8009d32 <HAL_TIMEx_OnePulseN_Stop+0x94>
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	6a1a      	ldr	r2, [r3, #32]
 8009d18:	f240 4344 	movw	r3, #1092	; 0x444
 8009d1c:	4013      	ands	r3, r2
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d107      	bne.n	8009d32 <HAL_TIMEx_OnePulseN_Stop+0x94>
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	681a      	ldr	r2, [r3, #0]
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	f022 0201 	bic.w	r2, r2, #1
 8009d30:	601a      	str	r2, [r3, #0]

  /* Set the TIM  channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	2201      	movs	r2, #1
 8009d36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	2201      	movs	r2, #1
 8009d3e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2201      	movs	r2, #1
 8009d46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2201      	movs	r2, #1
 8009d4e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8009d52:	2300      	movs	r3, #0
}
 8009d54:	4618      	mov	r0, r3
 8009d56:	3710      	adds	r7, #16
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	bd80      	pop	{r7, pc}

08009d5c <HAL_TIMEx_OnePulseN_Start_IT>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b084      	sub	sp, #16
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
 8009d64:	6039      	str	r1, [r7, #0]
  uint32_t input_channel = (OutputChannel == TIM_CHANNEL_1) ? TIM_CHANNEL_2 : TIM_CHANNEL_1;
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d101      	bne.n	8009d70 <HAL_TIMEx_OnePulseN_Start_IT+0x14>
 8009d6c:	2304      	movs	r3, #4
 8009d6e:	e000      	b.n	8009d72 <HAL_TIMEx_OnePulseN_Start_IT+0x16>
 8009d70:	2300      	movs	r3, #0
 8009d72:	60fb      	str	r3, [r7, #12]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009d7a:	72fb      	strb	r3, [r7, #11]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009d82:	72bb      	strb	r3, [r7, #10]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009d8a:	727b      	strb	r3, [r7, #9]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009d92:	723b      	strb	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, OutputChannel));

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009d94:	7afb      	ldrb	r3, [r7, #11]
 8009d96:	2b01      	cmp	r3, #1
 8009d98:	d108      	bne.n	8009dac <HAL_TIMEx_OnePulseN_Start_IT+0x50>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009d9a:	7abb      	ldrb	r3, [r7, #10]
 8009d9c:	2b01      	cmp	r3, #1
 8009d9e:	d105      	bne.n	8009dac <HAL_TIMEx_OnePulseN_Start_IT+0x50>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009da0:	7a7b      	ldrb	r3, [r7, #9]
 8009da2:	2b01      	cmp	r3, #1
 8009da4:	d102      	bne.n	8009dac <HAL_TIMEx_OnePulseN_Start_IT+0x50>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009da6:	7a3b      	ldrb	r3, [r7, #8]
 8009da8:	2b01      	cmp	r3, #1
 8009daa:	d001      	beq.n	8009db0 <HAL_TIMEx_OnePulseN_Start_IT+0x54>
  {
    return HAL_ERROR;
 8009dac:	2301      	movs	r3, #1
 8009dae:	e036      	b.n	8009e1e <HAL_TIMEx_OnePulseN_Start_IT+0xc2>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2202      	movs	r2, #2
 8009db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2202      	movs	r2, #2
 8009dbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2202      	movs	r2, #2
 8009dc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2202      	movs	r2, #2
 8009dcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	68da      	ldr	r2, [r3, #12]
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	f042 0202 	orr.w	r2, r2, #2
 8009dde:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	68da      	ldr	r2, [r3, #12]
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	f042 0204 	orr.w	r2, r2, #4
 8009dee:	60da      	str	r2, [r3, #12]

  /* Enable the complementary One Pulse output channel and the Input Capture channel */
  TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_ENABLE);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	2204      	movs	r2, #4
 8009df6:	6839      	ldr	r1, [r7, #0]
 8009df8:	4618      	mov	r0, r3
 8009dfa:	f000 fb6c 	bl	800a4d6 <TIM_CCxNChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, input_channel, TIM_CCx_ENABLE);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	2201      	movs	r2, #1
 8009e04:	68f9      	ldr	r1, [r7, #12]
 8009e06:	4618      	mov	r0, r3
 8009e08:	f7fe fab9 	bl	800837e <TIM_CCxChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009e1a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 8009e1c:	2300      	movs	r3, #0
}
 8009e1e:	4618      	mov	r0, r3
 8009e20:	3710      	adds	r7, #16
 8009e22:	46bd      	mov	sp, r7
 8009e24:	bd80      	pop	{r7, pc}

08009e26 <HAL_TIMEx_OnePulseN_Stop_IT>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8009e26:	b580      	push	{r7, lr}
 8009e28:	b084      	sub	sp, #16
 8009e2a:	af00      	add	r7, sp, #0
 8009e2c:	6078      	str	r0, [r7, #4]
 8009e2e:	6039      	str	r1, [r7, #0]
  uint32_t input_channel = (OutputChannel == TIM_CHANNEL_1) ? TIM_CHANNEL_2 : TIM_CHANNEL_1;
 8009e30:	683b      	ldr	r3, [r7, #0]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d101      	bne.n	8009e3a <HAL_TIMEx_OnePulseN_Stop_IT+0x14>
 8009e36:	2304      	movs	r3, #4
 8009e38:	e000      	b.n	8009e3c <HAL_TIMEx_OnePulseN_Stop_IT+0x16>
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, OutputChannel));

  /* Disable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	68da      	ldr	r2, [r3, #12]
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	f022 0202 	bic.w	r2, r2, #2
 8009e4c:	60da      	str	r2, [r3, #12]

  /* Disable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	68da      	ldr	r2, [r3, #12]
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	f022 0204 	bic.w	r2, r2, #4
 8009e5c:	60da      	str	r2, [r3, #12]

  /* Disable the complementary One Pulse output channel and the Input Capture channel */
  TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_DISABLE);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	2200      	movs	r2, #0
 8009e64:	6839      	ldr	r1, [r7, #0]
 8009e66:	4618      	mov	r0, r3
 8009e68:	f000 fb35 	bl	800a4d6 <TIM_CCxNChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, input_channel, TIM_CCx_DISABLE);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	2200      	movs	r2, #0
 8009e72:	68f9      	ldr	r1, [r7, #12]
 8009e74:	4618      	mov	r0, r3
 8009e76:	f7fe fa82 	bl	800837e <TIM_CCxChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	6a1a      	ldr	r2, [r3, #32]
 8009e80:	f241 1311 	movw	r3, #4369	; 0x1111
 8009e84:	4013      	ands	r3, r2
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d10f      	bne.n	8009eaa <HAL_TIMEx_OnePulseN_Stop_IT+0x84>
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	6a1a      	ldr	r2, [r3, #32]
 8009e90:	f240 4344 	movw	r3, #1092	; 0x444
 8009e94:	4013      	ands	r3, r2
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d107      	bne.n	8009eaa <HAL_TIMEx_OnePulseN_Stop_IT+0x84>
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009ea8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	6a1a      	ldr	r2, [r3, #32]
 8009eb0:	f241 1311 	movw	r3, #4369	; 0x1111
 8009eb4:	4013      	ands	r3, r2
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d10f      	bne.n	8009eda <HAL_TIMEx_OnePulseN_Stop_IT+0xb4>
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	6a1a      	ldr	r2, [r3, #32]
 8009ec0:	f240 4344 	movw	r3, #1092	; 0x444
 8009ec4:	4013      	ands	r3, r2
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d107      	bne.n	8009eda <HAL_TIMEx_OnePulseN_Stop_IT+0xb4>
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	681a      	ldr	r2, [r3, #0]
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	f022 0201 	bic.w	r2, r2, #1
 8009ed8:	601a      	str	r2, [r3, #0]

  /* Set the TIM  channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2201      	movs	r2, #1
 8009ede:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2201      	movs	r2, #1
 8009ee6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	2201      	movs	r2, #1
 8009eee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	2201      	movs	r2, #1
 8009ef6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8009efa:	2300      	movs	r3, #0
}
 8009efc:	4618      	mov	r0, r3
 8009efe:	3710      	adds	r7, #16
 8009f00:	46bd      	mov	sp, r7
 8009f02:	bd80      	pop	{r7, pc}

08009f04 <HAL_TIMEx_ConfigCommutEvent>:
  *            @arg TIM_COMMUTATION_SOFTWARE:  Commutation source is set by software using the COMG bit
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigCommutEvent(TIM_HandleTypeDef *htim, uint32_t  InputTrigger,
                                              uint32_t  CommutationSource)
{
 8009f04:	b480      	push	{r7}
 8009f06:	b085      	sub	sp, #20
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	60f8      	str	r0, [r7, #12]
 8009f0c:	60b9      	str	r1, [r7, #8]
 8009f0e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_COMMUTATION_EVENT_INSTANCE(htim->Instance));
  assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION(InputTrigger));

  __HAL_LOCK(htim);
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f16:	2b01      	cmp	r3, #1
 8009f18:	d101      	bne.n	8009f1e <HAL_TIMEx_ConfigCommutEvent+0x1a>
 8009f1a:	2302      	movs	r3, #2
 8009f1c:	e04c      	b.n	8009fb8 <HAL_TIMEx_ConfigCommutEvent+0xb4>
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	2201      	movs	r2, #1
 8009f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
 8009f26:	68bb      	ldr	r3, [r7, #8]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d008      	beq.n	8009f3e <HAL_TIMEx_ConfigCommutEvent+0x3a>
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	2b10      	cmp	r3, #16
 8009f30:	d005      	beq.n	8009f3e <HAL_TIMEx_ConfigCommutEvent+0x3a>
 8009f32:	68bb      	ldr	r3, [r7, #8]
 8009f34:	2b20      	cmp	r3, #32
 8009f36:	d002      	beq.n	8009f3e <HAL_TIMEx_ConfigCommutEvent+0x3a>
      (InputTrigger == TIM_TS_ITR2) || (InputTrigger == TIM_TS_ITR3))
 8009f38:	68bb      	ldr	r3, [r7, #8]
 8009f3a:	2b30      	cmp	r3, #48	; 0x30
 8009f3c:	d10f      	bne.n	8009f5e <HAL_TIMEx_ConfigCommutEvent+0x5a>
  {
    /* Select the Input trigger */
    htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	689a      	ldr	r2, [r3, #8]
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009f4c:	609a      	str	r2, [r3, #8]
    htim->Instance->SMCR |= InputTrigger;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	6899      	ldr	r1, [r3, #8]
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	68ba      	ldr	r2, [r7, #8]
 8009f5a:	430a      	orrs	r2, r1
 8009f5c:	609a      	str	r2, [r3, #8]
  }

  /* Select the Capture Compare preload feature */
  htim->Instance->CR2 |= TIM_CR2_CCPC;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	685a      	ldr	r2, [r3, #4]
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	f042 0201 	orr.w	r2, r2, #1
 8009f6c:	605a      	str	r2, [r3, #4]
  /* Select the Commutation event source */
  htim->Instance->CR2 &= ~TIM_CR2_CCUS;
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	685a      	ldr	r2, [r3, #4]
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	f022 0204 	bic.w	r2, r2, #4
 8009f7c:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= CommutationSource;
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	6859      	ldr	r1, [r3, #4]
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	687a      	ldr	r2, [r7, #4]
 8009f8a:	430a      	orrs	r2, r1
 8009f8c:	605a      	str	r2, [r3, #4]

  /* Disable Commutation Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_COM);
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	68da      	ldr	r2, [r3, #12]
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	f022 0220 	bic.w	r2, r2, #32
 8009f9c:	60da      	str	r2, [r3, #12]

  /* Disable Commutation DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_COM);
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	68da      	ldr	r2, [r3, #12]
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009fac:	60da      	str	r2, [r3, #12]

  __HAL_UNLOCK(htim);
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009fb6:	2300      	movs	r3, #0
}
 8009fb8:	4618      	mov	r0, r3
 8009fba:	3714      	adds	r7, #20
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	bc80      	pop	{r7}
 8009fc0:	4770      	bx	lr

08009fc2 <HAL_TIMEx_ConfigCommutEvent_IT>:
  *            @arg TIM_COMMUTATION_SOFTWARE:  Commutation source is set by software using the COMG bit
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigCommutEvent_IT(TIM_HandleTypeDef *htim, uint32_t  InputTrigger,
                                                 uint32_t  CommutationSource)
{
 8009fc2:	b480      	push	{r7}
 8009fc4:	b085      	sub	sp, #20
 8009fc6:	af00      	add	r7, sp, #0
 8009fc8:	60f8      	str	r0, [r7, #12]
 8009fca:	60b9      	str	r1, [r7, #8]
 8009fcc:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_COMMUTATION_EVENT_INSTANCE(htim->Instance));
  assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION(InputTrigger));

  __HAL_LOCK(htim);
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009fd4:	2b01      	cmp	r3, #1
 8009fd6:	d101      	bne.n	8009fdc <HAL_TIMEx_ConfigCommutEvent_IT+0x1a>
 8009fd8:	2302      	movs	r3, #2
 8009fda:	e04c      	b.n	800a076 <HAL_TIMEx_ConfigCommutEvent_IT+0xb4>
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	2201      	movs	r2, #1
 8009fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
 8009fe4:	68bb      	ldr	r3, [r7, #8]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d008      	beq.n	8009ffc <HAL_TIMEx_ConfigCommutEvent_IT+0x3a>
 8009fea:	68bb      	ldr	r3, [r7, #8]
 8009fec:	2b10      	cmp	r3, #16
 8009fee:	d005      	beq.n	8009ffc <HAL_TIMEx_ConfigCommutEvent_IT+0x3a>
 8009ff0:	68bb      	ldr	r3, [r7, #8]
 8009ff2:	2b20      	cmp	r3, #32
 8009ff4:	d002      	beq.n	8009ffc <HAL_TIMEx_ConfigCommutEvent_IT+0x3a>
      (InputTrigger == TIM_TS_ITR2) || (InputTrigger == TIM_TS_ITR3))
 8009ff6:	68bb      	ldr	r3, [r7, #8]
 8009ff8:	2b30      	cmp	r3, #48	; 0x30
 8009ffa:	d10f      	bne.n	800a01c <HAL_TIMEx_ConfigCommutEvent_IT+0x5a>
  {
    /* Select the Input trigger */
    htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	689a      	ldr	r2, [r3, #8]
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800a00a:	609a      	str	r2, [r3, #8]
    htim->Instance->SMCR |= InputTrigger;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	6899      	ldr	r1, [r3, #8]
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	68ba      	ldr	r2, [r7, #8]
 800a018:	430a      	orrs	r2, r1
 800a01a:	609a      	str	r2, [r3, #8]
  }

  /* Select the Capture Compare preload feature */
  htim->Instance->CR2 |= TIM_CR2_CCPC;
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	685a      	ldr	r2, [r3, #4]
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	f042 0201 	orr.w	r2, r2, #1
 800a02a:	605a      	str	r2, [r3, #4]
  /* Select the Commutation event source */
  htim->Instance->CR2 &= ~TIM_CR2_CCUS;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	685a      	ldr	r2, [r3, #4]
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	f022 0204 	bic.w	r2, r2, #4
 800a03a:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= CommutationSource;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	6859      	ldr	r1, [r3, #4]
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	687a      	ldr	r2, [r7, #4]
 800a048:	430a      	orrs	r2, r1
 800a04a:	605a      	str	r2, [r3, #4]

  /* Disable Commutation DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_COM);
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	68da      	ldr	r2, [r3, #12]
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a05a:	60da      	str	r2, [r3, #12]

  /* Enable the Commutation Interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_COM);
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	68da      	ldr	r2, [r3, #12]
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	f042 0220 	orr.w	r2, r2, #32
 800a06a:	60da      	str	r2, [r3, #12]

  __HAL_UNLOCK(htim);
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	2200      	movs	r2, #0
 800a070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a074:	2300      	movs	r3, #0
}
 800a076:	4618      	mov	r0, r3
 800a078:	3714      	adds	r7, #20
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bc80      	pop	{r7}
 800a07e:	4770      	bx	lr

0800a080 <HAL_TIMEx_ConfigCommutEvent_DMA>:
  *            @arg TIM_COMMUTATION_SOFTWARE:  Commutation source is set by software using the COMG bit
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigCommutEvent_DMA(TIM_HandleTypeDef *htim, uint32_t  InputTrigger,
                                                  uint32_t  CommutationSource)
{
 800a080:	b480      	push	{r7}
 800a082:	b085      	sub	sp, #20
 800a084:	af00      	add	r7, sp, #0
 800a086:	60f8      	str	r0, [r7, #12]
 800a088:	60b9      	str	r1, [r7, #8]
 800a08a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_COMMUTATION_EVENT_INSTANCE(htim->Instance));
  assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION(InputTrigger));

  __HAL_LOCK(htim);
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a092:	2b01      	cmp	r3, #1
 800a094:	d101      	bne.n	800a09a <HAL_TIMEx_ConfigCommutEvent_DMA+0x1a>
 800a096:	2302      	movs	r3, #2
 800a098:	e058      	b.n	800a14c <HAL_TIMEx_ConfigCommutEvent_DMA+0xcc>
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	2201      	movs	r2, #1
 800a09e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
 800a0a2:	68bb      	ldr	r3, [r7, #8]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d008      	beq.n	800a0ba <HAL_TIMEx_ConfigCommutEvent_DMA+0x3a>
 800a0a8:	68bb      	ldr	r3, [r7, #8]
 800a0aa:	2b10      	cmp	r3, #16
 800a0ac:	d005      	beq.n	800a0ba <HAL_TIMEx_ConfigCommutEvent_DMA+0x3a>
 800a0ae:	68bb      	ldr	r3, [r7, #8]
 800a0b0:	2b20      	cmp	r3, #32
 800a0b2:	d002      	beq.n	800a0ba <HAL_TIMEx_ConfigCommutEvent_DMA+0x3a>
      (InputTrigger == TIM_TS_ITR2) || (InputTrigger == TIM_TS_ITR3))
 800a0b4:	68bb      	ldr	r3, [r7, #8]
 800a0b6:	2b30      	cmp	r3, #48	; 0x30
 800a0b8:	d10f      	bne.n	800a0da <HAL_TIMEx_ConfigCommutEvent_DMA+0x5a>
  {
    /* Select the Input trigger */
    htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	689a      	ldr	r2, [r3, #8]
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800a0c8:	609a      	str	r2, [r3, #8]
    htim->Instance->SMCR |= InputTrigger;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	6899      	ldr	r1, [r3, #8]
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	68ba      	ldr	r2, [r7, #8]
 800a0d6:	430a      	orrs	r2, r1
 800a0d8:	609a      	str	r2, [r3, #8]
  }

  /* Select the Capture Compare preload feature */
  htim->Instance->CR2 |= TIM_CR2_CCPC;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	685a      	ldr	r2, [r3, #4]
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	f042 0201 	orr.w	r2, r2, #1
 800a0e8:	605a      	str	r2, [r3, #4]
  /* Select the Commutation event source */
  htim->Instance->CR2 &= ~TIM_CR2_CCUS;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	685a      	ldr	r2, [r3, #4]
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	f022 0204 	bic.w	r2, r2, #4
 800a0f8:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= CommutationSource;
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	6859      	ldr	r1, [r3, #4]
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	687a      	ldr	r2, [r7, #4]
 800a106:	430a      	orrs	r2, r1
 800a108:	605a      	str	r2, [r3, #4]

  /* Enable the Commutation DMA Request */
  /* Set the DMA Commutation Callback */
  htim->hdma[TIM_DMA_ID_COMMUTATION]->XferCpltCallback = TIMEx_DMACommutationCplt;
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a10e:	4a12      	ldr	r2, [pc, #72]	; (800a158 <HAL_TIMEx_ConfigCommutEvent_DMA+0xd8>)
 800a110:	629a      	str	r2, [r3, #40]	; 0x28
  htim->hdma[TIM_DMA_ID_COMMUTATION]->XferHalfCpltCallback = TIMEx_DMACommutationHalfCplt;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a116:	4a11      	ldr	r2, [pc, #68]	; (800a15c <HAL_TIMEx_ConfigCommutEvent_DMA+0xdc>)
 800a118:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Set the DMA error callback */
  htim->hdma[TIM_DMA_ID_COMMUTATION]->XferErrorCallback = TIM_DMAError;
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a11e:	4a10      	ldr	r2, [pc, #64]	; (800a160 <HAL_TIMEx_ConfigCommutEvent_DMA+0xe0>)
 800a120:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable Commutation Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_COM);
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	68da      	ldr	r2, [r3, #12]
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	f022 0220 	bic.w	r2, r2, #32
 800a130:	60da      	str	r2, [r3, #12]

  /* Enable the Commutation DMA Request */
  __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_COM);
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	68da      	ldr	r2, [r3, #12]
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a140:	60da      	str	r2, [r3, #12]

  __HAL_UNLOCK(htim);
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	2200      	movs	r2, #0
 800a146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a14a:	2300      	movs	r3, #0
}
 800a14c:	4618      	mov	r0, r3
 800a14e:	3714      	adds	r7, #20
 800a150:	46bd      	mov	sp, r7
 800a152:	bc80      	pop	{r7}
 800a154:	4770      	bx	lr
 800a156:	bf00      	nop
 800a158:	0800a379 	.word	0x0800a379
 800a15c:	0800a39d 	.word	0x0800a39d
 800a160:	080077db 	.word	0x080077db

0800a164 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a164:	b480      	push	{r7}
 800a166:	b085      	sub	sp, #20
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
 800a16c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a174:	2b01      	cmp	r3, #1
 800a176:	d101      	bne.n	800a17c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a178:	2302      	movs	r3, #2
 800a17a:	e046      	b.n	800a20a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2201      	movs	r2, #1
 800a180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2202      	movs	r2, #2
 800a188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	685b      	ldr	r3, [r3, #4]
 800a192:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	689b      	ldr	r3, [r3, #8]
 800a19a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	68fa      	ldr	r2, [r7, #12]
 800a1aa:	4313      	orrs	r3, r2
 800a1ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	68fa      	ldr	r2, [r7, #12]
 800a1b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	4a16      	ldr	r2, [pc, #88]	; (800a214 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800a1bc:	4293      	cmp	r3, r2
 800a1be:	d00e      	beq.n	800a1de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1c8:	d009      	beq.n	800a1de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	4a12      	ldr	r2, [pc, #72]	; (800a218 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800a1d0:	4293      	cmp	r3, r2
 800a1d2:	d004      	beq.n	800a1de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	4a10      	ldr	r2, [pc, #64]	; (800a21c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800a1da:	4293      	cmp	r3, r2
 800a1dc:	d10c      	bne.n	800a1f8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a1de:	68bb      	ldr	r3, [r7, #8]
 800a1e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a1e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a1e6:	683b      	ldr	r3, [r7, #0]
 800a1e8:	685b      	ldr	r3, [r3, #4]
 800a1ea:	68ba      	ldr	r2, [r7, #8]
 800a1ec:	4313      	orrs	r3, r2
 800a1ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	68ba      	ldr	r2, [r7, #8]
 800a1f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	2201      	movs	r2, #1
 800a1fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2200      	movs	r2, #0
 800a204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a208:	2300      	movs	r3, #0
}
 800a20a:	4618      	mov	r0, r3
 800a20c:	3714      	adds	r7, #20
 800a20e:	46bd      	mov	sp, r7
 800a210:	bc80      	pop	{r7}
 800a212:	4770      	bx	lr
 800a214:	40012c00 	.word	0x40012c00
 800a218:	40000400 	.word	0x40000400
 800a21c:	40000800 	.word	0x40000800

0800a220 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a220:	b480      	push	{r7}
 800a222:	b085      	sub	sp, #20
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
 800a228:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a22a:	2300      	movs	r3, #0
 800a22c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a234:	2b01      	cmp	r3, #1
 800a236:	d101      	bne.n	800a23c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a238:	2302      	movs	r3, #2
 800a23a:	e03d      	b.n	800a2b8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2201      	movs	r2, #1
 800a240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	68db      	ldr	r3, [r3, #12]
 800a24e:	4313      	orrs	r3, r2
 800a250:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a258:	683b      	ldr	r3, [r7, #0]
 800a25a:	689b      	ldr	r3, [r3, #8]
 800a25c:	4313      	orrs	r3, r2
 800a25e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	685b      	ldr	r3, [r3, #4]
 800a26a:	4313      	orrs	r3, r2
 800a26c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	4313      	orrs	r3, r2
 800a27a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	691b      	ldr	r3, [r3, #16]
 800a286:	4313      	orrs	r3, r2
 800a288:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	695b      	ldr	r3, [r3, #20]
 800a294:	4313      	orrs	r3, r2
 800a296:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a29e:	683b      	ldr	r3, [r7, #0]
 800a2a0:	69db      	ldr	r3, [r3, #28]
 800a2a2:	4313      	orrs	r3, r2
 800a2a4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	68fa      	ldr	r2, [r7, #12]
 800a2ac:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a2b6:	2300      	movs	r3, #0
}
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	3714      	adds	r7, #20
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	bc80      	pop	{r7}
 800a2c0:	4770      	bx	lr

0800a2c2 <HAL_TIMEx_RemapConfig>:
  * @param  Remap specifies the TIM remapping source.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 800a2c2:	b480      	push	{r7}
 800a2c4:	b083      	sub	sp, #12
 800a2c6:	af00      	add	r7, sp, #0
 800a2c8:	6078      	str	r0, [r7, #4]
 800a2ca:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  UNUSED(Remap);

  return HAL_OK;
 800a2cc:	2300      	movs	r3, #0
}
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	370c      	adds	r7, #12
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	bc80      	pop	{r7}
 800a2d6:	4770      	bx	lr

0800a2d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a2d8:	b480      	push	{r7}
 800a2da:	b083      	sub	sp, #12
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a2e0:	bf00      	nop
 800a2e2:	370c      	adds	r7, #12
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	bc80      	pop	{r7}
 800a2e8:	4770      	bx	lr

0800a2ea <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a2ea:	b480      	push	{r7}
 800a2ec:	b083      	sub	sp, #12
 800a2ee:	af00      	add	r7, sp, #0
 800a2f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800a2f2:	bf00      	nop
 800a2f4:	370c      	adds	r7, #12
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	bc80      	pop	{r7}
 800a2fa:	4770      	bx	lr

0800a2fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a2fc:	b480      	push	{r7}
 800a2fe:	b083      	sub	sp, #12
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a304:	bf00      	nop
 800a306:	370c      	adds	r7, #12
 800a308:	46bd      	mov	sp, r7
 800a30a:	bc80      	pop	{r7}
 800a30c:	4770      	bx	lr

0800a30e <HAL_TIMEx_HallSensor_GetState>:
  * @brief  Return the TIM Hall Sensor interface handle state.
  * @param  htim TIM Hall Sensor handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIMEx_HallSensor_GetState(const TIM_HandleTypeDef *htim)
{
 800a30e:	b480      	push	{r7}
 800a310:	b083      	sub	sp, #12
 800a312:	af00      	add	r7, sp, #0
 800a314:	6078      	str	r0, [r7, #4]
  return htim->State;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a31c:	b2db      	uxtb	r3, r3
}
 800a31e:	4618      	mov	r0, r3
 800a320:	370c      	adds	r7, #12
 800a322:	46bd      	mov	sp, r7
 800a324:	bc80      	pop	{r7}
 800a326:	4770      	bx	lr

0800a328 <HAL_TIMEx_GetChannelNState>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2
  *            @arg TIM_CHANNEL_3: TIM Channel 3
  * @retval TIM Complementary channel state
  */
HAL_TIM_ChannelStateTypeDef HAL_TIMEx_GetChannelNState(const TIM_HandleTypeDef *htim,  uint32_t ChannelN)
{
 800a328:	b480      	push	{r7}
 800a32a:	b085      	sub	sp, #20
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
 800a330:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_state;

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, ChannelN));

  channel_state = TIM_CHANNEL_N_STATE_GET(htim, ChannelN);
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d104      	bne.n	800a342 <HAL_TIMEx_GetChannelNState+0x1a>
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a33e:	b2db      	uxtb	r3, r3
 800a340:	e013      	b.n	800a36a <HAL_TIMEx_GetChannelNState+0x42>
 800a342:	683b      	ldr	r3, [r7, #0]
 800a344:	2b04      	cmp	r3, #4
 800a346:	d104      	bne.n	800a352 <HAL_TIMEx_GetChannelNState+0x2a>
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a34e:	b2db      	uxtb	r3, r3
 800a350:	e00b      	b.n	800a36a <HAL_TIMEx_GetChannelNState+0x42>
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	2b08      	cmp	r3, #8
 800a356:	d104      	bne.n	800a362 <HAL_TIMEx_GetChannelNState+0x3a>
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a35e:	b2db      	uxtb	r3, r3
 800a360:	e003      	b.n	800a36a <HAL_TIMEx_GetChannelNState+0x42>
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a368:	b2db      	uxtb	r3, r3
 800a36a:	73fb      	strb	r3, [r7, #15]

  return channel_state;
 800a36c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a36e:	4618      	mov	r0, r3
 800a370:	3714      	adds	r7, #20
 800a372:	46bd      	mov	sp, r7
 800a374:	bc80      	pop	{r7}
 800a376:	4770      	bx	lr

0800a378 <TIMEx_DMACommutationCplt>:
  * @brief  TIM DMA Commutation callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIMEx_DMACommutationCplt(DMA_HandleTypeDef *hdma)
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b084      	sub	sp, #16
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a384:	60fb      	str	r3, [r7, #12]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	2201      	movs	r2, #1
 800a38a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->CommutationCallback(htim);
#else
  HAL_TIMEx_CommutCallback(htim);
 800a38e:	68f8      	ldr	r0, [r7, #12]
 800a390:	f7ff ffa2 	bl	800a2d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 800a394:	bf00      	nop
 800a396:	3710      	adds	r7, #16
 800a398:	46bd      	mov	sp, r7
 800a39a:	bd80      	pop	{r7, pc}

0800a39c <TIMEx_DMACommutationHalfCplt>:
  * @brief  TIM DMA Commutation half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIMEx_DMACommutationHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b084      	sub	sp, #16
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3a8:	60fb      	str	r3, [r7, #12]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	2201      	movs	r2, #1
 800a3ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->CommutationHalfCpltCallback(htim);
#else
  HAL_TIMEx_CommutHalfCpltCallback(htim);
 800a3b2:	68f8      	ldr	r0, [r7, #12]
 800a3b4:	f7ff ff99 	bl	800a2ea <HAL_TIMEx_CommutHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 800a3b8:	bf00      	nop
 800a3ba:	3710      	adds	r7, #16
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	bd80      	pop	{r7, pc}

0800a3c0 <TIM_DMADelayPulseNCplt>:
  * @brief  TIM DMA Delay Pulse complete callback (complementary channel).
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseNCplt(DMA_HandleTypeDef *hdma)
{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b084      	sub	sp, #16
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3cc:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3d2:	687a      	ldr	r2, [r7, #4]
 800a3d4:	429a      	cmp	r2, r3
 800a3d6:	d10b      	bne.n	800a3f0 <TIM_DMADelayPulseNCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	2201      	movs	r2, #1
 800a3dc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	699b      	ldr	r3, [r3, #24]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d136      	bne.n	800a454 <TIM_DMADelayPulseNCplt+0x94>
    {
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	2201      	movs	r2, #1
 800a3ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a3ee:	e031      	b.n	800a454 <TIM_DMADelayPulseNCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3f4:	687a      	ldr	r2, [r7, #4]
 800a3f6:	429a      	cmp	r2, r3
 800a3f8:	d10b      	bne.n	800a412 <TIM_DMADelayPulseNCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	2202      	movs	r2, #2
 800a3fe:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	699b      	ldr	r3, [r3, #24]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d125      	bne.n	800a454 <TIM_DMADelayPulseNCplt+0x94>
    {
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	2201      	movs	r2, #1
 800a40c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a410:	e020      	b.n	800a454 <TIM_DMADelayPulseNCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a416:	687a      	ldr	r2, [r7, #4]
 800a418:	429a      	cmp	r2, r3
 800a41a:	d10b      	bne.n	800a434 <TIM_DMADelayPulseNCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	2204      	movs	r2, #4
 800a420:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	699b      	ldr	r3, [r3, #24]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d114      	bne.n	800a454 <TIM_DMADelayPulseNCplt+0x94>
    {
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	2201      	movs	r2, #1
 800a42e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a432:	e00f      	b.n	800a454 <TIM_DMADelayPulseNCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a438:	687a      	ldr	r2, [r7, #4]
 800a43a:	429a      	cmp	r2, r3
 800a43c:	d10a      	bne.n	800a454 <TIM_DMADelayPulseNCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	2208      	movs	r2, #8
 800a442:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	699b      	ldr	r3, [r3, #24]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d103      	bne.n	800a454 <TIM_DMADelayPulseNCplt+0x94>
    {
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	2201      	movs	r2, #1
 800a450:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a454:	68f8      	ldr	r0, [r7, #12]
 800a456:	f7fd f905 	bl	8007664 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	2200      	movs	r2, #0
 800a45e:	771a      	strb	r2, [r3, #28]
}
 800a460:	bf00      	nop
 800a462:	3710      	adds	r7, #16
 800a464:	46bd      	mov	sp, r7
 800a466:	bd80      	pop	{r7, pc}

0800a468 <TIM_DMAErrorCCxN>:
  * @brief  TIM DMA error callback (complementary channel)
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMAErrorCCxN(DMA_HandleTypeDef *hdma)
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	b084      	sub	sp, #16
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a474:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a47a:	687a      	ldr	r2, [r7, #4]
 800a47c:	429a      	cmp	r2, r3
 800a47e:	d107      	bne.n	800a490 <TIM_DMAErrorCCxN+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	2201      	movs	r2, #1
 800a484:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	2201      	movs	r2, #1
 800a48a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a48e:	e018      	b.n	800a4c2 <TIM_DMAErrorCCxN+0x5a>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a494:	687a      	ldr	r2, [r7, #4]
 800a496:	429a      	cmp	r2, r3
 800a498:	d107      	bne.n	800a4aa <TIM_DMAErrorCCxN+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	2202      	movs	r2, #2
 800a49e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	2201      	movs	r2, #1
 800a4a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a4a8:	e00b      	b.n	800a4c2 <TIM_DMAErrorCCxN+0x5a>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4ae:	687a      	ldr	r2, [r7, #4]
 800a4b0:	429a      	cmp	r2, r3
 800a4b2:	d106      	bne.n	800a4c2 <TIM_DMAErrorCCxN+0x5a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	2204      	movs	r2, #4
 800a4b8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	2201      	movs	r2, #1
 800a4be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800a4c2:	68f8      	ldr	r0, [r7, #12]
 800a4c4:	f7fd f8f2 	bl	80076ac <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	771a      	strb	r2, [r3, #28]
}
 800a4ce:	bf00      	nop
 800a4d0:	3710      	adds	r7, #16
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	bd80      	pop	{r7, pc}

0800a4d6 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800a4d6:	b480      	push	{r7}
 800a4d8:	b087      	sub	sp, #28
 800a4da:	af00      	add	r7, sp, #0
 800a4dc:	60f8      	str	r0, [r7, #12]
 800a4de:	60b9      	str	r1, [r7, #8]
 800a4e0:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a4e2:	68bb      	ldr	r3, [r7, #8]
 800a4e4:	f003 031f 	and.w	r3, r3, #31
 800a4e8:	2204      	movs	r2, #4
 800a4ea:	fa02 f303 	lsl.w	r3, r2, r3
 800a4ee:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	6a1a      	ldr	r2, [r3, #32]
 800a4f4:	697b      	ldr	r3, [r7, #20]
 800a4f6:	43db      	mvns	r3, r3
 800a4f8:	401a      	ands	r2, r3
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	6a1a      	ldr	r2, [r3, #32]
 800a502:	68bb      	ldr	r3, [r7, #8]
 800a504:	f003 031f 	and.w	r3, r3, #31
 800a508:	6879      	ldr	r1, [r7, #4]
 800a50a:	fa01 f303 	lsl.w	r3, r1, r3
 800a50e:	431a      	orrs	r2, r3
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	621a      	str	r2, [r3, #32]
}
 800a514:	bf00      	nop
 800a516:	371c      	adds	r7, #28
 800a518:	46bd      	mov	sp, r7
 800a51a:	bc80      	pop	{r7}
 800a51c:	4770      	bx	lr
 800a51e:	bf00      	nop

0800a520 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800a520:	b480      	push	{r7}
 800a522:	b085      	sub	sp, #20
 800a524:	af00      	add	r7, sp, #0
 800a526:	4603      	mov	r3, r0
 800a528:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a52a:	2300      	movs	r3, #0
 800a52c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800a52e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a532:	2b84      	cmp	r3, #132	; 0x84
 800a534:	d005      	beq.n	800a542 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800a536:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	4413      	add	r3, r2
 800a53e:	3303      	adds	r3, #3
 800a540:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800a542:	68fb      	ldr	r3, [r7, #12]
}
 800a544:	4618      	mov	r0, r3
 800a546:	3714      	adds	r7, #20
 800a548:	46bd      	mov	sp, r7
 800a54a:	bc80      	pop	{r7}
 800a54c:	4770      	bx	lr

0800a54e <makeCmsisPriority>:

#if (INCLUDE_uxTaskPriorityGet == 1)
/* Convert from FreeRTOS priority number to CMSIS type osPriority */
static osPriority makeCmsisPriority (unsigned portBASE_TYPE fpriority)
{
 800a54e:	b480      	push	{r7}
 800a550:	b085      	sub	sp, #20
 800a552:	af00      	add	r7, sp, #0
 800a554:	6078      	str	r0, [r7, #4]
  osPriority priority = osPriorityError;
 800a556:	2384      	movs	r3, #132	; 0x84
 800a558:	81fb      	strh	r3, [r7, #14]
  
  if ((fpriority - tskIDLE_PRIORITY) <= (osPriorityRealtime - osPriorityIdle)) {
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	2b06      	cmp	r3, #6
 800a55e:	d804      	bhi.n	800a56a <makeCmsisPriority+0x1c>
    priority = (osPriority)((int)osPriorityIdle + (int)(fpriority - tskIDLE_PRIORITY));
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	b29b      	uxth	r3, r3
 800a564:	3b03      	subs	r3, #3
 800a566:	b29b      	uxth	r3, r3
 800a568:	81fb      	strh	r3, [r7, #14]
  }
  
  return priority;
 800a56a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800a56e:	4618      	mov	r0, r3
 800a570:	3714      	adds	r7, #20
 800a572:	46bd      	mov	sp, r7
 800a574:	bc80      	pop	{r7}
 800a576:	4770      	bx	lr

0800a578 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800a578:	b480      	push	{r7}
 800a57a:	b083      	sub	sp, #12
 800a57c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a57e:	f3ef 8305 	mrs	r3, IPSR
 800a582:	607b      	str	r3, [r7, #4]
  return(result);
 800a584:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800a586:	2b00      	cmp	r3, #0
 800a588:	bf14      	ite	ne
 800a58a:	2301      	movne	r3, #1
 800a58c:	2300      	moveq	r3, #0
 800a58e:	b2db      	uxtb	r3, r3
}
 800a590:	4618      	mov	r0, r3
 800a592:	370c      	adds	r7, #12
 800a594:	46bd      	mov	sp, r7
 800a596:	bc80      	pop	{r7}
 800a598:	4770      	bx	lr

0800a59a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800a59a:	b580      	push	{r7, lr}
 800a59c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800a59e:	f002 fedb 	bl	800d358 <vTaskStartScheduler>
  
  return osOK;
 800a5a2:	2300      	movs	r3, #0
}
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	bd80      	pop	{r7, pc}

0800a5a8 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800a5ac:	f003 fc28 	bl	800de00 <xTaskGetSchedulerState>
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	2b01      	cmp	r3, #1
 800a5b4:	d101      	bne.n	800a5ba <osKernelRunning+0x12>
    return 0;
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	e000      	b.n	800a5bc <osKernelRunning+0x14>
  else
    return 1;
 800a5ba:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 800a5bc:	4618      	mov	r0, r3
 800a5be:	bd80      	pop	{r7, pc}

0800a5c0 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800a5c4:	f7ff ffd8 	bl	800a578 <inHandlerMode>
 800a5c8:	4603      	mov	r3, r0
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d003      	beq.n	800a5d6 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800a5ce:	f002 fffd 	bl	800d5cc <xTaskGetTickCountFromISR>
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	e002      	b.n	800a5dc <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800a5d6:	f002 ffeb 	bl	800d5b0 <xTaskGetTickCount>
 800a5da:	4603      	mov	r3, r0
  }
}
 800a5dc:	4618      	mov	r0, r3
 800a5de:	bd80      	pop	{r7, pc}

0800a5e0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800a5e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a5e2:	b089      	sub	sp, #36	; 0x24
 800a5e4:	af04      	add	r7, sp, #16
 800a5e6:	6078      	str	r0, [r7, #4]
 800a5e8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	695b      	ldr	r3, [r3, #20]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d020      	beq.n	800a634 <osThreadCreate+0x54>
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	699b      	ldr	r3, [r3, #24]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d01c      	beq.n	800a634 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	685c      	ldr	r4, [r3, #4]
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	691e      	ldr	r6, [r3, #16]
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a60c:	4618      	mov	r0, r3
 800a60e:	f7ff ff87 	bl	800a520 <makeFreeRtosPriority>
 800a612:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	695b      	ldr	r3, [r3, #20]
 800a618:	687a      	ldr	r2, [r7, #4]
 800a61a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a61c:	9202      	str	r2, [sp, #8]
 800a61e:	9301      	str	r3, [sp, #4]
 800a620:	9100      	str	r1, [sp, #0]
 800a622:	683b      	ldr	r3, [r7, #0]
 800a624:	4632      	mov	r2, r6
 800a626:	4629      	mov	r1, r5
 800a628:	4620      	mov	r0, r4
 800a62a:	f002 f99f 	bl	800c96c <xTaskCreateStatic>
 800a62e:	4603      	mov	r3, r0
 800a630:	60fb      	str	r3, [r7, #12]
 800a632:	e01c      	b.n	800a66e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	685c      	ldr	r4, [r3, #4]
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a640:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a648:	4618      	mov	r0, r3
 800a64a:	f7ff ff69 	bl	800a520 <makeFreeRtosPriority>
 800a64e:	4602      	mov	r2, r0
 800a650:	f107 030c 	add.w	r3, r7, #12
 800a654:	9301      	str	r3, [sp, #4]
 800a656:	9200      	str	r2, [sp, #0]
 800a658:	683b      	ldr	r3, [r7, #0]
 800a65a:	4632      	mov	r2, r6
 800a65c:	4629      	mov	r1, r5
 800a65e:	4620      	mov	r0, r4
 800a660:	f002 f9e0 	bl	800ca24 <xTaskCreate>
 800a664:	4603      	mov	r3, r0
 800a666:	2b01      	cmp	r3, #1
 800a668:	d001      	beq.n	800a66e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800a66a:	2300      	movs	r3, #0
 800a66c:	e000      	b.n	800a670 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800a66e:	68fb      	ldr	r3, [r7, #12]
}
 800a670:	4618      	mov	r0, r3
 800a672:	3714      	adds	r7, #20
 800a674:	46bd      	mov	sp, r7
 800a676:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a678 <osThreadGetId>:
* @brief  Return the thread ID of the current running thread.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadGetId shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadGetId (void)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
  return xTaskGetCurrentTaskHandle();
 800a67c:	f003 fbb2 	bl	800dde4 <xTaskGetCurrentTaskHandle>
 800a680:	4603      	mov	r3, r0
#else
	return NULL;
#endif
}
 800a682:	4618      	mov	r0, r3
 800a684:	bd80      	pop	{r7, pc}

0800a686 <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 800a686:	b580      	push	{r7, lr}
 800a688:	b082      	sub	sp, #8
 800a68a:	af00      	add	r7, sp, #0
 800a68c:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 800a68e:	6878      	ldr	r0, [r7, #4]
 800a690:	f002 fb0e 	bl	800ccb0 <vTaskDelete>
  return osOK;
 800a694:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 800a696:	4618      	mov	r0, r3
 800a698:	3708      	adds	r7, #8
 800a69a:	46bd      	mov	sp, r7
 800a69c:	bd80      	pop	{r7, pc}

0800a69e <osThreadYield>:
* @brief  Pass control to next thread that is in state \b READY.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadYield shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadYield (void)
{
 800a69e:	b480      	push	{r7}
 800a6a0:	af00      	add	r7, sp, #0
  taskYIELD();
 800a6a2:	4b06      	ldr	r3, [pc, #24]	; (800a6bc <osThreadYield+0x1e>)
 800a6a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6a8:	601a      	str	r2, [r3, #0]
 800a6aa:	f3bf 8f4f 	dsb	sy
 800a6ae:	f3bf 8f6f 	isb	sy
  
  return osOK;
 800a6b2:	2300      	movs	r3, #0
}
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	bc80      	pop	{r7}
 800a6ba:	4770      	bx	lr
 800a6bc:	e000ed04 	.word	0xe000ed04

0800a6c0 <osThreadSetPriority>:
* @param   priority      new priority value for the thread function.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadSetPriority shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadSetPriority (osThreadId thread_id, osPriority priority)
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b082      	sub	sp, #8
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
 800a6c8:	460b      	mov	r3, r1
 800a6ca:	807b      	strh	r3, [r7, #2]
#if (INCLUDE_vTaskPrioritySet == 1)
  vTaskPrioritySet(thread_id, makeFreeRtosPriority(priority));
 800a6cc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	f7ff ff25 	bl	800a520 <makeFreeRtosPriority>
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	4619      	mov	r1, r3
 800a6da:	6878      	ldr	r0, [r7, #4]
 800a6dc:	f002 fbf2 	bl	800cec4 <vTaskPrioritySet>
  return osOK;
 800a6e0:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	3708      	adds	r7, #8
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	bd80      	pop	{r7, pc}

0800a6ea <osThreadGetPriority>:
* @param   thread_id     thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  current priority value of the thread function.
* @note   MUST REMAIN UNCHANGED: \b osThreadGetPriority shall be consistent in every CMSIS-RTOS.
*/
osPriority osThreadGetPriority (osThreadId thread_id)
{
 800a6ea:	b580      	push	{r7, lr}
 800a6ec:	b082      	sub	sp, #8
 800a6ee:	af00      	add	r7, sp, #0
 800a6f0:	6078      	str	r0, [r7, #4]
#if (INCLUDE_uxTaskPriorityGet == 1)
  if (inHandlerMode())
 800a6f2:	f7ff ff41 	bl	800a578 <inHandlerMode>
 800a6f6:	4603      	mov	r3, r0
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d008      	beq.n	800a70e <osThreadGetPriority+0x24>
  {
    return makeCmsisPriority(uxTaskPriorityGetFromISR(thread_id));  
 800a6fc:	6878      	ldr	r0, [r7, #4]
 800a6fe:	f002 fbb5 	bl	800ce6c <uxTaskPriorityGetFromISR>
 800a702:	4603      	mov	r3, r0
 800a704:	4618      	mov	r0, r3
 800a706:	f7ff ff22 	bl	800a54e <makeCmsisPriority>
 800a70a:	4603      	mov	r3, r0
 800a70c:	e007      	b.n	800a71e <osThreadGetPriority+0x34>
  }
  else
  {  
    return makeCmsisPriority(uxTaskPriorityGet(thread_id));
 800a70e:	6878      	ldr	r0, [r7, #4]
 800a710:	f002 fb92 	bl	800ce38 <uxTaskPriorityGet>
 800a714:	4603      	mov	r3, r0
 800a716:	4618      	mov	r0, r3
 800a718:	f7ff ff19 	bl	800a54e <makeCmsisPriority>
 800a71c:	4603      	mov	r3, r0
  }
#else
  return osPriorityError;
#endif
}
 800a71e:	4618      	mov	r0, r3
 800a720:	3708      	adds	r7, #8
 800a722:	46bd      	mov	sp, r7
 800a724:	bd80      	pop	{r7, pc}

0800a726 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800a726:	b580      	push	{r7, lr}
 800a728:	b084      	sub	sp, #16
 800a72a:	af00      	add	r7, sp, #0
 800a72c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d001      	beq.n	800a73c <osDelay+0x16>
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	e000      	b.n	800a73e <osDelay+0x18>
 800a73c:	2301      	movs	r3, #1
 800a73e:	4618      	mov	r0, r3
 800a740:	f002 fb46 	bl	800cdd0 <vTaskDelay>
  
  return osOK;
 800a744:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800a746:	4618      	mov	r0, r3
 800a748:	3710      	adds	r7, #16
 800a74a:	46bd      	mov	sp, r7
 800a74c:	bd80      	pop	{r7, pc}

0800a74e <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 800a74e:	b480      	push	{r7}
 800a750:	b085      	sub	sp, #20
 800a752:	af00      	add	r7, sp, #0
 800a754:	60f8      	str	r0, [r7, #12]
 800a756:	460b      	mov	r3, r1
 800a758:	607a      	str	r2, [r7, #4]
 800a75a:	72fb      	strb	r3, [r7, #11]
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer);
#endif

#else 
	return NULL;
 800a75c:	2300      	movs	r3, #0
#endif
}
 800a75e:	4618      	mov	r0, r3
 800a760:	3714      	adds	r7, #20
 800a762:	46bd      	mov	sp, r7
 800a764:	bc80      	pop	{r7}
 800a766:	4770      	bx	lr

0800a768 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 800a768:	b480      	push	{r7}
 800a76a:	b085      	sub	sp, #20
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
 800a770:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 800a772:	2300      	movs	r3, #0
 800a774:	60fb      	str	r3, [r7, #12]
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
      result = osErrorOS;
  }

#else 
  result = osErrorOS;
 800a776:	23ff      	movs	r3, #255	; 0xff
 800a778:	60fb      	str	r3, [r7, #12]
#endif
  return result;
 800a77a:	68fb      	ldr	r3, [r7, #12]
}
 800a77c:	4618      	mov	r0, r3
 800a77e:	3714      	adds	r7, #20
 800a780:	46bd      	mov	sp, r7
 800a782:	bc80      	pop	{r7}
 800a784:	4770      	bx	lr

0800a786 <osTimerStop>:
* @param  timer_id      timer ID obtained by \ref osTimerCreate
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osTimerStop shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStop (osTimerId timer_id)
{
 800a786:	b480      	push	{r7}
 800a788:	b085      	sub	sp, #20
 800a78a:	af00      	add	r7, sp, #0
 800a78c:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800a78e:	2300      	movs	r3, #0
 800a790:	60fb      	str	r3, [r7, #12]
    if (xTimerStop(timer_id, 0) != pdPASS) {
      result = osErrorOS;
    }
  }
#else 
  result = osErrorOS;
 800a792:	23ff      	movs	r3, #255	; 0xff
 800a794:	60fb      	str	r3, [r7, #12]
#endif 
  return result;
 800a796:	68fb      	ldr	r3, [r7, #12]
}
 800a798:	4618      	mov	r0, r3
 800a79a:	3714      	adds	r7, #20
 800a79c:	46bd      	mov	sp, r7
 800a79e:	bc80      	pop	{r7}
 800a7a0:	4770      	bx	lr

0800a7a2 <osTimerDelete>:
* @param  timer_id      timer ID obtained by \ref osTimerCreate
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osTimerDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerDelete (osTimerId timer_id)
{
 800a7a2:	b480      	push	{r7}
 800a7a4:	b085      	sub	sp, #20
 800a7a6:	af00      	add	r7, sp, #0
 800a7a8:	6078      	str	r0, [r7, #4]
osStatus result = osOK;
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	60fb      	str	r3, [r7, #12]
      result = osErrorOS;
    }
  } 
    
#else 
  result = osErrorOS;
 800a7ae:	23ff      	movs	r3, #255	; 0xff
 800a7b0:	60fb      	str	r3, [r7, #12]
#endif 
 
  return result;
 800a7b2:	68fb      	ldr	r3, [r7, #12]
}
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	3714      	adds	r7, #20
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	bc80      	pop	{r7}
 800a7bc:	4770      	bx	lr

0800a7be <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 800a7be:	b580      	push	{r7, lr}
 800a7c0:	b086      	sub	sp, #24
 800a7c2:	af02      	add	r7, sp, #8
 800a7c4:	6078      	str	r0, [r7, #4]
 800a7c6:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 800a7d0:	f7ff fed2 	bl	800a578 <inHandlerMode>
 800a7d4:	4603      	mov	r3, r0
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d01c      	beq.n	800a814 <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 800a7da:	6839      	ldr	r1, [r7, #0]
 800a7dc:	f107 0208 	add.w	r2, r7, #8
 800a7e0:	f107 030c 	add.w	r3, r7, #12
 800a7e4:	9300      	str	r3, [sp, #0]
 800a7e6:	4613      	mov	r3, r2
 800a7e8:	2201      	movs	r2, #1
 800a7ea:	6878      	ldr	r0, [r7, #4]
 800a7ec:	f003 fe54 	bl	800e498 <xTaskGenericNotifyFromISR>
 800a7f0:	4603      	mov	r3, r0
 800a7f2:	2b01      	cmp	r3, #1
 800a7f4:	d002      	beq.n	800a7fc <osSignalSet+0x3e>
      return 0x80000000;
 800a7f6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a7fa:	e019      	b.n	800a830 <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d015      	beq.n	800a82e <osSignalSet+0x70>
 800a802:	4b0d      	ldr	r3, [pc, #52]	; (800a838 <osSignalSet+0x7a>)
 800a804:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a808:	601a      	str	r2, [r3, #0]
 800a80a:	f3bf 8f4f 	dsb	sy
 800a80e:	f3bf 8f6f 	isb	sy
 800a812:	e00c      	b.n	800a82e <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 800a814:	6839      	ldr	r1, [r7, #0]
 800a816:	f107 0308 	add.w	r3, r7, #8
 800a81a:	2201      	movs	r2, #1
 800a81c:	6878      	ldr	r0, [r7, #4]
 800a81e:	f003 fd91 	bl	800e344 <xTaskGenericNotify>
 800a822:	4603      	mov	r3, r0
 800a824:	2b01      	cmp	r3, #1
 800a826:	d002      	beq.n	800a82e <osSignalSet+0x70>
    return 0x80000000;
 800a828:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a82c:	e000      	b.n	800a830 <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 800a82e:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 800a830:	4618      	mov	r0, r3
 800a832:	3710      	adds	r7, #16
 800a834:	46bd      	mov	sp, r7
 800a836:	bd80      	pop	{r7, pc}
 800a838:	e000ed04 	.word	0xe000ed04

0800a83c <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 800a83c:	b590      	push	{r4, r7, lr}
 800a83e:	b089      	sub	sp, #36	; 0x24
 800a840:	af00      	add	r7, sp, #0
 800a842:	60f8      	str	r0, [r7, #12]
 800a844:	60b9      	str	r1, [r7, #8]
 800a846:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 800a848:	2300      	movs	r3, #0
 800a84a:	617b      	str	r3, [r7, #20]
  ticks = 0;
 800a84c:	2300      	movs	r3, #0
 800a84e:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a856:	d103      	bne.n	800a860 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 800a858:	f04f 33ff 	mov.w	r3, #4294967295
 800a85c:	61fb      	str	r3, [r7, #28]
 800a85e:	e009      	b.n	800a874 <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d006      	beq.n	800a874 <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 800a86a:	69fb      	ldr	r3, [r7, #28]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d101      	bne.n	800a874 <osSignalWait+0x38>
      ticks = 1;
 800a870:	2301      	movs	r3, #1
 800a872:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 800a874:	f7ff fe80 	bl	800a578 <inHandlerMode>
 800a878:	4603      	mov	r3, r0
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d002      	beq.n	800a884 <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 800a87e:	2382      	movs	r3, #130	; 0x82
 800a880:	613b      	str	r3, [r7, #16]
 800a882:	e01b      	b.n	800a8bc <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 800a884:	68b9      	ldr	r1, [r7, #8]
 800a886:	f107 0310 	add.w	r3, r7, #16
 800a88a:	1d1a      	adds	r2, r3, #4
 800a88c:	69fb      	ldr	r3, [r7, #28]
 800a88e:	2000      	movs	r0, #0
 800a890:	f003 fcf8 	bl	800e284 <xTaskNotifyWait>
 800a894:	4603      	mov	r3, r0
 800a896:	2b01      	cmp	r3, #1
 800a898:	d008      	beq.n	800a8ac <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 800a89a:	69fb      	ldr	r3, [r7, #28]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d102      	bne.n	800a8a6 <osSignalWait+0x6a>
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	613b      	str	r3, [r7, #16]
 800a8a4:	e00a      	b.n	800a8bc <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 800a8a6:	2340      	movs	r3, #64	; 0x40
 800a8a8:	613b      	str	r3, [r7, #16]
 800a8aa:	e007      	b.n	800a8bc <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 800a8ac:	697b      	ldr	r3, [r7, #20]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	da02      	bge.n	800a8b8 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 800a8b2:	2386      	movs	r3, #134	; 0x86
 800a8b4:	613b      	str	r3, [r7, #16]
 800a8b6:	e001      	b.n	800a8bc <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 800a8b8:	2308      	movs	r3, #8
 800a8ba:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	461c      	mov	r4, r3
 800a8c0:	f107 0310 	add.w	r3, r7, #16
 800a8c4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a8c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800a8cc:	68f8      	ldr	r0, [r7, #12]
 800a8ce:	3724      	adds	r7, #36	; 0x24
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	bd90      	pop	{r4, r7, pc}

0800a8d4 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b082      	sub	sp, #8
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	685b      	ldr	r3, [r3, #4]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d007      	beq.n	800a8f4 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	685b      	ldr	r3, [r3, #4]
 800a8e8:	4619      	mov	r1, r3
 800a8ea:	2001      	movs	r0, #1
 800a8ec:	f000 ffe6 	bl	800b8bc <xQueueCreateMutexStatic>
 800a8f0:	4603      	mov	r3, r0
 800a8f2:	e003      	b.n	800a8fc <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800a8f4:	2001      	movs	r0, #1
 800a8f6:	f000 ffc9 	bl	800b88c <xQueueCreateMutex>
 800a8fa:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	3708      	adds	r7, #8
 800a900:	46bd      	mov	sp, r7
 800a902:	bd80      	pop	{r7, pc}

0800a904 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b084      	sub	sp, #16
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
 800a90c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800a90e:	2300      	movs	r3, #0
 800a910:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d101      	bne.n	800a91c <osMutexWait+0x18>
    return osErrorParameter;
 800a918:	2380      	movs	r3, #128	; 0x80
 800a91a:	e03a      	b.n	800a992 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800a91c:	2300      	movs	r3, #0
 800a91e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800a920:	683b      	ldr	r3, [r7, #0]
 800a922:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a926:	d103      	bne.n	800a930 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800a928:	f04f 33ff 	mov.w	r3, #4294967295
 800a92c:	60fb      	str	r3, [r7, #12]
 800a92e:	e009      	b.n	800a944 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800a930:	683b      	ldr	r3, [r7, #0]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d006      	beq.n	800a944 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d101      	bne.n	800a944 <osMutexWait+0x40>
      ticks = 1;
 800a940:	2301      	movs	r3, #1
 800a942:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800a944:	f7ff fe18 	bl	800a578 <inHandlerMode>
 800a948:	4603      	mov	r3, r0
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d017      	beq.n	800a97e <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800a94e:	f107 0308 	add.w	r3, r7, #8
 800a952:	461a      	mov	r2, r3
 800a954:	2100      	movs	r1, #0
 800a956:	6878      	ldr	r0, [r7, #4]
 800a958:	f001 fcbc 	bl	800c2d4 <xQueueReceiveFromISR>
 800a95c:	4603      	mov	r3, r0
 800a95e:	2b01      	cmp	r3, #1
 800a960:	d001      	beq.n	800a966 <osMutexWait+0x62>
      return osErrorOS;
 800a962:	23ff      	movs	r3, #255	; 0xff
 800a964:	e015      	b.n	800a992 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800a966:	68bb      	ldr	r3, [r7, #8]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d011      	beq.n	800a990 <osMutexWait+0x8c>
 800a96c:	4b0b      	ldr	r3, [pc, #44]	; (800a99c <osMutexWait+0x98>)
 800a96e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a972:	601a      	str	r2, [r3, #0]
 800a974:	f3bf 8f4f 	dsb	sy
 800a978:	f3bf 8f6f 	isb	sy
 800a97c:	e008      	b.n	800a990 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800a97e:	68f9      	ldr	r1, [r7, #12]
 800a980:	6878      	ldr	r0, [r7, #4]
 800a982:	f001 fab9 	bl	800bef8 <xQueueSemaphoreTake>
 800a986:	4603      	mov	r3, r0
 800a988:	2b01      	cmp	r3, #1
 800a98a:	d001      	beq.n	800a990 <osMutexWait+0x8c>
    return osErrorOS;
 800a98c:	23ff      	movs	r3, #255	; 0xff
 800a98e:	e000      	b.n	800a992 <osMutexWait+0x8e>
  }
  
  return osOK;
 800a990:	2300      	movs	r3, #0
}
 800a992:	4618      	mov	r0, r3
 800a994:	3710      	adds	r7, #16
 800a996:	46bd      	mov	sp, r7
 800a998:	bd80      	pop	{r7, pc}
 800a99a:	bf00      	nop
 800a99c:	e000ed04 	.word	0xe000ed04

0800a9a0 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b084      	sub	sp, #16
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800a9b0:	f7ff fde2 	bl	800a578 <inHandlerMode>
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d016      	beq.n	800a9e8 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800a9ba:	f107 0308 	add.w	r3, r7, #8
 800a9be:	4619      	mov	r1, r3
 800a9c0:	6878      	ldr	r0, [r7, #4]
 800a9c2:	f001 f92d 	bl	800bc20 <xQueueGiveFromISR>
 800a9c6:	4603      	mov	r3, r0
 800a9c8:	2b01      	cmp	r3, #1
 800a9ca:	d001      	beq.n	800a9d0 <osMutexRelease+0x30>
      return osErrorOS;
 800a9cc:	23ff      	movs	r3, #255	; 0xff
 800a9ce:	e017      	b.n	800aa00 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a9d0:	68bb      	ldr	r3, [r7, #8]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d013      	beq.n	800a9fe <osMutexRelease+0x5e>
 800a9d6:	4b0c      	ldr	r3, [pc, #48]	; (800aa08 <osMutexRelease+0x68>)
 800a9d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9dc:	601a      	str	r2, [r3, #0]
 800a9de:	f3bf 8f4f 	dsb	sy
 800a9e2:	f3bf 8f6f 	isb	sy
 800a9e6:	e00a      	b.n	800a9fe <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	2100      	movs	r1, #0
 800a9ee:	6878      	ldr	r0, [r7, #4]
 800a9f0:	f000 ff7f 	bl	800b8f2 <xQueueGenericSend>
 800a9f4:	4603      	mov	r3, r0
 800a9f6:	2b01      	cmp	r3, #1
 800a9f8:	d001      	beq.n	800a9fe <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800a9fa:	23ff      	movs	r3, #255	; 0xff
 800a9fc:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800a9fe:	68fb      	ldr	r3, [r7, #12]
}
 800aa00:	4618      	mov	r0, r3
 800aa02:	3710      	adds	r7, #16
 800aa04:	46bd      	mov	sp, r7
 800aa06:	bd80      	pop	{r7, pc}
 800aa08:	e000ed04 	.word	0xe000ed04

0800aa0c <osMutexDelete>:
* @param mutex_id  mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexDelete (osMutexId mutex_id)
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b082      	sub	sp, #8
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800aa14:	f7ff fdb0 	bl	800a578 <inHandlerMode>
 800aa18:	4603      	mov	r3, r0
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d001      	beq.n	800aa22 <osMutexDelete+0x16>
    return osErrorISR;
 800aa1e:	2382      	movs	r3, #130	; 0x82
 800aa20:	e003      	b.n	800aa2a <osMutexDelete+0x1e>
  }

  vQueueDelete(mutex_id);
 800aa22:	6878      	ldr	r0, [r7, #4]
 800aa24:	f001 fd9b 	bl	800c55e <vQueueDelete>

  return osOK;
 800aa28:	2300      	movs	r3, #0
}
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	3708      	adds	r7, #8
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	bd80      	pop	{r7, pc}

0800aa32 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800aa32:	b580      	push	{r7, lr}
 800aa34:	b086      	sub	sp, #24
 800aa36:	af02      	add	r7, sp, #8
 800aa38:	6078      	str	r0, [r7, #4]
 800aa3a:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	685b      	ldr	r3, [r3, #4]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d00f      	beq.n	800aa64 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800aa44:	683b      	ldr	r3, [r7, #0]
 800aa46:	2b01      	cmp	r3, #1
 800aa48:	d10a      	bne.n	800aa60 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	685b      	ldr	r3, [r3, #4]
 800aa4e:	2203      	movs	r2, #3
 800aa50:	9200      	str	r2, [sp, #0]
 800aa52:	2200      	movs	r2, #0
 800aa54:	2100      	movs	r1, #0
 800aa56:	2001      	movs	r0, #1
 800aa58:	f000 fe2a 	bl	800b6b0 <xQueueGenericCreateStatic>
 800aa5c:	4603      	mov	r3, r0
 800aa5e:	e016      	b.n	800aa8e <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800aa60:	2300      	movs	r3, #0
 800aa62:	e014      	b.n	800aa8e <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	2b01      	cmp	r3, #1
 800aa68:	d110      	bne.n	800aa8c <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800aa6a:	2203      	movs	r2, #3
 800aa6c:	2100      	movs	r1, #0
 800aa6e:	2001      	movs	r0, #1
 800aa70:	f000 fe95 	bl	800b79e <xQueueGenericCreate>
 800aa74:	60f8      	str	r0, [r7, #12]
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d005      	beq.n	800aa88 <osSemaphoreCreate+0x56>
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	2200      	movs	r2, #0
 800aa80:	2100      	movs	r1, #0
 800aa82:	68f8      	ldr	r0, [r7, #12]
 800aa84:	f000 ff35 	bl	800b8f2 <xQueueGenericSend>
      return sema;
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	e000      	b.n	800aa8e <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800aa8c:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800aa8e:	4618      	mov	r0, r3
 800aa90:	3710      	adds	r7, #16
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bd80      	pop	{r7, pc}

0800aa96 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800aa96:	b580      	push	{r7, lr}
 800aa98:	b084      	sub	sp, #16
 800aa9a:	af00      	add	r7, sp, #0
 800aa9c:	6078      	str	r0, [r7, #4]
 800aa9e:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d101      	bne.n	800aaae <osSemaphoreWait+0x18>
    return osErrorParameter;
 800aaaa:	2380      	movs	r3, #128	; 0x80
 800aaac:	e03a      	b.n	800ab24 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800aaae:	2300      	movs	r3, #0
 800aab0:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800aab2:	683b      	ldr	r3, [r7, #0]
 800aab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aab8:	d103      	bne.n	800aac2 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800aaba:	f04f 33ff 	mov.w	r3, #4294967295
 800aabe:	60fb      	str	r3, [r7, #12]
 800aac0:	e009      	b.n	800aad6 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800aac2:	683b      	ldr	r3, [r7, #0]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d006      	beq.n	800aad6 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800aac8:	683b      	ldr	r3, [r7, #0]
 800aaca:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d101      	bne.n	800aad6 <osSemaphoreWait+0x40>
      ticks = 1;
 800aad2:	2301      	movs	r3, #1
 800aad4:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800aad6:	f7ff fd4f 	bl	800a578 <inHandlerMode>
 800aada:	4603      	mov	r3, r0
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d017      	beq.n	800ab10 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800aae0:	f107 0308 	add.w	r3, r7, #8
 800aae4:	461a      	mov	r2, r3
 800aae6:	2100      	movs	r1, #0
 800aae8:	6878      	ldr	r0, [r7, #4]
 800aaea:	f001 fbf3 	bl	800c2d4 <xQueueReceiveFromISR>
 800aaee:	4603      	mov	r3, r0
 800aaf0:	2b01      	cmp	r3, #1
 800aaf2:	d001      	beq.n	800aaf8 <osSemaphoreWait+0x62>
      return osErrorOS;
 800aaf4:	23ff      	movs	r3, #255	; 0xff
 800aaf6:	e015      	b.n	800ab24 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800aaf8:	68bb      	ldr	r3, [r7, #8]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d011      	beq.n	800ab22 <osSemaphoreWait+0x8c>
 800aafe:	4b0b      	ldr	r3, [pc, #44]	; (800ab2c <osSemaphoreWait+0x96>)
 800ab00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab04:	601a      	str	r2, [r3, #0]
 800ab06:	f3bf 8f4f 	dsb	sy
 800ab0a:	f3bf 8f6f 	isb	sy
 800ab0e:	e008      	b.n	800ab22 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800ab10:	68f9      	ldr	r1, [r7, #12]
 800ab12:	6878      	ldr	r0, [r7, #4]
 800ab14:	f001 f9f0 	bl	800bef8 <xQueueSemaphoreTake>
 800ab18:	4603      	mov	r3, r0
 800ab1a:	2b01      	cmp	r3, #1
 800ab1c:	d001      	beq.n	800ab22 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800ab1e:	23ff      	movs	r3, #255	; 0xff
 800ab20:	e000      	b.n	800ab24 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800ab22:	2300      	movs	r3, #0
}
 800ab24:	4618      	mov	r0, r3
 800ab26:	3710      	adds	r7, #16
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	bd80      	pop	{r7, pc}
 800ab2c:	e000ed04 	.word	0xe000ed04

0800ab30 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b084      	sub	sp, #16
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800ab38:	2300      	movs	r3, #0
 800ab3a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800ab40:	f7ff fd1a 	bl	800a578 <inHandlerMode>
 800ab44:	4603      	mov	r3, r0
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d016      	beq.n	800ab78 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800ab4a:	f107 0308 	add.w	r3, r7, #8
 800ab4e:	4619      	mov	r1, r3
 800ab50:	6878      	ldr	r0, [r7, #4]
 800ab52:	f001 f865 	bl	800bc20 <xQueueGiveFromISR>
 800ab56:	4603      	mov	r3, r0
 800ab58:	2b01      	cmp	r3, #1
 800ab5a:	d001      	beq.n	800ab60 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800ab5c:	23ff      	movs	r3, #255	; 0xff
 800ab5e:	e017      	b.n	800ab90 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ab60:	68bb      	ldr	r3, [r7, #8]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d013      	beq.n	800ab8e <osSemaphoreRelease+0x5e>
 800ab66:	4b0c      	ldr	r3, [pc, #48]	; (800ab98 <osSemaphoreRelease+0x68>)
 800ab68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab6c:	601a      	str	r2, [r3, #0]
 800ab6e:	f3bf 8f4f 	dsb	sy
 800ab72:	f3bf 8f6f 	isb	sy
 800ab76:	e00a      	b.n	800ab8e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800ab78:	2300      	movs	r3, #0
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	2100      	movs	r1, #0
 800ab7e:	6878      	ldr	r0, [r7, #4]
 800ab80:	f000 feb7 	bl	800b8f2 <xQueueGenericSend>
 800ab84:	4603      	mov	r3, r0
 800ab86:	2b01      	cmp	r3, #1
 800ab88:	d001      	beq.n	800ab8e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800ab8a:	23ff      	movs	r3, #255	; 0xff
 800ab8c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800ab8e:	68fb      	ldr	r3, [r7, #12]
}
 800ab90:	4618      	mov	r0, r3
 800ab92:	3710      	adds	r7, #16
 800ab94:	46bd      	mov	sp, r7
 800ab96:	bd80      	pop	{r7, pc}
 800ab98:	e000ed04 	.word	0xe000ed04

0800ab9c <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b082      	sub	sp, #8
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800aba4:	f7ff fce8 	bl	800a578 <inHandlerMode>
 800aba8:	4603      	mov	r3, r0
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d001      	beq.n	800abb2 <osSemaphoreDelete+0x16>
    return osErrorISR;
 800abae:	2382      	movs	r3, #130	; 0x82
 800abb0:	e003      	b.n	800abba <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800abb2:	6878      	ldr	r0, [r7, #4]
 800abb4:	f001 fcd3 	bl	800c55e <vQueueDelete>

  return osOK; 
 800abb8:	2300      	movs	r3, #0
}
 800abba:	4618      	mov	r0, r3
 800abbc:	3708      	adds	r7, #8
 800abbe:	46bd      	mov	sp, r7
 800abc0:	bd80      	pop	{r7, pc}

0800abc2 <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 800abc2:	b580      	push	{r7, lr}
 800abc4:	b086      	sub	sp, #24
 800abc6:	af00      	add	r7, sp, #0
 800abc8:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	685b      	ldr	r3, [r3, #4]
 800abce:	3303      	adds	r3, #3
 800abd0:	f023 0303 	bic.w	r3, r3, #3
 800abd4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 800abd6:	2014      	movs	r0, #20
 800abd8:	f004 f85a 	bl	800ec90 <pvPortMalloc>
 800abdc:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 800abde:	697b      	ldr	r3, [r7, #20]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d046      	beq.n	800ac72 <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681a      	ldr	r2, [r3, #0]
 800abe8:	697b      	ldr	r3, [r7, #20]
 800abea:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 800abec:	68fa      	ldr	r2, [r7, #12]
 800abee:	697b      	ldr	r3, [r7, #20]
 800abf0:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 800abf2:	697b      	ldr	r3, [r7, #20]
 800abf4:	2200      	movs	r2, #0
 800abf6:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	4618      	mov	r0, r3
 800abfe:	f004 f847 	bl	800ec90 <pvPortMalloc>
 800ac02:	4602      	mov	r2, r0
 800ac04:	697b      	ldr	r3, [r7, #20]
 800ac06:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 800ac08:	697b      	ldr	r3, [r7, #20]
 800ac0a:	685b      	ldr	r3, [r3, #4]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d02b      	beq.n	800ac68 <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	68fa      	ldr	r2, [r7, #12]
 800ac16:	fb02 f303 	mul.w	r3, r2, r3
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	f004 f838 	bl	800ec90 <pvPortMalloc>
 800ac20:	4602      	mov	r2, r0
 800ac22:	697b      	ldr	r3, [r7, #20]
 800ac24:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 800ac26:	697b      	ldr	r3, [r7, #20]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d011      	beq.n	800ac52 <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 800ac2e:	2300      	movs	r3, #0
 800ac30:	613b      	str	r3, [r7, #16]
 800ac32:	e008      	b.n	800ac46 <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 800ac34:	697b      	ldr	r3, [r7, #20]
 800ac36:	685a      	ldr	r2, [r3, #4]
 800ac38:	693b      	ldr	r3, [r7, #16]
 800ac3a:	4413      	add	r3, r2
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 800ac40:	693b      	ldr	r3, [r7, #16]
 800ac42:	3301      	adds	r3, #1
 800ac44:	613b      	str	r3, [r7, #16]
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	693a      	ldr	r2, [r7, #16]
 800ac4c:	429a      	cmp	r2, r3
 800ac4e:	d3f1      	bcc.n	800ac34 <osPoolCreate+0x72>
 800ac50:	e00f      	b.n	800ac72 <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 800ac52:	697b      	ldr	r3, [r7, #20]
 800ac54:	685b      	ldr	r3, [r3, #4]
 800ac56:	4618      	mov	r0, r3
 800ac58:	f004 f8de 	bl	800ee18 <vPortFree>
        vPortFree(thePool);
 800ac5c:	6978      	ldr	r0, [r7, #20]
 800ac5e:	f004 f8db 	bl	800ee18 <vPortFree>
        thePool = NULL;
 800ac62:	2300      	movs	r3, #0
 800ac64:	617b      	str	r3, [r7, #20]
 800ac66:	e004      	b.n	800ac72 <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 800ac68:	6978      	ldr	r0, [r7, #20]
 800ac6a:	f004 f8d5 	bl	800ee18 <vPortFree>
      thePool = NULL;
 800ac6e:	2300      	movs	r3, #0
 800ac70:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 800ac72:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 800ac74:	4618      	mov	r0, r3
 800ac76:	3718      	adds	r7, #24
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	bd80      	pop	{r7, pc}

0800ac7c <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b08a      	sub	sp, #40	; 0x28
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 800ac84:	2300      	movs	r3, #0
 800ac86:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 800ac88:	2300      	movs	r3, #0
 800ac8a:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 800ac8c:	f7ff fc74 	bl	800a578 <inHandlerMode>
 800ac90:	4603      	mov	r3, r0
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d00e      	beq.n	800acb4 <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ac96:	f3ef 8211 	mrs	r2, BASEPRI
 800ac9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac9e:	f383 8811 	msr	BASEPRI, r3
 800aca2:	f3bf 8f6f 	isb	sy
 800aca6:	f3bf 8f4f 	dsb	sy
 800acaa:	617a      	str	r2, [r7, #20]
 800acac:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800acae:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 800acb0:	627b      	str	r3, [r7, #36]	; 0x24
 800acb2:	e001      	b.n	800acb8 <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 800acb4:	f003 fee8 	bl	800ea88 <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 800acb8:	2300      	movs	r3, #0
 800acba:	61fb      	str	r3, [r7, #28]
 800acbc:	e029      	b.n	800ad12 <osPoolAlloc+0x96>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	691a      	ldr	r2, [r3, #16]
 800acc2:	69fb      	ldr	r3, [r7, #28]
 800acc4:	4413      	add	r3, r2
 800acc6:	687a      	ldr	r2, [r7, #4]
 800acc8:	6892      	ldr	r2, [r2, #8]
 800acca:	fbb3 f1f2 	udiv	r1, r3, r2
 800acce:	fb01 f202 	mul.w	r2, r1, r2
 800acd2:	1a9b      	subs	r3, r3, r2
 800acd4:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	685a      	ldr	r2, [r3, #4]
 800acda:	69bb      	ldr	r3, [r7, #24]
 800acdc:	4413      	add	r3, r2
 800acde:	781b      	ldrb	r3, [r3, #0]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d113      	bne.n	800ad0c <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	685a      	ldr	r2, [r3, #4]
 800ace8:	69bb      	ldr	r3, [r7, #24]
 800acea:	4413      	add	r3, r2
 800acec:	2201      	movs	r2, #1
 800acee:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	4619      	mov	r1, r3
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	68db      	ldr	r3, [r3, #12]
 800acfa:	69ba      	ldr	r2, [r7, #24]
 800acfc:	fb02 f303 	mul.w	r3, r2, r3
 800ad00:	440b      	add	r3, r1
 800ad02:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	69ba      	ldr	r2, [r7, #24]
 800ad08:	611a      	str	r2, [r3, #16]
      break;
 800ad0a:	e007      	b.n	800ad1c <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 800ad0c:	69fb      	ldr	r3, [r7, #28]
 800ad0e:	3301      	adds	r3, #1
 800ad10:	61fb      	str	r3, [r7, #28]
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	689b      	ldr	r3, [r3, #8]
 800ad16:	69fa      	ldr	r2, [r7, #28]
 800ad18:	429a      	cmp	r2, r3
 800ad1a:	d3d0      	bcc.n	800acbe <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 800ad1c:	f7ff fc2c 	bl	800a578 <inHandlerMode>
 800ad20:	4603      	mov	r3, r0
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d005      	beq.n	800ad32 <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 800ad26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad28:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ad30:	e001      	b.n	800ad36 <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 800ad32:	f003 fed9 	bl	800eae8 <vPortExitCritical>
  }
  
  return p;
 800ad36:	6a3b      	ldr	r3, [r7, #32]
}
 800ad38:	4618      	mov	r0, r3
 800ad3a:	3728      	adds	r7, #40	; 0x28
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	bd80      	pop	{r7, pc}

0800ad40 <osPoolCAlloc>:
* @param  pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolCAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolCAlloc (osPoolId pool_id)
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b084      	sub	sp, #16
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
  void *p = osPoolAlloc(pool_id);
 800ad48:	6878      	ldr	r0, [r7, #4]
 800ad4a:	f7ff ff97 	bl	800ac7c <osPoolAlloc>
 800ad4e:	60f8      	str	r0, [r7, #12]
  
  if (p != NULL)
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d004      	beq.n	800ad60 <osPoolCAlloc+0x20>
  {
    memset(p, 0, sizeof(pool_id->pool_sz));
 800ad56:	2204      	movs	r2, #4
 800ad58:	2100      	movs	r1, #0
 800ad5a:	68f8      	ldr	r0, [r7, #12]
 800ad5c:	f004 f9af 	bl	800f0be <memset>
  }
  
  return p;
 800ad60:	68fb      	ldr	r3, [r7, #12]
}
 800ad62:	4618      	mov	r0, r3
 800ad64:	3710      	adds	r7, #16
 800ad66:	46bd      	mov	sp, r7
 800ad68:	bd80      	pop	{r7, pc}

0800ad6a <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 800ad6a:	b480      	push	{r7}
 800ad6c:	b085      	sub	sp, #20
 800ad6e:	af00      	add	r7, sp, #0
 800ad70:	6078      	str	r0, [r7, #4]
 800ad72:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d101      	bne.n	800ad7e <osPoolFree+0x14>
    return osErrorParameter;
 800ad7a:	2380      	movs	r3, #128	; 0x80
 800ad7c:	e030      	b.n	800ade0 <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 800ad7e:	683b      	ldr	r3, [r7, #0]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d101      	bne.n	800ad88 <osPoolFree+0x1e>
    return osErrorParameter;
 800ad84:	2380      	movs	r3, #128	; 0x80
 800ad86:	e02b      	b.n	800ade0 <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	683a      	ldr	r2, [r7, #0]
 800ad8e:	429a      	cmp	r2, r3
 800ad90:	d201      	bcs.n	800ad96 <osPoolFree+0x2c>
    return osErrorParameter;
 800ad92:	2380      	movs	r3, #128	; 0x80
 800ad94:	e024      	b.n	800ade0 <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 800ad96:	683b      	ldr	r3, [r7, #0]
 800ad98:	687a      	ldr	r2, [r7, #4]
 800ad9a:	6812      	ldr	r2, [r2, #0]
 800ad9c:	1a9b      	subs	r3, r3, r2
 800ad9e:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	68da      	ldr	r2, [r3, #12]
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	fbb3 f1f2 	udiv	r1, r3, r2
 800adaa:	fb01 f202 	mul.w	r2, r1, r2
 800adae:	1a9b      	subs	r3, r3, r2
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d001      	beq.n	800adb8 <osPoolFree+0x4e>
    return osErrorParameter;
 800adb4:	2380      	movs	r3, #128	; 0x80
 800adb6:	e013      	b.n	800ade0 <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	68db      	ldr	r3, [r3, #12]
 800adbc:	68fa      	ldr	r2, [r7, #12]
 800adbe:	fbb2 f3f3 	udiv	r3, r2, r3
 800adc2:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	689b      	ldr	r3, [r3, #8]
 800adc8:	68fa      	ldr	r2, [r7, #12]
 800adca:	429a      	cmp	r2, r3
 800adcc:	d301      	bcc.n	800add2 <osPoolFree+0x68>
    return osErrorParameter;
 800adce:	2380      	movs	r3, #128	; 0x80
 800add0:	e006      	b.n	800ade0 <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	685a      	ldr	r2, [r3, #4]
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	4413      	add	r3, r2
 800adda:	2200      	movs	r2, #0
 800addc:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 800adde:	2300      	movs	r3, #0
}
 800ade0:	4618      	mov	r0, r3
 800ade2:	3714      	adds	r7, #20
 800ade4:	46bd      	mov	sp, r7
 800ade6:	bc80      	pop	{r7}
 800ade8:	4770      	bx	lr

0800adea <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800adea:	b590      	push	{r4, r7, lr}
 800adec:	b085      	sub	sp, #20
 800adee:	af02      	add	r7, sp, #8
 800adf0:	6078      	str	r0, [r7, #4]
 800adf2:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	689b      	ldr	r3, [r3, #8]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d011      	beq.n	800ae20 <osMessageCreate+0x36>
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	68db      	ldr	r3, [r3, #12]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d00d      	beq.n	800ae20 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	6818      	ldr	r0, [r3, #0]
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	6859      	ldr	r1, [r3, #4]
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	689a      	ldr	r2, [r3, #8]
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	68db      	ldr	r3, [r3, #12]
 800ae14:	2400      	movs	r4, #0
 800ae16:	9400      	str	r4, [sp, #0]
 800ae18:	f000 fc4a 	bl	800b6b0 <xQueueGenericCreateStatic>
 800ae1c:	4603      	mov	r3, r0
 800ae1e:	e008      	b.n	800ae32 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	6818      	ldr	r0, [r3, #0]
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	685b      	ldr	r3, [r3, #4]
 800ae28:	2200      	movs	r2, #0
 800ae2a:	4619      	mov	r1, r3
 800ae2c:	f000 fcb7 	bl	800b79e <xQueueGenericCreate>
 800ae30:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800ae32:	4618      	mov	r0, r3
 800ae34:	370c      	adds	r7, #12
 800ae36:	46bd      	mov	sp, r7
 800ae38:	bd90      	pop	{r4, r7, pc}

0800ae3a <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800ae3a:	b580      	push	{r7, lr}
 800ae3c:	b086      	sub	sp, #24
 800ae3e:	af00      	add	r7, sp, #0
 800ae40:	60f8      	str	r0, [r7, #12]
 800ae42:	60b9      	str	r1, [r7, #8]
 800ae44:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800ae46:	2300      	movs	r3, #0
 800ae48:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800ae4e:	697b      	ldr	r3, [r7, #20]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d101      	bne.n	800ae58 <osMessagePut+0x1e>
    ticks = 1;
 800ae54:	2301      	movs	r3, #1
 800ae56:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800ae58:	f7ff fb8e 	bl	800a578 <inHandlerMode>
 800ae5c:	4603      	mov	r3, r0
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d018      	beq.n	800ae94 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800ae62:	f107 0210 	add.w	r2, r7, #16
 800ae66:	f107 0108 	add.w	r1, r7, #8
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	68f8      	ldr	r0, [r7, #12]
 800ae6e:	f000 fe3f 	bl	800baf0 <xQueueGenericSendFromISR>
 800ae72:	4603      	mov	r3, r0
 800ae74:	2b01      	cmp	r3, #1
 800ae76:	d001      	beq.n	800ae7c <osMessagePut+0x42>
      return osErrorOS;
 800ae78:	23ff      	movs	r3, #255	; 0xff
 800ae7a:	e018      	b.n	800aeae <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ae7c:	693b      	ldr	r3, [r7, #16]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d014      	beq.n	800aeac <osMessagePut+0x72>
 800ae82:	4b0d      	ldr	r3, [pc, #52]	; (800aeb8 <osMessagePut+0x7e>)
 800ae84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae88:	601a      	str	r2, [r3, #0]
 800ae8a:	f3bf 8f4f 	dsb	sy
 800ae8e:	f3bf 8f6f 	isb	sy
 800ae92:	e00b      	b.n	800aeac <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800ae94:	f107 0108 	add.w	r1, r7, #8
 800ae98:	2300      	movs	r3, #0
 800ae9a:	697a      	ldr	r2, [r7, #20]
 800ae9c:	68f8      	ldr	r0, [r7, #12]
 800ae9e:	f000 fd28 	bl	800b8f2 <xQueueGenericSend>
 800aea2:	4603      	mov	r3, r0
 800aea4:	2b01      	cmp	r3, #1
 800aea6:	d001      	beq.n	800aeac <osMessagePut+0x72>
      return osErrorOS;
 800aea8:	23ff      	movs	r3, #255	; 0xff
 800aeaa:	e000      	b.n	800aeae <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800aeac:	2300      	movs	r3, #0
}
 800aeae:	4618      	mov	r0, r3
 800aeb0:	3718      	adds	r7, #24
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	bd80      	pop	{r7, pc}
 800aeb6:	bf00      	nop
 800aeb8:	e000ed04 	.word	0xe000ed04

0800aebc <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800aebc:	b590      	push	{r4, r7, lr}
 800aebe:	b08b      	sub	sp, #44	; 0x2c
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	60f8      	str	r0, [r7, #12]
 800aec4:	60b9      	str	r1, [r7, #8]
 800aec6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800aec8:	68bb      	ldr	r3, [r7, #8]
 800aeca:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800aecc:	2300      	movs	r3, #0
 800aece:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800aed0:	68bb      	ldr	r3, [r7, #8]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d10a      	bne.n	800aeec <osMessageGet+0x30>
    event.status = osErrorParameter;
 800aed6:	2380      	movs	r3, #128	; 0x80
 800aed8:	617b      	str	r3, [r7, #20]
    return event;
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	461c      	mov	r4, r3
 800aede:	f107 0314 	add.w	r3, r7, #20
 800aee2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800aee6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800aeea:	e054      	b.n	800af96 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800aeec:	2300      	movs	r3, #0
 800aeee:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800aef0:	2300      	movs	r3, #0
 800aef2:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aefa:	d103      	bne.n	800af04 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800aefc:	f04f 33ff 	mov.w	r3, #4294967295
 800af00:	627b      	str	r3, [r7, #36]	; 0x24
 800af02:	e009      	b.n	800af18 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2b00      	cmp	r3, #0
 800af08:	d006      	beq.n	800af18 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800af0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af10:	2b00      	cmp	r3, #0
 800af12:	d101      	bne.n	800af18 <osMessageGet+0x5c>
      ticks = 1;
 800af14:	2301      	movs	r3, #1
 800af16:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800af18:	f7ff fb2e 	bl	800a578 <inHandlerMode>
 800af1c:	4603      	mov	r3, r0
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d01c      	beq.n	800af5c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800af22:	f107 0220 	add.w	r2, r7, #32
 800af26:	f107 0314 	add.w	r3, r7, #20
 800af2a:	3304      	adds	r3, #4
 800af2c:	4619      	mov	r1, r3
 800af2e:	68b8      	ldr	r0, [r7, #8]
 800af30:	f001 f9d0 	bl	800c2d4 <xQueueReceiveFromISR>
 800af34:	4603      	mov	r3, r0
 800af36:	2b01      	cmp	r3, #1
 800af38:	d102      	bne.n	800af40 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800af3a:	2310      	movs	r3, #16
 800af3c:	617b      	str	r3, [r7, #20]
 800af3e:	e001      	b.n	800af44 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800af40:	2300      	movs	r3, #0
 800af42:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800af44:	6a3b      	ldr	r3, [r7, #32]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d01d      	beq.n	800af86 <osMessageGet+0xca>
 800af4a:	4b15      	ldr	r3, [pc, #84]	; (800afa0 <osMessageGet+0xe4>)
 800af4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af50:	601a      	str	r2, [r3, #0]
 800af52:	f3bf 8f4f 	dsb	sy
 800af56:	f3bf 8f6f 	isb	sy
 800af5a:	e014      	b.n	800af86 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800af5c:	f107 0314 	add.w	r3, r7, #20
 800af60:	3304      	adds	r3, #4
 800af62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af64:	4619      	mov	r1, r3
 800af66:	68b8      	ldr	r0, [r7, #8]
 800af68:	f000 fee7 	bl	800bd3a <xQueueReceive>
 800af6c:	4603      	mov	r3, r0
 800af6e:	2b01      	cmp	r3, #1
 800af70:	d102      	bne.n	800af78 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800af72:	2310      	movs	r3, #16
 800af74:	617b      	str	r3, [r7, #20]
 800af76:	e006      	b.n	800af86 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800af78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d101      	bne.n	800af82 <osMessageGet+0xc6>
 800af7e:	2300      	movs	r3, #0
 800af80:	e000      	b.n	800af84 <osMessageGet+0xc8>
 800af82:	2340      	movs	r3, #64	; 0x40
 800af84:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	461c      	mov	r4, r3
 800af8a:	f107 0314 	add.w	r3, r7, #20
 800af8e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800af92:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800af96:	68f8      	ldr	r0, [r7, #12]
 800af98:	372c      	adds	r7, #44	; 0x2c
 800af9a:	46bd      	mov	sp, r7
 800af9c:	bd90      	pop	{r4, r7, pc}
 800af9e:	bf00      	nop
 800afa0:	e000ed04 	.word	0xe000ed04

0800afa4 <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 800afa4:	b590      	push	{r4, r7, lr}
 800afa6:	b087      	sub	sp, #28
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
 800afac:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	60fb      	str	r3, [r7, #12]
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	685b      	ldr	r3, [r3, #4]
 800afb8:	613b      	str	r3, [r7, #16]
 800afba:	2300      	movs	r3, #0
 800afbc:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	689c      	ldr	r4, [r3, #8]
 800afc2:	200c      	movs	r0, #12
 800afc4:	f003 fe64 	bl	800ec90 <pvPortMalloc>
 800afc8:	4603      	mov	r3, r0
 800afca:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	689b      	ldr	r3, [r3, #8]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d101      	bne.n	800afda <osMailCreate+0x36>
    return NULL;
 800afd6:	2300      	movs	r3, #0
 800afd8:	e038      	b.n	800b04c <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	689b      	ldr	r3, [r3, #8]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	687a      	ldr	r2, [r7, #4]
 800afe2:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	6818      	ldr	r0, [r3, #0]
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	689b      	ldr	r3, [r3, #8]
 800afec:	681c      	ldr	r4, [r3, #0]
 800afee:	2200      	movs	r2, #0
 800aff0:	2104      	movs	r1, #4
 800aff2:	f000 fbd4 	bl	800b79e <xQueueGenericCreate>
 800aff6:	4603      	mov	r3, r0
 800aff8:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	689b      	ldr	r3, [r3, #8]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	685b      	ldr	r3, [r3, #4]
 800b002:	2b00      	cmp	r3, #0
 800b004:	d107      	bne.n	800b016 <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	689b      	ldr	r3, [r3, #8]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	4618      	mov	r0, r3
 800b00e:	f003 ff03 	bl	800ee18 <vPortFree>
    return NULL;
 800b012:	2300      	movs	r3, #0
 800b014:	e01a      	b.n	800b04c <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	689b      	ldr	r3, [r3, #8]
 800b01a:	681c      	ldr	r4, [r3, #0]
 800b01c:	f107 030c 	add.w	r3, r7, #12
 800b020:	4618      	mov	r0, r3
 800b022:	f7ff fdce 	bl	800abc2 <osPoolCreate>
 800b026:	4603      	mov	r3, r0
 800b028:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	689b      	ldr	r3, [r3, #8]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	689b      	ldr	r3, [r3, #8]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d107      	bne.n	800b046 <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	689b      	ldr	r3, [r3, #8]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	4618      	mov	r0, r3
 800b03e:	f003 feeb 	bl	800ee18 <vPortFree>
    return NULL;
 800b042:	2300      	movs	r3, #0
 800b044:	e002      	b.n	800b04c <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	689b      	ldr	r3, [r3, #8]
 800b04a:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 800b04c:	4618      	mov	r0, r3
 800b04e:	371c      	adds	r7, #28
 800b050:	46bd      	mov	sp, r7
 800b052:	bd90      	pop	{r4, r7, pc}

0800b054 <osMailAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailAlloc (osMailQId queue_id, uint32_t millisec)
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b084      	sub	sp, #16
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
 800b05c:	6039      	str	r1, [r7, #0]
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d101      	bne.n	800b068 <osMailAlloc+0x14>
    return NULL;
 800b064:	2300      	movs	r3, #0
 800b066:	e006      	b.n	800b076 <osMailAlloc+0x22>
  }
  
  p = osPoolAlloc(queue_id->pool);
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	689b      	ldr	r3, [r3, #8]
 800b06c:	4618      	mov	r0, r3
 800b06e:	f7ff fe05 	bl	800ac7c <osPoolAlloc>
 800b072:	60f8      	str	r0, [r7, #12]
  
  return p;
 800b074:	68fb      	ldr	r3, [r7, #12]
}
 800b076:	4618      	mov	r0, r3
 800b078:	3710      	adds	r7, #16
 800b07a:	46bd      	mov	sp, r7
 800b07c:	bd80      	pop	{r7, pc}

0800b07e <osMailCAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailCAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailCAlloc (osMailQId queue_id, uint32_t millisec)
{
 800b07e:	b580      	push	{r7, lr}
 800b080:	b084      	sub	sp, #16
 800b082:	af00      	add	r7, sp, #0
 800b084:	6078      	str	r0, [r7, #4]
 800b086:	6039      	str	r1, [r7, #0]
  uint32_t i;
  void *p = osMailAlloc(queue_id, millisec);
 800b088:	6839      	ldr	r1, [r7, #0]
 800b08a:	6878      	ldr	r0, [r7, #4]
 800b08c:	f7ff ffe2 	bl	800b054 <osMailAlloc>
 800b090:	60b8      	str	r0, [r7, #8]
  
  if (p) {
 800b092:	68bb      	ldr	r3, [r7, #8]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d010      	beq.n	800b0ba <osMailCAlloc+0x3c>
    for (i = 0; i < queue_id->queue_def->item_sz; i++) {
 800b098:	2300      	movs	r3, #0
 800b09a:	60fb      	str	r3, [r7, #12]
 800b09c:	e007      	b.n	800b0ae <osMailCAlloc+0x30>
      ((uint8_t *)p)[i] = 0;
 800b09e:	68ba      	ldr	r2, [r7, #8]
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	4413      	add	r3, r2
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < queue_id->queue_def->item_sz; i++) {
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	3301      	adds	r3, #1
 800b0ac:	60fb      	str	r3, [r7, #12]
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	685b      	ldr	r3, [r3, #4]
 800b0b4:	68fa      	ldr	r2, [r7, #12]
 800b0b6:	429a      	cmp	r2, r3
 800b0b8:	d3f1      	bcc.n	800b09e <osMailCAlloc+0x20>
    }
  }
  
  return p;
 800b0ba:	68bb      	ldr	r3, [r7, #8]
}
 800b0bc:	4618      	mov	r0, r3
 800b0be:	3710      	adds	r7, #16
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	bd80      	pop	{r7, pc}

0800b0c4 <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b084      	sub	sp, #16
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
 800b0cc:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d101      	bne.n	800b0d8 <osMailPut+0x14>
    return osErrorParameter;
 800b0d4:	2380      	movs	r3, #128	; 0x80
 800b0d6:	e02c      	b.n	800b132 <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 800b0d8:	2300      	movs	r3, #0
 800b0da:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 800b0dc:	f7ff fa4c 	bl	800a578 <inHandlerMode>
 800b0e0:	4603      	mov	r3, r0
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d018      	beq.n	800b118 <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	6858      	ldr	r0, [r3, #4]
 800b0ea:	f107 020c 	add.w	r2, r7, #12
 800b0ee:	4639      	mov	r1, r7
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	f000 fcfd 	bl	800baf0 <xQueueGenericSendFromISR>
 800b0f6:	4603      	mov	r3, r0
 800b0f8:	2b01      	cmp	r3, #1
 800b0fa:	d001      	beq.n	800b100 <osMailPut+0x3c>
      return osErrorOS;
 800b0fc:	23ff      	movs	r3, #255	; 0xff
 800b0fe:	e018      	b.n	800b132 <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d014      	beq.n	800b130 <osMailPut+0x6c>
 800b106:	4b0d      	ldr	r3, [pc, #52]	; (800b13c <osMailPut+0x78>)
 800b108:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b10c:	601a      	str	r2, [r3, #0]
 800b10e:	f3bf 8f4f 	dsb	sy
 800b112:	f3bf 8f6f 	isb	sy
 800b116:	e00b      	b.n	800b130 <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	6858      	ldr	r0, [r3, #4]
 800b11c:	4639      	mov	r1, r7
 800b11e:	2300      	movs	r3, #0
 800b120:	2200      	movs	r2, #0
 800b122:	f000 fbe6 	bl	800b8f2 <xQueueGenericSend>
 800b126:	4603      	mov	r3, r0
 800b128:	2b01      	cmp	r3, #1
 800b12a:	d001      	beq.n	800b130 <osMailPut+0x6c>
      return osErrorOS;
 800b12c:	23ff      	movs	r3, #255	; 0xff
 800b12e:	e000      	b.n	800b132 <osMailPut+0x6e>
    }
  }
  
  return osOK;
 800b130:	2300      	movs	r3, #0
}
 800b132:	4618      	mov	r0, r3
 800b134:	3710      	adds	r7, #16
 800b136:	46bd      	mov	sp, r7
 800b138:	bd80      	pop	{r7, pc}
 800b13a:	bf00      	nop
 800b13c:	e000ed04 	.word	0xe000ed04

0800b140 <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 800b140:	b590      	push	{r4, r7, lr}
 800b142:	b08b      	sub	sp, #44	; 0x2c
 800b144:	af00      	add	r7, sp, #0
 800b146:	60f8      	str	r0, [r7, #12]
 800b148:	60b9      	str	r1, [r7, #8]
 800b14a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 800b14c:	68bb      	ldr	r3, [r7, #8]
 800b14e:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 800b150:	68bb      	ldr	r3, [r7, #8]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d10a      	bne.n	800b16c <osMailGet+0x2c>
    event.status = osErrorParameter;
 800b156:	2380      	movs	r3, #128	; 0x80
 800b158:	617b      	str	r3, [r7, #20]
    return event;
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	461c      	mov	r4, r3
 800b15e:	f107 0314 	add.w	r3, r7, #20
 800b162:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b166:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b16a:	e056      	b.n	800b21a <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800b16c:	2300      	movs	r3, #0
 800b16e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800b170:	2300      	movs	r3, #0
 800b172:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b17a:	d103      	bne.n	800b184 <osMailGet+0x44>
    ticks = portMAX_DELAY;
 800b17c:	f04f 33ff 	mov.w	r3, #4294967295
 800b180:	627b      	str	r3, [r7, #36]	; 0x24
 800b182:	e009      	b.n	800b198 <osMailGet+0x58>
  }
  else if (millisec != 0) {
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d006      	beq.n	800b198 <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800b18e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b190:	2b00      	cmp	r3, #0
 800b192:	d101      	bne.n	800b198 <osMailGet+0x58>
      ticks = 1;
 800b194:	2301      	movs	r3, #1
 800b196:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800b198:	f7ff f9ee 	bl	800a578 <inHandlerMode>
 800b19c:	4603      	mov	r3, r0
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d01d      	beq.n	800b1de <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 800b1a2:	68bb      	ldr	r3, [r7, #8]
 800b1a4:	6858      	ldr	r0, [r3, #4]
 800b1a6:	f107 0220 	add.w	r2, r7, #32
 800b1aa:	f107 0314 	add.w	r3, r7, #20
 800b1ae:	3304      	adds	r3, #4
 800b1b0:	4619      	mov	r1, r3
 800b1b2:	f001 f88f 	bl	800c2d4 <xQueueReceiveFromISR>
 800b1b6:	4603      	mov	r3, r0
 800b1b8:	2b01      	cmp	r3, #1
 800b1ba:	d102      	bne.n	800b1c2 <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 800b1bc:	2320      	movs	r3, #32
 800b1be:	617b      	str	r3, [r7, #20]
 800b1c0:	e001      	b.n	800b1c6 <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b1c6:	6a3b      	ldr	r3, [r7, #32]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d01e      	beq.n	800b20a <osMailGet+0xca>
 800b1cc:	4b15      	ldr	r3, [pc, #84]	; (800b224 <osMailGet+0xe4>)
 800b1ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1d2:	601a      	str	r2, [r3, #0]
 800b1d4:	f3bf 8f4f 	dsb	sy
 800b1d8:	f3bf 8f6f 	isb	sy
 800b1dc:	e015      	b.n	800b20a <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 800b1de:	68bb      	ldr	r3, [r7, #8]
 800b1e0:	6858      	ldr	r0, [r3, #4]
 800b1e2:	f107 0314 	add.w	r3, r7, #20
 800b1e6:	3304      	adds	r3, #4
 800b1e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1ea:	4619      	mov	r1, r3
 800b1ec:	f000 fda5 	bl	800bd3a <xQueueReceive>
 800b1f0:	4603      	mov	r3, r0
 800b1f2:	2b01      	cmp	r3, #1
 800b1f4:	d102      	bne.n	800b1fc <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 800b1f6:	2320      	movs	r3, #32
 800b1f8:	617b      	str	r3, [r7, #20]
 800b1fa:	e006      	b.n	800b20a <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800b1fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d101      	bne.n	800b206 <osMailGet+0xc6>
 800b202:	2300      	movs	r3, #0
 800b204:	e000      	b.n	800b208 <osMailGet+0xc8>
 800b206:	2340      	movs	r3, #64	; 0x40
 800b208:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	461c      	mov	r4, r3
 800b20e:	f107 0314 	add.w	r3, r7, #20
 800b212:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b216:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800b21a:	68f8      	ldr	r0, [r7, #12]
 800b21c:	372c      	adds	r7, #44	; 0x2c
 800b21e:	46bd      	mov	sp, r7
 800b220:	bd90      	pop	{r4, r7, pc}
 800b222:	bf00      	nop
 800b224:	e000ed04 	.word	0xe000ed04

0800b228 <osMailFree>:
* @param  mail     pointer to the memory block that was obtained with \ref osMailGet.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
 800b228:	b580      	push	{r7, lr}
 800b22a:	b082      	sub	sp, #8
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
 800b230:	6039      	str	r1, [r7, #0]
  if (queue_id == NULL) {
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d101      	bne.n	800b23c <osMailFree+0x14>
    return osErrorParameter;
 800b238:	2380      	movs	r3, #128	; 0x80
 800b23a:	e006      	b.n	800b24a <osMailFree+0x22>
  }
  
  return osPoolFree(queue_id->pool, mail);
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	689b      	ldr	r3, [r3, #8]
 800b240:	6839      	ldr	r1, [r7, #0]
 800b242:	4618      	mov	r0, r3
 800b244:	f7ff fd91 	bl	800ad6a <osPoolFree>
 800b248:	4603      	mov	r3, r0
}
 800b24a:	4618      	mov	r0, r3
 800b24c:	3708      	adds	r7, #8
 800b24e:	46bd      	mov	sp, r7
 800b250:	bd80      	pop	{r7, pc}

0800b252 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 800b252:	b580      	push	{r7, lr}
 800b254:	af00      	add	r7, sp, #0

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800b256:	f002 fdd3 	bl	800de00 <xTaskGetSchedulerState>
 800b25a:	4603      	mov	r3, r0
 800b25c:	2b01      	cmp	r3, #1
 800b25e:	d001      	beq.n	800b264 <osSystickHandler+0x12>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 800b260:	f003 fc91 	bl	800eb86 <SysTick_Handler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800b264:	bf00      	nop
 800b266:	bd80      	pop	{r7, pc}

0800b268 <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 800b268:	b580      	push	{r7, lr}
 800b26a:	b082      	sub	sp, #8
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 800b270:	6878      	ldr	r0, [r7, #4]
 800b272:	f001 fed5 	bl	800d020 <vTaskSuspend>
  
  return osOK;
 800b276:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 800b278:	4618      	mov	r0, r3
 800b27a:	3708      	adds	r7, #8
 800b27c:	46bd      	mov	sp, r7
 800b27e:	bd80      	pop	{r7, pc}

0800b280 <osThreadResume>:
* @brief  Resume execution of a suspended thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResume (osThreadId thread_id)
{
 800b280:	b580      	push	{r7, lr}
 800b282:	b082      	sub	sp, #8
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)  
  if(inHandlerMode())
 800b288:	f7ff f976 	bl	800a578 <inHandlerMode>
 800b28c:	4603      	mov	r3, r0
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d00e      	beq.n	800b2b0 <osThreadResume+0x30>
  {
    if (xTaskResumeFromISR(thread_id) == pdTRUE)
 800b292:	6878      	ldr	r0, [r7, #4]
 800b294:	f001 ffee 	bl	800d274 <xTaskResumeFromISR>
 800b298:	4603      	mov	r3, r0
 800b29a:	2b01      	cmp	r3, #1
 800b29c:	d10b      	bne.n	800b2b6 <osThreadResume+0x36>
    {
      portYIELD_FROM_ISR(pdTRUE);
 800b29e:	4b08      	ldr	r3, [pc, #32]	; (800b2c0 <osThreadResume+0x40>)
 800b2a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2a4:	601a      	str	r2, [r3, #0]
 800b2a6:	f3bf 8f4f 	dsb	sy
 800b2aa:	f3bf 8f6f 	isb	sy
 800b2ae:	e002      	b.n	800b2b6 <osThreadResume+0x36>
    }
  }
  else
  {
    vTaskResume(thread_id);
 800b2b0:	6878      	ldr	r0, [r7, #4]
 800b2b2:	f001 ff81 	bl	800d1b8 <vTaskResume>
  }
  return osOK;
 800b2b6:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	3708      	adds	r7, #8
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	bd80      	pop	{r7, pc}
 800b2c0:	e000ed04 	.word	0xe000ed04

0800b2c4 <osThreadSuspendAll>:
/**
* @brief  Suspend execution of a all active threads.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspendAll (void)
{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	af00      	add	r7, sp, #0
  vTaskSuspendAll();
 800b2c8:	f002 f8c8 	bl	800d45c <vTaskSuspendAll>
  
  return osOK;
 800b2cc:	2300      	movs	r3, #0
}
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	bd80      	pop	{r7, pc}

0800b2d2 <osThreadResumeAll>:
/**
* @brief  Resume execution of a all suspended threads.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResumeAll (void)
{
 800b2d2:	b580      	push	{r7, lr}
 800b2d4:	af00      	add	r7, sp, #0
  if (xTaskResumeAll() == pdTRUE)
 800b2d6:	f002 f8cf 	bl	800d478 <xTaskResumeAll>
 800b2da:	4603      	mov	r3, r0
 800b2dc:	2b01      	cmp	r3, #1
 800b2de:	d101      	bne.n	800b2e4 <osThreadResumeAll+0x12>
    return osOK;
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	e000      	b.n	800b2e6 <osThreadResumeAll+0x14>
  else
    return osErrorOS;
 800b2e4:	23ff      	movs	r3, #255	; 0xff
  
}
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	bd80      	pop	{r7, pc}

0800b2ea <osDelayUntil>:
*          prior to its first use (PreviousWakeTime = osKernelSysTick() )
* @param   millisec    time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelayUntil (uint32_t *PreviousWakeTime, uint32_t millisec)
{
 800b2ea:	b480      	push	{r7}
 800b2ec:	b083      	sub	sp, #12
 800b2ee:	af00      	add	r7, sp, #0
 800b2f0:	6078      	str	r0, [r7, #4]
 800b2f2:	6039      	str	r1, [r7, #0]
  return osOK;
#else
  (void) millisec;
  (void) PreviousWakeTime;
  
  return osErrorResource;
 800b2f4:	2381      	movs	r3, #129	; 0x81
#endif
}
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	370c      	adds	r7, #12
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	bc80      	pop	{r7}
 800b2fe:	4770      	bx	lr

0800b300 <osAbortDelay>:
* @brief   Abort the delay for a specific thread
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId   
* @retval  status code that indicates the execution status of the function.
*/
osStatus osAbortDelay(osThreadId thread_id)
{
 800b300:	b480      	push	{r7}
 800b302:	b083      	sub	sp, #12
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
  
  return osOK;
#else
  (void) thread_id;
  
  return osErrorResource;
 800b308:	2381      	movs	r3, #129	; 0x81
#endif
}
 800b30a:	4618      	mov	r0, r3
 800b30c:	370c      	adds	r7, #12
 800b30e:	46bd      	mov	sp, r7
 800b310:	bc80      	pop	{r7}
 800b312:	4770      	bx	lr

0800b314 <osThreadList>:
* @param   buffer   A buffer into which the above mentioned details
*          will be written
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadList (uint8_t *buffer)
{
 800b314:	b480      	push	{r7}
 800b316:	b083      	sub	sp, #12
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]
#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) )
  vTaskList((char *)buffer);
#endif
  return osOK;
 800b31c:	2300      	movs	r3, #0
}
 800b31e:	4618      	mov	r0, r3
 800b320:	370c      	adds	r7, #12
 800b322:	46bd      	mov	sp, r7
 800b324:	bc80      	pop	{r7}
 800b326:	4770      	bx	lr

0800b328 <osMessagePeek>:
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
*/
osEvent osMessagePeek (osMessageQId queue_id, uint32_t millisec)
{
 800b328:	b590      	push	{r4, r7, lr}
 800b32a:	b089      	sub	sp, #36	; 0x24
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	60f8      	str	r0, [r7, #12]
 800b330:	60b9      	str	r1, [r7, #8]
 800b332:	607a      	str	r2, [r7, #4]
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800b334:	68bb      	ldr	r3, [r7, #8]
 800b336:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800b338:	68bb      	ldr	r3, [r7, #8]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d10a      	bne.n	800b354 <osMessagePeek+0x2c>
    event.status = osErrorParameter;
 800b33e:	2380      	movs	r3, #128	; 0x80
 800b340:	613b      	str	r3, [r7, #16]
    return event;
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	461c      	mov	r4, r3
 800b346:	f107 0310 	add.w	r3, r7, #16
 800b34a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b34e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b352:	e030      	b.n	800b3b6 <osMessagePeek+0x8e>
  }
  
  ticks = 0;
 800b354:	2300      	movs	r3, #0
 800b356:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b35e:	d103      	bne.n	800b368 <osMessagePeek+0x40>
    ticks = portMAX_DELAY;
 800b360:	f04f 33ff 	mov.w	r3, #4294967295
 800b364:	61fb      	str	r3, [r7, #28]
 800b366:	e009      	b.n	800b37c <osMessagePeek+0x54>
  }
  else if (millisec != 0) {
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d006      	beq.n	800b37c <osMessagePeek+0x54>
    ticks = millisec / portTICK_PERIOD_MS;
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 800b372:	69fb      	ldr	r3, [r7, #28]
 800b374:	2b00      	cmp	r3, #0
 800b376:	d101      	bne.n	800b37c <osMessagePeek+0x54>
      ticks = 1;
 800b378:	2301      	movs	r3, #1
 800b37a:	61fb      	str	r3, [r7, #28]
    }
  }
  
  if (xQueuePeek(queue_id, &event.value.v, ticks) == pdTRUE) 
 800b37c:	f107 0310 	add.w	r3, r7, #16
 800b380:	3304      	adds	r3, #4
 800b382:	69fa      	ldr	r2, [r7, #28]
 800b384:	4619      	mov	r1, r3
 800b386:	68b8      	ldr	r0, [r7, #8]
 800b388:	f000 fec2 	bl	800c110 <xQueuePeek>
 800b38c:	4603      	mov	r3, r0
 800b38e:	2b01      	cmp	r3, #1
 800b390:	d102      	bne.n	800b398 <osMessagePeek+0x70>
  {
    /* We have mail */
    event.status = osEventMessage;
 800b392:	2310      	movs	r3, #16
 800b394:	613b      	str	r3, [r7, #16]
 800b396:	e006      	b.n	800b3a6 <osMessagePeek+0x7e>
  }
  else 
  {
    event.status = (ticks == 0) ? osOK : osEventTimeout;
 800b398:	69fb      	ldr	r3, [r7, #28]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d101      	bne.n	800b3a2 <osMessagePeek+0x7a>
 800b39e:	2300      	movs	r3, #0
 800b3a0:	e000      	b.n	800b3a4 <osMessagePeek+0x7c>
 800b3a2:	2340      	movs	r3, #64	; 0x40
 800b3a4:	613b      	str	r3, [r7, #16]
  }
  
  return event;
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	461c      	mov	r4, r3
 800b3aa:	f107 0310 	add.w	r3, r7, #16
 800b3ae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b3b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800b3b6:	68f8      	ldr	r0, [r7, #12]
 800b3b8:	3724      	adds	r7, #36	; 0x24
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	bd90      	pop	{r4, r7, pc}

0800b3be <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 800b3be:	b580      	push	{r7, lr}
 800b3c0:	b082      	sub	sp, #8
 800b3c2:	af00      	add	r7, sp, #0
 800b3c4:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800b3c6:	f7ff f8d7 	bl	800a578 <inHandlerMode>
 800b3ca:	4603      	mov	r3, r0
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d004      	beq.n	800b3da <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 800b3d0:	6878      	ldr	r0, [r7, #4]
 800b3d2:	f001 f8a9 	bl	800c528 <uxQueueMessagesWaitingFromISR>
 800b3d6:	4603      	mov	r3, r0
 800b3d8:	e003      	b.n	800b3e2 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 800b3da:	6878      	ldr	r0, [r7, #4]
 800b3dc:	f001 f863 	bl	800c4a6 <uxQueueMessagesWaiting>
 800b3e0:	4603      	mov	r3, r0
  }
}
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	3708      	adds	r7, #8
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	bd80      	pop	{r7, pc}

0800b3ea <osMessageAvailableSpace>:
* @brief  Get the available space in a message queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval available space in a message queue.
*/
uint32_t osMessageAvailableSpace(osMessageQId queue_id)  
{
 800b3ea:	b580      	push	{r7, lr}
 800b3ec:	b082      	sub	sp, #8
 800b3ee:	af00      	add	r7, sp, #0
 800b3f0:	6078      	str	r0, [r7, #4]
  return uxQueueSpacesAvailable(queue_id);
 800b3f2:	6878      	ldr	r0, [r7, #4]
 800b3f4:	f001 f875 	bl	800c4e2 <uxQueueSpacesAvailable>
 800b3f8:	4603      	mov	r3, r0
}
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	3708      	adds	r7, #8
 800b3fe:	46bd      	mov	sp, r7
 800b400:	bd80      	pop	{r7, pc}

0800b402 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 800b402:	b580      	push	{r7, lr}
 800b404:	b082      	sub	sp, #8
 800b406:	af00      	add	r7, sp, #0
 800b408:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800b40a:	f7ff f8b5 	bl	800a578 <inHandlerMode>
 800b40e:	4603      	mov	r3, r0
 800b410:	2b00      	cmp	r3, #0
 800b412:	d001      	beq.n	800b418 <osMessageDelete+0x16>
    return osErrorISR;
 800b414:	2382      	movs	r3, #130	; 0x82
 800b416:	e003      	b.n	800b420 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 800b418:	6878      	ldr	r0, [r7, #4]
 800b41a:	f001 f8a0 	bl	800c55e <vQueueDelete>

  return osOK; 
 800b41e:	2300      	movs	r3, #0
}
 800b420:	4618      	mov	r0, r3
 800b422:	3708      	adds	r7, #8
 800b424:	46bd      	mov	sp, r7
 800b426:	bd80      	pop	{r7, pc}

0800b428 <osRecursiveMutexCreate>:
* @brief  Create and Initialize a Recursive Mutex
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error..
*/
osMutexId osRecursiveMutexCreate (const osMutexDef_t *mutex_def)
{
 800b428:	b480      	push	{r7}
 800b42a:	b083      	sub	sp, #12
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
  return xSemaphoreCreateRecursiveMutexStatic( mutex_def->controlblock );
#else 
  return xSemaphoreCreateRecursiveMutex();
#endif
#else
  return NULL;
 800b430:	2300      	movs	r3, #0
#endif	
}
 800b432:	4618      	mov	r0, r3
 800b434:	370c      	adds	r7, #12
 800b436:	46bd      	mov	sp, r7
 800b438:	bc80      	pop	{r7}
 800b43a:	4770      	bx	lr

0800b43c <osRecursiveMutexRelease>:
* @brief  Release a Recursive Mutex
* @param   mutex_id      mutex ID obtained by \ref osRecursiveMutexCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osRecursiveMutexRelease (osMutexId mutex_id)
{
 800b43c:	b480      	push	{r7}
 800b43e:	b083      	sub	sp, #12
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
  {
    result = osErrorOS;
  }
  return result;
#else
	return osErrorResource;
 800b444:	2381      	movs	r3, #129	; 0x81
#endif
}
 800b446:	4618      	mov	r0, r3
 800b448:	370c      	adds	r7, #12
 800b44a:	46bd      	mov	sp, r7
 800b44c:	bc80      	pop	{r7}
 800b44e:	4770      	bx	lr

0800b450 <osRecursiveMutexWait>:
* @param   mutex_id    mutex ID obtained by \ref osRecursiveMutexCreate.
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osRecursiveMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800b450:	b480      	push	{r7}
 800b452:	b083      	sub	sp, #12
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
 800b458:	6039      	str	r1, [r7, #0]
  {
    return osErrorOS;
  }
  return osOK;
#else
	return osErrorResource;
 800b45a:	2381      	movs	r3, #129	; 0x81
#endif
}
 800b45c:	4618      	mov	r0, r3
 800b45e:	370c      	adds	r7, #12
 800b460:	46bd      	mov	sp, r7
 800b462:	bc80      	pop	{r7}
 800b464:	4770      	bx	lr

0800b466 <osSemaphoreGetCount>:
* @brief  Returns the current count value of a counting semaphore
* @param  semaphore_id  semaphore_id ID obtained by \ref osSemaphoreCreate.
* @retval  count value
*/
uint32_t osSemaphoreGetCount(osSemaphoreId semaphore_id)
{
 800b466:	b580      	push	{r7, lr}
 800b468:	b082      	sub	sp, #8
 800b46a:	af00      	add	r7, sp, #0
 800b46c:	6078      	str	r0, [r7, #4]
  return uxSemaphoreGetCount(semaphore_id);
 800b46e:	6878      	ldr	r0, [r7, #4]
 800b470:	f001 f819 	bl	800c4a6 <uxQueueMessagesWaiting>
 800b474:	4603      	mov	r3, r0
}
 800b476:	4618      	mov	r0, r3
 800b478:	3708      	adds	r7, #8
 800b47a:	46bd      	mov	sp, r7
 800b47c:	bd80      	pop	{r7, pc}
 800b47e:	bf00      	nop

0800b480 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b480:	b480      	push	{r7}
 800b482:	b083      	sub	sp, #12
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	f103 0208 	add.w	r2, r3, #8
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	f04f 32ff 	mov.w	r2, #4294967295
 800b498:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	f103 0208 	add.w	r2, r3, #8
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	f103 0208 	add.w	r2, r3, #8
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b4b4:	bf00      	nop
 800b4b6:	370c      	adds	r7, #12
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	bc80      	pop	{r7}
 800b4bc:	4770      	bx	lr

0800b4be <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b4be:	b480      	push	{r7}
 800b4c0:	b083      	sub	sp, #12
 800b4c2:	af00      	add	r7, sp, #0
 800b4c4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	2200      	movs	r2, #0
 800b4ca:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b4cc:	bf00      	nop
 800b4ce:	370c      	adds	r7, #12
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	bc80      	pop	{r7}
 800b4d4:	4770      	bx	lr

0800b4d6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b4d6:	b480      	push	{r7}
 800b4d8:	b085      	sub	sp, #20
 800b4da:	af00      	add	r7, sp, #0
 800b4dc:	6078      	str	r0, [r7, #4]
 800b4de:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	685b      	ldr	r3, [r3, #4]
 800b4e4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b4e6:	683b      	ldr	r3, [r7, #0]
 800b4e8:	68fa      	ldr	r2, [r7, #12]
 800b4ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	689a      	ldr	r2, [r3, #8]
 800b4f0:	683b      	ldr	r3, [r7, #0]
 800b4f2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	689b      	ldr	r3, [r3, #8]
 800b4f8:	683a      	ldr	r2, [r7, #0]
 800b4fa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	683a      	ldr	r2, [r7, #0]
 800b500:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800b502:	683b      	ldr	r3, [r7, #0]
 800b504:	687a      	ldr	r2, [r7, #4]
 800b506:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	1c5a      	adds	r2, r3, #1
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	601a      	str	r2, [r3, #0]
}
 800b512:	bf00      	nop
 800b514:	3714      	adds	r7, #20
 800b516:	46bd      	mov	sp, r7
 800b518:	bc80      	pop	{r7}
 800b51a:	4770      	bx	lr

0800b51c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b51c:	b480      	push	{r7}
 800b51e:	b085      	sub	sp, #20
 800b520:	af00      	add	r7, sp, #0
 800b522:	6078      	str	r0, [r7, #4]
 800b524:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b526:	683b      	ldr	r3, [r7, #0]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b52c:	68bb      	ldr	r3, [r7, #8]
 800b52e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b532:	d103      	bne.n	800b53c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	691b      	ldr	r3, [r3, #16]
 800b538:	60fb      	str	r3, [r7, #12]
 800b53a:	e00c      	b.n	800b556 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	3308      	adds	r3, #8
 800b540:	60fb      	str	r3, [r7, #12]
 800b542:	e002      	b.n	800b54a <vListInsert+0x2e>
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	685b      	ldr	r3, [r3, #4]
 800b548:	60fb      	str	r3, [r7, #12]
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	685b      	ldr	r3, [r3, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	68ba      	ldr	r2, [r7, #8]
 800b552:	429a      	cmp	r2, r3
 800b554:	d2f6      	bcs.n	800b544 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	685a      	ldr	r2, [r3, #4]
 800b55a:	683b      	ldr	r3, [r7, #0]
 800b55c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	685b      	ldr	r3, [r3, #4]
 800b562:	683a      	ldr	r2, [r7, #0]
 800b564:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b566:	683b      	ldr	r3, [r7, #0]
 800b568:	68fa      	ldr	r2, [r7, #12]
 800b56a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	683a      	ldr	r2, [r7, #0]
 800b570:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800b572:	683b      	ldr	r3, [r7, #0]
 800b574:	687a      	ldr	r2, [r7, #4]
 800b576:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	1c5a      	adds	r2, r3, #1
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	601a      	str	r2, [r3, #0]
}
 800b582:	bf00      	nop
 800b584:	3714      	adds	r7, #20
 800b586:	46bd      	mov	sp, r7
 800b588:	bc80      	pop	{r7}
 800b58a:	4770      	bx	lr

0800b58c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b58c:	b480      	push	{r7}
 800b58e:	b085      	sub	sp, #20
 800b590:	af00      	add	r7, sp, #0
 800b592:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	691b      	ldr	r3, [r3, #16]
 800b598:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	685b      	ldr	r3, [r3, #4]
 800b59e:	687a      	ldr	r2, [r7, #4]
 800b5a0:	6892      	ldr	r2, [r2, #8]
 800b5a2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	689b      	ldr	r3, [r3, #8]
 800b5a8:	687a      	ldr	r2, [r7, #4]
 800b5aa:	6852      	ldr	r2, [r2, #4]
 800b5ac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	685b      	ldr	r3, [r3, #4]
 800b5b2:	687a      	ldr	r2, [r7, #4]
 800b5b4:	429a      	cmp	r2, r3
 800b5b6:	d103      	bne.n	800b5c0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	689a      	ldr	r2, [r3, #8]
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	1e5a      	subs	r2, r3, #1
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	681b      	ldr	r3, [r3, #0]
}
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	3714      	adds	r7, #20
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	bc80      	pop	{r7}
 800b5dc:	4770      	bx	lr
	...

0800b5e0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b084      	sub	sp, #16
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
 800b5e8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d10a      	bne.n	800b60a <xQueueGenericReset+0x2a>
	__asm volatile
 800b5f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5f8:	f383 8811 	msr	BASEPRI, r3
 800b5fc:	f3bf 8f6f 	isb	sy
 800b600:	f3bf 8f4f 	dsb	sy
 800b604:	60bb      	str	r3, [r7, #8]
}
 800b606:	bf00      	nop
 800b608:	e7fe      	b.n	800b608 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b60a:	f003 fa3d 	bl	800ea88 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	681a      	ldr	r2, [r3, #0]
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b616:	68f9      	ldr	r1, [r7, #12]
 800b618:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b61a:	fb01 f303 	mul.w	r3, r1, r3
 800b61e:	441a      	add	r2, r3
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	2200      	movs	r2, #0
 800b628:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	681a      	ldr	r2, [r3, #0]
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	681a      	ldr	r2, [r3, #0]
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b63a:	3b01      	subs	r3, #1
 800b63c:	68f9      	ldr	r1, [r7, #12]
 800b63e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b640:	fb01 f303 	mul.w	r3, r1, r3
 800b644:	441a      	add	r2, r3
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	22ff      	movs	r2, #255	; 0xff
 800b64e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	22ff      	movs	r2, #255	; 0xff
 800b656:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b65a:	683b      	ldr	r3, [r7, #0]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d114      	bne.n	800b68a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	691b      	ldr	r3, [r3, #16]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d01a      	beq.n	800b69e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	3310      	adds	r3, #16
 800b66c:	4618      	mov	r0, r3
 800b66e:	f002 f96d 	bl	800d94c <xTaskRemoveFromEventList>
 800b672:	4603      	mov	r3, r0
 800b674:	2b00      	cmp	r3, #0
 800b676:	d012      	beq.n	800b69e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b678:	4b0c      	ldr	r3, [pc, #48]	; (800b6ac <xQueueGenericReset+0xcc>)
 800b67a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b67e:	601a      	str	r2, [r3, #0]
 800b680:	f3bf 8f4f 	dsb	sy
 800b684:	f3bf 8f6f 	isb	sy
 800b688:	e009      	b.n	800b69e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	3310      	adds	r3, #16
 800b68e:	4618      	mov	r0, r3
 800b690:	f7ff fef6 	bl	800b480 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	3324      	adds	r3, #36	; 0x24
 800b698:	4618      	mov	r0, r3
 800b69a:	f7ff fef1 	bl	800b480 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b69e:	f003 fa23 	bl	800eae8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b6a2:	2301      	movs	r3, #1
}
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	3710      	adds	r7, #16
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	bd80      	pop	{r7, pc}
 800b6ac:	e000ed04 	.word	0xe000ed04

0800b6b0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b08e      	sub	sp, #56	; 0x38
 800b6b4:	af02      	add	r7, sp, #8
 800b6b6:	60f8      	str	r0, [r7, #12]
 800b6b8:	60b9      	str	r1, [r7, #8]
 800b6ba:	607a      	str	r2, [r7, #4]
 800b6bc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d10a      	bne.n	800b6da <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b6c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6c8:	f383 8811 	msr	BASEPRI, r3
 800b6cc:	f3bf 8f6f 	isb	sy
 800b6d0:	f3bf 8f4f 	dsb	sy
 800b6d4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b6d6:	bf00      	nop
 800b6d8:	e7fe      	b.n	800b6d8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b6da:	683b      	ldr	r3, [r7, #0]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d10a      	bne.n	800b6f6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b6e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6e4:	f383 8811 	msr	BASEPRI, r3
 800b6e8:	f3bf 8f6f 	isb	sy
 800b6ec:	f3bf 8f4f 	dsb	sy
 800b6f0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b6f2:	bf00      	nop
 800b6f4:	e7fe      	b.n	800b6f4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d002      	beq.n	800b702 <xQueueGenericCreateStatic+0x52>
 800b6fc:	68bb      	ldr	r3, [r7, #8]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d001      	beq.n	800b706 <xQueueGenericCreateStatic+0x56>
 800b702:	2301      	movs	r3, #1
 800b704:	e000      	b.n	800b708 <xQueueGenericCreateStatic+0x58>
 800b706:	2300      	movs	r3, #0
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d10a      	bne.n	800b722 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b70c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b710:	f383 8811 	msr	BASEPRI, r3
 800b714:	f3bf 8f6f 	isb	sy
 800b718:	f3bf 8f4f 	dsb	sy
 800b71c:	623b      	str	r3, [r7, #32]
}
 800b71e:	bf00      	nop
 800b720:	e7fe      	b.n	800b720 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	2b00      	cmp	r3, #0
 800b726:	d102      	bne.n	800b72e <xQueueGenericCreateStatic+0x7e>
 800b728:	68bb      	ldr	r3, [r7, #8]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d101      	bne.n	800b732 <xQueueGenericCreateStatic+0x82>
 800b72e:	2301      	movs	r3, #1
 800b730:	e000      	b.n	800b734 <xQueueGenericCreateStatic+0x84>
 800b732:	2300      	movs	r3, #0
 800b734:	2b00      	cmp	r3, #0
 800b736:	d10a      	bne.n	800b74e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b73c:	f383 8811 	msr	BASEPRI, r3
 800b740:	f3bf 8f6f 	isb	sy
 800b744:	f3bf 8f4f 	dsb	sy
 800b748:	61fb      	str	r3, [r7, #28]
}
 800b74a:	bf00      	nop
 800b74c:	e7fe      	b.n	800b74c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b74e:	2348      	movs	r3, #72	; 0x48
 800b750:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b752:	697b      	ldr	r3, [r7, #20]
 800b754:	2b48      	cmp	r3, #72	; 0x48
 800b756:	d00a      	beq.n	800b76e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b75c:	f383 8811 	msr	BASEPRI, r3
 800b760:	f3bf 8f6f 	isb	sy
 800b764:	f3bf 8f4f 	dsb	sy
 800b768:	61bb      	str	r3, [r7, #24]
}
 800b76a:	bf00      	nop
 800b76c:	e7fe      	b.n	800b76c <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b76e:	683b      	ldr	r3, [r7, #0]
 800b770:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b774:	2b00      	cmp	r3, #0
 800b776:	d00d      	beq.n	800b794 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b77a:	2201      	movs	r2, #1
 800b77c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b780:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b786:	9300      	str	r3, [sp, #0]
 800b788:	4613      	mov	r3, r2
 800b78a:	687a      	ldr	r2, [r7, #4]
 800b78c:	68b9      	ldr	r1, [r7, #8]
 800b78e:	68f8      	ldr	r0, [r7, #12]
 800b790:	f000 f843 	bl	800b81a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800b794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b796:	4618      	mov	r0, r3
 800b798:	3730      	adds	r7, #48	; 0x30
 800b79a:	46bd      	mov	sp, r7
 800b79c:	bd80      	pop	{r7, pc}

0800b79e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b79e:	b580      	push	{r7, lr}
 800b7a0:	b08a      	sub	sp, #40	; 0x28
 800b7a2:	af02      	add	r7, sp, #8
 800b7a4:	60f8      	str	r0, [r7, #12]
 800b7a6:	60b9      	str	r1, [r7, #8]
 800b7a8:	4613      	mov	r3, r2
 800b7aa:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d10a      	bne.n	800b7c8 <xQueueGenericCreate+0x2a>
	__asm volatile
 800b7b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7b6:	f383 8811 	msr	BASEPRI, r3
 800b7ba:	f3bf 8f6f 	isb	sy
 800b7be:	f3bf 8f4f 	dsb	sy
 800b7c2:	613b      	str	r3, [r7, #16]
}
 800b7c4:	bf00      	nop
 800b7c6:	e7fe      	b.n	800b7c6 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800b7c8:	68bb      	ldr	r3, [r7, #8]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d102      	bne.n	800b7d4 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	61fb      	str	r3, [r7, #28]
 800b7d2:	e004      	b.n	800b7de <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	68ba      	ldr	r2, [r7, #8]
 800b7d8:	fb02 f303 	mul.w	r3, r2, r3
 800b7dc:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800b7de:	69fb      	ldr	r3, [r7, #28]
 800b7e0:	3348      	adds	r3, #72	; 0x48
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	f003 fa54 	bl	800ec90 <pvPortMalloc>
 800b7e8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b7ea:	69bb      	ldr	r3, [r7, #24]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d00f      	beq.n	800b810 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800b7f0:	69bb      	ldr	r3, [r7, #24]
 800b7f2:	3348      	adds	r3, #72	; 0x48
 800b7f4:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b7f6:	69bb      	ldr	r3, [r7, #24]
 800b7f8:	2200      	movs	r2, #0
 800b7fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b7fe:	79fa      	ldrb	r2, [r7, #7]
 800b800:	69bb      	ldr	r3, [r7, #24]
 800b802:	9300      	str	r3, [sp, #0]
 800b804:	4613      	mov	r3, r2
 800b806:	697a      	ldr	r2, [r7, #20]
 800b808:	68b9      	ldr	r1, [r7, #8]
 800b80a:	68f8      	ldr	r0, [r7, #12]
 800b80c:	f000 f805 	bl	800b81a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800b810:	69bb      	ldr	r3, [r7, #24]
	}
 800b812:	4618      	mov	r0, r3
 800b814:	3720      	adds	r7, #32
 800b816:	46bd      	mov	sp, r7
 800b818:	bd80      	pop	{r7, pc}

0800b81a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b81a:	b580      	push	{r7, lr}
 800b81c:	b084      	sub	sp, #16
 800b81e:	af00      	add	r7, sp, #0
 800b820:	60f8      	str	r0, [r7, #12]
 800b822:	60b9      	str	r1, [r7, #8]
 800b824:	607a      	str	r2, [r7, #4]
 800b826:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b828:	68bb      	ldr	r3, [r7, #8]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d103      	bne.n	800b836 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b82e:	69bb      	ldr	r3, [r7, #24]
 800b830:	69ba      	ldr	r2, [r7, #24]
 800b832:	601a      	str	r2, [r3, #0]
 800b834:	e002      	b.n	800b83c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b836:	69bb      	ldr	r3, [r7, #24]
 800b838:	687a      	ldr	r2, [r7, #4]
 800b83a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b83c:	69bb      	ldr	r3, [r7, #24]
 800b83e:	68fa      	ldr	r2, [r7, #12]
 800b840:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b842:	69bb      	ldr	r3, [r7, #24]
 800b844:	68ba      	ldr	r2, [r7, #8]
 800b846:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b848:	2101      	movs	r1, #1
 800b84a:	69b8      	ldr	r0, [r7, #24]
 800b84c:	f7ff fec8 	bl	800b5e0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b850:	bf00      	nop
 800b852:	3710      	adds	r7, #16
 800b854:	46bd      	mov	sp, r7
 800b856:	bd80      	pop	{r7, pc}

0800b858 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800b858:	b580      	push	{r7, lr}
 800b85a:	b082      	sub	sp, #8
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d00e      	beq.n	800b884 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	2200      	movs	r2, #0
 800b86a:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	2200      	movs	r2, #0
 800b870:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	2200      	movs	r2, #0
 800b876:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800b878:	2300      	movs	r3, #0
 800b87a:	2200      	movs	r2, #0
 800b87c:	2100      	movs	r1, #0
 800b87e:	6878      	ldr	r0, [r7, #4]
 800b880:	f000 f837 	bl	800b8f2 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800b884:	bf00      	nop
 800b886:	3708      	adds	r7, #8
 800b888:	46bd      	mov	sp, r7
 800b88a:	bd80      	pop	{r7, pc}

0800b88c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800b88c:	b580      	push	{r7, lr}
 800b88e:	b086      	sub	sp, #24
 800b890:	af00      	add	r7, sp, #0
 800b892:	4603      	mov	r3, r0
 800b894:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b896:	2301      	movs	r3, #1
 800b898:	617b      	str	r3, [r7, #20]
 800b89a:	2300      	movs	r3, #0
 800b89c:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800b89e:	79fb      	ldrb	r3, [r7, #7]
 800b8a0:	461a      	mov	r2, r3
 800b8a2:	6939      	ldr	r1, [r7, #16]
 800b8a4:	6978      	ldr	r0, [r7, #20]
 800b8a6:	f7ff ff7a 	bl	800b79e <xQueueGenericCreate>
 800b8aa:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800b8ac:	68f8      	ldr	r0, [r7, #12]
 800b8ae:	f7ff ffd3 	bl	800b858 <prvInitialiseMutex>

		return pxNewQueue;
 800b8b2:	68fb      	ldr	r3, [r7, #12]
	}
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	3718      	adds	r7, #24
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	bd80      	pop	{r7, pc}

0800b8bc <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b088      	sub	sp, #32
 800b8c0:	af02      	add	r7, sp, #8
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	6039      	str	r1, [r7, #0]
 800b8c6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b8c8:	2301      	movs	r3, #1
 800b8ca:	617b      	str	r3, [r7, #20]
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800b8d0:	79fb      	ldrb	r3, [r7, #7]
 800b8d2:	9300      	str	r3, [sp, #0]
 800b8d4:	683b      	ldr	r3, [r7, #0]
 800b8d6:	2200      	movs	r2, #0
 800b8d8:	6939      	ldr	r1, [r7, #16]
 800b8da:	6978      	ldr	r0, [r7, #20]
 800b8dc:	f7ff fee8 	bl	800b6b0 <xQueueGenericCreateStatic>
 800b8e0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800b8e2:	68f8      	ldr	r0, [r7, #12]
 800b8e4:	f7ff ffb8 	bl	800b858 <prvInitialiseMutex>

		return pxNewQueue;
 800b8e8:	68fb      	ldr	r3, [r7, #12]
	}
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	3718      	adds	r7, #24
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	bd80      	pop	{r7, pc}

0800b8f2 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b8f2:	b580      	push	{r7, lr}
 800b8f4:	b08e      	sub	sp, #56	; 0x38
 800b8f6:	af00      	add	r7, sp, #0
 800b8f8:	60f8      	str	r0, [r7, #12]
 800b8fa:	60b9      	str	r1, [r7, #8]
 800b8fc:	607a      	str	r2, [r7, #4]
 800b8fe:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b900:	2300      	movs	r3, #0
 800b902:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d10a      	bne.n	800b924 <xQueueGenericSend+0x32>
	__asm volatile
 800b90e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b912:	f383 8811 	msr	BASEPRI, r3
 800b916:	f3bf 8f6f 	isb	sy
 800b91a:	f3bf 8f4f 	dsb	sy
 800b91e:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b920:	bf00      	nop
 800b922:	e7fe      	b.n	800b922 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b924:	68bb      	ldr	r3, [r7, #8]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d103      	bne.n	800b932 <xQueueGenericSend+0x40>
 800b92a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b92c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d101      	bne.n	800b936 <xQueueGenericSend+0x44>
 800b932:	2301      	movs	r3, #1
 800b934:	e000      	b.n	800b938 <xQueueGenericSend+0x46>
 800b936:	2300      	movs	r3, #0
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d10a      	bne.n	800b952 <xQueueGenericSend+0x60>
	__asm volatile
 800b93c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b940:	f383 8811 	msr	BASEPRI, r3
 800b944:	f3bf 8f6f 	isb	sy
 800b948:	f3bf 8f4f 	dsb	sy
 800b94c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b94e:	bf00      	nop
 800b950:	e7fe      	b.n	800b950 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b952:	683b      	ldr	r3, [r7, #0]
 800b954:	2b02      	cmp	r3, #2
 800b956:	d103      	bne.n	800b960 <xQueueGenericSend+0x6e>
 800b958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b95a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b95c:	2b01      	cmp	r3, #1
 800b95e:	d101      	bne.n	800b964 <xQueueGenericSend+0x72>
 800b960:	2301      	movs	r3, #1
 800b962:	e000      	b.n	800b966 <xQueueGenericSend+0x74>
 800b964:	2300      	movs	r3, #0
 800b966:	2b00      	cmp	r3, #0
 800b968:	d10a      	bne.n	800b980 <xQueueGenericSend+0x8e>
	__asm volatile
 800b96a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b96e:	f383 8811 	msr	BASEPRI, r3
 800b972:	f3bf 8f6f 	isb	sy
 800b976:	f3bf 8f4f 	dsb	sy
 800b97a:	623b      	str	r3, [r7, #32]
}
 800b97c:	bf00      	nop
 800b97e:	e7fe      	b.n	800b97e <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b980:	f002 fa3e 	bl	800de00 <xTaskGetSchedulerState>
 800b984:	4603      	mov	r3, r0
 800b986:	2b00      	cmp	r3, #0
 800b988:	d102      	bne.n	800b990 <xQueueGenericSend+0x9e>
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d101      	bne.n	800b994 <xQueueGenericSend+0xa2>
 800b990:	2301      	movs	r3, #1
 800b992:	e000      	b.n	800b996 <xQueueGenericSend+0xa4>
 800b994:	2300      	movs	r3, #0
 800b996:	2b00      	cmp	r3, #0
 800b998:	d10a      	bne.n	800b9b0 <xQueueGenericSend+0xbe>
	__asm volatile
 800b99a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b99e:	f383 8811 	msr	BASEPRI, r3
 800b9a2:	f3bf 8f6f 	isb	sy
 800b9a6:	f3bf 8f4f 	dsb	sy
 800b9aa:	61fb      	str	r3, [r7, #28]
}
 800b9ac:	bf00      	nop
 800b9ae:	e7fe      	b.n	800b9ae <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b9b0:	f003 f86a 	bl	800ea88 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b9b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b9b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9bc:	429a      	cmp	r2, r3
 800b9be:	d302      	bcc.n	800b9c6 <xQueueGenericSend+0xd4>
 800b9c0:	683b      	ldr	r3, [r7, #0]
 800b9c2:	2b02      	cmp	r3, #2
 800b9c4:	d129      	bne.n	800ba1a <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b9c6:	683a      	ldr	r2, [r7, #0]
 800b9c8:	68b9      	ldr	r1, [r7, #8]
 800b9ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b9cc:	f000 fe01 	bl	800c5d2 <prvCopyDataToQueue>
 800b9d0:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b9d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d010      	beq.n	800b9fc <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b9da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9dc:	3324      	adds	r3, #36	; 0x24
 800b9de:	4618      	mov	r0, r3
 800b9e0:	f001 ffb4 	bl	800d94c <xTaskRemoveFromEventList>
 800b9e4:	4603      	mov	r3, r0
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d013      	beq.n	800ba12 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b9ea:	4b40      	ldr	r3, [pc, #256]	; (800baec <xQueueGenericSend+0x1fa>)
 800b9ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9f0:	601a      	str	r2, [r3, #0]
 800b9f2:	f3bf 8f4f 	dsb	sy
 800b9f6:	f3bf 8f6f 	isb	sy
 800b9fa:	e00a      	b.n	800ba12 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b9fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d007      	beq.n	800ba12 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ba02:	4b3a      	ldr	r3, [pc, #232]	; (800baec <xQueueGenericSend+0x1fa>)
 800ba04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba08:	601a      	str	r2, [r3, #0]
 800ba0a:	f3bf 8f4f 	dsb	sy
 800ba0e:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ba12:	f003 f869 	bl	800eae8 <vPortExitCritical>
				return pdPASS;
 800ba16:	2301      	movs	r3, #1
 800ba18:	e063      	b.n	800bae2 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d103      	bne.n	800ba28 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ba20:	f003 f862 	bl	800eae8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ba24:	2300      	movs	r3, #0
 800ba26:	e05c      	b.n	800bae2 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ba28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d106      	bne.n	800ba3c <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ba2e:	f107 0314 	add.w	r3, r7, #20
 800ba32:	4618      	mov	r0, r3
 800ba34:	f002 f874 	bl	800db20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ba38:	2301      	movs	r3, #1
 800ba3a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ba3c:	f003 f854 	bl	800eae8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ba40:	f001 fd0c 	bl	800d45c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ba44:	f003 f820 	bl	800ea88 <vPortEnterCritical>
 800ba48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ba4e:	b25b      	sxtb	r3, r3
 800ba50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba54:	d103      	bne.n	800ba5e <xQueueGenericSend+0x16c>
 800ba56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba58:	2200      	movs	r2, #0
 800ba5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ba5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ba64:	b25b      	sxtb	r3, r3
 800ba66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba6a:	d103      	bne.n	800ba74 <xQueueGenericSend+0x182>
 800ba6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba6e:	2200      	movs	r2, #0
 800ba70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ba74:	f003 f838 	bl	800eae8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ba78:	1d3a      	adds	r2, r7, #4
 800ba7a:	f107 0314 	add.w	r3, r7, #20
 800ba7e:	4611      	mov	r1, r2
 800ba80:	4618      	mov	r0, r3
 800ba82:	f002 f863 	bl	800db4c <xTaskCheckForTimeOut>
 800ba86:	4603      	mov	r3, r0
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d124      	bne.n	800bad6 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ba8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ba8e:	f000 feb9 	bl	800c804 <prvIsQueueFull>
 800ba92:	4603      	mov	r3, r0
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d018      	beq.n	800baca <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ba98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba9a:	3310      	adds	r3, #16
 800ba9c:	687a      	ldr	r2, [r7, #4]
 800ba9e:	4611      	mov	r1, r2
 800baa0:	4618      	mov	r0, r3
 800baa2:	f001 fef3 	bl	800d88c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800baa6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800baa8:	f000 fe23 	bl	800c6f2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800baac:	f001 fce4 	bl	800d478 <xTaskResumeAll>
 800bab0:	4603      	mov	r3, r0
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	f47f af7c 	bne.w	800b9b0 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800bab8:	4b0c      	ldr	r3, [pc, #48]	; (800baec <xQueueGenericSend+0x1fa>)
 800baba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800babe:	601a      	str	r2, [r3, #0]
 800bac0:	f3bf 8f4f 	dsb	sy
 800bac4:	f3bf 8f6f 	isb	sy
 800bac8:	e772      	b.n	800b9b0 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800baca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bacc:	f000 fe11 	bl	800c6f2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bad0:	f001 fcd2 	bl	800d478 <xTaskResumeAll>
 800bad4:	e76c      	b.n	800b9b0 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bad6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bad8:	f000 fe0b 	bl	800c6f2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800badc:	f001 fccc 	bl	800d478 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bae0:	2300      	movs	r3, #0
		}
	}
}
 800bae2:	4618      	mov	r0, r3
 800bae4:	3738      	adds	r7, #56	; 0x38
 800bae6:	46bd      	mov	sp, r7
 800bae8:	bd80      	pop	{r7, pc}
 800baea:	bf00      	nop
 800baec:	e000ed04 	.word	0xe000ed04

0800baf0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b08e      	sub	sp, #56	; 0x38
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	60f8      	str	r0, [r7, #12]
 800baf8:	60b9      	str	r1, [r7, #8]
 800bafa:	607a      	str	r2, [r7, #4]
 800bafc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bb02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d10a      	bne.n	800bb1e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800bb08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb0c:	f383 8811 	msr	BASEPRI, r3
 800bb10:	f3bf 8f6f 	isb	sy
 800bb14:	f3bf 8f4f 	dsb	sy
 800bb18:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bb1a:	bf00      	nop
 800bb1c:	e7fe      	b.n	800bb1c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bb1e:	68bb      	ldr	r3, [r7, #8]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d103      	bne.n	800bb2c <xQueueGenericSendFromISR+0x3c>
 800bb24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d101      	bne.n	800bb30 <xQueueGenericSendFromISR+0x40>
 800bb2c:	2301      	movs	r3, #1
 800bb2e:	e000      	b.n	800bb32 <xQueueGenericSendFromISR+0x42>
 800bb30:	2300      	movs	r3, #0
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d10a      	bne.n	800bb4c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800bb36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb3a:	f383 8811 	msr	BASEPRI, r3
 800bb3e:	f3bf 8f6f 	isb	sy
 800bb42:	f3bf 8f4f 	dsb	sy
 800bb46:	623b      	str	r3, [r7, #32]
}
 800bb48:	bf00      	nop
 800bb4a:	e7fe      	b.n	800bb4a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bb4c:	683b      	ldr	r3, [r7, #0]
 800bb4e:	2b02      	cmp	r3, #2
 800bb50:	d103      	bne.n	800bb5a <xQueueGenericSendFromISR+0x6a>
 800bb52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb56:	2b01      	cmp	r3, #1
 800bb58:	d101      	bne.n	800bb5e <xQueueGenericSendFromISR+0x6e>
 800bb5a:	2301      	movs	r3, #1
 800bb5c:	e000      	b.n	800bb60 <xQueueGenericSendFromISR+0x70>
 800bb5e:	2300      	movs	r3, #0
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d10a      	bne.n	800bb7a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800bb64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb68:	f383 8811 	msr	BASEPRI, r3
 800bb6c:	f3bf 8f6f 	isb	sy
 800bb70:	f3bf 8f4f 	dsb	sy
 800bb74:	61fb      	str	r3, [r7, #28]
}
 800bb76:	bf00      	nop
 800bb78:	e7fe      	b.n	800bb78 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bb7a:	f003 f849 	bl	800ec10 <vPortValidateInterruptPriority>
	__asm volatile
 800bb7e:	f3ef 8211 	mrs	r2, BASEPRI
 800bb82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb86:	f383 8811 	msr	BASEPRI, r3
 800bb8a:	f3bf 8f6f 	isb	sy
 800bb8e:	f3bf 8f4f 	dsb	sy
 800bb92:	61ba      	str	r2, [r7, #24]
 800bb94:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800bb96:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bb98:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bb9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bb9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bba2:	429a      	cmp	r2, r3
 800bba4:	d302      	bcc.n	800bbac <xQueueGenericSendFromISR+0xbc>
 800bba6:	683b      	ldr	r3, [r7, #0]
 800bba8:	2b02      	cmp	r3, #2
 800bbaa:	d12c      	bne.n	800bc06 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bbac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bbb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bbb6:	683a      	ldr	r2, [r7, #0]
 800bbb8:	68b9      	ldr	r1, [r7, #8]
 800bbba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bbbc:	f000 fd09 	bl	800c5d2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bbc0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800bbc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbc8:	d112      	bne.n	800bbf0 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bbca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d016      	beq.n	800bc00 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bbd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbd4:	3324      	adds	r3, #36	; 0x24
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	f001 feb8 	bl	800d94c <xTaskRemoveFromEventList>
 800bbdc:	4603      	mov	r3, r0
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d00e      	beq.n	800bc00 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d00b      	beq.n	800bc00 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	2201      	movs	r2, #1
 800bbec:	601a      	str	r2, [r3, #0]
 800bbee:	e007      	b.n	800bc00 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bbf0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bbf4:	3301      	adds	r3, #1
 800bbf6:	b2db      	uxtb	r3, r3
 800bbf8:	b25a      	sxtb	r2, r3
 800bbfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bc00:	2301      	movs	r3, #1
 800bc02:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800bc04:	e001      	b.n	800bc0a <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bc06:	2300      	movs	r3, #0
 800bc08:	637b      	str	r3, [r7, #52]	; 0x34
 800bc0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc0c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800bc0e:	693b      	ldr	r3, [r7, #16]
 800bc10:	f383 8811 	msr	BASEPRI, r3
}
 800bc14:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bc16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bc18:	4618      	mov	r0, r3
 800bc1a:	3738      	adds	r7, #56	; 0x38
 800bc1c:	46bd      	mov	sp, r7
 800bc1e:	bd80      	pop	{r7, pc}

0800bc20 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b08e      	sub	sp, #56	; 0x38
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	6078      	str	r0, [r7, #4]
 800bc28:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800bc2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d10a      	bne.n	800bc4a <xQueueGiveFromISR+0x2a>
	__asm volatile
 800bc34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc38:	f383 8811 	msr	BASEPRI, r3
 800bc3c:	f3bf 8f6f 	isb	sy
 800bc40:	f3bf 8f4f 	dsb	sy
 800bc44:	623b      	str	r3, [r7, #32]
}
 800bc46:	bf00      	nop
 800bc48:	e7fe      	b.n	800bc48 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800bc4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d00a      	beq.n	800bc68 <xQueueGiveFromISR+0x48>
	__asm volatile
 800bc52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc56:	f383 8811 	msr	BASEPRI, r3
 800bc5a:	f3bf 8f6f 	isb	sy
 800bc5e:	f3bf 8f4f 	dsb	sy
 800bc62:	61fb      	str	r3, [r7, #28]
}
 800bc64:	bf00      	nop
 800bc66:	e7fe      	b.n	800bc66 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800bc68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d103      	bne.n	800bc78 <xQueueGiveFromISR+0x58>
 800bc70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc72:	685b      	ldr	r3, [r3, #4]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d101      	bne.n	800bc7c <xQueueGiveFromISR+0x5c>
 800bc78:	2301      	movs	r3, #1
 800bc7a:	e000      	b.n	800bc7e <xQueueGiveFromISR+0x5e>
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d10a      	bne.n	800bc98 <xQueueGiveFromISR+0x78>
	__asm volatile
 800bc82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc86:	f383 8811 	msr	BASEPRI, r3
 800bc8a:	f3bf 8f6f 	isb	sy
 800bc8e:	f3bf 8f4f 	dsb	sy
 800bc92:	61bb      	str	r3, [r7, #24]
}
 800bc94:	bf00      	nop
 800bc96:	e7fe      	b.n	800bc96 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bc98:	f002 ffba 	bl	800ec10 <vPortValidateInterruptPriority>
	__asm volatile
 800bc9c:	f3ef 8211 	mrs	r2, BASEPRI
 800bca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bca4:	f383 8811 	msr	BASEPRI, r3
 800bca8:	f3bf 8f6f 	isb	sy
 800bcac:	f3bf 8f4f 	dsb	sy
 800bcb0:	617a      	str	r2, [r7, #20]
 800bcb2:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800bcb4:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bcb6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bcb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcbc:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800bcbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bcc4:	429a      	cmp	r2, r3
 800bcc6:	d22b      	bcs.n	800bd20 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bcc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bcce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bcd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcd4:	1c5a      	adds	r2, r3, #1
 800bcd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcd8:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bcda:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bcde:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bce2:	d112      	bne.n	800bd0a <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d016      	beq.n	800bd1a <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bcec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcee:	3324      	adds	r3, #36	; 0x24
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	f001 fe2b 	bl	800d94c <xTaskRemoveFromEventList>
 800bcf6:	4603      	mov	r3, r0
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d00e      	beq.n	800bd1a <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bcfc:	683b      	ldr	r3, [r7, #0]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d00b      	beq.n	800bd1a <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bd02:	683b      	ldr	r3, [r7, #0]
 800bd04:	2201      	movs	r2, #1
 800bd06:	601a      	str	r2, [r3, #0]
 800bd08:	e007      	b.n	800bd1a <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bd0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bd0e:	3301      	adds	r3, #1
 800bd10:	b2db      	uxtb	r3, r3
 800bd12:	b25a      	sxtb	r2, r3
 800bd14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bd1a:	2301      	movs	r3, #1
 800bd1c:	637b      	str	r3, [r7, #52]	; 0x34
 800bd1e:	e001      	b.n	800bd24 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bd20:	2300      	movs	r3, #0
 800bd22:	637b      	str	r3, [r7, #52]	; 0x34
 800bd24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd26:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	f383 8811 	msr	BASEPRI, r3
}
 800bd2e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bd30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bd32:	4618      	mov	r0, r3
 800bd34:	3738      	adds	r7, #56	; 0x38
 800bd36:	46bd      	mov	sp, r7
 800bd38:	bd80      	pop	{r7, pc}

0800bd3a <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800bd3a:	b580      	push	{r7, lr}
 800bd3c:	b08c      	sub	sp, #48	; 0x30
 800bd3e:	af00      	add	r7, sp, #0
 800bd40:	60f8      	str	r0, [r7, #12]
 800bd42:	60b9      	str	r1, [r7, #8]
 800bd44:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800bd46:	2300      	movs	r3, #0
 800bd48:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bd4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d10a      	bne.n	800bd6a <xQueueReceive+0x30>
	__asm volatile
 800bd54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd58:	f383 8811 	msr	BASEPRI, r3
 800bd5c:	f3bf 8f6f 	isb	sy
 800bd60:	f3bf 8f4f 	dsb	sy
 800bd64:	623b      	str	r3, [r7, #32]
}
 800bd66:	bf00      	nop
 800bd68:	e7fe      	b.n	800bd68 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bd6a:	68bb      	ldr	r3, [r7, #8]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d103      	bne.n	800bd78 <xQueueReceive+0x3e>
 800bd70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d101      	bne.n	800bd7c <xQueueReceive+0x42>
 800bd78:	2301      	movs	r3, #1
 800bd7a:	e000      	b.n	800bd7e <xQueueReceive+0x44>
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d10a      	bne.n	800bd98 <xQueueReceive+0x5e>
	__asm volatile
 800bd82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd86:	f383 8811 	msr	BASEPRI, r3
 800bd8a:	f3bf 8f6f 	isb	sy
 800bd8e:	f3bf 8f4f 	dsb	sy
 800bd92:	61fb      	str	r3, [r7, #28]
}
 800bd94:	bf00      	nop
 800bd96:	e7fe      	b.n	800bd96 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bd98:	f002 f832 	bl	800de00 <xTaskGetSchedulerState>
 800bd9c:	4603      	mov	r3, r0
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d102      	bne.n	800bda8 <xQueueReceive+0x6e>
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d101      	bne.n	800bdac <xQueueReceive+0x72>
 800bda8:	2301      	movs	r3, #1
 800bdaa:	e000      	b.n	800bdae <xQueueReceive+0x74>
 800bdac:	2300      	movs	r3, #0
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d10a      	bne.n	800bdc8 <xQueueReceive+0x8e>
	__asm volatile
 800bdb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdb6:	f383 8811 	msr	BASEPRI, r3
 800bdba:	f3bf 8f6f 	isb	sy
 800bdbe:	f3bf 8f4f 	dsb	sy
 800bdc2:	61bb      	str	r3, [r7, #24]
}
 800bdc4:	bf00      	nop
 800bdc6:	e7fe      	b.n	800bdc6 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800bdc8:	f002 fe5e 	bl	800ea88 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bdcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdd0:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bdd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d01f      	beq.n	800be18 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bdd8:	68b9      	ldr	r1, [r7, #8]
 800bdda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bddc:	f000 fc63 	bl	800c6a6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bde0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bde2:	1e5a      	subs	r2, r3, #1
 800bde4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bde6:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bde8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdea:	691b      	ldr	r3, [r3, #16]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d00f      	beq.n	800be10 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bdf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdf2:	3310      	adds	r3, #16
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	f001 fda9 	bl	800d94c <xTaskRemoveFromEventList>
 800bdfa:	4603      	mov	r3, r0
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d007      	beq.n	800be10 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800be00:	4b3c      	ldr	r3, [pc, #240]	; (800bef4 <xQueueReceive+0x1ba>)
 800be02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be06:	601a      	str	r2, [r3, #0]
 800be08:	f3bf 8f4f 	dsb	sy
 800be0c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800be10:	f002 fe6a 	bl	800eae8 <vPortExitCritical>
				return pdPASS;
 800be14:	2301      	movs	r3, #1
 800be16:	e069      	b.n	800beec <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d103      	bne.n	800be26 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800be1e:	f002 fe63 	bl	800eae8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800be22:	2300      	movs	r3, #0
 800be24:	e062      	b.n	800beec <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800be26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d106      	bne.n	800be3a <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800be2c:	f107 0310 	add.w	r3, r7, #16
 800be30:	4618      	mov	r0, r3
 800be32:	f001 fe75 	bl	800db20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800be36:	2301      	movs	r3, #1
 800be38:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800be3a:	f002 fe55 	bl	800eae8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800be3e:	f001 fb0d 	bl	800d45c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800be42:	f002 fe21 	bl	800ea88 <vPortEnterCritical>
 800be46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800be4c:	b25b      	sxtb	r3, r3
 800be4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be52:	d103      	bne.n	800be5c <xQueueReceive+0x122>
 800be54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be56:	2200      	movs	r2, #0
 800be58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800be5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800be62:	b25b      	sxtb	r3, r3
 800be64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be68:	d103      	bne.n	800be72 <xQueueReceive+0x138>
 800be6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be6c:	2200      	movs	r2, #0
 800be6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800be72:	f002 fe39 	bl	800eae8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800be76:	1d3a      	adds	r2, r7, #4
 800be78:	f107 0310 	add.w	r3, r7, #16
 800be7c:	4611      	mov	r1, r2
 800be7e:	4618      	mov	r0, r3
 800be80:	f001 fe64 	bl	800db4c <xTaskCheckForTimeOut>
 800be84:	4603      	mov	r3, r0
 800be86:	2b00      	cmp	r3, #0
 800be88:	d123      	bne.n	800bed2 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800be8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be8c:	f000 fc83 	bl	800c796 <prvIsQueueEmpty>
 800be90:	4603      	mov	r3, r0
 800be92:	2b00      	cmp	r3, #0
 800be94:	d017      	beq.n	800bec6 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800be96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be98:	3324      	adds	r3, #36	; 0x24
 800be9a:	687a      	ldr	r2, [r7, #4]
 800be9c:	4611      	mov	r1, r2
 800be9e:	4618      	mov	r0, r3
 800bea0:	f001 fcf4 	bl	800d88c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bea4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bea6:	f000 fc24 	bl	800c6f2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800beaa:	f001 fae5 	bl	800d478 <xTaskResumeAll>
 800beae:	4603      	mov	r3, r0
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d189      	bne.n	800bdc8 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800beb4:	4b0f      	ldr	r3, [pc, #60]	; (800bef4 <xQueueReceive+0x1ba>)
 800beb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800beba:	601a      	str	r2, [r3, #0]
 800bebc:	f3bf 8f4f 	dsb	sy
 800bec0:	f3bf 8f6f 	isb	sy
 800bec4:	e780      	b.n	800bdc8 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800bec6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bec8:	f000 fc13 	bl	800c6f2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800becc:	f001 fad4 	bl	800d478 <xTaskResumeAll>
 800bed0:	e77a      	b.n	800bdc8 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800bed2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bed4:	f000 fc0d 	bl	800c6f2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bed8:	f001 face 	bl	800d478 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bedc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bede:	f000 fc5a 	bl	800c796 <prvIsQueueEmpty>
 800bee2:	4603      	mov	r3, r0
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	f43f af6f 	beq.w	800bdc8 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800beea:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800beec:	4618      	mov	r0, r3
 800beee:	3730      	adds	r7, #48	; 0x30
 800bef0:	46bd      	mov	sp, r7
 800bef2:	bd80      	pop	{r7, pc}
 800bef4:	e000ed04 	.word	0xe000ed04

0800bef8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800bef8:	b580      	push	{r7, lr}
 800befa:	b08e      	sub	sp, #56	; 0x38
 800befc:	af00      	add	r7, sp, #0
 800befe:	6078      	str	r0, [r7, #4]
 800bf00:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800bf02:	2300      	movs	r3, #0
 800bf04:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bf0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d10a      	bne.n	800bf2a <xQueueSemaphoreTake+0x32>
	__asm volatile
 800bf14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf18:	f383 8811 	msr	BASEPRI, r3
 800bf1c:	f3bf 8f6f 	isb	sy
 800bf20:	f3bf 8f4f 	dsb	sy
 800bf24:	623b      	str	r3, [r7, #32]
}
 800bf26:	bf00      	nop
 800bf28:	e7fe      	b.n	800bf28 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800bf2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d00a      	beq.n	800bf48 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800bf32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf36:	f383 8811 	msr	BASEPRI, r3
 800bf3a:	f3bf 8f6f 	isb	sy
 800bf3e:	f3bf 8f4f 	dsb	sy
 800bf42:	61fb      	str	r3, [r7, #28]
}
 800bf44:	bf00      	nop
 800bf46:	e7fe      	b.n	800bf46 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bf48:	f001 ff5a 	bl	800de00 <xTaskGetSchedulerState>
 800bf4c:	4603      	mov	r3, r0
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d102      	bne.n	800bf58 <xQueueSemaphoreTake+0x60>
 800bf52:	683b      	ldr	r3, [r7, #0]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d101      	bne.n	800bf5c <xQueueSemaphoreTake+0x64>
 800bf58:	2301      	movs	r3, #1
 800bf5a:	e000      	b.n	800bf5e <xQueueSemaphoreTake+0x66>
 800bf5c:	2300      	movs	r3, #0
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d10a      	bne.n	800bf78 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800bf62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf66:	f383 8811 	msr	BASEPRI, r3
 800bf6a:	f3bf 8f6f 	isb	sy
 800bf6e:	f3bf 8f4f 	dsb	sy
 800bf72:	61bb      	str	r3, [r7, #24]
}
 800bf74:	bf00      	nop
 800bf76:	e7fe      	b.n	800bf76 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800bf78:	f002 fd86 	bl	800ea88 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800bf7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf80:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800bf82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d024      	beq.n	800bfd2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800bf88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf8a:	1e5a      	subs	r2, r3, #1
 800bf8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf8e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bf90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d104      	bne.n	800bfa2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800bf98:	f002 f914 	bl	800e1c4 <pvTaskIncrementMutexHeldCount>
 800bf9c:	4602      	mov	r2, r0
 800bf9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfa0:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bfa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfa4:	691b      	ldr	r3, [r3, #16]
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d00f      	beq.n	800bfca <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bfaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfac:	3310      	adds	r3, #16
 800bfae:	4618      	mov	r0, r3
 800bfb0:	f001 fccc 	bl	800d94c <xTaskRemoveFromEventList>
 800bfb4:	4603      	mov	r3, r0
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d007      	beq.n	800bfca <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bfba:	4b54      	ldr	r3, [pc, #336]	; (800c10c <xQueueSemaphoreTake+0x214>)
 800bfbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bfc0:	601a      	str	r2, [r3, #0]
 800bfc2:	f3bf 8f4f 	dsb	sy
 800bfc6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bfca:	f002 fd8d 	bl	800eae8 <vPortExitCritical>
				return pdPASS;
 800bfce:	2301      	movs	r3, #1
 800bfd0:	e097      	b.n	800c102 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bfd2:	683b      	ldr	r3, [r7, #0]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d111      	bne.n	800bffc <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800bfd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d00a      	beq.n	800bff4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800bfde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfe2:	f383 8811 	msr	BASEPRI, r3
 800bfe6:	f3bf 8f6f 	isb	sy
 800bfea:	f3bf 8f4f 	dsb	sy
 800bfee:	617b      	str	r3, [r7, #20]
}
 800bff0:	bf00      	nop
 800bff2:	e7fe      	b.n	800bff2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800bff4:	f002 fd78 	bl	800eae8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bff8:	2300      	movs	r3, #0
 800bffa:	e082      	b.n	800c102 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d106      	bne.n	800c010 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c002:	f107 030c 	add.w	r3, r7, #12
 800c006:	4618      	mov	r0, r3
 800c008:	f001 fd8a 	bl	800db20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c00c:	2301      	movs	r3, #1
 800c00e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c010:	f002 fd6a 	bl	800eae8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c014:	f001 fa22 	bl	800d45c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c018:	f002 fd36 	bl	800ea88 <vPortEnterCritical>
 800c01c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c01e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c022:	b25b      	sxtb	r3, r3
 800c024:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c028:	d103      	bne.n	800c032 <xQueueSemaphoreTake+0x13a>
 800c02a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c02c:	2200      	movs	r2, #0
 800c02e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c034:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c038:	b25b      	sxtb	r3, r3
 800c03a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c03e:	d103      	bne.n	800c048 <xQueueSemaphoreTake+0x150>
 800c040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c042:	2200      	movs	r2, #0
 800c044:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c048:	f002 fd4e 	bl	800eae8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c04c:	463a      	mov	r2, r7
 800c04e:	f107 030c 	add.w	r3, r7, #12
 800c052:	4611      	mov	r1, r2
 800c054:	4618      	mov	r0, r3
 800c056:	f001 fd79 	bl	800db4c <xTaskCheckForTimeOut>
 800c05a:	4603      	mov	r3, r0
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d132      	bne.n	800c0c6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c060:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c062:	f000 fb98 	bl	800c796 <prvIsQueueEmpty>
 800c066:	4603      	mov	r3, r0
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d026      	beq.n	800c0ba <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c06c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d109      	bne.n	800c088 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800c074:	f002 fd08 	bl	800ea88 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800c078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c07a:	685b      	ldr	r3, [r3, #4]
 800c07c:	4618      	mov	r0, r3
 800c07e:	f001 fedd 	bl	800de3c <xTaskPriorityInherit>
 800c082:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800c084:	f002 fd30 	bl	800eae8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c08a:	3324      	adds	r3, #36	; 0x24
 800c08c:	683a      	ldr	r2, [r7, #0]
 800c08e:	4611      	mov	r1, r2
 800c090:	4618      	mov	r0, r3
 800c092:	f001 fbfb 	bl	800d88c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c096:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c098:	f000 fb2b 	bl	800c6f2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c09c:	f001 f9ec 	bl	800d478 <xTaskResumeAll>
 800c0a0:	4603      	mov	r3, r0
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	f47f af68 	bne.w	800bf78 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800c0a8:	4b18      	ldr	r3, [pc, #96]	; (800c10c <xQueueSemaphoreTake+0x214>)
 800c0aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c0ae:	601a      	str	r2, [r3, #0]
 800c0b0:	f3bf 8f4f 	dsb	sy
 800c0b4:	f3bf 8f6f 	isb	sy
 800c0b8:	e75e      	b.n	800bf78 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c0ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c0bc:	f000 fb19 	bl	800c6f2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c0c0:	f001 f9da 	bl	800d478 <xTaskResumeAll>
 800c0c4:	e758      	b.n	800bf78 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c0c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c0c8:	f000 fb13 	bl	800c6f2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c0cc:	f001 f9d4 	bl	800d478 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c0d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c0d2:	f000 fb60 	bl	800c796 <prvIsQueueEmpty>
 800c0d6:	4603      	mov	r3, r0
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	f43f af4d 	beq.w	800bf78 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c0de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d00d      	beq.n	800c100 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800c0e4:	f002 fcd0 	bl	800ea88 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c0e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c0ea:	f000 fa5b 	bl	800c5a4 <prvGetDisinheritPriorityAfterTimeout>
 800c0ee:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800c0f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0f2:	685b      	ldr	r3, [r3, #4]
 800c0f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c0f6:	4618      	mov	r0, r3
 800c0f8:	f001 ffac 	bl	800e054 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c0fc:	f002 fcf4 	bl	800eae8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c100:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800c102:	4618      	mov	r0, r3
 800c104:	3738      	adds	r7, #56	; 0x38
 800c106:	46bd      	mov	sp, r7
 800c108:	bd80      	pop	{r7, pc}
 800c10a:	bf00      	nop
 800c10c:	e000ed04 	.word	0xe000ed04

0800c110 <xQueuePeek>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c110:	b580      	push	{r7, lr}
 800c112:	b08e      	sub	sp, #56	; 0x38
 800c114:	af00      	add	r7, sp, #0
 800c116:	60f8      	str	r0, [r7, #12]
 800c118:	60b9      	str	r1, [r7, #8]
 800c11a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c11c:	2300      	movs	r3, #0
 800c11e:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c126:	2b00      	cmp	r3, #0
 800c128:	d10a      	bne.n	800c140 <xQueuePeek+0x30>
	__asm volatile
 800c12a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c12e:	f383 8811 	msr	BASEPRI, r3
 800c132:	f3bf 8f6f 	isb	sy
 800c136:	f3bf 8f4f 	dsb	sy
 800c13a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c13c:	bf00      	nop
 800c13e:	e7fe      	b.n	800c13e <xQueuePeek+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c140:	68bb      	ldr	r3, [r7, #8]
 800c142:	2b00      	cmp	r3, #0
 800c144:	d103      	bne.n	800c14e <xQueuePeek+0x3e>
 800c146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d101      	bne.n	800c152 <xQueuePeek+0x42>
 800c14e:	2301      	movs	r3, #1
 800c150:	e000      	b.n	800c154 <xQueuePeek+0x44>
 800c152:	2300      	movs	r3, #0
 800c154:	2b00      	cmp	r3, #0
 800c156:	d10a      	bne.n	800c16e <xQueuePeek+0x5e>
	__asm volatile
 800c158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c15c:	f383 8811 	msr	BASEPRI, r3
 800c160:	f3bf 8f6f 	isb	sy
 800c164:	f3bf 8f4f 	dsb	sy
 800c168:	623b      	str	r3, [r7, #32]
}
 800c16a:	bf00      	nop
 800c16c:	e7fe      	b.n	800c16c <xQueuePeek+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c16e:	f001 fe47 	bl	800de00 <xTaskGetSchedulerState>
 800c172:	4603      	mov	r3, r0
 800c174:	2b00      	cmp	r3, #0
 800c176:	d102      	bne.n	800c17e <xQueuePeek+0x6e>
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d101      	bne.n	800c182 <xQueuePeek+0x72>
 800c17e:	2301      	movs	r3, #1
 800c180:	e000      	b.n	800c184 <xQueuePeek+0x74>
 800c182:	2300      	movs	r3, #0
 800c184:	2b00      	cmp	r3, #0
 800c186:	d10a      	bne.n	800c19e <xQueuePeek+0x8e>
	__asm volatile
 800c188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c18c:	f383 8811 	msr	BASEPRI, r3
 800c190:	f3bf 8f6f 	isb	sy
 800c194:	f3bf 8f4f 	dsb	sy
 800c198:	61fb      	str	r3, [r7, #28]
}
 800c19a:	bf00      	nop
 800c19c:	e7fe      	b.n	800c19c <xQueuePeek+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800c19e:	f002 fc73 	bl	800ea88 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c1a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1a6:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c1a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d021      	beq.n	800c1f2 <xQueuePeek+0xe2>
			{
				/* Remember the read position so it can be reset after the data
				is read from the queue as this function is only peeking the
				data, not removing it. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 800c1ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1b0:	68db      	ldr	r3, [r3, #12]
 800c1b2:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c1b4:	68b9      	ldr	r1, [r7, #8]
 800c1b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c1b8:	f000 fa75 	bl	800c6a6 <prvCopyDataFromQueue>
				traceQUEUE_PEEK( pxQueue );

				/* The data is not being removed, so reset the read pointer. */
				pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 800c1bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c1c0:	60da      	str	r2, [r3, #12]

				/* The data is being left in the queue, so see if there are
				any other tasks waiting for the data. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c1c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d00f      	beq.n	800c1ea <xQueuePeek+0xda>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c1ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1cc:	3324      	adds	r3, #36	; 0x24
 800c1ce:	4618      	mov	r0, r3
 800c1d0:	f001 fbbc 	bl	800d94c <xTaskRemoveFromEventList>
 800c1d4:	4603      	mov	r3, r0
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d007      	beq.n	800c1ea <xQueuePeek+0xda>
					{
						/* The task waiting has a higher priority than this task. */
						queueYIELD_IF_USING_PREEMPTION();
 800c1da:	4b3d      	ldr	r3, [pc, #244]	; (800c2d0 <xQueuePeek+0x1c0>)
 800c1dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c1e0:	601a      	str	r2, [r3, #0]
 800c1e2:	f3bf 8f4f 	dsb	sy
 800c1e6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c1ea:	f002 fc7d 	bl	800eae8 <vPortExitCritical>
				return pdPASS;
 800c1ee:	2301      	movs	r3, #1
 800c1f0:	e069      	b.n	800c2c6 <xQueuePeek+0x1b6>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d103      	bne.n	800c200 <xQueuePeek+0xf0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c1f8:	f002 fc76 	bl	800eae8 <vPortExitCritical>
					traceQUEUE_PEEK_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	e062      	b.n	800c2c6 <xQueuePeek+0x1b6>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c202:	2b00      	cmp	r3, #0
 800c204:	d106      	bne.n	800c214 <xQueuePeek+0x104>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure ready to enter the blocked
					state. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c206:	f107 0314 	add.w	r3, r7, #20
 800c20a:	4618      	mov	r0, r3
 800c20c:	f001 fc88 	bl	800db20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c210:	2301      	movs	r3, #1
 800c212:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c214:	f002 fc68 	bl	800eae8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c218:	f001 f920 	bl	800d45c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c21c:	f002 fc34 	bl	800ea88 <vPortEnterCritical>
 800c220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c222:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c226:	b25b      	sxtb	r3, r3
 800c228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c22c:	d103      	bne.n	800c236 <xQueuePeek+0x126>
 800c22e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c230:	2200      	movs	r2, #0
 800c232:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c238:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c23c:	b25b      	sxtb	r3, r3
 800c23e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c242:	d103      	bne.n	800c24c <xQueuePeek+0x13c>
 800c244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c246:	2200      	movs	r2, #0
 800c248:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c24c:	f002 fc4c 	bl	800eae8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c250:	1d3a      	adds	r2, r7, #4
 800c252:	f107 0314 	add.w	r3, r7, #20
 800c256:	4611      	mov	r1, r2
 800c258:	4618      	mov	r0, r3
 800c25a:	f001 fc77 	bl	800db4c <xTaskCheckForTimeOut>
 800c25e:	4603      	mov	r3, r0
 800c260:	2b00      	cmp	r3, #0
 800c262:	d123      	bne.n	800c2ac <xQueuePeek+0x19c>
		{
			/* Timeout has not expired yet, check to see if there is data in the
			queue now, and if not enter the Blocked state to wait for data. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c264:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c266:	f000 fa96 	bl	800c796 <prvIsQueueEmpty>
 800c26a:	4603      	mov	r3, r0
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d017      	beq.n	800c2a0 <xQueuePeek+0x190>
			{
				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c272:	3324      	adds	r3, #36	; 0x24
 800c274:	687a      	ldr	r2, [r7, #4]
 800c276:	4611      	mov	r1, r2
 800c278:	4618      	mov	r0, r3
 800c27a:	f001 fb07 	bl	800d88c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c27e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c280:	f000 fa37 	bl	800c6f2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c284:	f001 f8f8 	bl	800d478 <xTaskResumeAll>
 800c288:	4603      	mov	r3, r0
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d187      	bne.n	800c19e <xQueuePeek+0x8e>
				{
					portYIELD_WITHIN_API();
 800c28e:	4b10      	ldr	r3, [pc, #64]	; (800c2d0 <xQueuePeek+0x1c0>)
 800c290:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c294:	601a      	str	r2, [r3, #0]
 800c296:	f3bf 8f4f 	dsb	sy
 800c29a:	f3bf 8f6f 	isb	sy
 800c29e:	e77e      	b.n	800c19e <xQueuePeek+0x8e>
			}
			else
			{
				/* There is data in the queue now, so don't enter the blocked
				state, instead return to try and obtain the data. */
				prvUnlockQueue( pxQueue );
 800c2a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c2a2:	f000 fa26 	bl	800c6f2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c2a6:	f001 f8e7 	bl	800d478 <xTaskResumeAll>
 800c2aa:	e778      	b.n	800c19e <xQueuePeek+0x8e>
		}
		else
		{
			/* The timeout has expired.  If there is still no data in the queue
			exit, otherwise go back and try to read the data again. */
			prvUnlockQueue( pxQueue );
 800c2ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c2ae:	f000 fa20 	bl	800c6f2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c2b2:	f001 f8e1 	bl	800d478 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c2b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c2b8:	f000 fa6d 	bl	800c796 <prvIsQueueEmpty>
 800c2bc:	4603      	mov	r3, r0
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	f43f af6d 	beq.w	800c19e <xQueuePeek+0x8e>
			{
				traceQUEUE_PEEK_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c2c4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	3738      	adds	r7, #56	; 0x38
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	bd80      	pop	{r7, pc}
 800c2ce:	bf00      	nop
 800c2d0:	e000ed04 	.word	0xe000ed04

0800c2d4 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b08e      	sub	sp, #56	; 0x38
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	60f8      	str	r0, [r7, #12]
 800c2dc:	60b9      	str	r1, [r7, #8]
 800c2de:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c2e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d10a      	bne.n	800c300 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800c2ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2ee:	f383 8811 	msr	BASEPRI, r3
 800c2f2:	f3bf 8f6f 	isb	sy
 800c2f6:	f3bf 8f4f 	dsb	sy
 800c2fa:	623b      	str	r3, [r7, #32]
}
 800c2fc:	bf00      	nop
 800c2fe:	e7fe      	b.n	800c2fe <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c300:	68bb      	ldr	r3, [r7, #8]
 800c302:	2b00      	cmp	r3, #0
 800c304:	d103      	bne.n	800c30e <xQueueReceiveFromISR+0x3a>
 800c306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d101      	bne.n	800c312 <xQueueReceiveFromISR+0x3e>
 800c30e:	2301      	movs	r3, #1
 800c310:	e000      	b.n	800c314 <xQueueReceiveFromISR+0x40>
 800c312:	2300      	movs	r3, #0
 800c314:	2b00      	cmp	r3, #0
 800c316:	d10a      	bne.n	800c32e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800c318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c31c:	f383 8811 	msr	BASEPRI, r3
 800c320:	f3bf 8f6f 	isb	sy
 800c324:	f3bf 8f4f 	dsb	sy
 800c328:	61fb      	str	r3, [r7, #28]
}
 800c32a:	bf00      	nop
 800c32c:	e7fe      	b.n	800c32c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c32e:	f002 fc6f 	bl	800ec10 <vPortValidateInterruptPriority>
	__asm volatile
 800c332:	f3ef 8211 	mrs	r2, BASEPRI
 800c336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c33a:	f383 8811 	msr	BASEPRI, r3
 800c33e:	f3bf 8f6f 	isb	sy
 800c342:	f3bf 8f4f 	dsb	sy
 800c346:	61ba      	str	r2, [r7, #24]
 800c348:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c34a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c34c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c34e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c352:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c356:	2b00      	cmp	r3, #0
 800c358:	d02f      	beq.n	800c3ba <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c35a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c35c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c360:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c364:	68b9      	ldr	r1, [r7, #8]
 800c366:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c368:	f000 f99d 	bl	800c6a6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c36c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c36e:	1e5a      	subs	r2, r3, #1
 800c370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c372:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c374:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c37c:	d112      	bne.n	800c3a4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c37e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c380:	691b      	ldr	r3, [r3, #16]
 800c382:	2b00      	cmp	r3, #0
 800c384:	d016      	beq.n	800c3b4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c388:	3310      	adds	r3, #16
 800c38a:	4618      	mov	r0, r3
 800c38c:	f001 fade 	bl	800d94c <xTaskRemoveFromEventList>
 800c390:	4603      	mov	r3, r0
 800c392:	2b00      	cmp	r3, #0
 800c394:	d00e      	beq.n	800c3b4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d00b      	beq.n	800c3b4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	2201      	movs	r2, #1
 800c3a0:	601a      	str	r2, [r3, #0]
 800c3a2:	e007      	b.n	800c3b4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c3a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c3a8:	3301      	adds	r3, #1
 800c3aa:	b2db      	uxtb	r3, r3
 800c3ac:	b25a      	sxtb	r2, r3
 800c3ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800c3b4:	2301      	movs	r3, #1
 800c3b6:	637b      	str	r3, [r7, #52]	; 0x34
 800c3b8:	e001      	b.n	800c3be <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	637b      	str	r3, [r7, #52]	; 0x34
 800c3be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3c0:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c3c2:	693b      	ldr	r3, [r7, #16]
 800c3c4:	f383 8811 	msr	BASEPRI, r3
}
 800c3c8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c3ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	3738      	adds	r7, #56	; 0x38
 800c3d0:	46bd      	mov	sp, r7
 800c3d2:	bd80      	pop	{r7, pc}

0800c3d4 <xQueuePeekFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
{
 800c3d4:	b580      	push	{r7, lr}
 800c3d6:	b08c      	sub	sp, #48	; 0x30
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	6078      	str	r0, [r7, #4]
 800c3dc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	62bb      	str	r3, [r7, #40]	; 0x28

	configASSERT( pxQueue );
 800c3e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d10a      	bne.n	800c3fe <xQueuePeekFromISR+0x2a>
	__asm volatile
 800c3e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3ec:	f383 8811 	msr	BASEPRI, r3
 800c3f0:	f3bf 8f6f 	isb	sy
 800c3f4:	f3bf 8f4f 	dsb	sy
 800c3f8:	61fb      	str	r3, [r7, #28]
}
 800c3fa:	bf00      	nop
 800c3fc:	e7fe      	b.n	800c3fc <xQueuePeekFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c3fe:	683b      	ldr	r3, [r7, #0]
 800c400:	2b00      	cmp	r3, #0
 800c402:	d103      	bne.n	800c40c <xQueuePeekFromISR+0x38>
 800c404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d101      	bne.n	800c410 <xQueuePeekFromISR+0x3c>
 800c40c:	2301      	movs	r3, #1
 800c40e:	e000      	b.n	800c412 <xQueuePeekFromISR+0x3e>
 800c410:	2300      	movs	r3, #0
 800c412:	2b00      	cmp	r3, #0
 800c414:	d10a      	bne.n	800c42c <xQueuePeekFromISR+0x58>
	__asm volatile
 800c416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c41a:	f383 8811 	msr	BASEPRI, r3
 800c41e:	f3bf 8f6f 	isb	sy
 800c422:	f3bf 8f4f 	dsb	sy
 800c426:	61bb      	str	r3, [r7, #24]
}
 800c428:	bf00      	nop
 800c42a:	e7fe      	b.n	800c42a <xQueuePeekFromISR+0x56>
	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 800c42c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c42e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c430:	2b00      	cmp	r3, #0
 800c432:	d10a      	bne.n	800c44a <xQueuePeekFromISR+0x76>
	__asm volatile
 800c434:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c438:	f383 8811 	msr	BASEPRI, r3
 800c43c:	f3bf 8f6f 	isb	sy
 800c440:	f3bf 8f4f 	dsb	sy
 800c444:	617b      	str	r3, [r7, #20]
}
 800c446:	bf00      	nop
 800c448:	e7fe      	b.n	800c448 <xQueuePeekFromISR+0x74>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c44a:	f002 fbe1 	bl	800ec10 <vPortValidateInterruptPriority>
	__asm volatile
 800c44e:	f3ef 8211 	mrs	r2, BASEPRI
 800c452:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c456:	f383 8811 	msr	BASEPRI, r3
 800c45a:	f3bf 8f6f 	isb	sy
 800c45e:	f3bf 8f4f 	dsb	sy
 800c462:	613a      	str	r2, [r7, #16]
 800c464:	60fb      	str	r3, [r7, #12]
	return ulOriginalBASEPRI;
 800c466:	693b      	ldr	r3, [r7, #16]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c468:	627b      	str	r3, [r7, #36]	; 0x24
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c46a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c46c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d00c      	beq.n	800c48c <xQueuePeekFromISR+0xb8>
		{
			traceQUEUE_PEEK_FROM_ISR( pxQueue );

			/* Remember the read position so it can be reset as nothing is
			actually being removed from the queue. */
			pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 800c472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c474:	68db      	ldr	r3, [r3, #12]
 800c476:	623b      	str	r3, [r7, #32]
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c478:	6839      	ldr	r1, [r7, #0]
 800c47a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c47c:	f000 f913 	bl	800c6a6 <prvCopyDataFromQueue>
			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 800c480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c482:	6a3a      	ldr	r2, [r7, #32]
 800c484:	60da      	str	r2, [r3, #12]

			xReturn = pdPASS;
 800c486:	2301      	movs	r3, #1
 800c488:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c48a:	e001      	b.n	800c490 <xQueuePeekFromISR+0xbc>
		}
		else
		{
			xReturn = pdFAIL;
 800c48c:	2300      	movs	r3, #0
 800c48e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c492:	60bb      	str	r3, [r7, #8]
	__asm volatile
 800c494:	68bb      	ldr	r3, [r7, #8]
 800c496:	f383 8811 	msr	BASEPRI, r3
}
 800c49a:	bf00      	nop
			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c49c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800c49e:	4618      	mov	r0, r3
 800c4a0:	3730      	adds	r7, #48	; 0x30
 800c4a2:	46bd      	mov	sp, r7
 800c4a4:	bd80      	pop	{r7, pc}

0800c4a6 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800c4a6:	b580      	push	{r7, lr}
 800c4a8:	b084      	sub	sp, #16
 800c4aa:	af00      	add	r7, sp, #0
 800c4ac:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d10a      	bne.n	800c4ca <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800c4b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4b8:	f383 8811 	msr	BASEPRI, r3
 800c4bc:	f3bf 8f6f 	isb	sy
 800c4c0:	f3bf 8f4f 	dsb	sy
 800c4c4:	60bb      	str	r3, [r7, #8]
}
 800c4c6:	bf00      	nop
 800c4c8:	e7fe      	b.n	800c4c8 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800c4ca:	f002 fadd 	bl	800ea88 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4d2:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800c4d4:	f002 fb08 	bl	800eae8 <vPortExitCritical>

	return uxReturn;
 800c4d8:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800c4da:	4618      	mov	r0, r3
 800c4dc:	3710      	adds	r7, #16
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	bd80      	pop	{r7, pc}

0800c4e2 <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 800c4e2:	b580      	push	{r7, lr}
 800c4e4:	b086      	sub	sp, #24
 800c4e6:	af00      	add	r7, sp, #0
 800c4e8:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t *pxQueue;

	pxQueue = ( Queue_t * ) xQueue;
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	617b      	str	r3, [r7, #20]
	configASSERT( pxQueue );
 800c4ee:	697b      	ldr	r3, [r7, #20]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d10a      	bne.n	800c50a <uxQueueSpacesAvailable+0x28>
	__asm volatile
 800c4f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4f8:	f383 8811 	msr	BASEPRI, r3
 800c4fc:	f3bf 8f6f 	isb	sy
 800c500:	f3bf 8f4f 	dsb	sy
 800c504:	60fb      	str	r3, [r7, #12]
}
 800c506:	bf00      	nop
 800c508:	e7fe      	b.n	800c508 <uxQueueSpacesAvailable+0x26>

	taskENTER_CRITICAL();
 800c50a:	f002 fabd 	bl	800ea88 <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 800c50e:	697b      	ldr	r3, [r7, #20]
 800c510:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c512:	697b      	ldr	r3, [r7, #20]
 800c514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c516:	1ad3      	subs	r3, r2, r3
 800c518:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800c51a:	f002 fae5 	bl	800eae8 <vPortExitCritical>

	return uxReturn;
 800c51e:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800c520:	4618      	mov	r0, r3
 800c522:	3718      	adds	r7, #24
 800c524:	46bd      	mov	sp, r7
 800c526:	bd80      	pop	{r7, pc}

0800c528 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800c528:	b480      	push	{r7}
 800c52a:	b085      	sub	sp, #20
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	2b00      	cmp	r3, #0
 800c534:	d10a      	bne.n	800c54c <uxQueueMessagesWaitingFromISR+0x24>
	__asm volatile
 800c536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c53a:	f383 8811 	msr	BASEPRI, r3
 800c53e:	f3bf 8f6f 	isb	sy
 800c542:	f3bf 8f4f 	dsb	sy
 800c546:	60bb      	str	r3, [r7, #8]
}
 800c548:	bf00      	nop
 800c54a:	e7fe      	b.n	800c54a <uxQueueMessagesWaitingFromISR+0x22>

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c550:	60fb      	str	r3, [r7, #12]

	return uxReturn;
 800c552:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800c554:	4618      	mov	r0, r3
 800c556:	3714      	adds	r7, #20
 800c558:	46bd      	mov	sp, r7
 800c55a:	bc80      	pop	{r7}
 800c55c:	4770      	bx	lr

0800c55e <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800c55e:	b580      	push	{r7, lr}
 800c560:	b084      	sub	sp, #16
 800c562:	af00      	add	r7, sp, #0
 800c564:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d10a      	bne.n	800c586 <vQueueDelete+0x28>
	__asm volatile
 800c570:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c574:	f383 8811 	msr	BASEPRI, r3
 800c578:	f3bf 8f6f 	isb	sy
 800c57c:	f3bf 8f4f 	dsb	sy
 800c580:	60bb      	str	r3, [r7, #8]
}
 800c582:	bf00      	nop
 800c584:	e7fe      	b.n	800c584 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800c586:	68f8      	ldr	r0, [r7, #12]
 800c588:	f000 f9c6 	bl	800c918 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c592:	2b00      	cmp	r3, #0
 800c594:	d102      	bne.n	800c59c <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800c596:	68f8      	ldr	r0, [r7, #12]
 800c598:	f002 fc3e 	bl	800ee18 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800c59c:	bf00      	nop
 800c59e:	3710      	adds	r7, #16
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	bd80      	pop	{r7, pc}

0800c5a4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c5a4:	b480      	push	{r7}
 800c5a6:	b085      	sub	sp, #20
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d006      	beq.n	800c5c2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	f1c3 0307 	rsb	r3, r3, #7
 800c5be:	60fb      	str	r3, [r7, #12]
 800c5c0:	e001      	b.n	800c5c6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c5c6:	68fb      	ldr	r3, [r7, #12]
	}
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	3714      	adds	r7, #20
 800c5cc:	46bd      	mov	sp, r7
 800c5ce:	bc80      	pop	{r7}
 800c5d0:	4770      	bx	lr

0800c5d2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c5d2:	b580      	push	{r7, lr}
 800c5d4:	b086      	sub	sp, #24
 800c5d6:	af00      	add	r7, sp, #0
 800c5d8:	60f8      	str	r0, [r7, #12]
 800c5da:	60b9      	str	r1, [r7, #8]
 800c5dc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c5de:	2300      	movs	r3, #0
 800c5e0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5e6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d10d      	bne.n	800c60c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d14d      	bne.n	800c694 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	685b      	ldr	r3, [r3, #4]
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	f001 fca3 	bl	800df48 <xTaskPriorityDisinherit>
 800c602:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	2200      	movs	r2, #0
 800c608:	605a      	str	r2, [r3, #4]
 800c60a:	e043      	b.n	800c694 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d119      	bne.n	800c646 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	6898      	ldr	r0, [r3, #8]
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c61a:	461a      	mov	r2, r3
 800c61c:	68b9      	ldr	r1, [r7, #8]
 800c61e:	f002 fdd3 	bl	800f1c8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	689a      	ldr	r2, [r3, #8]
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c62a:	441a      	add	r2, r3
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	689a      	ldr	r2, [r3, #8]
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	685b      	ldr	r3, [r3, #4]
 800c638:	429a      	cmp	r2, r3
 800c63a:	d32b      	bcc.n	800c694 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	681a      	ldr	r2, [r3, #0]
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	609a      	str	r2, [r3, #8]
 800c644:	e026      	b.n	800c694 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	68d8      	ldr	r0, [r3, #12]
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c64e:	461a      	mov	r2, r3
 800c650:	68b9      	ldr	r1, [r7, #8]
 800c652:	f002 fdb9 	bl	800f1c8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	68da      	ldr	r2, [r3, #12]
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c65e:	425b      	negs	r3, r3
 800c660:	441a      	add	r2, r3
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	68da      	ldr	r2, [r3, #12]
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	429a      	cmp	r2, r3
 800c670:	d207      	bcs.n	800c682 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	685a      	ldr	r2, [r3, #4]
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c67a:	425b      	negs	r3, r3
 800c67c:	441a      	add	r2, r3
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	2b02      	cmp	r3, #2
 800c686:	d105      	bne.n	800c694 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c688:	693b      	ldr	r3, [r7, #16]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d002      	beq.n	800c694 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c68e:	693b      	ldr	r3, [r7, #16]
 800c690:	3b01      	subs	r3, #1
 800c692:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c694:	693b      	ldr	r3, [r7, #16]
 800c696:	1c5a      	adds	r2, r3, #1
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c69c:	697b      	ldr	r3, [r7, #20]
}
 800c69e:	4618      	mov	r0, r3
 800c6a0:	3718      	adds	r7, #24
 800c6a2:	46bd      	mov	sp, r7
 800c6a4:	bd80      	pop	{r7, pc}

0800c6a6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c6a6:	b580      	push	{r7, lr}
 800c6a8:	b082      	sub	sp, #8
 800c6aa:	af00      	add	r7, sp, #0
 800c6ac:	6078      	str	r0, [r7, #4]
 800c6ae:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d018      	beq.n	800c6ea <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	68da      	ldr	r2, [r3, #12]
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6c0:	441a      	add	r2, r3
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	68da      	ldr	r2, [r3, #12]
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	685b      	ldr	r3, [r3, #4]
 800c6ce:	429a      	cmp	r2, r3
 800c6d0:	d303      	bcc.n	800c6da <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	681a      	ldr	r2, [r3, #0]
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	68d9      	ldr	r1, [r3, #12]
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6e2:	461a      	mov	r2, r3
 800c6e4:	6838      	ldr	r0, [r7, #0]
 800c6e6:	f002 fd6f 	bl	800f1c8 <memcpy>
	}
}
 800c6ea:	bf00      	nop
 800c6ec:	3708      	adds	r7, #8
 800c6ee:	46bd      	mov	sp, r7
 800c6f0:	bd80      	pop	{r7, pc}

0800c6f2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c6f2:	b580      	push	{r7, lr}
 800c6f4:	b084      	sub	sp, #16
 800c6f6:	af00      	add	r7, sp, #0
 800c6f8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c6fa:	f002 f9c5 	bl	800ea88 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c704:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c706:	e011      	b.n	800c72c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d012      	beq.n	800c736 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	3324      	adds	r3, #36	; 0x24
 800c714:	4618      	mov	r0, r3
 800c716:	f001 f919 	bl	800d94c <xTaskRemoveFromEventList>
 800c71a:	4603      	mov	r3, r0
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d001      	beq.n	800c724 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c720:	f001 fa76 	bl	800dc10 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c724:	7bfb      	ldrb	r3, [r7, #15]
 800c726:	3b01      	subs	r3, #1
 800c728:	b2db      	uxtb	r3, r3
 800c72a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c72c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c730:	2b00      	cmp	r3, #0
 800c732:	dce9      	bgt.n	800c708 <prvUnlockQueue+0x16>
 800c734:	e000      	b.n	800c738 <prvUnlockQueue+0x46>
					break;
 800c736:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	22ff      	movs	r2, #255	; 0xff
 800c73c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c740:	f002 f9d2 	bl	800eae8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c744:	f002 f9a0 	bl	800ea88 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c74e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c750:	e011      	b.n	800c776 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	691b      	ldr	r3, [r3, #16]
 800c756:	2b00      	cmp	r3, #0
 800c758:	d012      	beq.n	800c780 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	3310      	adds	r3, #16
 800c75e:	4618      	mov	r0, r3
 800c760:	f001 f8f4 	bl	800d94c <xTaskRemoveFromEventList>
 800c764:	4603      	mov	r3, r0
 800c766:	2b00      	cmp	r3, #0
 800c768:	d001      	beq.n	800c76e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c76a:	f001 fa51 	bl	800dc10 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c76e:	7bbb      	ldrb	r3, [r7, #14]
 800c770:	3b01      	subs	r3, #1
 800c772:	b2db      	uxtb	r3, r3
 800c774:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c776:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	dce9      	bgt.n	800c752 <prvUnlockQueue+0x60>
 800c77e:	e000      	b.n	800c782 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c780:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	22ff      	movs	r2, #255	; 0xff
 800c786:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c78a:	f002 f9ad 	bl	800eae8 <vPortExitCritical>
}
 800c78e:	bf00      	nop
 800c790:	3710      	adds	r7, #16
 800c792:	46bd      	mov	sp, r7
 800c794:	bd80      	pop	{r7, pc}

0800c796 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c796:	b580      	push	{r7, lr}
 800c798:	b084      	sub	sp, #16
 800c79a:	af00      	add	r7, sp, #0
 800c79c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c79e:	f002 f973 	bl	800ea88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d102      	bne.n	800c7b0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c7aa:	2301      	movs	r3, #1
 800c7ac:	60fb      	str	r3, [r7, #12]
 800c7ae:	e001      	b.n	800c7b4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c7b0:	2300      	movs	r3, #0
 800c7b2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c7b4:	f002 f998 	bl	800eae8 <vPortExitCritical>

	return xReturn;
 800c7b8:	68fb      	ldr	r3, [r7, #12]
}
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	3710      	adds	r7, #16
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	bd80      	pop	{r7, pc}

0800c7c2 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
{
 800c7c2:	b480      	push	{r7}
 800c7c4:	b085      	sub	sp, #20
 800c7c6:	af00      	add	r7, sp, #0
 800c7c8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	configASSERT( xQueue );
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d10a      	bne.n	800c7e6 <xQueueIsQueueEmptyFromISR+0x24>
	__asm volatile
 800c7d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7d4:	f383 8811 	msr	BASEPRI, r3
 800c7d8:	f3bf 8f6f 	isb	sy
 800c7dc:	f3bf 8f4f 	dsb	sy
 800c7e0:	60bb      	str	r3, [r7, #8]
}
 800c7e2:	bf00      	nop
 800c7e4:	e7fe      	b.n	800c7e4 <xQueueIsQueueEmptyFromISR+0x22>
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d102      	bne.n	800c7f4 <xQueueIsQueueEmptyFromISR+0x32>
	{
		xReturn = pdTRUE;
 800c7ee:	2301      	movs	r3, #1
 800c7f0:	60fb      	str	r3, [r7, #12]
 800c7f2:	e001      	b.n	800c7f8 <xQueueIsQueueEmptyFromISR+0x36>
	}
	else
	{
		xReturn = pdFALSE;
 800c7f4:	2300      	movs	r3, #0
 800c7f6:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 800c7f8:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	3714      	adds	r7, #20
 800c7fe:	46bd      	mov	sp, r7
 800c800:	bc80      	pop	{r7}
 800c802:	4770      	bx	lr

0800c804 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c804:	b580      	push	{r7, lr}
 800c806:	b084      	sub	sp, #16
 800c808:	af00      	add	r7, sp, #0
 800c80a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c80c:	f002 f93c 	bl	800ea88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c818:	429a      	cmp	r2, r3
 800c81a:	d102      	bne.n	800c822 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c81c:	2301      	movs	r3, #1
 800c81e:	60fb      	str	r3, [r7, #12]
 800c820:	e001      	b.n	800c826 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c822:	2300      	movs	r3, #0
 800c824:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c826:	f002 f95f 	bl	800eae8 <vPortExitCritical>

	return xReturn;
 800c82a:	68fb      	ldr	r3, [r7, #12]
}
 800c82c:	4618      	mov	r0, r3
 800c82e:	3710      	adds	r7, #16
 800c830:	46bd      	mov	sp, r7
 800c832:	bd80      	pop	{r7, pc}

0800c834 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 800c834:	b480      	push	{r7}
 800c836:	b085      	sub	sp, #20
 800c838:	af00      	add	r7, sp, #0
 800c83a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	configASSERT( xQueue );
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d10a      	bne.n	800c858 <xQueueIsQueueFullFromISR+0x24>
	__asm volatile
 800c842:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c846:	f383 8811 	msr	BASEPRI, r3
 800c84a:	f3bf 8f6f 	isb	sy
 800c84e:	f3bf 8f4f 	dsb	sy
 800c852:	60bb      	str	r3, [r7, #8]
}
 800c854:	bf00      	nop
 800c856:	e7fe      	b.n	800c856 <xQueueIsQueueFullFromISR+0x22>
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( ( Queue_t * ) xQueue )->uxLength )
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c860:	429a      	cmp	r2, r3
 800c862:	d102      	bne.n	800c86a <xQueueIsQueueFullFromISR+0x36>
	{
		xReturn = pdTRUE;
 800c864:	2301      	movs	r3, #1
 800c866:	60fb      	str	r3, [r7, #12]
 800c868:	e001      	b.n	800c86e <xQueueIsQueueFullFromISR+0x3a>
	}
	else
	{
		xReturn = pdFALSE;
 800c86a:	2300      	movs	r3, #0
 800c86c:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 800c86e:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800c870:	4618      	mov	r0, r3
 800c872:	3714      	adds	r7, #20
 800c874:	46bd      	mov	sp, r7
 800c876:	bc80      	pop	{r7}
 800c878:	4770      	bx	lr

0800c87a <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c87a:	b480      	push	{r7}
 800c87c:	b085      	sub	sp, #20
 800c87e:	af00      	add	r7, sp, #0
 800c880:	6078      	str	r0, [r7, #4]
 800c882:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c884:	2300      	movs	r3, #0
 800c886:	60fb      	str	r3, [r7, #12]
 800c888:	e014      	b.n	800c8b4 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c88a:	4a0f      	ldr	r2, [pc, #60]	; (800c8c8 <vQueueAddToRegistry+0x4e>)
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c892:	2b00      	cmp	r3, #0
 800c894:	d10b      	bne.n	800c8ae <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c896:	490c      	ldr	r1, [pc, #48]	; (800c8c8 <vQueueAddToRegistry+0x4e>)
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	683a      	ldr	r2, [r7, #0]
 800c89c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c8a0:	4a09      	ldr	r2, [pc, #36]	; (800c8c8 <vQueueAddToRegistry+0x4e>)
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	00db      	lsls	r3, r3, #3
 800c8a6:	4413      	add	r3, r2
 800c8a8:	687a      	ldr	r2, [r7, #4]
 800c8aa:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c8ac:	e006      	b.n	800c8bc <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	3301      	adds	r3, #1
 800c8b2:	60fb      	str	r3, [r7, #12]
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	2b07      	cmp	r3, #7
 800c8b8:	d9e7      	bls.n	800c88a <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c8ba:	bf00      	nop
 800c8bc:	bf00      	nop
 800c8be:	3714      	adds	r7, #20
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	bc80      	pop	{r7}
 800c8c4:	4770      	bx	lr
 800c8c6:	bf00      	nop
 800c8c8:	2000036c 	.word	0x2000036c

0800c8cc <pcQueueGetName>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	const char *pcQueueGetName( QueueHandle_t xQueue ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c8cc:	b480      	push	{r7}
 800c8ce:	b085      	sub	sp, #20
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;
	const char *pcReturn = NULL; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
 800c8d4:	2300      	movs	r3, #0
 800c8d6:	60bb      	str	r3, [r7, #8]

		/* Note there is nothing here to protect against another task adding or
		removing entries from the registry while it is being searched. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c8d8:	2300      	movs	r3, #0
 800c8da:	60fb      	str	r3, [r7, #12]
 800c8dc:	e010      	b.n	800c900 <pcQueueGetName+0x34>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800c8de:	4a0d      	ldr	r2, [pc, #52]	; (800c914 <pcQueueGetName+0x48>)
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	00db      	lsls	r3, r3, #3
 800c8e4:	4413      	add	r3, r2
 800c8e6:	685b      	ldr	r3, [r3, #4]
 800c8e8:	687a      	ldr	r2, [r7, #4]
 800c8ea:	429a      	cmp	r2, r3
 800c8ec:	d105      	bne.n	800c8fa <pcQueueGetName+0x2e>
			{
				pcReturn = xQueueRegistry[ ux ].pcQueueName;
 800c8ee:	4a09      	ldr	r2, [pc, #36]	; (800c914 <pcQueueGetName+0x48>)
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c8f6:	60bb      	str	r3, [r7, #8]
				break;
 800c8f8:	e005      	b.n	800c906 <pcQueueGetName+0x3a>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	3301      	adds	r3, #1
 800c8fe:	60fb      	str	r3, [r7, #12]
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	2b07      	cmp	r3, #7
 800c904:	d9eb      	bls.n	800c8de <pcQueueGetName+0x12>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return pcReturn;
 800c906:	68bb      	ldr	r3, [r7, #8]
	} /*lint !e818 xQueue cannot be a pointer to const because it is a typedef. */
 800c908:	4618      	mov	r0, r3
 800c90a:	3714      	adds	r7, #20
 800c90c:	46bd      	mov	sp, r7
 800c90e:	bc80      	pop	{r7}
 800c910:	4770      	bx	lr
 800c912:	bf00      	nop
 800c914:	2000036c 	.word	0x2000036c

0800c918 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800c918:	b480      	push	{r7}
 800c91a:	b085      	sub	sp, #20
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c920:	2300      	movs	r3, #0
 800c922:	60fb      	str	r3, [r7, #12]
 800c924:	e016      	b.n	800c954 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800c926:	4a10      	ldr	r2, [pc, #64]	; (800c968 <vQueueUnregisterQueue+0x50>)
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	00db      	lsls	r3, r3, #3
 800c92c:	4413      	add	r3, r2
 800c92e:	685b      	ldr	r3, [r3, #4]
 800c930:	687a      	ldr	r2, [r7, #4]
 800c932:	429a      	cmp	r2, r3
 800c934:	d10b      	bne.n	800c94e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800c936:	4a0c      	ldr	r2, [pc, #48]	; (800c968 <vQueueUnregisterQueue+0x50>)
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	2100      	movs	r1, #0
 800c93c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800c940:	4a09      	ldr	r2, [pc, #36]	; (800c968 <vQueueUnregisterQueue+0x50>)
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	00db      	lsls	r3, r3, #3
 800c946:	4413      	add	r3, r2
 800c948:	2200      	movs	r2, #0
 800c94a:	605a      	str	r2, [r3, #4]
				break;
 800c94c:	e006      	b.n	800c95c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	3301      	adds	r3, #1
 800c952:	60fb      	str	r3, [r7, #12]
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	2b07      	cmp	r3, #7
 800c958:	d9e5      	bls.n	800c926 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800c95a:	bf00      	nop
 800c95c:	bf00      	nop
 800c95e:	3714      	adds	r7, #20
 800c960:	46bd      	mov	sp, r7
 800c962:	bc80      	pop	{r7}
 800c964:	4770      	bx	lr
 800c966:	bf00      	nop
 800c968:	2000036c 	.word	0x2000036c

0800c96c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c96c:	b580      	push	{r7, lr}
 800c96e:	b08e      	sub	sp, #56	; 0x38
 800c970:	af04      	add	r7, sp, #16
 800c972:	60f8      	str	r0, [r7, #12]
 800c974:	60b9      	str	r1, [r7, #8]
 800c976:	607a      	str	r2, [r7, #4]
 800c978:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c97a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d10a      	bne.n	800c996 <xTaskCreateStatic+0x2a>
	__asm volatile
 800c980:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c984:	f383 8811 	msr	BASEPRI, r3
 800c988:	f3bf 8f6f 	isb	sy
 800c98c:	f3bf 8f4f 	dsb	sy
 800c990:	623b      	str	r3, [r7, #32]
}
 800c992:	bf00      	nop
 800c994:	e7fe      	b.n	800c994 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d10a      	bne.n	800c9b2 <xTaskCreateStatic+0x46>
	__asm volatile
 800c99c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9a0:	f383 8811 	msr	BASEPRI, r3
 800c9a4:	f3bf 8f6f 	isb	sy
 800c9a8:	f3bf 8f4f 	dsb	sy
 800c9ac:	61fb      	str	r3, [r7, #28]
}
 800c9ae:	bf00      	nop
 800c9b0:	e7fe      	b.n	800c9b0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c9b2:	23a0      	movs	r3, #160	; 0xa0
 800c9b4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c9b6:	693b      	ldr	r3, [r7, #16]
 800c9b8:	2ba0      	cmp	r3, #160	; 0xa0
 800c9ba:	d00a      	beq.n	800c9d2 <xTaskCreateStatic+0x66>
	__asm volatile
 800c9bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9c0:	f383 8811 	msr	BASEPRI, r3
 800c9c4:	f3bf 8f6f 	isb	sy
 800c9c8:	f3bf 8f4f 	dsb	sy
 800c9cc:	61bb      	str	r3, [r7, #24]
}
 800c9ce:	bf00      	nop
 800c9d0:	e7fe      	b.n	800c9d0 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c9d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d01e      	beq.n	800ca16 <xTaskCreateStatic+0xaa>
 800c9d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d01b      	beq.n	800ca16 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c9de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9e0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c9e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c9e6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c9e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9ea:	2202      	movs	r2, #2
 800c9ec:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	9303      	str	r3, [sp, #12]
 800c9f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9f6:	9302      	str	r3, [sp, #8]
 800c9f8:	f107 0314 	add.w	r3, r7, #20
 800c9fc:	9301      	str	r3, [sp, #4]
 800c9fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca00:	9300      	str	r3, [sp, #0]
 800ca02:	683b      	ldr	r3, [r7, #0]
 800ca04:	687a      	ldr	r2, [r7, #4]
 800ca06:	68b9      	ldr	r1, [r7, #8]
 800ca08:	68f8      	ldr	r0, [r7, #12]
 800ca0a:	f000 f850 	bl	800caae <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ca0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ca10:	f000 f8e4 	bl	800cbdc <prvAddNewTaskToReadyList>
 800ca14:	e001      	b.n	800ca1a <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800ca16:	2300      	movs	r3, #0
 800ca18:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ca1a:	697b      	ldr	r3, [r7, #20]
	}
 800ca1c:	4618      	mov	r0, r3
 800ca1e:	3728      	adds	r7, #40	; 0x28
 800ca20:	46bd      	mov	sp, r7
 800ca22:	bd80      	pop	{r7, pc}

0800ca24 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b08c      	sub	sp, #48	; 0x30
 800ca28:	af04      	add	r7, sp, #16
 800ca2a:	60f8      	str	r0, [r7, #12]
 800ca2c:	60b9      	str	r1, [r7, #8]
 800ca2e:	603b      	str	r3, [r7, #0]
 800ca30:	4613      	mov	r3, r2
 800ca32:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ca34:	88fb      	ldrh	r3, [r7, #6]
 800ca36:	009b      	lsls	r3, r3, #2
 800ca38:	4618      	mov	r0, r3
 800ca3a:	f002 f929 	bl	800ec90 <pvPortMalloc>
 800ca3e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ca40:	697b      	ldr	r3, [r7, #20]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d00e      	beq.n	800ca64 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800ca46:	20a0      	movs	r0, #160	; 0xa0
 800ca48:	f002 f922 	bl	800ec90 <pvPortMalloc>
 800ca4c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ca4e:	69fb      	ldr	r3, [r7, #28]
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d003      	beq.n	800ca5c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ca54:	69fb      	ldr	r3, [r7, #28]
 800ca56:	697a      	ldr	r2, [r7, #20]
 800ca58:	631a      	str	r2, [r3, #48]	; 0x30
 800ca5a:	e005      	b.n	800ca68 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ca5c:	6978      	ldr	r0, [r7, #20]
 800ca5e:	f002 f9db 	bl	800ee18 <vPortFree>
 800ca62:	e001      	b.n	800ca68 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ca64:	2300      	movs	r3, #0
 800ca66:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ca68:	69fb      	ldr	r3, [r7, #28]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d017      	beq.n	800ca9e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ca6e:	69fb      	ldr	r3, [r7, #28]
 800ca70:	2200      	movs	r2, #0
 800ca72:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ca76:	88fa      	ldrh	r2, [r7, #6]
 800ca78:	2300      	movs	r3, #0
 800ca7a:	9303      	str	r3, [sp, #12]
 800ca7c:	69fb      	ldr	r3, [r7, #28]
 800ca7e:	9302      	str	r3, [sp, #8]
 800ca80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca82:	9301      	str	r3, [sp, #4]
 800ca84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca86:	9300      	str	r3, [sp, #0]
 800ca88:	683b      	ldr	r3, [r7, #0]
 800ca8a:	68b9      	ldr	r1, [r7, #8]
 800ca8c:	68f8      	ldr	r0, [r7, #12]
 800ca8e:	f000 f80e 	bl	800caae <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ca92:	69f8      	ldr	r0, [r7, #28]
 800ca94:	f000 f8a2 	bl	800cbdc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ca98:	2301      	movs	r3, #1
 800ca9a:	61bb      	str	r3, [r7, #24]
 800ca9c:	e002      	b.n	800caa4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ca9e:	f04f 33ff 	mov.w	r3, #4294967295
 800caa2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800caa4:	69bb      	ldr	r3, [r7, #24]
	}
 800caa6:	4618      	mov	r0, r3
 800caa8:	3720      	adds	r7, #32
 800caaa:	46bd      	mov	sp, r7
 800caac:	bd80      	pop	{r7, pc}

0800caae <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800caae:	b580      	push	{r7, lr}
 800cab0:	b088      	sub	sp, #32
 800cab2:	af00      	add	r7, sp, #0
 800cab4:	60f8      	str	r0, [r7, #12]
 800cab6:	60b9      	str	r1, [r7, #8]
 800cab8:	607a      	str	r2, [r7, #4]
 800caba:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800cabc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cabe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800cac6:	3b01      	subs	r3, #1
 800cac8:	009b      	lsls	r3, r3, #2
 800caca:	4413      	add	r3, r2
 800cacc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800cace:	69bb      	ldr	r3, [r7, #24]
 800cad0:	f023 0307 	bic.w	r3, r3, #7
 800cad4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800cad6:	69bb      	ldr	r3, [r7, #24]
 800cad8:	f003 0307 	and.w	r3, r3, #7
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d00a      	beq.n	800caf6 <prvInitialiseNewTask+0x48>
	__asm volatile
 800cae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cae4:	f383 8811 	msr	BASEPRI, r3
 800cae8:	f3bf 8f6f 	isb	sy
 800caec:	f3bf 8f4f 	dsb	sy
 800caf0:	617b      	str	r3, [r7, #20]
}
 800caf2:	bf00      	nop
 800caf4:	e7fe      	b.n	800caf4 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800caf6:	2300      	movs	r3, #0
 800caf8:	61fb      	str	r3, [r7, #28]
 800cafa:	e012      	b.n	800cb22 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cafc:	68ba      	ldr	r2, [r7, #8]
 800cafe:	69fb      	ldr	r3, [r7, #28]
 800cb00:	4413      	add	r3, r2
 800cb02:	7819      	ldrb	r1, [r3, #0]
 800cb04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb06:	69fb      	ldr	r3, [r7, #28]
 800cb08:	4413      	add	r3, r2
 800cb0a:	3334      	adds	r3, #52	; 0x34
 800cb0c:	460a      	mov	r2, r1
 800cb0e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800cb10:	68ba      	ldr	r2, [r7, #8]
 800cb12:	69fb      	ldr	r3, [r7, #28]
 800cb14:	4413      	add	r3, r2
 800cb16:	781b      	ldrb	r3, [r3, #0]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d006      	beq.n	800cb2a <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cb1c:	69fb      	ldr	r3, [r7, #28]
 800cb1e:	3301      	adds	r3, #1
 800cb20:	61fb      	str	r3, [r7, #28]
 800cb22:	69fb      	ldr	r3, [r7, #28]
 800cb24:	2b0f      	cmp	r3, #15
 800cb26:	d9e9      	bls.n	800cafc <prvInitialiseNewTask+0x4e>
 800cb28:	e000      	b.n	800cb2c <prvInitialiseNewTask+0x7e>
		{
			break;
 800cb2a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cb2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb2e:	2200      	movs	r2, #0
 800cb30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cb34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb36:	2b06      	cmp	r3, #6
 800cb38:	d901      	bls.n	800cb3e <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cb3a:	2306      	movs	r3, #6
 800cb3c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800cb3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cb42:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800cb44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cb48:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800cb4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb4c:	2200      	movs	r2, #0
 800cb4e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cb50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb52:	3304      	adds	r3, #4
 800cb54:	4618      	mov	r0, r3
 800cb56:	f7fe fcb2 	bl	800b4be <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cb5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb5c:	3318      	adds	r3, #24
 800cb5e:	4618      	mov	r0, r3
 800cb60:	f7fe fcad 	bl	800b4be <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cb64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb68:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cb6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb6c:	f1c3 0207 	rsb	r2, r3, #7
 800cb70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb72:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cb74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb78:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800cb7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb7c:	2200      	movs	r2, #0
 800cb7e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cb82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb84:	2200      	movs	r2, #0
 800cb86:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800cb8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb8c:	334c      	adds	r3, #76	; 0x4c
 800cb8e:	224c      	movs	r2, #76	; 0x4c
 800cb90:	2100      	movs	r1, #0
 800cb92:	4618      	mov	r0, r3
 800cb94:	f002 fa93 	bl	800f0be <memset>
 800cb98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb9a:	4a0d      	ldr	r2, [pc, #52]	; (800cbd0 <prvInitialiseNewTask+0x122>)
 800cb9c:	651a      	str	r2, [r3, #80]	; 0x50
 800cb9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cba0:	4a0c      	ldr	r2, [pc, #48]	; (800cbd4 <prvInitialiseNewTask+0x126>)
 800cba2:	655a      	str	r2, [r3, #84]	; 0x54
 800cba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cba6:	4a0c      	ldr	r2, [pc, #48]	; (800cbd8 <prvInitialiseNewTask+0x12a>)
 800cba8:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cbaa:	683a      	ldr	r2, [r7, #0]
 800cbac:	68f9      	ldr	r1, [r7, #12]
 800cbae:	69b8      	ldr	r0, [r7, #24]
 800cbb0:	f001 fe66 	bl	800e880 <pxPortInitialiseStack>
 800cbb4:	4602      	mov	r2, r0
 800cbb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbb8:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800cbba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d002      	beq.n	800cbc6 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cbc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cbc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cbc6:	bf00      	nop
 800cbc8:	3720      	adds	r7, #32
 800cbca:	46bd      	mov	sp, r7
 800cbcc:	bd80      	pop	{r7, pc}
 800cbce:	bf00      	nop
 800cbd0:	200010f8 	.word	0x200010f8
 800cbd4:	20001160 	.word	0x20001160
 800cbd8:	200011c8 	.word	0x200011c8

0800cbdc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cbdc:	b580      	push	{r7, lr}
 800cbde:	b082      	sub	sp, #8
 800cbe0:	af00      	add	r7, sp, #0
 800cbe2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cbe4:	f001 ff50 	bl	800ea88 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cbe8:	4b2a      	ldr	r3, [pc, #168]	; (800cc94 <prvAddNewTaskToReadyList+0xb8>)
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	3301      	adds	r3, #1
 800cbee:	4a29      	ldr	r2, [pc, #164]	; (800cc94 <prvAddNewTaskToReadyList+0xb8>)
 800cbf0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cbf2:	4b29      	ldr	r3, [pc, #164]	; (800cc98 <prvAddNewTaskToReadyList+0xbc>)
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d109      	bne.n	800cc0e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cbfa:	4a27      	ldr	r2, [pc, #156]	; (800cc98 <prvAddNewTaskToReadyList+0xbc>)
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cc00:	4b24      	ldr	r3, [pc, #144]	; (800cc94 <prvAddNewTaskToReadyList+0xb8>)
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	2b01      	cmp	r3, #1
 800cc06:	d110      	bne.n	800cc2a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cc08:	f001 f826 	bl	800dc58 <prvInitialiseTaskLists>
 800cc0c:	e00d      	b.n	800cc2a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cc0e:	4b23      	ldr	r3, [pc, #140]	; (800cc9c <prvAddNewTaskToReadyList+0xc0>)
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d109      	bne.n	800cc2a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cc16:	4b20      	ldr	r3, [pc, #128]	; (800cc98 <prvAddNewTaskToReadyList+0xbc>)
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc20:	429a      	cmp	r2, r3
 800cc22:	d802      	bhi.n	800cc2a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800cc24:	4a1c      	ldr	r2, [pc, #112]	; (800cc98 <prvAddNewTaskToReadyList+0xbc>)
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800cc2a:	4b1d      	ldr	r3, [pc, #116]	; (800cca0 <prvAddNewTaskToReadyList+0xc4>)
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	3301      	adds	r3, #1
 800cc30:	4a1b      	ldr	r2, [pc, #108]	; (800cca0 <prvAddNewTaskToReadyList+0xc4>)
 800cc32:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc38:	2201      	movs	r2, #1
 800cc3a:	409a      	lsls	r2, r3
 800cc3c:	4b19      	ldr	r3, [pc, #100]	; (800cca4 <prvAddNewTaskToReadyList+0xc8>)
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	4313      	orrs	r3, r2
 800cc42:	4a18      	ldr	r2, [pc, #96]	; (800cca4 <prvAddNewTaskToReadyList+0xc8>)
 800cc44:	6013      	str	r3, [r2, #0]
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc4a:	4613      	mov	r3, r2
 800cc4c:	009b      	lsls	r3, r3, #2
 800cc4e:	4413      	add	r3, r2
 800cc50:	009b      	lsls	r3, r3, #2
 800cc52:	4a15      	ldr	r2, [pc, #84]	; (800cca8 <prvAddNewTaskToReadyList+0xcc>)
 800cc54:	441a      	add	r2, r3
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	3304      	adds	r3, #4
 800cc5a:	4619      	mov	r1, r3
 800cc5c:	4610      	mov	r0, r2
 800cc5e:	f7fe fc3a 	bl	800b4d6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800cc62:	f001 ff41 	bl	800eae8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800cc66:	4b0d      	ldr	r3, [pc, #52]	; (800cc9c <prvAddNewTaskToReadyList+0xc0>)
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d00e      	beq.n	800cc8c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800cc6e:	4b0a      	ldr	r3, [pc, #40]	; (800cc98 <prvAddNewTaskToReadyList+0xbc>)
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc78:	429a      	cmp	r2, r3
 800cc7a:	d207      	bcs.n	800cc8c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800cc7c:	4b0b      	ldr	r3, [pc, #44]	; (800ccac <prvAddNewTaskToReadyList+0xd0>)
 800cc7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc82:	601a      	str	r2, [r3, #0]
 800cc84:	f3bf 8f4f 	dsb	sy
 800cc88:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cc8c:	bf00      	nop
 800cc8e:	3708      	adds	r7, #8
 800cc90:	46bd      	mov	sp, r7
 800cc92:	bd80      	pop	{r7, pc}
 800cc94:	200004ac 	.word	0x200004ac
 800cc98:	200003ac 	.word	0x200003ac
 800cc9c:	200004b8 	.word	0x200004b8
 800cca0:	200004c8 	.word	0x200004c8
 800cca4:	200004b4 	.word	0x200004b4
 800cca8:	200003b0 	.word	0x200003b0
 800ccac:	e000ed04 	.word	0xe000ed04

0800ccb0 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800ccb0:	b580      	push	{r7, lr}
 800ccb2:	b084      	sub	sp, #16
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800ccb8:	f001 fee6 	bl	800ea88 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d102      	bne.n	800ccc8 <vTaskDelete+0x18>
 800ccc2:	4b39      	ldr	r3, [pc, #228]	; (800cda8 <vTaskDelete+0xf8>)
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	e000      	b.n	800ccca <vTaskDelete+0x1a>
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	3304      	adds	r3, #4
 800ccd0:	4618      	mov	r0, r3
 800ccd2:	f7fe fc5b 	bl	800b58c <uxListRemove>
 800ccd6:	4603      	mov	r3, r0
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d115      	bne.n	800cd08 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cce0:	4932      	ldr	r1, [pc, #200]	; (800cdac <vTaskDelete+0xfc>)
 800cce2:	4613      	mov	r3, r2
 800cce4:	009b      	lsls	r3, r3, #2
 800cce6:	4413      	add	r3, r2
 800cce8:	009b      	lsls	r3, r3, #2
 800ccea:	440b      	add	r3, r1
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d10a      	bne.n	800cd08 <vTaskDelete+0x58>
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccf6:	2201      	movs	r2, #1
 800ccf8:	fa02 f303 	lsl.w	r3, r2, r3
 800ccfc:	43da      	mvns	r2, r3
 800ccfe:	4b2c      	ldr	r3, [pc, #176]	; (800cdb0 <vTaskDelete+0x100>)
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	4013      	ands	r3, r2
 800cd04:	4a2a      	ldr	r2, [pc, #168]	; (800cdb0 <vTaskDelete+0x100>)
 800cd06:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d004      	beq.n	800cd1a <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	3318      	adds	r3, #24
 800cd14:	4618      	mov	r0, r3
 800cd16:	f7fe fc39 	bl	800b58c <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800cd1a:	4b26      	ldr	r3, [pc, #152]	; (800cdb4 <vTaskDelete+0x104>)
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	3301      	adds	r3, #1
 800cd20:	4a24      	ldr	r2, [pc, #144]	; (800cdb4 <vTaskDelete+0x104>)
 800cd22:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800cd24:	4b20      	ldr	r3, [pc, #128]	; (800cda8 <vTaskDelete+0xf8>)
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	68fa      	ldr	r2, [r7, #12]
 800cd2a:	429a      	cmp	r2, r3
 800cd2c:	d10b      	bne.n	800cd46 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	3304      	adds	r3, #4
 800cd32:	4619      	mov	r1, r3
 800cd34:	4820      	ldr	r0, [pc, #128]	; (800cdb8 <vTaskDelete+0x108>)
 800cd36:	f7fe fbce 	bl	800b4d6 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800cd3a:	4b20      	ldr	r3, [pc, #128]	; (800cdbc <vTaskDelete+0x10c>)
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	3301      	adds	r3, #1
 800cd40:	4a1e      	ldr	r2, [pc, #120]	; (800cdbc <vTaskDelete+0x10c>)
 800cd42:	6013      	str	r3, [r2, #0]
 800cd44:	e009      	b.n	800cd5a <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800cd46:	4b1e      	ldr	r3, [pc, #120]	; (800cdc0 <vTaskDelete+0x110>)
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	3b01      	subs	r3, #1
 800cd4c:	4a1c      	ldr	r2, [pc, #112]	; (800cdc0 <vTaskDelete+0x110>)
 800cd4e:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800cd50:	68f8      	ldr	r0, [r7, #12]
 800cd52:	f000 ffef 	bl	800dd34 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800cd56:	f001 f821 	bl	800dd9c <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800cd5a:	f001 fec5 	bl	800eae8 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800cd5e:	4b19      	ldr	r3, [pc, #100]	; (800cdc4 <vTaskDelete+0x114>)
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d01b      	beq.n	800cd9e <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 800cd66:	4b10      	ldr	r3, [pc, #64]	; (800cda8 <vTaskDelete+0xf8>)
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	68fa      	ldr	r2, [r7, #12]
 800cd6c:	429a      	cmp	r2, r3
 800cd6e:	d116      	bne.n	800cd9e <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800cd70:	4b15      	ldr	r3, [pc, #84]	; (800cdc8 <vTaskDelete+0x118>)
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d00a      	beq.n	800cd8e <vTaskDelete+0xde>
	__asm volatile
 800cd78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd7c:	f383 8811 	msr	BASEPRI, r3
 800cd80:	f3bf 8f6f 	isb	sy
 800cd84:	f3bf 8f4f 	dsb	sy
 800cd88:	60bb      	str	r3, [r7, #8]
}
 800cd8a:	bf00      	nop
 800cd8c:	e7fe      	b.n	800cd8c <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 800cd8e:	4b0f      	ldr	r3, [pc, #60]	; (800cdcc <vTaskDelete+0x11c>)
 800cd90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd94:	601a      	str	r2, [r3, #0]
 800cd96:	f3bf 8f4f 	dsb	sy
 800cd9a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800cd9e:	bf00      	nop
 800cda0:	3710      	adds	r7, #16
 800cda2:	46bd      	mov	sp, r7
 800cda4:	bd80      	pop	{r7, pc}
 800cda6:	bf00      	nop
 800cda8:	200003ac 	.word	0x200003ac
 800cdac:	200003b0 	.word	0x200003b0
 800cdb0:	200004b4 	.word	0x200004b4
 800cdb4:	200004c8 	.word	0x200004c8
 800cdb8:	20000480 	.word	0x20000480
 800cdbc:	20000494 	.word	0x20000494
 800cdc0:	200004ac 	.word	0x200004ac
 800cdc4:	200004b8 	.word	0x200004b8
 800cdc8:	200004d4 	.word	0x200004d4
 800cdcc:	e000ed04 	.word	0xe000ed04

0800cdd0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800cdd0:	b580      	push	{r7, lr}
 800cdd2:	b084      	sub	sp, #16
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800cdd8:	2300      	movs	r3, #0
 800cdda:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d017      	beq.n	800ce12 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800cde2:	4b13      	ldr	r3, [pc, #76]	; (800ce30 <vTaskDelay+0x60>)
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d00a      	beq.n	800ce00 <vTaskDelay+0x30>
	__asm volatile
 800cdea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdee:	f383 8811 	msr	BASEPRI, r3
 800cdf2:	f3bf 8f6f 	isb	sy
 800cdf6:	f3bf 8f4f 	dsb	sy
 800cdfa:	60bb      	str	r3, [r7, #8]
}
 800cdfc:	bf00      	nop
 800cdfe:	e7fe      	b.n	800cdfe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ce00:	f000 fb2c 	bl	800d45c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ce04:	2100      	movs	r1, #0
 800ce06:	6878      	ldr	r0, [r7, #4]
 800ce08:	f001 fcd0 	bl	800e7ac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ce0c:	f000 fb34 	bl	800d478 <xTaskResumeAll>
 800ce10:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d107      	bne.n	800ce28 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800ce18:	4b06      	ldr	r3, [pc, #24]	; (800ce34 <vTaskDelay+0x64>)
 800ce1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce1e:	601a      	str	r2, [r3, #0]
 800ce20:	f3bf 8f4f 	dsb	sy
 800ce24:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ce28:	bf00      	nop
 800ce2a:	3710      	adds	r7, #16
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	bd80      	pop	{r7, pc}
 800ce30:	200004d4 	.word	0x200004d4
 800ce34:	e000ed04 	.word	0xe000ed04

0800ce38 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
	{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b084      	sub	sp, #16
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	UBaseType_t uxReturn;

		taskENTER_CRITICAL();
 800ce40:	f001 fe22 	bl	800ea88 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the that
			called uxTaskPriorityGet() that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d102      	bne.n	800ce50 <uxTaskPriorityGet+0x18>
 800ce4a:	4b07      	ldr	r3, [pc, #28]	; (800ce68 <uxTaskPriorityGet+0x30>)
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	e000      	b.n	800ce52 <uxTaskPriorityGet+0x1a>
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce58:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
 800ce5a:	f001 fe45 	bl	800eae8 <vPortExitCritical>

		return uxReturn;
 800ce5e:	68bb      	ldr	r3, [r7, #8]
	}
 800ce60:	4618      	mov	r0, r3
 800ce62:	3710      	adds	r7, #16
 800ce64:	46bd      	mov	sp, r7
 800ce66:	bd80      	pop	{r7, pc}
 800ce68:	200003ac 	.word	0x200003ac

0800ce6c <uxTaskPriorityGetFromISR>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask )
	{
 800ce6c:	b580      	push	{r7, lr}
 800ce6e:	b088      	sub	sp, #32
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	6078      	str	r0, [r7, #4]
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ce74:	f001 fecc 	bl	800ec10 <vPortValidateInterruptPriority>
	__asm volatile
 800ce78:	f3ef 8211 	mrs	r2, BASEPRI
 800ce7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce80:	f383 8811 	msr	BASEPRI, r3
 800ce84:	f3bf 8f6f 	isb	sy
 800ce88:	f3bf 8f4f 	dsb	sy
 800ce8c:	613a      	str	r2, [r7, #16]
 800ce8e:	60fb      	str	r3, [r7, #12]
	return ulOriginalBASEPRI;
 800ce90:	693b      	ldr	r3, [r7, #16]

		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
 800ce92:	61fb      	str	r3, [r7, #28]
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d102      	bne.n	800cea0 <uxTaskPriorityGetFromISR+0x34>
 800ce9a:	4b09      	ldr	r3, [pc, #36]	; (800cec0 <uxTaskPriorityGetFromISR+0x54>)
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	e000      	b.n	800cea2 <uxTaskPriorityGetFromISR+0x36>
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	61bb      	str	r3, [r7, #24]
			uxReturn = pxTCB->uxPriority;
 800cea4:	69bb      	ldr	r3, [r7, #24]
 800cea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cea8:	617b      	str	r3, [r7, #20]
 800ceaa:	69fb      	ldr	r3, [r7, #28]
 800ceac:	60bb      	str	r3, [r7, #8]
	__asm volatile
 800ceae:	68bb      	ldr	r3, [r7, #8]
 800ceb0:	f383 8811 	msr	BASEPRI, r3
}
 800ceb4:	bf00      	nop
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );

		return uxReturn;
 800ceb6:	697b      	ldr	r3, [r7, #20]
	}
 800ceb8:	4618      	mov	r0, r3
 800ceba:	3720      	adds	r7, #32
 800cebc:	46bd      	mov	sp, r7
 800cebe:	bd80      	pop	{r7, pc}
 800cec0:	200003ac 	.word	0x200003ac

0800cec4 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 800cec4:	b580      	push	{r7, lr}
 800cec6:	b088      	sub	sp, #32
 800cec8:	af00      	add	r7, sp, #0
 800ceca:	6078      	str	r0, [r7, #4]
 800cecc:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 800cece:	2300      	movs	r3, #0
 800ced0:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 800ced2:	683b      	ldr	r3, [r7, #0]
 800ced4:	2b06      	cmp	r3, #6
 800ced6:	d90a      	bls.n	800ceee <vTaskPrioritySet+0x2a>
	__asm volatile
 800ced8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cedc:	f383 8811 	msr	BASEPRI, r3
 800cee0:	f3bf 8f6f 	isb	sy
 800cee4:	f3bf 8f4f 	dsb	sy
 800cee8:	60fb      	str	r3, [r7, #12]
}
 800ceea:	bf00      	nop
 800ceec:	e7fe      	b.n	800ceec <vTaskPrioritySet+0x28>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ceee:	683b      	ldr	r3, [r7, #0]
 800cef0:	2b06      	cmp	r3, #6
 800cef2:	d901      	bls.n	800cef8 <vTaskPrioritySet+0x34>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cef4:	2306      	movs	r3, #6
 800cef6:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 800cef8:	f001 fdc6 	bl	800ea88 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d102      	bne.n	800cf08 <vTaskPrioritySet+0x44>
 800cf02:	4b43      	ldr	r3, [pc, #268]	; (800d010 <vTaskPrioritySet+0x14c>)
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	e000      	b.n	800cf0a <vTaskPrioritySet+0x46>
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 800cf0c:	69bb      	ldr	r3, [r7, #24]
 800cf0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf10:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 800cf12:	697a      	ldr	r2, [r7, #20]
 800cf14:	683b      	ldr	r3, [r7, #0]
 800cf16:	429a      	cmp	r2, r3
 800cf18:	d074      	beq.n	800d004 <vTaskPrioritySet+0x140>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 800cf1a:	683a      	ldr	r2, [r7, #0]
 800cf1c:	697b      	ldr	r3, [r7, #20]
 800cf1e:	429a      	cmp	r2, r3
 800cf20:	d90d      	bls.n	800cf3e <vTaskPrioritySet+0x7a>
				{
					if( pxTCB != pxCurrentTCB )
 800cf22:	4b3b      	ldr	r3, [pc, #236]	; (800d010 <vTaskPrioritySet+0x14c>)
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	69ba      	ldr	r2, [r7, #24]
 800cf28:	429a      	cmp	r2, r3
 800cf2a:	d00f      	beq.n	800cf4c <vTaskPrioritySet+0x88>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 800cf2c:	4b38      	ldr	r3, [pc, #224]	; (800d010 <vTaskPrioritySet+0x14c>)
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf32:	683a      	ldr	r2, [r7, #0]
 800cf34:	429a      	cmp	r2, r3
 800cf36:	d309      	bcc.n	800cf4c <vTaskPrioritySet+0x88>
						{
							xYieldRequired = pdTRUE;
 800cf38:	2301      	movs	r3, #1
 800cf3a:	61fb      	str	r3, [r7, #28]
 800cf3c:	e006      	b.n	800cf4c <vTaskPrioritySet+0x88>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 800cf3e:	4b34      	ldr	r3, [pc, #208]	; (800d010 <vTaskPrioritySet+0x14c>)
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	69ba      	ldr	r2, [r7, #24]
 800cf44:	429a      	cmp	r2, r3
 800cf46:	d101      	bne.n	800cf4c <vTaskPrioritySet+0x88>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 800cf48:	2301      	movs	r3, #1
 800cf4a:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800cf4c:	69bb      	ldr	r3, [r7, #24]
 800cf4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf50:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 800cf52:	69bb      	ldr	r3, [r7, #24]
 800cf54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cf56:	69bb      	ldr	r3, [r7, #24]
 800cf58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf5a:	429a      	cmp	r2, r3
 800cf5c:	d102      	bne.n	800cf64 <vTaskPrioritySet+0xa0>
					{
						pxTCB->uxPriority = uxNewPriority;
 800cf5e:	69bb      	ldr	r3, [r7, #24]
 800cf60:	683a      	ldr	r2, [r7, #0]
 800cf62:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 800cf64:	69bb      	ldr	r3, [r7, #24]
 800cf66:	683a      	ldr	r2, [r7, #0]
 800cf68:	645a      	str	r2, [r3, #68]	; 0x44
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800cf6a:	69bb      	ldr	r3, [r7, #24]
 800cf6c:	699b      	ldr	r3, [r3, #24]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	db04      	blt.n	800cf7c <vTaskPrioritySet+0xb8>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cf72:	683b      	ldr	r3, [r7, #0]
 800cf74:	f1c3 0207 	rsb	r2, r3, #7
 800cf78:	69bb      	ldr	r3, [r7, #24]
 800cf7a:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800cf7c:	69bb      	ldr	r3, [r7, #24]
 800cf7e:	6959      	ldr	r1, [r3, #20]
 800cf80:	693a      	ldr	r2, [r7, #16]
 800cf82:	4613      	mov	r3, r2
 800cf84:	009b      	lsls	r3, r3, #2
 800cf86:	4413      	add	r3, r2
 800cf88:	009b      	lsls	r3, r3, #2
 800cf8a:	4a22      	ldr	r2, [pc, #136]	; (800d014 <vTaskPrioritySet+0x150>)
 800cf8c:	4413      	add	r3, r2
 800cf8e:	4299      	cmp	r1, r3
 800cf90:	d101      	bne.n	800cf96 <vTaskPrioritySet+0xd2>
 800cf92:	2301      	movs	r3, #1
 800cf94:	e000      	b.n	800cf98 <vTaskPrioritySet+0xd4>
 800cf96:	2300      	movs	r3, #0
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d028      	beq.n	800cfee <vTaskPrioritySet+0x12a>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cf9c:	69bb      	ldr	r3, [r7, #24]
 800cf9e:	3304      	adds	r3, #4
 800cfa0:	4618      	mov	r0, r3
 800cfa2:	f7fe faf3 	bl	800b58c <uxListRemove>
 800cfa6:	4603      	mov	r3, r0
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d109      	bne.n	800cfc0 <vTaskPrioritySet+0xfc>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 800cfac:	2201      	movs	r2, #1
 800cfae:	693b      	ldr	r3, [r7, #16]
 800cfb0:	fa02 f303 	lsl.w	r3, r2, r3
 800cfb4:	43da      	mvns	r2, r3
 800cfb6:	4b18      	ldr	r3, [pc, #96]	; (800d018 <vTaskPrioritySet+0x154>)
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	4013      	ands	r3, r2
 800cfbc:	4a16      	ldr	r2, [pc, #88]	; (800d018 <vTaskPrioritySet+0x154>)
 800cfbe:	6013      	str	r3, [r2, #0]
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 800cfc0:	69bb      	ldr	r3, [r7, #24]
 800cfc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfc4:	2201      	movs	r2, #1
 800cfc6:	409a      	lsls	r2, r3
 800cfc8:	4b13      	ldr	r3, [pc, #76]	; (800d018 <vTaskPrioritySet+0x154>)
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	4313      	orrs	r3, r2
 800cfce:	4a12      	ldr	r2, [pc, #72]	; (800d018 <vTaskPrioritySet+0x154>)
 800cfd0:	6013      	str	r3, [r2, #0]
 800cfd2:	69bb      	ldr	r3, [r7, #24]
 800cfd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfd6:	4613      	mov	r3, r2
 800cfd8:	009b      	lsls	r3, r3, #2
 800cfda:	4413      	add	r3, r2
 800cfdc:	009b      	lsls	r3, r3, #2
 800cfde:	4a0d      	ldr	r2, [pc, #52]	; (800d014 <vTaskPrioritySet+0x150>)
 800cfe0:	441a      	add	r2, r3
 800cfe2:	69bb      	ldr	r3, [r7, #24]
 800cfe4:	3304      	adds	r3, #4
 800cfe6:	4619      	mov	r1, r3
 800cfe8:	4610      	mov	r0, r2
 800cfea:	f7fe fa74 	bl	800b4d6 <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 800cfee:	69fb      	ldr	r3, [r7, #28]
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d007      	beq.n	800d004 <vTaskPrioritySet+0x140>
				{
					taskYIELD_IF_USING_PREEMPTION();
 800cff4:	4b09      	ldr	r3, [pc, #36]	; (800d01c <vTaskPrioritySet+0x158>)
 800cff6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cffa:	601a      	str	r2, [r3, #0]
 800cffc:	f3bf 8f4f 	dsb	sy
 800d000:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 800d004:	f001 fd70 	bl	800eae8 <vPortExitCritical>
	}
 800d008:	bf00      	nop
 800d00a:	3720      	adds	r7, #32
 800d00c:	46bd      	mov	sp, r7
 800d00e:	bd80      	pop	{r7, pc}
 800d010:	200003ac 	.word	0x200003ac
 800d014:	200003b0 	.word	0x200003b0
 800d018:	200004b4 	.word	0x200004b4
 800d01c:	e000ed04 	.word	0xe000ed04

0800d020 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800d020:	b580      	push	{r7, lr}
 800d022:	b084      	sub	sp, #16
 800d024:	af00      	add	r7, sp, #0
 800d026:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800d028:	f001 fd2e 	bl	800ea88 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d102      	bne.n	800d038 <vTaskSuspend+0x18>
 800d032:	4b3c      	ldr	r3, [pc, #240]	; (800d124 <vTaskSuspend+0x104>)
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	e000      	b.n	800d03a <vTaskSuspend+0x1a>
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	3304      	adds	r3, #4
 800d040:	4618      	mov	r0, r3
 800d042:	f7fe faa3 	bl	800b58c <uxListRemove>
 800d046:	4603      	mov	r3, r0
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d115      	bne.n	800d078 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d050:	4935      	ldr	r1, [pc, #212]	; (800d128 <vTaskSuspend+0x108>)
 800d052:	4613      	mov	r3, r2
 800d054:	009b      	lsls	r3, r3, #2
 800d056:	4413      	add	r3, r2
 800d058:	009b      	lsls	r3, r3, #2
 800d05a:	440b      	add	r3, r1
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d10a      	bne.n	800d078 <vTaskSuspend+0x58>
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d066:	2201      	movs	r2, #1
 800d068:	fa02 f303 	lsl.w	r3, r2, r3
 800d06c:	43da      	mvns	r2, r3
 800d06e:	4b2f      	ldr	r3, [pc, #188]	; (800d12c <vTaskSuspend+0x10c>)
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	4013      	ands	r3, r2
 800d074:	4a2d      	ldr	r2, [pc, #180]	; (800d12c <vTaskSuspend+0x10c>)
 800d076:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d004      	beq.n	800d08a <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	3318      	adds	r3, #24
 800d084:	4618      	mov	r0, r3
 800d086:	f7fe fa81 	bl	800b58c <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	3304      	adds	r3, #4
 800d08e:	4619      	mov	r1, r3
 800d090:	4827      	ldr	r0, [pc, #156]	; (800d130 <vTaskSuspend+0x110>)
 800d092:	f7fe fa20 	bl	800b4d6 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800d09c:	b2db      	uxtb	r3, r3
 800d09e:	2b01      	cmp	r3, #1
 800d0a0:	d103      	bne.n	800d0aa <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	2200      	movs	r2, #0
 800d0a6:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800d0aa:	f001 fd1d 	bl	800eae8 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800d0ae:	4b21      	ldr	r3, [pc, #132]	; (800d134 <vTaskSuspend+0x114>)
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d005      	beq.n	800d0c2 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800d0b6:	f001 fce7 	bl	800ea88 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800d0ba:	f000 fe6f 	bl	800dd9c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800d0be:	f001 fd13 	bl	800eae8 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800d0c2:	4b18      	ldr	r3, [pc, #96]	; (800d124 <vTaskSuspend+0x104>)
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	68fa      	ldr	r2, [r7, #12]
 800d0c8:	429a      	cmp	r2, r3
 800d0ca:	d127      	bne.n	800d11c <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 800d0cc:	4b19      	ldr	r3, [pc, #100]	; (800d134 <vTaskSuspend+0x114>)
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d017      	beq.n	800d104 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800d0d4:	4b18      	ldr	r3, [pc, #96]	; (800d138 <vTaskSuspend+0x118>)
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d00a      	beq.n	800d0f2 <vTaskSuspend+0xd2>
	__asm volatile
 800d0dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0e0:	f383 8811 	msr	BASEPRI, r3
 800d0e4:	f3bf 8f6f 	isb	sy
 800d0e8:	f3bf 8f4f 	dsb	sy
 800d0ec:	60bb      	str	r3, [r7, #8]
}
 800d0ee:	bf00      	nop
 800d0f0:	e7fe      	b.n	800d0f0 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 800d0f2:	4b12      	ldr	r3, [pc, #72]	; (800d13c <vTaskSuspend+0x11c>)
 800d0f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d0f8:	601a      	str	r2, [r3, #0]
 800d0fa:	f3bf 8f4f 	dsb	sy
 800d0fe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d102:	e00b      	b.n	800d11c <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 800d104:	4b0a      	ldr	r3, [pc, #40]	; (800d130 <vTaskSuspend+0x110>)
 800d106:	681a      	ldr	r2, [r3, #0]
 800d108:	4b0d      	ldr	r3, [pc, #52]	; (800d140 <vTaskSuspend+0x120>)
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	429a      	cmp	r2, r3
 800d10e:	d103      	bne.n	800d118 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 800d110:	4b04      	ldr	r3, [pc, #16]	; (800d124 <vTaskSuspend+0x104>)
 800d112:	2200      	movs	r2, #0
 800d114:	601a      	str	r2, [r3, #0]
	}
 800d116:	e001      	b.n	800d11c <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 800d118:	f000 fb56 	bl	800d7c8 <vTaskSwitchContext>
	}
 800d11c:	bf00      	nop
 800d11e:	3710      	adds	r7, #16
 800d120:	46bd      	mov	sp, r7
 800d122:	bd80      	pop	{r7, pc}
 800d124:	200003ac 	.word	0x200003ac
 800d128:	200003b0 	.word	0x200003b0
 800d12c:	200004b4 	.word	0x200004b4
 800d130:	20000498 	.word	0x20000498
 800d134:	200004b8 	.word	0x200004b8
 800d138:	200004d4 	.word	0x200004d4
 800d13c:	e000ed04 	.word	0xe000ed04
 800d140:	200004ac 	.word	0x200004ac

0800d144 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800d144:	b480      	push	{r7}
 800d146:	b087      	sub	sp, #28
 800d148:	af00      	add	r7, sp, #0
 800d14a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800d14c:	2300      	movs	r3, #0
 800d14e:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d10a      	bne.n	800d170 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800d15a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d15e:	f383 8811 	msr	BASEPRI, r3
 800d162:	f3bf 8f6f 	isb	sy
 800d166:	f3bf 8f4f 	dsb	sy
 800d16a:	60fb      	str	r3, [r7, #12]
}
 800d16c:	bf00      	nop
 800d16e:	e7fe      	b.n	800d16e <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d170:	693b      	ldr	r3, [r7, #16]
 800d172:	695b      	ldr	r3, [r3, #20]
 800d174:	4a0e      	ldr	r2, [pc, #56]	; (800d1b0 <prvTaskIsTaskSuspended+0x6c>)
 800d176:	4293      	cmp	r3, r2
 800d178:	d101      	bne.n	800d17e <prvTaskIsTaskSuspended+0x3a>
 800d17a:	2301      	movs	r3, #1
 800d17c:	e000      	b.n	800d180 <prvTaskIsTaskSuspended+0x3c>
 800d17e:	2300      	movs	r3, #0
 800d180:	2b00      	cmp	r3, #0
 800d182:	d00f      	beq.n	800d1a4 <prvTaskIsTaskSuspended+0x60>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800d184:	693b      	ldr	r3, [r7, #16]
 800d186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d188:	4a0a      	ldr	r2, [pc, #40]	; (800d1b4 <prvTaskIsTaskSuspended+0x70>)
 800d18a:	4293      	cmp	r3, r2
 800d18c:	d00a      	beq.n	800d1a4 <prvTaskIsTaskSuspended+0x60>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800d18e:	693b      	ldr	r3, [r7, #16]
 800d190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d192:	2b00      	cmp	r3, #0
 800d194:	d101      	bne.n	800d19a <prvTaskIsTaskSuspended+0x56>
 800d196:	2301      	movs	r3, #1
 800d198:	e000      	b.n	800d19c <prvTaskIsTaskSuspended+0x58>
 800d19a:	2300      	movs	r3, #0
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d001      	beq.n	800d1a4 <prvTaskIsTaskSuspended+0x60>
				{
					xReturn = pdTRUE;
 800d1a0:	2301      	movs	r3, #1
 800d1a2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d1a4:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	371c      	adds	r7, #28
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	bc80      	pop	{r7}
 800d1ae:	4770      	bx	lr
 800d1b0:	20000498 	.word	0x20000498
 800d1b4:	2000046c 	.word	0x2000046c

0800d1b8 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800d1b8:	b580      	push	{r7, lr}
 800d1ba:	b084      	sub	sp, #16
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d10a      	bne.n	800d1e0 <vTaskResume+0x28>
	__asm volatile
 800d1ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1ce:	f383 8811 	msr	BASEPRI, r3
 800d1d2:	f3bf 8f6f 	isb	sy
 800d1d6:	f3bf 8f4f 	dsb	sy
 800d1da:	60bb      	str	r3, [r7, #8]
}
 800d1dc:	bf00      	nop
 800d1de:	e7fe      	b.n	800d1de <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d039      	beq.n	800d25a <vTaskResume+0xa2>
 800d1e6:	4b1f      	ldr	r3, [pc, #124]	; (800d264 <vTaskResume+0xac>)
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	68fa      	ldr	r2, [r7, #12]
 800d1ec:	429a      	cmp	r2, r3
 800d1ee:	d034      	beq.n	800d25a <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 800d1f0:	f001 fc4a 	bl	800ea88 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800d1f4:	68f8      	ldr	r0, [r7, #12]
 800d1f6:	f7ff ffa5 	bl	800d144 <prvTaskIsTaskSuspended>
 800d1fa:	4603      	mov	r3, r0
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d02a      	beq.n	800d256 <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	3304      	adds	r3, #4
 800d204:	4618      	mov	r0, r3
 800d206:	f7fe f9c1 	bl	800b58c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d20e:	2201      	movs	r2, #1
 800d210:	409a      	lsls	r2, r3
 800d212:	4b15      	ldr	r3, [pc, #84]	; (800d268 <vTaskResume+0xb0>)
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	4313      	orrs	r3, r2
 800d218:	4a13      	ldr	r2, [pc, #76]	; (800d268 <vTaskResume+0xb0>)
 800d21a:	6013      	str	r3, [r2, #0]
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d220:	4613      	mov	r3, r2
 800d222:	009b      	lsls	r3, r3, #2
 800d224:	4413      	add	r3, r2
 800d226:	009b      	lsls	r3, r3, #2
 800d228:	4a10      	ldr	r2, [pc, #64]	; (800d26c <vTaskResume+0xb4>)
 800d22a:	441a      	add	r2, r3
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	3304      	adds	r3, #4
 800d230:	4619      	mov	r1, r3
 800d232:	4610      	mov	r0, r2
 800d234:	f7fe f94f 	bl	800b4d6 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d23c:	4b09      	ldr	r3, [pc, #36]	; (800d264 <vTaskResume+0xac>)
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d242:	429a      	cmp	r2, r3
 800d244:	d307      	bcc.n	800d256 <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800d246:	4b0a      	ldr	r3, [pc, #40]	; (800d270 <vTaskResume+0xb8>)
 800d248:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d24c:	601a      	str	r2, [r3, #0]
 800d24e:	f3bf 8f4f 	dsb	sy
 800d252:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800d256:	f001 fc47 	bl	800eae8 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d25a:	bf00      	nop
 800d25c:	3710      	adds	r7, #16
 800d25e:	46bd      	mov	sp, r7
 800d260:	bd80      	pop	{r7, pc}
 800d262:	bf00      	nop
 800d264:	200003ac 	.word	0x200003ac
 800d268:	200004b4 	.word	0x200004b4
 800d26c:	200003b0 	.word	0x200003b0
 800d270:	e000ed04 	.word	0xe000ed04

0800d274 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 800d274:	b580      	push	{r7, lr}
 800d276:	b08a      	sub	sp, #40	; 0x28
 800d278:	af00      	add	r7, sp, #0
 800d27a:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 800d27c:	2300      	movs	r3, #0
 800d27e:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	2b00      	cmp	r3, #0
 800d288:	d10a      	bne.n	800d2a0 <xTaskResumeFromISR+0x2c>
	__asm volatile
 800d28a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d28e:	f383 8811 	msr	BASEPRI, r3
 800d292:	f3bf 8f6f 	isb	sy
 800d296:	f3bf 8f4f 	dsb	sy
 800d29a:	61bb      	str	r3, [r7, #24]
}
 800d29c:	bf00      	nop
 800d29e:	e7fe      	b.n	800d29e <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d2a0:	f001 fcb6 	bl	800ec10 <vPortValidateInterruptPriority>
	__asm volatile
 800d2a4:	f3ef 8211 	mrs	r2, BASEPRI
 800d2a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2ac:	f383 8811 	msr	BASEPRI, r3
 800d2b0:	f3bf 8f6f 	isb	sy
 800d2b4:	f3bf 8f4f 	dsb	sy
 800d2b8:	617a      	str	r2, [r7, #20]
 800d2ba:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800d2bc:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d2be:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800d2c0:	6a38      	ldr	r0, [r7, #32]
 800d2c2:	f7ff ff3f 	bl	800d144 <prvTaskIsTaskSuspended>
 800d2c6:	4603      	mov	r3, r0
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d02f      	beq.n	800d32c <xTaskResumeFromISR+0xb8>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d2cc:	4b1d      	ldr	r3, [pc, #116]	; (800d344 <xTaskResumeFromISR+0xd0>)
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d125      	bne.n	800d320 <xTaskResumeFromISR+0xac>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d2d4:	6a3b      	ldr	r3, [r7, #32]
 800d2d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2d8:	4b1b      	ldr	r3, [pc, #108]	; (800d348 <xTaskResumeFromISR+0xd4>)
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2de:	429a      	cmp	r2, r3
 800d2e0:	d301      	bcc.n	800d2e6 <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 800d2e2:	2301      	movs	r3, #1
 800d2e4:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d2e6:	6a3b      	ldr	r3, [r7, #32]
 800d2e8:	3304      	adds	r3, #4
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	f7fe f94e 	bl	800b58c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d2f0:	6a3b      	ldr	r3, [r7, #32]
 800d2f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2f4:	2201      	movs	r2, #1
 800d2f6:	409a      	lsls	r2, r3
 800d2f8:	4b14      	ldr	r3, [pc, #80]	; (800d34c <xTaskResumeFromISR+0xd8>)
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	4313      	orrs	r3, r2
 800d2fe:	4a13      	ldr	r2, [pc, #76]	; (800d34c <xTaskResumeFromISR+0xd8>)
 800d300:	6013      	str	r3, [r2, #0]
 800d302:	6a3b      	ldr	r3, [r7, #32]
 800d304:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d306:	4613      	mov	r3, r2
 800d308:	009b      	lsls	r3, r3, #2
 800d30a:	4413      	add	r3, r2
 800d30c:	009b      	lsls	r3, r3, #2
 800d30e:	4a10      	ldr	r2, [pc, #64]	; (800d350 <xTaskResumeFromISR+0xdc>)
 800d310:	441a      	add	r2, r3
 800d312:	6a3b      	ldr	r3, [r7, #32]
 800d314:	3304      	adds	r3, #4
 800d316:	4619      	mov	r1, r3
 800d318:	4610      	mov	r0, r2
 800d31a:	f7fe f8dc 	bl	800b4d6 <vListInsertEnd>
 800d31e:	e005      	b.n	800d32c <xTaskResumeFromISR+0xb8>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800d320:	6a3b      	ldr	r3, [r7, #32]
 800d322:	3318      	adds	r3, #24
 800d324:	4619      	mov	r1, r3
 800d326:	480b      	ldr	r0, [pc, #44]	; (800d354 <xTaskResumeFromISR+0xe0>)
 800d328:	f7fe f8d5 	bl	800b4d6 <vListInsertEnd>
 800d32c:	69fb      	ldr	r3, [r7, #28]
 800d32e:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	f383 8811 	msr	BASEPRI, r3
}
 800d336:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 800d338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800d33a:	4618      	mov	r0, r3
 800d33c:	3728      	adds	r7, #40	; 0x28
 800d33e:	46bd      	mov	sp, r7
 800d340:	bd80      	pop	{r7, pc}
 800d342:	bf00      	nop
 800d344:	200004d4 	.word	0x200004d4
 800d348:	200003ac 	.word	0x200003ac
 800d34c:	200004b4 	.word	0x200004b4
 800d350:	200003b0 	.word	0x200003b0
 800d354:	2000046c 	.word	0x2000046c

0800d358 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d358:	b580      	push	{r7, lr}
 800d35a:	b08a      	sub	sp, #40	; 0x28
 800d35c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d35e:	2300      	movs	r3, #0
 800d360:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d362:	2300      	movs	r3, #0
 800d364:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d366:	463a      	mov	r2, r7
 800d368:	1d39      	adds	r1, r7, #4
 800d36a:	f107 0308 	add.w	r3, r7, #8
 800d36e:	4618      	mov	r0, r3
 800d370:	f7f2 feee 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d374:	6839      	ldr	r1, [r7, #0]
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	68ba      	ldr	r2, [r7, #8]
 800d37a:	9202      	str	r2, [sp, #8]
 800d37c:	9301      	str	r3, [sp, #4]
 800d37e:	2300      	movs	r3, #0
 800d380:	9300      	str	r3, [sp, #0]
 800d382:	2300      	movs	r3, #0
 800d384:	460a      	mov	r2, r1
 800d386:	4921      	ldr	r1, [pc, #132]	; (800d40c <vTaskStartScheduler+0xb4>)
 800d388:	4821      	ldr	r0, [pc, #132]	; (800d410 <vTaskStartScheduler+0xb8>)
 800d38a:	f7ff faef 	bl	800c96c <xTaskCreateStatic>
 800d38e:	4603      	mov	r3, r0
 800d390:	4a20      	ldr	r2, [pc, #128]	; (800d414 <vTaskStartScheduler+0xbc>)
 800d392:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d394:	4b1f      	ldr	r3, [pc, #124]	; (800d414 <vTaskStartScheduler+0xbc>)
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d002      	beq.n	800d3a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d39c:	2301      	movs	r3, #1
 800d39e:	617b      	str	r3, [r7, #20]
 800d3a0:	e001      	b.n	800d3a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d3a2:	2300      	movs	r3, #0
 800d3a4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d3a6:	697b      	ldr	r3, [r7, #20]
 800d3a8:	2b01      	cmp	r3, #1
 800d3aa:	d11b      	bne.n	800d3e4 <vTaskStartScheduler+0x8c>
	__asm volatile
 800d3ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3b0:	f383 8811 	msr	BASEPRI, r3
 800d3b4:	f3bf 8f6f 	isb	sy
 800d3b8:	f3bf 8f4f 	dsb	sy
 800d3bc:	613b      	str	r3, [r7, #16]
}
 800d3be:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d3c0:	4b15      	ldr	r3, [pc, #84]	; (800d418 <vTaskStartScheduler+0xc0>)
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	334c      	adds	r3, #76	; 0x4c
 800d3c6:	4a15      	ldr	r2, [pc, #84]	; (800d41c <vTaskStartScheduler+0xc4>)
 800d3c8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d3ca:	4b15      	ldr	r3, [pc, #84]	; (800d420 <vTaskStartScheduler+0xc8>)
 800d3cc:	f04f 32ff 	mov.w	r2, #4294967295
 800d3d0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d3d2:	4b14      	ldr	r3, [pc, #80]	; (800d424 <vTaskStartScheduler+0xcc>)
 800d3d4:	2201      	movs	r2, #1
 800d3d6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800d3d8:	4b13      	ldr	r3, [pc, #76]	; (800d428 <vTaskStartScheduler+0xd0>)
 800d3da:	2200      	movs	r2, #0
 800d3dc:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d3de:	f001 fac8 	bl	800e972 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d3e2:	e00e      	b.n	800d402 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d3e4:	697b      	ldr	r3, [r7, #20]
 800d3e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3ea:	d10a      	bne.n	800d402 <vTaskStartScheduler+0xaa>
	__asm volatile
 800d3ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3f0:	f383 8811 	msr	BASEPRI, r3
 800d3f4:	f3bf 8f6f 	isb	sy
 800d3f8:	f3bf 8f4f 	dsb	sy
 800d3fc:	60fb      	str	r3, [r7, #12]
}
 800d3fe:	bf00      	nop
 800d400:	e7fe      	b.n	800d400 <vTaskStartScheduler+0xa8>
}
 800d402:	bf00      	nop
 800d404:	3718      	adds	r7, #24
 800d406:	46bd      	mov	sp, r7
 800d408:	bd80      	pop	{r7, pc}
 800d40a:	bf00      	nop
 800d40c:	0800f2f8 	.word	0x0800f2f8
 800d410:	0800dc29 	.word	0x0800dc29
 800d414:	200004d0 	.word	0x200004d0
 800d418:	200003ac 	.word	0x200003ac
 800d41c:	2000005c 	.word	0x2000005c
 800d420:	200004cc 	.word	0x200004cc
 800d424:	200004b8 	.word	0x200004b8
 800d428:	200004b0 	.word	0x200004b0

0800d42c <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
 800d42c:	b580      	push	{r7, lr}
 800d42e:	b082      	sub	sp, #8
 800d430:	af00      	add	r7, sp, #0
	__asm volatile
 800d432:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d436:	f383 8811 	msr	BASEPRI, r3
 800d43a:	f3bf 8f6f 	isb	sy
 800d43e:	f3bf 8f4f 	dsb	sy
 800d442:	607b      	str	r3, [r7, #4]
}
 800d444:	bf00      	nop
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
	xSchedulerRunning = pdFALSE;
 800d446:	4b04      	ldr	r3, [pc, #16]	; (800d458 <vTaskEndScheduler+0x2c>)
 800d448:	2200      	movs	r2, #0
 800d44a:	601a      	str	r2, [r3, #0]
	vPortEndScheduler();
 800d44c:	f001 fb02 	bl	800ea54 <vPortEndScheduler>
}
 800d450:	bf00      	nop
 800d452:	3708      	adds	r7, #8
 800d454:	46bd      	mov	sp, r7
 800d456:	bd80      	pop	{r7, pc}
 800d458:	200004b8 	.word	0x200004b8

0800d45c <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d45c:	b480      	push	{r7}
 800d45e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800d460:	4b04      	ldr	r3, [pc, #16]	; (800d474 <vTaskSuspendAll+0x18>)
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	3301      	adds	r3, #1
 800d466:	4a03      	ldr	r2, [pc, #12]	; (800d474 <vTaskSuspendAll+0x18>)
 800d468:	6013      	str	r3, [r2, #0]
}
 800d46a:	bf00      	nop
 800d46c:	46bd      	mov	sp, r7
 800d46e:	bc80      	pop	{r7}
 800d470:	4770      	bx	lr
 800d472:	bf00      	nop
 800d474:	200004d4 	.word	0x200004d4

0800d478 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d478:	b580      	push	{r7, lr}
 800d47a:	b084      	sub	sp, #16
 800d47c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d47e:	2300      	movs	r3, #0
 800d480:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d482:	2300      	movs	r3, #0
 800d484:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d486:	4b41      	ldr	r3, [pc, #260]	; (800d58c <xTaskResumeAll+0x114>)
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d10a      	bne.n	800d4a4 <xTaskResumeAll+0x2c>
	__asm volatile
 800d48e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d492:	f383 8811 	msr	BASEPRI, r3
 800d496:	f3bf 8f6f 	isb	sy
 800d49a:	f3bf 8f4f 	dsb	sy
 800d49e:	603b      	str	r3, [r7, #0]
}
 800d4a0:	bf00      	nop
 800d4a2:	e7fe      	b.n	800d4a2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d4a4:	f001 faf0 	bl	800ea88 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d4a8:	4b38      	ldr	r3, [pc, #224]	; (800d58c <xTaskResumeAll+0x114>)
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	3b01      	subs	r3, #1
 800d4ae:	4a37      	ldr	r2, [pc, #220]	; (800d58c <xTaskResumeAll+0x114>)
 800d4b0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d4b2:	4b36      	ldr	r3, [pc, #216]	; (800d58c <xTaskResumeAll+0x114>)
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d161      	bne.n	800d57e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d4ba:	4b35      	ldr	r3, [pc, #212]	; (800d590 <xTaskResumeAll+0x118>)
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d05d      	beq.n	800d57e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d4c2:	e02e      	b.n	800d522 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800d4c4:	4b33      	ldr	r3, [pc, #204]	; (800d594 <xTaskResumeAll+0x11c>)
 800d4c6:	68db      	ldr	r3, [r3, #12]
 800d4c8:	68db      	ldr	r3, [r3, #12]
 800d4ca:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	3318      	adds	r3, #24
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	f7fe f85b 	bl	800b58c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	3304      	adds	r3, #4
 800d4da:	4618      	mov	r0, r3
 800d4dc:	f7fe f856 	bl	800b58c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4e4:	2201      	movs	r2, #1
 800d4e6:	409a      	lsls	r2, r3
 800d4e8:	4b2b      	ldr	r3, [pc, #172]	; (800d598 <xTaskResumeAll+0x120>)
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	4313      	orrs	r3, r2
 800d4ee:	4a2a      	ldr	r2, [pc, #168]	; (800d598 <xTaskResumeAll+0x120>)
 800d4f0:	6013      	str	r3, [r2, #0]
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4f6:	4613      	mov	r3, r2
 800d4f8:	009b      	lsls	r3, r3, #2
 800d4fa:	4413      	add	r3, r2
 800d4fc:	009b      	lsls	r3, r3, #2
 800d4fe:	4a27      	ldr	r2, [pc, #156]	; (800d59c <xTaskResumeAll+0x124>)
 800d500:	441a      	add	r2, r3
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	3304      	adds	r3, #4
 800d506:	4619      	mov	r1, r3
 800d508:	4610      	mov	r0, r2
 800d50a:	f7fd ffe4 	bl	800b4d6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d512:	4b23      	ldr	r3, [pc, #140]	; (800d5a0 <xTaskResumeAll+0x128>)
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d518:	429a      	cmp	r2, r3
 800d51a:	d302      	bcc.n	800d522 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800d51c:	4b21      	ldr	r3, [pc, #132]	; (800d5a4 <xTaskResumeAll+0x12c>)
 800d51e:	2201      	movs	r2, #1
 800d520:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d522:	4b1c      	ldr	r3, [pc, #112]	; (800d594 <xTaskResumeAll+0x11c>)
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	2b00      	cmp	r3, #0
 800d528:	d1cc      	bne.n	800d4c4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d001      	beq.n	800d534 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d530:	f000 fc34 	bl	800dd9c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800d534:	4b1c      	ldr	r3, [pc, #112]	; (800d5a8 <xTaskResumeAll+0x130>)
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d010      	beq.n	800d562 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d540:	f000 f884 	bl	800d64c <xTaskIncrementTick>
 800d544:	4603      	mov	r3, r0
 800d546:	2b00      	cmp	r3, #0
 800d548:	d002      	beq.n	800d550 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800d54a:	4b16      	ldr	r3, [pc, #88]	; (800d5a4 <xTaskResumeAll+0x12c>)
 800d54c:	2201      	movs	r2, #1
 800d54e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	3b01      	subs	r3, #1
 800d554:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d1f1      	bne.n	800d540 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800d55c:	4b12      	ldr	r3, [pc, #72]	; (800d5a8 <xTaskResumeAll+0x130>)
 800d55e:	2200      	movs	r2, #0
 800d560:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d562:	4b10      	ldr	r3, [pc, #64]	; (800d5a4 <xTaskResumeAll+0x12c>)
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	2b00      	cmp	r3, #0
 800d568:	d009      	beq.n	800d57e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d56a:	2301      	movs	r3, #1
 800d56c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d56e:	4b0f      	ldr	r3, [pc, #60]	; (800d5ac <xTaskResumeAll+0x134>)
 800d570:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d574:	601a      	str	r2, [r3, #0]
 800d576:	f3bf 8f4f 	dsb	sy
 800d57a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d57e:	f001 fab3 	bl	800eae8 <vPortExitCritical>

	return xAlreadyYielded;
 800d582:	68bb      	ldr	r3, [r7, #8]
}
 800d584:	4618      	mov	r0, r3
 800d586:	3710      	adds	r7, #16
 800d588:	46bd      	mov	sp, r7
 800d58a:	bd80      	pop	{r7, pc}
 800d58c:	200004d4 	.word	0x200004d4
 800d590:	200004ac 	.word	0x200004ac
 800d594:	2000046c 	.word	0x2000046c
 800d598:	200004b4 	.word	0x200004b4
 800d59c:	200003b0 	.word	0x200003b0
 800d5a0:	200003ac 	.word	0x200003ac
 800d5a4:	200004c0 	.word	0x200004c0
 800d5a8:	200004bc 	.word	0x200004bc
 800d5ac:	e000ed04 	.word	0xe000ed04

0800d5b0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d5b0:	b480      	push	{r7}
 800d5b2:	b083      	sub	sp, #12
 800d5b4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d5b6:	4b04      	ldr	r3, [pc, #16]	; (800d5c8 <xTaskGetTickCount+0x18>)
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d5bc:	687b      	ldr	r3, [r7, #4]
}
 800d5be:	4618      	mov	r0, r3
 800d5c0:	370c      	adds	r7, #12
 800d5c2:	46bd      	mov	sp, r7
 800d5c4:	bc80      	pop	{r7}
 800d5c6:	4770      	bx	lr
 800d5c8:	200004b0 	.word	0x200004b0

0800d5cc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800d5cc:	b580      	push	{r7, lr}
 800d5ce:	b082      	sub	sp, #8
 800d5d0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d5d2:	f001 fb1d 	bl	800ec10 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800d5d6:	2300      	movs	r3, #0
 800d5d8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800d5da:	4b04      	ldr	r3, [pc, #16]	; (800d5ec <xTaskGetTickCountFromISR+0x20>)
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d5e0:	683b      	ldr	r3, [r7, #0]
}
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	3708      	adds	r7, #8
 800d5e6:	46bd      	mov	sp, r7
 800d5e8:	bd80      	pop	{r7, pc}
 800d5ea:	bf00      	nop
 800d5ec:	200004b0 	.word	0x200004b0

0800d5f0 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 800d5f0:	b480      	push	{r7}
 800d5f2:	af00      	add	r7, sp, #0
	/* A critical section is not required because the variables are of type
	BaseType_t. */
	return uxCurrentNumberOfTasks;
 800d5f4:	4b02      	ldr	r3, [pc, #8]	; (800d600 <uxTaskGetNumberOfTasks+0x10>)
 800d5f6:	681b      	ldr	r3, [r3, #0]
}
 800d5f8:	4618      	mov	r0, r3
 800d5fa:	46bd      	mov	sp, r7
 800d5fc:	bc80      	pop	{r7}
 800d5fe:	4770      	bx	lr
 800d600:	200004ac 	.word	0x200004ac

0800d604 <pcTaskGetName>:
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 800d604:	b480      	push	{r7}
 800d606:	b085      	sub	sp, #20
 800d608:	af00      	add	r7, sp, #0
 800d60a:	6078      	str	r0, [r7, #4]
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d102      	bne.n	800d618 <pcTaskGetName+0x14>
 800d612:	4b0d      	ldr	r3, [pc, #52]	; (800d648 <pcTaskGetName+0x44>)
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	e000      	b.n	800d61a <pcTaskGetName+0x16>
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	60fb      	str	r3, [r7, #12]
	configASSERT( pxTCB );
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d10a      	bne.n	800d638 <pcTaskGetName+0x34>
	__asm volatile
 800d622:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d626:	f383 8811 	msr	BASEPRI, r3
 800d62a:	f3bf 8f6f 	isb	sy
 800d62e:	f3bf 8f4f 	dsb	sy
 800d632:	60bb      	str	r3, [r7, #8]
}
 800d634:	bf00      	nop
 800d636:	e7fe      	b.n	800d636 <pcTaskGetName+0x32>
	return &( pxTCB->pcTaskName[ 0 ] );
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	3334      	adds	r3, #52	; 0x34
}
 800d63c:	4618      	mov	r0, r3
 800d63e:	3714      	adds	r7, #20
 800d640:	46bd      	mov	sp, r7
 800d642:	bc80      	pop	{r7}
 800d644:	4770      	bx	lr
 800d646:	bf00      	nop
 800d648:	200003ac 	.word	0x200003ac

0800d64c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d64c:	b580      	push	{r7, lr}
 800d64e:	b086      	sub	sp, #24
 800d650:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d652:	2300      	movs	r3, #0
 800d654:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d656:	4b51      	ldr	r3, [pc, #324]	; (800d79c <xTaskIncrementTick+0x150>)
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	f040 808d 	bne.w	800d77a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d660:	4b4f      	ldr	r3, [pc, #316]	; (800d7a0 <xTaskIncrementTick+0x154>)
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	3301      	adds	r3, #1
 800d666:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d668:	4a4d      	ldr	r2, [pc, #308]	; (800d7a0 <xTaskIncrementTick+0x154>)
 800d66a:	693b      	ldr	r3, [r7, #16]
 800d66c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d66e:	693b      	ldr	r3, [r7, #16]
 800d670:	2b00      	cmp	r3, #0
 800d672:	d120      	bne.n	800d6b6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d674:	4b4b      	ldr	r3, [pc, #300]	; (800d7a4 <xTaskIncrementTick+0x158>)
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d00a      	beq.n	800d694 <xTaskIncrementTick+0x48>
	__asm volatile
 800d67e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d682:	f383 8811 	msr	BASEPRI, r3
 800d686:	f3bf 8f6f 	isb	sy
 800d68a:	f3bf 8f4f 	dsb	sy
 800d68e:	603b      	str	r3, [r7, #0]
}
 800d690:	bf00      	nop
 800d692:	e7fe      	b.n	800d692 <xTaskIncrementTick+0x46>
 800d694:	4b43      	ldr	r3, [pc, #268]	; (800d7a4 <xTaskIncrementTick+0x158>)
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	60fb      	str	r3, [r7, #12]
 800d69a:	4b43      	ldr	r3, [pc, #268]	; (800d7a8 <xTaskIncrementTick+0x15c>)
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	4a41      	ldr	r2, [pc, #260]	; (800d7a4 <xTaskIncrementTick+0x158>)
 800d6a0:	6013      	str	r3, [r2, #0]
 800d6a2:	4a41      	ldr	r2, [pc, #260]	; (800d7a8 <xTaskIncrementTick+0x15c>)
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	6013      	str	r3, [r2, #0]
 800d6a8:	4b40      	ldr	r3, [pc, #256]	; (800d7ac <xTaskIncrementTick+0x160>)
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	3301      	adds	r3, #1
 800d6ae:	4a3f      	ldr	r2, [pc, #252]	; (800d7ac <xTaskIncrementTick+0x160>)
 800d6b0:	6013      	str	r3, [r2, #0]
 800d6b2:	f000 fb73 	bl	800dd9c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d6b6:	4b3e      	ldr	r3, [pc, #248]	; (800d7b0 <xTaskIncrementTick+0x164>)
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	693a      	ldr	r2, [r7, #16]
 800d6bc:	429a      	cmp	r2, r3
 800d6be:	d34d      	bcc.n	800d75c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d6c0:	4b38      	ldr	r3, [pc, #224]	; (800d7a4 <xTaskIncrementTick+0x158>)
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d101      	bne.n	800d6ce <xTaskIncrementTick+0x82>
 800d6ca:	2301      	movs	r3, #1
 800d6cc:	e000      	b.n	800d6d0 <xTaskIncrementTick+0x84>
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d004      	beq.n	800d6de <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d6d4:	4b36      	ldr	r3, [pc, #216]	; (800d7b0 <xTaskIncrementTick+0x164>)
 800d6d6:	f04f 32ff 	mov.w	r2, #4294967295
 800d6da:	601a      	str	r2, [r3, #0]
					break;
 800d6dc:	e03e      	b.n	800d75c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800d6de:	4b31      	ldr	r3, [pc, #196]	; (800d7a4 <xTaskIncrementTick+0x158>)
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	68db      	ldr	r3, [r3, #12]
 800d6e4:	68db      	ldr	r3, [r3, #12]
 800d6e6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d6e8:	68bb      	ldr	r3, [r7, #8]
 800d6ea:	685b      	ldr	r3, [r3, #4]
 800d6ec:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d6ee:	693a      	ldr	r2, [r7, #16]
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	429a      	cmp	r2, r3
 800d6f4:	d203      	bcs.n	800d6fe <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d6f6:	4a2e      	ldr	r2, [pc, #184]	; (800d7b0 <xTaskIncrementTick+0x164>)
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	6013      	str	r3, [r2, #0]
						break;
 800d6fc:	e02e      	b.n	800d75c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d6fe:	68bb      	ldr	r3, [r7, #8]
 800d700:	3304      	adds	r3, #4
 800d702:	4618      	mov	r0, r3
 800d704:	f7fd ff42 	bl	800b58c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d708:	68bb      	ldr	r3, [r7, #8]
 800d70a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d004      	beq.n	800d71a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d710:	68bb      	ldr	r3, [r7, #8]
 800d712:	3318      	adds	r3, #24
 800d714:	4618      	mov	r0, r3
 800d716:	f7fd ff39 	bl	800b58c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d71a:	68bb      	ldr	r3, [r7, #8]
 800d71c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d71e:	2201      	movs	r2, #1
 800d720:	409a      	lsls	r2, r3
 800d722:	4b24      	ldr	r3, [pc, #144]	; (800d7b4 <xTaskIncrementTick+0x168>)
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	4313      	orrs	r3, r2
 800d728:	4a22      	ldr	r2, [pc, #136]	; (800d7b4 <xTaskIncrementTick+0x168>)
 800d72a:	6013      	str	r3, [r2, #0]
 800d72c:	68bb      	ldr	r3, [r7, #8]
 800d72e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d730:	4613      	mov	r3, r2
 800d732:	009b      	lsls	r3, r3, #2
 800d734:	4413      	add	r3, r2
 800d736:	009b      	lsls	r3, r3, #2
 800d738:	4a1f      	ldr	r2, [pc, #124]	; (800d7b8 <xTaskIncrementTick+0x16c>)
 800d73a:	441a      	add	r2, r3
 800d73c:	68bb      	ldr	r3, [r7, #8]
 800d73e:	3304      	adds	r3, #4
 800d740:	4619      	mov	r1, r3
 800d742:	4610      	mov	r0, r2
 800d744:	f7fd fec7 	bl	800b4d6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d748:	68bb      	ldr	r3, [r7, #8]
 800d74a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d74c:	4b1b      	ldr	r3, [pc, #108]	; (800d7bc <xTaskIncrementTick+0x170>)
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d752:	429a      	cmp	r2, r3
 800d754:	d3b4      	bcc.n	800d6c0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d756:	2301      	movs	r3, #1
 800d758:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d75a:	e7b1      	b.n	800d6c0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d75c:	4b17      	ldr	r3, [pc, #92]	; (800d7bc <xTaskIncrementTick+0x170>)
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d762:	4915      	ldr	r1, [pc, #84]	; (800d7b8 <xTaskIncrementTick+0x16c>)
 800d764:	4613      	mov	r3, r2
 800d766:	009b      	lsls	r3, r3, #2
 800d768:	4413      	add	r3, r2
 800d76a:	009b      	lsls	r3, r3, #2
 800d76c:	440b      	add	r3, r1
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	2b01      	cmp	r3, #1
 800d772:	d907      	bls.n	800d784 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800d774:	2301      	movs	r3, #1
 800d776:	617b      	str	r3, [r7, #20]
 800d778:	e004      	b.n	800d784 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800d77a:	4b11      	ldr	r3, [pc, #68]	; (800d7c0 <xTaskIncrementTick+0x174>)
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	3301      	adds	r3, #1
 800d780:	4a0f      	ldr	r2, [pc, #60]	; (800d7c0 <xTaskIncrementTick+0x174>)
 800d782:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800d784:	4b0f      	ldr	r3, [pc, #60]	; (800d7c4 <xTaskIncrementTick+0x178>)
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d001      	beq.n	800d790 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800d78c:	2301      	movs	r3, #1
 800d78e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800d790:	697b      	ldr	r3, [r7, #20]
}
 800d792:	4618      	mov	r0, r3
 800d794:	3718      	adds	r7, #24
 800d796:	46bd      	mov	sp, r7
 800d798:	bd80      	pop	{r7, pc}
 800d79a:	bf00      	nop
 800d79c:	200004d4 	.word	0x200004d4
 800d7a0:	200004b0 	.word	0x200004b0
 800d7a4:	20000464 	.word	0x20000464
 800d7a8:	20000468 	.word	0x20000468
 800d7ac:	200004c4 	.word	0x200004c4
 800d7b0:	200004cc 	.word	0x200004cc
 800d7b4:	200004b4 	.word	0x200004b4
 800d7b8:	200003b0 	.word	0x200003b0
 800d7bc:	200003ac 	.word	0x200003ac
 800d7c0:	200004bc 	.word	0x200004bc
 800d7c4:	200004c0 	.word	0x200004c0

0800d7c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d7c8:	b480      	push	{r7}
 800d7ca:	b087      	sub	sp, #28
 800d7cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d7ce:	4b29      	ldr	r3, [pc, #164]	; (800d874 <vTaskSwitchContext+0xac>)
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d003      	beq.n	800d7de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d7d6:	4b28      	ldr	r3, [pc, #160]	; (800d878 <vTaskSwitchContext+0xb0>)
 800d7d8:	2201      	movs	r2, #1
 800d7da:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d7dc:	e044      	b.n	800d868 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800d7de:	4b26      	ldr	r3, [pc, #152]	; (800d878 <vTaskSwitchContext+0xb0>)
 800d7e0:	2200      	movs	r2, #0
 800d7e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800d7e4:	4b25      	ldr	r3, [pc, #148]	; (800d87c <vTaskSwitchContext+0xb4>)
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	fab3 f383 	clz	r3, r3
 800d7f0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800d7f2:	7afb      	ldrb	r3, [r7, #11]
 800d7f4:	f1c3 031f 	rsb	r3, r3, #31
 800d7f8:	617b      	str	r3, [r7, #20]
 800d7fa:	4921      	ldr	r1, [pc, #132]	; (800d880 <vTaskSwitchContext+0xb8>)
 800d7fc:	697a      	ldr	r2, [r7, #20]
 800d7fe:	4613      	mov	r3, r2
 800d800:	009b      	lsls	r3, r3, #2
 800d802:	4413      	add	r3, r2
 800d804:	009b      	lsls	r3, r3, #2
 800d806:	440b      	add	r3, r1
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d10a      	bne.n	800d824 <vTaskSwitchContext+0x5c>
	__asm volatile
 800d80e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d812:	f383 8811 	msr	BASEPRI, r3
 800d816:	f3bf 8f6f 	isb	sy
 800d81a:	f3bf 8f4f 	dsb	sy
 800d81e:	607b      	str	r3, [r7, #4]
}
 800d820:	bf00      	nop
 800d822:	e7fe      	b.n	800d822 <vTaskSwitchContext+0x5a>
 800d824:	697a      	ldr	r2, [r7, #20]
 800d826:	4613      	mov	r3, r2
 800d828:	009b      	lsls	r3, r3, #2
 800d82a:	4413      	add	r3, r2
 800d82c:	009b      	lsls	r3, r3, #2
 800d82e:	4a14      	ldr	r2, [pc, #80]	; (800d880 <vTaskSwitchContext+0xb8>)
 800d830:	4413      	add	r3, r2
 800d832:	613b      	str	r3, [r7, #16]
 800d834:	693b      	ldr	r3, [r7, #16]
 800d836:	685b      	ldr	r3, [r3, #4]
 800d838:	685a      	ldr	r2, [r3, #4]
 800d83a:	693b      	ldr	r3, [r7, #16]
 800d83c:	605a      	str	r2, [r3, #4]
 800d83e:	693b      	ldr	r3, [r7, #16]
 800d840:	685a      	ldr	r2, [r3, #4]
 800d842:	693b      	ldr	r3, [r7, #16]
 800d844:	3308      	adds	r3, #8
 800d846:	429a      	cmp	r2, r3
 800d848:	d104      	bne.n	800d854 <vTaskSwitchContext+0x8c>
 800d84a:	693b      	ldr	r3, [r7, #16]
 800d84c:	685b      	ldr	r3, [r3, #4]
 800d84e:	685a      	ldr	r2, [r3, #4]
 800d850:	693b      	ldr	r3, [r7, #16]
 800d852:	605a      	str	r2, [r3, #4]
 800d854:	693b      	ldr	r3, [r7, #16]
 800d856:	685b      	ldr	r3, [r3, #4]
 800d858:	68db      	ldr	r3, [r3, #12]
 800d85a:	4a0a      	ldr	r2, [pc, #40]	; (800d884 <vTaskSwitchContext+0xbc>)
 800d85c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d85e:	4b09      	ldr	r3, [pc, #36]	; (800d884 <vTaskSwitchContext+0xbc>)
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	334c      	adds	r3, #76	; 0x4c
 800d864:	4a08      	ldr	r2, [pc, #32]	; (800d888 <vTaskSwitchContext+0xc0>)
 800d866:	6013      	str	r3, [r2, #0]
}
 800d868:	bf00      	nop
 800d86a:	371c      	adds	r7, #28
 800d86c:	46bd      	mov	sp, r7
 800d86e:	bc80      	pop	{r7}
 800d870:	4770      	bx	lr
 800d872:	bf00      	nop
 800d874:	200004d4 	.word	0x200004d4
 800d878:	200004c0 	.word	0x200004c0
 800d87c:	200004b4 	.word	0x200004b4
 800d880:	200003b0 	.word	0x200003b0
 800d884:	200003ac 	.word	0x200003ac
 800d888:	2000005c 	.word	0x2000005c

0800d88c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d88c:	b580      	push	{r7, lr}
 800d88e:	b084      	sub	sp, #16
 800d890:	af00      	add	r7, sp, #0
 800d892:	6078      	str	r0, [r7, #4]
 800d894:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d10a      	bne.n	800d8b2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d89c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8a0:	f383 8811 	msr	BASEPRI, r3
 800d8a4:	f3bf 8f6f 	isb	sy
 800d8a8:	f3bf 8f4f 	dsb	sy
 800d8ac:	60fb      	str	r3, [r7, #12]
}
 800d8ae:	bf00      	nop
 800d8b0:	e7fe      	b.n	800d8b0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d8b2:	4b07      	ldr	r3, [pc, #28]	; (800d8d0 <vTaskPlaceOnEventList+0x44>)
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	3318      	adds	r3, #24
 800d8b8:	4619      	mov	r1, r3
 800d8ba:	6878      	ldr	r0, [r7, #4]
 800d8bc:	f7fd fe2e 	bl	800b51c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d8c0:	2101      	movs	r1, #1
 800d8c2:	6838      	ldr	r0, [r7, #0]
 800d8c4:	f000 ff72 	bl	800e7ac <prvAddCurrentTaskToDelayedList>
}
 800d8c8:	bf00      	nop
 800d8ca:	3710      	adds	r7, #16
 800d8cc:	46bd      	mov	sp, r7
 800d8ce:	bd80      	pop	{r7, pc}
 800d8d0:	200003ac 	.word	0x200003ac

0800d8d4 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800d8d4:	b580      	push	{r7, lr}
 800d8d6:	b086      	sub	sp, #24
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	60f8      	str	r0, [r7, #12]
 800d8dc:	60b9      	str	r1, [r7, #8]
 800d8de:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d10a      	bne.n	800d8fc <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 800d8e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8ea:	f383 8811 	msr	BASEPRI, r3
 800d8ee:	f3bf 8f6f 	isb	sy
 800d8f2:	f3bf 8f4f 	dsb	sy
 800d8f6:	617b      	str	r3, [r7, #20]
}
 800d8f8:	bf00      	nop
 800d8fa:	e7fe      	b.n	800d8fa <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800d8fc:	4b11      	ldr	r3, [pc, #68]	; (800d944 <vTaskPlaceOnUnorderedEventList+0x70>)
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	2b00      	cmp	r3, #0
 800d902:	d10a      	bne.n	800d91a <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 800d904:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d908:	f383 8811 	msr	BASEPRI, r3
 800d90c:	f3bf 8f6f 	isb	sy
 800d910:	f3bf 8f4f 	dsb	sy
 800d914:	613b      	str	r3, [r7, #16]
}
 800d916:	bf00      	nop
 800d918:	e7fe      	b.n	800d918 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800d91a:	4b0b      	ldr	r3, [pc, #44]	; (800d948 <vTaskPlaceOnUnorderedEventList+0x74>)
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	68ba      	ldr	r2, [r7, #8]
 800d920:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800d924:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d926:	4b08      	ldr	r3, [pc, #32]	; (800d948 <vTaskPlaceOnUnorderedEventList+0x74>)
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	3318      	adds	r3, #24
 800d92c:	4619      	mov	r1, r3
 800d92e:	68f8      	ldr	r0, [r7, #12]
 800d930:	f7fd fdd1 	bl	800b4d6 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d934:	2101      	movs	r1, #1
 800d936:	6878      	ldr	r0, [r7, #4]
 800d938:	f000 ff38 	bl	800e7ac <prvAddCurrentTaskToDelayedList>
}
 800d93c:	bf00      	nop
 800d93e:	3718      	adds	r7, #24
 800d940:	46bd      	mov	sp, r7
 800d942:	bd80      	pop	{r7, pc}
 800d944:	200004d4 	.word	0x200004d4
 800d948:	200003ac 	.word	0x200003ac

0800d94c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d94c:	b580      	push	{r7, lr}
 800d94e:	b086      	sub	sp, #24
 800d950:	af00      	add	r7, sp, #0
 800d952:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	68db      	ldr	r3, [r3, #12]
 800d958:	68db      	ldr	r3, [r3, #12]
 800d95a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d95c:	693b      	ldr	r3, [r7, #16]
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d10a      	bne.n	800d978 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d962:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d966:	f383 8811 	msr	BASEPRI, r3
 800d96a:	f3bf 8f6f 	isb	sy
 800d96e:	f3bf 8f4f 	dsb	sy
 800d972:	60fb      	str	r3, [r7, #12]
}
 800d974:	bf00      	nop
 800d976:	e7fe      	b.n	800d976 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d978:	693b      	ldr	r3, [r7, #16]
 800d97a:	3318      	adds	r3, #24
 800d97c:	4618      	mov	r0, r3
 800d97e:	f7fd fe05 	bl	800b58c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d982:	4b1d      	ldr	r3, [pc, #116]	; (800d9f8 <xTaskRemoveFromEventList+0xac>)
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	2b00      	cmp	r3, #0
 800d988:	d11c      	bne.n	800d9c4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d98a:	693b      	ldr	r3, [r7, #16]
 800d98c:	3304      	adds	r3, #4
 800d98e:	4618      	mov	r0, r3
 800d990:	f7fd fdfc 	bl	800b58c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d994:	693b      	ldr	r3, [r7, #16]
 800d996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d998:	2201      	movs	r2, #1
 800d99a:	409a      	lsls	r2, r3
 800d99c:	4b17      	ldr	r3, [pc, #92]	; (800d9fc <xTaskRemoveFromEventList+0xb0>)
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	4313      	orrs	r3, r2
 800d9a2:	4a16      	ldr	r2, [pc, #88]	; (800d9fc <xTaskRemoveFromEventList+0xb0>)
 800d9a4:	6013      	str	r3, [r2, #0]
 800d9a6:	693b      	ldr	r3, [r7, #16]
 800d9a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9aa:	4613      	mov	r3, r2
 800d9ac:	009b      	lsls	r3, r3, #2
 800d9ae:	4413      	add	r3, r2
 800d9b0:	009b      	lsls	r3, r3, #2
 800d9b2:	4a13      	ldr	r2, [pc, #76]	; (800da00 <xTaskRemoveFromEventList+0xb4>)
 800d9b4:	441a      	add	r2, r3
 800d9b6:	693b      	ldr	r3, [r7, #16]
 800d9b8:	3304      	adds	r3, #4
 800d9ba:	4619      	mov	r1, r3
 800d9bc:	4610      	mov	r0, r2
 800d9be:	f7fd fd8a 	bl	800b4d6 <vListInsertEnd>
 800d9c2:	e005      	b.n	800d9d0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d9c4:	693b      	ldr	r3, [r7, #16]
 800d9c6:	3318      	adds	r3, #24
 800d9c8:	4619      	mov	r1, r3
 800d9ca:	480e      	ldr	r0, [pc, #56]	; (800da04 <xTaskRemoveFromEventList+0xb8>)
 800d9cc:	f7fd fd83 	bl	800b4d6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d9d0:	693b      	ldr	r3, [r7, #16]
 800d9d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9d4:	4b0c      	ldr	r3, [pc, #48]	; (800da08 <xTaskRemoveFromEventList+0xbc>)
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9da:	429a      	cmp	r2, r3
 800d9dc:	d905      	bls.n	800d9ea <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d9de:	2301      	movs	r3, #1
 800d9e0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d9e2:	4b0a      	ldr	r3, [pc, #40]	; (800da0c <xTaskRemoveFromEventList+0xc0>)
 800d9e4:	2201      	movs	r2, #1
 800d9e6:	601a      	str	r2, [r3, #0]
 800d9e8:	e001      	b.n	800d9ee <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800d9ea:	2300      	movs	r3, #0
 800d9ec:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800d9ee:	697b      	ldr	r3, [r7, #20]
}
 800d9f0:	4618      	mov	r0, r3
 800d9f2:	3718      	adds	r7, #24
 800d9f4:	46bd      	mov	sp, r7
 800d9f6:	bd80      	pop	{r7, pc}
 800d9f8:	200004d4 	.word	0x200004d4
 800d9fc:	200004b4 	.word	0x200004b4
 800da00:	200003b0 	.word	0x200003b0
 800da04:	2000046c 	.word	0x2000046c
 800da08:	200003ac 	.word	0x200003ac
 800da0c:	200004c0 	.word	0x200004c0

0800da10 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800da10:	b580      	push	{r7, lr}
 800da12:	b086      	sub	sp, #24
 800da14:	af00      	add	r7, sp, #0
 800da16:	6078      	str	r0, [r7, #4]
 800da18:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800da1a:	4b29      	ldr	r3, [pc, #164]	; (800dac0 <vTaskRemoveFromUnorderedEventList+0xb0>)
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d10a      	bne.n	800da38 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 800da22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da26:	f383 8811 	msr	BASEPRI, r3
 800da2a:	f3bf 8f6f 	isb	sy
 800da2e:	f3bf 8f4f 	dsb	sy
 800da32:	613b      	str	r3, [r7, #16]
}
 800da34:	bf00      	nop
 800da36:	e7fe      	b.n	800da36 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800da38:	683b      	ldr	r3, [r7, #0]
 800da3a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	68db      	ldr	r3, [r3, #12]
 800da46:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800da48:	697b      	ldr	r3, [r7, #20]
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d10a      	bne.n	800da64 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 800da4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da52:	f383 8811 	msr	BASEPRI, r3
 800da56:	f3bf 8f6f 	isb	sy
 800da5a:	f3bf 8f4f 	dsb	sy
 800da5e:	60fb      	str	r3, [r7, #12]
}
 800da60:	bf00      	nop
 800da62:	e7fe      	b.n	800da62 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 800da64:	6878      	ldr	r0, [r7, #4]
 800da66:	f7fd fd91 	bl	800b58c <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800da6a:	697b      	ldr	r3, [r7, #20]
 800da6c:	3304      	adds	r3, #4
 800da6e:	4618      	mov	r0, r3
 800da70:	f7fd fd8c 	bl	800b58c <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800da74:	697b      	ldr	r3, [r7, #20]
 800da76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da78:	2201      	movs	r2, #1
 800da7a:	409a      	lsls	r2, r3
 800da7c:	4b11      	ldr	r3, [pc, #68]	; (800dac4 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	4313      	orrs	r3, r2
 800da82:	4a10      	ldr	r2, [pc, #64]	; (800dac4 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800da84:	6013      	str	r3, [r2, #0]
 800da86:	697b      	ldr	r3, [r7, #20]
 800da88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da8a:	4613      	mov	r3, r2
 800da8c:	009b      	lsls	r3, r3, #2
 800da8e:	4413      	add	r3, r2
 800da90:	009b      	lsls	r3, r3, #2
 800da92:	4a0d      	ldr	r2, [pc, #52]	; (800dac8 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800da94:	441a      	add	r2, r3
 800da96:	697b      	ldr	r3, [r7, #20]
 800da98:	3304      	adds	r3, #4
 800da9a:	4619      	mov	r1, r3
 800da9c:	4610      	mov	r0, r2
 800da9e:	f7fd fd1a 	bl	800b4d6 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800daa2:	697b      	ldr	r3, [r7, #20]
 800daa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800daa6:	4b09      	ldr	r3, [pc, #36]	; (800dacc <vTaskRemoveFromUnorderedEventList+0xbc>)
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800daac:	429a      	cmp	r2, r3
 800daae:	d902      	bls.n	800dab6 <vTaskRemoveFromUnorderedEventList+0xa6>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800dab0:	4b07      	ldr	r3, [pc, #28]	; (800dad0 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800dab2:	2201      	movs	r2, #1
 800dab4:	601a      	str	r2, [r3, #0]
	}
}
 800dab6:	bf00      	nop
 800dab8:	3718      	adds	r7, #24
 800daba:	46bd      	mov	sp, r7
 800dabc:	bd80      	pop	{r7, pc}
 800dabe:	bf00      	nop
 800dac0:	200004d4 	.word	0x200004d4
 800dac4:	200004b4 	.word	0x200004b4
 800dac8:	200003b0 	.word	0x200003b0
 800dacc:	200003ac 	.word	0x200003ac
 800dad0:	200004c0 	.word	0x200004c0

0800dad4 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800dad4:	b580      	push	{r7, lr}
 800dad6:	b084      	sub	sp, #16
 800dad8:	af00      	add	r7, sp, #0
 800dada:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d10a      	bne.n	800daf8 <vTaskSetTimeOutState+0x24>
	__asm volatile
 800dae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dae6:	f383 8811 	msr	BASEPRI, r3
 800daea:	f3bf 8f6f 	isb	sy
 800daee:	f3bf 8f4f 	dsb	sy
 800daf2:	60fb      	str	r3, [r7, #12]
}
 800daf4:	bf00      	nop
 800daf6:	e7fe      	b.n	800daf6 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800daf8:	f000 ffc6 	bl	800ea88 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800dafc:	4b06      	ldr	r3, [pc, #24]	; (800db18 <vTaskSetTimeOutState+0x44>)
 800dafe:	681a      	ldr	r2, [r3, #0]
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800db04:	4b05      	ldr	r3, [pc, #20]	; (800db1c <vTaskSetTimeOutState+0x48>)
 800db06:	681a      	ldr	r2, [r3, #0]
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800db0c:	f000 ffec 	bl	800eae8 <vPortExitCritical>
}
 800db10:	bf00      	nop
 800db12:	3710      	adds	r7, #16
 800db14:	46bd      	mov	sp, r7
 800db16:	bd80      	pop	{r7, pc}
 800db18:	200004c4 	.word	0x200004c4
 800db1c:	200004b0 	.word	0x200004b0

0800db20 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800db20:	b480      	push	{r7}
 800db22:	b083      	sub	sp, #12
 800db24:	af00      	add	r7, sp, #0
 800db26:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800db28:	4b06      	ldr	r3, [pc, #24]	; (800db44 <vTaskInternalSetTimeOutState+0x24>)
 800db2a:	681a      	ldr	r2, [r3, #0]
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800db30:	4b05      	ldr	r3, [pc, #20]	; (800db48 <vTaskInternalSetTimeOutState+0x28>)
 800db32:	681a      	ldr	r2, [r3, #0]
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	605a      	str	r2, [r3, #4]
}
 800db38:	bf00      	nop
 800db3a:	370c      	adds	r7, #12
 800db3c:	46bd      	mov	sp, r7
 800db3e:	bc80      	pop	{r7}
 800db40:	4770      	bx	lr
 800db42:	bf00      	nop
 800db44:	200004c4 	.word	0x200004c4
 800db48:	200004b0 	.word	0x200004b0

0800db4c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800db4c:	b580      	push	{r7, lr}
 800db4e:	b088      	sub	sp, #32
 800db50:	af00      	add	r7, sp, #0
 800db52:	6078      	str	r0, [r7, #4]
 800db54:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d10a      	bne.n	800db72 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800db5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db60:	f383 8811 	msr	BASEPRI, r3
 800db64:	f3bf 8f6f 	isb	sy
 800db68:	f3bf 8f4f 	dsb	sy
 800db6c:	613b      	str	r3, [r7, #16]
}
 800db6e:	bf00      	nop
 800db70:	e7fe      	b.n	800db70 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800db72:	683b      	ldr	r3, [r7, #0]
 800db74:	2b00      	cmp	r3, #0
 800db76:	d10a      	bne.n	800db8e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800db78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db7c:	f383 8811 	msr	BASEPRI, r3
 800db80:	f3bf 8f6f 	isb	sy
 800db84:	f3bf 8f4f 	dsb	sy
 800db88:	60fb      	str	r3, [r7, #12]
}
 800db8a:	bf00      	nop
 800db8c:	e7fe      	b.n	800db8c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800db8e:	f000 ff7b 	bl	800ea88 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800db92:	4b1d      	ldr	r3, [pc, #116]	; (800dc08 <xTaskCheckForTimeOut+0xbc>)
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	685b      	ldr	r3, [r3, #4]
 800db9c:	69ba      	ldr	r2, [r7, #24]
 800db9e:	1ad3      	subs	r3, r2, r3
 800dba0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800dba2:	683b      	ldr	r3, [r7, #0]
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbaa:	d102      	bne.n	800dbb2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800dbac:	2300      	movs	r3, #0
 800dbae:	61fb      	str	r3, [r7, #28]
 800dbb0:	e023      	b.n	800dbfa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	681a      	ldr	r2, [r3, #0]
 800dbb6:	4b15      	ldr	r3, [pc, #84]	; (800dc0c <xTaskCheckForTimeOut+0xc0>)
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	429a      	cmp	r2, r3
 800dbbc:	d007      	beq.n	800dbce <xTaskCheckForTimeOut+0x82>
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	685b      	ldr	r3, [r3, #4]
 800dbc2:	69ba      	ldr	r2, [r7, #24]
 800dbc4:	429a      	cmp	r2, r3
 800dbc6:	d302      	bcc.n	800dbce <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800dbc8:	2301      	movs	r3, #1
 800dbca:	61fb      	str	r3, [r7, #28]
 800dbcc:	e015      	b.n	800dbfa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800dbce:	683b      	ldr	r3, [r7, #0]
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	697a      	ldr	r2, [r7, #20]
 800dbd4:	429a      	cmp	r2, r3
 800dbd6:	d20b      	bcs.n	800dbf0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800dbd8:	683b      	ldr	r3, [r7, #0]
 800dbda:	681a      	ldr	r2, [r3, #0]
 800dbdc:	697b      	ldr	r3, [r7, #20]
 800dbde:	1ad2      	subs	r2, r2, r3
 800dbe0:	683b      	ldr	r3, [r7, #0]
 800dbe2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800dbe4:	6878      	ldr	r0, [r7, #4]
 800dbe6:	f7ff ff9b 	bl	800db20 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800dbea:	2300      	movs	r3, #0
 800dbec:	61fb      	str	r3, [r7, #28]
 800dbee:	e004      	b.n	800dbfa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800dbf0:	683b      	ldr	r3, [r7, #0]
 800dbf2:	2200      	movs	r2, #0
 800dbf4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800dbf6:	2301      	movs	r3, #1
 800dbf8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800dbfa:	f000 ff75 	bl	800eae8 <vPortExitCritical>

	return xReturn;
 800dbfe:	69fb      	ldr	r3, [r7, #28]
}
 800dc00:	4618      	mov	r0, r3
 800dc02:	3720      	adds	r7, #32
 800dc04:	46bd      	mov	sp, r7
 800dc06:	bd80      	pop	{r7, pc}
 800dc08:	200004b0 	.word	0x200004b0
 800dc0c:	200004c4 	.word	0x200004c4

0800dc10 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800dc10:	b480      	push	{r7}
 800dc12:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800dc14:	4b03      	ldr	r3, [pc, #12]	; (800dc24 <vTaskMissedYield+0x14>)
 800dc16:	2201      	movs	r2, #1
 800dc18:	601a      	str	r2, [r3, #0]
}
 800dc1a:	bf00      	nop
 800dc1c:	46bd      	mov	sp, r7
 800dc1e:	bc80      	pop	{r7}
 800dc20:	4770      	bx	lr
 800dc22:	bf00      	nop
 800dc24:	200004c0 	.word	0x200004c0

0800dc28 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800dc28:	b580      	push	{r7, lr}
 800dc2a:	b082      	sub	sp, #8
 800dc2c:	af00      	add	r7, sp, #0
 800dc2e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800dc30:	f000 f852 	bl	800dcd8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800dc34:	4b06      	ldr	r3, [pc, #24]	; (800dc50 <prvIdleTask+0x28>)
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	2b01      	cmp	r3, #1
 800dc3a:	d9f9      	bls.n	800dc30 <prvIdleTask+0x8>
			{
				taskYIELD();
 800dc3c:	4b05      	ldr	r3, [pc, #20]	; (800dc54 <prvIdleTask+0x2c>)
 800dc3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc42:	601a      	str	r2, [r3, #0]
 800dc44:	f3bf 8f4f 	dsb	sy
 800dc48:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800dc4c:	e7f0      	b.n	800dc30 <prvIdleTask+0x8>
 800dc4e:	bf00      	nop
 800dc50:	200003b0 	.word	0x200003b0
 800dc54:	e000ed04 	.word	0xe000ed04

0800dc58 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800dc58:	b580      	push	{r7, lr}
 800dc5a:	b082      	sub	sp, #8
 800dc5c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dc5e:	2300      	movs	r3, #0
 800dc60:	607b      	str	r3, [r7, #4]
 800dc62:	e00c      	b.n	800dc7e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800dc64:	687a      	ldr	r2, [r7, #4]
 800dc66:	4613      	mov	r3, r2
 800dc68:	009b      	lsls	r3, r3, #2
 800dc6a:	4413      	add	r3, r2
 800dc6c:	009b      	lsls	r3, r3, #2
 800dc6e:	4a12      	ldr	r2, [pc, #72]	; (800dcb8 <prvInitialiseTaskLists+0x60>)
 800dc70:	4413      	add	r3, r2
 800dc72:	4618      	mov	r0, r3
 800dc74:	f7fd fc04 	bl	800b480 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	3301      	adds	r3, #1
 800dc7c:	607b      	str	r3, [r7, #4]
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	2b06      	cmp	r3, #6
 800dc82:	d9ef      	bls.n	800dc64 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800dc84:	480d      	ldr	r0, [pc, #52]	; (800dcbc <prvInitialiseTaskLists+0x64>)
 800dc86:	f7fd fbfb 	bl	800b480 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800dc8a:	480d      	ldr	r0, [pc, #52]	; (800dcc0 <prvInitialiseTaskLists+0x68>)
 800dc8c:	f7fd fbf8 	bl	800b480 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800dc90:	480c      	ldr	r0, [pc, #48]	; (800dcc4 <prvInitialiseTaskLists+0x6c>)
 800dc92:	f7fd fbf5 	bl	800b480 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800dc96:	480c      	ldr	r0, [pc, #48]	; (800dcc8 <prvInitialiseTaskLists+0x70>)
 800dc98:	f7fd fbf2 	bl	800b480 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800dc9c:	480b      	ldr	r0, [pc, #44]	; (800dccc <prvInitialiseTaskLists+0x74>)
 800dc9e:	f7fd fbef 	bl	800b480 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800dca2:	4b0b      	ldr	r3, [pc, #44]	; (800dcd0 <prvInitialiseTaskLists+0x78>)
 800dca4:	4a05      	ldr	r2, [pc, #20]	; (800dcbc <prvInitialiseTaskLists+0x64>)
 800dca6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800dca8:	4b0a      	ldr	r3, [pc, #40]	; (800dcd4 <prvInitialiseTaskLists+0x7c>)
 800dcaa:	4a05      	ldr	r2, [pc, #20]	; (800dcc0 <prvInitialiseTaskLists+0x68>)
 800dcac:	601a      	str	r2, [r3, #0]
}
 800dcae:	bf00      	nop
 800dcb0:	3708      	adds	r7, #8
 800dcb2:	46bd      	mov	sp, r7
 800dcb4:	bd80      	pop	{r7, pc}
 800dcb6:	bf00      	nop
 800dcb8:	200003b0 	.word	0x200003b0
 800dcbc:	2000043c 	.word	0x2000043c
 800dcc0:	20000450 	.word	0x20000450
 800dcc4:	2000046c 	.word	0x2000046c
 800dcc8:	20000480 	.word	0x20000480
 800dccc:	20000498 	.word	0x20000498
 800dcd0:	20000464 	.word	0x20000464
 800dcd4:	20000468 	.word	0x20000468

0800dcd8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800dcd8:	b580      	push	{r7, lr}
 800dcda:	b082      	sub	sp, #8
 800dcdc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dcde:	e019      	b.n	800dd14 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800dce0:	f000 fed2 	bl	800ea88 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800dce4:	4b10      	ldr	r3, [pc, #64]	; (800dd28 <prvCheckTasksWaitingTermination+0x50>)
 800dce6:	68db      	ldr	r3, [r3, #12]
 800dce8:	68db      	ldr	r3, [r3, #12]
 800dcea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	3304      	adds	r3, #4
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	f7fd fc4b 	bl	800b58c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800dcf6:	4b0d      	ldr	r3, [pc, #52]	; (800dd2c <prvCheckTasksWaitingTermination+0x54>)
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	3b01      	subs	r3, #1
 800dcfc:	4a0b      	ldr	r2, [pc, #44]	; (800dd2c <prvCheckTasksWaitingTermination+0x54>)
 800dcfe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800dd00:	4b0b      	ldr	r3, [pc, #44]	; (800dd30 <prvCheckTasksWaitingTermination+0x58>)
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	3b01      	subs	r3, #1
 800dd06:	4a0a      	ldr	r2, [pc, #40]	; (800dd30 <prvCheckTasksWaitingTermination+0x58>)
 800dd08:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800dd0a:	f000 feed 	bl	800eae8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800dd0e:	6878      	ldr	r0, [r7, #4]
 800dd10:	f000 f810 	bl	800dd34 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dd14:	4b06      	ldr	r3, [pc, #24]	; (800dd30 <prvCheckTasksWaitingTermination+0x58>)
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d1e1      	bne.n	800dce0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800dd1c:	bf00      	nop
 800dd1e:	bf00      	nop
 800dd20:	3708      	adds	r7, #8
 800dd22:	46bd      	mov	sp, r7
 800dd24:	bd80      	pop	{r7, pc}
 800dd26:	bf00      	nop
 800dd28:	20000480 	.word	0x20000480
 800dd2c:	200004ac 	.word	0x200004ac
 800dd30:	20000494 	.word	0x20000494

0800dd34 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800dd34:	b580      	push	{r7, lr}
 800dd36:	b084      	sub	sp, #16
 800dd38:	af00      	add	r7, sp, #0
 800dd3a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	334c      	adds	r3, #76	; 0x4c
 800dd40:	4618      	mov	r0, r3
 800dd42:	f001 f9c5 	bl	800f0d0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d108      	bne.n	800dd62 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd54:	4618      	mov	r0, r3
 800dd56:	f001 f85f 	bl	800ee18 <vPortFree>
				vPortFree( pxTCB );
 800dd5a:	6878      	ldr	r0, [r7, #4]
 800dd5c:	f001 f85c 	bl	800ee18 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800dd60:	e018      	b.n	800dd94 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800dd68:	2b01      	cmp	r3, #1
 800dd6a:	d103      	bne.n	800dd74 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800dd6c:	6878      	ldr	r0, [r7, #4]
 800dd6e:	f001 f853 	bl	800ee18 <vPortFree>
	}
 800dd72:	e00f      	b.n	800dd94 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800dd7a:	2b02      	cmp	r3, #2
 800dd7c:	d00a      	beq.n	800dd94 <prvDeleteTCB+0x60>
	__asm volatile
 800dd7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd82:	f383 8811 	msr	BASEPRI, r3
 800dd86:	f3bf 8f6f 	isb	sy
 800dd8a:	f3bf 8f4f 	dsb	sy
 800dd8e:	60fb      	str	r3, [r7, #12]
}
 800dd90:	bf00      	nop
 800dd92:	e7fe      	b.n	800dd92 <prvDeleteTCB+0x5e>
	}
 800dd94:	bf00      	nop
 800dd96:	3710      	adds	r7, #16
 800dd98:	46bd      	mov	sp, r7
 800dd9a:	bd80      	pop	{r7, pc}

0800dd9c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800dd9c:	b480      	push	{r7}
 800dd9e:	b083      	sub	sp, #12
 800dda0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dda2:	4b0e      	ldr	r3, [pc, #56]	; (800dddc <prvResetNextTaskUnblockTime+0x40>)
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d101      	bne.n	800ddb0 <prvResetNextTaskUnblockTime+0x14>
 800ddac:	2301      	movs	r3, #1
 800ddae:	e000      	b.n	800ddb2 <prvResetNextTaskUnblockTime+0x16>
 800ddb0:	2300      	movs	r3, #0
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d004      	beq.n	800ddc0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ddb6:	4b0a      	ldr	r3, [pc, #40]	; (800dde0 <prvResetNextTaskUnblockTime+0x44>)
 800ddb8:	f04f 32ff 	mov.w	r2, #4294967295
 800ddbc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ddbe:	e008      	b.n	800ddd2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800ddc0:	4b06      	ldr	r3, [pc, #24]	; (800dddc <prvResetNextTaskUnblockTime+0x40>)
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	68db      	ldr	r3, [r3, #12]
 800ddc6:	68db      	ldr	r3, [r3, #12]
 800ddc8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	685b      	ldr	r3, [r3, #4]
 800ddce:	4a04      	ldr	r2, [pc, #16]	; (800dde0 <prvResetNextTaskUnblockTime+0x44>)
 800ddd0:	6013      	str	r3, [r2, #0]
}
 800ddd2:	bf00      	nop
 800ddd4:	370c      	adds	r7, #12
 800ddd6:	46bd      	mov	sp, r7
 800ddd8:	bc80      	pop	{r7}
 800ddda:	4770      	bx	lr
 800dddc:	20000464 	.word	0x20000464
 800dde0:	200004cc 	.word	0x200004cc

0800dde4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800dde4:	b480      	push	{r7}
 800dde6:	b083      	sub	sp, #12
 800dde8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800ddea:	4b04      	ldr	r3, [pc, #16]	; (800ddfc <xTaskGetCurrentTaskHandle+0x18>)
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	607b      	str	r3, [r7, #4]

		return xReturn;
 800ddf0:	687b      	ldr	r3, [r7, #4]
	}
 800ddf2:	4618      	mov	r0, r3
 800ddf4:	370c      	adds	r7, #12
 800ddf6:	46bd      	mov	sp, r7
 800ddf8:	bc80      	pop	{r7}
 800ddfa:	4770      	bx	lr
 800ddfc:	200003ac 	.word	0x200003ac

0800de00 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800de00:	b480      	push	{r7}
 800de02:	b083      	sub	sp, #12
 800de04:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800de06:	4b0b      	ldr	r3, [pc, #44]	; (800de34 <xTaskGetSchedulerState+0x34>)
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d102      	bne.n	800de14 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800de0e:	2301      	movs	r3, #1
 800de10:	607b      	str	r3, [r7, #4]
 800de12:	e008      	b.n	800de26 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800de14:	4b08      	ldr	r3, [pc, #32]	; (800de38 <xTaskGetSchedulerState+0x38>)
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d102      	bne.n	800de22 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800de1c:	2302      	movs	r3, #2
 800de1e:	607b      	str	r3, [r7, #4]
 800de20:	e001      	b.n	800de26 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800de22:	2300      	movs	r3, #0
 800de24:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800de26:	687b      	ldr	r3, [r7, #4]
	}
 800de28:	4618      	mov	r0, r3
 800de2a:	370c      	adds	r7, #12
 800de2c:	46bd      	mov	sp, r7
 800de2e:	bc80      	pop	{r7}
 800de30:	4770      	bx	lr
 800de32:	bf00      	nop
 800de34:	200004b8 	.word	0x200004b8
 800de38:	200004d4 	.word	0x200004d4

0800de3c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800de3c:	b580      	push	{r7, lr}
 800de3e:	b084      	sub	sp, #16
 800de40:	af00      	add	r7, sp, #0
 800de42:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800de48:	2300      	movs	r3, #0
 800de4a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d06e      	beq.n	800df30 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800de52:	68bb      	ldr	r3, [r7, #8]
 800de54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de56:	4b39      	ldr	r3, [pc, #228]	; (800df3c <xTaskPriorityInherit+0x100>)
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de5c:	429a      	cmp	r2, r3
 800de5e:	d25e      	bcs.n	800df1e <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800de60:	68bb      	ldr	r3, [r7, #8]
 800de62:	699b      	ldr	r3, [r3, #24]
 800de64:	2b00      	cmp	r3, #0
 800de66:	db06      	blt.n	800de76 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800de68:	4b34      	ldr	r3, [pc, #208]	; (800df3c <xTaskPriorityInherit+0x100>)
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de6e:	f1c3 0207 	rsb	r2, r3, #7
 800de72:	68bb      	ldr	r3, [r7, #8]
 800de74:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800de76:	68bb      	ldr	r3, [r7, #8]
 800de78:	6959      	ldr	r1, [r3, #20]
 800de7a:	68bb      	ldr	r3, [r7, #8]
 800de7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de7e:	4613      	mov	r3, r2
 800de80:	009b      	lsls	r3, r3, #2
 800de82:	4413      	add	r3, r2
 800de84:	009b      	lsls	r3, r3, #2
 800de86:	4a2e      	ldr	r2, [pc, #184]	; (800df40 <xTaskPriorityInherit+0x104>)
 800de88:	4413      	add	r3, r2
 800de8a:	4299      	cmp	r1, r3
 800de8c:	d101      	bne.n	800de92 <xTaskPriorityInherit+0x56>
 800de8e:	2301      	movs	r3, #1
 800de90:	e000      	b.n	800de94 <xTaskPriorityInherit+0x58>
 800de92:	2300      	movs	r3, #0
 800de94:	2b00      	cmp	r3, #0
 800de96:	d03a      	beq.n	800df0e <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800de98:	68bb      	ldr	r3, [r7, #8]
 800de9a:	3304      	adds	r3, #4
 800de9c:	4618      	mov	r0, r3
 800de9e:	f7fd fb75 	bl	800b58c <uxListRemove>
 800dea2:	4603      	mov	r3, r0
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d115      	bne.n	800ded4 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800dea8:	68bb      	ldr	r3, [r7, #8]
 800deaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800deac:	4924      	ldr	r1, [pc, #144]	; (800df40 <xTaskPriorityInherit+0x104>)
 800deae:	4613      	mov	r3, r2
 800deb0:	009b      	lsls	r3, r3, #2
 800deb2:	4413      	add	r3, r2
 800deb4:	009b      	lsls	r3, r3, #2
 800deb6:	440b      	add	r3, r1
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	2b00      	cmp	r3, #0
 800debc:	d10a      	bne.n	800ded4 <xTaskPriorityInherit+0x98>
 800debe:	68bb      	ldr	r3, [r7, #8]
 800dec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dec2:	2201      	movs	r2, #1
 800dec4:	fa02 f303 	lsl.w	r3, r2, r3
 800dec8:	43da      	mvns	r2, r3
 800deca:	4b1e      	ldr	r3, [pc, #120]	; (800df44 <xTaskPriorityInherit+0x108>)
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	4013      	ands	r3, r2
 800ded0:	4a1c      	ldr	r2, [pc, #112]	; (800df44 <xTaskPriorityInherit+0x108>)
 800ded2:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ded4:	4b19      	ldr	r3, [pc, #100]	; (800df3c <xTaskPriorityInherit+0x100>)
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800deda:	68bb      	ldr	r3, [r7, #8]
 800dedc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800dede:	68bb      	ldr	r3, [r7, #8]
 800dee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dee2:	2201      	movs	r2, #1
 800dee4:	409a      	lsls	r2, r3
 800dee6:	4b17      	ldr	r3, [pc, #92]	; (800df44 <xTaskPriorityInherit+0x108>)
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	4313      	orrs	r3, r2
 800deec:	4a15      	ldr	r2, [pc, #84]	; (800df44 <xTaskPriorityInherit+0x108>)
 800deee:	6013      	str	r3, [r2, #0]
 800def0:	68bb      	ldr	r3, [r7, #8]
 800def2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800def4:	4613      	mov	r3, r2
 800def6:	009b      	lsls	r3, r3, #2
 800def8:	4413      	add	r3, r2
 800defa:	009b      	lsls	r3, r3, #2
 800defc:	4a10      	ldr	r2, [pc, #64]	; (800df40 <xTaskPriorityInherit+0x104>)
 800defe:	441a      	add	r2, r3
 800df00:	68bb      	ldr	r3, [r7, #8]
 800df02:	3304      	adds	r3, #4
 800df04:	4619      	mov	r1, r3
 800df06:	4610      	mov	r0, r2
 800df08:	f7fd fae5 	bl	800b4d6 <vListInsertEnd>
 800df0c:	e004      	b.n	800df18 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800df0e:	4b0b      	ldr	r3, [pc, #44]	; (800df3c <xTaskPriorityInherit+0x100>)
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df14:	68bb      	ldr	r3, [r7, #8]
 800df16:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800df18:	2301      	movs	r3, #1
 800df1a:	60fb      	str	r3, [r7, #12]
 800df1c:	e008      	b.n	800df30 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800df1e:	68bb      	ldr	r3, [r7, #8]
 800df20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800df22:	4b06      	ldr	r3, [pc, #24]	; (800df3c <xTaskPriorityInherit+0x100>)
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df28:	429a      	cmp	r2, r3
 800df2a:	d201      	bcs.n	800df30 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800df2c:	2301      	movs	r3, #1
 800df2e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800df30:	68fb      	ldr	r3, [r7, #12]
	}
 800df32:	4618      	mov	r0, r3
 800df34:	3710      	adds	r7, #16
 800df36:	46bd      	mov	sp, r7
 800df38:	bd80      	pop	{r7, pc}
 800df3a:	bf00      	nop
 800df3c:	200003ac 	.word	0x200003ac
 800df40:	200003b0 	.word	0x200003b0
 800df44:	200004b4 	.word	0x200004b4

0800df48 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800df48:	b580      	push	{r7, lr}
 800df4a:	b086      	sub	sp, #24
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800df54:	2300      	movs	r3, #0
 800df56:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d06e      	beq.n	800e03c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800df5e:	4b3a      	ldr	r3, [pc, #232]	; (800e048 <xTaskPriorityDisinherit+0x100>)
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	693a      	ldr	r2, [r7, #16]
 800df64:	429a      	cmp	r2, r3
 800df66:	d00a      	beq.n	800df7e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800df68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df6c:	f383 8811 	msr	BASEPRI, r3
 800df70:	f3bf 8f6f 	isb	sy
 800df74:	f3bf 8f4f 	dsb	sy
 800df78:	60fb      	str	r3, [r7, #12]
}
 800df7a:	bf00      	nop
 800df7c:	e7fe      	b.n	800df7c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800df7e:	693b      	ldr	r3, [r7, #16]
 800df80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800df82:	2b00      	cmp	r3, #0
 800df84:	d10a      	bne.n	800df9c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800df86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df8a:	f383 8811 	msr	BASEPRI, r3
 800df8e:	f3bf 8f6f 	isb	sy
 800df92:	f3bf 8f4f 	dsb	sy
 800df96:	60bb      	str	r3, [r7, #8]
}
 800df98:	bf00      	nop
 800df9a:	e7fe      	b.n	800df9a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800df9c:	693b      	ldr	r3, [r7, #16]
 800df9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dfa0:	1e5a      	subs	r2, r3, #1
 800dfa2:	693b      	ldr	r3, [r7, #16]
 800dfa4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800dfa6:	693b      	ldr	r3, [r7, #16]
 800dfa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfaa:	693b      	ldr	r3, [r7, #16]
 800dfac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dfae:	429a      	cmp	r2, r3
 800dfb0:	d044      	beq.n	800e03c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800dfb2:	693b      	ldr	r3, [r7, #16]
 800dfb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d140      	bne.n	800e03c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dfba:	693b      	ldr	r3, [r7, #16]
 800dfbc:	3304      	adds	r3, #4
 800dfbe:	4618      	mov	r0, r3
 800dfc0:	f7fd fae4 	bl	800b58c <uxListRemove>
 800dfc4:	4603      	mov	r3, r0
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d115      	bne.n	800dff6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800dfca:	693b      	ldr	r3, [r7, #16]
 800dfcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfce:	491f      	ldr	r1, [pc, #124]	; (800e04c <xTaskPriorityDisinherit+0x104>)
 800dfd0:	4613      	mov	r3, r2
 800dfd2:	009b      	lsls	r3, r3, #2
 800dfd4:	4413      	add	r3, r2
 800dfd6:	009b      	lsls	r3, r3, #2
 800dfd8:	440b      	add	r3, r1
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d10a      	bne.n	800dff6 <xTaskPriorityDisinherit+0xae>
 800dfe0:	693b      	ldr	r3, [r7, #16]
 800dfe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfe4:	2201      	movs	r2, #1
 800dfe6:	fa02 f303 	lsl.w	r3, r2, r3
 800dfea:	43da      	mvns	r2, r3
 800dfec:	4b18      	ldr	r3, [pc, #96]	; (800e050 <xTaskPriorityDisinherit+0x108>)
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	4013      	ands	r3, r2
 800dff2:	4a17      	ldr	r2, [pc, #92]	; (800e050 <xTaskPriorityDisinherit+0x108>)
 800dff4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800dff6:	693b      	ldr	r3, [r7, #16]
 800dff8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dffa:	693b      	ldr	r3, [r7, #16]
 800dffc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dffe:	693b      	ldr	r3, [r7, #16]
 800e000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e002:	f1c3 0207 	rsb	r2, r3, #7
 800e006:	693b      	ldr	r3, [r7, #16]
 800e008:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e00a:	693b      	ldr	r3, [r7, #16]
 800e00c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e00e:	2201      	movs	r2, #1
 800e010:	409a      	lsls	r2, r3
 800e012:	4b0f      	ldr	r3, [pc, #60]	; (800e050 <xTaskPriorityDisinherit+0x108>)
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	4313      	orrs	r3, r2
 800e018:	4a0d      	ldr	r2, [pc, #52]	; (800e050 <xTaskPriorityDisinherit+0x108>)
 800e01a:	6013      	str	r3, [r2, #0]
 800e01c:	693b      	ldr	r3, [r7, #16]
 800e01e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e020:	4613      	mov	r3, r2
 800e022:	009b      	lsls	r3, r3, #2
 800e024:	4413      	add	r3, r2
 800e026:	009b      	lsls	r3, r3, #2
 800e028:	4a08      	ldr	r2, [pc, #32]	; (800e04c <xTaskPriorityDisinherit+0x104>)
 800e02a:	441a      	add	r2, r3
 800e02c:	693b      	ldr	r3, [r7, #16]
 800e02e:	3304      	adds	r3, #4
 800e030:	4619      	mov	r1, r3
 800e032:	4610      	mov	r0, r2
 800e034:	f7fd fa4f 	bl	800b4d6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e038:	2301      	movs	r3, #1
 800e03a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e03c:	697b      	ldr	r3, [r7, #20]
	}
 800e03e:	4618      	mov	r0, r3
 800e040:	3718      	adds	r7, #24
 800e042:	46bd      	mov	sp, r7
 800e044:	bd80      	pop	{r7, pc}
 800e046:	bf00      	nop
 800e048:	200003ac 	.word	0x200003ac
 800e04c:	200003b0 	.word	0x200003b0
 800e050:	200004b4 	.word	0x200004b4

0800e054 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e054:	b580      	push	{r7, lr}
 800e056:	b088      	sub	sp, #32
 800e058:	af00      	add	r7, sp, #0
 800e05a:	6078      	str	r0, [r7, #4]
 800e05c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e062:	2301      	movs	r3, #1
 800e064:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	2b00      	cmp	r3, #0
 800e06a:	f000 8088 	beq.w	800e17e <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e06e:	69bb      	ldr	r3, [r7, #24]
 800e070:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e072:	2b00      	cmp	r3, #0
 800e074:	d10a      	bne.n	800e08c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800e076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e07a:	f383 8811 	msr	BASEPRI, r3
 800e07e:	f3bf 8f6f 	isb	sy
 800e082:	f3bf 8f4f 	dsb	sy
 800e086:	60fb      	str	r3, [r7, #12]
}
 800e088:	bf00      	nop
 800e08a:	e7fe      	b.n	800e08a <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e08c:	69bb      	ldr	r3, [r7, #24]
 800e08e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e090:	683a      	ldr	r2, [r7, #0]
 800e092:	429a      	cmp	r2, r3
 800e094:	d902      	bls.n	800e09c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e096:	683b      	ldr	r3, [r7, #0]
 800e098:	61fb      	str	r3, [r7, #28]
 800e09a:	e002      	b.n	800e0a2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e09c:	69bb      	ldr	r3, [r7, #24]
 800e09e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e0a0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e0a2:	69bb      	ldr	r3, [r7, #24]
 800e0a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0a6:	69fa      	ldr	r2, [r7, #28]
 800e0a8:	429a      	cmp	r2, r3
 800e0aa:	d068      	beq.n	800e17e <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e0ac:	69bb      	ldr	r3, [r7, #24]
 800e0ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e0b0:	697a      	ldr	r2, [r7, #20]
 800e0b2:	429a      	cmp	r2, r3
 800e0b4:	d163      	bne.n	800e17e <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e0b6:	4b34      	ldr	r3, [pc, #208]	; (800e188 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	69ba      	ldr	r2, [r7, #24]
 800e0bc:	429a      	cmp	r2, r3
 800e0be:	d10a      	bne.n	800e0d6 <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 800e0c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0c4:	f383 8811 	msr	BASEPRI, r3
 800e0c8:	f3bf 8f6f 	isb	sy
 800e0cc:	f3bf 8f4f 	dsb	sy
 800e0d0:	60bb      	str	r3, [r7, #8]
}
 800e0d2:	bf00      	nop
 800e0d4:	e7fe      	b.n	800e0d4 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e0d6:	69bb      	ldr	r3, [r7, #24]
 800e0d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0da:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e0dc:	69bb      	ldr	r3, [r7, #24]
 800e0de:	69fa      	ldr	r2, [r7, #28]
 800e0e0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e0e2:	69bb      	ldr	r3, [r7, #24]
 800e0e4:	699b      	ldr	r3, [r3, #24]
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	db04      	blt.n	800e0f4 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e0ea:	69fb      	ldr	r3, [r7, #28]
 800e0ec:	f1c3 0207 	rsb	r2, r3, #7
 800e0f0:	69bb      	ldr	r3, [r7, #24]
 800e0f2:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e0f4:	69bb      	ldr	r3, [r7, #24]
 800e0f6:	6959      	ldr	r1, [r3, #20]
 800e0f8:	693a      	ldr	r2, [r7, #16]
 800e0fa:	4613      	mov	r3, r2
 800e0fc:	009b      	lsls	r3, r3, #2
 800e0fe:	4413      	add	r3, r2
 800e100:	009b      	lsls	r3, r3, #2
 800e102:	4a22      	ldr	r2, [pc, #136]	; (800e18c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800e104:	4413      	add	r3, r2
 800e106:	4299      	cmp	r1, r3
 800e108:	d101      	bne.n	800e10e <vTaskPriorityDisinheritAfterTimeout+0xba>
 800e10a:	2301      	movs	r3, #1
 800e10c:	e000      	b.n	800e110 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 800e10e:	2300      	movs	r3, #0
 800e110:	2b00      	cmp	r3, #0
 800e112:	d034      	beq.n	800e17e <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e114:	69bb      	ldr	r3, [r7, #24]
 800e116:	3304      	adds	r3, #4
 800e118:	4618      	mov	r0, r3
 800e11a:	f7fd fa37 	bl	800b58c <uxListRemove>
 800e11e:	4603      	mov	r3, r0
 800e120:	2b00      	cmp	r3, #0
 800e122:	d115      	bne.n	800e150 <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e124:	69bb      	ldr	r3, [r7, #24]
 800e126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e128:	4918      	ldr	r1, [pc, #96]	; (800e18c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800e12a:	4613      	mov	r3, r2
 800e12c:	009b      	lsls	r3, r3, #2
 800e12e:	4413      	add	r3, r2
 800e130:	009b      	lsls	r3, r3, #2
 800e132:	440b      	add	r3, r1
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	2b00      	cmp	r3, #0
 800e138:	d10a      	bne.n	800e150 <vTaskPriorityDisinheritAfterTimeout+0xfc>
 800e13a:	69bb      	ldr	r3, [r7, #24]
 800e13c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e13e:	2201      	movs	r2, #1
 800e140:	fa02 f303 	lsl.w	r3, r2, r3
 800e144:	43da      	mvns	r2, r3
 800e146:	4b12      	ldr	r3, [pc, #72]	; (800e190 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	4013      	ands	r3, r2
 800e14c:	4a10      	ldr	r2, [pc, #64]	; (800e190 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800e14e:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e150:	69bb      	ldr	r3, [r7, #24]
 800e152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e154:	2201      	movs	r2, #1
 800e156:	409a      	lsls	r2, r3
 800e158:	4b0d      	ldr	r3, [pc, #52]	; (800e190 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	4313      	orrs	r3, r2
 800e15e:	4a0c      	ldr	r2, [pc, #48]	; (800e190 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800e160:	6013      	str	r3, [r2, #0]
 800e162:	69bb      	ldr	r3, [r7, #24]
 800e164:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e166:	4613      	mov	r3, r2
 800e168:	009b      	lsls	r3, r3, #2
 800e16a:	4413      	add	r3, r2
 800e16c:	009b      	lsls	r3, r3, #2
 800e16e:	4a07      	ldr	r2, [pc, #28]	; (800e18c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800e170:	441a      	add	r2, r3
 800e172:	69bb      	ldr	r3, [r7, #24]
 800e174:	3304      	adds	r3, #4
 800e176:	4619      	mov	r1, r3
 800e178:	4610      	mov	r0, r2
 800e17a:	f7fd f9ac 	bl	800b4d6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e17e:	bf00      	nop
 800e180:	3720      	adds	r7, #32
 800e182:	46bd      	mov	sp, r7
 800e184:	bd80      	pop	{r7, pc}
 800e186:	bf00      	nop
 800e188:	200003ac 	.word	0x200003ac
 800e18c:	200003b0 	.word	0x200003b0
 800e190:	200004b4 	.word	0x200004b4

0800e194 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800e194:	b480      	push	{r7}
 800e196:	b083      	sub	sp, #12
 800e198:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800e19a:	4b09      	ldr	r3, [pc, #36]	; (800e1c0 <uxTaskResetEventItemValue+0x2c>)
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	699b      	ldr	r3, [r3, #24]
 800e1a0:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e1a2:	4b07      	ldr	r3, [pc, #28]	; (800e1c0 <uxTaskResetEventItemValue+0x2c>)
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1a8:	4b05      	ldr	r3, [pc, #20]	; (800e1c0 <uxTaskResetEventItemValue+0x2c>)
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	f1c2 0207 	rsb	r2, r2, #7
 800e1b0:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800e1b2:	687b      	ldr	r3, [r7, #4]
}
 800e1b4:	4618      	mov	r0, r3
 800e1b6:	370c      	adds	r7, #12
 800e1b8:	46bd      	mov	sp, r7
 800e1ba:	bc80      	pop	{r7}
 800e1bc:	4770      	bx	lr
 800e1be:	bf00      	nop
 800e1c0:	200003ac 	.word	0x200003ac

0800e1c4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800e1c4:	b480      	push	{r7}
 800e1c6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e1c8:	4b07      	ldr	r3, [pc, #28]	; (800e1e8 <pvTaskIncrementMutexHeldCount+0x24>)
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d004      	beq.n	800e1da <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e1d0:	4b05      	ldr	r3, [pc, #20]	; (800e1e8 <pvTaskIncrementMutexHeldCount+0x24>)
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e1d6:	3201      	adds	r2, #1
 800e1d8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800e1da:	4b03      	ldr	r3, [pc, #12]	; (800e1e8 <pvTaskIncrementMutexHeldCount+0x24>)
 800e1dc:	681b      	ldr	r3, [r3, #0]
	}
 800e1de:	4618      	mov	r0, r3
 800e1e0:	46bd      	mov	sp, r7
 800e1e2:	bc80      	pop	{r7}
 800e1e4:	4770      	bx	lr
 800e1e6:	bf00      	nop
 800e1e8:	200003ac 	.word	0x200003ac

0800e1ec <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800e1ec:	b580      	push	{r7, lr}
 800e1ee:	b084      	sub	sp, #16
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	6078      	str	r0, [r7, #4]
 800e1f4:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800e1f6:	f000 fc47 	bl	800ea88 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800e1fa:	4b20      	ldr	r3, [pc, #128]	; (800e27c <ulTaskNotifyTake+0x90>)
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800e202:	2b00      	cmp	r3, #0
 800e204:	d113      	bne.n	800e22e <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800e206:	4b1d      	ldr	r3, [pc, #116]	; (800e27c <ulTaskNotifyTake+0x90>)
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	2201      	movs	r2, #1
 800e20c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

				if( xTicksToWait > ( TickType_t ) 0 )
 800e210:	683b      	ldr	r3, [r7, #0]
 800e212:	2b00      	cmp	r3, #0
 800e214:	d00b      	beq.n	800e22e <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e216:	2101      	movs	r1, #1
 800e218:	6838      	ldr	r0, [r7, #0]
 800e21a:	f000 fac7 	bl	800e7ac <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800e21e:	4b18      	ldr	r3, [pc, #96]	; (800e280 <ulTaskNotifyTake+0x94>)
 800e220:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e224:	601a      	str	r2, [r3, #0]
 800e226:	f3bf 8f4f 	dsb	sy
 800e22a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800e22e:	f000 fc5b 	bl	800eae8 <vPortExitCritical>

		taskENTER_CRITICAL();
 800e232:	f000 fc29 	bl	800ea88 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800e236:	4b11      	ldr	r3, [pc, #68]	; (800e27c <ulTaskNotifyTake+0x90>)
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800e23e:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	2b00      	cmp	r3, #0
 800e244:	d00e      	beq.n	800e264 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d005      	beq.n	800e258 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800e24c:	4b0b      	ldr	r3, [pc, #44]	; (800e27c <ulTaskNotifyTake+0x90>)
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	2200      	movs	r2, #0
 800e252:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800e256:	e005      	b.n	800e264 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800e258:	4b08      	ldr	r3, [pc, #32]	; (800e27c <ulTaskNotifyTake+0x90>)
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	68fa      	ldr	r2, [r7, #12]
 800e25e:	3a01      	subs	r2, #1
 800e260:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e264:	4b05      	ldr	r3, [pc, #20]	; (800e27c <ulTaskNotifyTake+0x90>)
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	2200      	movs	r2, #0
 800e26a:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
		}
		taskEXIT_CRITICAL();
 800e26e:	f000 fc3b 	bl	800eae8 <vPortExitCritical>

		return ulReturn;
 800e272:	68fb      	ldr	r3, [r7, #12]
	}
 800e274:	4618      	mov	r0, r3
 800e276:	3710      	adds	r7, #16
 800e278:	46bd      	mov	sp, r7
 800e27a:	bd80      	pop	{r7, pc}
 800e27c:	200003ac 	.word	0x200003ac
 800e280:	e000ed04 	.word	0xe000ed04

0800e284 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800e284:	b580      	push	{r7, lr}
 800e286:	b086      	sub	sp, #24
 800e288:	af00      	add	r7, sp, #0
 800e28a:	60f8      	str	r0, [r7, #12]
 800e28c:	60b9      	str	r1, [r7, #8]
 800e28e:	607a      	str	r2, [r7, #4]
 800e290:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800e292:	f000 fbf9 	bl	800ea88 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800e296:	4b29      	ldr	r3, [pc, #164]	; (800e33c <xTaskNotifyWait+0xb8>)
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800e29e:	b2db      	uxtb	r3, r3
 800e2a0:	2b02      	cmp	r3, #2
 800e2a2:	d01c      	beq.n	800e2de <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800e2a4:	4b25      	ldr	r3, [pc, #148]	; (800e33c <xTaskNotifyWait+0xb8>)
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 800e2ac:	68fa      	ldr	r2, [r7, #12]
 800e2ae:	43d2      	mvns	r2, r2
 800e2b0:	400a      	ands	r2, r1
 800e2b2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800e2b6:	4b21      	ldr	r3, [pc, #132]	; (800e33c <xTaskNotifyWait+0xb8>)
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	2201      	movs	r2, #1
 800e2bc:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

				if( xTicksToWait > ( TickType_t ) 0 )
 800e2c0:	683b      	ldr	r3, [r7, #0]
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d00b      	beq.n	800e2de <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e2c6:	2101      	movs	r1, #1
 800e2c8:	6838      	ldr	r0, [r7, #0]
 800e2ca:	f000 fa6f 	bl	800e7ac <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800e2ce:	4b1c      	ldr	r3, [pc, #112]	; (800e340 <xTaskNotifyWait+0xbc>)
 800e2d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e2d4:	601a      	str	r2, [r3, #0]
 800e2d6:	f3bf 8f4f 	dsb	sy
 800e2da:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800e2de:	f000 fc03 	bl	800eae8 <vPortExitCritical>

		taskENTER_CRITICAL();
 800e2e2:	f000 fbd1 	bl	800ea88 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d005      	beq.n	800e2f8 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800e2ec:	4b13      	ldr	r3, [pc, #76]	; (800e33c <xTaskNotifyWait+0xb8>)
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800e2f8:	4b10      	ldr	r3, [pc, #64]	; (800e33c <xTaskNotifyWait+0xb8>)
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800e300:	b2db      	uxtb	r3, r3
 800e302:	2b02      	cmp	r3, #2
 800e304:	d002      	beq.n	800e30c <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800e306:	2300      	movs	r3, #0
 800e308:	617b      	str	r3, [r7, #20]
 800e30a:	e00a      	b.n	800e322 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800e30c:	4b0b      	ldr	r3, [pc, #44]	; (800e33c <xTaskNotifyWait+0xb8>)
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 800e314:	68ba      	ldr	r2, [r7, #8]
 800e316:	43d2      	mvns	r2, r2
 800e318:	400a      	ands	r2, r1
 800e31a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
				xReturn = pdTRUE;
 800e31e:	2301      	movs	r3, #1
 800e320:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e322:	4b06      	ldr	r3, [pc, #24]	; (800e33c <xTaskNotifyWait+0xb8>)
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	2200      	movs	r2, #0
 800e328:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
		}
		taskEXIT_CRITICAL();
 800e32c:	f000 fbdc 	bl	800eae8 <vPortExitCritical>

		return xReturn;
 800e330:	697b      	ldr	r3, [r7, #20]
	}
 800e332:	4618      	mov	r0, r3
 800e334:	3718      	adds	r7, #24
 800e336:	46bd      	mov	sp, r7
 800e338:	bd80      	pop	{r7, pc}
 800e33a:	bf00      	nop
 800e33c:	200003ac 	.word	0x200003ac
 800e340:	e000ed04 	.word	0xe000ed04

0800e344 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800e344:	b580      	push	{r7, lr}
 800e346:	b08a      	sub	sp, #40	; 0x28
 800e348:	af00      	add	r7, sp, #0
 800e34a:	60f8      	str	r0, [r7, #12]
 800e34c:	60b9      	str	r1, [r7, #8]
 800e34e:	603b      	str	r3, [r7, #0]
 800e350:	4613      	mov	r3, r2
 800e352:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800e354:	2301      	movs	r3, #1
 800e356:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d10a      	bne.n	800e374 <xTaskGenericNotify+0x30>
	__asm volatile
 800e35e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e362:	f383 8811 	msr	BASEPRI, r3
 800e366:	f3bf 8f6f 	isb	sy
 800e36a:	f3bf 8f4f 	dsb	sy
 800e36e:	61bb      	str	r3, [r7, #24]
}
 800e370:	bf00      	nop
 800e372:	e7fe      	b.n	800e372 <xTaskGenericNotify+0x2e>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800e378:	f000 fb86 	bl	800ea88 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800e37c:	683b      	ldr	r3, [r7, #0]
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d004      	beq.n	800e38c <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800e382:	6a3b      	ldr	r3, [r7, #32]
 800e384:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800e388:	683b      	ldr	r3, [r7, #0]
 800e38a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800e38c:	6a3b      	ldr	r3, [r7, #32]
 800e38e:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800e392:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800e394:	6a3b      	ldr	r3, [r7, #32]
 800e396:	2202      	movs	r2, #2
 800e398:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

			switch( eAction )
 800e39c:	79fb      	ldrb	r3, [r7, #7]
 800e39e:	2b04      	cmp	r3, #4
 800e3a0:	d82d      	bhi.n	800e3fe <xTaskGenericNotify+0xba>
 800e3a2:	a201      	add	r2, pc, #4	; (adr r2, 800e3a8 <xTaskGenericNotify+0x64>)
 800e3a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3a8:	0800e3ff 	.word	0x0800e3ff
 800e3ac:	0800e3bd 	.word	0x0800e3bd
 800e3b0:	0800e3cf 	.word	0x0800e3cf
 800e3b4:	0800e3df 	.word	0x0800e3df
 800e3b8:	0800e3e9 	.word	0x0800e3e9
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800e3bc:	6a3b      	ldr	r3, [r7, #32]
 800e3be:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800e3c2:	68bb      	ldr	r3, [r7, #8]
 800e3c4:	431a      	orrs	r2, r3
 800e3c6:	6a3b      	ldr	r3, [r7, #32]
 800e3c8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800e3cc:	e017      	b.n	800e3fe <xTaskGenericNotify+0xba>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800e3ce:	6a3b      	ldr	r3, [r7, #32]
 800e3d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800e3d4:	1c5a      	adds	r2, r3, #1
 800e3d6:	6a3b      	ldr	r3, [r7, #32]
 800e3d8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800e3dc:	e00f      	b.n	800e3fe <xTaskGenericNotify+0xba>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800e3de:	6a3b      	ldr	r3, [r7, #32]
 800e3e0:	68ba      	ldr	r2, [r7, #8]
 800e3e2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800e3e6:	e00a      	b.n	800e3fe <xTaskGenericNotify+0xba>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800e3e8:	7ffb      	ldrb	r3, [r7, #31]
 800e3ea:	2b02      	cmp	r3, #2
 800e3ec:	d004      	beq.n	800e3f8 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800e3ee:	6a3b      	ldr	r3, [r7, #32]
 800e3f0:	68ba      	ldr	r2, [r7, #8]
 800e3f2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800e3f6:	e001      	b.n	800e3fc <xTaskGenericNotify+0xb8>
						xReturn = pdFAIL;
 800e3f8:	2300      	movs	r3, #0
 800e3fa:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800e3fc:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800e3fe:	7ffb      	ldrb	r3, [r7, #31]
 800e400:	2b01      	cmp	r3, #1
 800e402:	d139      	bne.n	800e478 <xTaskGenericNotify+0x134>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e404:	6a3b      	ldr	r3, [r7, #32]
 800e406:	3304      	adds	r3, #4
 800e408:	4618      	mov	r0, r3
 800e40a:	f7fd f8bf 	bl	800b58c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800e40e:	6a3b      	ldr	r3, [r7, #32]
 800e410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e412:	2201      	movs	r2, #1
 800e414:	409a      	lsls	r2, r3
 800e416:	4b1c      	ldr	r3, [pc, #112]	; (800e488 <xTaskGenericNotify+0x144>)
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	4313      	orrs	r3, r2
 800e41c:	4a1a      	ldr	r2, [pc, #104]	; (800e488 <xTaskGenericNotify+0x144>)
 800e41e:	6013      	str	r3, [r2, #0]
 800e420:	6a3b      	ldr	r3, [r7, #32]
 800e422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e424:	4613      	mov	r3, r2
 800e426:	009b      	lsls	r3, r3, #2
 800e428:	4413      	add	r3, r2
 800e42a:	009b      	lsls	r3, r3, #2
 800e42c:	4a17      	ldr	r2, [pc, #92]	; (800e48c <xTaskGenericNotify+0x148>)
 800e42e:	441a      	add	r2, r3
 800e430:	6a3b      	ldr	r3, [r7, #32]
 800e432:	3304      	adds	r3, #4
 800e434:	4619      	mov	r1, r3
 800e436:	4610      	mov	r0, r2
 800e438:	f7fd f84d 	bl	800b4d6 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800e43c:	6a3b      	ldr	r3, [r7, #32]
 800e43e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e440:	2b00      	cmp	r3, #0
 800e442:	d00a      	beq.n	800e45a <xTaskGenericNotify+0x116>
	__asm volatile
 800e444:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e448:	f383 8811 	msr	BASEPRI, r3
 800e44c:	f3bf 8f6f 	isb	sy
 800e450:	f3bf 8f4f 	dsb	sy
 800e454:	617b      	str	r3, [r7, #20]
}
 800e456:	bf00      	nop
 800e458:	e7fe      	b.n	800e458 <xTaskGenericNotify+0x114>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e45a:	6a3b      	ldr	r3, [r7, #32]
 800e45c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e45e:	4b0c      	ldr	r3, [pc, #48]	; (800e490 <xTaskGenericNotify+0x14c>)
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e464:	429a      	cmp	r2, r3
 800e466:	d907      	bls.n	800e478 <xTaskGenericNotify+0x134>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800e468:	4b0a      	ldr	r3, [pc, #40]	; (800e494 <xTaskGenericNotify+0x150>)
 800e46a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e46e:	601a      	str	r2, [r3, #0]
 800e470:	f3bf 8f4f 	dsb	sy
 800e474:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800e478:	f000 fb36 	bl	800eae8 <vPortExitCritical>

		return xReturn;
 800e47c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800e47e:	4618      	mov	r0, r3
 800e480:	3728      	adds	r7, #40	; 0x28
 800e482:	46bd      	mov	sp, r7
 800e484:	bd80      	pop	{r7, pc}
 800e486:	bf00      	nop
 800e488:	200004b4 	.word	0x200004b4
 800e48c:	200003b0 	.word	0x200003b0
 800e490:	200003ac 	.word	0x200003ac
 800e494:	e000ed04 	.word	0xe000ed04

0800e498 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800e498:	b580      	push	{r7, lr}
 800e49a:	b08e      	sub	sp, #56	; 0x38
 800e49c:	af00      	add	r7, sp, #0
 800e49e:	60f8      	str	r0, [r7, #12]
 800e4a0:	60b9      	str	r1, [r7, #8]
 800e4a2:	603b      	str	r3, [r7, #0]
 800e4a4:	4613      	mov	r3, r2
 800e4a6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800e4a8:	2301      	movs	r3, #1
 800e4aa:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d10a      	bne.n	800e4c8 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800e4b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4b6:	f383 8811 	msr	BASEPRI, r3
 800e4ba:	f3bf 8f6f 	isb	sy
 800e4be:	f3bf 8f4f 	dsb	sy
 800e4c2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e4c4:	bf00      	nop
 800e4c6:	e7fe      	b.n	800e4c6 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e4c8:	f000 fba2 	bl	800ec10 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800e4d0:	f3ef 8211 	mrs	r2, BASEPRI
 800e4d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4d8:	f383 8811 	msr	BASEPRI, r3
 800e4dc:	f3bf 8f6f 	isb	sy
 800e4e0:	f3bf 8f4f 	dsb	sy
 800e4e4:	623a      	str	r2, [r7, #32]
 800e4e6:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800e4e8:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e4ea:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800e4ec:	683b      	ldr	r3, [r7, #0]
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d004      	beq.n	800e4fc <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800e4f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4f4:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800e4f8:	683b      	ldr	r3, [r7, #0]
 800e4fa:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800e4fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4fe:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800e502:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800e506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e508:	2202      	movs	r2, #2
 800e50a:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

			switch( eAction )
 800e50e:	79fb      	ldrb	r3, [r7, #7]
 800e510:	2b04      	cmp	r3, #4
 800e512:	d82f      	bhi.n	800e574 <xTaskGenericNotifyFromISR+0xdc>
 800e514:	a201      	add	r2, pc, #4	; (adr r2, 800e51c <xTaskGenericNotifyFromISR+0x84>)
 800e516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e51a:	bf00      	nop
 800e51c:	0800e575 	.word	0x0800e575
 800e520:	0800e531 	.word	0x0800e531
 800e524:	0800e543 	.word	0x0800e543
 800e528:	0800e553 	.word	0x0800e553
 800e52c:	0800e55d 	.word	0x0800e55d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800e530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e532:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800e536:	68bb      	ldr	r3, [r7, #8]
 800e538:	431a      	orrs	r2, r3
 800e53a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e53c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800e540:	e018      	b.n	800e574 <xTaskGenericNotifyFromISR+0xdc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800e542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e544:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800e548:	1c5a      	adds	r2, r3, #1
 800e54a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e54c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800e550:	e010      	b.n	800e574 <xTaskGenericNotifyFromISR+0xdc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800e552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e554:	68ba      	ldr	r2, [r7, #8]
 800e556:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800e55a:	e00b      	b.n	800e574 <xTaskGenericNotifyFromISR+0xdc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800e55c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e560:	2b02      	cmp	r3, #2
 800e562:	d004      	beq.n	800e56e <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800e564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e566:	68ba      	ldr	r2, [r7, #8]
 800e568:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800e56c:	e001      	b.n	800e572 <xTaskGenericNotifyFromISR+0xda>
						xReturn = pdFAIL;
 800e56e:	2300      	movs	r3, #0
 800e570:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800e572:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800e574:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e578:	2b01      	cmp	r3, #1
 800e57a:	d146      	bne.n	800e60a <xTaskGenericNotifyFromISR+0x172>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800e57c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e57e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e580:	2b00      	cmp	r3, #0
 800e582:	d00a      	beq.n	800e59a <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 800e584:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e588:	f383 8811 	msr	BASEPRI, r3
 800e58c:	f3bf 8f6f 	isb	sy
 800e590:	f3bf 8f4f 	dsb	sy
 800e594:	61bb      	str	r3, [r7, #24]
}
 800e596:	bf00      	nop
 800e598:	e7fe      	b.n	800e598 <xTaskGenericNotifyFromISR+0x100>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e59a:	4b21      	ldr	r3, [pc, #132]	; (800e620 <xTaskGenericNotifyFromISR+0x188>)
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d11c      	bne.n	800e5dc <xTaskGenericNotifyFromISR+0x144>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e5a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5a4:	3304      	adds	r3, #4
 800e5a6:	4618      	mov	r0, r3
 800e5a8:	f7fc fff0 	bl	800b58c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e5ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5b0:	2201      	movs	r2, #1
 800e5b2:	409a      	lsls	r2, r3
 800e5b4:	4b1b      	ldr	r3, [pc, #108]	; (800e624 <xTaskGenericNotifyFromISR+0x18c>)
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	4313      	orrs	r3, r2
 800e5ba:	4a1a      	ldr	r2, [pc, #104]	; (800e624 <xTaskGenericNotifyFromISR+0x18c>)
 800e5bc:	6013      	str	r3, [r2, #0]
 800e5be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5c2:	4613      	mov	r3, r2
 800e5c4:	009b      	lsls	r3, r3, #2
 800e5c6:	4413      	add	r3, r2
 800e5c8:	009b      	lsls	r3, r3, #2
 800e5ca:	4a17      	ldr	r2, [pc, #92]	; (800e628 <xTaskGenericNotifyFromISR+0x190>)
 800e5cc:	441a      	add	r2, r3
 800e5ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5d0:	3304      	adds	r3, #4
 800e5d2:	4619      	mov	r1, r3
 800e5d4:	4610      	mov	r0, r2
 800e5d6:	f7fc ff7e 	bl	800b4d6 <vListInsertEnd>
 800e5da:	e005      	b.n	800e5e8 <xTaskGenericNotifyFromISR+0x150>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800e5dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5de:	3318      	adds	r3, #24
 800e5e0:	4619      	mov	r1, r3
 800e5e2:	4812      	ldr	r0, [pc, #72]	; (800e62c <xTaskGenericNotifyFromISR+0x194>)
 800e5e4:	f7fc ff77 	bl	800b4d6 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e5e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5ec:	4b10      	ldr	r3, [pc, #64]	; (800e630 <xTaskGenericNotifyFromISR+0x198>)
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5f2:	429a      	cmp	r2, r3
 800e5f4:	d909      	bls.n	800e60a <xTaskGenericNotifyFromISR+0x172>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800e5f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d003      	beq.n	800e604 <xTaskGenericNotifyFromISR+0x16c>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800e5fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e5fe:	2201      	movs	r2, #1
 800e600:	601a      	str	r2, [r3, #0]
 800e602:	e002      	b.n	800e60a <xTaskGenericNotifyFromISR+0x172>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 800e604:	4b0b      	ldr	r3, [pc, #44]	; (800e634 <xTaskGenericNotifyFromISR+0x19c>)
 800e606:	2201      	movs	r2, #1
 800e608:	601a      	str	r2, [r3, #0]
 800e60a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e60c:	617b      	str	r3, [r7, #20]
	__asm volatile
 800e60e:	697b      	ldr	r3, [r7, #20]
 800e610:	f383 8811 	msr	BASEPRI, r3
}
 800e614:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800e616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800e618:	4618      	mov	r0, r3
 800e61a:	3738      	adds	r7, #56	; 0x38
 800e61c:	46bd      	mov	sp, r7
 800e61e:	bd80      	pop	{r7, pc}
 800e620:	200004d4 	.word	0x200004d4
 800e624:	200004b4 	.word	0x200004b4
 800e628:	200003b0 	.word	0x200003b0
 800e62c:	2000046c 	.word	0x2000046c
 800e630:	200003ac 	.word	0x200003ac
 800e634:	200004c0 	.word	0x200004c0

0800e638 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800e638:	b580      	push	{r7, lr}
 800e63a:	b08a      	sub	sp, #40	; 0x28
 800e63c:	af00      	add	r7, sp, #0
 800e63e:	6078      	str	r0, [r7, #4]
 800e640:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	2b00      	cmp	r3, #0
 800e646:	d10a      	bne.n	800e65e <vTaskNotifyGiveFromISR+0x26>
	__asm volatile
 800e648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e64c:	f383 8811 	msr	BASEPRI, r3
 800e650:	f3bf 8f6f 	isb	sy
 800e654:	f3bf 8f4f 	dsb	sy
 800e658:	61bb      	str	r3, [r7, #24]
}
 800e65a:	bf00      	nop
 800e65c:	e7fe      	b.n	800e65c <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e65e:	f000 fad7 	bl	800ec10 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	627b      	str	r3, [r7, #36]	; 0x24
	__asm volatile
 800e666:	f3ef 8211 	mrs	r2, BASEPRI
 800e66a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e66e:	f383 8811 	msr	BASEPRI, r3
 800e672:	f3bf 8f6f 	isb	sy
 800e676:	f3bf 8f4f 	dsb	sy
 800e67a:	617a      	str	r2, [r7, #20]
 800e67c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800e67e:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e680:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800e682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e684:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800e688:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800e68a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e68c:	2202      	movs	r2, #2
 800e68e:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 800e692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e694:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800e698:	1c5a      	adds	r2, r3, #1
 800e69a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e69c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800e6a0:	7ffb      	ldrb	r3, [r7, #31]
 800e6a2:	2b01      	cmp	r3, #1
 800e6a4:	d146      	bne.n	800e734 <vTaskNotifyGiveFromISR+0xfc>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800e6a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d00a      	beq.n	800e6c4 <vTaskNotifyGiveFromISR+0x8c>
	__asm volatile
 800e6ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6b2:	f383 8811 	msr	BASEPRI, r3
 800e6b6:	f3bf 8f6f 	isb	sy
 800e6ba:	f3bf 8f4f 	dsb	sy
 800e6be:	60fb      	str	r3, [r7, #12]
}
 800e6c0:	bf00      	nop
 800e6c2:	e7fe      	b.n	800e6c2 <vTaskNotifyGiveFromISR+0x8a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e6c4:	4b20      	ldr	r3, [pc, #128]	; (800e748 <vTaskNotifyGiveFromISR+0x110>)
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d11c      	bne.n	800e706 <vTaskNotifyGiveFromISR+0xce>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e6cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6ce:	3304      	adds	r3, #4
 800e6d0:	4618      	mov	r0, r3
 800e6d2:	f7fc ff5b 	bl	800b58c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e6d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6da:	2201      	movs	r2, #1
 800e6dc:	409a      	lsls	r2, r3
 800e6de:	4b1b      	ldr	r3, [pc, #108]	; (800e74c <vTaskNotifyGiveFromISR+0x114>)
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	4313      	orrs	r3, r2
 800e6e4:	4a19      	ldr	r2, [pc, #100]	; (800e74c <vTaskNotifyGiveFromISR+0x114>)
 800e6e6:	6013      	str	r3, [r2, #0]
 800e6e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6ec:	4613      	mov	r3, r2
 800e6ee:	009b      	lsls	r3, r3, #2
 800e6f0:	4413      	add	r3, r2
 800e6f2:	009b      	lsls	r3, r3, #2
 800e6f4:	4a16      	ldr	r2, [pc, #88]	; (800e750 <vTaskNotifyGiveFromISR+0x118>)
 800e6f6:	441a      	add	r2, r3
 800e6f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6fa:	3304      	adds	r3, #4
 800e6fc:	4619      	mov	r1, r3
 800e6fe:	4610      	mov	r0, r2
 800e700:	f7fc fee9 	bl	800b4d6 <vListInsertEnd>
 800e704:	e005      	b.n	800e712 <vTaskNotifyGiveFromISR+0xda>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800e706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e708:	3318      	adds	r3, #24
 800e70a:	4619      	mov	r1, r3
 800e70c:	4811      	ldr	r0, [pc, #68]	; (800e754 <vTaskNotifyGiveFromISR+0x11c>)
 800e70e:	f7fc fee2 	bl	800b4d6 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e714:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e716:	4b10      	ldr	r3, [pc, #64]	; (800e758 <vTaskNotifyGiveFromISR+0x120>)
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e71c:	429a      	cmp	r2, r3
 800e71e:	d909      	bls.n	800e734 <vTaskNotifyGiveFromISR+0xfc>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800e720:	683b      	ldr	r3, [r7, #0]
 800e722:	2b00      	cmp	r3, #0
 800e724:	d003      	beq.n	800e72e <vTaskNotifyGiveFromISR+0xf6>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800e726:	683b      	ldr	r3, [r7, #0]
 800e728:	2201      	movs	r2, #1
 800e72a:	601a      	str	r2, [r3, #0]
 800e72c:	e002      	b.n	800e734 <vTaskNotifyGiveFromISR+0xfc>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter in an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 800e72e:	4b0b      	ldr	r3, [pc, #44]	; (800e75c <vTaskNotifyGiveFromISR+0x124>)
 800e730:	2201      	movs	r2, #1
 800e732:	601a      	str	r2, [r3, #0]
 800e734:	6a3b      	ldr	r3, [r7, #32]
 800e736:	60bb      	str	r3, [r7, #8]
	__asm volatile
 800e738:	68bb      	ldr	r3, [r7, #8]
 800e73a:	f383 8811 	msr	BASEPRI, r3
}
 800e73e:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 800e740:	bf00      	nop
 800e742:	3728      	adds	r7, #40	; 0x28
 800e744:	46bd      	mov	sp, r7
 800e746:	bd80      	pop	{r7, pc}
 800e748:	200004d4 	.word	0x200004d4
 800e74c:	200004b4 	.word	0x200004b4
 800e750:	200003b0 	.word	0x200003b0
 800e754:	2000046c 	.word	0x2000046c
 800e758:	200003ac 	.word	0x200003ac
 800e75c:	200004c0 	.word	0x200004c0

0800e760 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 800e760:	b580      	push	{r7, lr}
 800e762:	b084      	sub	sp, #16
 800e764:	af00      	add	r7, sp, #0
 800e766:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d102      	bne.n	800e774 <xTaskNotifyStateClear+0x14>
 800e76e:	4b0e      	ldr	r3, [pc, #56]	; (800e7a8 <xTaskNotifyStateClear+0x48>)
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	e000      	b.n	800e776 <xTaskNotifyStateClear+0x16>
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 800e778:	f000 f986 	bl	800ea88 <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 800e77c:	68bb      	ldr	r3, [r7, #8]
 800e77e:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800e782:	b2db      	uxtb	r3, r3
 800e784:	2b02      	cmp	r3, #2
 800e786:	d106      	bne.n	800e796 <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e788:	68bb      	ldr	r3, [r7, #8]
 800e78a:	2200      	movs	r2, #0
 800e78c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
				xReturn = pdPASS;
 800e790:	2301      	movs	r3, #1
 800e792:	60fb      	str	r3, [r7, #12]
 800e794:	e001      	b.n	800e79a <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 800e796:	2300      	movs	r3, #0
 800e798:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 800e79a:	f000 f9a5 	bl	800eae8 <vPortExitCritical>

		return xReturn;
 800e79e:	68fb      	ldr	r3, [r7, #12]
	}
 800e7a0:	4618      	mov	r0, r3
 800e7a2:	3710      	adds	r7, #16
 800e7a4:	46bd      	mov	sp, r7
 800e7a6:	bd80      	pop	{r7, pc}
 800e7a8:	200003ac 	.word	0x200003ac

0800e7ac <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e7ac:	b580      	push	{r7, lr}
 800e7ae:	b084      	sub	sp, #16
 800e7b0:	af00      	add	r7, sp, #0
 800e7b2:	6078      	str	r0, [r7, #4]
 800e7b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e7b6:	4b29      	ldr	r3, [pc, #164]	; (800e85c <prvAddCurrentTaskToDelayedList+0xb0>)
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e7bc:	4b28      	ldr	r3, [pc, #160]	; (800e860 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	3304      	adds	r3, #4
 800e7c2:	4618      	mov	r0, r3
 800e7c4:	f7fc fee2 	bl	800b58c <uxListRemove>
 800e7c8:	4603      	mov	r3, r0
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d10b      	bne.n	800e7e6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800e7ce:	4b24      	ldr	r3, [pc, #144]	; (800e860 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7d4:	2201      	movs	r2, #1
 800e7d6:	fa02 f303 	lsl.w	r3, r2, r3
 800e7da:	43da      	mvns	r2, r3
 800e7dc:	4b21      	ldr	r3, [pc, #132]	; (800e864 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	4013      	ands	r3, r2
 800e7e2:	4a20      	ldr	r2, [pc, #128]	; (800e864 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e7e4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7ec:	d10a      	bne.n	800e804 <prvAddCurrentTaskToDelayedList+0x58>
 800e7ee:	683b      	ldr	r3, [r7, #0]
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d007      	beq.n	800e804 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e7f4:	4b1a      	ldr	r3, [pc, #104]	; (800e860 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	3304      	adds	r3, #4
 800e7fa:	4619      	mov	r1, r3
 800e7fc:	481a      	ldr	r0, [pc, #104]	; (800e868 <prvAddCurrentTaskToDelayedList+0xbc>)
 800e7fe:	f7fc fe6a 	bl	800b4d6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e802:	e026      	b.n	800e852 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e804:	68fa      	ldr	r2, [r7, #12]
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	4413      	add	r3, r2
 800e80a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e80c:	4b14      	ldr	r3, [pc, #80]	; (800e860 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	68ba      	ldr	r2, [r7, #8]
 800e812:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e814:	68ba      	ldr	r2, [r7, #8]
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	429a      	cmp	r2, r3
 800e81a:	d209      	bcs.n	800e830 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e81c:	4b13      	ldr	r3, [pc, #76]	; (800e86c <prvAddCurrentTaskToDelayedList+0xc0>)
 800e81e:	681a      	ldr	r2, [r3, #0]
 800e820:	4b0f      	ldr	r3, [pc, #60]	; (800e860 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	3304      	adds	r3, #4
 800e826:	4619      	mov	r1, r3
 800e828:	4610      	mov	r0, r2
 800e82a:	f7fc fe77 	bl	800b51c <vListInsert>
}
 800e82e:	e010      	b.n	800e852 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e830:	4b0f      	ldr	r3, [pc, #60]	; (800e870 <prvAddCurrentTaskToDelayedList+0xc4>)
 800e832:	681a      	ldr	r2, [r3, #0]
 800e834:	4b0a      	ldr	r3, [pc, #40]	; (800e860 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	3304      	adds	r3, #4
 800e83a:	4619      	mov	r1, r3
 800e83c:	4610      	mov	r0, r2
 800e83e:	f7fc fe6d 	bl	800b51c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e842:	4b0c      	ldr	r3, [pc, #48]	; (800e874 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	68ba      	ldr	r2, [r7, #8]
 800e848:	429a      	cmp	r2, r3
 800e84a:	d202      	bcs.n	800e852 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800e84c:	4a09      	ldr	r2, [pc, #36]	; (800e874 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e84e:	68bb      	ldr	r3, [r7, #8]
 800e850:	6013      	str	r3, [r2, #0]
}
 800e852:	bf00      	nop
 800e854:	3710      	adds	r7, #16
 800e856:	46bd      	mov	sp, r7
 800e858:	bd80      	pop	{r7, pc}
 800e85a:	bf00      	nop
 800e85c:	200004b0 	.word	0x200004b0
 800e860:	200003ac 	.word	0x200003ac
 800e864:	200004b4 	.word	0x200004b4
 800e868:	20000498 	.word	0x20000498
 800e86c:	20000468 	.word	0x20000468
 800e870:	20000464 	.word	0x20000464
 800e874:	200004cc 	.word	0x200004cc
	...

0800e880 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e880:	b480      	push	{r7}
 800e882:	b085      	sub	sp, #20
 800e884:	af00      	add	r7, sp, #0
 800e886:	60f8      	str	r0, [r7, #12]
 800e888:	60b9      	str	r1, [r7, #8]
 800e88a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	3b04      	subs	r3, #4
 800e890:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e898:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	3b04      	subs	r3, #4
 800e89e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e8a0:	68bb      	ldr	r3, [r7, #8]
 800e8a2:	f023 0201 	bic.w	r2, r3, #1
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	3b04      	subs	r3, #4
 800e8ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e8b0:	4a08      	ldr	r2, [pc, #32]	; (800e8d4 <pxPortInitialiseStack+0x54>)
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	3b14      	subs	r3, #20
 800e8ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e8bc:	687a      	ldr	r2, [r7, #4]
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	3b20      	subs	r3, #32
 800e8c6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e8c8:	68fb      	ldr	r3, [r7, #12]
}
 800e8ca:	4618      	mov	r0, r3
 800e8cc:	3714      	adds	r7, #20
 800e8ce:	46bd      	mov	sp, r7
 800e8d0:	bc80      	pop	{r7}
 800e8d2:	4770      	bx	lr
 800e8d4:	0800e8d9 	.word	0x0800e8d9

0800e8d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e8d8:	b480      	push	{r7}
 800e8da:	b085      	sub	sp, #20
 800e8dc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800e8de:	2300      	movs	r3, #0
 800e8e0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e8e2:	4b12      	ldr	r3, [pc, #72]	; (800e92c <prvTaskExitError+0x54>)
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8ea:	d00a      	beq.n	800e902 <prvTaskExitError+0x2a>
	__asm volatile
 800e8ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8f0:	f383 8811 	msr	BASEPRI, r3
 800e8f4:	f3bf 8f6f 	isb	sy
 800e8f8:	f3bf 8f4f 	dsb	sy
 800e8fc:	60fb      	str	r3, [r7, #12]
}
 800e8fe:	bf00      	nop
 800e900:	e7fe      	b.n	800e900 <prvTaskExitError+0x28>
	__asm volatile
 800e902:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e906:	f383 8811 	msr	BASEPRI, r3
 800e90a:	f3bf 8f6f 	isb	sy
 800e90e:	f3bf 8f4f 	dsb	sy
 800e912:	60bb      	str	r3, [r7, #8]
}
 800e914:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e916:	bf00      	nop
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d0fc      	beq.n	800e918 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e91e:	bf00      	nop
 800e920:	bf00      	nop
 800e922:	3714      	adds	r7, #20
 800e924:	46bd      	mov	sp, r7
 800e926:	bc80      	pop	{r7}
 800e928:	4770      	bx	lr
 800e92a:	bf00      	nop
 800e92c:	2000000c 	.word	0x2000000c

0800e930 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e930:	4b07      	ldr	r3, [pc, #28]	; (800e950 <pxCurrentTCBConst2>)
 800e932:	6819      	ldr	r1, [r3, #0]
 800e934:	6808      	ldr	r0, [r1, #0]
 800e936:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800e93a:	f380 8809 	msr	PSP, r0
 800e93e:	f3bf 8f6f 	isb	sy
 800e942:	f04f 0000 	mov.w	r0, #0
 800e946:	f380 8811 	msr	BASEPRI, r0
 800e94a:	f04e 0e0d 	orr.w	lr, lr, #13
 800e94e:	4770      	bx	lr

0800e950 <pxCurrentTCBConst2>:
 800e950:	200003ac 	.word	0x200003ac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e954:	bf00      	nop

0800e956 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800e956:	48cd      	ldr	r0, [pc, #820]	; (800ec8c <vPortValidateInterruptPriority+0x7c>)
 800e958:	6800      	ldr	r0, [r0, #0]
 800e95a:	6800      	ldr	r0, [r0, #0]
 800e95c:	f380 8808 	msr	MSP, r0
 800e960:	b662      	cpsie	i
 800e962:	b661      	cpsie	f
 800e964:	f3bf 8f4f 	dsb	sy
 800e968:	f3bf 8f6f 	isb	sy
 800e96c:	df00      	svc	0
 800e96e:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e970:	bf00      	nop

0800e972 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e972:	b580      	push	{r7, lr}
 800e974:	b084      	sub	sp, #16
 800e976:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e978:	4b31      	ldr	r3, [pc, #196]	; (800ea40 <xPortStartScheduler+0xce>)
 800e97a:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	781b      	ldrb	r3, [r3, #0]
 800e980:	b2db      	uxtb	r3, r3
 800e982:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	22f0      	movs	r2, #240	; 0xf0
 800e988:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	781b      	ldrb	r3, [r3, #0]
 800e98e:	b2db      	uxtb	r3, r3
 800e990:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e992:	78fb      	ldrb	r3, [r7, #3]
 800e994:	b2db      	uxtb	r3, r3
 800e996:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e99a:	b2da      	uxtb	r2, r3
 800e99c:	4b29      	ldr	r3, [pc, #164]	; (800ea44 <xPortStartScheduler+0xd2>)
 800e99e:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e9a0:	4b29      	ldr	r3, [pc, #164]	; (800ea48 <xPortStartScheduler+0xd6>)
 800e9a2:	2207      	movs	r2, #7
 800e9a4:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e9a6:	e009      	b.n	800e9bc <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800e9a8:	4b27      	ldr	r3, [pc, #156]	; (800ea48 <xPortStartScheduler+0xd6>)
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	3b01      	subs	r3, #1
 800e9ae:	4a26      	ldr	r2, [pc, #152]	; (800ea48 <xPortStartScheduler+0xd6>)
 800e9b0:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e9b2:	78fb      	ldrb	r3, [r7, #3]
 800e9b4:	b2db      	uxtb	r3, r3
 800e9b6:	005b      	lsls	r3, r3, #1
 800e9b8:	b2db      	uxtb	r3, r3
 800e9ba:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e9bc:	78fb      	ldrb	r3, [r7, #3]
 800e9be:	b2db      	uxtb	r3, r3
 800e9c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e9c4:	2b80      	cmp	r3, #128	; 0x80
 800e9c6:	d0ef      	beq.n	800e9a8 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e9c8:	4b1f      	ldr	r3, [pc, #124]	; (800ea48 <xPortStartScheduler+0xd6>)
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	f1c3 0307 	rsb	r3, r3, #7
 800e9d0:	2b04      	cmp	r3, #4
 800e9d2:	d00a      	beq.n	800e9ea <xPortStartScheduler+0x78>
	__asm volatile
 800e9d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9d8:	f383 8811 	msr	BASEPRI, r3
 800e9dc:	f3bf 8f6f 	isb	sy
 800e9e0:	f3bf 8f4f 	dsb	sy
 800e9e4:	60bb      	str	r3, [r7, #8]
}
 800e9e6:	bf00      	nop
 800e9e8:	e7fe      	b.n	800e9e8 <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e9ea:	4b17      	ldr	r3, [pc, #92]	; (800ea48 <xPortStartScheduler+0xd6>)
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	021b      	lsls	r3, r3, #8
 800e9f0:	4a15      	ldr	r2, [pc, #84]	; (800ea48 <xPortStartScheduler+0xd6>)
 800e9f2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e9f4:	4b14      	ldr	r3, [pc, #80]	; (800ea48 <xPortStartScheduler+0xd6>)
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e9fc:	4a12      	ldr	r2, [pc, #72]	; (800ea48 <xPortStartScheduler+0xd6>)
 800e9fe:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	b2da      	uxtb	r2, r3
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ea08:	4b10      	ldr	r3, [pc, #64]	; (800ea4c <xPortStartScheduler+0xda>)
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	4a0f      	ldr	r2, [pc, #60]	; (800ea4c <xPortStartScheduler+0xda>)
 800ea0e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ea12:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ea14:	4b0d      	ldr	r3, [pc, #52]	; (800ea4c <xPortStartScheduler+0xda>)
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	4a0c      	ldr	r2, [pc, #48]	; (800ea4c <xPortStartScheduler+0xda>)
 800ea1a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ea1e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ea20:	f000 f8d4 	bl	800ebcc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ea24:	4b0a      	ldr	r3, [pc, #40]	; (800ea50 <xPortStartScheduler+0xde>)
 800ea26:	2200      	movs	r2, #0
 800ea28:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ea2a:	f7ff ff94 	bl	800e956 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ea2e:	f7fe fecb 	bl	800d7c8 <vTaskSwitchContext>
	prvTaskExitError();
 800ea32:	f7ff ff51 	bl	800e8d8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ea36:	2300      	movs	r3, #0
}
 800ea38:	4618      	mov	r0, r3
 800ea3a:	3710      	adds	r7, #16
 800ea3c:	46bd      	mov	sp, r7
 800ea3e:	bd80      	pop	{r7, pc}
 800ea40:	e000e400 	.word	0xe000e400
 800ea44:	200004d8 	.word	0x200004d8
 800ea48:	200004dc 	.word	0x200004dc
 800ea4c:	e000ed20 	.word	0xe000ed20
 800ea50:	2000000c 	.word	0x2000000c

0800ea54 <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 800ea54:	b480      	push	{r7}
 800ea56:	b083      	sub	sp, #12
 800ea58:	af00      	add	r7, sp, #0
	/* Not implemented in ports where there is nothing to return to.
	Artificially force an assert. */
	configASSERT( uxCriticalNesting == 1000UL );
 800ea5a:	4b0a      	ldr	r3, [pc, #40]	; (800ea84 <vPortEndScheduler+0x30>)
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ea62:	d00a      	beq.n	800ea7a <vPortEndScheduler+0x26>
	__asm volatile
 800ea64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea68:	f383 8811 	msr	BASEPRI, r3
 800ea6c:	f3bf 8f6f 	isb	sy
 800ea70:	f3bf 8f4f 	dsb	sy
 800ea74:	607b      	str	r3, [r7, #4]
}
 800ea76:	bf00      	nop
 800ea78:	e7fe      	b.n	800ea78 <vPortEndScheduler+0x24>
}
 800ea7a:	bf00      	nop
 800ea7c:	370c      	adds	r7, #12
 800ea7e:	46bd      	mov	sp, r7
 800ea80:	bc80      	pop	{r7}
 800ea82:	4770      	bx	lr
 800ea84:	2000000c 	.word	0x2000000c

0800ea88 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ea88:	b480      	push	{r7}
 800ea8a:	b083      	sub	sp, #12
 800ea8c:	af00      	add	r7, sp, #0
	__asm volatile
 800ea8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea92:	f383 8811 	msr	BASEPRI, r3
 800ea96:	f3bf 8f6f 	isb	sy
 800ea9a:	f3bf 8f4f 	dsb	sy
 800ea9e:	607b      	str	r3, [r7, #4]
}
 800eaa0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800eaa2:	4b0f      	ldr	r3, [pc, #60]	; (800eae0 <vPortEnterCritical+0x58>)
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	3301      	adds	r3, #1
 800eaa8:	4a0d      	ldr	r2, [pc, #52]	; (800eae0 <vPortEnterCritical+0x58>)
 800eaaa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800eaac:	4b0c      	ldr	r3, [pc, #48]	; (800eae0 <vPortEnterCritical+0x58>)
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	2b01      	cmp	r3, #1
 800eab2:	d10f      	bne.n	800ead4 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800eab4:	4b0b      	ldr	r3, [pc, #44]	; (800eae4 <vPortEnterCritical+0x5c>)
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	b2db      	uxtb	r3, r3
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d00a      	beq.n	800ead4 <vPortEnterCritical+0x4c>
	__asm volatile
 800eabe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eac2:	f383 8811 	msr	BASEPRI, r3
 800eac6:	f3bf 8f6f 	isb	sy
 800eaca:	f3bf 8f4f 	dsb	sy
 800eace:	603b      	str	r3, [r7, #0]
}
 800ead0:	bf00      	nop
 800ead2:	e7fe      	b.n	800ead2 <vPortEnterCritical+0x4a>
	}
}
 800ead4:	bf00      	nop
 800ead6:	370c      	adds	r7, #12
 800ead8:	46bd      	mov	sp, r7
 800eada:	bc80      	pop	{r7}
 800eadc:	4770      	bx	lr
 800eade:	bf00      	nop
 800eae0:	2000000c 	.word	0x2000000c
 800eae4:	e000ed04 	.word	0xe000ed04

0800eae8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800eae8:	b480      	push	{r7}
 800eaea:	b083      	sub	sp, #12
 800eaec:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800eaee:	4b11      	ldr	r3, [pc, #68]	; (800eb34 <vPortExitCritical+0x4c>)
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d10a      	bne.n	800eb0c <vPortExitCritical+0x24>
	__asm volatile
 800eaf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eafa:	f383 8811 	msr	BASEPRI, r3
 800eafe:	f3bf 8f6f 	isb	sy
 800eb02:	f3bf 8f4f 	dsb	sy
 800eb06:	607b      	str	r3, [r7, #4]
}
 800eb08:	bf00      	nop
 800eb0a:	e7fe      	b.n	800eb0a <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800eb0c:	4b09      	ldr	r3, [pc, #36]	; (800eb34 <vPortExitCritical+0x4c>)
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	3b01      	subs	r3, #1
 800eb12:	4a08      	ldr	r2, [pc, #32]	; (800eb34 <vPortExitCritical+0x4c>)
 800eb14:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800eb16:	4b07      	ldr	r3, [pc, #28]	; (800eb34 <vPortExitCritical+0x4c>)
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d105      	bne.n	800eb2a <vPortExitCritical+0x42>
 800eb1e:	2300      	movs	r3, #0
 800eb20:	603b      	str	r3, [r7, #0]
	__asm volatile
 800eb22:	683b      	ldr	r3, [r7, #0]
 800eb24:	f383 8811 	msr	BASEPRI, r3
}
 800eb28:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800eb2a:	bf00      	nop
 800eb2c:	370c      	adds	r7, #12
 800eb2e:	46bd      	mov	sp, r7
 800eb30:	bc80      	pop	{r7}
 800eb32:	4770      	bx	lr
 800eb34:	2000000c 	.word	0x2000000c

0800eb38 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800eb38:	f3ef 8009 	mrs	r0, PSP
 800eb3c:	f3bf 8f6f 	isb	sy
 800eb40:	4b0f      	ldr	r3, [pc, #60]	; (800eb80 <pxCurrentTCBConst>)
 800eb42:	681a      	ldr	r2, [r3, #0]
 800eb44:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800eb48:	6010      	str	r0, [r2, #0]
 800eb4a:	e92d 4008 	stmdb	sp!, {r3, lr}
 800eb4e:	f04f 0050 	mov.w	r0, #80	; 0x50
 800eb52:	f380 8811 	msr	BASEPRI, r0
 800eb56:	f7fe fe37 	bl	800d7c8 <vTaskSwitchContext>
 800eb5a:	f04f 0000 	mov.w	r0, #0
 800eb5e:	f380 8811 	msr	BASEPRI, r0
 800eb62:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800eb66:	6819      	ldr	r1, [r3, #0]
 800eb68:	6808      	ldr	r0, [r1, #0]
 800eb6a:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800eb6e:	f380 8809 	msr	PSP, r0
 800eb72:	f3bf 8f6f 	isb	sy
 800eb76:	4770      	bx	lr
 800eb78:	f3af 8000 	nop.w
 800eb7c:	f3af 8000 	nop.w

0800eb80 <pxCurrentTCBConst>:
 800eb80:	200003ac 	.word	0x200003ac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800eb84:	bf00      	nop

0800eb86 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800eb86:	b580      	push	{r7, lr}
 800eb88:	b082      	sub	sp, #8
 800eb8a:	af00      	add	r7, sp, #0
	__asm volatile
 800eb8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb90:	f383 8811 	msr	BASEPRI, r3
 800eb94:	f3bf 8f6f 	isb	sy
 800eb98:	f3bf 8f4f 	dsb	sy
 800eb9c:	607b      	str	r3, [r7, #4]
}
 800eb9e:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800eba0:	f7fe fd54 	bl	800d64c <xTaskIncrementTick>
 800eba4:	4603      	mov	r3, r0
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d003      	beq.n	800ebb2 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ebaa:	4b07      	ldr	r3, [pc, #28]	; (800ebc8 <SysTick_Handler+0x42>)
 800ebac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ebb0:	601a      	str	r2, [r3, #0]
 800ebb2:	2300      	movs	r3, #0
 800ebb4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ebb6:	683b      	ldr	r3, [r7, #0]
 800ebb8:	f383 8811 	msr	BASEPRI, r3
}
 800ebbc:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ebbe:	bf00      	nop
 800ebc0:	3708      	adds	r7, #8
 800ebc2:	46bd      	mov	sp, r7
 800ebc4:	bd80      	pop	{r7, pc}
 800ebc6:	bf00      	nop
 800ebc8:	e000ed04 	.word	0xe000ed04

0800ebcc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ebcc:	b480      	push	{r7}
 800ebce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ebd0:	4b0a      	ldr	r3, [pc, #40]	; (800ebfc <vPortSetupTimerInterrupt+0x30>)
 800ebd2:	2200      	movs	r2, #0
 800ebd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ebd6:	4b0a      	ldr	r3, [pc, #40]	; (800ec00 <vPortSetupTimerInterrupt+0x34>)
 800ebd8:	2200      	movs	r2, #0
 800ebda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ebdc:	4b09      	ldr	r3, [pc, #36]	; (800ec04 <vPortSetupTimerInterrupt+0x38>)
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	4a09      	ldr	r2, [pc, #36]	; (800ec08 <vPortSetupTimerInterrupt+0x3c>)
 800ebe2:	fba2 2303 	umull	r2, r3, r2, r3
 800ebe6:	099b      	lsrs	r3, r3, #6
 800ebe8:	4a08      	ldr	r2, [pc, #32]	; (800ec0c <vPortSetupTimerInterrupt+0x40>)
 800ebea:	3b01      	subs	r3, #1
 800ebec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ebee:	4b03      	ldr	r3, [pc, #12]	; (800ebfc <vPortSetupTimerInterrupt+0x30>)
 800ebf0:	2207      	movs	r2, #7
 800ebf2:	601a      	str	r2, [r3, #0]
}
 800ebf4:	bf00      	nop
 800ebf6:	46bd      	mov	sp, r7
 800ebf8:	bc80      	pop	{r7}
 800ebfa:	4770      	bx	lr
 800ebfc:	e000e010 	.word	0xe000e010
 800ec00:	e000e018 	.word	0xe000e018
 800ec04:	20000000 	.word	0x20000000
 800ec08:	10624dd3 	.word	0x10624dd3
 800ec0c:	e000e014 	.word	0xe000e014

0800ec10 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ec10:	b480      	push	{r7}
 800ec12:	b085      	sub	sp, #20
 800ec14:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ec16:	f3ef 8305 	mrs	r3, IPSR
 800ec1a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	2b0f      	cmp	r3, #15
 800ec20:	d914      	bls.n	800ec4c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ec22:	4a16      	ldr	r2, [pc, #88]	; (800ec7c <vPortValidateInterruptPriority+0x6c>)
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	4413      	add	r3, r2
 800ec28:	781b      	ldrb	r3, [r3, #0]
 800ec2a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ec2c:	4b14      	ldr	r3, [pc, #80]	; (800ec80 <vPortValidateInterruptPriority+0x70>)
 800ec2e:	781b      	ldrb	r3, [r3, #0]
 800ec30:	7afa      	ldrb	r2, [r7, #11]
 800ec32:	429a      	cmp	r2, r3
 800ec34:	d20a      	bcs.n	800ec4c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ec36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec3a:	f383 8811 	msr	BASEPRI, r3
 800ec3e:	f3bf 8f6f 	isb	sy
 800ec42:	f3bf 8f4f 	dsb	sy
 800ec46:	607b      	str	r3, [r7, #4]
}
 800ec48:	bf00      	nop
 800ec4a:	e7fe      	b.n	800ec4a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ec4c:	4b0d      	ldr	r3, [pc, #52]	; (800ec84 <vPortValidateInterruptPriority+0x74>)
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ec54:	4b0c      	ldr	r3, [pc, #48]	; (800ec88 <vPortValidateInterruptPriority+0x78>)
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	429a      	cmp	r2, r3
 800ec5a:	d90a      	bls.n	800ec72 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ec5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec60:	f383 8811 	msr	BASEPRI, r3
 800ec64:	f3bf 8f6f 	isb	sy
 800ec68:	f3bf 8f4f 	dsb	sy
 800ec6c:	603b      	str	r3, [r7, #0]
}
 800ec6e:	bf00      	nop
 800ec70:	e7fe      	b.n	800ec70 <vPortValidateInterruptPriority+0x60>
	}
 800ec72:	bf00      	nop
 800ec74:	3714      	adds	r7, #20
 800ec76:	46bd      	mov	sp, r7
 800ec78:	bc80      	pop	{r7}
 800ec7a:	4770      	bx	lr
 800ec7c:	e000e3f0 	.word	0xe000e3f0
 800ec80:	200004d8 	.word	0x200004d8
 800ec84:	e000ed0c 	.word	0xe000ed0c
 800ec88:	200004dc 	.word	0x200004dc
 800ec8c:	e000ed08 	.word	0xe000ed08

0800ec90 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ec90:	b580      	push	{r7, lr}
 800ec92:	b08a      	sub	sp, #40	; 0x28
 800ec94:	af00      	add	r7, sp, #0
 800ec96:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ec98:	2300      	movs	r3, #0
 800ec9a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ec9c:	f7fe fbde 	bl	800d45c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800eca0:	4b58      	ldr	r3, [pc, #352]	; (800ee04 <pvPortMalloc+0x174>)
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d101      	bne.n	800ecac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800eca8:	f000 f92a 	bl	800ef00 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ecac:	4b56      	ldr	r3, [pc, #344]	; (800ee08 <pvPortMalloc+0x178>)
 800ecae:	681a      	ldr	r2, [r3, #0]
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	4013      	ands	r3, r2
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	f040 808e 	bne.w	800edd6 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d01d      	beq.n	800ecfc <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ecc0:	2208      	movs	r2, #8
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	4413      	add	r3, r2
 800ecc6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	f003 0307 	and.w	r3, r3, #7
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d014      	beq.n	800ecfc <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	f023 0307 	bic.w	r3, r3, #7
 800ecd8:	3308      	adds	r3, #8
 800ecda:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	f003 0307 	and.w	r3, r3, #7
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d00a      	beq.n	800ecfc <pvPortMalloc+0x6c>
	__asm volatile
 800ece6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecea:	f383 8811 	msr	BASEPRI, r3
 800ecee:	f3bf 8f6f 	isb	sy
 800ecf2:	f3bf 8f4f 	dsb	sy
 800ecf6:	617b      	str	r3, [r7, #20]
}
 800ecf8:	bf00      	nop
 800ecfa:	e7fe      	b.n	800ecfa <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d069      	beq.n	800edd6 <pvPortMalloc+0x146>
 800ed02:	4b42      	ldr	r3, [pc, #264]	; (800ee0c <pvPortMalloc+0x17c>)
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	687a      	ldr	r2, [r7, #4]
 800ed08:	429a      	cmp	r2, r3
 800ed0a:	d864      	bhi.n	800edd6 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ed0c:	4b40      	ldr	r3, [pc, #256]	; (800ee10 <pvPortMalloc+0x180>)
 800ed0e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ed10:	4b3f      	ldr	r3, [pc, #252]	; (800ee10 <pvPortMalloc+0x180>)
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ed16:	e004      	b.n	800ed22 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ed18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed1a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ed1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ed22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed24:	685b      	ldr	r3, [r3, #4]
 800ed26:	687a      	ldr	r2, [r7, #4]
 800ed28:	429a      	cmp	r2, r3
 800ed2a:	d903      	bls.n	800ed34 <pvPortMalloc+0xa4>
 800ed2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d1f1      	bne.n	800ed18 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ed34:	4b33      	ldr	r3, [pc, #204]	; (800ee04 <pvPortMalloc+0x174>)
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed3a:	429a      	cmp	r2, r3
 800ed3c:	d04b      	beq.n	800edd6 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ed3e:	6a3b      	ldr	r3, [r7, #32]
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	2208      	movs	r2, #8
 800ed44:	4413      	add	r3, r2
 800ed46:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ed48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed4a:	681a      	ldr	r2, [r3, #0]
 800ed4c:	6a3b      	ldr	r3, [r7, #32]
 800ed4e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ed50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed52:	685a      	ldr	r2, [r3, #4]
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	1ad2      	subs	r2, r2, r3
 800ed58:	2308      	movs	r3, #8
 800ed5a:	005b      	lsls	r3, r3, #1
 800ed5c:	429a      	cmp	r2, r3
 800ed5e:	d91f      	bls.n	800eda0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ed60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	4413      	add	r3, r2
 800ed66:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ed68:	69bb      	ldr	r3, [r7, #24]
 800ed6a:	f003 0307 	and.w	r3, r3, #7
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d00a      	beq.n	800ed88 <pvPortMalloc+0xf8>
	__asm volatile
 800ed72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed76:	f383 8811 	msr	BASEPRI, r3
 800ed7a:	f3bf 8f6f 	isb	sy
 800ed7e:	f3bf 8f4f 	dsb	sy
 800ed82:	613b      	str	r3, [r7, #16]
}
 800ed84:	bf00      	nop
 800ed86:	e7fe      	b.n	800ed86 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ed88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed8a:	685a      	ldr	r2, [r3, #4]
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	1ad2      	subs	r2, r2, r3
 800ed90:	69bb      	ldr	r3, [r7, #24]
 800ed92:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ed94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed96:	687a      	ldr	r2, [r7, #4]
 800ed98:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ed9a:	69b8      	ldr	r0, [r7, #24]
 800ed9c:	f000 f912 	bl	800efc4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800eda0:	4b1a      	ldr	r3, [pc, #104]	; (800ee0c <pvPortMalloc+0x17c>)
 800eda2:	681a      	ldr	r2, [r3, #0]
 800eda4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eda6:	685b      	ldr	r3, [r3, #4]
 800eda8:	1ad3      	subs	r3, r2, r3
 800edaa:	4a18      	ldr	r2, [pc, #96]	; (800ee0c <pvPortMalloc+0x17c>)
 800edac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800edae:	4b17      	ldr	r3, [pc, #92]	; (800ee0c <pvPortMalloc+0x17c>)
 800edb0:	681a      	ldr	r2, [r3, #0]
 800edb2:	4b18      	ldr	r3, [pc, #96]	; (800ee14 <pvPortMalloc+0x184>)
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	429a      	cmp	r2, r3
 800edb8:	d203      	bcs.n	800edc2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800edba:	4b14      	ldr	r3, [pc, #80]	; (800ee0c <pvPortMalloc+0x17c>)
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	4a15      	ldr	r2, [pc, #84]	; (800ee14 <pvPortMalloc+0x184>)
 800edc0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800edc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edc4:	685a      	ldr	r2, [r3, #4]
 800edc6:	4b10      	ldr	r3, [pc, #64]	; (800ee08 <pvPortMalloc+0x178>)
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	431a      	orrs	r2, r3
 800edcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800edd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edd2:	2200      	movs	r2, #0
 800edd4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800edd6:	f7fe fb4f 	bl	800d478 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800edda:	69fb      	ldr	r3, [r7, #28]
 800eddc:	f003 0307 	and.w	r3, r3, #7
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d00a      	beq.n	800edfa <pvPortMalloc+0x16a>
	__asm volatile
 800ede4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ede8:	f383 8811 	msr	BASEPRI, r3
 800edec:	f3bf 8f6f 	isb	sy
 800edf0:	f3bf 8f4f 	dsb	sy
 800edf4:	60fb      	str	r3, [r7, #12]
}
 800edf6:	bf00      	nop
 800edf8:	e7fe      	b.n	800edf8 <pvPortMalloc+0x168>
	return pvReturn;
 800edfa:	69fb      	ldr	r3, [r7, #28]
}
 800edfc:	4618      	mov	r0, r3
 800edfe:	3728      	adds	r7, #40	; 0x28
 800ee00:	46bd      	mov	sp, r7
 800ee02:	bd80      	pop	{r7, pc}
 800ee04:	200010e8 	.word	0x200010e8
 800ee08:	200010f4 	.word	0x200010f4
 800ee0c:	200010ec 	.word	0x200010ec
 800ee10:	200010e0 	.word	0x200010e0
 800ee14:	200010f0 	.word	0x200010f0

0800ee18 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ee18:	b580      	push	{r7, lr}
 800ee1a:	b086      	sub	sp, #24
 800ee1c:	af00      	add	r7, sp, #0
 800ee1e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d048      	beq.n	800eebc <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ee2a:	2308      	movs	r3, #8
 800ee2c:	425b      	negs	r3, r3
 800ee2e:	697a      	ldr	r2, [r7, #20]
 800ee30:	4413      	add	r3, r2
 800ee32:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ee34:	697b      	ldr	r3, [r7, #20]
 800ee36:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ee38:	693b      	ldr	r3, [r7, #16]
 800ee3a:	685a      	ldr	r2, [r3, #4]
 800ee3c:	4b21      	ldr	r3, [pc, #132]	; (800eec4 <vPortFree+0xac>)
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	4013      	ands	r3, r2
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d10a      	bne.n	800ee5c <vPortFree+0x44>
	__asm volatile
 800ee46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee4a:	f383 8811 	msr	BASEPRI, r3
 800ee4e:	f3bf 8f6f 	isb	sy
 800ee52:	f3bf 8f4f 	dsb	sy
 800ee56:	60fb      	str	r3, [r7, #12]
}
 800ee58:	bf00      	nop
 800ee5a:	e7fe      	b.n	800ee5a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ee5c:	693b      	ldr	r3, [r7, #16]
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d00a      	beq.n	800ee7a <vPortFree+0x62>
	__asm volatile
 800ee64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee68:	f383 8811 	msr	BASEPRI, r3
 800ee6c:	f3bf 8f6f 	isb	sy
 800ee70:	f3bf 8f4f 	dsb	sy
 800ee74:	60bb      	str	r3, [r7, #8]
}
 800ee76:	bf00      	nop
 800ee78:	e7fe      	b.n	800ee78 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ee7a:	693b      	ldr	r3, [r7, #16]
 800ee7c:	685a      	ldr	r2, [r3, #4]
 800ee7e:	4b11      	ldr	r3, [pc, #68]	; (800eec4 <vPortFree+0xac>)
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	4013      	ands	r3, r2
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d019      	beq.n	800eebc <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ee88:	693b      	ldr	r3, [r7, #16]
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d115      	bne.n	800eebc <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ee90:	693b      	ldr	r3, [r7, #16]
 800ee92:	685a      	ldr	r2, [r3, #4]
 800ee94:	4b0b      	ldr	r3, [pc, #44]	; (800eec4 <vPortFree+0xac>)
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	43db      	mvns	r3, r3
 800ee9a:	401a      	ands	r2, r3
 800ee9c:	693b      	ldr	r3, [r7, #16]
 800ee9e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800eea0:	f7fe fadc 	bl	800d45c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800eea4:	693b      	ldr	r3, [r7, #16]
 800eea6:	685a      	ldr	r2, [r3, #4]
 800eea8:	4b07      	ldr	r3, [pc, #28]	; (800eec8 <vPortFree+0xb0>)
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	4413      	add	r3, r2
 800eeae:	4a06      	ldr	r2, [pc, #24]	; (800eec8 <vPortFree+0xb0>)
 800eeb0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800eeb2:	6938      	ldr	r0, [r7, #16]
 800eeb4:	f000 f886 	bl	800efc4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800eeb8:	f7fe fade 	bl	800d478 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800eebc:	bf00      	nop
 800eebe:	3718      	adds	r7, #24
 800eec0:	46bd      	mov	sp, r7
 800eec2:	bd80      	pop	{r7, pc}
 800eec4:	200010f4 	.word	0x200010f4
 800eec8:	200010ec 	.word	0x200010ec

0800eecc <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 800eecc:	b480      	push	{r7}
 800eece:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 800eed0:	4b02      	ldr	r3, [pc, #8]	; (800eedc <xPortGetFreeHeapSize+0x10>)
 800eed2:	681b      	ldr	r3, [r3, #0]
}
 800eed4:	4618      	mov	r0, r3
 800eed6:	46bd      	mov	sp, r7
 800eed8:	bc80      	pop	{r7}
 800eeda:	4770      	bx	lr
 800eedc:	200010ec 	.word	0x200010ec

0800eee0 <xPortGetMinimumEverFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetMinimumEverFreeHeapSize( void )
{
 800eee0:	b480      	push	{r7}
 800eee2:	af00      	add	r7, sp, #0
	return xMinimumEverFreeBytesRemaining;
 800eee4:	4b02      	ldr	r3, [pc, #8]	; (800eef0 <xPortGetMinimumEverFreeHeapSize+0x10>)
 800eee6:	681b      	ldr	r3, [r3, #0]
}
 800eee8:	4618      	mov	r0, r3
 800eeea:	46bd      	mov	sp, r7
 800eeec:	bc80      	pop	{r7}
 800eeee:	4770      	bx	lr
 800eef0:	200010f0 	.word	0x200010f0

0800eef4 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
 800eef4:	b480      	push	{r7}
 800eef6:	af00      	add	r7, sp, #0
	/* This just exists to keep the linker quiet. */
}
 800eef8:	bf00      	nop
 800eefa:	46bd      	mov	sp, r7
 800eefc:	bc80      	pop	{r7}
 800eefe:	4770      	bx	lr

0800ef00 <prvHeapInit>:
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ef00:	b480      	push	{r7}
 800ef02:	b085      	sub	sp, #20
 800ef04:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ef06:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800ef0a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ef0c:	4b27      	ldr	r3, [pc, #156]	; (800efac <prvHeapInit+0xac>)
 800ef0e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	f003 0307 	and.w	r3, r3, #7
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d00c      	beq.n	800ef34 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	3307      	adds	r3, #7
 800ef1e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	f023 0307 	bic.w	r3, r3, #7
 800ef26:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ef28:	68ba      	ldr	r2, [r7, #8]
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	1ad3      	subs	r3, r2, r3
 800ef2e:	4a1f      	ldr	r2, [pc, #124]	; (800efac <prvHeapInit+0xac>)
 800ef30:	4413      	add	r3, r2
 800ef32:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ef38:	4a1d      	ldr	r2, [pc, #116]	; (800efb0 <prvHeapInit+0xb0>)
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ef3e:	4b1c      	ldr	r3, [pc, #112]	; (800efb0 <prvHeapInit+0xb0>)
 800ef40:	2200      	movs	r2, #0
 800ef42:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	68ba      	ldr	r2, [r7, #8]
 800ef48:	4413      	add	r3, r2
 800ef4a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ef4c:	2208      	movs	r2, #8
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	1a9b      	subs	r3, r3, r2
 800ef52:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	f023 0307 	bic.w	r3, r3, #7
 800ef5a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	4a15      	ldr	r2, [pc, #84]	; (800efb4 <prvHeapInit+0xb4>)
 800ef60:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ef62:	4b14      	ldr	r3, [pc, #80]	; (800efb4 <prvHeapInit+0xb4>)
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	2200      	movs	r2, #0
 800ef68:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ef6a:	4b12      	ldr	r3, [pc, #72]	; (800efb4 <prvHeapInit+0xb4>)
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	2200      	movs	r2, #0
 800ef70:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ef76:	683b      	ldr	r3, [r7, #0]
 800ef78:	68fa      	ldr	r2, [r7, #12]
 800ef7a:	1ad2      	subs	r2, r2, r3
 800ef7c:	683b      	ldr	r3, [r7, #0]
 800ef7e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ef80:	4b0c      	ldr	r3, [pc, #48]	; (800efb4 <prvHeapInit+0xb4>)
 800ef82:	681a      	ldr	r2, [r3, #0]
 800ef84:	683b      	ldr	r3, [r7, #0]
 800ef86:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ef88:	683b      	ldr	r3, [r7, #0]
 800ef8a:	685b      	ldr	r3, [r3, #4]
 800ef8c:	4a0a      	ldr	r2, [pc, #40]	; (800efb8 <prvHeapInit+0xb8>)
 800ef8e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ef90:	683b      	ldr	r3, [r7, #0]
 800ef92:	685b      	ldr	r3, [r3, #4]
 800ef94:	4a09      	ldr	r2, [pc, #36]	; (800efbc <prvHeapInit+0xbc>)
 800ef96:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ef98:	4b09      	ldr	r3, [pc, #36]	; (800efc0 <prvHeapInit+0xc0>)
 800ef9a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ef9e:	601a      	str	r2, [r3, #0]
}
 800efa0:	bf00      	nop
 800efa2:	3714      	adds	r7, #20
 800efa4:	46bd      	mov	sp, r7
 800efa6:	bc80      	pop	{r7}
 800efa8:	4770      	bx	lr
 800efaa:	bf00      	nop
 800efac:	200004e0 	.word	0x200004e0
 800efb0:	200010e0 	.word	0x200010e0
 800efb4:	200010e8 	.word	0x200010e8
 800efb8:	200010f0 	.word	0x200010f0
 800efbc:	200010ec 	.word	0x200010ec
 800efc0:	200010f4 	.word	0x200010f4

0800efc4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800efc4:	b480      	push	{r7}
 800efc6:	b085      	sub	sp, #20
 800efc8:	af00      	add	r7, sp, #0
 800efca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800efcc:	4b27      	ldr	r3, [pc, #156]	; (800f06c <prvInsertBlockIntoFreeList+0xa8>)
 800efce:	60fb      	str	r3, [r7, #12]
 800efd0:	e002      	b.n	800efd8 <prvInsertBlockIntoFreeList+0x14>
 800efd2:	68fb      	ldr	r3, [r7, #12]
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	60fb      	str	r3, [r7, #12]
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	687a      	ldr	r2, [r7, #4]
 800efde:	429a      	cmp	r2, r3
 800efe0:	d8f7      	bhi.n	800efd2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	685b      	ldr	r3, [r3, #4]
 800efea:	68ba      	ldr	r2, [r7, #8]
 800efec:	4413      	add	r3, r2
 800efee:	687a      	ldr	r2, [r7, #4]
 800eff0:	429a      	cmp	r2, r3
 800eff2:	d108      	bne.n	800f006 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	685a      	ldr	r2, [r3, #4]
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	685b      	ldr	r3, [r3, #4]
 800effc:	441a      	add	r2, r3
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	685b      	ldr	r3, [r3, #4]
 800f00e:	68ba      	ldr	r2, [r7, #8]
 800f010:	441a      	add	r2, r3
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	429a      	cmp	r2, r3
 800f018:	d118      	bne.n	800f04c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	681a      	ldr	r2, [r3, #0]
 800f01e:	4b14      	ldr	r3, [pc, #80]	; (800f070 <prvInsertBlockIntoFreeList+0xac>)
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	429a      	cmp	r2, r3
 800f024:	d00d      	beq.n	800f042 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	685a      	ldr	r2, [r3, #4]
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	685b      	ldr	r3, [r3, #4]
 800f030:	441a      	add	r2, r3
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	681a      	ldr	r2, [r3, #0]
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	601a      	str	r2, [r3, #0]
 800f040:	e008      	b.n	800f054 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f042:	4b0b      	ldr	r3, [pc, #44]	; (800f070 <prvInsertBlockIntoFreeList+0xac>)
 800f044:	681a      	ldr	r2, [r3, #0]
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	601a      	str	r2, [r3, #0]
 800f04a:	e003      	b.n	800f054 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	681a      	ldr	r2, [r3, #0]
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f054:	68fa      	ldr	r2, [r7, #12]
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	429a      	cmp	r2, r3
 800f05a:	d002      	beq.n	800f062 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	687a      	ldr	r2, [r7, #4]
 800f060:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f062:	bf00      	nop
 800f064:	3714      	adds	r7, #20
 800f066:	46bd      	mov	sp, r7
 800f068:	bc80      	pop	{r7}
 800f06a:	4770      	bx	lr
 800f06c:	200010e0 	.word	0x200010e0
 800f070:	200010e8 	.word	0x200010e8

0800f074 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800f074:	f7f1 fa42 	bl	80004fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800f078:	480b      	ldr	r0, [pc, #44]	; (800f0a8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800f07a:	490c      	ldr	r1, [pc, #48]	; (800f0ac <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800f07c:	4a0c      	ldr	r2, [pc, #48]	; (800f0b0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800f07e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800f080:	e002      	b.n	800f088 <LoopCopyDataInit>

0800f082 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800f082:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800f084:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800f086:	3304      	adds	r3, #4

0800f088 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800f088:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800f08a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800f08c:	d3f9      	bcc.n	800f082 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800f08e:	4a09      	ldr	r2, [pc, #36]	; (800f0b4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800f090:	4c09      	ldr	r4, [pc, #36]	; (800f0b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800f092:	2300      	movs	r3, #0
  b LoopFillZerobss
 800f094:	e001      	b.n	800f09a <LoopFillZerobss>

0800f096 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800f096:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800f098:	3204      	adds	r2, #4

0800f09a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800f09a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800f09c:	d3fb      	bcc.n	800f096 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800f09e:	f000 f86d 	bl	800f17c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800f0a2:	f7f1 f86d 	bl	8000180 <main>
  bx lr
 800f0a6:	4770      	bx	lr
  ldr r0, =_sdata
 800f0a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800f0ac:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800f0b0:	0800f308 	.word	0x0800f308
  ldr r2, =_sbss
 800f0b4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 800f0b8:	20001238 	.word	0x20001238

0800f0bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800f0bc:	e7fe      	b.n	800f0bc <ADC1_2_IRQHandler>

0800f0be <memset>:
 800f0be:	4603      	mov	r3, r0
 800f0c0:	4402      	add	r2, r0
 800f0c2:	4293      	cmp	r3, r2
 800f0c4:	d100      	bne.n	800f0c8 <memset+0xa>
 800f0c6:	4770      	bx	lr
 800f0c8:	f803 1b01 	strb.w	r1, [r3], #1
 800f0cc:	e7f9      	b.n	800f0c2 <memset+0x4>
	...

0800f0d0 <_reclaim_reent>:
 800f0d0:	4b29      	ldr	r3, [pc, #164]	; (800f178 <_reclaim_reent+0xa8>)
 800f0d2:	b570      	push	{r4, r5, r6, lr}
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	4604      	mov	r4, r0
 800f0d8:	4283      	cmp	r3, r0
 800f0da:	d04b      	beq.n	800f174 <_reclaim_reent+0xa4>
 800f0dc:	69c3      	ldr	r3, [r0, #28]
 800f0de:	b143      	cbz	r3, 800f0f2 <_reclaim_reent+0x22>
 800f0e0:	68db      	ldr	r3, [r3, #12]
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d144      	bne.n	800f170 <_reclaim_reent+0xa0>
 800f0e6:	69e3      	ldr	r3, [r4, #28]
 800f0e8:	6819      	ldr	r1, [r3, #0]
 800f0ea:	b111      	cbz	r1, 800f0f2 <_reclaim_reent+0x22>
 800f0ec:	4620      	mov	r0, r4
 800f0ee:	f000 f879 	bl	800f1e4 <_free_r>
 800f0f2:	6961      	ldr	r1, [r4, #20]
 800f0f4:	b111      	cbz	r1, 800f0fc <_reclaim_reent+0x2c>
 800f0f6:	4620      	mov	r0, r4
 800f0f8:	f000 f874 	bl	800f1e4 <_free_r>
 800f0fc:	69e1      	ldr	r1, [r4, #28]
 800f0fe:	b111      	cbz	r1, 800f106 <_reclaim_reent+0x36>
 800f100:	4620      	mov	r0, r4
 800f102:	f000 f86f 	bl	800f1e4 <_free_r>
 800f106:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800f108:	b111      	cbz	r1, 800f110 <_reclaim_reent+0x40>
 800f10a:	4620      	mov	r0, r4
 800f10c:	f000 f86a 	bl	800f1e4 <_free_r>
 800f110:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f112:	b111      	cbz	r1, 800f11a <_reclaim_reent+0x4a>
 800f114:	4620      	mov	r0, r4
 800f116:	f000 f865 	bl	800f1e4 <_free_r>
 800f11a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800f11c:	b111      	cbz	r1, 800f124 <_reclaim_reent+0x54>
 800f11e:	4620      	mov	r0, r4
 800f120:	f000 f860 	bl	800f1e4 <_free_r>
 800f124:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800f126:	b111      	cbz	r1, 800f12e <_reclaim_reent+0x5e>
 800f128:	4620      	mov	r0, r4
 800f12a:	f000 f85b 	bl	800f1e4 <_free_r>
 800f12e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800f130:	b111      	cbz	r1, 800f138 <_reclaim_reent+0x68>
 800f132:	4620      	mov	r0, r4
 800f134:	f000 f856 	bl	800f1e4 <_free_r>
 800f138:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800f13a:	b111      	cbz	r1, 800f142 <_reclaim_reent+0x72>
 800f13c:	4620      	mov	r0, r4
 800f13e:	f000 f851 	bl	800f1e4 <_free_r>
 800f142:	6a23      	ldr	r3, [r4, #32]
 800f144:	b1b3      	cbz	r3, 800f174 <_reclaim_reent+0xa4>
 800f146:	4620      	mov	r0, r4
 800f148:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f14c:	4718      	bx	r3
 800f14e:	5949      	ldr	r1, [r1, r5]
 800f150:	b941      	cbnz	r1, 800f164 <_reclaim_reent+0x94>
 800f152:	3504      	adds	r5, #4
 800f154:	69e3      	ldr	r3, [r4, #28]
 800f156:	2d80      	cmp	r5, #128	; 0x80
 800f158:	68d9      	ldr	r1, [r3, #12]
 800f15a:	d1f8      	bne.n	800f14e <_reclaim_reent+0x7e>
 800f15c:	4620      	mov	r0, r4
 800f15e:	f000 f841 	bl	800f1e4 <_free_r>
 800f162:	e7c0      	b.n	800f0e6 <_reclaim_reent+0x16>
 800f164:	680e      	ldr	r6, [r1, #0]
 800f166:	4620      	mov	r0, r4
 800f168:	f000 f83c 	bl	800f1e4 <_free_r>
 800f16c:	4631      	mov	r1, r6
 800f16e:	e7ef      	b.n	800f150 <_reclaim_reent+0x80>
 800f170:	2500      	movs	r5, #0
 800f172:	e7ef      	b.n	800f154 <_reclaim_reent+0x84>
 800f174:	bd70      	pop	{r4, r5, r6, pc}
 800f176:	bf00      	nop
 800f178:	2000005c 	.word	0x2000005c

0800f17c <__libc_init_array>:
 800f17c:	b570      	push	{r4, r5, r6, lr}
 800f17e:	2600      	movs	r6, #0
 800f180:	4d0c      	ldr	r5, [pc, #48]	; (800f1b4 <__libc_init_array+0x38>)
 800f182:	4c0d      	ldr	r4, [pc, #52]	; (800f1b8 <__libc_init_array+0x3c>)
 800f184:	1b64      	subs	r4, r4, r5
 800f186:	10a4      	asrs	r4, r4, #2
 800f188:	42a6      	cmp	r6, r4
 800f18a:	d109      	bne.n	800f1a0 <__libc_init_array+0x24>
 800f18c:	f000 f87e 	bl	800f28c <_init>
 800f190:	2600      	movs	r6, #0
 800f192:	4d0a      	ldr	r5, [pc, #40]	; (800f1bc <__libc_init_array+0x40>)
 800f194:	4c0a      	ldr	r4, [pc, #40]	; (800f1c0 <__libc_init_array+0x44>)
 800f196:	1b64      	subs	r4, r4, r5
 800f198:	10a4      	asrs	r4, r4, #2
 800f19a:	42a6      	cmp	r6, r4
 800f19c:	d105      	bne.n	800f1aa <__libc_init_array+0x2e>
 800f19e:	bd70      	pop	{r4, r5, r6, pc}
 800f1a0:	f855 3b04 	ldr.w	r3, [r5], #4
 800f1a4:	4798      	blx	r3
 800f1a6:	3601      	adds	r6, #1
 800f1a8:	e7ee      	b.n	800f188 <__libc_init_array+0xc>
 800f1aa:	f855 3b04 	ldr.w	r3, [r5], #4
 800f1ae:	4798      	blx	r3
 800f1b0:	3601      	adds	r6, #1
 800f1b2:	e7f2      	b.n	800f19a <__libc_init_array+0x1e>
 800f1b4:	0800f300 	.word	0x0800f300
 800f1b8:	0800f300 	.word	0x0800f300
 800f1bc:	0800f300 	.word	0x0800f300
 800f1c0:	0800f304 	.word	0x0800f304

0800f1c4 <__retarget_lock_acquire_recursive>:
 800f1c4:	4770      	bx	lr

0800f1c6 <__retarget_lock_release_recursive>:
 800f1c6:	4770      	bx	lr

0800f1c8 <memcpy>:
 800f1c8:	440a      	add	r2, r1
 800f1ca:	4291      	cmp	r1, r2
 800f1cc:	f100 33ff 	add.w	r3, r0, #4294967295
 800f1d0:	d100      	bne.n	800f1d4 <memcpy+0xc>
 800f1d2:	4770      	bx	lr
 800f1d4:	b510      	push	{r4, lr}
 800f1d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f1da:	4291      	cmp	r1, r2
 800f1dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f1e0:	d1f9      	bne.n	800f1d6 <memcpy+0xe>
 800f1e2:	bd10      	pop	{r4, pc}

0800f1e4 <_free_r>:
 800f1e4:	b538      	push	{r3, r4, r5, lr}
 800f1e6:	4605      	mov	r5, r0
 800f1e8:	2900      	cmp	r1, #0
 800f1ea:	d040      	beq.n	800f26e <_free_r+0x8a>
 800f1ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f1f0:	1f0c      	subs	r4, r1, #4
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	bfb8      	it	lt
 800f1f6:	18e4      	addlt	r4, r4, r3
 800f1f8:	f000 f83c 	bl	800f274 <__malloc_lock>
 800f1fc:	4a1c      	ldr	r2, [pc, #112]	; (800f270 <_free_r+0x8c>)
 800f1fe:	6813      	ldr	r3, [r2, #0]
 800f200:	b933      	cbnz	r3, 800f210 <_free_r+0x2c>
 800f202:	6063      	str	r3, [r4, #4]
 800f204:	6014      	str	r4, [r2, #0]
 800f206:	4628      	mov	r0, r5
 800f208:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f20c:	f000 b838 	b.w	800f280 <__malloc_unlock>
 800f210:	42a3      	cmp	r3, r4
 800f212:	d908      	bls.n	800f226 <_free_r+0x42>
 800f214:	6820      	ldr	r0, [r4, #0]
 800f216:	1821      	adds	r1, r4, r0
 800f218:	428b      	cmp	r3, r1
 800f21a:	bf01      	itttt	eq
 800f21c:	6819      	ldreq	r1, [r3, #0]
 800f21e:	685b      	ldreq	r3, [r3, #4]
 800f220:	1809      	addeq	r1, r1, r0
 800f222:	6021      	streq	r1, [r4, #0]
 800f224:	e7ed      	b.n	800f202 <_free_r+0x1e>
 800f226:	461a      	mov	r2, r3
 800f228:	685b      	ldr	r3, [r3, #4]
 800f22a:	b10b      	cbz	r3, 800f230 <_free_r+0x4c>
 800f22c:	42a3      	cmp	r3, r4
 800f22e:	d9fa      	bls.n	800f226 <_free_r+0x42>
 800f230:	6811      	ldr	r1, [r2, #0]
 800f232:	1850      	adds	r0, r2, r1
 800f234:	42a0      	cmp	r0, r4
 800f236:	d10b      	bne.n	800f250 <_free_r+0x6c>
 800f238:	6820      	ldr	r0, [r4, #0]
 800f23a:	4401      	add	r1, r0
 800f23c:	1850      	adds	r0, r2, r1
 800f23e:	4283      	cmp	r3, r0
 800f240:	6011      	str	r1, [r2, #0]
 800f242:	d1e0      	bne.n	800f206 <_free_r+0x22>
 800f244:	6818      	ldr	r0, [r3, #0]
 800f246:	685b      	ldr	r3, [r3, #4]
 800f248:	4408      	add	r0, r1
 800f24a:	6010      	str	r0, [r2, #0]
 800f24c:	6053      	str	r3, [r2, #4]
 800f24e:	e7da      	b.n	800f206 <_free_r+0x22>
 800f250:	d902      	bls.n	800f258 <_free_r+0x74>
 800f252:	230c      	movs	r3, #12
 800f254:	602b      	str	r3, [r5, #0]
 800f256:	e7d6      	b.n	800f206 <_free_r+0x22>
 800f258:	6820      	ldr	r0, [r4, #0]
 800f25a:	1821      	adds	r1, r4, r0
 800f25c:	428b      	cmp	r3, r1
 800f25e:	bf01      	itttt	eq
 800f260:	6819      	ldreq	r1, [r3, #0]
 800f262:	685b      	ldreq	r3, [r3, #4]
 800f264:	1809      	addeq	r1, r1, r0
 800f266:	6021      	streq	r1, [r4, #0]
 800f268:	6063      	str	r3, [r4, #4]
 800f26a:	6054      	str	r4, [r2, #4]
 800f26c:	e7cb      	b.n	800f206 <_free_r+0x22>
 800f26e:	bd38      	pop	{r3, r4, r5, pc}
 800f270:	20001234 	.word	0x20001234

0800f274 <__malloc_lock>:
 800f274:	4801      	ldr	r0, [pc, #4]	; (800f27c <__malloc_lock+0x8>)
 800f276:	f7ff bfa5 	b.w	800f1c4 <__retarget_lock_acquire_recursive>
 800f27a:	bf00      	nop
 800f27c:	20001230 	.word	0x20001230

0800f280 <__malloc_unlock>:
 800f280:	4801      	ldr	r0, [pc, #4]	; (800f288 <__malloc_unlock+0x8>)
 800f282:	f7ff bfa0 	b.w	800f1c6 <__retarget_lock_release_recursive>
 800f286:	bf00      	nop
 800f288:	20001230 	.word	0x20001230

0800f28c <_init>:
 800f28c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f28e:	bf00      	nop
 800f290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f292:	bc08      	pop	{r3}
 800f294:	469e      	mov	lr, r3
 800f296:	4770      	bx	lr

0800f298 <_fini>:
 800f298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f29a:	bf00      	nop
 800f29c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f29e:	bc08      	pop	{r3}
 800f2a0:	469e      	mov	lr, r3
 800f2a2:	4770      	bx	lr
