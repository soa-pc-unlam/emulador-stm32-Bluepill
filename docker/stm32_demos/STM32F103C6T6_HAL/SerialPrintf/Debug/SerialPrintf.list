
SerialPrintf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ec8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08001fd4  08001fd4  00011fd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002054  08002054  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08002054  08002054  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002054  08002054  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002054  08002054  00012054  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002058  08002058  00012058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  0800205c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  2000005c  080020b8  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000210  080020b8  00020210  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   000063b2  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000012f7  00000000  00000000  0002647a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000610  00000000  00000000  00027778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000499  00000000  00000000  00027d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000160a5  00000000  00000000  00028221  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000078a2  00000000  00000000  0003e2c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000801c0  00000000  00000000  00045b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001c70  00000000  00000000  000c5d28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000c7998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001fbc 	.word	0x08001fbc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08001fbc 	.word	0x08001fbc

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b08a      	sub	sp, #40	; 0x28
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	uint8_t message[35] = {'\0'};
 8000152:	2300      	movs	r3, #0
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	f107 0308 	add.w	r3, r7, #8
 800015a:	221f      	movs	r2, #31
 800015c:	2100      	movs	r1, #0
 800015e:	4618      	mov	r0, r3
 8000160:	f001 fa9a 	bl	8001698 <memset>
	uint8_t num = 0;
 8000164:	2300      	movs	r3, #0
 8000166:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800016a:	f000 f9a7 	bl	80004bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800016e:	f000 f81f 	bl	80001b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000172:	f000 f883 	bl	800027c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000176:	f000 f857 	bl	8000228 <MX_USART1_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	sprintf(message, "Welcome to lab! Counting = %d\r\n", num);
 800017a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800017e:	1d3b      	adds	r3, r7, #4
 8000180:	4909      	ldr	r1, [pc, #36]	; (80001a8 <main+0x5c>)
 8000182:	4618      	mov	r0, r3
 8000184:	f001 fa68 	bl	8001658 <siprintf>
	HAL_UART_Transmit(&huart1, message, sizeof(message), 100);
 8000188:	1d39      	adds	r1, r7, #4
 800018a:	2364      	movs	r3, #100	; 0x64
 800018c:	2223      	movs	r2, #35	; 0x23
 800018e:	4807      	ldr	r0, [pc, #28]	; (80001ac <main+0x60>)
 8000190:	f001 f8e2 	bl	8001358 <HAL_UART_Transmit>
	HAL_Delay(500);
 8000194:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000198:	f000 f9f2 	bl	8000580 <HAL_Delay>
	num++;
 800019c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80001a0:	3301      	adds	r3, #1
 80001a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  {
 80001a6:	e7e8      	b.n	800017a <main+0x2e>
 80001a8:	08001fd4 	.word	0x08001fd4
 80001ac:	20000078 	.word	0x20000078

080001b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b090      	sub	sp, #64	; 0x40
 80001b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001b6:	f107 0318 	add.w	r3, r7, #24
 80001ba:	2228      	movs	r2, #40	; 0x28
 80001bc:	2100      	movs	r1, #0
 80001be:	4618      	mov	r0, r3
 80001c0:	f001 fa6a 	bl	8001698 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001c4:	1d3b      	adds	r3, r7, #4
 80001c6:	2200      	movs	r2, #0
 80001c8:	601a      	str	r2, [r3, #0]
 80001ca:	605a      	str	r2, [r3, #4]
 80001cc:	609a      	str	r2, [r3, #8]
 80001ce:	60da      	str	r2, [r3, #12]
 80001d0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001d2:	2302      	movs	r3, #2
 80001d4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001d6:	2301      	movs	r3, #1
 80001d8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001da:	2310      	movs	r3, #16
 80001dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001de:	2300      	movs	r3, #0
 80001e0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001e2:	f107 0318 	add.w	r3, r7, #24
 80001e6:	4618      	mov	r0, r3
 80001e8:	f000 fc56 	bl	8000a98 <HAL_RCC_OscConfig>
 80001ec:	4603      	mov	r3, r0
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d001      	beq.n	80001f6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80001f2:	f000 f865 	bl	80002c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001f6:	230f      	movs	r3, #15
 80001f8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80001fa:	2300      	movs	r3, #0
 80001fc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001fe:	2300      	movs	r3, #0
 8000200:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000202:	2300      	movs	r3, #0
 8000204:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000206:	2300      	movs	r3, #0
 8000208:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800020a:	1d3b      	adds	r3, r7, #4
 800020c:	2100      	movs	r1, #0
 800020e:	4618      	mov	r0, r3
 8000210:	f000 fec4 	bl	8000f9c <HAL_RCC_ClockConfig>
 8000214:	4603      	mov	r3, r0
 8000216:	2b00      	cmp	r3, #0
 8000218:	d001      	beq.n	800021e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800021a:	f000 f851 	bl	80002c0 <Error_Handler>
  }
}
 800021e:	bf00      	nop
 8000220:	3740      	adds	r7, #64	; 0x40
 8000222:	46bd      	mov	sp, r7
 8000224:	bd80      	pop	{r7, pc}
	...

08000228 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800022c:	4b11      	ldr	r3, [pc, #68]	; (8000274 <MX_USART1_UART_Init+0x4c>)
 800022e:	4a12      	ldr	r2, [pc, #72]	; (8000278 <MX_USART1_UART_Init+0x50>)
 8000230:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000232:	4b10      	ldr	r3, [pc, #64]	; (8000274 <MX_USART1_UART_Init+0x4c>)
 8000234:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000238:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800023a:	4b0e      	ldr	r3, [pc, #56]	; (8000274 <MX_USART1_UART_Init+0x4c>)
 800023c:	2200      	movs	r2, #0
 800023e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000240:	4b0c      	ldr	r3, [pc, #48]	; (8000274 <MX_USART1_UART_Init+0x4c>)
 8000242:	2200      	movs	r2, #0
 8000244:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000246:	4b0b      	ldr	r3, [pc, #44]	; (8000274 <MX_USART1_UART_Init+0x4c>)
 8000248:	2200      	movs	r2, #0
 800024a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800024c:	4b09      	ldr	r3, [pc, #36]	; (8000274 <MX_USART1_UART_Init+0x4c>)
 800024e:	220c      	movs	r2, #12
 8000250:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000252:	4b08      	ldr	r3, [pc, #32]	; (8000274 <MX_USART1_UART_Init+0x4c>)
 8000254:	2200      	movs	r2, #0
 8000256:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000258:	4b06      	ldr	r3, [pc, #24]	; (8000274 <MX_USART1_UART_Init+0x4c>)
 800025a:	2200      	movs	r2, #0
 800025c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800025e:	4805      	ldr	r0, [pc, #20]	; (8000274 <MX_USART1_UART_Init+0x4c>)
 8000260:	f001 f82a 	bl	80012b8 <HAL_UART_Init>
 8000264:	4603      	mov	r3, r0
 8000266:	2b00      	cmp	r3, #0
 8000268:	d001      	beq.n	800026e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800026a:	f000 f829 	bl	80002c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800026e:	bf00      	nop
 8000270:	bd80      	pop	{r7, pc}
 8000272:	bf00      	nop
 8000274:	20000078 	.word	0x20000078
 8000278:	40013800 	.word	0x40013800

0800027c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800027c:	b480      	push	{r7}
 800027e:	b083      	sub	sp, #12
 8000280:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000282:	4b0e      	ldr	r3, [pc, #56]	; (80002bc <MX_GPIO_Init+0x40>)
 8000284:	699b      	ldr	r3, [r3, #24]
 8000286:	4a0d      	ldr	r2, [pc, #52]	; (80002bc <MX_GPIO_Init+0x40>)
 8000288:	f043 0320 	orr.w	r3, r3, #32
 800028c:	6193      	str	r3, [r2, #24]
 800028e:	4b0b      	ldr	r3, [pc, #44]	; (80002bc <MX_GPIO_Init+0x40>)
 8000290:	699b      	ldr	r3, [r3, #24]
 8000292:	f003 0320 	and.w	r3, r3, #32
 8000296:	607b      	str	r3, [r7, #4]
 8000298:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800029a:	4b08      	ldr	r3, [pc, #32]	; (80002bc <MX_GPIO_Init+0x40>)
 800029c:	699b      	ldr	r3, [r3, #24]
 800029e:	4a07      	ldr	r2, [pc, #28]	; (80002bc <MX_GPIO_Init+0x40>)
 80002a0:	f043 0304 	orr.w	r3, r3, #4
 80002a4:	6193      	str	r3, [r2, #24]
 80002a6:	4b05      	ldr	r3, [pc, #20]	; (80002bc <MX_GPIO_Init+0x40>)
 80002a8:	699b      	ldr	r3, [r3, #24]
 80002aa:	f003 0304 	and.w	r3, r3, #4
 80002ae:	603b      	str	r3, [r7, #0]
 80002b0:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80002b2:	bf00      	nop
 80002b4:	370c      	adds	r7, #12
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bc80      	pop	{r7}
 80002ba:	4770      	bx	lr
 80002bc:	40021000 	.word	0x40021000

080002c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002c0:	b480      	push	{r7}
 80002c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002c4:	b672      	cpsid	i
}
 80002c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002c8:	e7fe      	b.n	80002c8 <Error_Handler+0x8>
	...

080002cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002cc:	b480      	push	{r7}
 80002ce:	b083      	sub	sp, #12
 80002d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80002d2:	4b0e      	ldr	r3, [pc, #56]	; (800030c <HAL_MspInit+0x40>)
 80002d4:	699b      	ldr	r3, [r3, #24]
 80002d6:	4a0d      	ldr	r2, [pc, #52]	; (800030c <HAL_MspInit+0x40>)
 80002d8:	f043 0301 	orr.w	r3, r3, #1
 80002dc:	6193      	str	r3, [r2, #24]
 80002de:	4b0b      	ldr	r3, [pc, #44]	; (800030c <HAL_MspInit+0x40>)
 80002e0:	699b      	ldr	r3, [r3, #24]
 80002e2:	f003 0301 	and.w	r3, r3, #1
 80002e6:	607b      	str	r3, [r7, #4]
 80002e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80002ea:	4b08      	ldr	r3, [pc, #32]	; (800030c <HAL_MspInit+0x40>)
 80002ec:	69db      	ldr	r3, [r3, #28]
 80002ee:	4a07      	ldr	r2, [pc, #28]	; (800030c <HAL_MspInit+0x40>)
 80002f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002f4:	61d3      	str	r3, [r2, #28]
 80002f6:	4b05      	ldr	r3, [pc, #20]	; (800030c <HAL_MspInit+0x40>)
 80002f8:	69db      	ldr	r3, [r3, #28]
 80002fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80002fe:	603b      	str	r3, [r7, #0]
 8000300:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000302:	bf00      	nop
 8000304:	370c      	adds	r7, #12
 8000306:	46bd      	mov	sp, r7
 8000308:	bc80      	pop	{r7}
 800030a:	4770      	bx	lr
 800030c:	40021000 	.word	0x40021000

08000310 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b088      	sub	sp, #32
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000318:	f107 0310 	add.w	r3, r7, #16
 800031c:	2200      	movs	r2, #0
 800031e:	601a      	str	r2, [r3, #0]
 8000320:	605a      	str	r2, [r3, #4]
 8000322:	609a      	str	r2, [r3, #8]
 8000324:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	4a1c      	ldr	r2, [pc, #112]	; (800039c <HAL_UART_MspInit+0x8c>)
 800032c:	4293      	cmp	r3, r2
 800032e:	d131      	bne.n	8000394 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000330:	4b1b      	ldr	r3, [pc, #108]	; (80003a0 <HAL_UART_MspInit+0x90>)
 8000332:	699b      	ldr	r3, [r3, #24]
 8000334:	4a1a      	ldr	r2, [pc, #104]	; (80003a0 <HAL_UART_MspInit+0x90>)
 8000336:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800033a:	6193      	str	r3, [r2, #24]
 800033c:	4b18      	ldr	r3, [pc, #96]	; (80003a0 <HAL_UART_MspInit+0x90>)
 800033e:	699b      	ldr	r3, [r3, #24]
 8000340:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000344:	60fb      	str	r3, [r7, #12]
 8000346:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000348:	4b15      	ldr	r3, [pc, #84]	; (80003a0 <HAL_UART_MspInit+0x90>)
 800034a:	699b      	ldr	r3, [r3, #24]
 800034c:	4a14      	ldr	r2, [pc, #80]	; (80003a0 <HAL_UART_MspInit+0x90>)
 800034e:	f043 0304 	orr.w	r3, r3, #4
 8000352:	6193      	str	r3, [r2, #24]
 8000354:	4b12      	ldr	r3, [pc, #72]	; (80003a0 <HAL_UART_MspInit+0x90>)
 8000356:	699b      	ldr	r3, [r3, #24]
 8000358:	f003 0304 	and.w	r3, r3, #4
 800035c:	60bb      	str	r3, [r7, #8]
 800035e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000360:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000364:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000366:	2302      	movs	r3, #2
 8000368:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800036a:	2303      	movs	r3, #3
 800036c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800036e:	f107 0310 	add.w	r3, r7, #16
 8000372:	4619      	mov	r1, r3
 8000374:	480b      	ldr	r0, [pc, #44]	; (80003a4 <HAL_UART_MspInit+0x94>)
 8000376:	f000 fa0b 	bl	8000790 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800037a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800037e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000380:	2300      	movs	r3, #0
 8000382:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000384:	2300      	movs	r3, #0
 8000386:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000388:	f107 0310 	add.w	r3, r7, #16
 800038c:	4619      	mov	r1, r3
 800038e:	4805      	ldr	r0, [pc, #20]	; (80003a4 <HAL_UART_MspInit+0x94>)
 8000390:	f000 f9fe 	bl	8000790 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000394:	bf00      	nop
 8000396:	3720      	adds	r7, #32
 8000398:	46bd      	mov	sp, r7
 800039a:	bd80      	pop	{r7, pc}
 800039c:	40013800 	.word	0x40013800
 80003a0:	40021000 	.word	0x40021000
 80003a4:	40010800 	.word	0x40010800

080003a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003a8:	b480      	push	{r7}
 80003aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003ac:	e7fe      	b.n	80003ac <NMI_Handler+0x4>

080003ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003ae:	b480      	push	{r7}
 80003b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003b2:	e7fe      	b.n	80003b2 <HardFault_Handler+0x4>

080003b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003b4:	b480      	push	{r7}
 80003b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003b8:	e7fe      	b.n	80003b8 <MemManage_Handler+0x4>

080003ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003ba:	b480      	push	{r7}
 80003bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003be:	e7fe      	b.n	80003be <BusFault_Handler+0x4>

080003c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003c0:	b480      	push	{r7}
 80003c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003c4:	e7fe      	b.n	80003c4 <UsageFault_Handler+0x4>

080003c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003c6:	b480      	push	{r7}
 80003c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003ca:	bf00      	nop
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bc80      	pop	{r7}
 80003d0:	4770      	bx	lr

080003d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003d2:	b480      	push	{r7}
 80003d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003d6:	bf00      	nop
 80003d8:	46bd      	mov	sp, r7
 80003da:	bc80      	pop	{r7}
 80003dc:	4770      	bx	lr

080003de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003de:	b480      	push	{r7}
 80003e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003e2:	bf00      	nop
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bc80      	pop	{r7}
 80003e8:	4770      	bx	lr

080003ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003ea:	b580      	push	{r7, lr}
 80003ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003ee:	f000 f8ab 	bl	8000548 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003f2:	bf00      	nop
 80003f4:	bd80      	pop	{r7, pc}
	...

080003f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b086      	sub	sp, #24
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000400:	4a14      	ldr	r2, [pc, #80]	; (8000454 <_sbrk+0x5c>)
 8000402:	4b15      	ldr	r3, [pc, #84]	; (8000458 <_sbrk+0x60>)
 8000404:	1ad3      	subs	r3, r2, r3
 8000406:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000408:	697b      	ldr	r3, [r7, #20]
 800040a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800040c:	4b13      	ldr	r3, [pc, #76]	; (800045c <_sbrk+0x64>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	2b00      	cmp	r3, #0
 8000412:	d102      	bne.n	800041a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000414:	4b11      	ldr	r3, [pc, #68]	; (800045c <_sbrk+0x64>)
 8000416:	4a12      	ldr	r2, [pc, #72]	; (8000460 <_sbrk+0x68>)
 8000418:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800041a:	4b10      	ldr	r3, [pc, #64]	; (800045c <_sbrk+0x64>)
 800041c:	681a      	ldr	r2, [r3, #0]
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	4413      	add	r3, r2
 8000422:	693a      	ldr	r2, [r7, #16]
 8000424:	429a      	cmp	r2, r3
 8000426:	d207      	bcs.n	8000438 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000428:	f001 f93e 	bl	80016a8 <__errno>
 800042c:	4603      	mov	r3, r0
 800042e:	220c      	movs	r2, #12
 8000430:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000432:	f04f 33ff 	mov.w	r3, #4294967295
 8000436:	e009      	b.n	800044c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000438:	4b08      	ldr	r3, [pc, #32]	; (800045c <_sbrk+0x64>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800043e:	4b07      	ldr	r3, [pc, #28]	; (800045c <_sbrk+0x64>)
 8000440:	681a      	ldr	r2, [r3, #0]
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	4413      	add	r3, r2
 8000446:	4a05      	ldr	r2, [pc, #20]	; (800045c <_sbrk+0x64>)
 8000448:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800044a:	68fb      	ldr	r3, [r7, #12]
}
 800044c:	4618      	mov	r0, r3
 800044e:	3718      	adds	r7, #24
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}
 8000454:	20005000 	.word	0x20005000
 8000458:	00000400 	.word	0x00000400
 800045c:	200000c0 	.word	0x200000c0
 8000460:	20000210 	.word	0x20000210

08000464 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000464:	b480      	push	{r7}
 8000466:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000468:	bf00      	nop
 800046a:	46bd      	mov	sp, r7
 800046c:	bc80      	pop	{r7}
 800046e:	4770      	bx	lr

08000470 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000470:	f7ff fff8 	bl	8000464 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000474:	480b      	ldr	r0, [pc, #44]	; (80004a4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000476:	490c      	ldr	r1, [pc, #48]	; (80004a8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000478:	4a0c      	ldr	r2, [pc, #48]	; (80004ac <LoopFillZerobss+0x16>)
  movs r3, #0
 800047a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800047c:	e002      	b.n	8000484 <LoopCopyDataInit>

0800047e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800047e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000480:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000482:	3304      	adds	r3, #4

08000484 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000484:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000486:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000488:	d3f9      	bcc.n	800047e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800048a:	4a09      	ldr	r2, [pc, #36]	; (80004b0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800048c:	4c09      	ldr	r4, [pc, #36]	; (80004b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800048e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000490:	e001      	b.n	8000496 <LoopFillZerobss>

08000492 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000492:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000494:	3204      	adds	r2, #4

08000496 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000496:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000498:	d3fb      	bcc.n	8000492 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800049a:	f001 f90b 	bl	80016b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800049e:	f7ff fe55 	bl	800014c <main>
  bx lr
 80004a2:	4770      	bx	lr
  ldr r0, =_sdata
 80004a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004a8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80004ac:	0800205c 	.word	0x0800205c
  ldr r2, =_sbss
 80004b0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80004b4:	20000210 	.word	0x20000210

080004b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004b8:	e7fe      	b.n	80004b8 <ADC1_2_IRQHandler>
	...

080004bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004c0:	4b08      	ldr	r3, [pc, #32]	; (80004e4 <HAL_Init+0x28>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	4a07      	ldr	r2, [pc, #28]	; (80004e4 <HAL_Init+0x28>)
 80004c6:	f043 0310 	orr.w	r3, r3, #16
 80004ca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004cc:	2003      	movs	r0, #3
 80004ce:	f000 f92b 	bl	8000728 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004d2:	200f      	movs	r0, #15
 80004d4:	f000 f808 	bl	80004e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004d8:	f7ff fef8 	bl	80002cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80004dc:	2300      	movs	r3, #0
}
 80004de:	4618      	mov	r0, r3
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	40022000 	.word	0x40022000

080004e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004f0:	4b12      	ldr	r3, [pc, #72]	; (800053c <HAL_InitTick+0x54>)
 80004f2:	681a      	ldr	r2, [r3, #0]
 80004f4:	4b12      	ldr	r3, [pc, #72]	; (8000540 <HAL_InitTick+0x58>)
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	4619      	mov	r1, r3
 80004fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000502:	fbb2 f3f3 	udiv	r3, r2, r3
 8000506:	4618      	mov	r0, r3
 8000508:	f000 f935 	bl	8000776 <HAL_SYSTICK_Config>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d001      	beq.n	8000516 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000512:	2301      	movs	r3, #1
 8000514:	e00e      	b.n	8000534 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	2b0f      	cmp	r3, #15
 800051a:	d80a      	bhi.n	8000532 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800051c:	2200      	movs	r2, #0
 800051e:	6879      	ldr	r1, [r7, #4]
 8000520:	f04f 30ff 	mov.w	r0, #4294967295
 8000524:	f000 f90b 	bl	800073e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000528:	4a06      	ldr	r2, [pc, #24]	; (8000544 <HAL_InitTick+0x5c>)
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800052e:	2300      	movs	r3, #0
 8000530:	e000      	b.n	8000534 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000532:	2301      	movs	r3, #1
}
 8000534:	4618      	mov	r0, r3
 8000536:	3708      	adds	r7, #8
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}
 800053c:	20000000 	.word	0x20000000
 8000540:	20000008 	.word	0x20000008
 8000544:	20000004 	.word	0x20000004

08000548 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800054c:	4b05      	ldr	r3, [pc, #20]	; (8000564 <HAL_IncTick+0x1c>)
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	461a      	mov	r2, r3
 8000552:	4b05      	ldr	r3, [pc, #20]	; (8000568 <HAL_IncTick+0x20>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	4413      	add	r3, r2
 8000558:	4a03      	ldr	r2, [pc, #12]	; (8000568 <HAL_IncTick+0x20>)
 800055a:	6013      	str	r3, [r2, #0]
}
 800055c:	bf00      	nop
 800055e:	46bd      	mov	sp, r7
 8000560:	bc80      	pop	{r7}
 8000562:	4770      	bx	lr
 8000564:	20000008 	.word	0x20000008
 8000568:	200000c4 	.word	0x200000c4

0800056c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  return uwTick;
 8000570:	4b02      	ldr	r3, [pc, #8]	; (800057c <HAL_GetTick+0x10>)
 8000572:	681b      	ldr	r3, [r3, #0]
}
 8000574:	4618      	mov	r0, r3
 8000576:	46bd      	mov	sp, r7
 8000578:	bc80      	pop	{r7}
 800057a:	4770      	bx	lr
 800057c:	200000c4 	.word	0x200000c4

08000580 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000588:	f7ff fff0 	bl	800056c <HAL_GetTick>
 800058c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000598:	d005      	beq.n	80005a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800059a:	4b0a      	ldr	r3, [pc, #40]	; (80005c4 <HAL_Delay+0x44>)
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	461a      	mov	r2, r3
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	4413      	add	r3, r2
 80005a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80005a6:	bf00      	nop
 80005a8:	f7ff ffe0 	bl	800056c <HAL_GetTick>
 80005ac:	4602      	mov	r2, r0
 80005ae:	68bb      	ldr	r3, [r7, #8]
 80005b0:	1ad3      	subs	r3, r2, r3
 80005b2:	68fa      	ldr	r2, [r7, #12]
 80005b4:	429a      	cmp	r2, r3
 80005b6:	d8f7      	bhi.n	80005a8 <HAL_Delay+0x28>
  {
  }
}
 80005b8:	bf00      	nop
 80005ba:	bf00      	nop
 80005bc:	3710      	adds	r7, #16
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	20000008 	.word	0x20000008

080005c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b085      	sub	sp, #20
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	f003 0307 	and.w	r3, r3, #7
 80005d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005d8:	4b0c      	ldr	r3, [pc, #48]	; (800060c <__NVIC_SetPriorityGrouping+0x44>)
 80005da:	68db      	ldr	r3, [r3, #12]
 80005dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005de:	68ba      	ldr	r2, [r7, #8]
 80005e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005e4:	4013      	ands	r3, r2
 80005e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005ec:	68bb      	ldr	r3, [r7, #8]
 80005ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005fa:	4a04      	ldr	r2, [pc, #16]	; (800060c <__NVIC_SetPriorityGrouping+0x44>)
 80005fc:	68bb      	ldr	r3, [r7, #8]
 80005fe:	60d3      	str	r3, [r2, #12]
}
 8000600:	bf00      	nop
 8000602:	3714      	adds	r7, #20
 8000604:	46bd      	mov	sp, r7
 8000606:	bc80      	pop	{r7}
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	e000ed00 	.word	0xe000ed00

08000610 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000614:	4b04      	ldr	r3, [pc, #16]	; (8000628 <__NVIC_GetPriorityGrouping+0x18>)
 8000616:	68db      	ldr	r3, [r3, #12]
 8000618:	0a1b      	lsrs	r3, r3, #8
 800061a:	f003 0307 	and.w	r3, r3, #7
}
 800061e:	4618      	mov	r0, r3
 8000620:	46bd      	mov	sp, r7
 8000622:	bc80      	pop	{r7}
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	e000ed00 	.word	0xe000ed00

0800062c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800062c:	b480      	push	{r7}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
 8000632:	4603      	mov	r3, r0
 8000634:	6039      	str	r1, [r7, #0]
 8000636:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000638:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800063c:	2b00      	cmp	r3, #0
 800063e:	db0a      	blt.n	8000656 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000640:	683b      	ldr	r3, [r7, #0]
 8000642:	b2da      	uxtb	r2, r3
 8000644:	490c      	ldr	r1, [pc, #48]	; (8000678 <__NVIC_SetPriority+0x4c>)
 8000646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800064a:	0112      	lsls	r2, r2, #4
 800064c:	b2d2      	uxtb	r2, r2
 800064e:	440b      	add	r3, r1
 8000650:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000654:	e00a      	b.n	800066c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	b2da      	uxtb	r2, r3
 800065a:	4908      	ldr	r1, [pc, #32]	; (800067c <__NVIC_SetPriority+0x50>)
 800065c:	79fb      	ldrb	r3, [r7, #7]
 800065e:	f003 030f 	and.w	r3, r3, #15
 8000662:	3b04      	subs	r3, #4
 8000664:	0112      	lsls	r2, r2, #4
 8000666:	b2d2      	uxtb	r2, r2
 8000668:	440b      	add	r3, r1
 800066a:	761a      	strb	r2, [r3, #24]
}
 800066c:	bf00      	nop
 800066e:	370c      	adds	r7, #12
 8000670:	46bd      	mov	sp, r7
 8000672:	bc80      	pop	{r7}
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	e000e100 	.word	0xe000e100
 800067c:	e000ed00 	.word	0xe000ed00

08000680 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000680:	b480      	push	{r7}
 8000682:	b089      	sub	sp, #36	; 0x24
 8000684:	af00      	add	r7, sp, #0
 8000686:	60f8      	str	r0, [r7, #12]
 8000688:	60b9      	str	r1, [r7, #8]
 800068a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	f003 0307 	and.w	r3, r3, #7
 8000692:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000694:	69fb      	ldr	r3, [r7, #28]
 8000696:	f1c3 0307 	rsb	r3, r3, #7
 800069a:	2b04      	cmp	r3, #4
 800069c:	bf28      	it	cs
 800069e:	2304      	movcs	r3, #4
 80006a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006a2:	69fb      	ldr	r3, [r7, #28]
 80006a4:	3304      	adds	r3, #4
 80006a6:	2b06      	cmp	r3, #6
 80006a8:	d902      	bls.n	80006b0 <NVIC_EncodePriority+0x30>
 80006aa:	69fb      	ldr	r3, [r7, #28]
 80006ac:	3b03      	subs	r3, #3
 80006ae:	e000      	b.n	80006b2 <NVIC_EncodePriority+0x32>
 80006b0:	2300      	movs	r3, #0
 80006b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006b4:	f04f 32ff 	mov.w	r2, #4294967295
 80006b8:	69bb      	ldr	r3, [r7, #24]
 80006ba:	fa02 f303 	lsl.w	r3, r2, r3
 80006be:	43da      	mvns	r2, r3
 80006c0:	68bb      	ldr	r3, [r7, #8]
 80006c2:	401a      	ands	r2, r3
 80006c4:	697b      	ldr	r3, [r7, #20]
 80006c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006c8:	f04f 31ff 	mov.w	r1, #4294967295
 80006cc:	697b      	ldr	r3, [r7, #20]
 80006ce:	fa01 f303 	lsl.w	r3, r1, r3
 80006d2:	43d9      	mvns	r1, r3
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006d8:	4313      	orrs	r3, r2
         );
}
 80006da:	4618      	mov	r0, r3
 80006dc:	3724      	adds	r7, #36	; 0x24
 80006de:	46bd      	mov	sp, r7
 80006e0:	bc80      	pop	{r7}
 80006e2:	4770      	bx	lr

080006e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	3b01      	subs	r3, #1
 80006f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80006f4:	d301      	bcc.n	80006fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006f6:	2301      	movs	r3, #1
 80006f8:	e00f      	b.n	800071a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006fa:	4a0a      	ldr	r2, [pc, #40]	; (8000724 <SysTick_Config+0x40>)
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	3b01      	subs	r3, #1
 8000700:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000702:	210f      	movs	r1, #15
 8000704:	f04f 30ff 	mov.w	r0, #4294967295
 8000708:	f7ff ff90 	bl	800062c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800070c:	4b05      	ldr	r3, [pc, #20]	; (8000724 <SysTick_Config+0x40>)
 800070e:	2200      	movs	r2, #0
 8000710:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000712:	4b04      	ldr	r3, [pc, #16]	; (8000724 <SysTick_Config+0x40>)
 8000714:	2207      	movs	r2, #7
 8000716:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000718:	2300      	movs	r3, #0
}
 800071a:	4618      	mov	r0, r3
 800071c:	3708      	adds	r7, #8
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	e000e010 	.word	0xe000e010

08000728 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000730:	6878      	ldr	r0, [r7, #4]
 8000732:	f7ff ff49 	bl	80005c8 <__NVIC_SetPriorityGrouping>
}
 8000736:	bf00      	nop
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}

0800073e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800073e:	b580      	push	{r7, lr}
 8000740:	b086      	sub	sp, #24
 8000742:	af00      	add	r7, sp, #0
 8000744:	4603      	mov	r3, r0
 8000746:	60b9      	str	r1, [r7, #8]
 8000748:	607a      	str	r2, [r7, #4]
 800074a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800074c:	2300      	movs	r3, #0
 800074e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000750:	f7ff ff5e 	bl	8000610 <__NVIC_GetPriorityGrouping>
 8000754:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000756:	687a      	ldr	r2, [r7, #4]
 8000758:	68b9      	ldr	r1, [r7, #8]
 800075a:	6978      	ldr	r0, [r7, #20]
 800075c:	f7ff ff90 	bl	8000680 <NVIC_EncodePriority>
 8000760:	4602      	mov	r2, r0
 8000762:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000766:	4611      	mov	r1, r2
 8000768:	4618      	mov	r0, r3
 800076a:	f7ff ff5f 	bl	800062c <__NVIC_SetPriority>
}
 800076e:	bf00      	nop
 8000770:	3718      	adds	r7, #24
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}

08000776 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000776:	b580      	push	{r7, lr}
 8000778:	b082      	sub	sp, #8
 800077a:	af00      	add	r7, sp, #0
 800077c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800077e:	6878      	ldr	r0, [r7, #4]
 8000780:	f7ff ffb0 	bl	80006e4 <SysTick_Config>
 8000784:	4603      	mov	r3, r0
}
 8000786:	4618      	mov	r0, r3
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
	...

08000790 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000790:	b480      	push	{r7}
 8000792:	b08b      	sub	sp, #44	; 0x2c
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
 8000798:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800079a:	2300      	movs	r3, #0
 800079c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800079e:	2300      	movs	r3, #0
 80007a0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007a2:	e169      	b.n	8000a78 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80007a4:	2201      	movs	r2, #1
 80007a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007a8:	fa02 f303 	lsl.w	r3, r2, r3
 80007ac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	69fa      	ldr	r2, [r7, #28]
 80007b4:	4013      	ands	r3, r2
 80007b6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80007b8:	69ba      	ldr	r2, [r7, #24]
 80007ba:	69fb      	ldr	r3, [r7, #28]
 80007bc:	429a      	cmp	r2, r3
 80007be:	f040 8158 	bne.w	8000a72 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80007c2:	683b      	ldr	r3, [r7, #0]
 80007c4:	685b      	ldr	r3, [r3, #4]
 80007c6:	4a9a      	ldr	r2, [pc, #616]	; (8000a30 <HAL_GPIO_Init+0x2a0>)
 80007c8:	4293      	cmp	r3, r2
 80007ca:	d05e      	beq.n	800088a <HAL_GPIO_Init+0xfa>
 80007cc:	4a98      	ldr	r2, [pc, #608]	; (8000a30 <HAL_GPIO_Init+0x2a0>)
 80007ce:	4293      	cmp	r3, r2
 80007d0:	d875      	bhi.n	80008be <HAL_GPIO_Init+0x12e>
 80007d2:	4a98      	ldr	r2, [pc, #608]	; (8000a34 <HAL_GPIO_Init+0x2a4>)
 80007d4:	4293      	cmp	r3, r2
 80007d6:	d058      	beq.n	800088a <HAL_GPIO_Init+0xfa>
 80007d8:	4a96      	ldr	r2, [pc, #600]	; (8000a34 <HAL_GPIO_Init+0x2a4>)
 80007da:	4293      	cmp	r3, r2
 80007dc:	d86f      	bhi.n	80008be <HAL_GPIO_Init+0x12e>
 80007de:	4a96      	ldr	r2, [pc, #600]	; (8000a38 <HAL_GPIO_Init+0x2a8>)
 80007e0:	4293      	cmp	r3, r2
 80007e2:	d052      	beq.n	800088a <HAL_GPIO_Init+0xfa>
 80007e4:	4a94      	ldr	r2, [pc, #592]	; (8000a38 <HAL_GPIO_Init+0x2a8>)
 80007e6:	4293      	cmp	r3, r2
 80007e8:	d869      	bhi.n	80008be <HAL_GPIO_Init+0x12e>
 80007ea:	4a94      	ldr	r2, [pc, #592]	; (8000a3c <HAL_GPIO_Init+0x2ac>)
 80007ec:	4293      	cmp	r3, r2
 80007ee:	d04c      	beq.n	800088a <HAL_GPIO_Init+0xfa>
 80007f0:	4a92      	ldr	r2, [pc, #584]	; (8000a3c <HAL_GPIO_Init+0x2ac>)
 80007f2:	4293      	cmp	r3, r2
 80007f4:	d863      	bhi.n	80008be <HAL_GPIO_Init+0x12e>
 80007f6:	4a92      	ldr	r2, [pc, #584]	; (8000a40 <HAL_GPIO_Init+0x2b0>)
 80007f8:	4293      	cmp	r3, r2
 80007fa:	d046      	beq.n	800088a <HAL_GPIO_Init+0xfa>
 80007fc:	4a90      	ldr	r2, [pc, #576]	; (8000a40 <HAL_GPIO_Init+0x2b0>)
 80007fe:	4293      	cmp	r3, r2
 8000800:	d85d      	bhi.n	80008be <HAL_GPIO_Init+0x12e>
 8000802:	2b12      	cmp	r3, #18
 8000804:	d82a      	bhi.n	800085c <HAL_GPIO_Init+0xcc>
 8000806:	2b12      	cmp	r3, #18
 8000808:	d859      	bhi.n	80008be <HAL_GPIO_Init+0x12e>
 800080a:	a201      	add	r2, pc, #4	; (adr r2, 8000810 <HAL_GPIO_Init+0x80>)
 800080c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000810:	0800088b 	.word	0x0800088b
 8000814:	08000865 	.word	0x08000865
 8000818:	08000877 	.word	0x08000877
 800081c:	080008b9 	.word	0x080008b9
 8000820:	080008bf 	.word	0x080008bf
 8000824:	080008bf 	.word	0x080008bf
 8000828:	080008bf 	.word	0x080008bf
 800082c:	080008bf 	.word	0x080008bf
 8000830:	080008bf 	.word	0x080008bf
 8000834:	080008bf 	.word	0x080008bf
 8000838:	080008bf 	.word	0x080008bf
 800083c:	080008bf 	.word	0x080008bf
 8000840:	080008bf 	.word	0x080008bf
 8000844:	080008bf 	.word	0x080008bf
 8000848:	080008bf 	.word	0x080008bf
 800084c:	080008bf 	.word	0x080008bf
 8000850:	080008bf 	.word	0x080008bf
 8000854:	0800086d 	.word	0x0800086d
 8000858:	08000881 	.word	0x08000881
 800085c:	4a79      	ldr	r2, [pc, #484]	; (8000a44 <HAL_GPIO_Init+0x2b4>)
 800085e:	4293      	cmp	r3, r2
 8000860:	d013      	beq.n	800088a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000862:	e02c      	b.n	80008be <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	68db      	ldr	r3, [r3, #12]
 8000868:	623b      	str	r3, [r7, #32]
          break;
 800086a:	e029      	b.n	80008c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	68db      	ldr	r3, [r3, #12]
 8000870:	3304      	adds	r3, #4
 8000872:	623b      	str	r3, [r7, #32]
          break;
 8000874:	e024      	b.n	80008c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	68db      	ldr	r3, [r3, #12]
 800087a:	3308      	adds	r3, #8
 800087c:	623b      	str	r3, [r7, #32]
          break;
 800087e:	e01f      	b.n	80008c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	68db      	ldr	r3, [r3, #12]
 8000884:	330c      	adds	r3, #12
 8000886:	623b      	str	r3, [r7, #32]
          break;
 8000888:	e01a      	b.n	80008c0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	689b      	ldr	r3, [r3, #8]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d102      	bne.n	8000898 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000892:	2304      	movs	r3, #4
 8000894:	623b      	str	r3, [r7, #32]
          break;
 8000896:	e013      	b.n	80008c0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	689b      	ldr	r3, [r3, #8]
 800089c:	2b01      	cmp	r3, #1
 800089e:	d105      	bne.n	80008ac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80008a0:	2308      	movs	r3, #8
 80008a2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	69fa      	ldr	r2, [r7, #28]
 80008a8:	611a      	str	r2, [r3, #16]
          break;
 80008aa:	e009      	b.n	80008c0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80008ac:	2308      	movs	r3, #8
 80008ae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	69fa      	ldr	r2, [r7, #28]
 80008b4:	615a      	str	r2, [r3, #20]
          break;
 80008b6:	e003      	b.n	80008c0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80008b8:	2300      	movs	r3, #0
 80008ba:	623b      	str	r3, [r7, #32]
          break;
 80008bc:	e000      	b.n	80008c0 <HAL_GPIO_Init+0x130>
          break;
 80008be:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80008c0:	69bb      	ldr	r3, [r7, #24]
 80008c2:	2bff      	cmp	r3, #255	; 0xff
 80008c4:	d801      	bhi.n	80008ca <HAL_GPIO_Init+0x13a>
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	e001      	b.n	80008ce <HAL_GPIO_Init+0x13e>
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	3304      	adds	r3, #4
 80008ce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80008d0:	69bb      	ldr	r3, [r7, #24]
 80008d2:	2bff      	cmp	r3, #255	; 0xff
 80008d4:	d802      	bhi.n	80008dc <HAL_GPIO_Init+0x14c>
 80008d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008d8:	009b      	lsls	r3, r3, #2
 80008da:	e002      	b.n	80008e2 <HAL_GPIO_Init+0x152>
 80008dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008de:	3b08      	subs	r3, #8
 80008e0:	009b      	lsls	r3, r3, #2
 80008e2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80008e4:	697b      	ldr	r3, [r7, #20]
 80008e6:	681a      	ldr	r2, [r3, #0]
 80008e8:	210f      	movs	r1, #15
 80008ea:	693b      	ldr	r3, [r7, #16]
 80008ec:	fa01 f303 	lsl.w	r3, r1, r3
 80008f0:	43db      	mvns	r3, r3
 80008f2:	401a      	ands	r2, r3
 80008f4:	6a39      	ldr	r1, [r7, #32]
 80008f6:	693b      	ldr	r3, [r7, #16]
 80008f8:	fa01 f303 	lsl.w	r3, r1, r3
 80008fc:	431a      	orrs	r2, r3
 80008fe:	697b      	ldr	r3, [r7, #20]
 8000900:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	685b      	ldr	r3, [r3, #4]
 8000906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800090a:	2b00      	cmp	r3, #0
 800090c:	f000 80b1 	beq.w	8000a72 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000910:	4b4d      	ldr	r3, [pc, #308]	; (8000a48 <HAL_GPIO_Init+0x2b8>)
 8000912:	699b      	ldr	r3, [r3, #24]
 8000914:	4a4c      	ldr	r2, [pc, #304]	; (8000a48 <HAL_GPIO_Init+0x2b8>)
 8000916:	f043 0301 	orr.w	r3, r3, #1
 800091a:	6193      	str	r3, [r2, #24]
 800091c:	4b4a      	ldr	r3, [pc, #296]	; (8000a48 <HAL_GPIO_Init+0x2b8>)
 800091e:	699b      	ldr	r3, [r3, #24]
 8000920:	f003 0301 	and.w	r3, r3, #1
 8000924:	60bb      	str	r3, [r7, #8]
 8000926:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000928:	4a48      	ldr	r2, [pc, #288]	; (8000a4c <HAL_GPIO_Init+0x2bc>)
 800092a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800092c:	089b      	lsrs	r3, r3, #2
 800092e:	3302      	adds	r3, #2
 8000930:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000934:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000938:	f003 0303 	and.w	r3, r3, #3
 800093c:	009b      	lsls	r3, r3, #2
 800093e:	220f      	movs	r2, #15
 8000940:	fa02 f303 	lsl.w	r3, r2, r3
 8000944:	43db      	mvns	r3, r3
 8000946:	68fa      	ldr	r2, [r7, #12]
 8000948:	4013      	ands	r3, r2
 800094a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	4a40      	ldr	r2, [pc, #256]	; (8000a50 <HAL_GPIO_Init+0x2c0>)
 8000950:	4293      	cmp	r3, r2
 8000952:	d013      	beq.n	800097c <HAL_GPIO_Init+0x1ec>
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	4a3f      	ldr	r2, [pc, #252]	; (8000a54 <HAL_GPIO_Init+0x2c4>)
 8000958:	4293      	cmp	r3, r2
 800095a:	d00d      	beq.n	8000978 <HAL_GPIO_Init+0x1e8>
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	4a3e      	ldr	r2, [pc, #248]	; (8000a58 <HAL_GPIO_Init+0x2c8>)
 8000960:	4293      	cmp	r3, r2
 8000962:	d007      	beq.n	8000974 <HAL_GPIO_Init+0x1e4>
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	4a3d      	ldr	r2, [pc, #244]	; (8000a5c <HAL_GPIO_Init+0x2cc>)
 8000968:	4293      	cmp	r3, r2
 800096a:	d101      	bne.n	8000970 <HAL_GPIO_Init+0x1e0>
 800096c:	2303      	movs	r3, #3
 800096e:	e006      	b.n	800097e <HAL_GPIO_Init+0x1ee>
 8000970:	2304      	movs	r3, #4
 8000972:	e004      	b.n	800097e <HAL_GPIO_Init+0x1ee>
 8000974:	2302      	movs	r3, #2
 8000976:	e002      	b.n	800097e <HAL_GPIO_Init+0x1ee>
 8000978:	2301      	movs	r3, #1
 800097a:	e000      	b.n	800097e <HAL_GPIO_Init+0x1ee>
 800097c:	2300      	movs	r3, #0
 800097e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000980:	f002 0203 	and.w	r2, r2, #3
 8000984:	0092      	lsls	r2, r2, #2
 8000986:	4093      	lsls	r3, r2
 8000988:	68fa      	ldr	r2, [r7, #12]
 800098a:	4313      	orrs	r3, r2
 800098c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800098e:	492f      	ldr	r1, [pc, #188]	; (8000a4c <HAL_GPIO_Init+0x2bc>)
 8000990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000992:	089b      	lsrs	r3, r3, #2
 8000994:	3302      	adds	r3, #2
 8000996:	68fa      	ldr	r2, [r7, #12]
 8000998:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	685b      	ldr	r3, [r3, #4]
 80009a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d006      	beq.n	80009b6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80009a8:	4b2d      	ldr	r3, [pc, #180]	; (8000a60 <HAL_GPIO_Init+0x2d0>)
 80009aa:	689a      	ldr	r2, [r3, #8]
 80009ac:	492c      	ldr	r1, [pc, #176]	; (8000a60 <HAL_GPIO_Init+0x2d0>)
 80009ae:	69bb      	ldr	r3, [r7, #24]
 80009b0:	4313      	orrs	r3, r2
 80009b2:	608b      	str	r3, [r1, #8]
 80009b4:	e006      	b.n	80009c4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80009b6:	4b2a      	ldr	r3, [pc, #168]	; (8000a60 <HAL_GPIO_Init+0x2d0>)
 80009b8:	689a      	ldr	r2, [r3, #8]
 80009ba:	69bb      	ldr	r3, [r7, #24]
 80009bc:	43db      	mvns	r3, r3
 80009be:	4928      	ldr	r1, [pc, #160]	; (8000a60 <HAL_GPIO_Init+0x2d0>)
 80009c0:	4013      	ands	r3, r2
 80009c2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	685b      	ldr	r3, [r3, #4]
 80009c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d006      	beq.n	80009de <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80009d0:	4b23      	ldr	r3, [pc, #140]	; (8000a60 <HAL_GPIO_Init+0x2d0>)
 80009d2:	68da      	ldr	r2, [r3, #12]
 80009d4:	4922      	ldr	r1, [pc, #136]	; (8000a60 <HAL_GPIO_Init+0x2d0>)
 80009d6:	69bb      	ldr	r3, [r7, #24]
 80009d8:	4313      	orrs	r3, r2
 80009da:	60cb      	str	r3, [r1, #12]
 80009dc:	e006      	b.n	80009ec <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80009de:	4b20      	ldr	r3, [pc, #128]	; (8000a60 <HAL_GPIO_Init+0x2d0>)
 80009e0:	68da      	ldr	r2, [r3, #12]
 80009e2:	69bb      	ldr	r3, [r7, #24]
 80009e4:	43db      	mvns	r3, r3
 80009e6:	491e      	ldr	r1, [pc, #120]	; (8000a60 <HAL_GPIO_Init+0x2d0>)
 80009e8:	4013      	ands	r3, r2
 80009ea:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	685b      	ldr	r3, [r3, #4]
 80009f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d006      	beq.n	8000a06 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80009f8:	4b19      	ldr	r3, [pc, #100]	; (8000a60 <HAL_GPIO_Init+0x2d0>)
 80009fa:	685a      	ldr	r2, [r3, #4]
 80009fc:	4918      	ldr	r1, [pc, #96]	; (8000a60 <HAL_GPIO_Init+0x2d0>)
 80009fe:	69bb      	ldr	r3, [r7, #24]
 8000a00:	4313      	orrs	r3, r2
 8000a02:	604b      	str	r3, [r1, #4]
 8000a04:	e006      	b.n	8000a14 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000a06:	4b16      	ldr	r3, [pc, #88]	; (8000a60 <HAL_GPIO_Init+0x2d0>)
 8000a08:	685a      	ldr	r2, [r3, #4]
 8000a0a:	69bb      	ldr	r3, [r7, #24]
 8000a0c:	43db      	mvns	r3, r3
 8000a0e:	4914      	ldr	r1, [pc, #80]	; (8000a60 <HAL_GPIO_Init+0x2d0>)
 8000a10:	4013      	ands	r3, r2
 8000a12:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	685b      	ldr	r3, [r3, #4]
 8000a18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d021      	beq.n	8000a64 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000a20:	4b0f      	ldr	r3, [pc, #60]	; (8000a60 <HAL_GPIO_Init+0x2d0>)
 8000a22:	681a      	ldr	r2, [r3, #0]
 8000a24:	490e      	ldr	r1, [pc, #56]	; (8000a60 <HAL_GPIO_Init+0x2d0>)
 8000a26:	69bb      	ldr	r3, [r7, #24]
 8000a28:	4313      	orrs	r3, r2
 8000a2a:	600b      	str	r3, [r1, #0]
 8000a2c:	e021      	b.n	8000a72 <HAL_GPIO_Init+0x2e2>
 8000a2e:	bf00      	nop
 8000a30:	10320000 	.word	0x10320000
 8000a34:	10310000 	.word	0x10310000
 8000a38:	10220000 	.word	0x10220000
 8000a3c:	10210000 	.word	0x10210000
 8000a40:	10120000 	.word	0x10120000
 8000a44:	10110000 	.word	0x10110000
 8000a48:	40021000 	.word	0x40021000
 8000a4c:	40010000 	.word	0x40010000
 8000a50:	40010800 	.word	0x40010800
 8000a54:	40010c00 	.word	0x40010c00
 8000a58:	40011000 	.word	0x40011000
 8000a5c:	40011400 	.word	0x40011400
 8000a60:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000a64:	4b0b      	ldr	r3, [pc, #44]	; (8000a94 <HAL_GPIO_Init+0x304>)
 8000a66:	681a      	ldr	r2, [r3, #0]
 8000a68:	69bb      	ldr	r3, [r7, #24]
 8000a6a:	43db      	mvns	r3, r3
 8000a6c:	4909      	ldr	r1, [pc, #36]	; (8000a94 <HAL_GPIO_Init+0x304>)
 8000a6e:	4013      	ands	r3, r2
 8000a70:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a74:	3301      	adds	r3, #1
 8000a76:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	681a      	ldr	r2, [r3, #0]
 8000a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a7e:	fa22 f303 	lsr.w	r3, r2, r3
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	f47f ae8e 	bne.w	80007a4 <HAL_GPIO_Init+0x14>
  }
}
 8000a88:	bf00      	nop
 8000a8a:	bf00      	nop
 8000a8c:	372c      	adds	r7, #44	; 0x2c
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bc80      	pop	{r7}
 8000a92:	4770      	bx	lr
 8000a94:	40010400 	.word	0x40010400

08000a98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b086      	sub	sp, #24
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d101      	bne.n	8000aaa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	e272      	b.n	8000f90 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	f003 0301 	and.w	r3, r3, #1
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	f000 8087 	beq.w	8000bc6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ab8:	4b92      	ldr	r3, [pc, #584]	; (8000d04 <HAL_RCC_OscConfig+0x26c>)
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	f003 030c 	and.w	r3, r3, #12
 8000ac0:	2b04      	cmp	r3, #4
 8000ac2:	d00c      	beq.n	8000ade <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ac4:	4b8f      	ldr	r3, [pc, #572]	; (8000d04 <HAL_RCC_OscConfig+0x26c>)
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	f003 030c 	and.w	r3, r3, #12
 8000acc:	2b08      	cmp	r3, #8
 8000ace:	d112      	bne.n	8000af6 <HAL_RCC_OscConfig+0x5e>
 8000ad0:	4b8c      	ldr	r3, [pc, #560]	; (8000d04 <HAL_RCC_OscConfig+0x26c>)
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ad8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000adc:	d10b      	bne.n	8000af6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ade:	4b89      	ldr	r3, [pc, #548]	; (8000d04 <HAL_RCC_OscConfig+0x26c>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d06c      	beq.n	8000bc4 <HAL_RCC_OscConfig+0x12c>
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	685b      	ldr	r3, [r3, #4]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d168      	bne.n	8000bc4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000af2:	2301      	movs	r3, #1
 8000af4:	e24c      	b.n	8000f90 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	685b      	ldr	r3, [r3, #4]
 8000afa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000afe:	d106      	bne.n	8000b0e <HAL_RCC_OscConfig+0x76>
 8000b00:	4b80      	ldr	r3, [pc, #512]	; (8000d04 <HAL_RCC_OscConfig+0x26c>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a7f      	ldr	r2, [pc, #508]	; (8000d04 <HAL_RCC_OscConfig+0x26c>)
 8000b06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b0a:	6013      	str	r3, [r2, #0]
 8000b0c:	e02e      	b.n	8000b6c <HAL_RCC_OscConfig+0xd4>
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	685b      	ldr	r3, [r3, #4]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d10c      	bne.n	8000b30 <HAL_RCC_OscConfig+0x98>
 8000b16:	4b7b      	ldr	r3, [pc, #492]	; (8000d04 <HAL_RCC_OscConfig+0x26c>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4a7a      	ldr	r2, [pc, #488]	; (8000d04 <HAL_RCC_OscConfig+0x26c>)
 8000b1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b20:	6013      	str	r3, [r2, #0]
 8000b22:	4b78      	ldr	r3, [pc, #480]	; (8000d04 <HAL_RCC_OscConfig+0x26c>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4a77      	ldr	r2, [pc, #476]	; (8000d04 <HAL_RCC_OscConfig+0x26c>)
 8000b28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b2c:	6013      	str	r3, [r2, #0]
 8000b2e:	e01d      	b.n	8000b6c <HAL_RCC_OscConfig+0xd4>
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b38:	d10c      	bne.n	8000b54 <HAL_RCC_OscConfig+0xbc>
 8000b3a:	4b72      	ldr	r3, [pc, #456]	; (8000d04 <HAL_RCC_OscConfig+0x26c>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4a71      	ldr	r2, [pc, #452]	; (8000d04 <HAL_RCC_OscConfig+0x26c>)
 8000b40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b44:	6013      	str	r3, [r2, #0]
 8000b46:	4b6f      	ldr	r3, [pc, #444]	; (8000d04 <HAL_RCC_OscConfig+0x26c>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4a6e      	ldr	r2, [pc, #440]	; (8000d04 <HAL_RCC_OscConfig+0x26c>)
 8000b4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b50:	6013      	str	r3, [r2, #0]
 8000b52:	e00b      	b.n	8000b6c <HAL_RCC_OscConfig+0xd4>
 8000b54:	4b6b      	ldr	r3, [pc, #428]	; (8000d04 <HAL_RCC_OscConfig+0x26c>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a6a      	ldr	r2, [pc, #424]	; (8000d04 <HAL_RCC_OscConfig+0x26c>)
 8000b5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b5e:	6013      	str	r3, [r2, #0]
 8000b60:	4b68      	ldr	r3, [pc, #416]	; (8000d04 <HAL_RCC_OscConfig+0x26c>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a67      	ldr	r2, [pc, #412]	; (8000d04 <HAL_RCC_OscConfig+0x26c>)
 8000b66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b6a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d013      	beq.n	8000b9c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b74:	f7ff fcfa 	bl	800056c <HAL_GetTick>
 8000b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b7a:	e008      	b.n	8000b8e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b7c:	f7ff fcf6 	bl	800056c <HAL_GetTick>
 8000b80:	4602      	mov	r2, r0
 8000b82:	693b      	ldr	r3, [r7, #16]
 8000b84:	1ad3      	subs	r3, r2, r3
 8000b86:	2b64      	cmp	r3, #100	; 0x64
 8000b88:	d901      	bls.n	8000b8e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000b8a:	2303      	movs	r3, #3
 8000b8c:	e200      	b.n	8000f90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b8e:	4b5d      	ldr	r3, [pc, #372]	; (8000d04 <HAL_RCC_OscConfig+0x26c>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d0f0      	beq.n	8000b7c <HAL_RCC_OscConfig+0xe4>
 8000b9a:	e014      	b.n	8000bc6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b9c:	f7ff fce6 	bl	800056c <HAL_GetTick>
 8000ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ba2:	e008      	b.n	8000bb6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ba4:	f7ff fce2 	bl	800056c <HAL_GetTick>
 8000ba8:	4602      	mov	r2, r0
 8000baa:	693b      	ldr	r3, [r7, #16]
 8000bac:	1ad3      	subs	r3, r2, r3
 8000bae:	2b64      	cmp	r3, #100	; 0x64
 8000bb0:	d901      	bls.n	8000bb6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000bb2:	2303      	movs	r3, #3
 8000bb4:	e1ec      	b.n	8000f90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bb6:	4b53      	ldr	r3, [pc, #332]	; (8000d04 <HAL_RCC_OscConfig+0x26c>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d1f0      	bne.n	8000ba4 <HAL_RCC_OscConfig+0x10c>
 8000bc2:	e000      	b.n	8000bc6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	f003 0302 	and.w	r3, r3, #2
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d063      	beq.n	8000c9a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000bd2:	4b4c      	ldr	r3, [pc, #304]	; (8000d04 <HAL_RCC_OscConfig+0x26c>)
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	f003 030c 	and.w	r3, r3, #12
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d00b      	beq.n	8000bf6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000bde:	4b49      	ldr	r3, [pc, #292]	; (8000d04 <HAL_RCC_OscConfig+0x26c>)
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	f003 030c 	and.w	r3, r3, #12
 8000be6:	2b08      	cmp	r3, #8
 8000be8:	d11c      	bne.n	8000c24 <HAL_RCC_OscConfig+0x18c>
 8000bea:	4b46      	ldr	r3, [pc, #280]	; (8000d04 <HAL_RCC_OscConfig+0x26c>)
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d116      	bne.n	8000c24 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000bf6:	4b43      	ldr	r3, [pc, #268]	; (8000d04 <HAL_RCC_OscConfig+0x26c>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f003 0302 	and.w	r3, r3, #2
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d005      	beq.n	8000c0e <HAL_RCC_OscConfig+0x176>
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	691b      	ldr	r3, [r3, #16]
 8000c06:	2b01      	cmp	r3, #1
 8000c08:	d001      	beq.n	8000c0e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	e1c0      	b.n	8000f90 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c0e:	4b3d      	ldr	r3, [pc, #244]	; (8000d04 <HAL_RCC_OscConfig+0x26c>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	695b      	ldr	r3, [r3, #20]
 8000c1a:	00db      	lsls	r3, r3, #3
 8000c1c:	4939      	ldr	r1, [pc, #228]	; (8000d04 <HAL_RCC_OscConfig+0x26c>)
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c22:	e03a      	b.n	8000c9a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	691b      	ldr	r3, [r3, #16]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d020      	beq.n	8000c6e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c2c:	4b36      	ldr	r3, [pc, #216]	; (8000d08 <HAL_RCC_OscConfig+0x270>)
 8000c2e:	2201      	movs	r2, #1
 8000c30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c32:	f7ff fc9b 	bl	800056c <HAL_GetTick>
 8000c36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c38:	e008      	b.n	8000c4c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c3a:	f7ff fc97 	bl	800056c <HAL_GetTick>
 8000c3e:	4602      	mov	r2, r0
 8000c40:	693b      	ldr	r3, [r7, #16]
 8000c42:	1ad3      	subs	r3, r2, r3
 8000c44:	2b02      	cmp	r3, #2
 8000c46:	d901      	bls.n	8000c4c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000c48:	2303      	movs	r3, #3
 8000c4a:	e1a1      	b.n	8000f90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c4c:	4b2d      	ldr	r3, [pc, #180]	; (8000d04 <HAL_RCC_OscConfig+0x26c>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f003 0302 	and.w	r3, r3, #2
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d0f0      	beq.n	8000c3a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c58:	4b2a      	ldr	r3, [pc, #168]	; (8000d04 <HAL_RCC_OscConfig+0x26c>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	695b      	ldr	r3, [r3, #20]
 8000c64:	00db      	lsls	r3, r3, #3
 8000c66:	4927      	ldr	r1, [pc, #156]	; (8000d04 <HAL_RCC_OscConfig+0x26c>)
 8000c68:	4313      	orrs	r3, r2
 8000c6a:	600b      	str	r3, [r1, #0]
 8000c6c:	e015      	b.n	8000c9a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000c6e:	4b26      	ldr	r3, [pc, #152]	; (8000d08 <HAL_RCC_OscConfig+0x270>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c74:	f7ff fc7a 	bl	800056c <HAL_GetTick>
 8000c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c7a:	e008      	b.n	8000c8e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c7c:	f7ff fc76 	bl	800056c <HAL_GetTick>
 8000c80:	4602      	mov	r2, r0
 8000c82:	693b      	ldr	r3, [r7, #16]
 8000c84:	1ad3      	subs	r3, r2, r3
 8000c86:	2b02      	cmp	r3, #2
 8000c88:	d901      	bls.n	8000c8e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000c8a:	2303      	movs	r3, #3
 8000c8c:	e180      	b.n	8000f90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c8e:	4b1d      	ldr	r3, [pc, #116]	; (8000d04 <HAL_RCC_OscConfig+0x26c>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f003 0302 	and.w	r3, r3, #2
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d1f0      	bne.n	8000c7c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	f003 0308 	and.w	r3, r3, #8
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d03a      	beq.n	8000d1c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	699b      	ldr	r3, [r3, #24]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d019      	beq.n	8000ce2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000cae:	4b17      	ldr	r3, [pc, #92]	; (8000d0c <HAL_RCC_OscConfig+0x274>)
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000cb4:	f7ff fc5a 	bl	800056c <HAL_GetTick>
 8000cb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cba:	e008      	b.n	8000cce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000cbc:	f7ff fc56 	bl	800056c <HAL_GetTick>
 8000cc0:	4602      	mov	r2, r0
 8000cc2:	693b      	ldr	r3, [r7, #16]
 8000cc4:	1ad3      	subs	r3, r2, r3
 8000cc6:	2b02      	cmp	r3, #2
 8000cc8:	d901      	bls.n	8000cce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000cca:	2303      	movs	r3, #3
 8000ccc:	e160      	b.n	8000f90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cce:	4b0d      	ldr	r3, [pc, #52]	; (8000d04 <HAL_RCC_OscConfig+0x26c>)
 8000cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cd2:	f003 0302 	and.w	r3, r3, #2
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d0f0      	beq.n	8000cbc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000cda:	2001      	movs	r0, #1
 8000cdc:	f000 face 	bl	800127c <RCC_Delay>
 8000ce0:	e01c      	b.n	8000d1c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ce2:	4b0a      	ldr	r3, [pc, #40]	; (8000d0c <HAL_RCC_OscConfig+0x274>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ce8:	f7ff fc40 	bl	800056c <HAL_GetTick>
 8000cec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000cee:	e00f      	b.n	8000d10 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000cf0:	f7ff fc3c 	bl	800056c <HAL_GetTick>
 8000cf4:	4602      	mov	r2, r0
 8000cf6:	693b      	ldr	r3, [r7, #16]
 8000cf8:	1ad3      	subs	r3, r2, r3
 8000cfa:	2b02      	cmp	r3, #2
 8000cfc:	d908      	bls.n	8000d10 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000cfe:	2303      	movs	r3, #3
 8000d00:	e146      	b.n	8000f90 <HAL_RCC_OscConfig+0x4f8>
 8000d02:	bf00      	nop
 8000d04:	40021000 	.word	0x40021000
 8000d08:	42420000 	.word	0x42420000
 8000d0c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d10:	4b92      	ldr	r3, [pc, #584]	; (8000f5c <HAL_RCC_OscConfig+0x4c4>)
 8000d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d14:	f003 0302 	and.w	r3, r3, #2
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d1e9      	bne.n	8000cf0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f003 0304 	and.w	r3, r3, #4
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	f000 80a6 	beq.w	8000e76 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d2e:	4b8b      	ldr	r3, [pc, #556]	; (8000f5c <HAL_RCC_OscConfig+0x4c4>)
 8000d30:	69db      	ldr	r3, [r3, #28]
 8000d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d10d      	bne.n	8000d56 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d3a:	4b88      	ldr	r3, [pc, #544]	; (8000f5c <HAL_RCC_OscConfig+0x4c4>)
 8000d3c:	69db      	ldr	r3, [r3, #28]
 8000d3e:	4a87      	ldr	r2, [pc, #540]	; (8000f5c <HAL_RCC_OscConfig+0x4c4>)
 8000d40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d44:	61d3      	str	r3, [r2, #28]
 8000d46:	4b85      	ldr	r3, [pc, #532]	; (8000f5c <HAL_RCC_OscConfig+0x4c4>)
 8000d48:	69db      	ldr	r3, [r3, #28]
 8000d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d4e:	60bb      	str	r3, [r7, #8]
 8000d50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000d52:	2301      	movs	r3, #1
 8000d54:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d56:	4b82      	ldr	r3, [pc, #520]	; (8000f60 <HAL_RCC_OscConfig+0x4c8>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d118      	bne.n	8000d94 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d62:	4b7f      	ldr	r3, [pc, #508]	; (8000f60 <HAL_RCC_OscConfig+0x4c8>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4a7e      	ldr	r2, [pc, #504]	; (8000f60 <HAL_RCC_OscConfig+0x4c8>)
 8000d68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000d6e:	f7ff fbfd 	bl	800056c <HAL_GetTick>
 8000d72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d74:	e008      	b.n	8000d88 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d76:	f7ff fbf9 	bl	800056c <HAL_GetTick>
 8000d7a:	4602      	mov	r2, r0
 8000d7c:	693b      	ldr	r3, [r7, #16]
 8000d7e:	1ad3      	subs	r3, r2, r3
 8000d80:	2b64      	cmp	r3, #100	; 0x64
 8000d82:	d901      	bls.n	8000d88 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000d84:	2303      	movs	r3, #3
 8000d86:	e103      	b.n	8000f90 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d88:	4b75      	ldr	r3, [pc, #468]	; (8000f60 <HAL_RCC_OscConfig+0x4c8>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d0f0      	beq.n	8000d76 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	2b01      	cmp	r3, #1
 8000d9a:	d106      	bne.n	8000daa <HAL_RCC_OscConfig+0x312>
 8000d9c:	4b6f      	ldr	r3, [pc, #444]	; (8000f5c <HAL_RCC_OscConfig+0x4c4>)
 8000d9e:	6a1b      	ldr	r3, [r3, #32]
 8000da0:	4a6e      	ldr	r2, [pc, #440]	; (8000f5c <HAL_RCC_OscConfig+0x4c4>)
 8000da2:	f043 0301 	orr.w	r3, r3, #1
 8000da6:	6213      	str	r3, [r2, #32]
 8000da8:	e02d      	b.n	8000e06 <HAL_RCC_OscConfig+0x36e>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	68db      	ldr	r3, [r3, #12]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d10c      	bne.n	8000dcc <HAL_RCC_OscConfig+0x334>
 8000db2:	4b6a      	ldr	r3, [pc, #424]	; (8000f5c <HAL_RCC_OscConfig+0x4c4>)
 8000db4:	6a1b      	ldr	r3, [r3, #32]
 8000db6:	4a69      	ldr	r2, [pc, #420]	; (8000f5c <HAL_RCC_OscConfig+0x4c4>)
 8000db8:	f023 0301 	bic.w	r3, r3, #1
 8000dbc:	6213      	str	r3, [r2, #32]
 8000dbe:	4b67      	ldr	r3, [pc, #412]	; (8000f5c <HAL_RCC_OscConfig+0x4c4>)
 8000dc0:	6a1b      	ldr	r3, [r3, #32]
 8000dc2:	4a66      	ldr	r2, [pc, #408]	; (8000f5c <HAL_RCC_OscConfig+0x4c4>)
 8000dc4:	f023 0304 	bic.w	r3, r3, #4
 8000dc8:	6213      	str	r3, [r2, #32]
 8000dca:	e01c      	b.n	8000e06 <HAL_RCC_OscConfig+0x36e>
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	68db      	ldr	r3, [r3, #12]
 8000dd0:	2b05      	cmp	r3, #5
 8000dd2:	d10c      	bne.n	8000dee <HAL_RCC_OscConfig+0x356>
 8000dd4:	4b61      	ldr	r3, [pc, #388]	; (8000f5c <HAL_RCC_OscConfig+0x4c4>)
 8000dd6:	6a1b      	ldr	r3, [r3, #32]
 8000dd8:	4a60      	ldr	r2, [pc, #384]	; (8000f5c <HAL_RCC_OscConfig+0x4c4>)
 8000dda:	f043 0304 	orr.w	r3, r3, #4
 8000dde:	6213      	str	r3, [r2, #32]
 8000de0:	4b5e      	ldr	r3, [pc, #376]	; (8000f5c <HAL_RCC_OscConfig+0x4c4>)
 8000de2:	6a1b      	ldr	r3, [r3, #32]
 8000de4:	4a5d      	ldr	r2, [pc, #372]	; (8000f5c <HAL_RCC_OscConfig+0x4c4>)
 8000de6:	f043 0301 	orr.w	r3, r3, #1
 8000dea:	6213      	str	r3, [r2, #32]
 8000dec:	e00b      	b.n	8000e06 <HAL_RCC_OscConfig+0x36e>
 8000dee:	4b5b      	ldr	r3, [pc, #364]	; (8000f5c <HAL_RCC_OscConfig+0x4c4>)
 8000df0:	6a1b      	ldr	r3, [r3, #32]
 8000df2:	4a5a      	ldr	r2, [pc, #360]	; (8000f5c <HAL_RCC_OscConfig+0x4c4>)
 8000df4:	f023 0301 	bic.w	r3, r3, #1
 8000df8:	6213      	str	r3, [r2, #32]
 8000dfa:	4b58      	ldr	r3, [pc, #352]	; (8000f5c <HAL_RCC_OscConfig+0x4c4>)
 8000dfc:	6a1b      	ldr	r3, [r3, #32]
 8000dfe:	4a57      	ldr	r2, [pc, #348]	; (8000f5c <HAL_RCC_OscConfig+0x4c4>)
 8000e00:	f023 0304 	bic.w	r3, r3, #4
 8000e04:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	68db      	ldr	r3, [r3, #12]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d015      	beq.n	8000e3a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e0e:	f7ff fbad 	bl	800056c <HAL_GetTick>
 8000e12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e14:	e00a      	b.n	8000e2c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e16:	f7ff fba9 	bl	800056c <HAL_GetTick>
 8000e1a:	4602      	mov	r2, r0
 8000e1c:	693b      	ldr	r3, [r7, #16]
 8000e1e:	1ad3      	subs	r3, r2, r3
 8000e20:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e24:	4293      	cmp	r3, r2
 8000e26:	d901      	bls.n	8000e2c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000e28:	2303      	movs	r3, #3
 8000e2a:	e0b1      	b.n	8000f90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e2c:	4b4b      	ldr	r3, [pc, #300]	; (8000f5c <HAL_RCC_OscConfig+0x4c4>)
 8000e2e:	6a1b      	ldr	r3, [r3, #32]
 8000e30:	f003 0302 	and.w	r3, r3, #2
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d0ee      	beq.n	8000e16 <HAL_RCC_OscConfig+0x37e>
 8000e38:	e014      	b.n	8000e64 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e3a:	f7ff fb97 	bl	800056c <HAL_GetTick>
 8000e3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e40:	e00a      	b.n	8000e58 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e42:	f7ff fb93 	bl	800056c <HAL_GetTick>
 8000e46:	4602      	mov	r2, r0
 8000e48:	693b      	ldr	r3, [r7, #16]
 8000e4a:	1ad3      	subs	r3, r2, r3
 8000e4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d901      	bls.n	8000e58 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000e54:	2303      	movs	r3, #3
 8000e56:	e09b      	b.n	8000f90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e58:	4b40      	ldr	r3, [pc, #256]	; (8000f5c <HAL_RCC_OscConfig+0x4c4>)
 8000e5a:	6a1b      	ldr	r3, [r3, #32]
 8000e5c:	f003 0302 	and.w	r3, r3, #2
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d1ee      	bne.n	8000e42 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000e64:	7dfb      	ldrb	r3, [r7, #23]
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d105      	bne.n	8000e76 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e6a:	4b3c      	ldr	r3, [pc, #240]	; (8000f5c <HAL_RCC_OscConfig+0x4c4>)
 8000e6c:	69db      	ldr	r3, [r3, #28]
 8000e6e:	4a3b      	ldr	r2, [pc, #236]	; (8000f5c <HAL_RCC_OscConfig+0x4c4>)
 8000e70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e74:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	69db      	ldr	r3, [r3, #28]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	f000 8087 	beq.w	8000f8e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e80:	4b36      	ldr	r3, [pc, #216]	; (8000f5c <HAL_RCC_OscConfig+0x4c4>)
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	f003 030c 	and.w	r3, r3, #12
 8000e88:	2b08      	cmp	r3, #8
 8000e8a:	d061      	beq.n	8000f50 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	69db      	ldr	r3, [r3, #28]
 8000e90:	2b02      	cmp	r3, #2
 8000e92:	d146      	bne.n	8000f22 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e94:	4b33      	ldr	r3, [pc, #204]	; (8000f64 <HAL_RCC_OscConfig+0x4cc>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e9a:	f7ff fb67 	bl	800056c <HAL_GetTick>
 8000e9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ea0:	e008      	b.n	8000eb4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ea2:	f7ff fb63 	bl	800056c <HAL_GetTick>
 8000ea6:	4602      	mov	r2, r0
 8000ea8:	693b      	ldr	r3, [r7, #16]
 8000eaa:	1ad3      	subs	r3, r2, r3
 8000eac:	2b02      	cmp	r3, #2
 8000eae:	d901      	bls.n	8000eb4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000eb0:	2303      	movs	r3, #3
 8000eb2:	e06d      	b.n	8000f90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000eb4:	4b29      	ldr	r3, [pc, #164]	; (8000f5c <HAL_RCC_OscConfig+0x4c4>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d1f0      	bne.n	8000ea2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6a1b      	ldr	r3, [r3, #32]
 8000ec4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ec8:	d108      	bne.n	8000edc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000eca:	4b24      	ldr	r3, [pc, #144]	; (8000f5c <HAL_RCC_OscConfig+0x4c4>)
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	689b      	ldr	r3, [r3, #8]
 8000ed6:	4921      	ldr	r1, [pc, #132]	; (8000f5c <HAL_RCC_OscConfig+0x4c4>)
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000edc:	4b1f      	ldr	r3, [pc, #124]	; (8000f5c <HAL_RCC_OscConfig+0x4c4>)
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6a19      	ldr	r1, [r3, #32]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eec:	430b      	orrs	r3, r1
 8000eee:	491b      	ldr	r1, [pc, #108]	; (8000f5c <HAL_RCC_OscConfig+0x4c4>)
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000ef4:	4b1b      	ldr	r3, [pc, #108]	; (8000f64 <HAL_RCC_OscConfig+0x4cc>)
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000efa:	f7ff fb37 	bl	800056c <HAL_GetTick>
 8000efe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f00:	e008      	b.n	8000f14 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f02:	f7ff fb33 	bl	800056c <HAL_GetTick>
 8000f06:	4602      	mov	r2, r0
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	1ad3      	subs	r3, r2, r3
 8000f0c:	2b02      	cmp	r3, #2
 8000f0e:	d901      	bls.n	8000f14 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000f10:	2303      	movs	r3, #3
 8000f12:	e03d      	b.n	8000f90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f14:	4b11      	ldr	r3, [pc, #68]	; (8000f5c <HAL_RCC_OscConfig+0x4c4>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d0f0      	beq.n	8000f02 <HAL_RCC_OscConfig+0x46a>
 8000f20:	e035      	b.n	8000f8e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f22:	4b10      	ldr	r3, [pc, #64]	; (8000f64 <HAL_RCC_OscConfig+0x4cc>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f28:	f7ff fb20 	bl	800056c <HAL_GetTick>
 8000f2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f2e:	e008      	b.n	8000f42 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f30:	f7ff fb1c 	bl	800056c <HAL_GetTick>
 8000f34:	4602      	mov	r2, r0
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	2b02      	cmp	r3, #2
 8000f3c:	d901      	bls.n	8000f42 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000f3e:	2303      	movs	r3, #3
 8000f40:	e026      	b.n	8000f90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f42:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <HAL_RCC_OscConfig+0x4c4>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d1f0      	bne.n	8000f30 <HAL_RCC_OscConfig+0x498>
 8000f4e:	e01e      	b.n	8000f8e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	69db      	ldr	r3, [r3, #28]
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	d107      	bne.n	8000f68 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	e019      	b.n	8000f90 <HAL_RCC_OscConfig+0x4f8>
 8000f5c:	40021000 	.word	0x40021000
 8000f60:	40007000 	.word	0x40007000
 8000f64:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000f68:	4b0b      	ldr	r3, [pc, #44]	; (8000f98 <HAL_RCC_OscConfig+0x500>)
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6a1b      	ldr	r3, [r3, #32]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	d106      	bne.n	8000f8a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f86:	429a      	cmp	r2, r3
 8000f88:	d001      	beq.n	8000f8e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e000      	b.n	8000f90 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8000f8e:	2300      	movs	r3, #0
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	3718      	adds	r7, #24
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40021000 	.word	0x40021000

08000f9c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d101      	bne.n	8000fb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000fac:	2301      	movs	r3, #1
 8000fae:	e0d0      	b.n	8001152 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000fb0:	4b6a      	ldr	r3, [pc, #424]	; (800115c <HAL_RCC_ClockConfig+0x1c0>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f003 0307 	and.w	r3, r3, #7
 8000fb8:	683a      	ldr	r2, [r7, #0]
 8000fba:	429a      	cmp	r2, r3
 8000fbc:	d910      	bls.n	8000fe0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fbe:	4b67      	ldr	r3, [pc, #412]	; (800115c <HAL_RCC_ClockConfig+0x1c0>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f023 0207 	bic.w	r2, r3, #7
 8000fc6:	4965      	ldr	r1, [pc, #404]	; (800115c <HAL_RCC_ClockConfig+0x1c0>)
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000fce:	4b63      	ldr	r3, [pc, #396]	; (800115c <HAL_RCC_ClockConfig+0x1c0>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f003 0307 	and.w	r3, r3, #7
 8000fd6:	683a      	ldr	r2, [r7, #0]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d001      	beq.n	8000fe0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	e0b8      	b.n	8001152 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f003 0302 	and.w	r3, r3, #2
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d020      	beq.n	800102e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f003 0304 	and.w	r3, r3, #4
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d005      	beq.n	8001004 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000ff8:	4b59      	ldr	r3, [pc, #356]	; (8001160 <HAL_RCC_ClockConfig+0x1c4>)
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	4a58      	ldr	r2, [pc, #352]	; (8001160 <HAL_RCC_ClockConfig+0x1c4>)
 8000ffe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001002:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f003 0308 	and.w	r3, r3, #8
 800100c:	2b00      	cmp	r3, #0
 800100e:	d005      	beq.n	800101c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001010:	4b53      	ldr	r3, [pc, #332]	; (8001160 <HAL_RCC_ClockConfig+0x1c4>)
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	4a52      	ldr	r2, [pc, #328]	; (8001160 <HAL_RCC_ClockConfig+0x1c4>)
 8001016:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800101a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800101c:	4b50      	ldr	r3, [pc, #320]	; (8001160 <HAL_RCC_ClockConfig+0x1c4>)
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	689b      	ldr	r3, [r3, #8]
 8001028:	494d      	ldr	r1, [pc, #308]	; (8001160 <HAL_RCC_ClockConfig+0x1c4>)
 800102a:	4313      	orrs	r3, r2
 800102c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f003 0301 	and.w	r3, r3, #1
 8001036:	2b00      	cmp	r3, #0
 8001038:	d040      	beq.n	80010bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	2b01      	cmp	r3, #1
 8001040:	d107      	bne.n	8001052 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001042:	4b47      	ldr	r3, [pc, #284]	; (8001160 <HAL_RCC_ClockConfig+0x1c4>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800104a:	2b00      	cmp	r3, #0
 800104c:	d115      	bne.n	800107a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	e07f      	b.n	8001152 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	2b02      	cmp	r3, #2
 8001058:	d107      	bne.n	800106a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800105a:	4b41      	ldr	r3, [pc, #260]	; (8001160 <HAL_RCC_ClockConfig+0x1c4>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001062:	2b00      	cmp	r3, #0
 8001064:	d109      	bne.n	800107a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	e073      	b.n	8001152 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800106a:	4b3d      	ldr	r3, [pc, #244]	; (8001160 <HAL_RCC_ClockConfig+0x1c4>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f003 0302 	and.w	r3, r3, #2
 8001072:	2b00      	cmp	r3, #0
 8001074:	d101      	bne.n	800107a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e06b      	b.n	8001152 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800107a:	4b39      	ldr	r3, [pc, #228]	; (8001160 <HAL_RCC_ClockConfig+0x1c4>)
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f023 0203 	bic.w	r2, r3, #3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	4936      	ldr	r1, [pc, #216]	; (8001160 <HAL_RCC_ClockConfig+0x1c4>)
 8001088:	4313      	orrs	r3, r2
 800108a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800108c:	f7ff fa6e 	bl	800056c <HAL_GetTick>
 8001090:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001092:	e00a      	b.n	80010aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001094:	f7ff fa6a 	bl	800056c <HAL_GetTick>
 8001098:	4602      	mov	r2, r0
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	f241 3288 	movw	r2, #5000	; 0x1388
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d901      	bls.n	80010aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80010a6:	2303      	movs	r3, #3
 80010a8:	e053      	b.n	8001152 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010aa:	4b2d      	ldr	r3, [pc, #180]	; (8001160 <HAL_RCC_ClockConfig+0x1c4>)
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f003 020c 	and.w	r2, r3, #12
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d1eb      	bne.n	8001094 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80010bc:	4b27      	ldr	r3, [pc, #156]	; (800115c <HAL_RCC_ClockConfig+0x1c0>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f003 0307 	and.w	r3, r3, #7
 80010c4:	683a      	ldr	r2, [r7, #0]
 80010c6:	429a      	cmp	r2, r3
 80010c8:	d210      	bcs.n	80010ec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010ca:	4b24      	ldr	r3, [pc, #144]	; (800115c <HAL_RCC_ClockConfig+0x1c0>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f023 0207 	bic.w	r2, r3, #7
 80010d2:	4922      	ldr	r1, [pc, #136]	; (800115c <HAL_RCC_ClockConfig+0x1c0>)
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010da:	4b20      	ldr	r3, [pc, #128]	; (800115c <HAL_RCC_ClockConfig+0x1c0>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f003 0307 	and.w	r3, r3, #7
 80010e2:	683a      	ldr	r2, [r7, #0]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d001      	beq.n	80010ec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80010e8:	2301      	movs	r3, #1
 80010ea:	e032      	b.n	8001152 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f003 0304 	and.w	r3, r3, #4
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d008      	beq.n	800110a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80010f8:	4b19      	ldr	r3, [pc, #100]	; (8001160 <HAL_RCC_ClockConfig+0x1c4>)
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	4916      	ldr	r1, [pc, #88]	; (8001160 <HAL_RCC_ClockConfig+0x1c4>)
 8001106:	4313      	orrs	r3, r2
 8001108:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f003 0308 	and.w	r3, r3, #8
 8001112:	2b00      	cmp	r3, #0
 8001114:	d009      	beq.n	800112a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001116:	4b12      	ldr	r3, [pc, #72]	; (8001160 <HAL_RCC_ClockConfig+0x1c4>)
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	691b      	ldr	r3, [r3, #16]
 8001122:	00db      	lsls	r3, r3, #3
 8001124:	490e      	ldr	r1, [pc, #56]	; (8001160 <HAL_RCC_ClockConfig+0x1c4>)
 8001126:	4313      	orrs	r3, r2
 8001128:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800112a:	f000 f821 	bl	8001170 <HAL_RCC_GetSysClockFreq>
 800112e:	4602      	mov	r2, r0
 8001130:	4b0b      	ldr	r3, [pc, #44]	; (8001160 <HAL_RCC_ClockConfig+0x1c4>)
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	091b      	lsrs	r3, r3, #4
 8001136:	f003 030f 	and.w	r3, r3, #15
 800113a:	490a      	ldr	r1, [pc, #40]	; (8001164 <HAL_RCC_ClockConfig+0x1c8>)
 800113c:	5ccb      	ldrb	r3, [r1, r3]
 800113e:	fa22 f303 	lsr.w	r3, r2, r3
 8001142:	4a09      	ldr	r2, [pc, #36]	; (8001168 <HAL_RCC_ClockConfig+0x1cc>)
 8001144:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001146:	4b09      	ldr	r3, [pc, #36]	; (800116c <HAL_RCC_ClockConfig+0x1d0>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff f9cc 	bl	80004e8 <HAL_InitTick>

  return HAL_OK;
 8001150:	2300      	movs	r3, #0
}
 8001152:	4618      	mov	r0, r3
 8001154:	3710      	adds	r7, #16
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	40022000 	.word	0x40022000
 8001160:	40021000 	.word	0x40021000
 8001164:	08001ff4 	.word	0x08001ff4
 8001168:	20000000 	.word	0x20000000
 800116c:	20000004 	.word	0x20000004

08001170 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001170:	b480      	push	{r7}
 8001172:	b087      	sub	sp, #28
 8001174:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001176:	2300      	movs	r3, #0
 8001178:	60fb      	str	r3, [r7, #12]
 800117a:	2300      	movs	r3, #0
 800117c:	60bb      	str	r3, [r7, #8]
 800117e:	2300      	movs	r3, #0
 8001180:	617b      	str	r3, [r7, #20]
 8001182:	2300      	movs	r3, #0
 8001184:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001186:	2300      	movs	r3, #0
 8001188:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800118a:	4b1e      	ldr	r3, [pc, #120]	; (8001204 <HAL_RCC_GetSysClockFreq+0x94>)
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	f003 030c 	and.w	r3, r3, #12
 8001196:	2b04      	cmp	r3, #4
 8001198:	d002      	beq.n	80011a0 <HAL_RCC_GetSysClockFreq+0x30>
 800119a:	2b08      	cmp	r3, #8
 800119c:	d003      	beq.n	80011a6 <HAL_RCC_GetSysClockFreq+0x36>
 800119e:	e027      	b.n	80011f0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80011a0:	4b19      	ldr	r3, [pc, #100]	; (8001208 <HAL_RCC_GetSysClockFreq+0x98>)
 80011a2:	613b      	str	r3, [r7, #16]
      break;
 80011a4:	e027      	b.n	80011f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	0c9b      	lsrs	r3, r3, #18
 80011aa:	f003 030f 	and.w	r3, r3, #15
 80011ae:	4a17      	ldr	r2, [pc, #92]	; (800120c <HAL_RCC_GetSysClockFreq+0x9c>)
 80011b0:	5cd3      	ldrb	r3, [r2, r3]
 80011b2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d010      	beq.n	80011e0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80011be:	4b11      	ldr	r3, [pc, #68]	; (8001204 <HAL_RCC_GetSysClockFreq+0x94>)
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	0c5b      	lsrs	r3, r3, #17
 80011c4:	f003 0301 	and.w	r3, r3, #1
 80011c8:	4a11      	ldr	r2, [pc, #68]	; (8001210 <HAL_RCC_GetSysClockFreq+0xa0>)
 80011ca:	5cd3      	ldrb	r3, [r2, r3]
 80011cc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4a0d      	ldr	r2, [pc, #52]	; (8001208 <HAL_RCC_GetSysClockFreq+0x98>)
 80011d2:	fb03 f202 	mul.w	r2, r3, r2
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80011dc:	617b      	str	r3, [r7, #20]
 80011de:	e004      	b.n	80011ea <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	4a0c      	ldr	r2, [pc, #48]	; (8001214 <HAL_RCC_GetSysClockFreq+0xa4>)
 80011e4:	fb02 f303 	mul.w	r3, r2, r3
 80011e8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	613b      	str	r3, [r7, #16]
      break;
 80011ee:	e002      	b.n	80011f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80011f0:	4b05      	ldr	r3, [pc, #20]	; (8001208 <HAL_RCC_GetSysClockFreq+0x98>)
 80011f2:	613b      	str	r3, [r7, #16]
      break;
 80011f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80011f6:	693b      	ldr	r3, [r7, #16]
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	371c      	adds	r7, #28
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bc80      	pop	{r7}
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	40021000 	.word	0x40021000
 8001208:	007a1200 	.word	0x007a1200
 800120c:	0800200c 	.word	0x0800200c
 8001210:	0800201c 	.word	0x0800201c
 8001214:	003d0900 	.word	0x003d0900

08001218 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800121c:	4b02      	ldr	r3, [pc, #8]	; (8001228 <HAL_RCC_GetHCLKFreq+0x10>)
 800121e:	681b      	ldr	r3, [r3, #0]
}
 8001220:	4618      	mov	r0, r3
 8001222:	46bd      	mov	sp, r7
 8001224:	bc80      	pop	{r7}
 8001226:	4770      	bx	lr
 8001228:	20000000 	.word	0x20000000

0800122c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001230:	f7ff fff2 	bl	8001218 <HAL_RCC_GetHCLKFreq>
 8001234:	4602      	mov	r2, r0
 8001236:	4b05      	ldr	r3, [pc, #20]	; (800124c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	0a1b      	lsrs	r3, r3, #8
 800123c:	f003 0307 	and.w	r3, r3, #7
 8001240:	4903      	ldr	r1, [pc, #12]	; (8001250 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001242:	5ccb      	ldrb	r3, [r1, r3]
 8001244:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001248:	4618      	mov	r0, r3
 800124a:	bd80      	pop	{r7, pc}
 800124c:	40021000 	.word	0x40021000
 8001250:	08002004 	.word	0x08002004

08001254 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001258:	f7ff ffde 	bl	8001218 <HAL_RCC_GetHCLKFreq>
 800125c:	4602      	mov	r2, r0
 800125e:	4b05      	ldr	r3, [pc, #20]	; (8001274 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	0adb      	lsrs	r3, r3, #11
 8001264:	f003 0307 	and.w	r3, r3, #7
 8001268:	4903      	ldr	r1, [pc, #12]	; (8001278 <HAL_RCC_GetPCLK2Freq+0x24>)
 800126a:	5ccb      	ldrb	r3, [r1, r3]
 800126c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001270:	4618      	mov	r0, r3
 8001272:	bd80      	pop	{r7, pc}
 8001274:	40021000 	.word	0x40021000
 8001278:	08002004 	.word	0x08002004

0800127c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800127c:	b480      	push	{r7}
 800127e:	b085      	sub	sp, #20
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001284:	4b0a      	ldr	r3, [pc, #40]	; (80012b0 <RCC_Delay+0x34>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a0a      	ldr	r2, [pc, #40]	; (80012b4 <RCC_Delay+0x38>)
 800128a:	fba2 2303 	umull	r2, r3, r2, r3
 800128e:	0a5b      	lsrs	r3, r3, #9
 8001290:	687a      	ldr	r2, [r7, #4]
 8001292:	fb02 f303 	mul.w	r3, r2, r3
 8001296:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001298:	bf00      	nop
  }
  while (Delay --);
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	1e5a      	subs	r2, r3, #1
 800129e:	60fa      	str	r2, [r7, #12]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d1f9      	bne.n	8001298 <RCC_Delay+0x1c>
}
 80012a4:	bf00      	nop
 80012a6:	bf00      	nop
 80012a8:	3714      	adds	r7, #20
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bc80      	pop	{r7}
 80012ae:	4770      	bx	lr
 80012b0:	20000000 	.word	0x20000000
 80012b4:	10624dd3 	.word	0x10624dd3

080012b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d101      	bne.n	80012ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e042      	b.n	8001350 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d106      	bne.n	80012e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2200      	movs	r2, #0
 80012da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f7ff f816 	bl	8000310 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2224      	movs	r2, #36	; 0x24
 80012e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	68da      	ldr	r2, [r3, #12]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80012fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f000 f91d 	bl	800153c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	691a      	ldr	r2, [r3, #16]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001310:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	695a      	ldr	r2, [r3, #20]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001320:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	68da      	ldr	r2, [r3, #12]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001330:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2200      	movs	r2, #0
 8001336:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2220      	movs	r2, #32
 800133c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2220      	movs	r2, #32
 8001344:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2200      	movs	r2, #0
 800134c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800134e:	2300      	movs	r3, #0
}
 8001350:	4618      	mov	r0, r3
 8001352:	3708      	adds	r7, #8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}

08001358 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b08a      	sub	sp, #40	; 0x28
 800135c:	af02      	add	r7, sp, #8
 800135e:	60f8      	str	r0, [r7, #12]
 8001360:	60b9      	str	r1, [r7, #8]
 8001362:	603b      	str	r3, [r7, #0]
 8001364:	4613      	mov	r3, r2
 8001366:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001368:	2300      	movs	r3, #0
 800136a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001372:	b2db      	uxtb	r3, r3
 8001374:	2b20      	cmp	r3, #32
 8001376:	d16d      	bne.n	8001454 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d002      	beq.n	8001384 <HAL_UART_Transmit+0x2c>
 800137e:	88fb      	ldrh	r3, [r7, #6]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d101      	bne.n	8001388 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	e066      	b.n	8001456 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	2200      	movs	r2, #0
 800138c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	2221      	movs	r2, #33	; 0x21
 8001392:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001396:	f7ff f8e9 	bl	800056c <HAL_GetTick>
 800139a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	88fa      	ldrh	r2, [r7, #6]
 80013a0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	88fa      	ldrh	r2, [r7, #6]
 80013a6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80013b0:	d108      	bne.n	80013c4 <HAL_UART_Transmit+0x6c>
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	691b      	ldr	r3, [r3, #16]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d104      	bne.n	80013c4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80013ba:	2300      	movs	r3, #0
 80013bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80013be:	68bb      	ldr	r3, [r7, #8]
 80013c0:	61bb      	str	r3, [r7, #24]
 80013c2:	e003      	b.n	80013cc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80013c8:	2300      	movs	r3, #0
 80013ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80013cc:	e02a      	b.n	8001424 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	9300      	str	r3, [sp, #0]
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	2200      	movs	r2, #0
 80013d6:	2180      	movs	r1, #128	; 0x80
 80013d8:	68f8      	ldr	r0, [r7, #12]
 80013da:	f000 f840 	bl	800145e <UART_WaitOnFlagUntilTimeout>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80013e4:	2303      	movs	r3, #3
 80013e6:	e036      	b.n	8001456 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d10b      	bne.n	8001406 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	881b      	ldrh	r3, [r3, #0]
 80013f2:	461a      	mov	r2, r3
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80013fc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80013fe:	69bb      	ldr	r3, [r7, #24]
 8001400:	3302      	adds	r3, #2
 8001402:	61bb      	str	r3, [r7, #24]
 8001404:	e007      	b.n	8001416 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	781a      	ldrb	r2, [r3, #0]
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	3301      	adds	r3, #1
 8001414:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800141a:	b29b      	uxth	r3, r3
 800141c:	3b01      	subs	r3, #1
 800141e:	b29a      	uxth	r2, r3
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001428:	b29b      	uxth	r3, r3
 800142a:	2b00      	cmp	r3, #0
 800142c:	d1cf      	bne.n	80013ce <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	9300      	str	r3, [sp, #0]
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	2200      	movs	r2, #0
 8001436:	2140      	movs	r1, #64	; 0x40
 8001438:	68f8      	ldr	r0, [r7, #12]
 800143a:	f000 f810 	bl	800145e <UART_WaitOnFlagUntilTimeout>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001444:	2303      	movs	r3, #3
 8001446:	e006      	b.n	8001456 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	2220      	movs	r2, #32
 800144c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001450:	2300      	movs	r3, #0
 8001452:	e000      	b.n	8001456 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001454:	2302      	movs	r3, #2
  }
}
 8001456:	4618      	mov	r0, r3
 8001458:	3720      	adds	r7, #32
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}

0800145e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800145e:	b580      	push	{r7, lr}
 8001460:	b090      	sub	sp, #64	; 0x40
 8001462:	af00      	add	r7, sp, #0
 8001464:	60f8      	str	r0, [r7, #12]
 8001466:	60b9      	str	r1, [r7, #8]
 8001468:	603b      	str	r3, [r7, #0]
 800146a:	4613      	mov	r3, r2
 800146c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800146e:	e050      	b.n	8001512 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001470:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001472:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001476:	d04c      	beq.n	8001512 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001478:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800147a:	2b00      	cmp	r3, #0
 800147c:	d007      	beq.n	800148e <UART_WaitOnFlagUntilTimeout+0x30>
 800147e:	f7ff f875 	bl	800056c <HAL_GetTick>
 8001482:	4602      	mov	r2, r0
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	1ad3      	subs	r3, r2, r3
 8001488:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800148a:	429a      	cmp	r2, r3
 800148c:	d241      	bcs.n	8001512 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	330c      	adds	r3, #12
 8001494:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001498:	e853 3f00 	ldrex	r3, [r3]
 800149c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800149e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80014a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	330c      	adds	r3, #12
 80014ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80014ae:	637a      	str	r2, [r7, #52]	; 0x34
 80014b0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80014b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80014b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80014b6:	e841 2300 	strex	r3, r2, [r1]
 80014ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80014bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d1e5      	bne.n	800148e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	3314      	adds	r3, #20
 80014c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	e853 3f00 	ldrex	r3, [r3]
 80014d0:	613b      	str	r3, [r7, #16]
   return(result);
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	f023 0301 	bic.w	r3, r3, #1
 80014d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	3314      	adds	r3, #20
 80014e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80014e2:	623a      	str	r2, [r7, #32]
 80014e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80014e6:	69f9      	ldr	r1, [r7, #28]
 80014e8:	6a3a      	ldr	r2, [r7, #32]
 80014ea:	e841 2300 	strex	r3, r2, [r1]
 80014ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d1e5      	bne.n	80014c2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	2220      	movs	r2, #32
 80014fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	2220      	movs	r2, #32
 8001502:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	2200      	movs	r2, #0
 800150a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800150e:	2303      	movs	r3, #3
 8001510:	e00f      	b.n	8001532 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	4013      	ands	r3, r2
 800151c:	68ba      	ldr	r2, [r7, #8]
 800151e:	429a      	cmp	r2, r3
 8001520:	bf0c      	ite	eq
 8001522:	2301      	moveq	r3, #1
 8001524:	2300      	movne	r3, #0
 8001526:	b2db      	uxtb	r3, r3
 8001528:	461a      	mov	r2, r3
 800152a:	79fb      	ldrb	r3, [r7, #7]
 800152c:	429a      	cmp	r2, r3
 800152e:	d09f      	beq.n	8001470 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001530:	2300      	movs	r3, #0
}
 8001532:	4618      	mov	r0, r3
 8001534:	3740      	adds	r7, #64	; 0x40
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
	...

0800153c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	691b      	ldr	r3, [r3, #16]
 800154a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	68da      	ldr	r2, [r3, #12]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	430a      	orrs	r2, r1
 8001558:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	689a      	ldr	r2, [r3, #8]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	691b      	ldr	r3, [r3, #16]
 8001562:	431a      	orrs	r2, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	695b      	ldr	r3, [r3, #20]
 8001568:	4313      	orrs	r3, r2
 800156a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	68db      	ldr	r3, [r3, #12]
 8001572:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001576:	f023 030c 	bic.w	r3, r3, #12
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	6812      	ldr	r2, [r2, #0]
 800157e:	68b9      	ldr	r1, [r7, #8]
 8001580:	430b      	orrs	r3, r1
 8001582:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	695b      	ldr	r3, [r3, #20]
 800158a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	699a      	ldr	r2, [r3, #24]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	430a      	orrs	r2, r1
 8001598:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a2c      	ldr	r2, [pc, #176]	; (8001650 <UART_SetConfig+0x114>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d103      	bne.n	80015ac <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80015a4:	f7ff fe56 	bl	8001254 <HAL_RCC_GetPCLK2Freq>
 80015a8:	60f8      	str	r0, [r7, #12]
 80015aa:	e002      	b.n	80015b2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80015ac:	f7ff fe3e 	bl	800122c <HAL_RCC_GetPCLK1Freq>
 80015b0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80015b2:	68fa      	ldr	r2, [r7, #12]
 80015b4:	4613      	mov	r3, r2
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	4413      	add	r3, r2
 80015ba:	009a      	lsls	r2, r3, #2
 80015bc:	441a      	add	r2, r3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80015c8:	4a22      	ldr	r2, [pc, #136]	; (8001654 <UART_SetConfig+0x118>)
 80015ca:	fba2 2303 	umull	r2, r3, r2, r3
 80015ce:	095b      	lsrs	r3, r3, #5
 80015d0:	0119      	lsls	r1, r3, #4
 80015d2:	68fa      	ldr	r2, [r7, #12]
 80015d4:	4613      	mov	r3, r2
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	4413      	add	r3, r2
 80015da:	009a      	lsls	r2, r3, #2
 80015dc:	441a      	add	r2, r3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80015e8:	4b1a      	ldr	r3, [pc, #104]	; (8001654 <UART_SetConfig+0x118>)
 80015ea:	fba3 0302 	umull	r0, r3, r3, r2
 80015ee:	095b      	lsrs	r3, r3, #5
 80015f0:	2064      	movs	r0, #100	; 0x64
 80015f2:	fb00 f303 	mul.w	r3, r0, r3
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	011b      	lsls	r3, r3, #4
 80015fa:	3332      	adds	r3, #50	; 0x32
 80015fc:	4a15      	ldr	r2, [pc, #84]	; (8001654 <UART_SetConfig+0x118>)
 80015fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001602:	095b      	lsrs	r3, r3, #5
 8001604:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001608:	4419      	add	r1, r3
 800160a:	68fa      	ldr	r2, [r7, #12]
 800160c:	4613      	mov	r3, r2
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	4413      	add	r3, r2
 8001612:	009a      	lsls	r2, r3, #2
 8001614:	441a      	add	r2, r3
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001620:	4b0c      	ldr	r3, [pc, #48]	; (8001654 <UART_SetConfig+0x118>)
 8001622:	fba3 0302 	umull	r0, r3, r3, r2
 8001626:	095b      	lsrs	r3, r3, #5
 8001628:	2064      	movs	r0, #100	; 0x64
 800162a:	fb00 f303 	mul.w	r3, r0, r3
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	011b      	lsls	r3, r3, #4
 8001632:	3332      	adds	r3, #50	; 0x32
 8001634:	4a07      	ldr	r2, [pc, #28]	; (8001654 <UART_SetConfig+0x118>)
 8001636:	fba2 2303 	umull	r2, r3, r2, r3
 800163a:	095b      	lsrs	r3, r3, #5
 800163c:	f003 020f 	and.w	r2, r3, #15
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	440a      	add	r2, r1
 8001646:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001648:	bf00      	nop
 800164a:	3710      	adds	r7, #16
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	40013800 	.word	0x40013800
 8001654:	51eb851f 	.word	0x51eb851f

08001658 <siprintf>:
 8001658:	b40e      	push	{r1, r2, r3}
 800165a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800165e:	b500      	push	{lr}
 8001660:	b09c      	sub	sp, #112	; 0x70
 8001662:	ab1d      	add	r3, sp, #116	; 0x74
 8001664:	9002      	str	r0, [sp, #8]
 8001666:	9006      	str	r0, [sp, #24]
 8001668:	9107      	str	r1, [sp, #28]
 800166a:	9104      	str	r1, [sp, #16]
 800166c:	4808      	ldr	r0, [pc, #32]	; (8001690 <siprintf+0x38>)
 800166e:	4909      	ldr	r1, [pc, #36]	; (8001694 <siprintf+0x3c>)
 8001670:	f853 2b04 	ldr.w	r2, [r3], #4
 8001674:	9105      	str	r1, [sp, #20]
 8001676:	6800      	ldr	r0, [r0, #0]
 8001678:	a902      	add	r1, sp, #8
 800167a:	9301      	str	r3, [sp, #4]
 800167c:	f000 f98e 	bl	800199c <_svfiprintf_r>
 8001680:	2200      	movs	r2, #0
 8001682:	9b02      	ldr	r3, [sp, #8]
 8001684:	701a      	strb	r2, [r3, #0]
 8001686:	b01c      	add	sp, #112	; 0x70
 8001688:	f85d eb04 	ldr.w	lr, [sp], #4
 800168c:	b003      	add	sp, #12
 800168e:	4770      	bx	lr
 8001690:	20000058 	.word	0x20000058
 8001694:	ffff0208 	.word	0xffff0208

08001698 <memset>:
 8001698:	4603      	mov	r3, r0
 800169a:	4402      	add	r2, r0
 800169c:	4293      	cmp	r3, r2
 800169e:	d100      	bne.n	80016a2 <memset+0xa>
 80016a0:	4770      	bx	lr
 80016a2:	f803 1b01 	strb.w	r1, [r3], #1
 80016a6:	e7f9      	b.n	800169c <memset+0x4>

080016a8 <__errno>:
 80016a8:	4b01      	ldr	r3, [pc, #4]	; (80016b0 <__errno+0x8>)
 80016aa:	6818      	ldr	r0, [r3, #0]
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	20000058 	.word	0x20000058

080016b4 <__libc_init_array>:
 80016b4:	b570      	push	{r4, r5, r6, lr}
 80016b6:	2600      	movs	r6, #0
 80016b8:	4d0c      	ldr	r5, [pc, #48]	; (80016ec <__libc_init_array+0x38>)
 80016ba:	4c0d      	ldr	r4, [pc, #52]	; (80016f0 <__libc_init_array+0x3c>)
 80016bc:	1b64      	subs	r4, r4, r5
 80016be:	10a4      	asrs	r4, r4, #2
 80016c0:	42a6      	cmp	r6, r4
 80016c2:	d109      	bne.n	80016d8 <__libc_init_array+0x24>
 80016c4:	f000 fc7a 	bl	8001fbc <_init>
 80016c8:	2600      	movs	r6, #0
 80016ca:	4d0a      	ldr	r5, [pc, #40]	; (80016f4 <__libc_init_array+0x40>)
 80016cc:	4c0a      	ldr	r4, [pc, #40]	; (80016f8 <__libc_init_array+0x44>)
 80016ce:	1b64      	subs	r4, r4, r5
 80016d0:	10a4      	asrs	r4, r4, #2
 80016d2:	42a6      	cmp	r6, r4
 80016d4:	d105      	bne.n	80016e2 <__libc_init_array+0x2e>
 80016d6:	bd70      	pop	{r4, r5, r6, pc}
 80016d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80016dc:	4798      	blx	r3
 80016de:	3601      	adds	r6, #1
 80016e0:	e7ee      	b.n	80016c0 <__libc_init_array+0xc>
 80016e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80016e6:	4798      	blx	r3
 80016e8:	3601      	adds	r6, #1
 80016ea:	e7f2      	b.n	80016d2 <__libc_init_array+0x1e>
 80016ec:	08002054 	.word	0x08002054
 80016f0:	08002054 	.word	0x08002054
 80016f4:	08002054 	.word	0x08002054
 80016f8:	08002058 	.word	0x08002058

080016fc <__retarget_lock_acquire_recursive>:
 80016fc:	4770      	bx	lr

080016fe <__retarget_lock_release_recursive>:
 80016fe:	4770      	bx	lr

08001700 <_free_r>:
 8001700:	b538      	push	{r3, r4, r5, lr}
 8001702:	4605      	mov	r5, r0
 8001704:	2900      	cmp	r1, #0
 8001706:	d040      	beq.n	800178a <_free_r+0x8a>
 8001708:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800170c:	1f0c      	subs	r4, r1, #4
 800170e:	2b00      	cmp	r3, #0
 8001710:	bfb8      	it	lt
 8001712:	18e4      	addlt	r4, r4, r3
 8001714:	f000 f8dc 	bl	80018d0 <__malloc_lock>
 8001718:	4a1c      	ldr	r2, [pc, #112]	; (800178c <_free_r+0x8c>)
 800171a:	6813      	ldr	r3, [r2, #0]
 800171c:	b933      	cbnz	r3, 800172c <_free_r+0x2c>
 800171e:	6063      	str	r3, [r4, #4]
 8001720:	6014      	str	r4, [r2, #0]
 8001722:	4628      	mov	r0, r5
 8001724:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001728:	f000 b8d8 	b.w	80018dc <__malloc_unlock>
 800172c:	42a3      	cmp	r3, r4
 800172e:	d908      	bls.n	8001742 <_free_r+0x42>
 8001730:	6820      	ldr	r0, [r4, #0]
 8001732:	1821      	adds	r1, r4, r0
 8001734:	428b      	cmp	r3, r1
 8001736:	bf01      	itttt	eq
 8001738:	6819      	ldreq	r1, [r3, #0]
 800173a:	685b      	ldreq	r3, [r3, #4]
 800173c:	1809      	addeq	r1, r1, r0
 800173e:	6021      	streq	r1, [r4, #0]
 8001740:	e7ed      	b.n	800171e <_free_r+0x1e>
 8001742:	461a      	mov	r2, r3
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	b10b      	cbz	r3, 800174c <_free_r+0x4c>
 8001748:	42a3      	cmp	r3, r4
 800174a:	d9fa      	bls.n	8001742 <_free_r+0x42>
 800174c:	6811      	ldr	r1, [r2, #0]
 800174e:	1850      	adds	r0, r2, r1
 8001750:	42a0      	cmp	r0, r4
 8001752:	d10b      	bne.n	800176c <_free_r+0x6c>
 8001754:	6820      	ldr	r0, [r4, #0]
 8001756:	4401      	add	r1, r0
 8001758:	1850      	adds	r0, r2, r1
 800175a:	4283      	cmp	r3, r0
 800175c:	6011      	str	r1, [r2, #0]
 800175e:	d1e0      	bne.n	8001722 <_free_r+0x22>
 8001760:	6818      	ldr	r0, [r3, #0]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	4408      	add	r0, r1
 8001766:	6010      	str	r0, [r2, #0]
 8001768:	6053      	str	r3, [r2, #4]
 800176a:	e7da      	b.n	8001722 <_free_r+0x22>
 800176c:	d902      	bls.n	8001774 <_free_r+0x74>
 800176e:	230c      	movs	r3, #12
 8001770:	602b      	str	r3, [r5, #0]
 8001772:	e7d6      	b.n	8001722 <_free_r+0x22>
 8001774:	6820      	ldr	r0, [r4, #0]
 8001776:	1821      	adds	r1, r4, r0
 8001778:	428b      	cmp	r3, r1
 800177a:	bf01      	itttt	eq
 800177c:	6819      	ldreq	r1, [r3, #0]
 800177e:	685b      	ldreq	r3, [r3, #4]
 8001780:	1809      	addeq	r1, r1, r0
 8001782:	6021      	streq	r1, [r4, #0]
 8001784:	6063      	str	r3, [r4, #4]
 8001786:	6054      	str	r4, [r2, #4]
 8001788:	e7cb      	b.n	8001722 <_free_r+0x22>
 800178a:	bd38      	pop	{r3, r4, r5, pc}
 800178c:	20000208 	.word	0x20000208

08001790 <sbrk_aligned>:
 8001790:	b570      	push	{r4, r5, r6, lr}
 8001792:	4e0e      	ldr	r6, [pc, #56]	; (80017cc <sbrk_aligned+0x3c>)
 8001794:	460c      	mov	r4, r1
 8001796:	6831      	ldr	r1, [r6, #0]
 8001798:	4605      	mov	r5, r0
 800179a:	b911      	cbnz	r1, 80017a2 <sbrk_aligned+0x12>
 800179c:	f000 fbaa 	bl	8001ef4 <_sbrk_r>
 80017a0:	6030      	str	r0, [r6, #0]
 80017a2:	4621      	mov	r1, r4
 80017a4:	4628      	mov	r0, r5
 80017a6:	f000 fba5 	bl	8001ef4 <_sbrk_r>
 80017aa:	1c43      	adds	r3, r0, #1
 80017ac:	d00a      	beq.n	80017c4 <sbrk_aligned+0x34>
 80017ae:	1cc4      	adds	r4, r0, #3
 80017b0:	f024 0403 	bic.w	r4, r4, #3
 80017b4:	42a0      	cmp	r0, r4
 80017b6:	d007      	beq.n	80017c8 <sbrk_aligned+0x38>
 80017b8:	1a21      	subs	r1, r4, r0
 80017ba:	4628      	mov	r0, r5
 80017bc:	f000 fb9a 	bl	8001ef4 <_sbrk_r>
 80017c0:	3001      	adds	r0, #1
 80017c2:	d101      	bne.n	80017c8 <sbrk_aligned+0x38>
 80017c4:	f04f 34ff 	mov.w	r4, #4294967295
 80017c8:	4620      	mov	r0, r4
 80017ca:	bd70      	pop	{r4, r5, r6, pc}
 80017cc:	2000020c 	.word	0x2000020c

080017d0 <_malloc_r>:
 80017d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80017d4:	1ccd      	adds	r5, r1, #3
 80017d6:	f025 0503 	bic.w	r5, r5, #3
 80017da:	3508      	adds	r5, #8
 80017dc:	2d0c      	cmp	r5, #12
 80017de:	bf38      	it	cc
 80017e0:	250c      	movcc	r5, #12
 80017e2:	2d00      	cmp	r5, #0
 80017e4:	4607      	mov	r7, r0
 80017e6:	db01      	blt.n	80017ec <_malloc_r+0x1c>
 80017e8:	42a9      	cmp	r1, r5
 80017ea:	d905      	bls.n	80017f8 <_malloc_r+0x28>
 80017ec:	230c      	movs	r3, #12
 80017ee:	2600      	movs	r6, #0
 80017f0:	603b      	str	r3, [r7, #0]
 80017f2:	4630      	mov	r0, r6
 80017f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80017f8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80018cc <_malloc_r+0xfc>
 80017fc:	f000 f868 	bl	80018d0 <__malloc_lock>
 8001800:	f8d8 3000 	ldr.w	r3, [r8]
 8001804:	461c      	mov	r4, r3
 8001806:	bb5c      	cbnz	r4, 8001860 <_malloc_r+0x90>
 8001808:	4629      	mov	r1, r5
 800180a:	4638      	mov	r0, r7
 800180c:	f7ff ffc0 	bl	8001790 <sbrk_aligned>
 8001810:	1c43      	adds	r3, r0, #1
 8001812:	4604      	mov	r4, r0
 8001814:	d155      	bne.n	80018c2 <_malloc_r+0xf2>
 8001816:	f8d8 4000 	ldr.w	r4, [r8]
 800181a:	4626      	mov	r6, r4
 800181c:	2e00      	cmp	r6, #0
 800181e:	d145      	bne.n	80018ac <_malloc_r+0xdc>
 8001820:	2c00      	cmp	r4, #0
 8001822:	d048      	beq.n	80018b6 <_malloc_r+0xe6>
 8001824:	6823      	ldr	r3, [r4, #0]
 8001826:	4631      	mov	r1, r6
 8001828:	4638      	mov	r0, r7
 800182a:	eb04 0903 	add.w	r9, r4, r3
 800182e:	f000 fb61 	bl	8001ef4 <_sbrk_r>
 8001832:	4581      	cmp	r9, r0
 8001834:	d13f      	bne.n	80018b6 <_malloc_r+0xe6>
 8001836:	6821      	ldr	r1, [r4, #0]
 8001838:	4638      	mov	r0, r7
 800183a:	1a6d      	subs	r5, r5, r1
 800183c:	4629      	mov	r1, r5
 800183e:	f7ff ffa7 	bl	8001790 <sbrk_aligned>
 8001842:	3001      	adds	r0, #1
 8001844:	d037      	beq.n	80018b6 <_malloc_r+0xe6>
 8001846:	6823      	ldr	r3, [r4, #0]
 8001848:	442b      	add	r3, r5
 800184a:	6023      	str	r3, [r4, #0]
 800184c:	f8d8 3000 	ldr.w	r3, [r8]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d038      	beq.n	80018c6 <_malloc_r+0xf6>
 8001854:	685a      	ldr	r2, [r3, #4]
 8001856:	42a2      	cmp	r2, r4
 8001858:	d12b      	bne.n	80018b2 <_malloc_r+0xe2>
 800185a:	2200      	movs	r2, #0
 800185c:	605a      	str	r2, [r3, #4]
 800185e:	e00f      	b.n	8001880 <_malloc_r+0xb0>
 8001860:	6822      	ldr	r2, [r4, #0]
 8001862:	1b52      	subs	r2, r2, r5
 8001864:	d41f      	bmi.n	80018a6 <_malloc_r+0xd6>
 8001866:	2a0b      	cmp	r2, #11
 8001868:	d917      	bls.n	800189a <_malloc_r+0xca>
 800186a:	1961      	adds	r1, r4, r5
 800186c:	42a3      	cmp	r3, r4
 800186e:	6025      	str	r5, [r4, #0]
 8001870:	bf18      	it	ne
 8001872:	6059      	strne	r1, [r3, #4]
 8001874:	6863      	ldr	r3, [r4, #4]
 8001876:	bf08      	it	eq
 8001878:	f8c8 1000 	streq.w	r1, [r8]
 800187c:	5162      	str	r2, [r4, r5]
 800187e:	604b      	str	r3, [r1, #4]
 8001880:	4638      	mov	r0, r7
 8001882:	f104 060b 	add.w	r6, r4, #11
 8001886:	f000 f829 	bl	80018dc <__malloc_unlock>
 800188a:	f026 0607 	bic.w	r6, r6, #7
 800188e:	1d23      	adds	r3, r4, #4
 8001890:	1af2      	subs	r2, r6, r3
 8001892:	d0ae      	beq.n	80017f2 <_malloc_r+0x22>
 8001894:	1b9b      	subs	r3, r3, r6
 8001896:	50a3      	str	r3, [r4, r2]
 8001898:	e7ab      	b.n	80017f2 <_malloc_r+0x22>
 800189a:	42a3      	cmp	r3, r4
 800189c:	6862      	ldr	r2, [r4, #4]
 800189e:	d1dd      	bne.n	800185c <_malloc_r+0x8c>
 80018a0:	f8c8 2000 	str.w	r2, [r8]
 80018a4:	e7ec      	b.n	8001880 <_malloc_r+0xb0>
 80018a6:	4623      	mov	r3, r4
 80018a8:	6864      	ldr	r4, [r4, #4]
 80018aa:	e7ac      	b.n	8001806 <_malloc_r+0x36>
 80018ac:	4634      	mov	r4, r6
 80018ae:	6876      	ldr	r6, [r6, #4]
 80018b0:	e7b4      	b.n	800181c <_malloc_r+0x4c>
 80018b2:	4613      	mov	r3, r2
 80018b4:	e7cc      	b.n	8001850 <_malloc_r+0x80>
 80018b6:	230c      	movs	r3, #12
 80018b8:	4638      	mov	r0, r7
 80018ba:	603b      	str	r3, [r7, #0]
 80018bc:	f000 f80e 	bl	80018dc <__malloc_unlock>
 80018c0:	e797      	b.n	80017f2 <_malloc_r+0x22>
 80018c2:	6025      	str	r5, [r4, #0]
 80018c4:	e7dc      	b.n	8001880 <_malloc_r+0xb0>
 80018c6:	605b      	str	r3, [r3, #4]
 80018c8:	deff      	udf	#255	; 0xff
 80018ca:	bf00      	nop
 80018cc:	20000208 	.word	0x20000208

080018d0 <__malloc_lock>:
 80018d0:	4801      	ldr	r0, [pc, #4]	; (80018d8 <__malloc_lock+0x8>)
 80018d2:	f7ff bf13 	b.w	80016fc <__retarget_lock_acquire_recursive>
 80018d6:	bf00      	nop
 80018d8:	20000204 	.word	0x20000204

080018dc <__malloc_unlock>:
 80018dc:	4801      	ldr	r0, [pc, #4]	; (80018e4 <__malloc_unlock+0x8>)
 80018de:	f7ff bf0e 	b.w	80016fe <__retarget_lock_release_recursive>
 80018e2:	bf00      	nop
 80018e4:	20000204 	.word	0x20000204

080018e8 <__ssputs_r>:
 80018e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80018ec:	461f      	mov	r7, r3
 80018ee:	688e      	ldr	r6, [r1, #8]
 80018f0:	4682      	mov	sl, r0
 80018f2:	42be      	cmp	r6, r7
 80018f4:	460c      	mov	r4, r1
 80018f6:	4690      	mov	r8, r2
 80018f8:	680b      	ldr	r3, [r1, #0]
 80018fa:	d82c      	bhi.n	8001956 <__ssputs_r+0x6e>
 80018fc:	898a      	ldrh	r2, [r1, #12]
 80018fe:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001902:	d026      	beq.n	8001952 <__ssputs_r+0x6a>
 8001904:	6965      	ldr	r5, [r4, #20]
 8001906:	6909      	ldr	r1, [r1, #16]
 8001908:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800190c:	eba3 0901 	sub.w	r9, r3, r1
 8001910:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001914:	1c7b      	adds	r3, r7, #1
 8001916:	444b      	add	r3, r9
 8001918:	106d      	asrs	r5, r5, #1
 800191a:	429d      	cmp	r5, r3
 800191c:	bf38      	it	cc
 800191e:	461d      	movcc	r5, r3
 8001920:	0553      	lsls	r3, r2, #21
 8001922:	d527      	bpl.n	8001974 <__ssputs_r+0x8c>
 8001924:	4629      	mov	r1, r5
 8001926:	f7ff ff53 	bl	80017d0 <_malloc_r>
 800192a:	4606      	mov	r6, r0
 800192c:	b360      	cbz	r0, 8001988 <__ssputs_r+0xa0>
 800192e:	464a      	mov	r2, r9
 8001930:	6921      	ldr	r1, [r4, #16]
 8001932:	f000 fafd 	bl	8001f30 <memcpy>
 8001936:	89a3      	ldrh	r3, [r4, #12]
 8001938:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800193c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001940:	81a3      	strh	r3, [r4, #12]
 8001942:	6126      	str	r6, [r4, #16]
 8001944:	444e      	add	r6, r9
 8001946:	6026      	str	r6, [r4, #0]
 8001948:	463e      	mov	r6, r7
 800194a:	6165      	str	r5, [r4, #20]
 800194c:	eba5 0509 	sub.w	r5, r5, r9
 8001950:	60a5      	str	r5, [r4, #8]
 8001952:	42be      	cmp	r6, r7
 8001954:	d900      	bls.n	8001958 <__ssputs_r+0x70>
 8001956:	463e      	mov	r6, r7
 8001958:	4632      	mov	r2, r6
 800195a:	4641      	mov	r1, r8
 800195c:	6820      	ldr	r0, [r4, #0]
 800195e:	f000 faaf 	bl	8001ec0 <memmove>
 8001962:	2000      	movs	r0, #0
 8001964:	68a3      	ldr	r3, [r4, #8]
 8001966:	1b9b      	subs	r3, r3, r6
 8001968:	60a3      	str	r3, [r4, #8]
 800196a:	6823      	ldr	r3, [r4, #0]
 800196c:	4433      	add	r3, r6
 800196e:	6023      	str	r3, [r4, #0]
 8001970:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001974:	462a      	mov	r2, r5
 8001976:	f000 fae9 	bl	8001f4c <_realloc_r>
 800197a:	4606      	mov	r6, r0
 800197c:	2800      	cmp	r0, #0
 800197e:	d1e0      	bne.n	8001942 <__ssputs_r+0x5a>
 8001980:	4650      	mov	r0, sl
 8001982:	6921      	ldr	r1, [r4, #16]
 8001984:	f7ff febc 	bl	8001700 <_free_r>
 8001988:	230c      	movs	r3, #12
 800198a:	f8ca 3000 	str.w	r3, [sl]
 800198e:	89a3      	ldrh	r3, [r4, #12]
 8001990:	f04f 30ff 	mov.w	r0, #4294967295
 8001994:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001998:	81a3      	strh	r3, [r4, #12]
 800199a:	e7e9      	b.n	8001970 <__ssputs_r+0x88>

0800199c <_svfiprintf_r>:
 800199c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019a0:	4698      	mov	r8, r3
 80019a2:	898b      	ldrh	r3, [r1, #12]
 80019a4:	4607      	mov	r7, r0
 80019a6:	061b      	lsls	r3, r3, #24
 80019a8:	460d      	mov	r5, r1
 80019aa:	4614      	mov	r4, r2
 80019ac:	b09d      	sub	sp, #116	; 0x74
 80019ae:	d50e      	bpl.n	80019ce <_svfiprintf_r+0x32>
 80019b0:	690b      	ldr	r3, [r1, #16]
 80019b2:	b963      	cbnz	r3, 80019ce <_svfiprintf_r+0x32>
 80019b4:	2140      	movs	r1, #64	; 0x40
 80019b6:	f7ff ff0b 	bl	80017d0 <_malloc_r>
 80019ba:	6028      	str	r0, [r5, #0]
 80019bc:	6128      	str	r0, [r5, #16]
 80019be:	b920      	cbnz	r0, 80019ca <_svfiprintf_r+0x2e>
 80019c0:	230c      	movs	r3, #12
 80019c2:	603b      	str	r3, [r7, #0]
 80019c4:	f04f 30ff 	mov.w	r0, #4294967295
 80019c8:	e0d0      	b.n	8001b6c <_svfiprintf_r+0x1d0>
 80019ca:	2340      	movs	r3, #64	; 0x40
 80019cc:	616b      	str	r3, [r5, #20]
 80019ce:	2300      	movs	r3, #0
 80019d0:	9309      	str	r3, [sp, #36]	; 0x24
 80019d2:	2320      	movs	r3, #32
 80019d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80019d8:	2330      	movs	r3, #48	; 0x30
 80019da:	f04f 0901 	mov.w	r9, #1
 80019de:	f8cd 800c 	str.w	r8, [sp, #12]
 80019e2:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8001b84 <_svfiprintf_r+0x1e8>
 80019e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80019ea:	4623      	mov	r3, r4
 80019ec:	469a      	mov	sl, r3
 80019ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80019f2:	b10a      	cbz	r2, 80019f8 <_svfiprintf_r+0x5c>
 80019f4:	2a25      	cmp	r2, #37	; 0x25
 80019f6:	d1f9      	bne.n	80019ec <_svfiprintf_r+0x50>
 80019f8:	ebba 0b04 	subs.w	fp, sl, r4
 80019fc:	d00b      	beq.n	8001a16 <_svfiprintf_r+0x7a>
 80019fe:	465b      	mov	r3, fp
 8001a00:	4622      	mov	r2, r4
 8001a02:	4629      	mov	r1, r5
 8001a04:	4638      	mov	r0, r7
 8001a06:	f7ff ff6f 	bl	80018e8 <__ssputs_r>
 8001a0a:	3001      	adds	r0, #1
 8001a0c:	f000 80a9 	beq.w	8001b62 <_svfiprintf_r+0x1c6>
 8001a10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001a12:	445a      	add	r2, fp
 8001a14:	9209      	str	r2, [sp, #36]	; 0x24
 8001a16:	f89a 3000 	ldrb.w	r3, [sl]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	f000 80a1 	beq.w	8001b62 <_svfiprintf_r+0x1c6>
 8001a20:	2300      	movs	r3, #0
 8001a22:	f04f 32ff 	mov.w	r2, #4294967295
 8001a26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001a2a:	f10a 0a01 	add.w	sl, sl, #1
 8001a2e:	9304      	str	r3, [sp, #16]
 8001a30:	9307      	str	r3, [sp, #28]
 8001a32:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001a36:	931a      	str	r3, [sp, #104]	; 0x68
 8001a38:	4654      	mov	r4, sl
 8001a3a:	2205      	movs	r2, #5
 8001a3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001a40:	4850      	ldr	r0, [pc, #320]	; (8001b84 <_svfiprintf_r+0x1e8>)
 8001a42:	f000 fa67 	bl	8001f14 <memchr>
 8001a46:	9a04      	ldr	r2, [sp, #16]
 8001a48:	b9d8      	cbnz	r0, 8001a82 <_svfiprintf_r+0xe6>
 8001a4a:	06d0      	lsls	r0, r2, #27
 8001a4c:	bf44      	itt	mi
 8001a4e:	2320      	movmi	r3, #32
 8001a50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001a54:	0711      	lsls	r1, r2, #28
 8001a56:	bf44      	itt	mi
 8001a58:	232b      	movmi	r3, #43	; 0x2b
 8001a5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001a5e:	f89a 3000 	ldrb.w	r3, [sl]
 8001a62:	2b2a      	cmp	r3, #42	; 0x2a
 8001a64:	d015      	beq.n	8001a92 <_svfiprintf_r+0xf6>
 8001a66:	4654      	mov	r4, sl
 8001a68:	2000      	movs	r0, #0
 8001a6a:	f04f 0c0a 	mov.w	ip, #10
 8001a6e:	9a07      	ldr	r2, [sp, #28]
 8001a70:	4621      	mov	r1, r4
 8001a72:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001a76:	3b30      	subs	r3, #48	; 0x30
 8001a78:	2b09      	cmp	r3, #9
 8001a7a:	d94d      	bls.n	8001b18 <_svfiprintf_r+0x17c>
 8001a7c:	b1b0      	cbz	r0, 8001aac <_svfiprintf_r+0x110>
 8001a7e:	9207      	str	r2, [sp, #28]
 8001a80:	e014      	b.n	8001aac <_svfiprintf_r+0x110>
 8001a82:	eba0 0308 	sub.w	r3, r0, r8
 8001a86:	fa09 f303 	lsl.w	r3, r9, r3
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	46a2      	mov	sl, r4
 8001a8e:	9304      	str	r3, [sp, #16]
 8001a90:	e7d2      	b.n	8001a38 <_svfiprintf_r+0x9c>
 8001a92:	9b03      	ldr	r3, [sp, #12]
 8001a94:	1d19      	adds	r1, r3, #4
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	9103      	str	r1, [sp, #12]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	bfbb      	ittet	lt
 8001a9e:	425b      	neglt	r3, r3
 8001aa0:	f042 0202 	orrlt.w	r2, r2, #2
 8001aa4:	9307      	strge	r3, [sp, #28]
 8001aa6:	9307      	strlt	r3, [sp, #28]
 8001aa8:	bfb8      	it	lt
 8001aaa:	9204      	strlt	r2, [sp, #16]
 8001aac:	7823      	ldrb	r3, [r4, #0]
 8001aae:	2b2e      	cmp	r3, #46	; 0x2e
 8001ab0:	d10c      	bne.n	8001acc <_svfiprintf_r+0x130>
 8001ab2:	7863      	ldrb	r3, [r4, #1]
 8001ab4:	2b2a      	cmp	r3, #42	; 0x2a
 8001ab6:	d134      	bne.n	8001b22 <_svfiprintf_r+0x186>
 8001ab8:	9b03      	ldr	r3, [sp, #12]
 8001aba:	3402      	adds	r4, #2
 8001abc:	1d1a      	adds	r2, r3, #4
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	9203      	str	r2, [sp, #12]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	bfb8      	it	lt
 8001ac6:	f04f 33ff 	movlt.w	r3, #4294967295
 8001aca:	9305      	str	r3, [sp, #20]
 8001acc:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8001b88 <_svfiprintf_r+0x1ec>
 8001ad0:	2203      	movs	r2, #3
 8001ad2:	4650      	mov	r0, sl
 8001ad4:	7821      	ldrb	r1, [r4, #0]
 8001ad6:	f000 fa1d 	bl	8001f14 <memchr>
 8001ada:	b138      	cbz	r0, 8001aec <_svfiprintf_r+0x150>
 8001adc:	2240      	movs	r2, #64	; 0x40
 8001ade:	9b04      	ldr	r3, [sp, #16]
 8001ae0:	eba0 000a 	sub.w	r0, r0, sl
 8001ae4:	4082      	lsls	r2, r0
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	3401      	adds	r4, #1
 8001aea:	9304      	str	r3, [sp, #16]
 8001aec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001af0:	2206      	movs	r2, #6
 8001af2:	4826      	ldr	r0, [pc, #152]	; (8001b8c <_svfiprintf_r+0x1f0>)
 8001af4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001af8:	f000 fa0c 	bl	8001f14 <memchr>
 8001afc:	2800      	cmp	r0, #0
 8001afe:	d038      	beq.n	8001b72 <_svfiprintf_r+0x1d6>
 8001b00:	4b23      	ldr	r3, [pc, #140]	; (8001b90 <_svfiprintf_r+0x1f4>)
 8001b02:	bb1b      	cbnz	r3, 8001b4c <_svfiprintf_r+0x1b0>
 8001b04:	9b03      	ldr	r3, [sp, #12]
 8001b06:	3307      	adds	r3, #7
 8001b08:	f023 0307 	bic.w	r3, r3, #7
 8001b0c:	3308      	adds	r3, #8
 8001b0e:	9303      	str	r3, [sp, #12]
 8001b10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001b12:	4433      	add	r3, r6
 8001b14:	9309      	str	r3, [sp, #36]	; 0x24
 8001b16:	e768      	b.n	80019ea <_svfiprintf_r+0x4e>
 8001b18:	460c      	mov	r4, r1
 8001b1a:	2001      	movs	r0, #1
 8001b1c:	fb0c 3202 	mla	r2, ip, r2, r3
 8001b20:	e7a6      	b.n	8001a70 <_svfiprintf_r+0xd4>
 8001b22:	2300      	movs	r3, #0
 8001b24:	f04f 0c0a 	mov.w	ip, #10
 8001b28:	4619      	mov	r1, r3
 8001b2a:	3401      	adds	r4, #1
 8001b2c:	9305      	str	r3, [sp, #20]
 8001b2e:	4620      	mov	r0, r4
 8001b30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001b34:	3a30      	subs	r2, #48	; 0x30
 8001b36:	2a09      	cmp	r2, #9
 8001b38:	d903      	bls.n	8001b42 <_svfiprintf_r+0x1a6>
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d0c6      	beq.n	8001acc <_svfiprintf_r+0x130>
 8001b3e:	9105      	str	r1, [sp, #20]
 8001b40:	e7c4      	b.n	8001acc <_svfiprintf_r+0x130>
 8001b42:	4604      	mov	r4, r0
 8001b44:	2301      	movs	r3, #1
 8001b46:	fb0c 2101 	mla	r1, ip, r1, r2
 8001b4a:	e7f0      	b.n	8001b2e <_svfiprintf_r+0x192>
 8001b4c:	ab03      	add	r3, sp, #12
 8001b4e:	9300      	str	r3, [sp, #0]
 8001b50:	462a      	mov	r2, r5
 8001b52:	4638      	mov	r0, r7
 8001b54:	4b0f      	ldr	r3, [pc, #60]	; (8001b94 <_svfiprintf_r+0x1f8>)
 8001b56:	a904      	add	r1, sp, #16
 8001b58:	f3af 8000 	nop.w
 8001b5c:	1c42      	adds	r2, r0, #1
 8001b5e:	4606      	mov	r6, r0
 8001b60:	d1d6      	bne.n	8001b10 <_svfiprintf_r+0x174>
 8001b62:	89ab      	ldrh	r3, [r5, #12]
 8001b64:	065b      	lsls	r3, r3, #25
 8001b66:	f53f af2d 	bmi.w	80019c4 <_svfiprintf_r+0x28>
 8001b6a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001b6c:	b01d      	add	sp, #116	; 0x74
 8001b6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001b72:	ab03      	add	r3, sp, #12
 8001b74:	9300      	str	r3, [sp, #0]
 8001b76:	462a      	mov	r2, r5
 8001b78:	4638      	mov	r0, r7
 8001b7a:	4b06      	ldr	r3, [pc, #24]	; (8001b94 <_svfiprintf_r+0x1f8>)
 8001b7c:	a904      	add	r1, sp, #16
 8001b7e:	f000 f87d 	bl	8001c7c <_printf_i>
 8001b82:	e7eb      	b.n	8001b5c <_svfiprintf_r+0x1c0>
 8001b84:	0800201e 	.word	0x0800201e
 8001b88:	08002024 	.word	0x08002024
 8001b8c:	08002028 	.word	0x08002028
 8001b90:	00000000 	.word	0x00000000
 8001b94:	080018e9 	.word	0x080018e9

08001b98 <_printf_common>:
 8001b98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001b9c:	4616      	mov	r6, r2
 8001b9e:	4699      	mov	r9, r3
 8001ba0:	688a      	ldr	r2, [r1, #8]
 8001ba2:	690b      	ldr	r3, [r1, #16]
 8001ba4:	4607      	mov	r7, r0
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	bfb8      	it	lt
 8001baa:	4613      	movlt	r3, r2
 8001bac:	6033      	str	r3, [r6, #0]
 8001bae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001bb2:	460c      	mov	r4, r1
 8001bb4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001bb8:	b10a      	cbz	r2, 8001bbe <_printf_common+0x26>
 8001bba:	3301      	adds	r3, #1
 8001bbc:	6033      	str	r3, [r6, #0]
 8001bbe:	6823      	ldr	r3, [r4, #0]
 8001bc0:	0699      	lsls	r1, r3, #26
 8001bc2:	bf42      	ittt	mi
 8001bc4:	6833      	ldrmi	r3, [r6, #0]
 8001bc6:	3302      	addmi	r3, #2
 8001bc8:	6033      	strmi	r3, [r6, #0]
 8001bca:	6825      	ldr	r5, [r4, #0]
 8001bcc:	f015 0506 	ands.w	r5, r5, #6
 8001bd0:	d106      	bne.n	8001be0 <_printf_common+0x48>
 8001bd2:	f104 0a19 	add.w	sl, r4, #25
 8001bd6:	68e3      	ldr	r3, [r4, #12]
 8001bd8:	6832      	ldr	r2, [r6, #0]
 8001bda:	1a9b      	subs	r3, r3, r2
 8001bdc:	42ab      	cmp	r3, r5
 8001bde:	dc2b      	bgt.n	8001c38 <_printf_common+0xa0>
 8001be0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001be4:	1e13      	subs	r3, r2, #0
 8001be6:	6822      	ldr	r2, [r4, #0]
 8001be8:	bf18      	it	ne
 8001bea:	2301      	movne	r3, #1
 8001bec:	0692      	lsls	r2, r2, #26
 8001bee:	d430      	bmi.n	8001c52 <_printf_common+0xba>
 8001bf0:	4649      	mov	r1, r9
 8001bf2:	4638      	mov	r0, r7
 8001bf4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001bf8:	47c0      	blx	r8
 8001bfa:	3001      	adds	r0, #1
 8001bfc:	d023      	beq.n	8001c46 <_printf_common+0xae>
 8001bfe:	6823      	ldr	r3, [r4, #0]
 8001c00:	6922      	ldr	r2, [r4, #16]
 8001c02:	f003 0306 	and.w	r3, r3, #6
 8001c06:	2b04      	cmp	r3, #4
 8001c08:	bf14      	ite	ne
 8001c0a:	2500      	movne	r5, #0
 8001c0c:	6833      	ldreq	r3, [r6, #0]
 8001c0e:	f04f 0600 	mov.w	r6, #0
 8001c12:	bf08      	it	eq
 8001c14:	68e5      	ldreq	r5, [r4, #12]
 8001c16:	f104 041a 	add.w	r4, r4, #26
 8001c1a:	bf08      	it	eq
 8001c1c:	1aed      	subeq	r5, r5, r3
 8001c1e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8001c22:	bf08      	it	eq
 8001c24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	bfc4      	itt	gt
 8001c2c:	1a9b      	subgt	r3, r3, r2
 8001c2e:	18ed      	addgt	r5, r5, r3
 8001c30:	42b5      	cmp	r5, r6
 8001c32:	d11a      	bne.n	8001c6a <_printf_common+0xd2>
 8001c34:	2000      	movs	r0, #0
 8001c36:	e008      	b.n	8001c4a <_printf_common+0xb2>
 8001c38:	2301      	movs	r3, #1
 8001c3a:	4652      	mov	r2, sl
 8001c3c:	4649      	mov	r1, r9
 8001c3e:	4638      	mov	r0, r7
 8001c40:	47c0      	blx	r8
 8001c42:	3001      	adds	r0, #1
 8001c44:	d103      	bne.n	8001c4e <_printf_common+0xb6>
 8001c46:	f04f 30ff 	mov.w	r0, #4294967295
 8001c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c4e:	3501      	adds	r5, #1
 8001c50:	e7c1      	b.n	8001bd6 <_printf_common+0x3e>
 8001c52:	2030      	movs	r0, #48	; 0x30
 8001c54:	18e1      	adds	r1, r4, r3
 8001c56:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001c5a:	1c5a      	adds	r2, r3, #1
 8001c5c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001c60:	4422      	add	r2, r4
 8001c62:	3302      	adds	r3, #2
 8001c64:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001c68:	e7c2      	b.n	8001bf0 <_printf_common+0x58>
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	4622      	mov	r2, r4
 8001c6e:	4649      	mov	r1, r9
 8001c70:	4638      	mov	r0, r7
 8001c72:	47c0      	blx	r8
 8001c74:	3001      	adds	r0, #1
 8001c76:	d0e6      	beq.n	8001c46 <_printf_common+0xae>
 8001c78:	3601      	adds	r6, #1
 8001c7a:	e7d9      	b.n	8001c30 <_printf_common+0x98>

08001c7c <_printf_i>:
 8001c7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001c80:	7e0f      	ldrb	r7, [r1, #24]
 8001c82:	4691      	mov	r9, r2
 8001c84:	2f78      	cmp	r7, #120	; 0x78
 8001c86:	4680      	mov	r8, r0
 8001c88:	460c      	mov	r4, r1
 8001c8a:	469a      	mov	sl, r3
 8001c8c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001c8e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001c92:	d807      	bhi.n	8001ca4 <_printf_i+0x28>
 8001c94:	2f62      	cmp	r7, #98	; 0x62
 8001c96:	d80a      	bhi.n	8001cae <_printf_i+0x32>
 8001c98:	2f00      	cmp	r7, #0
 8001c9a:	f000 80d5 	beq.w	8001e48 <_printf_i+0x1cc>
 8001c9e:	2f58      	cmp	r7, #88	; 0x58
 8001ca0:	f000 80c1 	beq.w	8001e26 <_printf_i+0x1aa>
 8001ca4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001ca8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001cac:	e03a      	b.n	8001d24 <_printf_i+0xa8>
 8001cae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001cb2:	2b15      	cmp	r3, #21
 8001cb4:	d8f6      	bhi.n	8001ca4 <_printf_i+0x28>
 8001cb6:	a101      	add	r1, pc, #4	; (adr r1, 8001cbc <_printf_i+0x40>)
 8001cb8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001cbc:	08001d15 	.word	0x08001d15
 8001cc0:	08001d29 	.word	0x08001d29
 8001cc4:	08001ca5 	.word	0x08001ca5
 8001cc8:	08001ca5 	.word	0x08001ca5
 8001ccc:	08001ca5 	.word	0x08001ca5
 8001cd0:	08001ca5 	.word	0x08001ca5
 8001cd4:	08001d29 	.word	0x08001d29
 8001cd8:	08001ca5 	.word	0x08001ca5
 8001cdc:	08001ca5 	.word	0x08001ca5
 8001ce0:	08001ca5 	.word	0x08001ca5
 8001ce4:	08001ca5 	.word	0x08001ca5
 8001ce8:	08001e2f 	.word	0x08001e2f
 8001cec:	08001d55 	.word	0x08001d55
 8001cf0:	08001de9 	.word	0x08001de9
 8001cf4:	08001ca5 	.word	0x08001ca5
 8001cf8:	08001ca5 	.word	0x08001ca5
 8001cfc:	08001e51 	.word	0x08001e51
 8001d00:	08001ca5 	.word	0x08001ca5
 8001d04:	08001d55 	.word	0x08001d55
 8001d08:	08001ca5 	.word	0x08001ca5
 8001d0c:	08001ca5 	.word	0x08001ca5
 8001d10:	08001df1 	.word	0x08001df1
 8001d14:	682b      	ldr	r3, [r5, #0]
 8001d16:	1d1a      	adds	r2, r3, #4
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	602a      	str	r2, [r5, #0]
 8001d1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001d20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001d24:	2301      	movs	r3, #1
 8001d26:	e0a0      	b.n	8001e6a <_printf_i+0x1ee>
 8001d28:	6820      	ldr	r0, [r4, #0]
 8001d2a:	682b      	ldr	r3, [r5, #0]
 8001d2c:	0607      	lsls	r7, r0, #24
 8001d2e:	f103 0104 	add.w	r1, r3, #4
 8001d32:	6029      	str	r1, [r5, #0]
 8001d34:	d501      	bpl.n	8001d3a <_printf_i+0xbe>
 8001d36:	681e      	ldr	r6, [r3, #0]
 8001d38:	e003      	b.n	8001d42 <_printf_i+0xc6>
 8001d3a:	0646      	lsls	r6, r0, #25
 8001d3c:	d5fb      	bpl.n	8001d36 <_printf_i+0xba>
 8001d3e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8001d42:	2e00      	cmp	r6, #0
 8001d44:	da03      	bge.n	8001d4e <_printf_i+0xd2>
 8001d46:	232d      	movs	r3, #45	; 0x2d
 8001d48:	4276      	negs	r6, r6
 8001d4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001d4e:	230a      	movs	r3, #10
 8001d50:	4859      	ldr	r0, [pc, #356]	; (8001eb8 <_printf_i+0x23c>)
 8001d52:	e012      	b.n	8001d7a <_printf_i+0xfe>
 8001d54:	682b      	ldr	r3, [r5, #0]
 8001d56:	6820      	ldr	r0, [r4, #0]
 8001d58:	1d19      	adds	r1, r3, #4
 8001d5a:	6029      	str	r1, [r5, #0]
 8001d5c:	0605      	lsls	r5, r0, #24
 8001d5e:	d501      	bpl.n	8001d64 <_printf_i+0xe8>
 8001d60:	681e      	ldr	r6, [r3, #0]
 8001d62:	e002      	b.n	8001d6a <_printf_i+0xee>
 8001d64:	0641      	lsls	r1, r0, #25
 8001d66:	d5fb      	bpl.n	8001d60 <_printf_i+0xe4>
 8001d68:	881e      	ldrh	r6, [r3, #0]
 8001d6a:	2f6f      	cmp	r7, #111	; 0x6f
 8001d6c:	bf0c      	ite	eq
 8001d6e:	2308      	moveq	r3, #8
 8001d70:	230a      	movne	r3, #10
 8001d72:	4851      	ldr	r0, [pc, #324]	; (8001eb8 <_printf_i+0x23c>)
 8001d74:	2100      	movs	r1, #0
 8001d76:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001d7a:	6865      	ldr	r5, [r4, #4]
 8001d7c:	2d00      	cmp	r5, #0
 8001d7e:	bfa8      	it	ge
 8001d80:	6821      	ldrge	r1, [r4, #0]
 8001d82:	60a5      	str	r5, [r4, #8]
 8001d84:	bfa4      	itt	ge
 8001d86:	f021 0104 	bicge.w	r1, r1, #4
 8001d8a:	6021      	strge	r1, [r4, #0]
 8001d8c:	b90e      	cbnz	r6, 8001d92 <_printf_i+0x116>
 8001d8e:	2d00      	cmp	r5, #0
 8001d90:	d04b      	beq.n	8001e2a <_printf_i+0x1ae>
 8001d92:	4615      	mov	r5, r2
 8001d94:	fbb6 f1f3 	udiv	r1, r6, r3
 8001d98:	fb03 6711 	mls	r7, r3, r1, r6
 8001d9c:	5dc7      	ldrb	r7, [r0, r7]
 8001d9e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001da2:	4637      	mov	r7, r6
 8001da4:	42bb      	cmp	r3, r7
 8001da6:	460e      	mov	r6, r1
 8001da8:	d9f4      	bls.n	8001d94 <_printf_i+0x118>
 8001daa:	2b08      	cmp	r3, #8
 8001dac:	d10b      	bne.n	8001dc6 <_printf_i+0x14a>
 8001dae:	6823      	ldr	r3, [r4, #0]
 8001db0:	07de      	lsls	r6, r3, #31
 8001db2:	d508      	bpl.n	8001dc6 <_printf_i+0x14a>
 8001db4:	6923      	ldr	r3, [r4, #16]
 8001db6:	6861      	ldr	r1, [r4, #4]
 8001db8:	4299      	cmp	r1, r3
 8001dba:	bfde      	ittt	le
 8001dbc:	2330      	movle	r3, #48	; 0x30
 8001dbe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001dc2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001dc6:	1b52      	subs	r2, r2, r5
 8001dc8:	6122      	str	r2, [r4, #16]
 8001dca:	464b      	mov	r3, r9
 8001dcc:	4621      	mov	r1, r4
 8001dce:	4640      	mov	r0, r8
 8001dd0:	f8cd a000 	str.w	sl, [sp]
 8001dd4:	aa03      	add	r2, sp, #12
 8001dd6:	f7ff fedf 	bl	8001b98 <_printf_common>
 8001dda:	3001      	adds	r0, #1
 8001ddc:	d14a      	bne.n	8001e74 <_printf_i+0x1f8>
 8001dde:	f04f 30ff 	mov.w	r0, #4294967295
 8001de2:	b004      	add	sp, #16
 8001de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001de8:	6823      	ldr	r3, [r4, #0]
 8001dea:	f043 0320 	orr.w	r3, r3, #32
 8001dee:	6023      	str	r3, [r4, #0]
 8001df0:	2778      	movs	r7, #120	; 0x78
 8001df2:	4832      	ldr	r0, [pc, #200]	; (8001ebc <_printf_i+0x240>)
 8001df4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001df8:	6823      	ldr	r3, [r4, #0]
 8001dfa:	6829      	ldr	r1, [r5, #0]
 8001dfc:	061f      	lsls	r7, r3, #24
 8001dfe:	f851 6b04 	ldr.w	r6, [r1], #4
 8001e02:	d402      	bmi.n	8001e0a <_printf_i+0x18e>
 8001e04:	065f      	lsls	r7, r3, #25
 8001e06:	bf48      	it	mi
 8001e08:	b2b6      	uxthmi	r6, r6
 8001e0a:	07df      	lsls	r7, r3, #31
 8001e0c:	bf48      	it	mi
 8001e0e:	f043 0320 	orrmi.w	r3, r3, #32
 8001e12:	6029      	str	r1, [r5, #0]
 8001e14:	bf48      	it	mi
 8001e16:	6023      	strmi	r3, [r4, #0]
 8001e18:	b91e      	cbnz	r6, 8001e22 <_printf_i+0x1a6>
 8001e1a:	6823      	ldr	r3, [r4, #0]
 8001e1c:	f023 0320 	bic.w	r3, r3, #32
 8001e20:	6023      	str	r3, [r4, #0]
 8001e22:	2310      	movs	r3, #16
 8001e24:	e7a6      	b.n	8001d74 <_printf_i+0xf8>
 8001e26:	4824      	ldr	r0, [pc, #144]	; (8001eb8 <_printf_i+0x23c>)
 8001e28:	e7e4      	b.n	8001df4 <_printf_i+0x178>
 8001e2a:	4615      	mov	r5, r2
 8001e2c:	e7bd      	b.n	8001daa <_printf_i+0x12e>
 8001e2e:	682b      	ldr	r3, [r5, #0]
 8001e30:	6826      	ldr	r6, [r4, #0]
 8001e32:	1d18      	adds	r0, r3, #4
 8001e34:	6961      	ldr	r1, [r4, #20]
 8001e36:	6028      	str	r0, [r5, #0]
 8001e38:	0635      	lsls	r5, r6, #24
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	d501      	bpl.n	8001e42 <_printf_i+0x1c6>
 8001e3e:	6019      	str	r1, [r3, #0]
 8001e40:	e002      	b.n	8001e48 <_printf_i+0x1cc>
 8001e42:	0670      	lsls	r0, r6, #25
 8001e44:	d5fb      	bpl.n	8001e3e <_printf_i+0x1c2>
 8001e46:	8019      	strh	r1, [r3, #0]
 8001e48:	2300      	movs	r3, #0
 8001e4a:	4615      	mov	r5, r2
 8001e4c:	6123      	str	r3, [r4, #16]
 8001e4e:	e7bc      	b.n	8001dca <_printf_i+0x14e>
 8001e50:	682b      	ldr	r3, [r5, #0]
 8001e52:	2100      	movs	r1, #0
 8001e54:	1d1a      	adds	r2, r3, #4
 8001e56:	602a      	str	r2, [r5, #0]
 8001e58:	681d      	ldr	r5, [r3, #0]
 8001e5a:	6862      	ldr	r2, [r4, #4]
 8001e5c:	4628      	mov	r0, r5
 8001e5e:	f000 f859 	bl	8001f14 <memchr>
 8001e62:	b108      	cbz	r0, 8001e68 <_printf_i+0x1ec>
 8001e64:	1b40      	subs	r0, r0, r5
 8001e66:	6060      	str	r0, [r4, #4]
 8001e68:	6863      	ldr	r3, [r4, #4]
 8001e6a:	6123      	str	r3, [r4, #16]
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001e72:	e7aa      	b.n	8001dca <_printf_i+0x14e>
 8001e74:	462a      	mov	r2, r5
 8001e76:	4649      	mov	r1, r9
 8001e78:	4640      	mov	r0, r8
 8001e7a:	6923      	ldr	r3, [r4, #16]
 8001e7c:	47d0      	blx	sl
 8001e7e:	3001      	adds	r0, #1
 8001e80:	d0ad      	beq.n	8001dde <_printf_i+0x162>
 8001e82:	6823      	ldr	r3, [r4, #0]
 8001e84:	079b      	lsls	r3, r3, #30
 8001e86:	d413      	bmi.n	8001eb0 <_printf_i+0x234>
 8001e88:	68e0      	ldr	r0, [r4, #12]
 8001e8a:	9b03      	ldr	r3, [sp, #12]
 8001e8c:	4298      	cmp	r0, r3
 8001e8e:	bfb8      	it	lt
 8001e90:	4618      	movlt	r0, r3
 8001e92:	e7a6      	b.n	8001de2 <_printf_i+0x166>
 8001e94:	2301      	movs	r3, #1
 8001e96:	4632      	mov	r2, r6
 8001e98:	4649      	mov	r1, r9
 8001e9a:	4640      	mov	r0, r8
 8001e9c:	47d0      	blx	sl
 8001e9e:	3001      	adds	r0, #1
 8001ea0:	d09d      	beq.n	8001dde <_printf_i+0x162>
 8001ea2:	3501      	adds	r5, #1
 8001ea4:	68e3      	ldr	r3, [r4, #12]
 8001ea6:	9903      	ldr	r1, [sp, #12]
 8001ea8:	1a5b      	subs	r3, r3, r1
 8001eaa:	42ab      	cmp	r3, r5
 8001eac:	dcf2      	bgt.n	8001e94 <_printf_i+0x218>
 8001eae:	e7eb      	b.n	8001e88 <_printf_i+0x20c>
 8001eb0:	2500      	movs	r5, #0
 8001eb2:	f104 0619 	add.w	r6, r4, #25
 8001eb6:	e7f5      	b.n	8001ea4 <_printf_i+0x228>
 8001eb8:	0800202f 	.word	0x0800202f
 8001ebc:	08002040 	.word	0x08002040

08001ec0 <memmove>:
 8001ec0:	4288      	cmp	r0, r1
 8001ec2:	b510      	push	{r4, lr}
 8001ec4:	eb01 0402 	add.w	r4, r1, r2
 8001ec8:	d902      	bls.n	8001ed0 <memmove+0x10>
 8001eca:	4284      	cmp	r4, r0
 8001ecc:	4623      	mov	r3, r4
 8001ece:	d807      	bhi.n	8001ee0 <memmove+0x20>
 8001ed0:	1e43      	subs	r3, r0, #1
 8001ed2:	42a1      	cmp	r1, r4
 8001ed4:	d008      	beq.n	8001ee8 <memmove+0x28>
 8001ed6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001eda:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001ede:	e7f8      	b.n	8001ed2 <memmove+0x12>
 8001ee0:	4601      	mov	r1, r0
 8001ee2:	4402      	add	r2, r0
 8001ee4:	428a      	cmp	r2, r1
 8001ee6:	d100      	bne.n	8001eea <memmove+0x2a>
 8001ee8:	bd10      	pop	{r4, pc}
 8001eea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001eee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001ef2:	e7f7      	b.n	8001ee4 <memmove+0x24>

08001ef4 <_sbrk_r>:
 8001ef4:	b538      	push	{r3, r4, r5, lr}
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	4d05      	ldr	r5, [pc, #20]	; (8001f10 <_sbrk_r+0x1c>)
 8001efa:	4604      	mov	r4, r0
 8001efc:	4608      	mov	r0, r1
 8001efe:	602b      	str	r3, [r5, #0]
 8001f00:	f7fe fa7a 	bl	80003f8 <_sbrk>
 8001f04:	1c43      	adds	r3, r0, #1
 8001f06:	d102      	bne.n	8001f0e <_sbrk_r+0x1a>
 8001f08:	682b      	ldr	r3, [r5, #0]
 8001f0a:	b103      	cbz	r3, 8001f0e <_sbrk_r+0x1a>
 8001f0c:	6023      	str	r3, [r4, #0]
 8001f0e:	bd38      	pop	{r3, r4, r5, pc}
 8001f10:	20000200 	.word	0x20000200

08001f14 <memchr>:
 8001f14:	4603      	mov	r3, r0
 8001f16:	b510      	push	{r4, lr}
 8001f18:	b2c9      	uxtb	r1, r1
 8001f1a:	4402      	add	r2, r0
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	4618      	mov	r0, r3
 8001f20:	d101      	bne.n	8001f26 <memchr+0x12>
 8001f22:	2000      	movs	r0, #0
 8001f24:	e003      	b.n	8001f2e <memchr+0x1a>
 8001f26:	7804      	ldrb	r4, [r0, #0]
 8001f28:	3301      	adds	r3, #1
 8001f2a:	428c      	cmp	r4, r1
 8001f2c:	d1f6      	bne.n	8001f1c <memchr+0x8>
 8001f2e:	bd10      	pop	{r4, pc}

08001f30 <memcpy>:
 8001f30:	440a      	add	r2, r1
 8001f32:	4291      	cmp	r1, r2
 8001f34:	f100 33ff 	add.w	r3, r0, #4294967295
 8001f38:	d100      	bne.n	8001f3c <memcpy+0xc>
 8001f3a:	4770      	bx	lr
 8001f3c:	b510      	push	{r4, lr}
 8001f3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001f42:	4291      	cmp	r1, r2
 8001f44:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001f48:	d1f9      	bne.n	8001f3e <memcpy+0xe>
 8001f4a:	bd10      	pop	{r4, pc}

08001f4c <_realloc_r>:
 8001f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f50:	4680      	mov	r8, r0
 8001f52:	4614      	mov	r4, r2
 8001f54:	460e      	mov	r6, r1
 8001f56:	b921      	cbnz	r1, 8001f62 <_realloc_r+0x16>
 8001f58:	4611      	mov	r1, r2
 8001f5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001f5e:	f7ff bc37 	b.w	80017d0 <_malloc_r>
 8001f62:	b92a      	cbnz	r2, 8001f70 <_realloc_r+0x24>
 8001f64:	f7ff fbcc 	bl	8001700 <_free_r>
 8001f68:	4625      	mov	r5, r4
 8001f6a:	4628      	mov	r0, r5
 8001f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001f70:	f000 f81b 	bl	8001faa <_malloc_usable_size_r>
 8001f74:	4284      	cmp	r4, r0
 8001f76:	4607      	mov	r7, r0
 8001f78:	d802      	bhi.n	8001f80 <_realloc_r+0x34>
 8001f7a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8001f7e:	d812      	bhi.n	8001fa6 <_realloc_r+0x5a>
 8001f80:	4621      	mov	r1, r4
 8001f82:	4640      	mov	r0, r8
 8001f84:	f7ff fc24 	bl	80017d0 <_malloc_r>
 8001f88:	4605      	mov	r5, r0
 8001f8a:	2800      	cmp	r0, #0
 8001f8c:	d0ed      	beq.n	8001f6a <_realloc_r+0x1e>
 8001f8e:	42bc      	cmp	r4, r7
 8001f90:	4622      	mov	r2, r4
 8001f92:	4631      	mov	r1, r6
 8001f94:	bf28      	it	cs
 8001f96:	463a      	movcs	r2, r7
 8001f98:	f7ff ffca 	bl	8001f30 <memcpy>
 8001f9c:	4631      	mov	r1, r6
 8001f9e:	4640      	mov	r0, r8
 8001fa0:	f7ff fbae 	bl	8001700 <_free_r>
 8001fa4:	e7e1      	b.n	8001f6a <_realloc_r+0x1e>
 8001fa6:	4635      	mov	r5, r6
 8001fa8:	e7df      	b.n	8001f6a <_realloc_r+0x1e>

08001faa <_malloc_usable_size_r>:
 8001faa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001fae:	1f18      	subs	r0, r3, #4
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	bfbc      	itt	lt
 8001fb4:	580b      	ldrlt	r3, [r1, r0]
 8001fb6:	18c0      	addlt	r0, r0, r3
 8001fb8:	4770      	bx	lr
	...

08001fbc <_init>:
 8001fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fbe:	bf00      	nop
 8001fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fc2:	bc08      	pop	{r3}
 8001fc4:	469e      	mov	lr, r3
 8001fc6:	4770      	bx	lr

08001fc8 <_fini>:
 8001fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fca:	bf00      	nop
 8001fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fce:	bc08      	pop	{r3}
 8001fd0:	469e      	mov	lr, r3
 8001fd2:	4770      	bx	lr
