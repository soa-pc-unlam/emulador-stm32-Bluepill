
StateMachine-BT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f50  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  0800305c  0800305c  0001305c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003158  08003158  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08003158  08003158  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003158  08003158  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003158  08003158  00013158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800315c  0800315c  0001315c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08003160  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000238  20000064  080031c4  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000029c  080031c4  0002029c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c51d  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020b3  00000000  00000000  0002c5ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c30  00000000  00000000  0002e6a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000976  00000000  00000000  0002f2d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017e50  00000000  00000000  0002fc46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e7f7  00000000  00000000  00047a96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008a0bf  00000000  00000000  0005628d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000036cc  00000000  00000000  000e034c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000090  00000000  00000000  000e3a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000064 	.word	0x20000064
 8000128:	00000000 	.word	0x00000000
 800012c:	08003044 	.word	0x08003044

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000068 	.word	0x20000068
 8000148:	08003044 	.word	0x08003044

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b088      	sub	sp, #32
 8000160:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000162:	f107 0310 	add.w	r3, r7, #16
 8000166:	2200      	movs	r2, #0
 8000168:	601a      	str	r2, [r3, #0]
 800016a:	605a      	str	r2, [r3, #4]
 800016c:	609a      	str	r2, [r3, #8]
 800016e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000170:	4b2a      	ldr	r3, [pc, #168]	; (800021c <MX_GPIO_Init+0xc0>)
 8000172:	699b      	ldr	r3, [r3, #24]
 8000174:	4a29      	ldr	r2, [pc, #164]	; (800021c <MX_GPIO_Init+0xc0>)
 8000176:	f043 0310 	orr.w	r3, r3, #16
 800017a:	6193      	str	r3, [r2, #24]
 800017c:	4b27      	ldr	r3, [pc, #156]	; (800021c <MX_GPIO_Init+0xc0>)
 800017e:	699b      	ldr	r3, [r3, #24]
 8000180:	f003 0310 	and.w	r3, r3, #16
 8000184:	60fb      	str	r3, [r7, #12]
 8000186:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000188:	4b24      	ldr	r3, [pc, #144]	; (800021c <MX_GPIO_Init+0xc0>)
 800018a:	699b      	ldr	r3, [r3, #24]
 800018c:	4a23      	ldr	r2, [pc, #140]	; (800021c <MX_GPIO_Init+0xc0>)
 800018e:	f043 0320 	orr.w	r3, r3, #32
 8000192:	6193      	str	r3, [r2, #24]
 8000194:	4b21      	ldr	r3, [pc, #132]	; (800021c <MX_GPIO_Init+0xc0>)
 8000196:	699b      	ldr	r3, [r3, #24]
 8000198:	f003 0320 	and.w	r3, r3, #32
 800019c:	60bb      	str	r3, [r7, #8]
 800019e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001a0:	4b1e      	ldr	r3, [pc, #120]	; (800021c <MX_GPIO_Init+0xc0>)
 80001a2:	699b      	ldr	r3, [r3, #24]
 80001a4:	4a1d      	ldr	r2, [pc, #116]	; (800021c <MX_GPIO_Init+0xc0>)
 80001a6:	f043 0308 	orr.w	r3, r3, #8
 80001aa:	6193      	str	r3, [r2, #24]
 80001ac:	4b1b      	ldr	r3, [pc, #108]	; (800021c <MX_GPIO_Init+0xc0>)
 80001ae:	699b      	ldr	r3, [r3, #24]
 80001b0:	f003 0308 	and.w	r3, r3, #8
 80001b4:	607b      	str	r3, [r7, #4]
 80001b6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001b8:	4b18      	ldr	r3, [pc, #96]	; (800021c <MX_GPIO_Init+0xc0>)
 80001ba:	699b      	ldr	r3, [r3, #24]
 80001bc:	4a17      	ldr	r2, [pc, #92]	; (800021c <MX_GPIO_Init+0xc0>)
 80001be:	f043 0304 	orr.w	r3, r3, #4
 80001c2:	6193      	str	r3, [r2, #24]
 80001c4:	4b15      	ldr	r3, [pc, #84]	; (800021c <MX_GPIO_Init+0xc0>)
 80001c6:	699b      	ldr	r3, [r3, #24]
 80001c8:	f003 0304 	and.w	r3, r3, #4
 80001cc:	603b      	str	r3, [r7, #0]
 80001ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80001d0:	2200      	movs	r2, #0
 80001d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001d6:	4812      	ldr	r0, [pc, #72]	; (8000220 <MX_GPIO_Init+0xc4>)
 80001d8:	f000 ffb1 	bl	800113e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80001dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001e2:	2301      	movs	r3, #1
 80001e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001e6:	2300      	movs	r3, #0
 80001e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001ea:	2302      	movs	r3, #2
 80001ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80001ee:	f107 0310 	add.w	r3, r7, #16
 80001f2:	4619      	mov	r1, r3
 80001f4:	480a      	ldr	r0, [pc, #40]	; (8000220 <MX_GPIO_Init+0xc4>)
 80001f6:	f000 fe07 	bl	8000e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80001fa:	2301      	movs	r3, #1
 80001fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80001fe:	2300      	movs	r3, #0
 8000200:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000202:	2300      	movs	r3, #0
 8000204:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000206:	f107 0310 	add.w	r3, r7, #16
 800020a:	4619      	mov	r1, r3
 800020c:	4805      	ldr	r0, [pc, #20]	; (8000224 <MX_GPIO_Init+0xc8>)
 800020e:	f000 fdfb 	bl	8000e08 <HAL_GPIO_Init>

}
 8000212:	bf00      	nop
 8000214:	3720      	adds	r7, #32
 8000216:	46bd      	mov	sp, r7
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	40021000 	.word	0x40021000
 8000220:	40011000 	.word	0x40011000
 8000224:	40010c00 	.word	0x40010c00

08000228 <sleep>:
int timeout;

int state_timeout=TIMEOUT_NOT_FULFILLED;

void sleep()
{
 8000228:	b480      	push	{r7}
 800022a:	b083      	sub	sp, #12
 800022c:	af00      	add	r7, sp, #0
   int i=1000000;
 800022e:	4b07      	ldr	r3, [pc, #28]	; (800024c <sleep+0x24>)
 8000230:	607b      	str	r3, [r7, #4]
   while(i-->0);
 8000232:	bf00      	nop
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	1e5a      	subs	r2, r3, #1
 8000238:	607a      	str	r2, [r7, #4]
 800023a:	2b00      	cmp	r3, #0
 800023c:	dcfa      	bgt.n	8000234 <sleep+0xc>
}
 800023e:	bf00      	nop
 8000240:	bf00      	nop
 8000242:	370c      	adds	r7, #12
 8000244:	46bd      	mov	sp, r7
 8000246:	bc80      	pop	{r7}
 8000248:	4770      	bx	lr
 800024a:	bf00      	nop
 800024c:	000f4240 	.word	0x000f4240

08000250 <led_off>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void led_off()
{
 8000250:	b580      	push	{r7, lr}
 8000252:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,RESET);
 8000254:	2200      	movs	r2, #0
 8000256:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800025a:	4802      	ldr	r0, [pc, #8]	; (8000264 <led_off+0x14>)
 800025c:	f000 ff6f 	bl	800113e <HAL_GPIO_WritePin>
}
 8000260:	bf00      	nop
 8000262:	bd80      	pop	{r7, pc}
 8000264:	40011000 	.word	0x40011000

08000268 <led_on>:

void led_on()
{
 8000268:	b580      	push	{r7, lr}
 800026a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,SET);
 800026c:	2201      	movs	r2, #1
 800026e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000272:	4802      	ldr	r0, [pc, #8]	; (800027c <led_on+0x14>)
 8000274:	f000 ff63 	bl	800113e <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(GPIOC,sensors[ACTUATOR_LED].gpio_pin, SET);
}
 8000278:	bf00      	nop
 800027a:	bd80      	pop	{r7, pc}
 800027c:	40011000 	.word	0x40011000

08000280 <verify_state_button>:

int verify_state_button()
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
	sensors[SENSOR_BUTTON].current_value=HAL_GPIO_ReadPin(GPIOA,sensors[SENSOR_BUTTON].gpio_pin);
 8000286:	4b12      	ldr	r3, [pc, #72]	; (80002d0 <verify_state_button+0x50>)
 8000288:	695b      	ldr	r3, [r3, #20]
 800028a:	b29b      	uxth	r3, r3
 800028c:	4619      	mov	r1, r3
 800028e:	4811      	ldr	r0, [pc, #68]	; (80002d4 <verify_state_button+0x54>)
 8000290:	f000 ff3e 	bl	8001110 <HAL_GPIO_ReadPin>
 8000294:	4603      	mov	r3, r0
 8000296:	461a      	mov	r2, r3
 8000298:	4b0d      	ldr	r3, [pc, #52]	; (80002d0 <verify_state_button+0x50>)
 800029a:	621a      	str	r2, [r3, #32]


    int current_value =sensors[SENSOR_BUTTON].current_value;
 800029c:	4b0c      	ldr	r3, [pc, #48]	; (80002d0 <verify_state_button+0x50>)
 800029e:	6a1b      	ldr	r3, [r3, #32]
 80002a0:	607b      	str	r3, [r7, #4]

    //myprintf(" ************************actual_boton:%d  prevoi_boton:%d\n",current_value,sensors[SENSOR_BUTTON].previous_value);

    int previous_value =sensors[SENSOR_BUTTON].previous_value;
 80002a2:	4b0b      	ldr	r3, [pc, #44]	; (80002d0 <verify_state_button+0x50>)
 80002a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002a6:	603b      	str	r3, [r7, #0]



    if(current_value!=previous_value)
 80002a8:	687a      	ldr	r2, [r7, #4]
 80002aa:	683b      	ldr	r3, [r7, #0]
 80002ac:	429a      	cmp	r2, r3
 80002ae:	d00a      	beq.n	80002c6 <verify_state_button+0x46>
    {
        //myprintf(" ************************actual_boton:%d  prevoi_boton:%d\n",current_value,sensors[SENSOR_BUTTON].previous_value);
        sensors[SENSOR_BUTTON].previous_value= current_value;
 80002b0:	4a07      	ldr	r2, [pc, #28]	; (80002d0 <verify_state_button+0x50>)
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	6253      	str	r3, [r2, #36]	; 0x24

        if(current_value==PUSH)
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	2b01      	cmp	r3, #1
 80002ba:	d102      	bne.n	80002c2 <verify_state_button+0x42>
        {
            //myprintf("\n*******************EVENT PUSH************\n");
            event.type=EVENT_BUTTON_PUSH;
 80002bc:	4b06      	ldr	r3, [pc, #24]	; (80002d8 <verify_state_button+0x58>)
 80002be:	2205      	movs	r2, #5
 80002c0:	601a      	str	r2, [r3, #0]

        }
        return TRUE;
 80002c2:	2301      	movs	r3, #1
 80002c4:	e000      	b.n	80002c8 <verify_state_button+0x48>
    }

    return FALSE;
 80002c6:	2300      	movs	r3, #0
}
 80002c8:	4618      	mov	r0, r3
 80002ca:	3708      	adds	r7, #8
 80002cc:	46bd      	mov	sp, r7
 80002ce:	bd80      	pop	{r7, pc}
 80002d0:	20000080 	.word	0x20000080
 80002d4:	40010800 	.word	0x40010800
 80002d8:	200000a8 	.word	0x200000a8

080002dc <verify_state_bluetooth>:

int verify_state_bluetooth()
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b082      	sub	sp, #8
 80002e0:	af00      	add	r7, sp, #0
    uint8_t  receive_data=0;
 80002e2:	2300      	movs	r3, #0
 80002e4:	71fb      	strb	r3, [r7, #7]


	/* Capture the received byte and print it out. */
    HAL_UART_Receive(&huart1, &receive_data, sizeof(receive_data), 100);
 80002e6:	1df9      	adds	r1, r7, #7
 80002e8:	2364      	movs	r3, #100	; 0x64
 80002ea:	2201      	movs	r2, #1
 80002ec:	480b      	ldr	r0, [pc, #44]	; (800031c <verify_state_bluetooth+0x40>)
 80002ee:	f002 f84e 	bl	800238e <HAL_UART_Receive>

	if(receive_data==LED_ON)
 80002f2:	79fb      	ldrb	r3, [r7, #7]
 80002f4:	2b31      	cmp	r3, #49	; 0x31
 80002f6:	d104      	bne.n	8000302 <verify_state_bluetooth+0x26>
	{
		//myprintf("\n*******************PRENDE LED************\n");
		event.type=EVENT_LED_ON;
 80002f8:	4b09      	ldr	r3, [pc, #36]	; (8000320 <verify_state_bluetooth+0x44>)
 80002fa:	2202      	movs	r2, #2
 80002fc:	601a      	str	r2, [r3, #0]
		return TRUE;
 80002fe:	2301      	movs	r3, #1
 8000300:	e008      	b.n	8000314 <verify_state_bluetooth+0x38>
	}
	else if(receive_data==LED_OFF)
 8000302:	79fb      	ldrb	r3, [r7, #7]
 8000304:	2b32      	cmp	r3, #50	; 0x32
 8000306:	d104      	bne.n	8000312 <verify_state_bluetooth+0x36>
	{
		//myprintf("\n*******************APAGA LED************\n");
		event.type=EVENT_LED_OFF;
 8000308:	4b05      	ldr	r3, [pc, #20]	; (8000320 <verify_state_bluetooth+0x44>)
 800030a:	2203      	movs	r2, #3
 800030c:	601a      	str	r2, [r3, #0]
		return TRUE;
 800030e:	2301      	movs	r3, #1
 8000310:	e000      	b.n	8000314 <verify_state_bluetooth+0x38>
	}



    return FALSE;
 8000312:	2300      	movs	r3, #0
}
 8000314:	4618      	mov	r0, r3
 8000316:	3708      	adds	r7, #8
 8000318:	46bd      	mov	sp, r7
 800031a:	bd80      	pop	{r7, pc}
 800031c:	20000108 	.word	0x20000108
 8000320:	200000a8 	.word	0x200000a8

08000324 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000324:	b480      	push	{r7}
 8000326:	b083      	sub	sp, #12
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
	 if(htim->Instance==TIM2)
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000334:	d102      	bne.n	800033c <HAL_TIM_PeriodElapsedCallback+0x18>
	 {
		 state_timeout=TIMEOUT_COMPLETED;
 8000336:	4b04      	ldr	r3, [pc, #16]	; (8000348 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000338:	2202      	movs	r2, #2
 800033a:	601a      	str	r2, [r3, #0]
	 }
}
 800033c:	bf00      	nop
 800033e:	370c      	adds	r7, #12
 8000340:	46bd      	mov	sp, r7
 8000342:	bc80      	pop	{r7}
 8000344:	4770      	bx	lr
 8000346:	bf00      	nop
 8000348:	20000000 	.word	0x20000000

0800034c <verify_timeout>:

int verify_timeout()
{
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0
    if(state_timeout==TIMEOUT_COMPLETED)
 8000350:	4b08      	ldr	r3, [pc, #32]	; (8000374 <verify_timeout+0x28>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	2b02      	cmp	r3, #2
 8000356:	d107      	bne.n	8000368 <verify_timeout+0x1c>
    {
        event.type=EVENT_TIMEOUT;
 8000358:	4b07      	ldr	r3, [pc, #28]	; (8000378 <verify_timeout+0x2c>)
 800035a:	2206      	movs	r2, #6
 800035c:	601a      	str	r2, [r3, #0]
        state_timeout=TIMEOUT_NOT_FULFILLED;
 800035e:	4b05      	ldr	r3, [pc, #20]	; (8000374 <verify_timeout+0x28>)
 8000360:	2201      	movs	r2, #1
 8000362:	601a      	str	r2, [r3, #0]
        return TRUE;
 8000364:	2301      	movs	r3, #1
 8000366:	e000      	b.n	800036a <verify_timeout+0x1e>
    }

    return FALSE;
 8000368:	2300      	movs	r3, #0
}
 800036a:	4618      	mov	r0, r3
 800036c:	46bd      	mov	sp, r7
 800036e:	bc80      	pop	{r7}
 8000370:	4770      	bx	lr
 8000372:	bf00      	nop
 8000374:	20000000 	.word	0x20000000
 8000378:	200000a8 	.word	0x200000a8

0800037c <get_event>:

void get_event()
{
 800037c:	b580      	push	{r7, lr}
 800037e:	af00      	add	r7, sp, #0
    if((verify_state_button()==TRUE || verify_state_bluetooth()==TRUE || verify_timeout()==TRUE))
 8000380:	f7ff ff7e 	bl	8000280 <verify_state_button>
 8000384:	4603      	mov	r3, r0
 8000386:	2b01      	cmp	r3, #1
 8000388:	d00d      	beq.n	80003a6 <get_event+0x2a>
 800038a:	f7ff ffa7 	bl	80002dc <verify_state_bluetooth>
 800038e:	4603      	mov	r3, r0
 8000390:	2b01      	cmp	r3, #1
 8000392:	d008      	beq.n	80003a6 <get_event+0x2a>
 8000394:	f7ff ffda 	bl	800034c <verify_timeout>
 8000398:	4603      	mov	r3, r0
 800039a:	2b01      	cmp	r3, #1
 800039c:	d003      	beq.n	80003a6 <get_event+0x2a>
    {
        return;
    }
    event.type=EVENT_CONTINUE;
 800039e:	4b03      	ldr	r3, [pc, #12]	; (80003ac <get_event+0x30>)
 80003a0:	2201      	movs	r2, #1
 80003a2:	601a      	str	r2, [r3, #0]
 80003a4:	e000      	b.n	80003a8 <get_event+0x2c>
        return;
 80003a6:	bf00      	nop
}
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	bf00      	nop
 80003ac:	200000a8 	.word	0x200000a8

080003b0 <state_machine>:



void state_machine()
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
    get_event();
 80003b4:	f7ff ffe2 	bl	800037c <get_event>

    switch(state)
 80003b8:	4b7b      	ldr	r3, [pc, #492]	; (80005a8 <state_machine+0x1f8>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	2b03      	cmp	r3, #3
 80003be:	d074      	beq.n	80004aa <state_machine+0xfa>
 80003c0:	2b03      	cmp	r3, #3
 80003c2:	f300 80eb 	bgt.w	800059c <state_machine+0x1ec>
 80003c6:	2b01      	cmp	r3, #1
 80003c8:	d002      	beq.n	80003d0 <state_machine+0x20>
 80003ca:	2b02      	cmp	r3, #2
 80003cc:	d00c      	beq.n	80003e8 <state_machine+0x38>
 80003ce:	e0e5      	b.n	800059c <state_machine+0x1ec>
    {
        case (STATE_INIT):
        {

            switch ( event.type)
 80003d0:	4b76      	ldr	r3, [pc, #472]	; (80005ac <state_machine+0x1fc>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	2b01      	cmp	r3, #1
 80003d6:	d105      	bne.n	80003e4 <state_machine+0x34>
            {
                case(EVENT_CONTINUE):
                {
                 //   DebugPrintEstado("INIT","CONTINUE");
                    led_off();
 80003d8:	f7ff ff3a 	bl	8000250 <led_off>
                    state=STATE_FREE;
 80003dc:	4b72      	ldr	r3, [pc, #456]	; (80005a8 <state_machine+0x1f8>)
 80003de:	2202      	movs	r2, #2
 80003e0:	601a      	str	r2, [r3, #0]
                    break;
 80003e2:	e000      	b.n	80003e6 <state_machine+0x36>
                }
                default:
               //     myprintf("Error\r\n");
                    break;
 80003e4:	bf00      	nop
            }

        }
        break;
 80003e6:	e0d9      	b.n	800059c <state_machine+0x1ec>
        case (STATE_FREE):
        {

            switch (event.type)
 80003e8:	4b70      	ldr	r3, [pc, #448]	; (80005ac <state_machine+0x1fc>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	3b01      	subs	r3, #1
 80003ee:	2b04      	cmp	r3, #4
 80003f0:	d859      	bhi.n	80004a6 <state_machine+0xf6>
 80003f2:	a201      	add	r2, pc, #4	; (adr r2, 80003f8 <state_machine+0x48>)
 80003f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003f8:	080004a7 	.word	0x080004a7
 80003fc:	0800043b 	.word	0x0800043b
 8000400:	0800040d 	.word	0x0800040d
 8000404:	080004a7 	.word	0x080004a7
 8000408:	08000469 	.word	0x08000469
            {

                case(EVENT_LED_OFF):
                {
                    DebugPrintEstado("FREE","LED_OFF");
 800040c:	4a68      	ldr	r2, [pc, #416]	; (80005b0 <state_machine+0x200>)
 800040e:	4969      	ldr	r1, [pc, #420]	; (80005b4 <state_machine+0x204>)
 8000410:	4869      	ldr	r0, [pc, #420]	; (80005b8 <state_machine+0x208>)
 8000412:	f000 f993 	bl	800073c <send_uart>
 8000416:	4a69      	ldr	r2, [pc, #420]	; (80005bc <state_machine+0x20c>)
 8000418:	4966      	ldr	r1, [pc, #408]	; (80005b4 <state_machine+0x204>)
 800041a:	4867      	ldr	r0, [pc, #412]	; (80005b8 <state_machine+0x208>)
 800041c:	f000 f98e 	bl	800073c <send_uart>
 8000420:	4a67      	ldr	r2, [pc, #412]	; (80005c0 <state_machine+0x210>)
 8000422:	4964      	ldr	r1, [pc, #400]	; (80005b4 <state_machine+0x204>)
 8000424:	4864      	ldr	r0, [pc, #400]	; (80005b8 <state_machine+0x208>)
 8000426:	f000 f989 	bl	800073c <send_uart>
 800042a:	4a61      	ldr	r2, [pc, #388]	; (80005b0 <state_machine+0x200>)
 800042c:	4961      	ldr	r1, [pc, #388]	; (80005b4 <state_machine+0x204>)
 800042e:	4862      	ldr	r0, [pc, #392]	; (80005b8 <state_machine+0x208>)
 8000430:	f000 f984 	bl	800073c <send_uart>
                    led_off();
 8000434:	f7ff ff0c 	bl	8000250 <led_off>
                    break;
 8000438:	e036      	b.n	80004a8 <state_machine+0xf8>
                }
                case(EVENT_LED_ON):
                {
                    DebugPrintEstado("FREE","LED_ON");
 800043a:	4a5d      	ldr	r2, [pc, #372]	; (80005b0 <state_machine+0x200>)
 800043c:	495d      	ldr	r1, [pc, #372]	; (80005b4 <state_machine+0x204>)
 800043e:	485e      	ldr	r0, [pc, #376]	; (80005b8 <state_machine+0x208>)
 8000440:	f000 f97c 	bl	800073c <send_uart>
 8000444:	4a5d      	ldr	r2, [pc, #372]	; (80005bc <state_machine+0x20c>)
 8000446:	495b      	ldr	r1, [pc, #364]	; (80005b4 <state_machine+0x204>)
 8000448:	485b      	ldr	r0, [pc, #364]	; (80005b8 <state_machine+0x208>)
 800044a:	f000 f977 	bl	800073c <send_uart>
 800044e:	4a5d      	ldr	r2, [pc, #372]	; (80005c4 <state_machine+0x214>)
 8000450:	4958      	ldr	r1, [pc, #352]	; (80005b4 <state_machine+0x204>)
 8000452:	4859      	ldr	r0, [pc, #356]	; (80005b8 <state_machine+0x208>)
 8000454:	f000 f972 	bl	800073c <send_uart>
 8000458:	4a55      	ldr	r2, [pc, #340]	; (80005b0 <state_machine+0x200>)
 800045a:	4956      	ldr	r1, [pc, #344]	; (80005b4 <state_machine+0x204>)
 800045c:	4856      	ldr	r0, [pc, #344]	; (80005b8 <state_machine+0x208>)
 800045e:	f000 f96d 	bl	800073c <send_uart>
                    led_on();
 8000462:	f7ff ff01 	bl	8000268 <led_on>
                    break;
 8000466:	e01f      	b.n	80004a8 <state_machine+0xf8>
                }
                case(EVENT_BUTTON_PUSH):
                {
                    DebugPrintEstado("FREE","PUSH_BUTTON");
 8000468:	4a51      	ldr	r2, [pc, #324]	; (80005b0 <state_machine+0x200>)
 800046a:	4952      	ldr	r1, [pc, #328]	; (80005b4 <state_machine+0x204>)
 800046c:	4852      	ldr	r0, [pc, #328]	; (80005b8 <state_machine+0x208>)
 800046e:	f000 f965 	bl	800073c <send_uart>
 8000472:	4a52      	ldr	r2, [pc, #328]	; (80005bc <state_machine+0x20c>)
 8000474:	494f      	ldr	r1, [pc, #316]	; (80005b4 <state_machine+0x204>)
 8000476:	4850      	ldr	r0, [pc, #320]	; (80005b8 <state_machine+0x208>)
 8000478:	f000 f960 	bl	800073c <send_uart>
 800047c:	4a52      	ldr	r2, [pc, #328]	; (80005c8 <state_machine+0x218>)
 800047e:	494d      	ldr	r1, [pc, #308]	; (80005b4 <state_machine+0x204>)
 8000480:	484d      	ldr	r0, [pc, #308]	; (80005b8 <state_machine+0x208>)
 8000482:	f000 f95b 	bl	800073c <send_uart>
 8000486:	4a4a      	ldr	r2, [pc, #296]	; (80005b0 <state_machine+0x200>)
 8000488:	494a      	ldr	r1, [pc, #296]	; (80005b4 <state_machine+0x204>)
 800048a:	484b      	ldr	r0, [pc, #300]	; (80005b8 <state_machine+0x208>)
 800048c:	f000 f956 	bl	800073c <send_uart>

                    send_uart(&huart1,"Boton Presionado\r\n");
 8000490:	494e      	ldr	r1, [pc, #312]	; (80005cc <state_machine+0x21c>)
 8000492:	4849      	ldr	r0, [pc, #292]	; (80005b8 <state_machine+0x208>)
 8000494:	f000 f952 	bl	800073c <send_uart>
                    //HAL_TIM_Base_Start_IT(&htim2);

                    //HAL_TIM_Base_Stop_IT(&htim2);
                    //__HAL_TIM_SET_COUNTER(&htim2, 0);
                   // __HAL_TIM_CLEAR_FLAG(&htim2, TIM_FLAG_UPDATE);
                    HAL_TIM_Base_Start_IT(&htim2);
 8000498:	484d      	ldr	r0, [pc, #308]	; (80005d0 <state_machine+0x220>)
 800049a:	f001 fac9 	bl	8001a30 <HAL_TIM_Base_Start_IT>

                    state=STATE_PUSH;
 800049e:	4b42      	ldr	r3, [pc, #264]	; (80005a8 <state_machine+0x1f8>)
 80004a0:	2203      	movs	r2, #3
 80004a2:	601a      	str	r2, [r3, #0]
                    break;
 80004a4:	e000      	b.n	80004a8 <state_machine+0xf8>
                   // DebugPrintEstado("FREE","CONTINUE");
                    break;
                }
                default:
             //       myprintf("Error\r\n");
                    break;
 80004a6:	bf00      	nop
            }

        }
        break;
 80004a8:	e078      	b.n	800059c <state_machine+0x1ec>
        case (STATE_PUSH):
        {
            switch (event.type)
 80004aa:	4b40      	ldr	r3, [pc, #256]	; (80005ac <state_machine+0x1fc>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	3b01      	subs	r3, #1
 80004b0:	2b05      	cmp	r3, #5
 80004b2:	d871      	bhi.n	8000598 <state_machine+0x1e8>
 80004b4:	a201      	add	r2, pc, #4	; (adr r2, 80004bc <state_machine+0x10c>)
 80004b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004ba:	bf00      	nop
 80004bc:	08000599 	.word	0x08000599
 80004c0:	08000503 	.word	0x08000503
 80004c4:	080004d5 	.word	0x080004d5
 80004c8:	0800055b 	.word	0x0800055b
 80004cc:	08000531 	.word	0x08000531
 80004d0:	0800055b 	.word	0x0800055b
            {

                case(EVENT_LED_OFF):
                {
                    DebugPrintEstado("PUSH","LED_OFF");
 80004d4:	4a36      	ldr	r2, [pc, #216]	; (80005b0 <state_machine+0x200>)
 80004d6:	4937      	ldr	r1, [pc, #220]	; (80005b4 <state_machine+0x204>)
 80004d8:	4837      	ldr	r0, [pc, #220]	; (80005b8 <state_machine+0x208>)
 80004da:	f000 f92f 	bl	800073c <send_uart>
 80004de:	4a3d      	ldr	r2, [pc, #244]	; (80005d4 <state_machine+0x224>)
 80004e0:	4934      	ldr	r1, [pc, #208]	; (80005b4 <state_machine+0x204>)
 80004e2:	4835      	ldr	r0, [pc, #212]	; (80005b8 <state_machine+0x208>)
 80004e4:	f000 f92a 	bl	800073c <send_uart>
 80004e8:	4a35      	ldr	r2, [pc, #212]	; (80005c0 <state_machine+0x210>)
 80004ea:	4932      	ldr	r1, [pc, #200]	; (80005b4 <state_machine+0x204>)
 80004ec:	4832      	ldr	r0, [pc, #200]	; (80005b8 <state_machine+0x208>)
 80004ee:	f000 f925 	bl	800073c <send_uart>
 80004f2:	4a2f      	ldr	r2, [pc, #188]	; (80005b0 <state_machine+0x200>)
 80004f4:	492f      	ldr	r1, [pc, #188]	; (80005b4 <state_machine+0x204>)
 80004f6:	4830      	ldr	r0, [pc, #192]	; (80005b8 <state_machine+0x208>)
 80004f8:	f000 f920 	bl	800073c <send_uart>
                    led_off();
 80004fc:	f7ff fea8 	bl	8000250 <led_off>
                    break;
 8000500:	e04b      	b.n	800059a <state_machine+0x1ea>
                }
                case(EVENT_LED_ON):
                {
                    DebugPrintEstado("PUSH","LED_ON");
 8000502:	4a2b      	ldr	r2, [pc, #172]	; (80005b0 <state_machine+0x200>)
 8000504:	492b      	ldr	r1, [pc, #172]	; (80005b4 <state_machine+0x204>)
 8000506:	482c      	ldr	r0, [pc, #176]	; (80005b8 <state_machine+0x208>)
 8000508:	f000 f918 	bl	800073c <send_uart>
 800050c:	4a31      	ldr	r2, [pc, #196]	; (80005d4 <state_machine+0x224>)
 800050e:	4929      	ldr	r1, [pc, #164]	; (80005b4 <state_machine+0x204>)
 8000510:	4829      	ldr	r0, [pc, #164]	; (80005b8 <state_machine+0x208>)
 8000512:	f000 f913 	bl	800073c <send_uart>
 8000516:	4a2b      	ldr	r2, [pc, #172]	; (80005c4 <state_machine+0x214>)
 8000518:	4926      	ldr	r1, [pc, #152]	; (80005b4 <state_machine+0x204>)
 800051a:	4827      	ldr	r0, [pc, #156]	; (80005b8 <state_machine+0x208>)
 800051c:	f000 f90e 	bl	800073c <send_uart>
 8000520:	4a23      	ldr	r2, [pc, #140]	; (80005b0 <state_machine+0x200>)
 8000522:	4924      	ldr	r1, [pc, #144]	; (80005b4 <state_machine+0x204>)
 8000524:	4824      	ldr	r0, [pc, #144]	; (80005b8 <state_machine+0x208>)
 8000526:	f000 f909 	bl	800073c <send_uart>
                    led_on();
 800052a:	f7ff fe9d 	bl	8000268 <led_on>
                    break;
 800052e:	e034      	b.n	800059a <state_machine+0x1ea>
                }
                case(EVENT_BUTTON_PUSH):
                {
                    DebugPrintEstado("BUTTON_PUSH","EVENT_BUTTON_PUSH");
 8000530:	4a1f      	ldr	r2, [pc, #124]	; (80005b0 <state_machine+0x200>)
 8000532:	4920      	ldr	r1, [pc, #128]	; (80005b4 <state_machine+0x204>)
 8000534:	4820      	ldr	r0, [pc, #128]	; (80005b8 <state_machine+0x208>)
 8000536:	f000 f901 	bl	800073c <send_uart>
 800053a:	4a27      	ldr	r2, [pc, #156]	; (80005d8 <state_machine+0x228>)
 800053c:	491d      	ldr	r1, [pc, #116]	; (80005b4 <state_machine+0x204>)
 800053e:	481e      	ldr	r0, [pc, #120]	; (80005b8 <state_machine+0x208>)
 8000540:	f000 f8fc 	bl	800073c <send_uart>
 8000544:	4a25      	ldr	r2, [pc, #148]	; (80005dc <state_machine+0x22c>)
 8000546:	491b      	ldr	r1, [pc, #108]	; (80005b4 <state_machine+0x204>)
 8000548:	481b      	ldr	r0, [pc, #108]	; (80005b8 <state_machine+0x208>)
 800054a:	f000 f8f7 	bl	800073c <send_uart>
 800054e:	4a18      	ldr	r2, [pc, #96]	; (80005b0 <state_machine+0x200>)
 8000550:	4918      	ldr	r1, [pc, #96]	; (80005b4 <state_machine+0x204>)
 8000552:	4819      	ldr	r0, [pc, #100]	; (80005b8 <state_machine+0x208>)
 8000554:	f000 f8f2 	bl	800073c <send_uart>
                    break;
 8000558:	e01f      	b.n	800059a <state_machine+0x1ea>
                }
                case(EVENT_BUTTON_FREE):
                case(EVENT_TIMEOUT):
                {
                    DebugPrintEstado("BUTTON_PUSH","FREE");
 800055a:	4a15      	ldr	r2, [pc, #84]	; (80005b0 <state_machine+0x200>)
 800055c:	4915      	ldr	r1, [pc, #84]	; (80005b4 <state_machine+0x204>)
 800055e:	4816      	ldr	r0, [pc, #88]	; (80005b8 <state_machine+0x208>)
 8000560:	f000 f8ec 	bl	800073c <send_uart>
 8000564:	4a1c      	ldr	r2, [pc, #112]	; (80005d8 <state_machine+0x228>)
 8000566:	4913      	ldr	r1, [pc, #76]	; (80005b4 <state_machine+0x204>)
 8000568:	4813      	ldr	r0, [pc, #76]	; (80005b8 <state_machine+0x208>)
 800056a:	f000 f8e7 	bl	800073c <send_uart>
 800056e:	4a13      	ldr	r2, [pc, #76]	; (80005bc <state_machine+0x20c>)
 8000570:	4910      	ldr	r1, [pc, #64]	; (80005b4 <state_machine+0x204>)
 8000572:	4811      	ldr	r0, [pc, #68]	; (80005b8 <state_machine+0x208>)
 8000574:	f000 f8e2 	bl	800073c <send_uart>
 8000578:	4a0d      	ldr	r2, [pc, #52]	; (80005b0 <state_machine+0x200>)
 800057a:	490e      	ldr	r1, [pc, #56]	; (80005b4 <state_machine+0x204>)
 800057c:	480e      	ldr	r0, [pc, #56]	; (80005b8 <state_machine+0x208>)
 800057e:	f000 f8dd 	bl	800073c <send_uart>

                    send_uart(&huart1,"Boton Liberado\r\n");
 8000582:	4917      	ldr	r1, [pc, #92]	; (80005e0 <state_machine+0x230>)
 8000584:	480c      	ldr	r0, [pc, #48]	; (80005b8 <state_machine+0x208>)
 8000586:	f000 f8d9 	bl	800073c <send_uart>
                    //send_byte('F');

                    HAL_TIM_Base_Stop_IT(&htim2);
 800058a:	4811      	ldr	r0, [pc, #68]	; (80005d0 <state_machine+0x220>)
 800058c:	f001 faa2 	bl	8001ad4 <HAL_TIM_Base_Stop_IT>

                    state=STATE_FREE;
 8000590:	4b05      	ldr	r3, [pc, #20]	; (80005a8 <state_machine+0x1f8>)
 8000592:	2202      	movs	r2, #2
 8000594:	601a      	str	r2, [r3, #0]

                    break;
 8000596:	e000      	b.n	800059a <state_machine+0x1ea>
                    //DebugPrintEstado("PUSH","CONTINUE");
                    break;
                }
                default:
                    //myprintf("Error\r\n");
                    break;
 8000598:	bf00      	nop
            }

        }
        break;
 800059a:	bf00      	nop
    }

    event.type=EVENT_CONTINUE;
 800059c:	4b03      	ldr	r3, [pc, #12]	; (80005ac <state_machine+0x1fc>)
 800059e:	2201      	movs	r2, #1
 80005a0:	601a      	str	r2, [r3, #0]
}
 80005a2:	bf00      	nop
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	200000b4 	.word	0x200000b4
 80005ac:	200000a8 	.word	0x200000a8
 80005b0:	0800305c 	.word	0x0800305c
 80005b4:	0800307c 	.word	0x0800307c
 80005b8:	20000108 	.word	0x20000108
 80005bc:	08003084 	.word	0x08003084
 80005c0:	0800308c 	.word	0x0800308c
 80005c4:	08003094 	.word	0x08003094
 80005c8:	0800309c 	.word	0x0800309c
 80005cc:	080030a8 	.word	0x080030a8
 80005d0:	200000c0 	.word	0x200000c0
 80005d4:	080030bc 	.word	0x080030bc
 80005d8:	080030c4 	.word	0x080030c4
 80005dc:	080030d0 	.word	0x080030d0
 80005e0:	080030e4 	.word	0x080030e4

080005e4 <do_init>:


void do_init()
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0

    state= STATE_INIT;
 80005e8:	4b0b      	ldr	r3, [pc, #44]	; (8000618 <do_init+0x34>)
 80005ea:	2201      	movs	r2, #1
 80005ec:	601a      	str	r2, [r3, #0]

    sensors[ACTUATOR_LED].gpio_pin=(int)GPIO_PIN_13;
 80005ee:	4b0b      	ldr	r3, [pc, #44]	; (800061c <do_init+0x38>)
 80005f0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005f4:	601a      	str	r2, [r3, #0]
    sensors[ACTUATOR_LED].gpio_char=GPIOC;
 80005f6:	4b09      	ldr	r3, [pc, #36]	; (800061c <do_init+0x38>)
 80005f8:	4a09      	ldr	r2, [pc, #36]	; (8000620 <do_init+0x3c>)
 80005fa:	605a      	str	r2, [r3, #4]
    sensors[SENSOR_BUTTON].gpio_pin=(int)GPIO_PIN_0;
 80005fc:	4b07      	ldr	r3, [pc, #28]	; (800061c <do_init+0x38>)
 80005fe:	2201      	movs	r2, #1
 8000600:	615a      	str	r2, [r3, #20]
    sensors[SENSOR_BUTTON].gpio_char=GPIOA;
 8000602:	4b06      	ldr	r3, [pc, #24]	; (800061c <do_init+0x38>)
 8000604:	4a07      	ldr	r2, [pc, #28]	; (8000624 <do_init+0x40>)
 8000606:	619a      	str	r2, [r3, #24]

    timeout=FALSE;
 8000608:	4b07      	ldr	r3, [pc, #28]	; (8000628 <do_init+0x44>)
 800060a:	2200      	movs	r2, #0
 800060c:	601a      	str	r2, [r3, #0]
}
 800060e:	bf00      	nop
 8000610:	46bd      	mov	sp, r7
 8000612:	bc80      	pop	{r7}
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	200000b4 	.word	0x200000b4
 800061c:	20000080 	.word	0x20000080
 8000620:	40011000 	.word	0x40011000
 8000624:	40010800 	.word	0x40010800
 8000628:	200000b8 	.word	0x200000b8

0800062c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000630:	f000 fa7a 	bl	8000b28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000634:	f000 f80d 	bl	8000652 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000638:	f7ff fd90 	bl	800015c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800063c:	f000 f9d8 	bl	80009f0 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000640:	f000 f964 	bl	800090c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */



  do_init();
 8000644:	f7ff ffce 	bl	80005e4 <do_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  state_machine();
 8000648:	f7ff feb2 	bl	80003b0 <state_machine>
	  sleep();
 800064c:	f7ff fdec 	bl	8000228 <sleep>
	  state_machine();
 8000650:	e7fa      	b.n	8000648 <main+0x1c>

08000652 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000652:	b580      	push	{r7, lr}
 8000654:	b090      	sub	sp, #64	; 0x40
 8000656:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000658:	f107 0318 	add.w	r3, r7, #24
 800065c:	2228      	movs	r2, #40	; 0x28
 800065e:	2100      	movs	r1, #0
 8000660:	4618      	mov	r0, r3
 8000662:	f002 f85d 	bl	8002720 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000666:	1d3b      	adds	r3, r7, #4
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000674:	2302      	movs	r3, #2
 8000676:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000678:	2301      	movs	r3, #1
 800067a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800067c:	2310      	movs	r3, #16
 800067e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000680:	2300      	movs	r3, #0
 8000682:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000684:	f107 0318 	add.w	r3, r7, #24
 8000688:	4618      	mov	r0, r3
 800068a:	f000 fd71 	bl	8001170 <HAL_RCC_OscConfig>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000694:	f000 f818 	bl	80006c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000698:	230f      	movs	r3, #15
 800069a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800069c:	2300      	movs	r3, #0
 800069e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a0:	2300      	movs	r3, #0
 80006a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006a4:	2300      	movs	r3, #0
 80006a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006ac:	1d3b      	adds	r3, r7, #4
 80006ae:	2100      	movs	r1, #0
 80006b0:	4618      	mov	r0, r3
 80006b2:	f000 ffdf 	bl	8001674 <HAL_RCC_ClockConfig>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80006bc:	f000 f804 	bl	80006c8 <Error_Handler>
  }
}
 80006c0:	bf00      	nop
 80006c2:	3740      	adds	r7, #64	; 0x40
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}

080006c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006cc:	b672      	cpsid	i
}
 80006ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006d0:	e7fe      	b.n	80006d0 <Error_Handler+0x8>

080006d2 <uart_write_mode_poll>:

uint8_t mode_tx_usart= POLLING;


int uart_write_mode_poll(UART_HandleTypeDef *huart, char *buf, int len)
{
 80006d2:	b580      	push	{r7, lr}
 80006d4:	b084      	sub	sp, #16
 80006d6:	af00      	add	r7, sp, #0
 80006d8:	60f8      	str	r0, [r7, #12]
 80006da:	60b9      	str	r1, [r7, #8]
 80006dc:	607a      	str	r2, [r7, #4]
    if(HAL_UART_Transmit(huart, (uint8_t*)buf,(uint16_t)len, TIMEOUT_POLL)==HAL_OK)
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	b29a      	uxth	r2, r3
 80006e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006e6:	68b9      	ldr	r1, [r7, #8]
 80006e8:	68f8      	ldr	r0, [r7, #12]
 80006ea:	f001 fdcd 	bl	8002288 <HAL_UART_Transmit>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d101      	bne.n	80006f8 <uart_write_mode_poll+0x26>
    {
    	return len;
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	e000      	b.n	80006fa <uart_write_mode_poll+0x28>
    }
    else
    {
    	return 0;
 80006f8:	2300      	movs	r3, #0
    }
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	3710      	adds	r7, #16
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
	...

08000704 <uart_write>:
  * @param buf: String que se va a enviar a la huart
  * @param len: tamaño del string a enviar
  * @return retorna la cantidad de bytes enviados al huart
  */
int uart_write(UART_HandleTypeDef *huart, char *buf, int len)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b086      	sub	sp, #24
 8000708:	af00      	add	r7, sp, #0
 800070a:	60f8      	str	r0, [r7, #12]
 800070c:	60b9      	str	r1, [r7, #8]
 800070e:	607a      	str	r2, [r7, #4]
	int nwritten=0;
 8000710:	2300      	movs	r3, #0
 8000712:	617b      	str	r3, [r7, #20]

	switch(mode_tx_usart)
 8000714:	4b08      	ldr	r3, [pc, #32]	; (8000738 <uart_write+0x34>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	2b01      	cmp	r3, #1
 800071a:	d001      	beq.n	8000720 <uart_write+0x1c>
 800071c:	2b02      	cmp	r3, #2
		case POLLING:
			nwritten= uart_write_mode_poll(huart,buf,len);
			break;
		case IRQ:
			//nwritten= uart_write_mode_irq(huart,buf,len);
			break;
 800071e:	e006      	b.n	800072e <uart_write+0x2a>
			nwritten= uart_write_mode_poll(huart,buf,len);
 8000720:	687a      	ldr	r2, [r7, #4]
 8000722:	68b9      	ldr	r1, [r7, #8]
 8000724:	68f8      	ldr	r0, [r7, #12]
 8000726:	f7ff ffd4 	bl	80006d2 <uart_write_mode_poll>
 800072a:	6178      	str	r0, [r7, #20]
			break;
 800072c:	bf00      	nop
		default:
			//Error_Handler();
	}
	return nwritten;
 800072e:	697b      	ldr	r3, [r7, #20]
}
 8000730:	4618      	mov	r0, r3
 8000732:	3718      	adds	r7, #24
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	20000004 	.word	0x20000004

0800073c <send_uart>:
  * @param u: estrucutura del huart donde se enviaran los datos por la terminal serial
  * @param fmt: String que se va a enviar a la huart
  * @return retorna la cantidad de bytes enviados al huart
  */
uint8_t send_uart(UART_HandleTypeDef *huart, const char *fmt, ...) // custom printf() function
{
 800073c:	b40e      	push	{r1, r2, r3}
 800073e:	b580      	push	{r7, lr}
 8000740:	b0c5      	sub	sp, #276	; 0x114
 8000742:	af00      	add	r7, sp, #0
 8000744:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000748:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800074c:	6018      	str	r0, [r3, #0]

	char msg[SIZE_MSG_UART_TO_SEND]={0};
 800074e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000752:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	3304      	adds	r3, #4
 800075c:	22fb      	movs	r2, #251	; 0xfb
 800075e:	2100      	movs	r1, #0
 8000760:	4618      	mov	r0, r3
 8000762:	f001 ffdd 	bl	8002720 <memset>
	uint8_t result=0;
 8000766:	2300      	movs	r3, #0
 8000768:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f

	va_list argp;
    va_start(argp, fmt);
 800076c:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8000770:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000774:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000778:	601a      	str	r2, [r3, #0]

    //con vsnprintf se arma el msg sin peligro de producir oveflow
    //debido a que se la cadena orignr es mas grande que el destino
    //trunca al mensaje.
    result=vsnprintf(msg, sizeof(msg),fmt,argp);
 800077a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800077e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000782:	f107 0010 	add.w	r0, r7, #16
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800078c:	21ff      	movs	r1, #255	; 0xff
 800078e:	f001 ffb9 	bl	8002704 <vsniprintf>
 8000792:	4603      	mov	r3, r0
 8000794:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
    uart_write(huart,msg,strlen(msg));
 8000798:	f107 0310 	add.w	r3, r7, #16
 800079c:	4618      	mov	r0, r3
 800079e:	f7ff fcd5 	bl	800014c <strlen>
 80007a2:	4603      	mov	r3, r0
 80007a4:	461a      	mov	r2, r3
 80007a6:	f107 0110 	add.w	r1, r7, #16
 80007aa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80007ae:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80007b2:	6818      	ldr	r0, [r3, #0]
 80007b4:	f7ff ffa6 	bl	8000704 <uart_write>
    va_end(argp);

    return result;
 80007b8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
}
 80007bc:	4618      	mov	r0, r3
 80007be:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80007c2:	46bd      	mov	sp, r7
 80007c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80007c8:	b003      	add	sp, #12
 80007ca:	4770      	bx	lr

080007cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b085      	sub	sp, #20
 80007d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007d2:	4b15      	ldr	r3, [pc, #84]	; (8000828 <HAL_MspInit+0x5c>)
 80007d4:	699b      	ldr	r3, [r3, #24]
 80007d6:	4a14      	ldr	r2, [pc, #80]	; (8000828 <HAL_MspInit+0x5c>)
 80007d8:	f043 0301 	orr.w	r3, r3, #1
 80007dc:	6193      	str	r3, [r2, #24]
 80007de:	4b12      	ldr	r3, [pc, #72]	; (8000828 <HAL_MspInit+0x5c>)
 80007e0:	699b      	ldr	r3, [r3, #24]
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	60bb      	str	r3, [r7, #8]
 80007e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ea:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <HAL_MspInit+0x5c>)
 80007ec:	69db      	ldr	r3, [r3, #28]
 80007ee:	4a0e      	ldr	r2, [pc, #56]	; (8000828 <HAL_MspInit+0x5c>)
 80007f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007f4:	61d3      	str	r3, [r2, #28]
 80007f6:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <HAL_MspInit+0x5c>)
 80007f8:	69db      	ldr	r3, [r3, #28]
 80007fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000802:	4b0a      	ldr	r3, [pc, #40]	; (800082c <HAL_MspInit+0x60>)
 8000804:	685b      	ldr	r3, [r3, #4]
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000816:	60fb      	str	r3, [r7, #12]
 8000818:	4a04      	ldr	r2, [pc, #16]	; (800082c <HAL_MspInit+0x60>)
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800081e:	bf00      	nop
 8000820:	3714      	adds	r7, #20
 8000822:	46bd      	mov	sp, r7
 8000824:	bc80      	pop	{r7}
 8000826:	4770      	bx	lr
 8000828:	40021000 	.word	0x40021000
 800082c:	40010000 	.word	0x40010000

08000830 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000834:	e7fe      	b.n	8000834 <NMI_Handler+0x4>

08000836 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000836:	b480      	push	{r7}
 8000838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800083a:	e7fe      	b.n	800083a <HardFault_Handler+0x4>

0800083c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000840:	e7fe      	b.n	8000840 <MemManage_Handler+0x4>

08000842 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000842:	b480      	push	{r7}
 8000844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000846:	e7fe      	b.n	8000846 <BusFault_Handler+0x4>

08000848 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800084c:	e7fe      	b.n	800084c <UsageFault_Handler+0x4>

0800084e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800084e:	b480      	push	{r7}
 8000850:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000852:	bf00      	nop
 8000854:	46bd      	mov	sp, r7
 8000856:	bc80      	pop	{r7}
 8000858:	4770      	bx	lr

0800085a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800085a:	b480      	push	{r7}
 800085c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800085e:	bf00      	nop
 8000860:	46bd      	mov	sp, r7
 8000862:	bc80      	pop	{r7}
 8000864:	4770      	bx	lr

08000866 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000866:	b480      	push	{r7}
 8000868:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800086a:	bf00      	nop
 800086c:	46bd      	mov	sp, r7
 800086e:	bc80      	pop	{r7}
 8000870:	4770      	bx	lr

08000872 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000872:	b580      	push	{r7, lr}
 8000874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000876:	f000 f99d 	bl	8000bb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
	...

08000880 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000884:	4802      	ldr	r0, [pc, #8]	; (8000890 <TIM2_IRQHandler+0x10>)
 8000886:	f001 f953 	bl	8001b30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800088a:	bf00      	nop
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	200000c0 	.word	0x200000c0

08000894 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b086      	sub	sp, #24
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800089c:	4a14      	ldr	r2, [pc, #80]	; (80008f0 <_sbrk+0x5c>)
 800089e:	4b15      	ldr	r3, [pc, #84]	; (80008f4 <_sbrk+0x60>)
 80008a0:	1ad3      	subs	r3, r2, r3
 80008a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008a4:	697b      	ldr	r3, [r7, #20]
 80008a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008a8:	4b13      	ldr	r3, [pc, #76]	; (80008f8 <_sbrk+0x64>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d102      	bne.n	80008b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008b0:	4b11      	ldr	r3, [pc, #68]	; (80008f8 <_sbrk+0x64>)
 80008b2:	4a12      	ldr	r2, [pc, #72]	; (80008fc <_sbrk+0x68>)
 80008b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008b6:	4b10      	ldr	r3, [pc, #64]	; (80008f8 <_sbrk+0x64>)
 80008b8:	681a      	ldr	r2, [r3, #0]
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	4413      	add	r3, r2
 80008be:	693a      	ldr	r2, [r7, #16]
 80008c0:	429a      	cmp	r2, r3
 80008c2:	d207      	bcs.n	80008d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008c4:	f001 ff34 	bl	8002730 <__errno>
 80008c8:	4603      	mov	r3, r0
 80008ca:	220c      	movs	r2, #12
 80008cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008ce:	f04f 33ff 	mov.w	r3, #4294967295
 80008d2:	e009      	b.n	80008e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008d4:	4b08      	ldr	r3, [pc, #32]	; (80008f8 <_sbrk+0x64>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008da:	4b07      	ldr	r3, [pc, #28]	; (80008f8 <_sbrk+0x64>)
 80008dc:	681a      	ldr	r2, [r3, #0]
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	4413      	add	r3, r2
 80008e2:	4a05      	ldr	r2, [pc, #20]	; (80008f8 <_sbrk+0x64>)
 80008e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008e6:	68fb      	ldr	r3, [r7, #12]
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	3718      	adds	r7, #24
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	20005000 	.word	0x20005000
 80008f4:	00000400 	.word	0x00000400
 80008f8:	200000bc 	.word	0x200000bc
 80008fc:	200002a0 	.word	0x200002a0

08000900 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000904:	bf00      	nop
 8000906:	46bd      	mov	sp, r7
 8000908:	bc80      	pop	{r7}
 800090a:	4770      	bx	lr

0800090c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b086      	sub	sp, #24
 8000910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000912:	f107 0308 	add.w	r3, r7, #8
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	605a      	str	r2, [r3, #4]
 800091c:	609a      	str	r2, [r3, #8]
 800091e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000920:	463b      	mov	r3, r7
 8000922:	2200      	movs	r2, #0
 8000924:	601a      	str	r2, [r3, #0]
 8000926:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000928:	4b1e      	ldr	r3, [pc, #120]	; (80009a4 <MX_TIM2_Init+0x98>)
 800092a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800092e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10999;
 8000930:	4b1c      	ldr	r3, [pc, #112]	; (80009a4 <MX_TIM2_Init+0x98>)
 8000932:	f642 22f7 	movw	r2, #10999	; 0x2af7
 8000936:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000938:	4b1a      	ldr	r3, [pc, #104]	; (80009a4 <MX_TIM2_Init+0x98>)
 800093a:	2200      	movs	r2, #0
 800093c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 800093e:	4b19      	ldr	r3, [pc, #100]	; (80009a4 <MX_TIM2_Init+0x98>)
 8000940:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000944:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000946:	4b17      	ldr	r3, [pc, #92]	; (80009a4 <MX_TIM2_Init+0x98>)
 8000948:	2200      	movs	r2, #0
 800094a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800094c:	4b15      	ldr	r3, [pc, #84]	; (80009a4 <MX_TIM2_Init+0x98>)
 800094e:	2280      	movs	r2, #128	; 0x80
 8000950:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000952:	4814      	ldr	r0, [pc, #80]	; (80009a4 <MX_TIM2_Init+0x98>)
 8000954:	f001 f81c 	bl	8001990 <HAL_TIM_Base_Init>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800095e:	f7ff feb3 	bl	80006c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000962:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000966:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000968:	f107 0308 	add.w	r3, r7, #8
 800096c:	4619      	mov	r1, r3
 800096e:	480d      	ldr	r0, [pc, #52]	; (80009a4 <MX_TIM2_Init+0x98>)
 8000970:	f001 f9e6 	bl	8001d40 <HAL_TIM_ConfigClockSource>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800097a:	f7ff fea5 	bl	80006c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800097e:	2300      	movs	r3, #0
 8000980:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000982:	2300      	movs	r3, #0
 8000984:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000986:	463b      	mov	r3, r7
 8000988:	4619      	mov	r1, r3
 800098a:	4806      	ldr	r0, [pc, #24]	; (80009a4 <MX_TIM2_Init+0x98>)
 800098c:	f001 fbbc 	bl	8002108 <HAL_TIMEx_MasterConfigSynchronization>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000996:	f7ff fe97 	bl	80006c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800099a:	bf00      	nop
 800099c:	3718      	adds	r7, #24
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	200000c0 	.word	0x200000c0

080009a8 <HAL_TIM_Base_MspInit>:



void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80009b8:	d113      	bne.n	80009e2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80009ba:	4b0c      	ldr	r3, [pc, #48]	; (80009ec <HAL_TIM_Base_MspInit+0x44>)
 80009bc:	69db      	ldr	r3, [r3, #28]
 80009be:	4a0b      	ldr	r2, [pc, #44]	; (80009ec <HAL_TIM_Base_MspInit+0x44>)
 80009c0:	f043 0301 	orr.w	r3, r3, #1
 80009c4:	61d3      	str	r3, [r2, #28]
 80009c6:	4b09      	ldr	r3, [pc, #36]	; (80009ec <HAL_TIM_Base_MspInit+0x44>)
 80009c8:	69db      	ldr	r3, [r3, #28]
 80009ca:	f003 0301 	and.w	r3, r3, #1
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80009d2:	2200      	movs	r2, #0
 80009d4:	2100      	movs	r1, #0
 80009d6:	201c      	movs	r0, #28
 80009d8:	f000 f9df 	bl	8000d9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80009dc:	201c      	movs	r0, #28
 80009de:	f000 f9f8 	bl	8000dd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80009e2:	bf00      	nop
 80009e4:	3710      	adds	r7, #16
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40021000 	.word	0x40021000

080009f0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009f4:	4b11      	ldr	r3, [pc, #68]	; (8000a3c <MX_USART1_UART_Init+0x4c>)
 80009f6:	4a12      	ldr	r2, [pc, #72]	; (8000a40 <MX_USART1_UART_Init+0x50>)
 80009f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80009fa:	4b10      	ldr	r3, [pc, #64]	; (8000a3c <MX_USART1_UART_Init+0x4c>)
 80009fc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a00:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a02:	4b0e      	ldr	r3, [pc, #56]	; (8000a3c <MX_USART1_UART_Init+0x4c>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a08:	4b0c      	ldr	r3, [pc, #48]	; (8000a3c <MX_USART1_UART_Init+0x4c>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a0e:	4b0b      	ldr	r3, [pc, #44]	; (8000a3c <MX_USART1_UART_Init+0x4c>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a14:	4b09      	ldr	r3, [pc, #36]	; (8000a3c <MX_USART1_UART_Init+0x4c>)
 8000a16:	220c      	movs	r2, #12
 8000a18:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a1a:	4b08      	ldr	r3, [pc, #32]	; (8000a3c <MX_USART1_UART_Init+0x4c>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a20:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <MX_USART1_UART_Init+0x4c>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a26:	4805      	ldr	r0, [pc, #20]	; (8000a3c <MX_USART1_UART_Init+0x4c>)
 8000a28:	f001 fbde 	bl	80021e8 <HAL_UART_Init>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a32:	f7ff fe49 	bl	80006c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	20000108 	.word	0x20000108
 8000a40:	40013800 	.word	0x40013800

08000a44 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b088      	sub	sp, #32
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4c:	f107 0310 	add.w	r3, r7, #16
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
 8000a58:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	4a1c      	ldr	r2, [pc, #112]	; (8000ad0 <HAL_UART_MspInit+0x8c>)
 8000a60:	4293      	cmp	r3, r2
 8000a62:	d131      	bne.n	8000ac8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a64:	4b1b      	ldr	r3, [pc, #108]	; (8000ad4 <HAL_UART_MspInit+0x90>)
 8000a66:	699b      	ldr	r3, [r3, #24]
 8000a68:	4a1a      	ldr	r2, [pc, #104]	; (8000ad4 <HAL_UART_MspInit+0x90>)
 8000a6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a6e:	6193      	str	r3, [r2, #24]
 8000a70:	4b18      	ldr	r3, [pc, #96]	; (8000ad4 <HAL_UART_MspInit+0x90>)
 8000a72:	699b      	ldr	r3, [r3, #24]
 8000a74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a78:	60fb      	str	r3, [r7, #12]
 8000a7a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7c:	4b15      	ldr	r3, [pc, #84]	; (8000ad4 <HAL_UART_MspInit+0x90>)
 8000a7e:	699b      	ldr	r3, [r3, #24]
 8000a80:	4a14      	ldr	r2, [pc, #80]	; (8000ad4 <HAL_UART_MspInit+0x90>)
 8000a82:	f043 0304 	orr.w	r3, r3, #4
 8000a86:	6193      	str	r3, [r2, #24]
 8000a88:	4b12      	ldr	r3, [pc, #72]	; (8000ad4 <HAL_UART_MspInit+0x90>)
 8000a8a:	699b      	ldr	r3, [r3, #24]
 8000a8c:	f003 0304 	and.w	r3, r3, #4
 8000a90:	60bb      	str	r3, [r7, #8]
 8000a92:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a98:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a9e:	2303      	movs	r3, #3
 8000aa0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa2:	f107 0310 	add.w	r3, r7, #16
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	480b      	ldr	r0, [pc, #44]	; (8000ad8 <HAL_UART_MspInit+0x94>)
 8000aaa:	f000 f9ad 	bl	8000e08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000aae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ab2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000abc:	f107 0310 	add.w	r3, r7, #16
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4805      	ldr	r0, [pc, #20]	; (8000ad8 <HAL_UART_MspInit+0x94>)
 8000ac4:	f000 f9a0 	bl	8000e08 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000ac8:	bf00      	nop
 8000aca:	3720      	adds	r7, #32
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	40013800 	.word	0x40013800
 8000ad4:	40021000 	.word	0x40021000
 8000ad8:	40010800 	.word	0x40010800

08000adc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000adc:	f7ff ff10 	bl	8000900 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ae0:	480b      	ldr	r0, [pc, #44]	; (8000b10 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000ae2:	490c      	ldr	r1, [pc, #48]	; (8000b14 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000ae4:	4a0c      	ldr	r2, [pc, #48]	; (8000b18 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000ae6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ae8:	e002      	b.n	8000af0 <LoopCopyDataInit>

08000aea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aee:	3304      	adds	r3, #4

08000af0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000af0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000af2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000af4:	d3f9      	bcc.n	8000aea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000af6:	4a09      	ldr	r2, [pc, #36]	; (8000b1c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000af8:	4c09      	ldr	r4, [pc, #36]	; (8000b20 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000afa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000afc:	e001      	b.n	8000b02 <LoopFillZerobss>

08000afe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000afe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b00:	3204      	adds	r2, #4

08000b02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b04:	d3fb      	bcc.n	8000afe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b06:	f001 fe19 	bl	800273c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b0a:	f7ff fd8f 	bl	800062c <main>
  bx lr
 8000b0e:	4770      	bx	lr
  ldr r0, =_sdata
 8000b10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b14:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000b18:	08003160 	.word	0x08003160
  ldr r2, =_sbss
 8000b1c:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000b20:	2000029c 	.word	0x2000029c

08000b24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b24:	e7fe      	b.n	8000b24 <ADC1_2_IRQHandler>
	...

08000b28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b2c:	4b08      	ldr	r3, [pc, #32]	; (8000b50 <HAL_Init+0x28>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a07      	ldr	r2, [pc, #28]	; (8000b50 <HAL_Init+0x28>)
 8000b32:	f043 0310 	orr.w	r3, r3, #16
 8000b36:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b38:	2003      	movs	r0, #3
 8000b3a:	f000 f923 	bl	8000d84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b3e:	200f      	movs	r0, #15
 8000b40:	f000 f808 	bl	8000b54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b44:	f7ff fe42 	bl	80007cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b48:	2300      	movs	r3, #0
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40022000 	.word	0x40022000

08000b54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b5c:	4b12      	ldr	r3, [pc, #72]	; (8000ba8 <HAL_InitTick+0x54>)
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	4b12      	ldr	r3, [pc, #72]	; (8000bac <HAL_InitTick+0x58>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	4619      	mov	r1, r3
 8000b66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b72:	4618      	mov	r0, r3
 8000b74:	f000 f93b 	bl	8000dee <HAL_SYSTICK_Config>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	e00e      	b.n	8000ba0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	2b0f      	cmp	r3, #15
 8000b86:	d80a      	bhi.n	8000b9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	6879      	ldr	r1, [r7, #4]
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	f000 f903 	bl	8000d9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b94:	4a06      	ldr	r2, [pc, #24]	; (8000bb0 <HAL_InitTick+0x5c>)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	e000      	b.n	8000ba0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b9e:	2301      	movs	r3, #1
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3708      	adds	r7, #8
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	20000008 	.word	0x20000008
 8000bac:	20000010 	.word	0x20000010
 8000bb0:	2000000c 	.word	0x2000000c

08000bb4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bb8:	4b05      	ldr	r3, [pc, #20]	; (8000bd0 <HAL_IncTick+0x1c>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	4b05      	ldr	r3, [pc, #20]	; (8000bd4 <HAL_IncTick+0x20>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4413      	add	r3, r2
 8000bc4:	4a03      	ldr	r2, [pc, #12]	; (8000bd4 <HAL_IncTick+0x20>)
 8000bc6:	6013      	str	r3, [r2, #0]
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bc80      	pop	{r7}
 8000bce:	4770      	bx	lr
 8000bd0:	20000010 	.word	0x20000010
 8000bd4:	20000150 	.word	0x20000150

08000bd8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  return uwTick;
 8000bdc:	4b02      	ldr	r3, [pc, #8]	; (8000be8 <HAL_GetTick+0x10>)
 8000bde:	681b      	ldr	r3, [r3, #0]
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bc80      	pop	{r7}
 8000be6:	4770      	bx	lr
 8000be8:	20000150 	.word	0x20000150

08000bec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b085      	sub	sp, #20
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	f003 0307 	and.w	r3, r3, #7
 8000bfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bfc:	4b0c      	ldr	r3, [pc, #48]	; (8000c30 <__NVIC_SetPriorityGrouping+0x44>)
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c02:	68ba      	ldr	r2, [r7, #8]
 8000c04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c08:	4013      	ands	r3, r2
 8000c0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c1e:	4a04      	ldr	r2, [pc, #16]	; (8000c30 <__NVIC_SetPriorityGrouping+0x44>)
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	60d3      	str	r3, [r2, #12]
}
 8000c24:	bf00      	nop
 8000c26:	3714      	adds	r7, #20
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bc80      	pop	{r7}
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	e000ed00 	.word	0xe000ed00

08000c34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c38:	4b04      	ldr	r3, [pc, #16]	; (8000c4c <__NVIC_GetPriorityGrouping+0x18>)
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	0a1b      	lsrs	r3, r3, #8
 8000c3e:	f003 0307 	and.w	r3, r3, #7
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bc80      	pop	{r7}
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	db0b      	blt.n	8000c7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c62:	79fb      	ldrb	r3, [r7, #7]
 8000c64:	f003 021f 	and.w	r2, r3, #31
 8000c68:	4906      	ldr	r1, [pc, #24]	; (8000c84 <__NVIC_EnableIRQ+0x34>)
 8000c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6e:	095b      	lsrs	r3, r3, #5
 8000c70:	2001      	movs	r0, #1
 8000c72:	fa00 f202 	lsl.w	r2, r0, r2
 8000c76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c7a:	bf00      	nop
 8000c7c:	370c      	adds	r7, #12
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bc80      	pop	{r7}
 8000c82:	4770      	bx	lr
 8000c84:	e000e100 	.word	0xe000e100

08000c88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4603      	mov	r3, r0
 8000c90:	6039      	str	r1, [r7, #0]
 8000c92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	db0a      	blt.n	8000cb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	b2da      	uxtb	r2, r3
 8000ca0:	490c      	ldr	r1, [pc, #48]	; (8000cd4 <__NVIC_SetPriority+0x4c>)
 8000ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca6:	0112      	lsls	r2, r2, #4
 8000ca8:	b2d2      	uxtb	r2, r2
 8000caa:	440b      	add	r3, r1
 8000cac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cb0:	e00a      	b.n	8000cc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	b2da      	uxtb	r2, r3
 8000cb6:	4908      	ldr	r1, [pc, #32]	; (8000cd8 <__NVIC_SetPriority+0x50>)
 8000cb8:	79fb      	ldrb	r3, [r7, #7]
 8000cba:	f003 030f 	and.w	r3, r3, #15
 8000cbe:	3b04      	subs	r3, #4
 8000cc0:	0112      	lsls	r2, r2, #4
 8000cc2:	b2d2      	uxtb	r2, r2
 8000cc4:	440b      	add	r3, r1
 8000cc6:	761a      	strb	r2, [r3, #24]
}
 8000cc8:	bf00      	nop
 8000cca:	370c      	adds	r7, #12
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bc80      	pop	{r7}
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	e000e100 	.word	0xe000e100
 8000cd8:	e000ed00 	.word	0xe000ed00

08000cdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b089      	sub	sp, #36	; 0x24
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	60f8      	str	r0, [r7, #12]
 8000ce4:	60b9      	str	r1, [r7, #8]
 8000ce6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	f003 0307 	and.w	r3, r3, #7
 8000cee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cf0:	69fb      	ldr	r3, [r7, #28]
 8000cf2:	f1c3 0307 	rsb	r3, r3, #7
 8000cf6:	2b04      	cmp	r3, #4
 8000cf8:	bf28      	it	cs
 8000cfa:	2304      	movcs	r3, #4
 8000cfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	3304      	adds	r3, #4
 8000d02:	2b06      	cmp	r3, #6
 8000d04:	d902      	bls.n	8000d0c <NVIC_EncodePriority+0x30>
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	3b03      	subs	r3, #3
 8000d0a:	e000      	b.n	8000d0e <NVIC_EncodePriority+0x32>
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d10:	f04f 32ff 	mov.w	r2, #4294967295
 8000d14:	69bb      	ldr	r3, [r7, #24]
 8000d16:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1a:	43da      	mvns	r2, r3
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	401a      	ands	r2, r3
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d24:	f04f 31ff 	mov.w	r1, #4294967295
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d2e:	43d9      	mvns	r1, r3
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d34:	4313      	orrs	r3, r2
         );
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3724      	adds	r7, #36	; 0x24
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bc80      	pop	{r7}
 8000d3e:	4770      	bx	lr

08000d40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	3b01      	subs	r3, #1
 8000d4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d50:	d301      	bcc.n	8000d56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d52:	2301      	movs	r3, #1
 8000d54:	e00f      	b.n	8000d76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d56:	4a0a      	ldr	r2, [pc, #40]	; (8000d80 <SysTick_Config+0x40>)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	3b01      	subs	r3, #1
 8000d5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d5e:	210f      	movs	r1, #15
 8000d60:	f04f 30ff 	mov.w	r0, #4294967295
 8000d64:	f7ff ff90 	bl	8000c88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d68:	4b05      	ldr	r3, [pc, #20]	; (8000d80 <SysTick_Config+0x40>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d6e:	4b04      	ldr	r3, [pc, #16]	; (8000d80 <SysTick_Config+0x40>)
 8000d70:	2207      	movs	r2, #7
 8000d72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d74:	2300      	movs	r3, #0
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	e000e010 	.word	0xe000e010

08000d84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d8c:	6878      	ldr	r0, [r7, #4]
 8000d8e:	f7ff ff2d 	bl	8000bec <__NVIC_SetPriorityGrouping>
}
 8000d92:	bf00      	nop
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b086      	sub	sp, #24
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	4603      	mov	r3, r0
 8000da2:	60b9      	str	r1, [r7, #8]
 8000da4:	607a      	str	r2, [r7, #4]
 8000da6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000da8:	2300      	movs	r3, #0
 8000daa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dac:	f7ff ff42 	bl	8000c34 <__NVIC_GetPriorityGrouping>
 8000db0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000db2:	687a      	ldr	r2, [r7, #4]
 8000db4:	68b9      	ldr	r1, [r7, #8]
 8000db6:	6978      	ldr	r0, [r7, #20]
 8000db8:	f7ff ff90 	bl	8000cdc <NVIC_EncodePriority>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dc2:	4611      	mov	r1, r2
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff ff5f 	bl	8000c88 <__NVIC_SetPriority>
}
 8000dca:	bf00      	nop
 8000dcc:	3718      	adds	r7, #24
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b082      	sub	sp, #8
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	4603      	mov	r3, r0
 8000dda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ddc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff ff35 	bl	8000c50 <__NVIC_EnableIRQ>
}
 8000de6:	bf00      	nop
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b082      	sub	sp, #8
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000df6:	6878      	ldr	r0, [r7, #4]
 8000df8:	f7ff ffa2 	bl	8000d40 <SysTick_Config>
 8000dfc:	4603      	mov	r3, r0
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
	...

08000e08 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b08b      	sub	sp, #44	; 0x2c
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
 8000e10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e12:	2300      	movs	r3, #0
 8000e14:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e16:	2300      	movs	r3, #0
 8000e18:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e1a:	e169      	b.n	80010f0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e20:	fa02 f303 	lsl.w	r3, r2, r3
 8000e24:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	69fa      	ldr	r2, [r7, #28]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e30:	69ba      	ldr	r2, [r7, #24]
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	429a      	cmp	r2, r3
 8000e36:	f040 8158 	bne.w	80010ea <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	4a9a      	ldr	r2, [pc, #616]	; (80010a8 <HAL_GPIO_Init+0x2a0>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d05e      	beq.n	8000f02 <HAL_GPIO_Init+0xfa>
 8000e44:	4a98      	ldr	r2, [pc, #608]	; (80010a8 <HAL_GPIO_Init+0x2a0>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d875      	bhi.n	8000f36 <HAL_GPIO_Init+0x12e>
 8000e4a:	4a98      	ldr	r2, [pc, #608]	; (80010ac <HAL_GPIO_Init+0x2a4>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d058      	beq.n	8000f02 <HAL_GPIO_Init+0xfa>
 8000e50:	4a96      	ldr	r2, [pc, #600]	; (80010ac <HAL_GPIO_Init+0x2a4>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d86f      	bhi.n	8000f36 <HAL_GPIO_Init+0x12e>
 8000e56:	4a96      	ldr	r2, [pc, #600]	; (80010b0 <HAL_GPIO_Init+0x2a8>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d052      	beq.n	8000f02 <HAL_GPIO_Init+0xfa>
 8000e5c:	4a94      	ldr	r2, [pc, #592]	; (80010b0 <HAL_GPIO_Init+0x2a8>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d869      	bhi.n	8000f36 <HAL_GPIO_Init+0x12e>
 8000e62:	4a94      	ldr	r2, [pc, #592]	; (80010b4 <HAL_GPIO_Init+0x2ac>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d04c      	beq.n	8000f02 <HAL_GPIO_Init+0xfa>
 8000e68:	4a92      	ldr	r2, [pc, #584]	; (80010b4 <HAL_GPIO_Init+0x2ac>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d863      	bhi.n	8000f36 <HAL_GPIO_Init+0x12e>
 8000e6e:	4a92      	ldr	r2, [pc, #584]	; (80010b8 <HAL_GPIO_Init+0x2b0>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d046      	beq.n	8000f02 <HAL_GPIO_Init+0xfa>
 8000e74:	4a90      	ldr	r2, [pc, #576]	; (80010b8 <HAL_GPIO_Init+0x2b0>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d85d      	bhi.n	8000f36 <HAL_GPIO_Init+0x12e>
 8000e7a:	2b12      	cmp	r3, #18
 8000e7c:	d82a      	bhi.n	8000ed4 <HAL_GPIO_Init+0xcc>
 8000e7e:	2b12      	cmp	r3, #18
 8000e80:	d859      	bhi.n	8000f36 <HAL_GPIO_Init+0x12e>
 8000e82:	a201      	add	r2, pc, #4	; (adr r2, 8000e88 <HAL_GPIO_Init+0x80>)
 8000e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e88:	08000f03 	.word	0x08000f03
 8000e8c:	08000edd 	.word	0x08000edd
 8000e90:	08000eef 	.word	0x08000eef
 8000e94:	08000f31 	.word	0x08000f31
 8000e98:	08000f37 	.word	0x08000f37
 8000e9c:	08000f37 	.word	0x08000f37
 8000ea0:	08000f37 	.word	0x08000f37
 8000ea4:	08000f37 	.word	0x08000f37
 8000ea8:	08000f37 	.word	0x08000f37
 8000eac:	08000f37 	.word	0x08000f37
 8000eb0:	08000f37 	.word	0x08000f37
 8000eb4:	08000f37 	.word	0x08000f37
 8000eb8:	08000f37 	.word	0x08000f37
 8000ebc:	08000f37 	.word	0x08000f37
 8000ec0:	08000f37 	.word	0x08000f37
 8000ec4:	08000f37 	.word	0x08000f37
 8000ec8:	08000f37 	.word	0x08000f37
 8000ecc:	08000ee5 	.word	0x08000ee5
 8000ed0:	08000ef9 	.word	0x08000ef9
 8000ed4:	4a79      	ldr	r2, [pc, #484]	; (80010bc <HAL_GPIO_Init+0x2b4>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d013      	beq.n	8000f02 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000eda:	e02c      	b.n	8000f36 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	623b      	str	r3, [r7, #32]
          break;
 8000ee2:	e029      	b.n	8000f38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	68db      	ldr	r3, [r3, #12]
 8000ee8:	3304      	adds	r3, #4
 8000eea:	623b      	str	r3, [r7, #32]
          break;
 8000eec:	e024      	b.n	8000f38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	68db      	ldr	r3, [r3, #12]
 8000ef2:	3308      	adds	r3, #8
 8000ef4:	623b      	str	r3, [r7, #32]
          break;
 8000ef6:	e01f      	b.n	8000f38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	330c      	adds	r3, #12
 8000efe:	623b      	str	r3, [r7, #32]
          break;
 8000f00:	e01a      	b.n	8000f38 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	689b      	ldr	r3, [r3, #8]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d102      	bne.n	8000f10 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f0a:	2304      	movs	r3, #4
 8000f0c:	623b      	str	r3, [r7, #32]
          break;
 8000f0e:	e013      	b.n	8000f38 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	689b      	ldr	r3, [r3, #8]
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	d105      	bne.n	8000f24 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f18:	2308      	movs	r3, #8
 8000f1a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	69fa      	ldr	r2, [r7, #28]
 8000f20:	611a      	str	r2, [r3, #16]
          break;
 8000f22:	e009      	b.n	8000f38 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f24:	2308      	movs	r3, #8
 8000f26:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	69fa      	ldr	r2, [r7, #28]
 8000f2c:	615a      	str	r2, [r3, #20]
          break;
 8000f2e:	e003      	b.n	8000f38 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f30:	2300      	movs	r3, #0
 8000f32:	623b      	str	r3, [r7, #32]
          break;
 8000f34:	e000      	b.n	8000f38 <HAL_GPIO_Init+0x130>
          break;
 8000f36:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f38:	69bb      	ldr	r3, [r7, #24]
 8000f3a:	2bff      	cmp	r3, #255	; 0xff
 8000f3c:	d801      	bhi.n	8000f42 <HAL_GPIO_Init+0x13a>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	e001      	b.n	8000f46 <HAL_GPIO_Init+0x13e>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	3304      	adds	r3, #4
 8000f46:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f48:	69bb      	ldr	r3, [r7, #24]
 8000f4a:	2bff      	cmp	r3, #255	; 0xff
 8000f4c:	d802      	bhi.n	8000f54 <HAL_GPIO_Init+0x14c>
 8000f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	e002      	b.n	8000f5a <HAL_GPIO_Init+0x152>
 8000f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f56:	3b08      	subs	r3, #8
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	210f      	movs	r1, #15
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	fa01 f303 	lsl.w	r3, r1, r3
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	401a      	ands	r2, r3
 8000f6c:	6a39      	ldr	r1, [r7, #32]
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	fa01 f303 	lsl.w	r3, r1, r3
 8000f74:	431a      	orrs	r2, r3
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	f000 80b1 	beq.w	80010ea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f88:	4b4d      	ldr	r3, [pc, #308]	; (80010c0 <HAL_GPIO_Init+0x2b8>)
 8000f8a:	699b      	ldr	r3, [r3, #24]
 8000f8c:	4a4c      	ldr	r2, [pc, #304]	; (80010c0 <HAL_GPIO_Init+0x2b8>)
 8000f8e:	f043 0301 	orr.w	r3, r3, #1
 8000f92:	6193      	str	r3, [r2, #24]
 8000f94:	4b4a      	ldr	r3, [pc, #296]	; (80010c0 <HAL_GPIO_Init+0x2b8>)
 8000f96:	699b      	ldr	r3, [r3, #24]
 8000f98:	f003 0301 	and.w	r3, r3, #1
 8000f9c:	60bb      	str	r3, [r7, #8]
 8000f9e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000fa0:	4a48      	ldr	r2, [pc, #288]	; (80010c4 <HAL_GPIO_Init+0x2bc>)
 8000fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa4:	089b      	lsrs	r3, r3, #2
 8000fa6:	3302      	adds	r3, #2
 8000fa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb0:	f003 0303 	and.w	r3, r3, #3
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	220f      	movs	r2, #15
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	43db      	mvns	r3, r3
 8000fbe:	68fa      	ldr	r2, [r7, #12]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	4a40      	ldr	r2, [pc, #256]	; (80010c8 <HAL_GPIO_Init+0x2c0>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d013      	beq.n	8000ff4 <HAL_GPIO_Init+0x1ec>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	4a3f      	ldr	r2, [pc, #252]	; (80010cc <HAL_GPIO_Init+0x2c4>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d00d      	beq.n	8000ff0 <HAL_GPIO_Init+0x1e8>
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	4a3e      	ldr	r2, [pc, #248]	; (80010d0 <HAL_GPIO_Init+0x2c8>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d007      	beq.n	8000fec <HAL_GPIO_Init+0x1e4>
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	4a3d      	ldr	r2, [pc, #244]	; (80010d4 <HAL_GPIO_Init+0x2cc>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d101      	bne.n	8000fe8 <HAL_GPIO_Init+0x1e0>
 8000fe4:	2303      	movs	r3, #3
 8000fe6:	e006      	b.n	8000ff6 <HAL_GPIO_Init+0x1ee>
 8000fe8:	2304      	movs	r3, #4
 8000fea:	e004      	b.n	8000ff6 <HAL_GPIO_Init+0x1ee>
 8000fec:	2302      	movs	r3, #2
 8000fee:	e002      	b.n	8000ff6 <HAL_GPIO_Init+0x1ee>
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	e000      	b.n	8000ff6 <HAL_GPIO_Init+0x1ee>
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ff8:	f002 0203 	and.w	r2, r2, #3
 8000ffc:	0092      	lsls	r2, r2, #2
 8000ffe:	4093      	lsls	r3, r2
 8001000:	68fa      	ldr	r2, [r7, #12]
 8001002:	4313      	orrs	r3, r2
 8001004:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001006:	492f      	ldr	r1, [pc, #188]	; (80010c4 <HAL_GPIO_Init+0x2bc>)
 8001008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800100a:	089b      	lsrs	r3, r3, #2
 800100c:	3302      	adds	r3, #2
 800100e:	68fa      	ldr	r2, [r7, #12]
 8001010:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800101c:	2b00      	cmp	r3, #0
 800101e:	d006      	beq.n	800102e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001020:	4b2d      	ldr	r3, [pc, #180]	; (80010d8 <HAL_GPIO_Init+0x2d0>)
 8001022:	689a      	ldr	r2, [r3, #8]
 8001024:	492c      	ldr	r1, [pc, #176]	; (80010d8 <HAL_GPIO_Init+0x2d0>)
 8001026:	69bb      	ldr	r3, [r7, #24]
 8001028:	4313      	orrs	r3, r2
 800102a:	608b      	str	r3, [r1, #8]
 800102c:	e006      	b.n	800103c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800102e:	4b2a      	ldr	r3, [pc, #168]	; (80010d8 <HAL_GPIO_Init+0x2d0>)
 8001030:	689a      	ldr	r2, [r3, #8]
 8001032:	69bb      	ldr	r3, [r7, #24]
 8001034:	43db      	mvns	r3, r3
 8001036:	4928      	ldr	r1, [pc, #160]	; (80010d8 <HAL_GPIO_Init+0x2d0>)
 8001038:	4013      	ands	r3, r2
 800103a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001044:	2b00      	cmp	r3, #0
 8001046:	d006      	beq.n	8001056 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001048:	4b23      	ldr	r3, [pc, #140]	; (80010d8 <HAL_GPIO_Init+0x2d0>)
 800104a:	68da      	ldr	r2, [r3, #12]
 800104c:	4922      	ldr	r1, [pc, #136]	; (80010d8 <HAL_GPIO_Init+0x2d0>)
 800104e:	69bb      	ldr	r3, [r7, #24]
 8001050:	4313      	orrs	r3, r2
 8001052:	60cb      	str	r3, [r1, #12]
 8001054:	e006      	b.n	8001064 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001056:	4b20      	ldr	r3, [pc, #128]	; (80010d8 <HAL_GPIO_Init+0x2d0>)
 8001058:	68da      	ldr	r2, [r3, #12]
 800105a:	69bb      	ldr	r3, [r7, #24]
 800105c:	43db      	mvns	r3, r3
 800105e:	491e      	ldr	r1, [pc, #120]	; (80010d8 <HAL_GPIO_Init+0x2d0>)
 8001060:	4013      	ands	r3, r2
 8001062:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800106c:	2b00      	cmp	r3, #0
 800106e:	d006      	beq.n	800107e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001070:	4b19      	ldr	r3, [pc, #100]	; (80010d8 <HAL_GPIO_Init+0x2d0>)
 8001072:	685a      	ldr	r2, [r3, #4]
 8001074:	4918      	ldr	r1, [pc, #96]	; (80010d8 <HAL_GPIO_Init+0x2d0>)
 8001076:	69bb      	ldr	r3, [r7, #24]
 8001078:	4313      	orrs	r3, r2
 800107a:	604b      	str	r3, [r1, #4]
 800107c:	e006      	b.n	800108c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800107e:	4b16      	ldr	r3, [pc, #88]	; (80010d8 <HAL_GPIO_Init+0x2d0>)
 8001080:	685a      	ldr	r2, [r3, #4]
 8001082:	69bb      	ldr	r3, [r7, #24]
 8001084:	43db      	mvns	r3, r3
 8001086:	4914      	ldr	r1, [pc, #80]	; (80010d8 <HAL_GPIO_Init+0x2d0>)
 8001088:	4013      	ands	r3, r2
 800108a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001094:	2b00      	cmp	r3, #0
 8001096:	d021      	beq.n	80010dc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001098:	4b0f      	ldr	r3, [pc, #60]	; (80010d8 <HAL_GPIO_Init+0x2d0>)
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	490e      	ldr	r1, [pc, #56]	; (80010d8 <HAL_GPIO_Init+0x2d0>)
 800109e:	69bb      	ldr	r3, [r7, #24]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	600b      	str	r3, [r1, #0]
 80010a4:	e021      	b.n	80010ea <HAL_GPIO_Init+0x2e2>
 80010a6:	bf00      	nop
 80010a8:	10320000 	.word	0x10320000
 80010ac:	10310000 	.word	0x10310000
 80010b0:	10220000 	.word	0x10220000
 80010b4:	10210000 	.word	0x10210000
 80010b8:	10120000 	.word	0x10120000
 80010bc:	10110000 	.word	0x10110000
 80010c0:	40021000 	.word	0x40021000
 80010c4:	40010000 	.word	0x40010000
 80010c8:	40010800 	.word	0x40010800
 80010cc:	40010c00 	.word	0x40010c00
 80010d0:	40011000 	.word	0x40011000
 80010d4:	40011400 	.word	0x40011400
 80010d8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80010dc:	4b0b      	ldr	r3, [pc, #44]	; (800110c <HAL_GPIO_Init+0x304>)
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	69bb      	ldr	r3, [r7, #24]
 80010e2:	43db      	mvns	r3, r3
 80010e4:	4909      	ldr	r1, [pc, #36]	; (800110c <HAL_GPIO_Init+0x304>)
 80010e6:	4013      	ands	r3, r2
 80010e8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80010ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ec:	3301      	adds	r3, #1
 80010ee:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f6:	fa22 f303 	lsr.w	r3, r2, r3
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	f47f ae8e 	bne.w	8000e1c <HAL_GPIO_Init+0x14>
  }
}
 8001100:	bf00      	nop
 8001102:	bf00      	nop
 8001104:	372c      	adds	r7, #44	; 0x2c
 8001106:	46bd      	mov	sp, r7
 8001108:	bc80      	pop	{r7}
 800110a:	4770      	bx	lr
 800110c:	40010400 	.word	0x40010400

08001110 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001110:	b480      	push	{r7}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	460b      	mov	r3, r1
 800111a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	689a      	ldr	r2, [r3, #8]
 8001120:	887b      	ldrh	r3, [r7, #2]
 8001122:	4013      	ands	r3, r2
 8001124:	2b00      	cmp	r3, #0
 8001126:	d002      	beq.n	800112e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001128:	2301      	movs	r3, #1
 800112a:	73fb      	strb	r3, [r7, #15]
 800112c:	e001      	b.n	8001132 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800112e:	2300      	movs	r3, #0
 8001130:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001132:	7bfb      	ldrb	r3, [r7, #15]
}
 8001134:	4618      	mov	r0, r3
 8001136:	3714      	adds	r7, #20
 8001138:	46bd      	mov	sp, r7
 800113a:	bc80      	pop	{r7}
 800113c:	4770      	bx	lr

0800113e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800113e:	b480      	push	{r7}
 8001140:	b083      	sub	sp, #12
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
 8001146:	460b      	mov	r3, r1
 8001148:	807b      	strh	r3, [r7, #2]
 800114a:	4613      	mov	r3, r2
 800114c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800114e:	787b      	ldrb	r3, [r7, #1]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d003      	beq.n	800115c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001154:	887a      	ldrh	r2, [r7, #2]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800115a:	e003      	b.n	8001164 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800115c:	887b      	ldrh	r3, [r7, #2]
 800115e:	041a      	lsls	r2, r3, #16
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	611a      	str	r2, [r3, #16]
}
 8001164:	bf00      	nop
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	bc80      	pop	{r7}
 800116c:	4770      	bx	lr
	...

08001170 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d101      	bne.n	8001182 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	e272      	b.n	8001668 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	2b00      	cmp	r3, #0
 800118c:	f000 8087 	beq.w	800129e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001190:	4b92      	ldr	r3, [pc, #584]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f003 030c 	and.w	r3, r3, #12
 8001198:	2b04      	cmp	r3, #4
 800119a:	d00c      	beq.n	80011b6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800119c:	4b8f      	ldr	r3, [pc, #572]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f003 030c 	and.w	r3, r3, #12
 80011a4:	2b08      	cmp	r3, #8
 80011a6:	d112      	bne.n	80011ce <HAL_RCC_OscConfig+0x5e>
 80011a8:	4b8c      	ldr	r3, [pc, #560]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011b4:	d10b      	bne.n	80011ce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011b6:	4b89      	ldr	r3, [pc, #548]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d06c      	beq.n	800129c <HAL_RCC_OscConfig+0x12c>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d168      	bne.n	800129c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e24c      	b.n	8001668 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011d6:	d106      	bne.n	80011e6 <HAL_RCC_OscConfig+0x76>
 80011d8:	4b80      	ldr	r3, [pc, #512]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a7f      	ldr	r2, [pc, #508]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 80011de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011e2:	6013      	str	r3, [r2, #0]
 80011e4:	e02e      	b.n	8001244 <HAL_RCC_OscConfig+0xd4>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d10c      	bne.n	8001208 <HAL_RCC_OscConfig+0x98>
 80011ee:	4b7b      	ldr	r3, [pc, #492]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a7a      	ldr	r2, [pc, #488]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 80011f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011f8:	6013      	str	r3, [r2, #0]
 80011fa:	4b78      	ldr	r3, [pc, #480]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a77      	ldr	r2, [pc, #476]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 8001200:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001204:	6013      	str	r3, [r2, #0]
 8001206:	e01d      	b.n	8001244 <HAL_RCC_OscConfig+0xd4>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001210:	d10c      	bne.n	800122c <HAL_RCC_OscConfig+0xbc>
 8001212:	4b72      	ldr	r3, [pc, #456]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a71      	ldr	r2, [pc, #452]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 8001218:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800121c:	6013      	str	r3, [r2, #0]
 800121e:	4b6f      	ldr	r3, [pc, #444]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a6e      	ldr	r2, [pc, #440]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 8001224:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001228:	6013      	str	r3, [r2, #0]
 800122a:	e00b      	b.n	8001244 <HAL_RCC_OscConfig+0xd4>
 800122c:	4b6b      	ldr	r3, [pc, #428]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a6a      	ldr	r2, [pc, #424]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 8001232:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001236:	6013      	str	r3, [r2, #0]
 8001238:	4b68      	ldr	r3, [pc, #416]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a67      	ldr	r2, [pc, #412]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 800123e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001242:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d013      	beq.n	8001274 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800124c:	f7ff fcc4 	bl	8000bd8 <HAL_GetTick>
 8001250:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001252:	e008      	b.n	8001266 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001254:	f7ff fcc0 	bl	8000bd8 <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	2b64      	cmp	r3, #100	; 0x64
 8001260:	d901      	bls.n	8001266 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001262:	2303      	movs	r3, #3
 8001264:	e200      	b.n	8001668 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001266:	4b5d      	ldr	r3, [pc, #372]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800126e:	2b00      	cmp	r3, #0
 8001270:	d0f0      	beq.n	8001254 <HAL_RCC_OscConfig+0xe4>
 8001272:	e014      	b.n	800129e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001274:	f7ff fcb0 	bl	8000bd8 <HAL_GetTick>
 8001278:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800127a:	e008      	b.n	800128e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800127c:	f7ff fcac 	bl	8000bd8 <HAL_GetTick>
 8001280:	4602      	mov	r2, r0
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	2b64      	cmp	r3, #100	; 0x64
 8001288:	d901      	bls.n	800128e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800128a:	2303      	movs	r3, #3
 800128c:	e1ec      	b.n	8001668 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800128e:	4b53      	ldr	r3, [pc, #332]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d1f0      	bne.n	800127c <HAL_RCC_OscConfig+0x10c>
 800129a:	e000      	b.n	800129e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800129c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f003 0302 	and.w	r3, r3, #2
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d063      	beq.n	8001372 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80012aa:	4b4c      	ldr	r3, [pc, #304]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f003 030c 	and.w	r3, r3, #12
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d00b      	beq.n	80012ce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80012b6:	4b49      	ldr	r3, [pc, #292]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f003 030c 	and.w	r3, r3, #12
 80012be:	2b08      	cmp	r3, #8
 80012c0:	d11c      	bne.n	80012fc <HAL_RCC_OscConfig+0x18c>
 80012c2:	4b46      	ldr	r3, [pc, #280]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d116      	bne.n	80012fc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012ce:	4b43      	ldr	r3, [pc, #268]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f003 0302 	and.w	r3, r3, #2
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d005      	beq.n	80012e6 <HAL_RCC_OscConfig+0x176>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	691b      	ldr	r3, [r3, #16]
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d001      	beq.n	80012e6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e1c0      	b.n	8001668 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012e6:	4b3d      	ldr	r3, [pc, #244]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	695b      	ldr	r3, [r3, #20]
 80012f2:	00db      	lsls	r3, r3, #3
 80012f4:	4939      	ldr	r1, [pc, #228]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 80012f6:	4313      	orrs	r3, r2
 80012f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012fa:	e03a      	b.n	8001372 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	691b      	ldr	r3, [r3, #16]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d020      	beq.n	8001346 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001304:	4b36      	ldr	r3, [pc, #216]	; (80013e0 <HAL_RCC_OscConfig+0x270>)
 8001306:	2201      	movs	r2, #1
 8001308:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800130a:	f7ff fc65 	bl	8000bd8 <HAL_GetTick>
 800130e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001310:	e008      	b.n	8001324 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001312:	f7ff fc61 	bl	8000bd8 <HAL_GetTick>
 8001316:	4602      	mov	r2, r0
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	2b02      	cmp	r3, #2
 800131e:	d901      	bls.n	8001324 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001320:	2303      	movs	r3, #3
 8001322:	e1a1      	b.n	8001668 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001324:	4b2d      	ldr	r3, [pc, #180]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f003 0302 	and.w	r3, r3, #2
 800132c:	2b00      	cmp	r3, #0
 800132e:	d0f0      	beq.n	8001312 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001330:	4b2a      	ldr	r3, [pc, #168]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	695b      	ldr	r3, [r3, #20]
 800133c:	00db      	lsls	r3, r3, #3
 800133e:	4927      	ldr	r1, [pc, #156]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 8001340:	4313      	orrs	r3, r2
 8001342:	600b      	str	r3, [r1, #0]
 8001344:	e015      	b.n	8001372 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001346:	4b26      	ldr	r3, [pc, #152]	; (80013e0 <HAL_RCC_OscConfig+0x270>)
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800134c:	f7ff fc44 	bl	8000bd8 <HAL_GetTick>
 8001350:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001352:	e008      	b.n	8001366 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001354:	f7ff fc40 	bl	8000bd8 <HAL_GetTick>
 8001358:	4602      	mov	r2, r0
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	2b02      	cmp	r3, #2
 8001360:	d901      	bls.n	8001366 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001362:	2303      	movs	r3, #3
 8001364:	e180      	b.n	8001668 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001366:	4b1d      	ldr	r3, [pc, #116]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 0302 	and.w	r3, r3, #2
 800136e:	2b00      	cmp	r3, #0
 8001370:	d1f0      	bne.n	8001354 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 0308 	and.w	r3, r3, #8
 800137a:	2b00      	cmp	r3, #0
 800137c:	d03a      	beq.n	80013f4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	699b      	ldr	r3, [r3, #24]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d019      	beq.n	80013ba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001386:	4b17      	ldr	r3, [pc, #92]	; (80013e4 <HAL_RCC_OscConfig+0x274>)
 8001388:	2201      	movs	r2, #1
 800138a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800138c:	f7ff fc24 	bl	8000bd8 <HAL_GetTick>
 8001390:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001392:	e008      	b.n	80013a6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001394:	f7ff fc20 	bl	8000bd8 <HAL_GetTick>
 8001398:	4602      	mov	r2, r0
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	2b02      	cmp	r3, #2
 80013a0:	d901      	bls.n	80013a6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80013a2:	2303      	movs	r3, #3
 80013a4:	e160      	b.n	8001668 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013a6:	4b0d      	ldr	r3, [pc, #52]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 80013a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013aa:	f003 0302 	and.w	r3, r3, #2
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d0f0      	beq.n	8001394 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80013b2:	2001      	movs	r0, #1
 80013b4:	f000 face 	bl	8001954 <RCC_Delay>
 80013b8:	e01c      	b.n	80013f4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013ba:	4b0a      	ldr	r3, [pc, #40]	; (80013e4 <HAL_RCC_OscConfig+0x274>)
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013c0:	f7ff fc0a 	bl	8000bd8 <HAL_GetTick>
 80013c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013c6:	e00f      	b.n	80013e8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013c8:	f7ff fc06 	bl	8000bd8 <HAL_GetTick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d908      	bls.n	80013e8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80013d6:	2303      	movs	r3, #3
 80013d8:	e146      	b.n	8001668 <HAL_RCC_OscConfig+0x4f8>
 80013da:	bf00      	nop
 80013dc:	40021000 	.word	0x40021000
 80013e0:	42420000 	.word	0x42420000
 80013e4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013e8:	4b92      	ldr	r3, [pc, #584]	; (8001634 <HAL_RCC_OscConfig+0x4c4>)
 80013ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ec:	f003 0302 	and.w	r3, r3, #2
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d1e9      	bne.n	80013c8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 0304 	and.w	r3, r3, #4
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	f000 80a6 	beq.w	800154e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001402:	2300      	movs	r3, #0
 8001404:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001406:	4b8b      	ldr	r3, [pc, #556]	; (8001634 <HAL_RCC_OscConfig+0x4c4>)
 8001408:	69db      	ldr	r3, [r3, #28]
 800140a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800140e:	2b00      	cmp	r3, #0
 8001410:	d10d      	bne.n	800142e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001412:	4b88      	ldr	r3, [pc, #544]	; (8001634 <HAL_RCC_OscConfig+0x4c4>)
 8001414:	69db      	ldr	r3, [r3, #28]
 8001416:	4a87      	ldr	r2, [pc, #540]	; (8001634 <HAL_RCC_OscConfig+0x4c4>)
 8001418:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800141c:	61d3      	str	r3, [r2, #28]
 800141e:	4b85      	ldr	r3, [pc, #532]	; (8001634 <HAL_RCC_OscConfig+0x4c4>)
 8001420:	69db      	ldr	r3, [r3, #28]
 8001422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001426:	60bb      	str	r3, [r7, #8]
 8001428:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800142a:	2301      	movs	r3, #1
 800142c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800142e:	4b82      	ldr	r3, [pc, #520]	; (8001638 <HAL_RCC_OscConfig+0x4c8>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001436:	2b00      	cmp	r3, #0
 8001438:	d118      	bne.n	800146c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800143a:	4b7f      	ldr	r3, [pc, #508]	; (8001638 <HAL_RCC_OscConfig+0x4c8>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a7e      	ldr	r2, [pc, #504]	; (8001638 <HAL_RCC_OscConfig+0x4c8>)
 8001440:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001444:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001446:	f7ff fbc7 	bl	8000bd8 <HAL_GetTick>
 800144a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800144c:	e008      	b.n	8001460 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800144e:	f7ff fbc3 	bl	8000bd8 <HAL_GetTick>
 8001452:	4602      	mov	r2, r0
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	2b64      	cmp	r3, #100	; 0x64
 800145a:	d901      	bls.n	8001460 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800145c:	2303      	movs	r3, #3
 800145e:	e103      	b.n	8001668 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001460:	4b75      	ldr	r3, [pc, #468]	; (8001638 <HAL_RCC_OscConfig+0x4c8>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001468:	2b00      	cmp	r3, #0
 800146a:	d0f0      	beq.n	800144e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	2b01      	cmp	r3, #1
 8001472:	d106      	bne.n	8001482 <HAL_RCC_OscConfig+0x312>
 8001474:	4b6f      	ldr	r3, [pc, #444]	; (8001634 <HAL_RCC_OscConfig+0x4c4>)
 8001476:	6a1b      	ldr	r3, [r3, #32]
 8001478:	4a6e      	ldr	r2, [pc, #440]	; (8001634 <HAL_RCC_OscConfig+0x4c4>)
 800147a:	f043 0301 	orr.w	r3, r3, #1
 800147e:	6213      	str	r3, [r2, #32]
 8001480:	e02d      	b.n	80014de <HAL_RCC_OscConfig+0x36e>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	68db      	ldr	r3, [r3, #12]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d10c      	bne.n	80014a4 <HAL_RCC_OscConfig+0x334>
 800148a:	4b6a      	ldr	r3, [pc, #424]	; (8001634 <HAL_RCC_OscConfig+0x4c4>)
 800148c:	6a1b      	ldr	r3, [r3, #32]
 800148e:	4a69      	ldr	r2, [pc, #420]	; (8001634 <HAL_RCC_OscConfig+0x4c4>)
 8001490:	f023 0301 	bic.w	r3, r3, #1
 8001494:	6213      	str	r3, [r2, #32]
 8001496:	4b67      	ldr	r3, [pc, #412]	; (8001634 <HAL_RCC_OscConfig+0x4c4>)
 8001498:	6a1b      	ldr	r3, [r3, #32]
 800149a:	4a66      	ldr	r2, [pc, #408]	; (8001634 <HAL_RCC_OscConfig+0x4c4>)
 800149c:	f023 0304 	bic.w	r3, r3, #4
 80014a0:	6213      	str	r3, [r2, #32]
 80014a2:	e01c      	b.n	80014de <HAL_RCC_OscConfig+0x36e>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	2b05      	cmp	r3, #5
 80014aa:	d10c      	bne.n	80014c6 <HAL_RCC_OscConfig+0x356>
 80014ac:	4b61      	ldr	r3, [pc, #388]	; (8001634 <HAL_RCC_OscConfig+0x4c4>)
 80014ae:	6a1b      	ldr	r3, [r3, #32]
 80014b0:	4a60      	ldr	r2, [pc, #384]	; (8001634 <HAL_RCC_OscConfig+0x4c4>)
 80014b2:	f043 0304 	orr.w	r3, r3, #4
 80014b6:	6213      	str	r3, [r2, #32]
 80014b8:	4b5e      	ldr	r3, [pc, #376]	; (8001634 <HAL_RCC_OscConfig+0x4c4>)
 80014ba:	6a1b      	ldr	r3, [r3, #32]
 80014bc:	4a5d      	ldr	r2, [pc, #372]	; (8001634 <HAL_RCC_OscConfig+0x4c4>)
 80014be:	f043 0301 	orr.w	r3, r3, #1
 80014c2:	6213      	str	r3, [r2, #32]
 80014c4:	e00b      	b.n	80014de <HAL_RCC_OscConfig+0x36e>
 80014c6:	4b5b      	ldr	r3, [pc, #364]	; (8001634 <HAL_RCC_OscConfig+0x4c4>)
 80014c8:	6a1b      	ldr	r3, [r3, #32]
 80014ca:	4a5a      	ldr	r2, [pc, #360]	; (8001634 <HAL_RCC_OscConfig+0x4c4>)
 80014cc:	f023 0301 	bic.w	r3, r3, #1
 80014d0:	6213      	str	r3, [r2, #32]
 80014d2:	4b58      	ldr	r3, [pc, #352]	; (8001634 <HAL_RCC_OscConfig+0x4c4>)
 80014d4:	6a1b      	ldr	r3, [r3, #32]
 80014d6:	4a57      	ldr	r2, [pc, #348]	; (8001634 <HAL_RCC_OscConfig+0x4c4>)
 80014d8:	f023 0304 	bic.w	r3, r3, #4
 80014dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d015      	beq.n	8001512 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014e6:	f7ff fb77 	bl	8000bd8 <HAL_GetTick>
 80014ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014ec:	e00a      	b.n	8001504 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014ee:	f7ff fb73 	bl	8000bd8 <HAL_GetTick>
 80014f2:	4602      	mov	r2, r0
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d901      	bls.n	8001504 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001500:	2303      	movs	r3, #3
 8001502:	e0b1      	b.n	8001668 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001504:	4b4b      	ldr	r3, [pc, #300]	; (8001634 <HAL_RCC_OscConfig+0x4c4>)
 8001506:	6a1b      	ldr	r3, [r3, #32]
 8001508:	f003 0302 	and.w	r3, r3, #2
 800150c:	2b00      	cmp	r3, #0
 800150e:	d0ee      	beq.n	80014ee <HAL_RCC_OscConfig+0x37e>
 8001510:	e014      	b.n	800153c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001512:	f7ff fb61 	bl	8000bd8 <HAL_GetTick>
 8001516:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001518:	e00a      	b.n	8001530 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800151a:	f7ff fb5d 	bl	8000bd8 <HAL_GetTick>
 800151e:	4602      	mov	r2, r0
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	f241 3288 	movw	r2, #5000	; 0x1388
 8001528:	4293      	cmp	r3, r2
 800152a:	d901      	bls.n	8001530 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800152c:	2303      	movs	r3, #3
 800152e:	e09b      	b.n	8001668 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001530:	4b40      	ldr	r3, [pc, #256]	; (8001634 <HAL_RCC_OscConfig+0x4c4>)
 8001532:	6a1b      	ldr	r3, [r3, #32]
 8001534:	f003 0302 	and.w	r3, r3, #2
 8001538:	2b00      	cmp	r3, #0
 800153a:	d1ee      	bne.n	800151a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800153c:	7dfb      	ldrb	r3, [r7, #23]
 800153e:	2b01      	cmp	r3, #1
 8001540:	d105      	bne.n	800154e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001542:	4b3c      	ldr	r3, [pc, #240]	; (8001634 <HAL_RCC_OscConfig+0x4c4>)
 8001544:	69db      	ldr	r3, [r3, #28]
 8001546:	4a3b      	ldr	r2, [pc, #236]	; (8001634 <HAL_RCC_OscConfig+0x4c4>)
 8001548:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800154c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	69db      	ldr	r3, [r3, #28]
 8001552:	2b00      	cmp	r3, #0
 8001554:	f000 8087 	beq.w	8001666 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001558:	4b36      	ldr	r3, [pc, #216]	; (8001634 <HAL_RCC_OscConfig+0x4c4>)
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f003 030c 	and.w	r3, r3, #12
 8001560:	2b08      	cmp	r3, #8
 8001562:	d061      	beq.n	8001628 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	69db      	ldr	r3, [r3, #28]
 8001568:	2b02      	cmp	r3, #2
 800156a:	d146      	bne.n	80015fa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800156c:	4b33      	ldr	r3, [pc, #204]	; (800163c <HAL_RCC_OscConfig+0x4cc>)
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001572:	f7ff fb31 	bl	8000bd8 <HAL_GetTick>
 8001576:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001578:	e008      	b.n	800158c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800157a:	f7ff fb2d 	bl	8000bd8 <HAL_GetTick>
 800157e:	4602      	mov	r2, r0
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	2b02      	cmp	r3, #2
 8001586:	d901      	bls.n	800158c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001588:	2303      	movs	r3, #3
 800158a:	e06d      	b.n	8001668 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800158c:	4b29      	ldr	r3, [pc, #164]	; (8001634 <HAL_RCC_OscConfig+0x4c4>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001594:	2b00      	cmp	r3, #0
 8001596:	d1f0      	bne.n	800157a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6a1b      	ldr	r3, [r3, #32]
 800159c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015a0:	d108      	bne.n	80015b4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80015a2:	4b24      	ldr	r3, [pc, #144]	; (8001634 <HAL_RCC_OscConfig+0x4c4>)
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	4921      	ldr	r1, [pc, #132]	; (8001634 <HAL_RCC_OscConfig+0x4c4>)
 80015b0:	4313      	orrs	r3, r2
 80015b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015b4:	4b1f      	ldr	r3, [pc, #124]	; (8001634 <HAL_RCC_OscConfig+0x4c4>)
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6a19      	ldr	r1, [r3, #32]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c4:	430b      	orrs	r3, r1
 80015c6:	491b      	ldr	r1, [pc, #108]	; (8001634 <HAL_RCC_OscConfig+0x4c4>)
 80015c8:	4313      	orrs	r3, r2
 80015ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015cc:	4b1b      	ldr	r3, [pc, #108]	; (800163c <HAL_RCC_OscConfig+0x4cc>)
 80015ce:	2201      	movs	r2, #1
 80015d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d2:	f7ff fb01 	bl	8000bd8 <HAL_GetTick>
 80015d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015d8:	e008      	b.n	80015ec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015da:	f7ff fafd 	bl	8000bd8 <HAL_GetTick>
 80015de:	4602      	mov	r2, r0
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d901      	bls.n	80015ec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80015e8:	2303      	movs	r3, #3
 80015ea:	e03d      	b.n	8001668 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015ec:	4b11      	ldr	r3, [pc, #68]	; (8001634 <HAL_RCC_OscConfig+0x4c4>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d0f0      	beq.n	80015da <HAL_RCC_OscConfig+0x46a>
 80015f8:	e035      	b.n	8001666 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015fa:	4b10      	ldr	r3, [pc, #64]	; (800163c <HAL_RCC_OscConfig+0x4cc>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001600:	f7ff faea 	bl	8000bd8 <HAL_GetTick>
 8001604:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001606:	e008      	b.n	800161a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001608:	f7ff fae6 	bl	8000bd8 <HAL_GetTick>
 800160c:	4602      	mov	r2, r0
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	2b02      	cmp	r3, #2
 8001614:	d901      	bls.n	800161a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e026      	b.n	8001668 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800161a:	4b06      	ldr	r3, [pc, #24]	; (8001634 <HAL_RCC_OscConfig+0x4c4>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d1f0      	bne.n	8001608 <HAL_RCC_OscConfig+0x498>
 8001626:	e01e      	b.n	8001666 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	69db      	ldr	r3, [r3, #28]
 800162c:	2b01      	cmp	r3, #1
 800162e:	d107      	bne.n	8001640 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	e019      	b.n	8001668 <HAL_RCC_OscConfig+0x4f8>
 8001634:	40021000 	.word	0x40021000
 8001638:	40007000 	.word	0x40007000
 800163c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001640:	4b0b      	ldr	r3, [pc, #44]	; (8001670 <HAL_RCC_OscConfig+0x500>)
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6a1b      	ldr	r3, [r3, #32]
 8001650:	429a      	cmp	r2, r3
 8001652:	d106      	bne.n	8001662 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800165e:	429a      	cmp	r2, r3
 8001660:	d001      	beq.n	8001666 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e000      	b.n	8001668 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001666:	2300      	movs	r3, #0
}
 8001668:	4618      	mov	r0, r3
 800166a:	3718      	adds	r7, #24
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	40021000 	.word	0x40021000

08001674 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d101      	bne.n	8001688 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	e0d0      	b.n	800182a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001688:	4b6a      	ldr	r3, [pc, #424]	; (8001834 <HAL_RCC_ClockConfig+0x1c0>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0307 	and.w	r3, r3, #7
 8001690:	683a      	ldr	r2, [r7, #0]
 8001692:	429a      	cmp	r2, r3
 8001694:	d910      	bls.n	80016b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001696:	4b67      	ldr	r3, [pc, #412]	; (8001834 <HAL_RCC_ClockConfig+0x1c0>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f023 0207 	bic.w	r2, r3, #7
 800169e:	4965      	ldr	r1, [pc, #404]	; (8001834 <HAL_RCC_ClockConfig+0x1c0>)
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	4313      	orrs	r3, r2
 80016a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016a6:	4b63      	ldr	r3, [pc, #396]	; (8001834 <HAL_RCC_ClockConfig+0x1c0>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0307 	and.w	r3, r3, #7
 80016ae:	683a      	ldr	r2, [r7, #0]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d001      	beq.n	80016b8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e0b8      	b.n	800182a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0302 	and.w	r3, r3, #2
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d020      	beq.n	8001706 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 0304 	and.w	r3, r3, #4
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d005      	beq.n	80016dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016d0:	4b59      	ldr	r3, [pc, #356]	; (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	4a58      	ldr	r2, [pc, #352]	; (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 80016d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80016da:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0308 	and.w	r3, r3, #8
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d005      	beq.n	80016f4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016e8:	4b53      	ldr	r3, [pc, #332]	; (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	4a52      	ldr	r2, [pc, #328]	; (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 80016ee:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80016f2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016f4:	4b50      	ldr	r3, [pc, #320]	; (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	494d      	ldr	r1, [pc, #308]	; (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 8001702:	4313      	orrs	r3, r2
 8001704:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	2b00      	cmp	r3, #0
 8001710:	d040      	beq.n	8001794 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	2b01      	cmp	r3, #1
 8001718:	d107      	bne.n	800172a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800171a:	4b47      	ldr	r3, [pc, #284]	; (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d115      	bne.n	8001752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e07f      	b.n	800182a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	2b02      	cmp	r3, #2
 8001730:	d107      	bne.n	8001742 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001732:	4b41      	ldr	r3, [pc, #260]	; (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d109      	bne.n	8001752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e073      	b.n	800182a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001742:	4b3d      	ldr	r3, [pc, #244]	; (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0302 	and.w	r3, r3, #2
 800174a:	2b00      	cmp	r3, #0
 800174c:	d101      	bne.n	8001752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e06b      	b.n	800182a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001752:	4b39      	ldr	r3, [pc, #228]	; (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f023 0203 	bic.w	r2, r3, #3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	4936      	ldr	r1, [pc, #216]	; (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 8001760:	4313      	orrs	r3, r2
 8001762:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001764:	f7ff fa38 	bl	8000bd8 <HAL_GetTick>
 8001768:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800176a:	e00a      	b.n	8001782 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800176c:	f7ff fa34 	bl	8000bd8 <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	f241 3288 	movw	r2, #5000	; 0x1388
 800177a:	4293      	cmp	r3, r2
 800177c:	d901      	bls.n	8001782 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e053      	b.n	800182a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001782:	4b2d      	ldr	r3, [pc, #180]	; (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f003 020c 	and.w	r2, r3, #12
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	429a      	cmp	r2, r3
 8001792:	d1eb      	bne.n	800176c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001794:	4b27      	ldr	r3, [pc, #156]	; (8001834 <HAL_RCC_ClockConfig+0x1c0>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 0307 	and.w	r3, r3, #7
 800179c:	683a      	ldr	r2, [r7, #0]
 800179e:	429a      	cmp	r2, r3
 80017a0:	d210      	bcs.n	80017c4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017a2:	4b24      	ldr	r3, [pc, #144]	; (8001834 <HAL_RCC_ClockConfig+0x1c0>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f023 0207 	bic.w	r2, r3, #7
 80017aa:	4922      	ldr	r1, [pc, #136]	; (8001834 <HAL_RCC_ClockConfig+0x1c0>)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017b2:	4b20      	ldr	r3, [pc, #128]	; (8001834 <HAL_RCC_ClockConfig+0x1c0>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0307 	and.w	r3, r3, #7
 80017ba:	683a      	ldr	r2, [r7, #0]
 80017bc:	429a      	cmp	r2, r3
 80017be:	d001      	beq.n	80017c4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e032      	b.n	800182a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0304 	and.w	r3, r3, #4
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d008      	beq.n	80017e2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017d0:	4b19      	ldr	r3, [pc, #100]	; (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	4916      	ldr	r1, [pc, #88]	; (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 80017de:	4313      	orrs	r3, r2
 80017e0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0308 	and.w	r3, r3, #8
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d009      	beq.n	8001802 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80017ee:	4b12      	ldr	r3, [pc, #72]	; (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	691b      	ldr	r3, [r3, #16]
 80017fa:	00db      	lsls	r3, r3, #3
 80017fc:	490e      	ldr	r1, [pc, #56]	; (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 80017fe:	4313      	orrs	r3, r2
 8001800:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001802:	f000 f821 	bl	8001848 <HAL_RCC_GetSysClockFreq>
 8001806:	4602      	mov	r2, r0
 8001808:	4b0b      	ldr	r3, [pc, #44]	; (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	091b      	lsrs	r3, r3, #4
 800180e:	f003 030f 	and.w	r3, r3, #15
 8001812:	490a      	ldr	r1, [pc, #40]	; (800183c <HAL_RCC_ClockConfig+0x1c8>)
 8001814:	5ccb      	ldrb	r3, [r1, r3]
 8001816:	fa22 f303 	lsr.w	r3, r2, r3
 800181a:	4a09      	ldr	r2, [pc, #36]	; (8001840 <HAL_RCC_ClockConfig+0x1cc>)
 800181c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800181e:	4b09      	ldr	r3, [pc, #36]	; (8001844 <HAL_RCC_ClockConfig+0x1d0>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4618      	mov	r0, r3
 8001824:	f7ff f996 	bl	8000b54 <HAL_InitTick>

  return HAL_OK;
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	3710      	adds	r7, #16
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40022000 	.word	0x40022000
 8001838:	40021000 	.word	0x40021000
 800183c:	080030f8 	.word	0x080030f8
 8001840:	20000008 	.word	0x20000008
 8001844:	2000000c 	.word	0x2000000c

08001848 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001848:	b480      	push	{r7}
 800184a:	b087      	sub	sp, #28
 800184c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800184e:	2300      	movs	r3, #0
 8001850:	60fb      	str	r3, [r7, #12]
 8001852:	2300      	movs	r3, #0
 8001854:	60bb      	str	r3, [r7, #8]
 8001856:	2300      	movs	r3, #0
 8001858:	617b      	str	r3, [r7, #20]
 800185a:	2300      	movs	r3, #0
 800185c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800185e:	2300      	movs	r3, #0
 8001860:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001862:	4b1e      	ldr	r3, [pc, #120]	; (80018dc <HAL_RCC_GetSysClockFreq+0x94>)
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	f003 030c 	and.w	r3, r3, #12
 800186e:	2b04      	cmp	r3, #4
 8001870:	d002      	beq.n	8001878 <HAL_RCC_GetSysClockFreq+0x30>
 8001872:	2b08      	cmp	r3, #8
 8001874:	d003      	beq.n	800187e <HAL_RCC_GetSysClockFreq+0x36>
 8001876:	e027      	b.n	80018c8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001878:	4b19      	ldr	r3, [pc, #100]	; (80018e0 <HAL_RCC_GetSysClockFreq+0x98>)
 800187a:	613b      	str	r3, [r7, #16]
      break;
 800187c:	e027      	b.n	80018ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	0c9b      	lsrs	r3, r3, #18
 8001882:	f003 030f 	and.w	r3, r3, #15
 8001886:	4a17      	ldr	r2, [pc, #92]	; (80018e4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001888:	5cd3      	ldrb	r3, [r2, r3]
 800188a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d010      	beq.n	80018b8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001896:	4b11      	ldr	r3, [pc, #68]	; (80018dc <HAL_RCC_GetSysClockFreq+0x94>)
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	0c5b      	lsrs	r3, r3, #17
 800189c:	f003 0301 	and.w	r3, r3, #1
 80018a0:	4a11      	ldr	r2, [pc, #68]	; (80018e8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80018a2:	5cd3      	ldrb	r3, [r2, r3]
 80018a4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4a0d      	ldr	r2, [pc, #52]	; (80018e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80018aa:	fb03 f202 	mul.w	r2, r3, r2
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80018b4:	617b      	str	r3, [r7, #20]
 80018b6:	e004      	b.n	80018c2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	4a0c      	ldr	r2, [pc, #48]	; (80018ec <HAL_RCC_GetSysClockFreq+0xa4>)
 80018bc:	fb02 f303 	mul.w	r3, r2, r3
 80018c0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	613b      	str	r3, [r7, #16]
      break;
 80018c6:	e002      	b.n	80018ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80018c8:	4b05      	ldr	r3, [pc, #20]	; (80018e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80018ca:	613b      	str	r3, [r7, #16]
      break;
 80018cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018ce:	693b      	ldr	r3, [r7, #16]
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	371c      	adds	r7, #28
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bc80      	pop	{r7}
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	40021000 	.word	0x40021000
 80018e0:	007a1200 	.word	0x007a1200
 80018e4:	08003110 	.word	0x08003110
 80018e8:	08003120 	.word	0x08003120
 80018ec:	003d0900 	.word	0x003d0900

080018f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018f4:	4b02      	ldr	r3, [pc, #8]	; (8001900 <HAL_RCC_GetHCLKFreq+0x10>)
 80018f6:	681b      	ldr	r3, [r3, #0]
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bc80      	pop	{r7}
 80018fe:	4770      	bx	lr
 8001900:	20000008 	.word	0x20000008

08001904 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001908:	f7ff fff2 	bl	80018f0 <HAL_RCC_GetHCLKFreq>
 800190c:	4602      	mov	r2, r0
 800190e:	4b05      	ldr	r3, [pc, #20]	; (8001924 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	0a1b      	lsrs	r3, r3, #8
 8001914:	f003 0307 	and.w	r3, r3, #7
 8001918:	4903      	ldr	r1, [pc, #12]	; (8001928 <HAL_RCC_GetPCLK1Freq+0x24>)
 800191a:	5ccb      	ldrb	r3, [r1, r3]
 800191c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001920:	4618      	mov	r0, r3
 8001922:	bd80      	pop	{r7, pc}
 8001924:	40021000 	.word	0x40021000
 8001928:	08003108 	.word	0x08003108

0800192c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001930:	f7ff ffde 	bl	80018f0 <HAL_RCC_GetHCLKFreq>
 8001934:	4602      	mov	r2, r0
 8001936:	4b05      	ldr	r3, [pc, #20]	; (800194c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	0adb      	lsrs	r3, r3, #11
 800193c:	f003 0307 	and.w	r3, r3, #7
 8001940:	4903      	ldr	r1, [pc, #12]	; (8001950 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001942:	5ccb      	ldrb	r3, [r1, r3]
 8001944:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001948:	4618      	mov	r0, r3
 800194a:	bd80      	pop	{r7, pc}
 800194c:	40021000 	.word	0x40021000
 8001950:	08003108 	.word	0x08003108

08001954 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001954:	b480      	push	{r7}
 8001956:	b085      	sub	sp, #20
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800195c:	4b0a      	ldr	r3, [pc, #40]	; (8001988 <RCC_Delay+0x34>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a0a      	ldr	r2, [pc, #40]	; (800198c <RCC_Delay+0x38>)
 8001962:	fba2 2303 	umull	r2, r3, r2, r3
 8001966:	0a5b      	lsrs	r3, r3, #9
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	fb02 f303 	mul.w	r3, r2, r3
 800196e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001970:	bf00      	nop
  }
  while (Delay --);
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	1e5a      	subs	r2, r3, #1
 8001976:	60fa      	str	r2, [r7, #12]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d1f9      	bne.n	8001970 <RCC_Delay+0x1c>
}
 800197c:	bf00      	nop
 800197e:	bf00      	nop
 8001980:	3714      	adds	r7, #20
 8001982:	46bd      	mov	sp, r7
 8001984:	bc80      	pop	{r7}
 8001986:	4770      	bx	lr
 8001988:	20000008 	.word	0x20000008
 800198c:	10624dd3 	.word	0x10624dd3

08001990 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d101      	bne.n	80019a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e041      	b.n	8001a26 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d106      	bne.n	80019bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2200      	movs	r2, #0
 80019b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f7fe fff6 	bl	80009a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2202      	movs	r2, #2
 80019c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	3304      	adds	r3, #4
 80019cc:	4619      	mov	r1, r3
 80019ce:	4610      	mov	r0, r2
 80019d0:	f000 faa2 	bl	8001f18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2201      	movs	r2, #1
 80019d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2201      	movs	r2, #1
 80019e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2201      	movs	r2, #1
 80019e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2201      	movs	r2, #1
 80019f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2201      	movs	r2, #1
 80019f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2201      	movs	r2, #1
 8001a00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2201      	movs	r2, #1
 8001a08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2201      	movs	r2, #1
 8001a10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2201      	movs	r2, #1
 8001a18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2201      	movs	r2, #1
 8001a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
	...

08001a30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b085      	sub	sp, #20
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d001      	beq.n	8001a48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e03a      	b.n	8001abe <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2202      	movs	r2, #2
 8001a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	68da      	ldr	r2, [r3, #12]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f042 0201 	orr.w	r2, r2, #1
 8001a5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a18      	ldr	r2, [pc, #96]	; (8001ac8 <HAL_TIM_Base_Start_IT+0x98>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d00e      	beq.n	8001a88 <HAL_TIM_Base_Start_IT+0x58>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a72:	d009      	beq.n	8001a88 <HAL_TIM_Base_Start_IT+0x58>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a14      	ldr	r2, [pc, #80]	; (8001acc <HAL_TIM_Base_Start_IT+0x9c>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d004      	beq.n	8001a88 <HAL_TIM_Base_Start_IT+0x58>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a13      	ldr	r2, [pc, #76]	; (8001ad0 <HAL_TIM_Base_Start_IT+0xa0>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d111      	bne.n	8001aac <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	f003 0307 	and.w	r3, r3, #7
 8001a92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2b06      	cmp	r3, #6
 8001a98:	d010      	beq.n	8001abc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f042 0201 	orr.w	r2, r2, #1
 8001aa8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001aaa:	e007      	b.n	8001abc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f042 0201 	orr.w	r2, r2, #1
 8001aba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3714      	adds	r7, #20
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bc80      	pop	{r7}
 8001ac6:	4770      	bx	lr
 8001ac8:	40012c00 	.word	0x40012c00
 8001acc:	40000400 	.word	0x40000400
 8001ad0:	40000800 	.word	0x40000800

08001ad4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	68da      	ldr	r2, [r3, #12]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f022 0201 	bic.w	r2, r2, #1
 8001aea:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	6a1a      	ldr	r2, [r3, #32]
 8001af2:	f241 1311 	movw	r3, #4369	; 0x1111
 8001af6:	4013      	ands	r3, r2
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d10f      	bne.n	8001b1c <HAL_TIM_Base_Stop_IT+0x48>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	6a1a      	ldr	r2, [r3, #32]
 8001b02:	f240 4344 	movw	r3, #1092	; 0x444
 8001b06:	4013      	ands	r3, r2
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d107      	bne.n	8001b1c <HAL_TIM_Base_Stop_IT+0x48>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f022 0201 	bic.w	r2, r2, #1
 8001b1a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bc80      	pop	{r7}
 8001b2e:	4770      	bx	lr

08001b30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	691b      	ldr	r3, [r3, #16]
 8001b3e:	f003 0302 	and.w	r3, r3, #2
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d122      	bne.n	8001b8c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	f003 0302 	and.w	r3, r3, #2
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d11b      	bne.n	8001b8c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f06f 0202 	mvn.w	r2, #2
 8001b5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2201      	movs	r2, #1
 8001b62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	699b      	ldr	r3, [r3, #24]
 8001b6a:	f003 0303 	and.w	r3, r3, #3
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d003      	beq.n	8001b7a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f000 f9b4 	bl	8001ee0 <HAL_TIM_IC_CaptureCallback>
 8001b78:	e005      	b.n	8001b86 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f000 f9a7 	bl	8001ece <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f000 f9b6 	bl	8001ef2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	691b      	ldr	r3, [r3, #16]
 8001b92:	f003 0304 	and.w	r3, r3, #4
 8001b96:	2b04      	cmp	r3, #4
 8001b98:	d122      	bne.n	8001be0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	f003 0304 	and.w	r3, r3, #4
 8001ba4:	2b04      	cmp	r3, #4
 8001ba6:	d11b      	bne.n	8001be0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f06f 0204 	mvn.w	r2, #4
 8001bb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2202      	movs	r2, #2
 8001bb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	699b      	ldr	r3, [r3, #24]
 8001bbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d003      	beq.n	8001bce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f000 f98a 	bl	8001ee0 <HAL_TIM_IC_CaptureCallback>
 8001bcc:	e005      	b.n	8001bda <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f000 f97d 	bl	8001ece <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f000 f98c 	bl	8001ef2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	691b      	ldr	r3, [r3, #16]
 8001be6:	f003 0308 	and.w	r3, r3, #8
 8001bea:	2b08      	cmp	r3, #8
 8001bec:	d122      	bne.n	8001c34 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	f003 0308 	and.w	r3, r3, #8
 8001bf8:	2b08      	cmp	r3, #8
 8001bfa:	d11b      	bne.n	8001c34 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f06f 0208 	mvn.w	r2, #8
 8001c04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2204      	movs	r2, #4
 8001c0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	69db      	ldr	r3, [r3, #28]
 8001c12:	f003 0303 	and.w	r3, r3, #3
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d003      	beq.n	8001c22 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f000 f960 	bl	8001ee0 <HAL_TIM_IC_CaptureCallback>
 8001c20:	e005      	b.n	8001c2e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f000 f953 	bl	8001ece <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f000 f962 	bl	8001ef2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	691b      	ldr	r3, [r3, #16]
 8001c3a:	f003 0310 	and.w	r3, r3, #16
 8001c3e:	2b10      	cmp	r3, #16
 8001c40:	d122      	bne.n	8001c88 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	f003 0310 	and.w	r3, r3, #16
 8001c4c:	2b10      	cmp	r3, #16
 8001c4e:	d11b      	bne.n	8001c88 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f06f 0210 	mvn.w	r2, #16
 8001c58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2208      	movs	r2, #8
 8001c5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	69db      	ldr	r3, [r3, #28]
 8001c66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d003      	beq.n	8001c76 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f000 f936 	bl	8001ee0 <HAL_TIM_IC_CaptureCallback>
 8001c74:	e005      	b.n	8001c82 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f000 f929 	bl	8001ece <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f000 f938 	bl	8001ef2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2200      	movs	r2, #0
 8001c86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	691b      	ldr	r3, [r3, #16]
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d10e      	bne.n	8001cb4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	f003 0301 	and.w	r3, r3, #1
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d107      	bne.n	8001cb4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f06f 0201 	mvn.w	r2, #1
 8001cac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f7fe fb38 	bl	8000324 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	691b      	ldr	r3, [r3, #16]
 8001cba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cbe:	2b80      	cmp	r3, #128	; 0x80
 8001cc0:	d10e      	bne.n	8001ce0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ccc:	2b80      	cmp	r3, #128	; 0x80
 8001cce:	d107      	bne.n	8001ce0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001cd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f000 fa7b 	bl	80021d6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	691b      	ldr	r3, [r3, #16]
 8001ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cea:	2b40      	cmp	r3, #64	; 0x40
 8001cec:	d10e      	bne.n	8001d0c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cf8:	2b40      	cmp	r3, #64	; 0x40
 8001cfa:	d107      	bne.n	8001d0c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001d04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f000 f8fc 	bl	8001f04 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	691b      	ldr	r3, [r3, #16]
 8001d12:	f003 0320 	and.w	r3, r3, #32
 8001d16:	2b20      	cmp	r3, #32
 8001d18:	d10e      	bne.n	8001d38 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	f003 0320 	and.w	r3, r3, #32
 8001d24:	2b20      	cmp	r3, #32
 8001d26:	d107      	bne.n	8001d38 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f06f 0220 	mvn.w	r2, #32
 8001d30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f000 fa46 	bl	80021c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d38:	bf00      	nop
 8001d3a:	3708      	adds	r7, #8
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d101      	bne.n	8001d5c <HAL_TIM_ConfigClockSource+0x1c>
 8001d58:	2302      	movs	r3, #2
 8001d5a:	e0b4      	b.n	8001ec6 <HAL_TIM_ConfigClockSource+0x186>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2202      	movs	r2, #2
 8001d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001d7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001d82:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	68ba      	ldr	r2, [r7, #8]
 8001d8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d94:	d03e      	beq.n	8001e14 <HAL_TIM_ConfigClockSource+0xd4>
 8001d96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d9a:	f200 8087 	bhi.w	8001eac <HAL_TIM_ConfigClockSource+0x16c>
 8001d9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001da2:	f000 8086 	beq.w	8001eb2 <HAL_TIM_ConfigClockSource+0x172>
 8001da6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001daa:	d87f      	bhi.n	8001eac <HAL_TIM_ConfigClockSource+0x16c>
 8001dac:	2b70      	cmp	r3, #112	; 0x70
 8001dae:	d01a      	beq.n	8001de6 <HAL_TIM_ConfigClockSource+0xa6>
 8001db0:	2b70      	cmp	r3, #112	; 0x70
 8001db2:	d87b      	bhi.n	8001eac <HAL_TIM_ConfigClockSource+0x16c>
 8001db4:	2b60      	cmp	r3, #96	; 0x60
 8001db6:	d050      	beq.n	8001e5a <HAL_TIM_ConfigClockSource+0x11a>
 8001db8:	2b60      	cmp	r3, #96	; 0x60
 8001dba:	d877      	bhi.n	8001eac <HAL_TIM_ConfigClockSource+0x16c>
 8001dbc:	2b50      	cmp	r3, #80	; 0x50
 8001dbe:	d03c      	beq.n	8001e3a <HAL_TIM_ConfigClockSource+0xfa>
 8001dc0:	2b50      	cmp	r3, #80	; 0x50
 8001dc2:	d873      	bhi.n	8001eac <HAL_TIM_ConfigClockSource+0x16c>
 8001dc4:	2b40      	cmp	r3, #64	; 0x40
 8001dc6:	d058      	beq.n	8001e7a <HAL_TIM_ConfigClockSource+0x13a>
 8001dc8:	2b40      	cmp	r3, #64	; 0x40
 8001dca:	d86f      	bhi.n	8001eac <HAL_TIM_ConfigClockSource+0x16c>
 8001dcc:	2b30      	cmp	r3, #48	; 0x30
 8001dce:	d064      	beq.n	8001e9a <HAL_TIM_ConfigClockSource+0x15a>
 8001dd0:	2b30      	cmp	r3, #48	; 0x30
 8001dd2:	d86b      	bhi.n	8001eac <HAL_TIM_ConfigClockSource+0x16c>
 8001dd4:	2b20      	cmp	r3, #32
 8001dd6:	d060      	beq.n	8001e9a <HAL_TIM_ConfigClockSource+0x15a>
 8001dd8:	2b20      	cmp	r3, #32
 8001dda:	d867      	bhi.n	8001eac <HAL_TIM_ConfigClockSource+0x16c>
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d05c      	beq.n	8001e9a <HAL_TIM_ConfigClockSource+0x15a>
 8001de0:	2b10      	cmp	r3, #16
 8001de2:	d05a      	beq.n	8001e9a <HAL_TIM_ConfigClockSource+0x15a>
 8001de4:	e062      	b.n	8001eac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001df6:	f000 f968 	bl	80020ca <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001e08:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	68ba      	ldr	r2, [r7, #8]
 8001e10:	609a      	str	r2, [r3, #8]
      break;
 8001e12:	e04f      	b.n	8001eb4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001e24:	f000 f951 	bl	80020ca <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	689a      	ldr	r2, [r3, #8]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e36:	609a      	str	r2, [r3, #8]
      break;
 8001e38:	e03c      	b.n	8001eb4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e46:	461a      	mov	r2, r3
 8001e48:	f000 f8c8 	bl	8001fdc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	2150      	movs	r1, #80	; 0x50
 8001e52:	4618      	mov	r0, r3
 8001e54:	f000 f91f 	bl	8002096 <TIM_ITRx_SetConfig>
      break;
 8001e58:	e02c      	b.n	8001eb4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001e66:	461a      	mov	r2, r3
 8001e68:	f000 f8e6 	bl	8002038 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2160      	movs	r1, #96	; 0x60
 8001e72:	4618      	mov	r0, r3
 8001e74:	f000 f90f 	bl	8002096 <TIM_ITRx_SetConfig>
      break;
 8001e78:	e01c      	b.n	8001eb4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e86:	461a      	mov	r2, r3
 8001e88:	f000 f8a8 	bl	8001fdc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2140      	movs	r1, #64	; 0x40
 8001e92:	4618      	mov	r0, r3
 8001e94:	f000 f8ff 	bl	8002096 <TIM_ITRx_SetConfig>
      break;
 8001e98:	e00c      	b.n	8001eb4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	4610      	mov	r0, r2
 8001ea6:	f000 f8f6 	bl	8002096 <TIM_ITRx_SetConfig>
      break;
 8001eaa:	e003      	b.n	8001eb4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	73fb      	strb	r3, [r7, #15]
      break;
 8001eb0:	e000      	b.n	8001eb4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001eb2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3710      	adds	r7, #16
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ece:	b480      	push	{r7}
 8001ed0:	b083      	sub	sp, #12
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ed6:	bf00      	nop
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bc80      	pop	{r7}
 8001ede:	4770      	bx	lr

08001ee0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ee8:	bf00      	nop
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bc80      	pop	{r7}
 8001ef0:	4770      	bx	lr

08001ef2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	b083      	sub	sp, #12
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001efa:	bf00      	nop
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bc80      	pop	{r7}
 8001f02:	4770      	bx	lr

08001f04 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f0c:	bf00      	nop
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bc80      	pop	{r7}
 8001f14:	4770      	bx	lr
	...

08001f18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b085      	sub	sp, #20
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	4a29      	ldr	r2, [pc, #164]	; (8001fd0 <TIM_Base_SetConfig+0xb8>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d00b      	beq.n	8001f48 <TIM_Base_SetConfig+0x30>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f36:	d007      	beq.n	8001f48 <TIM_Base_SetConfig+0x30>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4a26      	ldr	r2, [pc, #152]	; (8001fd4 <TIM_Base_SetConfig+0xbc>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d003      	beq.n	8001f48 <TIM_Base_SetConfig+0x30>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	4a25      	ldr	r2, [pc, #148]	; (8001fd8 <TIM_Base_SetConfig+0xc0>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d108      	bne.n	8001f5a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	68fa      	ldr	r2, [r7, #12]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a1c      	ldr	r2, [pc, #112]	; (8001fd0 <TIM_Base_SetConfig+0xb8>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d00b      	beq.n	8001f7a <TIM_Base_SetConfig+0x62>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f68:	d007      	beq.n	8001f7a <TIM_Base_SetConfig+0x62>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4a19      	ldr	r2, [pc, #100]	; (8001fd4 <TIM_Base_SetConfig+0xbc>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d003      	beq.n	8001f7a <TIM_Base_SetConfig+0x62>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a18      	ldr	r2, [pc, #96]	; (8001fd8 <TIM_Base_SetConfig+0xc0>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d108      	bne.n	8001f8c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	68db      	ldr	r3, [r3, #12]
 8001f86:	68fa      	ldr	r2, [r7, #12]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	695b      	ldr	r3, [r3, #20]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	68fa      	ldr	r2, [r7, #12]
 8001f9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	689a      	ldr	r2, [r3, #8]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	4a07      	ldr	r2, [pc, #28]	; (8001fd0 <TIM_Base_SetConfig+0xb8>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d103      	bne.n	8001fc0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	691a      	ldr	r2, [r3, #16]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	615a      	str	r2, [r3, #20]
}
 8001fc6:	bf00      	nop
 8001fc8:	3714      	adds	r7, #20
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bc80      	pop	{r7}
 8001fce:	4770      	bx	lr
 8001fd0:	40012c00 	.word	0x40012c00
 8001fd4:	40000400 	.word	0x40000400
 8001fd8:	40000800 	.word	0x40000800

08001fdc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b087      	sub	sp, #28
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	60b9      	str	r1, [r7, #8]
 8001fe6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	6a1b      	ldr	r3, [r3, #32]
 8001fec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	6a1b      	ldr	r3, [r3, #32]
 8001ff2:	f023 0201 	bic.w	r2, r3, #1
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	699b      	ldr	r3, [r3, #24]
 8001ffe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002006:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	011b      	lsls	r3, r3, #4
 800200c:	693a      	ldr	r2, [r7, #16]
 800200e:	4313      	orrs	r3, r2
 8002010:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	f023 030a 	bic.w	r3, r3, #10
 8002018:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800201a:	697a      	ldr	r2, [r7, #20]
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	4313      	orrs	r3, r2
 8002020:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	693a      	ldr	r2, [r7, #16]
 8002026:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	697a      	ldr	r2, [r7, #20]
 800202c:	621a      	str	r2, [r3, #32]
}
 800202e:	bf00      	nop
 8002030:	371c      	adds	r7, #28
 8002032:	46bd      	mov	sp, r7
 8002034:	bc80      	pop	{r7}
 8002036:	4770      	bx	lr

08002038 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002038:	b480      	push	{r7}
 800203a:	b087      	sub	sp, #28
 800203c:	af00      	add	r7, sp, #0
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	6a1b      	ldr	r3, [r3, #32]
 8002048:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	6a1b      	ldr	r3, [r3, #32]
 800204e:	f023 0210 	bic.w	r2, r3, #16
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	699b      	ldr	r3, [r3, #24]
 800205a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002062:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	031b      	lsls	r3, r3, #12
 8002068:	693a      	ldr	r2, [r7, #16]
 800206a:	4313      	orrs	r3, r2
 800206c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002074:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	011b      	lsls	r3, r3, #4
 800207a:	697a      	ldr	r2, [r7, #20]
 800207c:	4313      	orrs	r3, r2
 800207e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	693a      	ldr	r2, [r7, #16]
 8002084:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	697a      	ldr	r2, [r7, #20]
 800208a:	621a      	str	r2, [r3, #32]
}
 800208c:	bf00      	nop
 800208e:	371c      	adds	r7, #28
 8002090:	46bd      	mov	sp, r7
 8002092:	bc80      	pop	{r7}
 8002094:	4770      	bx	lr

08002096 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002096:	b480      	push	{r7}
 8002098:	b085      	sub	sp, #20
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
 800209e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80020ae:	683a      	ldr	r2, [r7, #0]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	f043 0307 	orr.w	r3, r3, #7
 80020b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	68fa      	ldr	r2, [r7, #12]
 80020be:	609a      	str	r2, [r3, #8]
}
 80020c0:	bf00      	nop
 80020c2:	3714      	adds	r7, #20
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bc80      	pop	{r7}
 80020c8:	4770      	bx	lr

080020ca <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80020ca:	b480      	push	{r7}
 80020cc:	b087      	sub	sp, #28
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	60f8      	str	r0, [r7, #12]
 80020d2:	60b9      	str	r1, [r7, #8]
 80020d4:	607a      	str	r2, [r7, #4]
 80020d6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80020e4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	021a      	lsls	r2, r3, #8
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	431a      	orrs	r2, r3
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	697a      	ldr	r2, [r7, #20]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	697a      	ldr	r2, [r7, #20]
 80020fc:	609a      	str	r2, [r3, #8]
}
 80020fe:	bf00      	nop
 8002100:	371c      	adds	r7, #28
 8002102:	46bd      	mov	sp, r7
 8002104:	bc80      	pop	{r7}
 8002106:	4770      	bx	lr

08002108 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002108:	b480      	push	{r7}
 800210a:	b085      	sub	sp, #20
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002118:	2b01      	cmp	r3, #1
 800211a:	d101      	bne.n	8002120 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800211c:	2302      	movs	r3, #2
 800211e:	e046      	b.n	80021ae <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2201      	movs	r2, #1
 8002124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2202      	movs	r2, #2
 800212c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002146:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	68fa      	ldr	r2, [r7, #12]
 800214e:	4313      	orrs	r3, r2
 8002150:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	68fa      	ldr	r2, [r7, #12]
 8002158:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a16      	ldr	r2, [pc, #88]	; (80021b8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d00e      	beq.n	8002182 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800216c:	d009      	beq.n	8002182 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a12      	ldr	r2, [pc, #72]	; (80021bc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d004      	beq.n	8002182 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a10      	ldr	r2, [pc, #64]	; (80021c0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d10c      	bne.n	800219c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002188:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	68ba      	ldr	r2, [r7, #8]
 8002190:	4313      	orrs	r3, r2
 8002192:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	68ba      	ldr	r2, [r7, #8]
 800219a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2201      	movs	r2, #1
 80021a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3714      	adds	r7, #20
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bc80      	pop	{r7}
 80021b6:	4770      	bx	lr
 80021b8:	40012c00 	.word	0x40012c00
 80021bc:	40000400 	.word	0x40000400
 80021c0:	40000800 	.word	0x40000800

080021c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80021cc:	bf00      	nop
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bc80      	pop	{r7}
 80021d4:	4770      	bx	lr

080021d6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80021d6:	b480      	push	{r7}
 80021d8:	b083      	sub	sp, #12
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80021de:	bf00      	nop
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bc80      	pop	{r7}
 80021e6:	4770      	bx	lr

080021e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d101      	bne.n	80021fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e042      	b.n	8002280 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002200:	b2db      	uxtb	r3, r3
 8002202:	2b00      	cmp	r3, #0
 8002204:	d106      	bne.n	8002214 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f7fe fc18 	bl	8000a44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2224      	movs	r2, #36	; 0x24
 8002218:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	68da      	ldr	r2, [r3, #12]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800222a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f000 f9af 	bl	8002590 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	691a      	ldr	r2, [r3, #16]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002240:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	695a      	ldr	r2, [r3, #20]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002250:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	68da      	ldr	r2, [r3, #12]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002260:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2220      	movs	r2, #32
 800226c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2220      	movs	r2, #32
 8002274:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800227e:	2300      	movs	r3, #0
}
 8002280:	4618      	mov	r0, r3
 8002282:	3708      	adds	r7, #8
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}

08002288 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b08a      	sub	sp, #40	; 0x28
 800228c:	af02      	add	r7, sp, #8
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	603b      	str	r3, [r7, #0]
 8002294:	4613      	mov	r3, r2
 8002296:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002298:	2300      	movs	r3, #0
 800229a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	2b20      	cmp	r3, #32
 80022a6:	d16d      	bne.n	8002384 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d002      	beq.n	80022b4 <HAL_UART_Transmit+0x2c>
 80022ae:	88fb      	ldrh	r3, [r7, #6]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d101      	bne.n	80022b8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e066      	b.n	8002386 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2200      	movs	r2, #0
 80022bc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2221      	movs	r2, #33	; 0x21
 80022c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80022c6:	f7fe fc87 	bl	8000bd8 <HAL_GetTick>
 80022ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	88fa      	ldrh	r2, [r7, #6]
 80022d0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	88fa      	ldrh	r2, [r7, #6]
 80022d6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022e0:	d108      	bne.n	80022f4 <HAL_UART_Transmit+0x6c>
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	691b      	ldr	r3, [r3, #16]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d104      	bne.n	80022f4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80022ea:	2300      	movs	r3, #0
 80022ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	61bb      	str	r3, [r7, #24]
 80022f2:	e003      	b.n	80022fc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80022f8:	2300      	movs	r3, #0
 80022fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80022fc:	e02a      	b.n	8002354 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	9300      	str	r3, [sp, #0]
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	2200      	movs	r2, #0
 8002306:	2180      	movs	r1, #128	; 0x80
 8002308:	68f8      	ldr	r0, [r7, #12]
 800230a:	f000 f8d2 	bl	80024b2 <UART_WaitOnFlagUntilTimeout>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002314:	2303      	movs	r3, #3
 8002316:	e036      	b.n	8002386 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d10b      	bne.n	8002336 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	881b      	ldrh	r3, [r3, #0]
 8002322:	461a      	mov	r2, r3
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800232c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800232e:	69bb      	ldr	r3, [r7, #24]
 8002330:	3302      	adds	r3, #2
 8002332:	61bb      	str	r3, [r7, #24]
 8002334:	e007      	b.n	8002346 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	781a      	ldrb	r2, [r3, #0]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	3301      	adds	r3, #1
 8002344:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800234a:	b29b      	uxth	r3, r3
 800234c:	3b01      	subs	r3, #1
 800234e:	b29a      	uxth	r2, r3
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002358:	b29b      	uxth	r3, r3
 800235a:	2b00      	cmp	r3, #0
 800235c:	d1cf      	bne.n	80022fe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	9300      	str	r3, [sp, #0]
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	2200      	movs	r2, #0
 8002366:	2140      	movs	r1, #64	; 0x40
 8002368:	68f8      	ldr	r0, [r7, #12]
 800236a:	f000 f8a2 	bl	80024b2 <UART_WaitOnFlagUntilTimeout>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e006      	b.n	8002386 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2220      	movs	r2, #32
 800237c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002380:	2300      	movs	r3, #0
 8002382:	e000      	b.n	8002386 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002384:	2302      	movs	r3, #2
  }
}
 8002386:	4618      	mov	r0, r3
 8002388:	3720      	adds	r7, #32
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800238e:	b580      	push	{r7, lr}
 8002390:	b08a      	sub	sp, #40	; 0x28
 8002392:	af02      	add	r7, sp, #8
 8002394:	60f8      	str	r0, [r7, #12]
 8002396:	60b9      	str	r1, [r7, #8]
 8002398:	603b      	str	r3, [r7, #0]
 800239a:	4613      	mov	r3, r2
 800239c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800239e:	2300      	movs	r3, #0
 80023a0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	2b20      	cmp	r3, #32
 80023ac:	d17c      	bne.n	80024a8 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d002      	beq.n	80023ba <HAL_UART_Receive+0x2c>
 80023b4:	88fb      	ldrh	r3, [r7, #6]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d101      	bne.n	80023be <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e075      	b.n	80024aa <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2200      	movs	r2, #0
 80023c2:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2222      	movs	r2, #34	; 0x22
 80023c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2200      	movs	r2, #0
 80023d0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80023d2:	f7fe fc01 	bl	8000bd8 <HAL_GetTick>
 80023d6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	88fa      	ldrh	r2, [r7, #6]
 80023dc:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	88fa      	ldrh	r2, [r7, #6]
 80023e2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023ec:	d108      	bne.n	8002400 <HAL_UART_Receive+0x72>
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	691b      	ldr	r3, [r3, #16]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d104      	bne.n	8002400 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 80023f6:	2300      	movs	r3, #0
 80023f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	61bb      	str	r3, [r7, #24]
 80023fe:	e003      	b.n	8002408 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002404:	2300      	movs	r3, #0
 8002406:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002408:	e043      	b.n	8002492 <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	9300      	str	r3, [sp, #0]
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	2200      	movs	r2, #0
 8002412:	2120      	movs	r1, #32
 8002414:	68f8      	ldr	r0, [r7, #12]
 8002416:	f000 f84c 	bl	80024b2 <UART_WaitOnFlagUntilTimeout>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d001      	beq.n	8002424 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	e042      	b.n	80024aa <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d10c      	bne.n	8002444 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	b29b      	uxth	r3, r3
 8002432:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002436:	b29a      	uxth	r2, r3
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	3302      	adds	r3, #2
 8002440:	61bb      	str	r3, [r7, #24]
 8002442:	e01f      	b.n	8002484 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800244c:	d007      	beq.n	800245e <HAL_UART_Receive+0xd0>
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d10a      	bne.n	800246c <HAL_UART_Receive+0xde>
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	691b      	ldr	r3, [r3, #16]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d106      	bne.n	800246c <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	b2da      	uxtb	r2, r3
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	701a      	strb	r2, [r3, #0]
 800246a:	e008      	b.n	800247e <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	b2db      	uxtb	r3, r3
 8002474:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002478:	b2da      	uxtb	r2, r3
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	3301      	adds	r3, #1
 8002482:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002488:	b29b      	uxth	r3, r3
 800248a:	3b01      	subs	r3, #1
 800248c:	b29a      	uxth	r2, r3
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002496:	b29b      	uxth	r3, r3
 8002498:	2b00      	cmp	r3, #0
 800249a:	d1b6      	bne.n	800240a <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2220      	movs	r2, #32
 80024a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 80024a4:	2300      	movs	r3, #0
 80024a6:	e000      	b.n	80024aa <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80024a8:	2302      	movs	r3, #2
  }
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3720      	adds	r7, #32
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b090      	sub	sp, #64	; 0x40
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	60f8      	str	r0, [r7, #12]
 80024ba:	60b9      	str	r1, [r7, #8]
 80024bc:	603b      	str	r3, [r7, #0]
 80024be:	4613      	mov	r3, r2
 80024c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024c2:	e050      	b.n	8002566 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024ca:	d04c      	beq.n	8002566 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80024cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d007      	beq.n	80024e2 <UART_WaitOnFlagUntilTimeout+0x30>
 80024d2:	f7fe fb81 	bl	8000bd8 <HAL_GetTick>
 80024d6:	4602      	mov	r2, r0
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80024de:	429a      	cmp	r2, r3
 80024e0:	d241      	bcs.n	8002566 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	330c      	adds	r3, #12
 80024e8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ec:	e853 3f00 	ldrex	r3, [r3]
 80024f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80024f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80024f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	330c      	adds	r3, #12
 8002500:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002502:	637a      	str	r2, [r7, #52]	; 0x34
 8002504:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002506:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002508:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800250a:	e841 2300 	strex	r3, r2, [r1]
 800250e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1e5      	bne.n	80024e2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	3314      	adds	r3, #20
 800251c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	e853 3f00 	ldrex	r3, [r3]
 8002524:	613b      	str	r3, [r7, #16]
   return(result);
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	f023 0301 	bic.w	r3, r3, #1
 800252c:	63bb      	str	r3, [r7, #56]	; 0x38
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	3314      	adds	r3, #20
 8002534:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002536:	623a      	str	r2, [r7, #32]
 8002538:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800253a:	69f9      	ldr	r1, [r7, #28]
 800253c:	6a3a      	ldr	r2, [r7, #32]
 800253e:	e841 2300 	strex	r3, r2, [r1]
 8002542:	61bb      	str	r3, [r7, #24]
   return(result);
 8002544:	69bb      	ldr	r3, [r7, #24]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d1e5      	bne.n	8002516 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2220      	movs	r2, #32
 800254e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2220      	movs	r2, #32
 8002556:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2200      	movs	r2, #0
 800255e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e00f      	b.n	8002586 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	4013      	ands	r3, r2
 8002570:	68ba      	ldr	r2, [r7, #8]
 8002572:	429a      	cmp	r2, r3
 8002574:	bf0c      	ite	eq
 8002576:	2301      	moveq	r3, #1
 8002578:	2300      	movne	r3, #0
 800257a:	b2db      	uxtb	r3, r3
 800257c:	461a      	mov	r2, r3
 800257e:	79fb      	ldrb	r3, [r7, #7]
 8002580:	429a      	cmp	r2, r3
 8002582:	d09f      	beq.n	80024c4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3740      	adds	r7, #64	; 0x40
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
	...

08002590 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	68da      	ldr	r2, [r3, #12]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	430a      	orrs	r2, r1
 80025ac:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	689a      	ldr	r2, [r3, #8]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	431a      	orrs	r2, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	695b      	ldr	r3, [r3, #20]
 80025bc:	4313      	orrs	r3, r2
 80025be:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80025ca:	f023 030c 	bic.w	r3, r3, #12
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	6812      	ldr	r2, [r2, #0]
 80025d2:	68b9      	ldr	r1, [r7, #8]
 80025d4:	430b      	orrs	r3, r1
 80025d6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	695b      	ldr	r3, [r3, #20]
 80025de:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	699a      	ldr	r2, [r3, #24]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	430a      	orrs	r2, r1
 80025ec:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a2c      	ldr	r2, [pc, #176]	; (80026a4 <UART_SetConfig+0x114>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d103      	bne.n	8002600 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80025f8:	f7ff f998 	bl	800192c <HAL_RCC_GetPCLK2Freq>
 80025fc:	60f8      	str	r0, [r7, #12]
 80025fe:	e002      	b.n	8002606 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002600:	f7ff f980 	bl	8001904 <HAL_RCC_GetPCLK1Freq>
 8002604:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002606:	68fa      	ldr	r2, [r7, #12]
 8002608:	4613      	mov	r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	4413      	add	r3, r2
 800260e:	009a      	lsls	r2, r3, #2
 8002610:	441a      	add	r2, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	fbb2 f3f3 	udiv	r3, r2, r3
 800261c:	4a22      	ldr	r2, [pc, #136]	; (80026a8 <UART_SetConfig+0x118>)
 800261e:	fba2 2303 	umull	r2, r3, r2, r3
 8002622:	095b      	lsrs	r3, r3, #5
 8002624:	0119      	lsls	r1, r3, #4
 8002626:	68fa      	ldr	r2, [r7, #12]
 8002628:	4613      	mov	r3, r2
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	4413      	add	r3, r2
 800262e:	009a      	lsls	r2, r3, #2
 8002630:	441a      	add	r2, r3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	fbb2 f2f3 	udiv	r2, r2, r3
 800263c:	4b1a      	ldr	r3, [pc, #104]	; (80026a8 <UART_SetConfig+0x118>)
 800263e:	fba3 0302 	umull	r0, r3, r3, r2
 8002642:	095b      	lsrs	r3, r3, #5
 8002644:	2064      	movs	r0, #100	; 0x64
 8002646:	fb00 f303 	mul.w	r3, r0, r3
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	011b      	lsls	r3, r3, #4
 800264e:	3332      	adds	r3, #50	; 0x32
 8002650:	4a15      	ldr	r2, [pc, #84]	; (80026a8 <UART_SetConfig+0x118>)
 8002652:	fba2 2303 	umull	r2, r3, r2, r3
 8002656:	095b      	lsrs	r3, r3, #5
 8002658:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800265c:	4419      	add	r1, r3
 800265e:	68fa      	ldr	r2, [r7, #12]
 8002660:	4613      	mov	r3, r2
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	4413      	add	r3, r2
 8002666:	009a      	lsls	r2, r3, #2
 8002668:	441a      	add	r2, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	fbb2 f2f3 	udiv	r2, r2, r3
 8002674:	4b0c      	ldr	r3, [pc, #48]	; (80026a8 <UART_SetConfig+0x118>)
 8002676:	fba3 0302 	umull	r0, r3, r3, r2
 800267a:	095b      	lsrs	r3, r3, #5
 800267c:	2064      	movs	r0, #100	; 0x64
 800267e:	fb00 f303 	mul.w	r3, r0, r3
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	011b      	lsls	r3, r3, #4
 8002686:	3332      	adds	r3, #50	; 0x32
 8002688:	4a07      	ldr	r2, [pc, #28]	; (80026a8 <UART_SetConfig+0x118>)
 800268a:	fba2 2303 	umull	r2, r3, r2, r3
 800268e:	095b      	lsrs	r3, r3, #5
 8002690:	f003 020f 	and.w	r2, r3, #15
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	440a      	add	r2, r1
 800269a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800269c:	bf00      	nop
 800269e:	3710      	adds	r7, #16
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	40013800 	.word	0x40013800
 80026a8:	51eb851f 	.word	0x51eb851f

080026ac <_vsniprintf_r>:
 80026ac:	b530      	push	{r4, r5, lr}
 80026ae:	4614      	mov	r4, r2
 80026b0:	2c00      	cmp	r4, #0
 80026b2:	4605      	mov	r5, r0
 80026b4:	461a      	mov	r2, r3
 80026b6:	b09b      	sub	sp, #108	; 0x6c
 80026b8:	da05      	bge.n	80026c6 <_vsniprintf_r+0x1a>
 80026ba:	238b      	movs	r3, #139	; 0x8b
 80026bc:	6003      	str	r3, [r0, #0]
 80026be:	f04f 30ff 	mov.w	r0, #4294967295
 80026c2:	b01b      	add	sp, #108	; 0x6c
 80026c4:	bd30      	pop	{r4, r5, pc}
 80026c6:	f44f 7302 	mov.w	r3, #520	; 0x208
 80026ca:	f8ad 300c 	strh.w	r3, [sp, #12]
 80026ce:	bf0c      	ite	eq
 80026d0:	4623      	moveq	r3, r4
 80026d2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80026d6:	9302      	str	r3, [sp, #8]
 80026d8:	9305      	str	r3, [sp, #20]
 80026da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026de:	9100      	str	r1, [sp, #0]
 80026e0:	9104      	str	r1, [sp, #16]
 80026e2:	f8ad 300e 	strh.w	r3, [sp, #14]
 80026e6:	4669      	mov	r1, sp
 80026e8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80026ea:	f000 f99b 	bl	8002a24 <_svfiprintf_r>
 80026ee:	1c43      	adds	r3, r0, #1
 80026f0:	bfbc      	itt	lt
 80026f2:	238b      	movlt	r3, #139	; 0x8b
 80026f4:	602b      	strlt	r3, [r5, #0]
 80026f6:	2c00      	cmp	r4, #0
 80026f8:	d0e3      	beq.n	80026c2 <_vsniprintf_r+0x16>
 80026fa:	2200      	movs	r2, #0
 80026fc:	9b00      	ldr	r3, [sp, #0]
 80026fe:	701a      	strb	r2, [r3, #0]
 8002700:	e7df      	b.n	80026c2 <_vsniprintf_r+0x16>
	...

08002704 <vsniprintf>:
 8002704:	b507      	push	{r0, r1, r2, lr}
 8002706:	9300      	str	r3, [sp, #0]
 8002708:	4613      	mov	r3, r2
 800270a:	460a      	mov	r2, r1
 800270c:	4601      	mov	r1, r0
 800270e:	4803      	ldr	r0, [pc, #12]	; (800271c <vsniprintf+0x18>)
 8002710:	6800      	ldr	r0, [r0, #0]
 8002712:	f7ff ffcb 	bl	80026ac <_vsniprintf_r>
 8002716:	b003      	add	sp, #12
 8002718:	f85d fb04 	ldr.w	pc, [sp], #4
 800271c:	20000060 	.word	0x20000060

08002720 <memset>:
 8002720:	4603      	mov	r3, r0
 8002722:	4402      	add	r2, r0
 8002724:	4293      	cmp	r3, r2
 8002726:	d100      	bne.n	800272a <memset+0xa>
 8002728:	4770      	bx	lr
 800272a:	f803 1b01 	strb.w	r1, [r3], #1
 800272e:	e7f9      	b.n	8002724 <memset+0x4>

08002730 <__errno>:
 8002730:	4b01      	ldr	r3, [pc, #4]	; (8002738 <__errno+0x8>)
 8002732:	6818      	ldr	r0, [r3, #0]
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	20000060 	.word	0x20000060

0800273c <__libc_init_array>:
 800273c:	b570      	push	{r4, r5, r6, lr}
 800273e:	2600      	movs	r6, #0
 8002740:	4d0c      	ldr	r5, [pc, #48]	; (8002774 <__libc_init_array+0x38>)
 8002742:	4c0d      	ldr	r4, [pc, #52]	; (8002778 <__libc_init_array+0x3c>)
 8002744:	1b64      	subs	r4, r4, r5
 8002746:	10a4      	asrs	r4, r4, #2
 8002748:	42a6      	cmp	r6, r4
 800274a:	d109      	bne.n	8002760 <__libc_init_array+0x24>
 800274c:	f000 fc7a 	bl	8003044 <_init>
 8002750:	2600      	movs	r6, #0
 8002752:	4d0a      	ldr	r5, [pc, #40]	; (800277c <__libc_init_array+0x40>)
 8002754:	4c0a      	ldr	r4, [pc, #40]	; (8002780 <__libc_init_array+0x44>)
 8002756:	1b64      	subs	r4, r4, r5
 8002758:	10a4      	asrs	r4, r4, #2
 800275a:	42a6      	cmp	r6, r4
 800275c:	d105      	bne.n	800276a <__libc_init_array+0x2e>
 800275e:	bd70      	pop	{r4, r5, r6, pc}
 8002760:	f855 3b04 	ldr.w	r3, [r5], #4
 8002764:	4798      	blx	r3
 8002766:	3601      	adds	r6, #1
 8002768:	e7ee      	b.n	8002748 <__libc_init_array+0xc>
 800276a:	f855 3b04 	ldr.w	r3, [r5], #4
 800276e:	4798      	blx	r3
 8002770:	3601      	adds	r6, #1
 8002772:	e7f2      	b.n	800275a <__libc_init_array+0x1e>
 8002774:	08003158 	.word	0x08003158
 8002778:	08003158 	.word	0x08003158
 800277c:	08003158 	.word	0x08003158
 8002780:	0800315c 	.word	0x0800315c

08002784 <__retarget_lock_acquire_recursive>:
 8002784:	4770      	bx	lr

08002786 <__retarget_lock_release_recursive>:
 8002786:	4770      	bx	lr

08002788 <_free_r>:
 8002788:	b538      	push	{r3, r4, r5, lr}
 800278a:	4605      	mov	r5, r0
 800278c:	2900      	cmp	r1, #0
 800278e:	d040      	beq.n	8002812 <_free_r+0x8a>
 8002790:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002794:	1f0c      	subs	r4, r1, #4
 8002796:	2b00      	cmp	r3, #0
 8002798:	bfb8      	it	lt
 800279a:	18e4      	addlt	r4, r4, r3
 800279c:	f000 f8dc 	bl	8002958 <__malloc_lock>
 80027a0:	4a1c      	ldr	r2, [pc, #112]	; (8002814 <_free_r+0x8c>)
 80027a2:	6813      	ldr	r3, [r2, #0]
 80027a4:	b933      	cbnz	r3, 80027b4 <_free_r+0x2c>
 80027a6:	6063      	str	r3, [r4, #4]
 80027a8:	6014      	str	r4, [r2, #0]
 80027aa:	4628      	mov	r0, r5
 80027ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80027b0:	f000 b8d8 	b.w	8002964 <__malloc_unlock>
 80027b4:	42a3      	cmp	r3, r4
 80027b6:	d908      	bls.n	80027ca <_free_r+0x42>
 80027b8:	6820      	ldr	r0, [r4, #0]
 80027ba:	1821      	adds	r1, r4, r0
 80027bc:	428b      	cmp	r3, r1
 80027be:	bf01      	itttt	eq
 80027c0:	6819      	ldreq	r1, [r3, #0]
 80027c2:	685b      	ldreq	r3, [r3, #4]
 80027c4:	1809      	addeq	r1, r1, r0
 80027c6:	6021      	streq	r1, [r4, #0]
 80027c8:	e7ed      	b.n	80027a6 <_free_r+0x1e>
 80027ca:	461a      	mov	r2, r3
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	b10b      	cbz	r3, 80027d4 <_free_r+0x4c>
 80027d0:	42a3      	cmp	r3, r4
 80027d2:	d9fa      	bls.n	80027ca <_free_r+0x42>
 80027d4:	6811      	ldr	r1, [r2, #0]
 80027d6:	1850      	adds	r0, r2, r1
 80027d8:	42a0      	cmp	r0, r4
 80027da:	d10b      	bne.n	80027f4 <_free_r+0x6c>
 80027dc:	6820      	ldr	r0, [r4, #0]
 80027de:	4401      	add	r1, r0
 80027e0:	1850      	adds	r0, r2, r1
 80027e2:	4283      	cmp	r3, r0
 80027e4:	6011      	str	r1, [r2, #0]
 80027e6:	d1e0      	bne.n	80027aa <_free_r+0x22>
 80027e8:	6818      	ldr	r0, [r3, #0]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	4408      	add	r0, r1
 80027ee:	6010      	str	r0, [r2, #0]
 80027f0:	6053      	str	r3, [r2, #4]
 80027f2:	e7da      	b.n	80027aa <_free_r+0x22>
 80027f4:	d902      	bls.n	80027fc <_free_r+0x74>
 80027f6:	230c      	movs	r3, #12
 80027f8:	602b      	str	r3, [r5, #0]
 80027fa:	e7d6      	b.n	80027aa <_free_r+0x22>
 80027fc:	6820      	ldr	r0, [r4, #0]
 80027fe:	1821      	adds	r1, r4, r0
 8002800:	428b      	cmp	r3, r1
 8002802:	bf01      	itttt	eq
 8002804:	6819      	ldreq	r1, [r3, #0]
 8002806:	685b      	ldreq	r3, [r3, #4]
 8002808:	1809      	addeq	r1, r1, r0
 800280a:	6021      	streq	r1, [r4, #0]
 800280c:	6063      	str	r3, [r4, #4]
 800280e:	6054      	str	r4, [r2, #4]
 8002810:	e7cb      	b.n	80027aa <_free_r+0x22>
 8002812:	bd38      	pop	{r3, r4, r5, pc}
 8002814:	20000294 	.word	0x20000294

08002818 <sbrk_aligned>:
 8002818:	b570      	push	{r4, r5, r6, lr}
 800281a:	4e0e      	ldr	r6, [pc, #56]	; (8002854 <sbrk_aligned+0x3c>)
 800281c:	460c      	mov	r4, r1
 800281e:	6831      	ldr	r1, [r6, #0]
 8002820:	4605      	mov	r5, r0
 8002822:	b911      	cbnz	r1, 800282a <sbrk_aligned+0x12>
 8002824:	f000 fbaa 	bl	8002f7c <_sbrk_r>
 8002828:	6030      	str	r0, [r6, #0]
 800282a:	4621      	mov	r1, r4
 800282c:	4628      	mov	r0, r5
 800282e:	f000 fba5 	bl	8002f7c <_sbrk_r>
 8002832:	1c43      	adds	r3, r0, #1
 8002834:	d00a      	beq.n	800284c <sbrk_aligned+0x34>
 8002836:	1cc4      	adds	r4, r0, #3
 8002838:	f024 0403 	bic.w	r4, r4, #3
 800283c:	42a0      	cmp	r0, r4
 800283e:	d007      	beq.n	8002850 <sbrk_aligned+0x38>
 8002840:	1a21      	subs	r1, r4, r0
 8002842:	4628      	mov	r0, r5
 8002844:	f000 fb9a 	bl	8002f7c <_sbrk_r>
 8002848:	3001      	adds	r0, #1
 800284a:	d101      	bne.n	8002850 <sbrk_aligned+0x38>
 800284c:	f04f 34ff 	mov.w	r4, #4294967295
 8002850:	4620      	mov	r0, r4
 8002852:	bd70      	pop	{r4, r5, r6, pc}
 8002854:	20000298 	.word	0x20000298

08002858 <_malloc_r>:
 8002858:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800285c:	1ccd      	adds	r5, r1, #3
 800285e:	f025 0503 	bic.w	r5, r5, #3
 8002862:	3508      	adds	r5, #8
 8002864:	2d0c      	cmp	r5, #12
 8002866:	bf38      	it	cc
 8002868:	250c      	movcc	r5, #12
 800286a:	2d00      	cmp	r5, #0
 800286c:	4607      	mov	r7, r0
 800286e:	db01      	blt.n	8002874 <_malloc_r+0x1c>
 8002870:	42a9      	cmp	r1, r5
 8002872:	d905      	bls.n	8002880 <_malloc_r+0x28>
 8002874:	230c      	movs	r3, #12
 8002876:	2600      	movs	r6, #0
 8002878:	603b      	str	r3, [r7, #0]
 800287a:	4630      	mov	r0, r6
 800287c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002880:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002954 <_malloc_r+0xfc>
 8002884:	f000 f868 	bl	8002958 <__malloc_lock>
 8002888:	f8d8 3000 	ldr.w	r3, [r8]
 800288c:	461c      	mov	r4, r3
 800288e:	bb5c      	cbnz	r4, 80028e8 <_malloc_r+0x90>
 8002890:	4629      	mov	r1, r5
 8002892:	4638      	mov	r0, r7
 8002894:	f7ff ffc0 	bl	8002818 <sbrk_aligned>
 8002898:	1c43      	adds	r3, r0, #1
 800289a:	4604      	mov	r4, r0
 800289c:	d155      	bne.n	800294a <_malloc_r+0xf2>
 800289e:	f8d8 4000 	ldr.w	r4, [r8]
 80028a2:	4626      	mov	r6, r4
 80028a4:	2e00      	cmp	r6, #0
 80028a6:	d145      	bne.n	8002934 <_malloc_r+0xdc>
 80028a8:	2c00      	cmp	r4, #0
 80028aa:	d048      	beq.n	800293e <_malloc_r+0xe6>
 80028ac:	6823      	ldr	r3, [r4, #0]
 80028ae:	4631      	mov	r1, r6
 80028b0:	4638      	mov	r0, r7
 80028b2:	eb04 0903 	add.w	r9, r4, r3
 80028b6:	f000 fb61 	bl	8002f7c <_sbrk_r>
 80028ba:	4581      	cmp	r9, r0
 80028bc:	d13f      	bne.n	800293e <_malloc_r+0xe6>
 80028be:	6821      	ldr	r1, [r4, #0]
 80028c0:	4638      	mov	r0, r7
 80028c2:	1a6d      	subs	r5, r5, r1
 80028c4:	4629      	mov	r1, r5
 80028c6:	f7ff ffa7 	bl	8002818 <sbrk_aligned>
 80028ca:	3001      	adds	r0, #1
 80028cc:	d037      	beq.n	800293e <_malloc_r+0xe6>
 80028ce:	6823      	ldr	r3, [r4, #0]
 80028d0:	442b      	add	r3, r5
 80028d2:	6023      	str	r3, [r4, #0]
 80028d4:	f8d8 3000 	ldr.w	r3, [r8]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d038      	beq.n	800294e <_malloc_r+0xf6>
 80028dc:	685a      	ldr	r2, [r3, #4]
 80028de:	42a2      	cmp	r2, r4
 80028e0:	d12b      	bne.n	800293a <_malloc_r+0xe2>
 80028e2:	2200      	movs	r2, #0
 80028e4:	605a      	str	r2, [r3, #4]
 80028e6:	e00f      	b.n	8002908 <_malloc_r+0xb0>
 80028e8:	6822      	ldr	r2, [r4, #0]
 80028ea:	1b52      	subs	r2, r2, r5
 80028ec:	d41f      	bmi.n	800292e <_malloc_r+0xd6>
 80028ee:	2a0b      	cmp	r2, #11
 80028f0:	d917      	bls.n	8002922 <_malloc_r+0xca>
 80028f2:	1961      	adds	r1, r4, r5
 80028f4:	42a3      	cmp	r3, r4
 80028f6:	6025      	str	r5, [r4, #0]
 80028f8:	bf18      	it	ne
 80028fa:	6059      	strne	r1, [r3, #4]
 80028fc:	6863      	ldr	r3, [r4, #4]
 80028fe:	bf08      	it	eq
 8002900:	f8c8 1000 	streq.w	r1, [r8]
 8002904:	5162      	str	r2, [r4, r5]
 8002906:	604b      	str	r3, [r1, #4]
 8002908:	4638      	mov	r0, r7
 800290a:	f104 060b 	add.w	r6, r4, #11
 800290e:	f000 f829 	bl	8002964 <__malloc_unlock>
 8002912:	f026 0607 	bic.w	r6, r6, #7
 8002916:	1d23      	adds	r3, r4, #4
 8002918:	1af2      	subs	r2, r6, r3
 800291a:	d0ae      	beq.n	800287a <_malloc_r+0x22>
 800291c:	1b9b      	subs	r3, r3, r6
 800291e:	50a3      	str	r3, [r4, r2]
 8002920:	e7ab      	b.n	800287a <_malloc_r+0x22>
 8002922:	42a3      	cmp	r3, r4
 8002924:	6862      	ldr	r2, [r4, #4]
 8002926:	d1dd      	bne.n	80028e4 <_malloc_r+0x8c>
 8002928:	f8c8 2000 	str.w	r2, [r8]
 800292c:	e7ec      	b.n	8002908 <_malloc_r+0xb0>
 800292e:	4623      	mov	r3, r4
 8002930:	6864      	ldr	r4, [r4, #4]
 8002932:	e7ac      	b.n	800288e <_malloc_r+0x36>
 8002934:	4634      	mov	r4, r6
 8002936:	6876      	ldr	r6, [r6, #4]
 8002938:	e7b4      	b.n	80028a4 <_malloc_r+0x4c>
 800293a:	4613      	mov	r3, r2
 800293c:	e7cc      	b.n	80028d8 <_malloc_r+0x80>
 800293e:	230c      	movs	r3, #12
 8002940:	4638      	mov	r0, r7
 8002942:	603b      	str	r3, [r7, #0]
 8002944:	f000 f80e 	bl	8002964 <__malloc_unlock>
 8002948:	e797      	b.n	800287a <_malloc_r+0x22>
 800294a:	6025      	str	r5, [r4, #0]
 800294c:	e7dc      	b.n	8002908 <_malloc_r+0xb0>
 800294e:	605b      	str	r3, [r3, #4]
 8002950:	deff      	udf	#255	; 0xff
 8002952:	bf00      	nop
 8002954:	20000294 	.word	0x20000294

08002958 <__malloc_lock>:
 8002958:	4801      	ldr	r0, [pc, #4]	; (8002960 <__malloc_lock+0x8>)
 800295a:	f7ff bf13 	b.w	8002784 <__retarget_lock_acquire_recursive>
 800295e:	bf00      	nop
 8002960:	20000290 	.word	0x20000290

08002964 <__malloc_unlock>:
 8002964:	4801      	ldr	r0, [pc, #4]	; (800296c <__malloc_unlock+0x8>)
 8002966:	f7ff bf0e 	b.w	8002786 <__retarget_lock_release_recursive>
 800296a:	bf00      	nop
 800296c:	20000290 	.word	0x20000290

08002970 <__ssputs_r>:
 8002970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002974:	461f      	mov	r7, r3
 8002976:	688e      	ldr	r6, [r1, #8]
 8002978:	4682      	mov	sl, r0
 800297a:	42be      	cmp	r6, r7
 800297c:	460c      	mov	r4, r1
 800297e:	4690      	mov	r8, r2
 8002980:	680b      	ldr	r3, [r1, #0]
 8002982:	d82c      	bhi.n	80029de <__ssputs_r+0x6e>
 8002984:	898a      	ldrh	r2, [r1, #12]
 8002986:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800298a:	d026      	beq.n	80029da <__ssputs_r+0x6a>
 800298c:	6965      	ldr	r5, [r4, #20]
 800298e:	6909      	ldr	r1, [r1, #16]
 8002990:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002994:	eba3 0901 	sub.w	r9, r3, r1
 8002998:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800299c:	1c7b      	adds	r3, r7, #1
 800299e:	444b      	add	r3, r9
 80029a0:	106d      	asrs	r5, r5, #1
 80029a2:	429d      	cmp	r5, r3
 80029a4:	bf38      	it	cc
 80029a6:	461d      	movcc	r5, r3
 80029a8:	0553      	lsls	r3, r2, #21
 80029aa:	d527      	bpl.n	80029fc <__ssputs_r+0x8c>
 80029ac:	4629      	mov	r1, r5
 80029ae:	f7ff ff53 	bl	8002858 <_malloc_r>
 80029b2:	4606      	mov	r6, r0
 80029b4:	b360      	cbz	r0, 8002a10 <__ssputs_r+0xa0>
 80029b6:	464a      	mov	r2, r9
 80029b8:	6921      	ldr	r1, [r4, #16]
 80029ba:	f000 fafd 	bl	8002fb8 <memcpy>
 80029be:	89a3      	ldrh	r3, [r4, #12]
 80029c0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80029c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029c8:	81a3      	strh	r3, [r4, #12]
 80029ca:	6126      	str	r6, [r4, #16]
 80029cc:	444e      	add	r6, r9
 80029ce:	6026      	str	r6, [r4, #0]
 80029d0:	463e      	mov	r6, r7
 80029d2:	6165      	str	r5, [r4, #20]
 80029d4:	eba5 0509 	sub.w	r5, r5, r9
 80029d8:	60a5      	str	r5, [r4, #8]
 80029da:	42be      	cmp	r6, r7
 80029dc:	d900      	bls.n	80029e0 <__ssputs_r+0x70>
 80029de:	463e      	mov	r6, r7
 80029e0:	4632      	mov	r2, r6
 80029e2:	4641      	mov	r1, r8
 80029e4:	6820      	ldr	r0, [r4, #0]
 80029e6:	f000 faaf 	bl	8002f48 <memmove>
 80029ea:	2000      	movs	r0, #0
 80029ec:	68a3      	ldr	r3, [r4, #8]
 80029ee:	1b9b      	subs	r3, r3, r6
 80029f0:	60a3      	str	r3, [r4, #8]
 80029f2:	6823      	ldr	r3, [r4, #0]
 80029f4:	4433      	add	r3, r6
 80029f6:	6023      	str	r3, [r4, #0]
 80029f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80029fc:	462a      	mov	r2, r5
 80029fe:	f000 fae9 	bl	8002fd4 <_realloc_r>
 8002a02:	4606      	mov	r6, r0
 8002a04:	2800      	cmp	r0, #0
 8002a06:	d1e0      	bne.n	80029ca <__ssputs_r+0x5a>
 8002a08:	4650      	mov	r0, sl
 8002a0a:	6921      	ldr	r1, [r4, #16]
 8002a0c:	f7ff febc 	bl	8002788 <_free_r>
 8002a10:	230c      	movs	r3, #12
 8002a12:	f8ca 3000 	str.w	r3, [sl]
 8002a16:	89a3      	ldrh	r3, [r4, #12]
 8002a18:	f04f 30ff 	mov.w	r0, #4294967295
 8002a1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a20:	81a3      	strh	r3, [r4, #12]
 8002a22:	e7e9      	b.n	80029f8 <__ssputs_r+0x88>

08002a24 <_svfiprintf_r>:
 8002a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a28:	4698      	mov	r8, r3
 8002a2a:	898b      	ldrh	r3, [r1, #12]
 8002a2c:	4607      	mov	r7, r0
 8002a2e:	061b      	lsls	r3, r3, #24
 8002a30:	460d      	mov	r5, r1
 8002a32:	4614      	mov	r4, r2
 8002a34:	b09d      	sub	sp, #116	; 0x74
 8002a36:	d50e      	bpl.n	8002a56 <_svfiprintf_r+0x32>
 8002a38:	690b      	ldr	r3, [r1, #16]
 8002a3a:	b963      	cbnz	r3, 8002a56 <_svfiprintf_r+0x32>
 8002a3c:	2140      	movs	r1, #64	; 0x40
 8002a3e:	f7ff ff0b 	bl	8002858 <_malloc_r>
 8002a42:	6028      	str	r0, [r5, #0]
 8002a44:	6128      	str	r0, [r5, #16]
 8002a46:	b920      	cbnz	r0, 8002a52 <_svfiprintf_r+0x2e>
 8002a48:	230c      	movs	r3, #12
 8002a4a:	603b      	str	r3, [r7, #0]
 8002a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a50:	e0d0      	b.n	8002bf4 <_svfiprintf_r+0x1d0>
 8002a52:	2340      	movs	r3, #64	; 0x40
 8002a54:	616b      	str	r3, [r5, #20]
 8002a56:	2300      	movs	r3, #0
 8002a58:	9309      	str	r3, [sp, #36]	; 0x24
 8002a5a:	2320      	movs	r3, #32
 8002a5c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002a60:	2330      	movs	r3, #48	; 0x30
 8002a62:	f04f 0901 	mov.w	r9, #1
 8002a66:	f8cd 800c 	str.w	r8, [sp, #12]
 8002a6a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8002c0c <_svfiprintf_r+0x1e8>
 8002a6e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002a72:	4623      	mov	r3, r4
 8002a74:	469a      	mov	sl, r3
 8002a76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002a7a:	b10a      	cbz	r2, 8002a80 <_svfiprintf_r+0x5c>
 8002a7c:	2a25      	cmp	r2, #37	; 0x25
 8002a7e:	d1f9      	bne.n	8002a74 <_svfiprintf_r+0x50>
 8002a80:	ebba 0b04 	subs.w	fp, sl, r4
 8002a84:	d00b      	beq.n	8002a9e <_svfiprintf_r+0x7a>
 8002a86:	465b      	mov	r3, fp
 8002a88:	4622      	mov	r2, r4
 8002a8a:	4629      	mov	r1, r5
 8002a8c:	4638      	mov	r0, r7
 8002a8e:	f7ff ff6f 	bl	8002970 <__ssputs_r>
 8002a92:	3001      	adds	r0, #1
 8002a94:	f000 80a9 	beq.w	8002bea <_svfiprintf_r+0x1c6>
 8002a98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002a9a:	445a      	add	r2, fp
 8002a9c:	9209      	str	r2, [sp, #36]	; 0x24
 8002a9e:	f89a 3000 	ldrb.w	r3, [sl]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	f000 80a1 	beq.w	8002bea <_svfiprintf_r+0x1c6>
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	f04f 32ff 	mov.w	r2, #4294967295
 8002aae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002ab2:	f10a 0a01 	add.w	sl, sl, #1
 8002ab6:	9304      	str	r3, [sp, #16]
 8002ab8:	9307      	str	r3, [sp, #28]
 8002aba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002abe:	931a      	str	r3, [sp, #104]	; 0x68
 8002ac0:	4654      	mov	r4, sl
 8002ac2:	2205      	movs	r2, #5
 8002ac4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ac8:	4850      	ldr	r0, [pc, #320]	; (8002c0c <_svfiprintf_r+0x1e8>)
 8002aca:	f000 fa67 	bl	8002f9c <memchr>
 8002ace:	9a04      	ldr	r2, [sp, #16]
 8002ad0:	b9d8      	cbnz	r0, 8002b0a <_svfiprintf_r+0xe6>
 8002ad2:	06d0      	lsls	r0, r2, #27
 8002ad4:	bf44      	itt	mi
 8002ad6:	2320      	movmi	r3, #32
 8002ad8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002adc:	0711      	lsls	r1, r2, #28
 8002ade:	bf44      	itt	mi
 8002ae0:	232b      	movmi	r3, #43	; 0x2b
 8002ae2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002ae6:	f89a 3000 	ldrb.w	r3, [sl]
 8002aea:	2b2a      	cmp	r3, #42	; 0x2a
 8002aec:	d015      	beq.n	8002b1a <_svfiprintf_r+0xf6>
 8002aee:	4654      	mov	r4, sl
 8002af0:	2000      	movs	r0, #0
 8002af2:	f04f 0c0a 	mov.w	ip, #10
 8002af6:	9a07      	ldr	r2, [sp, #28]
 8002af8:	4621      	mov	r1, r4
 8002afa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002afe:	3b30      	subs	r3, #48	; 0x30
 8002b00:	2b09      	cmp	r3, #9
 8002b02:	d94d      	bls.n	8002ba0 <_svfiprintf_r+0x17c>
 8002b04:	b1b0      	cbz	r0, 8002b34 <_svfiprintf_r+0x110>
 8002b06:	9207      	str	r2, [sp, #28]
 8002b08:	e014      	b.n	8002b34 <_svfiprintf_r+0x110>
 8002b0a:	eba0 0308 	sub.w	r3, r0, r8
 8002b0e:	fa09 f303 	lsl.w	r3, r9, r3
 8002b12:	4313      	orrs	r3, r2
 8002b14:	46a2      	mov	sl, r4
 8002b16:	9304      	str	r3, [sp, #16]
 8002b18:	e7d2      	b.n	8002ac0 <_svfiprintf_r+0x9c>
 8002b1a:	9b03      	ldr	r3, [sp, #12]
 8002b1c:	1d19      	adds	r1, r3, #4
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	9103      	str	r1, [sp, #12]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	bfbb      	ittet	lt
 8002b26:	425b      	neglt	r3, r3
 8002b28:	f042 0202 	orrlt.w	r2, r2, #2
 8002b2c:	9307      	strge	r3, [sp, #28]
 8002b2e:	9307      	strlt	r3, [sp, #28]
 8002b30:	bfb8      	it	lt
 8002b32:	9204      	strlt	r2, [sp, #16]
 8002b34:	7823      	ldrb	r3, [r4, #0]
 8002b36:	2b2e      	cmp	r3, #46	; 0x2e
 8002b38:	d10c      	bne.n	8002b54 <_svfiprintf_r+0x130>
 8002b3a:	7863      	ldrb	r3, [r4, #1]
 8002b3c:	2b2a      	cmp	r3, #42	; 0x2a
 8002b3e:	d134      	bne.n	8002baa <_svfiprintf_r+0x186>
 8002b40:	9b03      	ldr	r3, [sp, #12]
 8002b42:	3402      	adds	r4, #2
 8002b44:	1d1a      	adds	r2, r3, #4
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	9203      	str	r2, [sp, #12]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	bfb8      	it	lt
 8002b4e:	f04f 33ff 	movlt.w	r3, #4294967295
 8002b52:	9305      	str	r3, [sp, #20]
 8002b54:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8002c10 <_svfiprintf_r+0x1ec>
 8002b58:	2203      	movs	r2, #3
 8002b5a:	4650      	mov	r0, sl
 8002b5c:	7821      	ldrb	r1, [r4, #0]
 8002b5e:	f000 fa1d 	bl	8002f9c <memchr>
 8002b62:	b138      	cbz	r0, 8002b74 <_svfiprintf_r+0x150>
 8002b64:	2240      	movs	r2, #64	; 0x40
 8002b66:	9b04      	ldr	r3, [sp, #16]
 8002b68:	eba0 000a 	sub.w	r0, r0, sl
 8002b6c:	4082      	lsls	r2, r0
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	3401      	adds	r4, #1
 8002b72:	9304      	str	r3, [sp, #16]
 8002b74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b78:	2206      	movs	r2, #6
 8002b7a:	4826      	ldr	r0, [pc, #152]	; (8002c14 <_svfiprintf_r+0x1f0>)
 8002b7c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002b80:	f000 fa0c 	bl	8002f9c <memchr>
 8002b84:	2800      	cmp	r0, #0
 8002b86:	d038      	beq.n	8002bfa <_svfiprintf_r+0x1d6>
 8002b88:	4b23      	ldr	r3, [pc, #140]	; (8002c18 <_svfiprintf_r+0x1f4>)
 8002b8a:	bb1b      	cbnz	r3, 8002bd4 <_svfiprintf_r+0x1b0>
 8002b8c:	9b03      	ldr	r3, [sp, #12]
 8002b8e:	3307      	adds	r3, #7
 8002b90:	f023 0307 	bic.w	r3, r3, #7
 8002b94:	3308      	adds	r3, #8
 8002b96:	9303      	str	r3, [sp, #12]
 8002b98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002b9a:	4433      	add	r3, r6
 8002b9c:	9309      	str	r3, [sp, #36]	; 0x24
 8002b9e:	e768      	b.n	8002a72 <_svfiprintf_r+0x4e>
 8002ba0:	460c      	mov	r4, r1
 8002ba2:	2001      	movs	r0, #1
 8002ba4:	fb0c 3202 	mla	r2, ip, r2, r3
 8002ba8:	e7a6      	b.n	8002af8 <_svfiprintf_r+0xd4>
 8002baa:	2300      	movs	r3, #0
 8002bac:	f04f 0c0a 	mov.w	ip, #10
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	3401      	adds	r4, #1
 8002bb4:	9305      	str	r3, [sp, #20]
 8002bb6:	4620      	mov	r0, r4
 8002bb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002bbc:	3a30      	subs	r2, #48	; 0x30
 8002bbe:	2a09      	cmp	r2, #9
 8002bc0:	d903      	bls.n	8002bca <_svfiprintf_r+0x1a6>
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d0c6      	beq.n	8002b54 <_svfiprintf_r+0x130>
 8002bc6:	9105      	str	r1, [sp, #20]
 8002bc8:	e7c4      	b.n	8002b54 <_svfiprintf_r+0x130>
 8002bca:	4604      	mov	r4, r0
 8002bcc:	2301      	movs	r3, #1
 8002bce:	fb0c 2101 	mla	r1, ip, r1, r2
 8002bd2:	e7f0      	b.n	8002bb6 <_svfiprintf_r+0x192>
 8002bd4:	ab03      	add	r3, sp, #12
 8002bd6:	9300      	str	r3, [sp, #0]
 8002bd8:	462a      	mov	r2, r5
 8002bda:	4638      	mov	r0, r7
 8002bdc:	4b0f      	ldr	r3, [pc, #60]	; (8002c1c <_svfiprintf_r+0x1f8>)
 8002bde:	a904      	add	r1, sp, #16
 8002be0:	f3af 8000 	nop.w
 8002be4:	1c42      	adds	r2, r0, #1
 8002be6:	4606      	mov	r6, r0
 8002be8:	d1d6      	bne.n	8002b98 <_svfiprintf_r+0x174>
 8002bea:	89ab      	ldrh	r3, [r5, #12]
 8002bec:	065b      	lsls	r3, r3, #25
 8002bee:	f53f af2d 	bmi.w	8002a4c <_svfiprintf_r+0x28>
 8002bf2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002bf4:	b01d      	add	sp, #116	; 0x74
 8002bf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002bfa:	ab03      	add	r3, sp, #12
 8002bfc:	9300      	str	r3, [sp, #0]
 8002bfe:	462a      	mov	r2, r5
 8002c00:	4638      	mov	r0, r7
 8002c02:	4b06      	ldr	r3, [pc, #24]	; (8002c1c <_svfiprintf_r+0x1f8>)
 8002c04:	a904      	add	r1, sp, #16
 8002c06:	f000 f87d 	bl	8002d04 <_printf_i>
 8002c0a:	e7eb      	b.n	8002be4 <_svfiprintf_r+0x1c0>
 8002c0c:	08003122 	.word	0x08003122
 8002c10:	08003128 	.word	0x08003128
 8002c14:	0800312c 	.word	0x0800312c
 8002c18:	00000000 	.word	0x00000000
 8002c1c:	08002971 	.word	0x08002971

08002c20 <_printf_common>:
 8002c20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c24:	4616      	mov	r6, r2
 8002c26:	4699      	mov	r9, r3
 8002c28:	688a      	ldr	r2, [r1, #8]
 8002c2a:	690b      	ldr	r3, [r1, #16]
 8002c2c:	4607      	mov	r7, r0
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	bfb8      	it	lt
 8002c32:	4613      	movlt	r3, r2
 8002c34:	6033      	str	r3, [r6, #0]
 8002c36:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002c3a:	460c      	mov	r4, r1
 8002c3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002c40:	b10a      	cbz	r2, 8002c46 <_printf_common+0x26>
 8002c42:	3301      	adds	r3, #1
 8002c44:	6033      	str	r3, [r6, #0]
 8002c46:	6823      	ldr	r3, [r4, #0]
 8002c48:	0699      	lsls	r1, r3, #26
 8002c4a:	bf42      	ittt	mi
 8002c4c:	6833      	ldrmi	r3, [r6, #0]
 8002c4e:	3302      	addmi	r3, #2
 8002c50:	6033      	strmi	r3, [r6, #0]
 8002c52:	6825      	ldr	r5, [r4, #0]
 8002c54:	f015 0506 	ands.w	r5, r5, #6
 8002c58:	d106      	bne.n	8002c68 <_printf_common+0x48>
 8002c5a:	f104 0a19 	add.w	sl, r4, #25
 8002c5e:	68e3      	ldr	r3, [r4, #12]
 8002c60:	6832      	ldr	r2, [r6, #0]
 8002c62:	1a9b      	subs	r3, r3, r2
 8002c64:	42ab      	cmp	r3, r5
 8002c66:	dc2b      	bgt.n	8002cc0 <_printf_common+0xa0>
 8002c68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002c6c:	1e13      	subs	r3, r2, #0
 8002c6e:	6822      	ldr	r2, [r4, #0]
 8002c70:	bf18      	it	ne
 8002c72:	2301      	movne	r3, #1
 8002c74:	0692      	lsls	r2, r2, #26
 8002c76:	d430      	bmi.n	8002cda <_printf_common+0xba>
 8002c78:	4649      	mov	r1, r9
 8002c7a:	4638      	mov	r0, r7
 8002c7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002c80:	47c0      	blx	r8
 8002c82:	3001      	adds	r0, #1
 8002c84:	d023      	beq.n	8002cce <_printf_common+0xae>
 8002c86:	6823      	ldr	r3, [r4, #0]
 8002c88:	6922      	ldr	r2, [r4, #16]
 8002c8a:	f003 0306 	and.w	r3, r3, #6
 8002c8e:	2b04      	cmp	r3, #4
 8002c90:	bf14      	ite	ne
 8002c92:	2500      	movne	r5, #0
 8002c94:	6833      	ldreq	r3, [r6, #0]
 8002c96:	f04f 0600 	mov.w	r6, #0
 8002c9a:	bf08      	it	eq
 8002c9c:	68e5      	ldreq	r5, [r4, #12]
 8002c9e:	f104 041a 	add.w	r4, r4, #26
 8002ca2:	bf08      	it	eq
 8002ca4:	1aed      	subeq	r5, r5, r3
 8002ca6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002caa:	bf08      	it	eq
 8002cac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	bfc4      	itt	gt
 8002cb4:	1a9b      	subgt	r3, r3, r2
 8002cb6:	18ed      	addgt	r5, r5, r3
 8002cb8:	42b5      	cmp	r5, r6
 8002cba:	d11a      	bne.n	8002cf2 <_printf_common+0xd2>
 8002cbc:	2000      	movs	r0, #0
 8002cbe:	e008      	b.n	8002cd2 <_printf_common+0xb2>
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	4652      	mov	r2, sl
 8002cc4:	4649      	mov	r1, r9
 8002cc6:	4638      	mov	r0, r7
 8002cc8:	47c0      	blx	r8
 8002cca:	3001      	adds	r0, #1
 8002ccc:	d103      	bne.n	8002cd6 <_printf_common+0xb6>
 8002cce:	f04f 30ff 	mov.w	r0, #4294967295
 8002cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002cd6:	3501      	adds	r5, #1
 8002cd8:	e7c1      	b.n	8002c5e <_printf_common+0x3e>
 8002cda:	2030      	movs	r0, #48	; 0x30
 8002cdc:	18e1      	adds	r1, r4, r3
 8002cde:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002ce2:	1c5a      	adds	r2, r3, #1
 8002ce4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002ce8:	4422      	add	r2, r4
 8002cea:	3302      	adds	r3, #2
 8002cec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002cf0:	e7c2      	b.n	8002c78 <_printf_common+0x58>
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	4622      	mov	r2, r4
 8002cf6:	4649      	mov	r1, r9
 8002cf8:	4638      	mov	r0, r7
 8002cfa:	47c0      	blx	r8
 8002cfc:	3001      	adds	r0, #1
 8002cfe:	d0e6      	beq.n	8002cce <_printf_common+0xae>
 8002d00:	3601      	adds	r6, #1
 8002d02:	e7d9      	b.n	8002cb8 <_printf_common+0x98>

08002d04 <_printf_i>:
 8002d04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002d08:	7e0f      	ldrb	r7, [r1, #24]
 8002d0a:	4691      	mov	r9, r2
 8002d0c:	2f78      	cmp	r7, #120	; 0x78
 8002d0e:	4680      	mov	r8, r0
 8002d10:	460c      	mov	r4, r1
 8002d12:	469a      	mov	sl, r3
 8002d14:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002d16:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002d1a:	d807      	bhi.n	8002d2c <_printf_i+0x28>
 8002d1c:	2f62      	cmp	r7, #98	; 0x62
 8002d1e:	d80a      	bhi.n	8002d36 <_printf_i+0x32>
 8002d20:	2f00      	cmp	r7, #0
 8002d22:	f000 80d5 	beq.w	8002ed0 <_printf_i+0x1cc>
 8002d26:	2f58      	cmp	r7, #88	; 0x58
 8002d28:	f000 80c1 	beq.w	8002eae <_printf_i+0x1aa>
 8002d2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002d30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002d34:	e03a      	b.n	8002dac <_printf_i+0xa8>
 8002d36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002d3a:	2b15      	cmp	r3, #21
 8002d3c:	d8f6      	bhi.n	8002d2c <_printf_i+0x28>
 8002d3e:	a101      	add	r1, pc, #4	; (adr r1, 8002d44 <_printf_i+0x40>)
 8002d40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002d44:	08002d9d 	.word	0x08002d9d
 8002d48:	08002db1 	.word	0x08002db1
 8002d4c:	08002d2d 	.word	0x08002d2d
 8002d50:	08002d2d 	.word	0x08002d2d
 8002d54:	08002d2d 	.word	0x08002d2d
 8002d58:	08002d2d 	.word	0x08002d2d
 8002d5c:	08002db1 	.word	0x08002db1
 8002d60:	08002d2d 	.word	0x08002d2d
 8002d64:	08002d2d 	.word	0x08002d2d
 8002d68:	08002d2d 	.word	0x08002d2d
 8002d6c:	08002d2d 	.word	0x08002d2d
 8002d70:	08002eb7 	.word	0x08002eb7
 8002d74:	08002ddd 	.word	0x08002ddd
 8002d78:	08002e71 	.word	0x08002e71
 8002d7c:	08002d2d 	.word	0x08002d2d
 8002d80:	08002d2d 	.word	0x08002d2d
 8002d84:	08002ed9 	.word	0x08002ed9
 8002d88:	08002d2d 	.word	0x08002d2d
 8002d8c:	08002ddd 	.word	0x08002ddd
 8002d90:	08002d2d 	.word	0x08002d2d
 8002d94:	08002d2d 	.word	0x08002d2d
 8002d98:	08002e79 	.word	0x08002e79
 8002d9c:	682b      	ldr	r3, [r5, #0]
 8002d9e:	1d1a      	adds	r2, r3, #4
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	602a      	str	r2, [r5, #0]
 8002da4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002da8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002dac:	2301      	movs	r3, #1
 8002dae:	e0a0      	b.n	8002ef2 <_printf_i+0x1ee>
 8002db0:	6820      	ldr	r0, [r4, #0]
 8002db2:	682b      	ldr	r3, [r5, #0]
 8002db4:	0607      	lsls	r7, r0, #24
 8002db6:	f103 0104 	add.w	r1, r3, #4
 8002dba:	6029      	str	r1, [r5, #0]
 8002dbc:	d501      	bpl.n	8002dc2 <_printf_i+0xbe>
 8002dbe:	681e      	ldr	r6, [r3, #0]
 8002dc0:	e003      	b.n	8002dca <_printf_i+0xc6>
 8002dc2:	0646      	lsls	r6, r0, #25
 8002dc4:	d5fb      	bpl.n	8002dbe <_printf_i+0xba>
 8002dc6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002dca:	2e00      	cmp	r6, #0
 8002dcc:	da03      	bge.n	8002dd6 <_printf_i+0xd2>
 8002dce:	232d      	movs	r3, #45	; 0x2d
 8002dd0:	4276      	negs	r6, r6
 8002dd2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002dd6:	230a      	movs	r3, #10
 8002dd8:	4859      	ldr	r0, [pc, #356]	; (8002f40 <_printf_i+0x23c>)
 8002dda:	e012      	b.n	8002e02 <_printf_i+0xfe>
 8002ddc:	682b      	ldr	r3, [r5, #0]
 8002dde:	6820      	ldr	r0, [r4, #0]
 8002de0:	1d19      	adds	r1, r3, #4
 8002de2:	6029      	str	r1, [r5, #0]
 8002de4:	0605      	lsls	r5, r0, #24
 8002de6:	d501      	bpl.n	8002dec <_printf_i+0xe8>
 8002de8:	681e      	ldr	r6, [r3, #0]
 8002dea:	e002      	b.n	8002df2 <_printf_i+0xee>
 8002dec:	0641      	lsls	r1, r0, #25
 8002dee:	d5fb      	bpl.n	8002de8 <_printf_i+0xe4>
 8002df0:	881e      	ldrh	r6, [r3, #0]
 8002df2:	2f6f      	cmp	r7, #111	; 0x6f
 8002df4:	bf0c      	ite	eq
 8002df6:	2308      	moveq	r3, #8
 8002df8:	230a      	movne	r3, #10
 8002dfa:	4851      	ldr	r0, [pc, #324]	; (8002f40 <_printf_i+0x23c>)
 8002dfc:	2100      	movs	r1, #0
 8002dfe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002e02:	6865      	ldr	r5, [r4, #4]
 8002e04:	2d00      	cmp	r5, #0
 8002e06:	bfa8      	it	ge
 8002e08:	6821      	ldrge	r1, [r4, #0]
 8002e0a:	60a5      	str	r5, [r4, #8]
 8002e0c:	bfa4      	itt	ge
 8002e0e:	f021 0104 	bicge.w	r1, r1, #4
 8002e12:	6021      	strge	r1, [r4, #0]
 8002e14:	b90e      	cbnz	r6, 8002e1a <_printf_i+0x116>
 8002e16:	2d00      	cmp	r5, #0
 8002e18:	d04b      	beq.n	8002eb2 <_printf_i+0x1ae>
 8002e1a:	4615      	mov	r5, r2
 8002e1c:	fbb6 f1f3 	udiv	r1, r6, r3
 8002e20:	fb03 6711 	mls	r7, r3, r1, r6
 8002e24:	5dc7      	ldrb	r7, [r0, r7]
 8002e26:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002e2a:	4637      	mov	r7, r6
 8002e2c:	42bb      	cmp	r3, r7
 8002e2e:	460e      	mov	r6, r1
 8002e30:	d9f4      	bls.n	8002e1c <_printf_i+0x118>
 8002e32:	2b08      	cmp	r3, #8
 8002e34:	d10b      	bne.n	8002e4e <_printf_i+0x14a>
 8002e36:	6823      	ldr	r3, [r4, #0]
 8002e38:	07de      	lsls	r6, r3, #31
 8002e3a:	d508      	bpl.n	8002e4e <_printf_i+0x14a>
 8002e3c:	6923      	ldr	r3, [r4, #16]
 8002e3e:	6861      	ldr	r1, [r4, #4]
 8002e40:	4299      	cmp	r1, r3
 8002e42:	bfde      	ittt	le
 8002e44:	2330      	movle	r3, #48	; 0x30
 8002e46:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002e4a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002e4e:	1b52      	subs	r2, r2, r5
 8002e50:	6122      	str	r2, [r4, #16]
 8002e52:	464b      	mov	r3, r9
 8002e54:	4621      	mov	r1, r4
 8002e56:	4640      	mov	r0, r8
 8002e58:	f8cd a000 	str.w	sl, [sp]
 8002e5c:	aa03      	add	r2, sp, #12
 8002e5e:	f7ff fedf 	bl	8002c20 <_printf_common>
 8002e62:	3001      	adds	r0, #1
 8002e64:	d14a      	bne.n	8002efc <_printf_i+0x1f8>
 8002e66:	f04f 30ff 	mov.w	r0, #4294967295
 8002e6a:	b004      	add	sp, #16
 8002e6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e70:	6823      	ldr	r3, [r4, #0]
 8002e72:	f043 0320 	orr.w	r3, r3, #32
 8002e76:	6023      	str	r3, [r4, #0]
 8002e78:	2778      	movs	r7, #120	; 0x78
 8002e7a:	4832      	ldr	r0, [pc, #200]	; (8002f44 <_printf_i+0x240>)
 8002e7c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002e80:	6823      	ldr	r3, [r4, #0]
 8002e82:	6829      	ldr	r1, [r5, #0]
 8002e84:	061f      	lsls	r7, r3, #24
 8002e86:	f851 6b04 	ldr.w	r6, [r1], #4
 8002e8a:	d402      	bmi.n	8002e92 <_printf_i+0x18e>
 8002e8c:	065f      	lsls	r7, r3, #25
 8002e8e:	bf48      	it	mi
 8002e90:	b2b6      	uxthmi	r6, r6
 8002e92:	07df      	lsls	r7, r3, #31
 8002e94:	bf48      	it	mi
 8002e96:	f043 0320 	orrmi.w	r3, r3, #32
 8002e9a:	6029      	str	r1, [r5, #0]
 8002e9c:	bf48      	it	mi
 8002e9e:	6023      	strmi	r3, [r4, #0]
 8002ea0:	b91e      	cbnz	r6, 8002eaa <_printf_i+0x1a6>
 8002ea2:	6823      	ldr	r3, [r4, #0]
 8002ea4:	f023 0320 	bic.w	r3, r3, #32
 8002ea8:	6023      	str	r3, [r4, #0]
 8002eaa:	2310      	movs	r3, #16
 8002eac:	e7a6      	b.n	8002dfc <_printf_i+0xf8>
 8002eae:	4824      	ldr	r0, [pc, #144]	; (8002f40 <_printf_i+0x23c>)
 8002eb0:	e7e4      	b.n	8002e7c <_printf_i+0x178>
 8002eb2:	4615      	mov	r5, r2
 8002eb4:	e7bd      	b.n	8002e32 <_printf_i+0x12e>
 8002eb6:	682b      	ldr	r3, [r5, #0]
 8002eb8:	6826      	ldr	r6, [r4, #0]
 8002eba:	1d18      	adds	r0, r3, #4
 8002ebc:	6961      	ldr	r1, [r4, #20]
 8002ebe:	6028      	str	r0, [r5, #0]
 8002ec0:	0635      	lsls	r5, r6, #24
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	d501      	bpl.n	8002eca <_printf_i+0x1c6>
 8002ec6:	6019      	str	r1, [r3, #0]
 8002ec8:	e002      	b.n	8002ed0 <_printf_i+0x1cc>
 8002eca:	0670      	lsls	r0, r6, #25
 8002ecc:	d5fb      	bpl.n	8002ec6 <_printf_i+0x1c2>
 8002ece:	8019      	strh	r1, [r3, #0]
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	4615      	mov	r5, r2
 8002ed4:	6123      	str	r3, [r4, #16]
 8002ed6:	e7bc      	b.n	8002e52 <_printf_i+0x14e>
 8002ed8:	682b      	ldr	r3, [r5, #0]
 8002eda:	2100      	movs	r1, #0
 8002edc:	1d1a      	adds	r2, r3, #4
 8002ede:	602a      	str	r2, [r5, #0]
 8002ee0:	681d      	ldr	r5, [r3, #0]
 8002ee2:	6862      	ldr	r2, [r4, #4]
 8002ee4:	4628      	mov	r0, r5
 8002ee6:	f000 f859 	bl	8002f9c <memchr>
 8002eea:	b108      	cbz	r0, 8002ef0 <_printf_i+0x1ec>
 8002eec:	1b40      	subs	r0, r0, r5
 8002eee:	6060      	str	r0, [r4, #4]
 8002ef0:	6863      	ldr	r3, [r4, #4]
 8002ef2:	6123      	str	r3, [r4, #16]
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002efa:	e7aa      	b.n	8002e52 <_printf_i+0x14e>
 8002efc:	462a      	mov	r2, r5
 8002efe:	4649      	mov	r1, r9
 8002f00:	4640      	mov	r0, r8
 8002f02:	6923      	ldr	r3, [r4, #16]
 8002f04:	47d0      	blx	sl
 8002f06:	3001      	adds	r0, #1
 8002f08:	d0ad      	beq.n	8002e66 <_printf_i+0x162>
 8002f0a:	6823      	ldr	r3, [r4, #0]
 8002f0c:	079b      	lsls	r3, r3, #30
 8002f0e:	d413      	bmi.n	8002f38 <_printf_i+0x234>
 8002f10:	68e0      	ldr	r0, [r4, #12]
 8002f12:	9b03      	ldr	r3, [sp, #12]
 8002f14:	4298      	cmp	r0, r3
 8002f16:	bfb8      	it	lt
 8002f18:	4618      	movlt	r0, r3
 8002f1a:	e7a6      	b.n	8002e6a <_printf_i+0x166>
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	4632      	mov	r2, r6
 8002f20:	4649      	mov	r1, r9
 8002f22:	4640      	mov	r0, r8
 8002f24:	47d0      	blx	sl
 8002f26:	3001      	adds	r0, #1
 8002f28:	d09d      	beq.n	8002e66 <_printf_i+0x162>
 8002f2a:	3501      	adds	r5, #1
 8002f2c:	68e3      	ldr	r3, [r4, #12]
 8002f2e:	9903      	ldr	r1, [sp, #12]
 8002f30:	1a5b      	subs	r3, r3, r1
 8002f32:	42ab      	cmp	r3, r5
 8002f34:	dcf2      	bgt.n	8002f1c <_printf_i+0x218>
 8002f36:	e7eb      	b.n	8002f10 <_printf_i+0x20c>
 8002f38:	2500      	movs	r5, #0
 8002f3a:	f104 0619 	add.w	r6, r4, #25
 8002f3e:	e7f5      	b.n	8002f2c <_printf_i+0x228>
 8002f40:	08003133 	.word	0x08003133
 8002f44:	08003144 	.word	0x08003144

08002f48 <memmove>:
 8002f48:	4288      	cmp	r0, r1
 8002f4a:	b510      	push	{r4, lr}
 8002f4c:	eb01 0402 	add.w	r4, r1, r2
 8002f50:	d902      	bls.n	8002f58 <memmove+0x10>
 8002f52:	4284      	cmp	r4, r0
 8002f54:	4623      	mov	r3, r4
 8002f56:	d807      	bhi.n	8002f68 <memmove+0x20>
 8002f58:	1e43      	subs	r3, r0, #1
 8002f5a:	42a1      	cmp	r1, r4
 8002f5c:	d008      	beq.n	8002f70 <memmove+0x28>
 8002f5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002f62:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002f66:	e7f8      	b.n	8002f5a <memmove+0x12>
 8002f68:	4601      	mov	r1, r0
 8002f6a:	4402      	add	r2, r0
 8002f6c:	428a      	cmp	r2, r1
 8002f6e:	d100      	bne.n	8002f72 <memmove+0x2a>
 8002f70:	bd10      	pop	{r4, pc}
 8002f72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002f76:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002f7a:	e7f7      	b.n	8002f6c <memmove+0x24>

08002f7c <_sbrk_r>:
 8002f7c:	b538      	push	{r3, r4, r5, lr}
 8002f7e:	2300      	movs	r3, #0
 8002f80:	4d05      	ldr	r5, [pc, #20]	; (8002f98 <_sbrk_r+0x1c>)
 8002f82:	4604      	mov	r4, r0
 8002f84:	4608      	mov	r0, r1
 8002f86:	602b      	str	r3, [r5, #0]
 8002f88:	f7fd fc84 	bl	8000894 <_sbrk>
 8002f8c:	1c43      	adds	r3, r0, #1
 8002f8e:	d102      	bne.n	8002f96 <_sbrk_r+0x1a>
 8002f90:	682b      	ldr	r3, [r5, #0]
 8002f92:	b103      	cbz	r3, 8002f96 <_sbrk_r+0x1a>
 8002f94:	6023      	str	r3, [r4, #0]
 8002f96:	bd38      	pop	{r3, r4, r5, pc}
 8002f98:	2000028c 	.word	0x2000028c

08002f9c <memchr>:
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	b510      	push	{r4, lr}
 8002fa0:	b2c9      	uxtb	r1, r1
 8002fa2:	4402      	add	r2, r0
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	d101      	bne.n	8002fae <memchr+0x12>
 8002faa:	2000      	movs	r0, #0
 8002fac:	e003      	b.n	8002fb6 <memchr+0x1a>
 8002fae:	7804      	ldrb	r4, [r0, #0]
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	428c      	cmp	r4, r1
 8002fb4:	d1f6      	bne.n	8002fa4 <memchr+0x8>
 8002fb6:	bd10      	pop	{r4, pc}

08002fb8 <memcpy>:
 8002fb8:	440a      	add	r2, r1
 8002fba:	4291      	cmp	r1, r2
 8002fbc:	f100 33ff 	add.w	r3, r0, #4294967295
 8002fc0:	d100      	bne.n	8002fc4 <memcpy+0xc>
 8002fc2:	4770      	bx	lr
 8002fc4:	b510      	push	{r4, lr}
 8002fc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002fca:	4291      	cmp	r1, r2
 8002fcc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002fd0:	d1f9      	bne.n	8002fc6 <memcpy+0xe>
 8002fd2:	bd10      	pop	{r4, pc}

08002fd4 <_realloc_r>:
 8002fd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002fd8:	4680      	mov	r8, r0
 8002fda:	4614      	mov	r4, r2
 8002fdc:	460e      	mov	r6, r1
 8002fde:	b921      	cbnz	r1, 8002fea <_realloc_r+0x16>
 8002fe0:	4611      	mov	r1, r2
 8002fe2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002fe6:	f7ff bc37 	b.w	8002858 <_malloc_r>
 8002fea:	b92a      	cbnz	r2, 8002ff8 <_realloc_r+0x24>
 8002fec:	f7ff fbcc 	bl	8002788 <_free_r>
 8002ff0:	4625      	mov	r5, r4
 8002ff2:	4628      	mov	r0, r5
 8002ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002ff8:	f000 f81b 	bl	8003032 <_malloc_usable_size_r>
 8002ffc:	4284      	cmp	r4, r0
 8002ffe:	4607      	mov	r7, r0
 8003000:	d802      	bhi.n	8003008 <_realloc_r+0x34>
 8003002:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003006:	d812      	bhi.n	800302e <_realloc_r+0x5a>
 8003008:	4621      	mov	r1, r4
 800300a:	4640      	mov	r0, r8
 800300c:	f7ff fc24 	bl	8002858 <_malloc_r>
 8003010:	4605      	mov	r5, r0
 8003012:	2800      	cmp	r0, #0
 8003014:	d0ed      	beq.n	8002ff2 <_realloc_r+0x1e>
 8003016:	42bc      	cmp	r4, r7
 8003018:	4622      	mov	r2, r4
 800301a:	4631      	mov	r1, r6
 800301c:	bf28      	it	cs
 800301e:	463a      	movcs	r2, r7
 8003020:	f7ff ffca 	bl	8002fb8 <memcpy>
 8003024:	4631      	mov	r1, r6
 8003026:	4640      	mov	r0, r8
 8003028:	f7ff fbae 	bl	8002788 <_free_r>
 800302c:	e7e1      	b.n	8002ff2 <_realloc_r+0x1e>
 800302e:	4635      	mov	r5, r6
 8003030:	e7df      	b.n	8002ff2 <_realloc_r+0x1e>

08003032 <_malloc_usable_size_r>:
 8003032:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003036:	1f18      	subs	r0, r3, #4
 8003038:	2b00      	cmp	r3, #0
 800303a:	bfbc      	itt	lt
 800303c:	580b      	ldrlt	r3, [r1, r0]
 800303e:	18c0      	addlt	r0, r0, r3
 8003040:	4770      	bx	lr
	...

08003044 <_init>:
 8003044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003046:	bf00      	nop
 8003048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800304a:	bc08      	pop	{r3}
 800304c:	469e      	mov	lr, r3
 800304e:	4770      	bx	lr

08003050 <_fini>:
 8003050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003052:	bf00      	nop
 8003054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003056:	bc08      	pop	{r3}
 8003058:	469e      	mov	lr, r3
 800305a:	4770      	bx	lr
