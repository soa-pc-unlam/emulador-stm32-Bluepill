
freertos_multithread_queue.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c70  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  08004d80  08004d80  00014d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f1c  08004f1c  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08004f1c  08004f1c  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004f1c  08004f1c  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f1c  08004f1c  00014f1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f20  08004f20  00014f20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08004f24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003de4  20000060  08004f84  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003e44  08004f84  00023e44  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f283  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000028ff  00000000  00000000  0002f34f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c68  00000000  00000000  00031c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000097c  00000000  00000000  000328b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000185dd  00000000  00000000  00033234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ebcd  00000000  00000000  0004b811  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008a6f1  00000000  00000000  0005a3de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000347c  00000000  00000000  000e4ad0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009e  00000000  00000000  000e7f4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	08004d68 	.word	0x08004d68

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	08004d68 	.word	0x08004d68

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	; (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	; (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	; 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	2000007c 	.word	0x2000007c
 800017c:	2000011c 	.word	0x2000011c

08000180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000180:	b5b0      	push	{r4, r5, r7, lr}
 8000182:	b0ae      	sub	sp, #184	; 0xb8
 8000184:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000186:	f000 fb77 	bl	8000878 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800018a:	f000 f8b9 	bl	8000300 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800018e:	f000 f91d 	bl	80003cc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000192:	f000 f8f1 	bl	8000378 <MX_USART1_UART_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of serial_tx_wait_sem */
  osSemaphoreDef(serial_tx_wait_sem);
 8000196:	2300      	movs	r3, #0
 8000198:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800019c:	2300      	movs	r3, #0
 800019e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  serial_tx_wait_semHandle = osSemaphoreCreate(osSemaphore(serial_tx_wait_sem), 1);
 80001a2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80001a6:	2101      	movs	r1, #1
 80001a8:	4618      	mov	r0, r3
 80001aa:	f002 f97d 	bl	80024a8 <osSemaphoreCreate>
 80001ae:	4603      	mov	r3, r0
 80001b0:	4a42      	ldr	r2, [pc, #264]	; (80002bc <main+0x13c>)
 80001b2:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of serial_str_queue */
  osMessageQStaticDef(serial_str_queue, 10, char, serial_str_queueBuffer, &serial_str_queueControlBlock);
 80001b4:	4b42      	ldr	r3, [pc, #264]	; (80002c0 <main+0x140>)
 80001b6:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 80001ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80001bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  serial_str_queueHandle = osMessageCreate(osMessageQ(serial_str_queue), NULL);
 80001c0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80001c4:	2100      	movs	r1, #0
 80001c6:	4618      	mov	r0, r3
 80001c8:	f002 f9a0 	bl	800250c <osMessageCreate>
 80001cc:	4603      	mov	r3, r0
 80001ce:	4a3d      	ldr	r2, [pc, #244]	; (80002c4 <main+0x144>)
 80001d0:	6013      	str	r3, [r2, #0]

  /* definition and creation of serial_rx_queue */
  osMessageQStaticDef(serial_rx_queue, 1, char, serial_rx_queueBuffer, &serial_rx_queueControlBlock);
 80001d2:	4b3d      	ldr	r3, [pc, #244]	; (80002c8 <main+0x148>)
 80001d4:	f107 0490 	add.w	r4, r7, #144	; 0x90
 80001d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80001da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  serial_rx_queueHandle = osMessageCreate(osMessageQ(serial_rx_queue), NULL);
 80001de:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80001e2:	2100      	movs	r1, #0
 80001e4:	4618      	mov	r0, r3
 80001e6:	f002 f991 	bl	800250c <osMessageCreate>
 80001ea:	4603      	mov	r3, r0
 80001ec:	4a37      	ldr	r2, [pc, #220]	; (80002cc <main+0x14c>)
 80001ee:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Serial_Write_1 */
  osThreadStaticDef(Serial_Write_1, queue_str_task1, osPriorityNormal, 0, 512, Serial_Write_1Buffer, &Serial_Write_1ControlBlock);
 80001f0:	4b37      	ldr	r3, [pc, #220]	; (80002d0 <main+0x150>)
 80001f2:	f107 0474 	add.w	r4, r7, #116	; 0x74
 80001f6:	461d      	mov	r5, r3
 80001f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001fc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000200:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Serial_Write_1Handle = osThreadCreate(osThread(Serial_Write_1), NULL);
 8000204:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000208:	2100      	movs	r1, #0
 800020a:	4618      	mov	r0, r3
 800020c:	f002 f8ec 	bl	80023e8 <osThreadCreate>
 8000210:	4603      	mov	r3, r0
 8000212:	4a30      	ldr	r2, [pc, #192]	; (80002d4 <main+0x154>)
 8000214:	6013      	str	r3, [r2, #0]

  /* definition and creation of LedFlash */
  osThreadStaticDef(LedFlash, led_flash_task, osPriorityLow, 0, 512, LedFlashBuffer, &LedFlashControlBlock);
 8000216:	4b30      	ldr	r3, [pc, #192]	; (80002d8 <main+0x158>)
 8000218:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800021c:	461d      	mov	r5, r3
 800021e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000220:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000222:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000226:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LedFlashHandle = osThreadCreate(osThread(LedFlash), NULL);
 800022a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800022e:	2100      	movs	r1, #0
 8000230:	4618      	mov	r0, r3
 8000232:	f002 f8d9 	bl	80023e8 <osThreadCreate>
 8000236:	4603      	mov	r3, r0
 8000238:	4a28      	ldr	r2, [pc, #160]	; (80002dc <main+0x15c>)
 800023a:	6013      	str	r3, [r2, #0]

  /* definition and creation of Serial_Write_2 */
  osThreadStaticDef(Serial_Write_2, queue_str_task2, osPriorityLow, 0, 512, Serial_Write_2Buffer, &Serial_Write_2ControlBlock);
 800023c:	4b28      	ldr	r3, [pc, #160]	; (80002e0 <main+0x160>)
 800023e:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000242:	461d      	mov	r5, r3
 8000244:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000246:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000248:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800024c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Serial_Write_2Handle = osThreadCreate(osThread(Serial_Write_2), NULL);
 8000250:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000254:	2100      	movs	r1, #0
 8000256:	4618      	mov	r0, r3
 8000258:	f002 f8c6 	bl	80023e8 <osThreadCreate>
 800025c:	4603      	mov	r3, r0
 800025e:	4a21      	ldr	r2, [pc, #132]	; (80002e4 <main+0x164>)
 8000260:	6013      	str	r3, [r2, #0]

  /* definition and creation of Serial_Xmit_Str */
  osThreadStaticDef(Serial_Xmit_Str, rs232_xmit_msg_task, osPriorityLow, 0, 512, Serial_Xmit_StrBuffer, &Serial_Xmit_StrControlBlock);
 8000262:	4b21      	ldr	r3, [pc, #132]	; (80002e8 <main+0x168>)
 8000264:	f107 0420 	add.w	r4, r7, #32
 8000268:	461d      	mov	r5, r3
 800026a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800026c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800026e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000272:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Serial_Xmit_StrHandle = osThreadCreate(osThread(Serial_Xmit_Str), NULL);
 8000276:	f107 0320 	add.w	r3, r7, #32
 800027a:	2100      	movs	r1, #0
 800027c:	4618      	mov	r0, r3
 800027e:	f002 f8b3 	bl	80023e8 <osThreadCreate>
 8000282:	4603      	mov	r3, r0
 8000284:	4a19      	ldr	r2, [pc, #100]	; (80002ec <main+0x16c>)
 8000286:	6013      	str	r3, [r2, #0]

  /* definition and creation of Serial_Read_Wri */
  osThreadStaticDef(Serial_Read_Wri, serial_readwrite_task, osPriorityLow, 0, 512, Serial_Read_WriBuffer, &Serial_Read_WriControlBlock);
 8000288:	4b19      	ldr	r3, [pc, #100]	; (80002f0 <main+0x170>)
 800028a:	1d3c      	adds	r4, r7, #4
 800028c:	461d      	mov	r5, r3
 800028e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000290:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000292:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000296:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Serial_Read_WriHandle = osThreadCreate(osThread(Serial_Read_Wri), NULL);
 800029a:	1d3b      	adds	r3, r7, #4
 800029c:	2100      	movs	r1, #0
 800029e:	4618      	mov	r0, r3
 80002a0:	f002 f8a2 	bl	80023e8 <osThreadCreate>
 80002a4:	4603      	mov	r3, r0
 80002a6:	4a13      	ldr	r2, [pc, #76]	; (80002f4 <main+0x174>)
 80002a8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80002aa:	f002 f896 	bl	80023da <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Receive_IT(&huart1, &serial_ch_msg, sizeof(serial_ch_msg));
 80002ae:	2201      	movs	r2, #1
 80002b0:	4911      	ldr	r1, [pc, #68]	; (80002f8 <main+0x178>)
 80002b2:	4812      	ldr	r0, [pc, #72]	; (80002fc <main+0x17c>)
 80002b4:	f001 fb4d 	bl	8001952 <HAL_UART_Receive_IT>

  while (1)
 80002b8:	e7fe      	b.n	80002b8 <main+0x138>
 80002ba:	bf00      	nop
 80002bc:	20002fa8 	.word	0x20002fa8
 80002c0:	08004d80 	.word	0x08004d80
 80002c4:	20002f00 	.word	0x20002f00
 80002c8:	08004d90 	.word	0x08004d90
 80002cc:	20002f58 	.word	0x20002f58
 80002d0:	08004db0 	.word	0x08004db0
 80002d4:	200003cc 	.word	0x200003cc
 80002d8:	08004dd8 	.word	0x08004dd8
 80002dc:	20000c70 	.word	0x20000c70
 80002e0:	08004e04 	.word	0x08004e04
 80002e4:	20001514 	.word	0x20001514
 80002e8:	08004e30 	.word	0x08004e30
 80002ec:	20001db8 	.word	0x20001db8
 80002f0:	08004e5c 	.word	0x08004e5c
 80002f4:	2000265c 	.word	0x2000265c
 80002f8:	2000031c 	.word	0x2000031c
 80002fc:	20000384 	.word	0x20000384

08000300 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b090      	sub	sp, #64	; 0x40
 8000304:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000306:	f107 0318 	add.w	r3, r7, #24
 800030a:	2228      	movs	r2, #40	; 0x28
 800030c:	2100      	movs	r1, #0
 800030e:	4618      	mov	r0, r3
 8000310:	f004 fc44 	bl	8004b9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000314:	1d3b      	adds	r3, r7, #4
 8000316:	2200      	movs	r2, #0
 8000318:	601a      	str	r2, [r3, #0]
 800031a:	605a      	str	r2, [r3, #4]
 800031c:	609a      	str	r2, [r3, #8]
 800031e:	60da      	str	r2, [r3, #12]
 8000320:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000322:	2302      	movs	r3, #2
 8000324:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000326:	2301      	movs	r3, #1
 8000328:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800032a:	2310      	movs	r3, #16
 800032c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800032e:	2300      	movs	r3, #0
 8000330:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000332:	f107 0318 	add.w	r3, r7, #24
 8000336:	4618      	mov	r0, r3
 8000338:	f000 fe76 	bl	8001028 <HAL_RCC_OscConfig>
 800033c:	4603      	mov	r3, r0
 800033e:	2b00      	cmp	r3, #0
 8000340:	d001      	beq.n	8000346 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000342:	f000 f9af 	bl	80006a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000346:	230f      	movs	r3, #15
 8000348:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800034a:	2300      	movs	r3, #0
 800034c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800034e:	2300      	movs	r3, #0
 8000350:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000352:	2300      	movs	r3, #0
 8000354:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000356:	2300      	movs	r3, #0
 8000358:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800035a:	1d3b      	adds	r3, r7, #4
 800035c:	2100      	movs	r1, #0
 800035e:	4618      	mov	r0, r3
 8000360:	f001 f8e4 	bl	800152c <HAL_RCC_ClockConfig>
 8000364:	4603      	mov	r3, r0
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800036a:	f000 f99b 	bl	80006a4 <Error_Handler>
  }
}
 800036e:	bf00      	nop
 8000370:	3740      	adds	r7, #64	; 0x40
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}
	...

08000378 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800037c:	4b11      	ldr	r3, [pc, #68]	; (80003c4 <MX_USART1_UART_Init+0x4c>)
 800037e:	4a12      	ldr	r2, [pc, #72]	; (80003c8 <MX_USART1_UART_Init+0x50>)
 8000380:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000382:	4b10      	ldr	r3, [pc, #64]	; (80003c4 <MX_USART1_UART_Init+0x4c>)
 8000384:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000388:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800038a:	4b0e      	ldr	r3, [pc, #56]	; (80003c4 <MX_USART1_UART_Init+0x4c>)
 800038c:	2200      	movs	r2, #0
 800038e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000390:	4b0c      	ldr	r3, [pc, #48]	; (80003c4 <MX_USART1_UART_Init+0x4c>)
 8000392:	2200      	movs	r2, #0
 8000394:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000396:	4b0b      	ldr	r3, [pc, #44]	; (80003c4 <MX_USART1_UART_Init+0x4c>)
 8000398:	2200      	movs	r2, #0
 800039a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800039c:	4b09      	ldr	r3, [pc, #36]	; (80003c4 <MX_USART1_UART_Init+0x4c>)
 800039e:	220c      	movs	r2, #12
 80003a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003a2:	4b08      	ldr	r3, [pc, #32]	; (80003c4 <MX_USART1_UART_Init+0x4c>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003a8:	4b06      	ldr	r3, [pc, #24]	; (80003c4 <MX_USART1_UART_Init+0x4c>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003ae:	4805      	ldr	r0, [pc, #20]	; (80003c4 <MX_USART1_UART_Init+0x4c>)
 80003b0:	f001 fa4a 	bl	8001848 <HAL_UART_Init>
 80003b4:	4603      	mov	r3, r0
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d001      	beq.n	80003be <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80003ba:	f000 f973 	bl	80006a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003be:	bf00      	nop
 80003c0:	bd80      	pop	{r7, pc}
 80003c2:	bf00      	nop
 80003c4:	20000384 	.word	0x20000384
 80003c8:	40013800 	.word	0x40013800

080003cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b086      	sub	sp, #24
 80003d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003d2:	f107 0308 	add.w	r3, r7, #8
 80003d6:	2200      	movs	r2, #0
 80003d8:	601a      	str	r2, [r3, #0]
 80003da:	605a      	str	r2, [r3, #4]
 80003dc:	609a      	str	r2, [r3, #8]
 80003de:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003e0:	4b18      	ldr	r3, [pc, #96]	; (8000444 <MX_GPIO_Init+0x78>)
 80003e2:	699b      	ldr	r3, [r3, #24]
 80003e4:	4a17      	ldr	r2, [pc, #92]	; (8000444 <MX_GPIO_Init+0x78>)
 80003e6:	f043 0310 	orr.w	r3, r3, #16
 80003ea:	6193      	str	r3, [r2, #24]
 80003ec:	4b15      	ldr	r3, [pc, #84]	; (8000444 <MX_GPIO_Init+0x78>)
 80003ee:	699b      	ldr	r3, [r3, #24]
 80003f0:	f003 0310 	and.w	r3, r3, #16
 80003f4:	607b      	str	r3, [r7, #4]
 80003f6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003f8:	4b12      	ldr	r3, [pc, #72]	; (8000444 <MX_GPIO_Init+0x78>)
 80003fa:	699b      	ldr	r3, [r3, #24]
 80003fc:	4a11      	ldr	r2, [pc, #68]	; (8000444 <MX_GPIO_Init+0x78>)
 80003fe:	f043 0304 	orr.w	r3, r3, #4
 8000402:	6193      	str	r3, [r2, #24]
 8000404:	4b0f      	ldr	r3, [pc, #60]	; (8000444 <MX_GPIO_Init+0x78>)
 8000406:	699b      	ldr	r3, [r3, #24]
 8000408:	f003 0304 	and.w	r3, r3, #4
 800040c:	603b      	str	r3, [r7, #0]
 800040e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000410:	2200      	movs	r2, #0
 8000412:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000416:	480c      	ldr	r0, [pc, #48]	; (8000448 <MX_GPIO_Init+0x7c>)
 8000418:	f000 fdd4 	bl	8000fc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800041c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000420:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000422:	2301      	movs	r3, #1
 8000424:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000426:	2300      	movs	r3, #0
 8000428:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800042a:	2302      	movs	r3, #2
 800042c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800042e:	f107 0308 	add.w	r3, r7, #8
 8000432:	4619      	mov	r1, r3
 8000434:	4804      	ldr	r0, [pc, #16]	; (8000448 <MX_GPIO_Init+0x7c>)
 8000436:	f000 fc41 	bl	8000cbc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800043a:	bf00      	nop
 800043c:	3718      	adds	r7, #24
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}
 8000442:	bf00      	nop
 8000444:	40021000 	.word	0x40021000
 8000448:	40011000 	.word	0x40011000

0800044c <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b082      	sub	sp, #8
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
	static signed portBASE_TYPE xHigherPriorityTaskWoken;

    xSemaphoreGiveFromISR(serial_tx_wait_semHandle, &xHigherPriorityTaskWoken);
 8000454:	4b0a      	ldr	r3, [pc, #40]	; (8000480 <HAL_UART_TxCpltCallback+0x34>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	490a      	ldr	r1, [pc, #40]	; (8000484 <HAL_UART_TxCpltCallback+0x38>)
 800045a:	4618      	mov	r0, r3
 800045c:	f002 fc00 	bl	8002c60 <xQueueGiveFromISR>

    if(xHigherPriorityTaskWoken)
 8000460:	4b08      	ldr	r3, [pc, #32]	; (8000484 <HAL_UART_TxCpltCallback+0x38>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	2b00      	cmp	r3, #0
 8000466:	d007      	beq.n	8000478 <HAL_UART_TxCpltCallback+0x2c>
    {
        taskYIELD();
 8000468:	4b07      	ldr	r3, [pc, #28]	; (8000488 <HAL_UART_TxCpltCallback+0x3c>)
 800046a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800046e:	601a      	str	r2, [r3, #0]
 8000470:	f3bf 8f4f 	dsb	sy
 8000474:	f3bf 8f6f 	isb	sy
    }

}
 8000478:	bf00      	nop
 800047a:	3708      	adds	r7, #8
 800047c:	46bd      	mov	sp, r7
 800047e:	bd80      	pop	{r7, pc}
 8000480:	20002fa8 	.word	0x20002fa8
 8000484:	20002fac 	.word	0x20002fac
 8000488:	e000ed04 	.word	0xe000ed04

0800048c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b084      	sub	sp, #16
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
	static signed portBASE_TYPE xHigherPriorityTaskWoken;
	char rx_msg;

	/* Queue the received byte. */
	if(!xQueueSendToBackFromISR(serial_rx_queueHandle, &rx_msg, &xHigherPriorityTaskWoken))
 8000494:	4b0d      	ldr	r3, [pc, #52]	; (80004cc <HAL_UART_RxCpltCallback+0x40>)
 8000496:	6818      	ldr	r0, [r3, #0]
 8000498:	f107 010f 	add.w	r1, r7, #15
 800049c:	2300      	movs	r3, #0
 800049e:	4a0c      	ldr	r2, [pc, #48]	; (80004d0 <HAL_UART_RxCpltCallback+0x44>)
 80004a0:	f002 fb46 	bl	8002b30 <xQueueGenericSendFromISR>
 80004a4:	4603      	mov	r3, r0
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d100      	bne.n	80004ac <HAL_UART_RxCpltCallback+0x20>
	{
		/* If there was an error queueing the received byte, freeze. */
		while(1);
 80004aa:	e7fe      	b.n	80004aa <HAL_UART_RxCpltCallback+0x1e>
	}

	if(xHigherPriorityTaskWoken)
 80004ac:	4b08      	ldr	r3, [pc, #32]	; (80004d0 <HAL_UART_RxCpltCallback+0x44>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d007      	beq.n	80004c4 <HAL_UART_RxCpltCallback+0x38>
	{
	      taskYIELD();
 80004b4:	4b07      	ldr	r3, [pc, #28]	; (80004d4 <HAL_UART_RxCpltCallback+0x48>)
 80004b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80004ba:	601a      	str	r2, [r3, #0]
 80004bc:	f3bf 8f4f 	dsb	sy
 80004c0:	f3bf 8f6f 	isb	sy
	}

}
 80004c4:	bf00      	nop
 80004c6:	3710      	adds	r7, #16
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	20002f58 	.word	0x20002f58
 80004d0:	20002fb0 	.word	0x20002fb0
 80004d4:	e000ed04 	.word	0xe000ed04

080004d8 <send_byte_rtos>:

void send_byte_rtos(char ch)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
 80004de:	4603      	mov	r3, r0
 80004e0:	71fb      	strb	r3, [r7, #7]
    /* Wait until the RS232 port can receive another byte (this semaphore is
     * "given" by the RS232 port interrupt when the buffer has room for another
     * byte.
     */
    while(!xSemaphoreTake(serial_tx_wait_semHandle, portMAX_DELAY));
 80004e2:	bf00      	nop
 80004e4:	4b09      	ldr	r3, [pc, #36]	; (800050c <send_byte_rtos+0x34>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	f04f 31ff 	mov.w	r1, #4294967295
 80004ec:	4618      	mov	r0, r3
 80004ee:	f002 fd25 	bl	8002f3c <xQueueSemaphoreTake>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d0f5      	beq.n	80004e4 <send_byte_rtos+0xc>

    /* Send the byte and enable the transmit interrupt (it is disabled by the
     * interrupt).
     */
    HAL_UART_Transmit_IT(&huart1,&ch,sizeof(ch));
 80004f8:	1dfb      	adds	r3, r7, #7
 80004fa:	2201      	movs	r2, #1
 80004fc:	4619      	mov	r1, r3
 80004fe:	4804      	ldr	r0, [pc, #16]	; (8000510 <send_byte_rtos+0x38>)
 8000500:	f001 f9f2 	bl	80018e8 <HAL_UART_Transmit_IT>
}
 8000504:	bf00      	nop
 8000506:	3708      	adds	r7, #8
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	20002fa8 	.word	0x20002fa8
 8000510:	20000384 	.word	0x20000384

08000514 <receive_byte_rtos>:

char receive_byte_rtos(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
    char msg;

    /* Wait for a byte to be queued by the receive interrupt handler. */
    while(!xQueueReceive(serial_rx_queueHandle, &serial_ch_msg, portMAX_DELAY));
 800051a:	bf00      	nop
 800051c:	4b07      	ldr	r3, [pc, #28]	; (800053c <receive_byte_rtos+0x28>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	f04f 32ff 	mov.w	r2, #4294967295
 8000524:	4906      	ldr	r1, [pc, #24]	; (8000540 <receive_byte_rtos+0x2c>)
 8000526:	4618      	mov	r0, r3
 8000528:	f002 fc28 	bl	8002d7c <xQueueReceive>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d0f4      	beq.n	800051c <receive_byte_rtos+0x8>

    return msg;
 8000532:	79fb      	ldrb	r3, [r7, #7]
}
 8000534:	4618      	mov	r0, r3
 8000536:	3708      	adds	r7, #8
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}
 800053c:	20002f58 	.word	0x20002f58
 8000540:	2000031c 	.word	0x2000031c

08000544 <queue_str_task>:
/* Repeatedly queues a string to be sent to the RS232.
 *   delay - the time to wait between sending messages.  A delay of 1 means
 *           wait 1/100th of a second.
 */
void queue_str_task(const char str[], int delay)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
 800054c:	6039      	str	r1, [r7, #0]


    while(1)
    {
        /* Post the message.  Keep on trying until it is successful. */
        while(!xQueueSendToBack(serial_str_queueHandle, str, portMAX_DELAY));
 800054e:	bf00      	nop
 8000550:	4b07      	ldr	r3, [pc, #28]	; (8000570 <queue_str_task+0x2c>)
 8000552:	6818      	ldr	r0, [r3, #0]
 8000554:	2300      	movs	r3, #0
 8000556:	f04f 32ff 	mov.w	r2, #4294967295
 800055a:	6879      	ldr	r1, [r7, #4]
 800055c:	f002 f9ea 	bl	8002934 <xQueueGenericSend>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d0f4      	beq.n	8000550 <queue_str_task+0xc>

        /* Wait. */
        vTaskDelay(delay);
 8000566:	683b      	ldr	r3, [r7, #0]
 8000568:	4618      	mov	r0, r3
 800056a:	f003 f8bb 	bl	80036e4 <vTaskDelay>
        while(!xQueueSendToBack(serial_str_queueHandle, str, portMAX_DELAY));
 800056e:	e7ee      	b.n	800054e <queue_str_task+0xa>
 8000570:	20002f00 	.word	0x20002f00

08000574 <queue_str_task1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_queue_str_task1 */
void queue_str_task1(void const * argument)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
   queue_str_task("Hola soy Tarea 1, probando ejecucion con FreeRTOS\n", 200);
 800057c:	21c8      	movs	r1, #200	; 0xc8
 800057e:	4803      	ldr	r0, [pc, #12]	; (800058c <queue_str_task1+0x18>)
 8000580:	f7ff ffe0 	bl	8000544 <queue_str_task>
  /* USER CODE END 5 */
}
 8000584:	bf00      	nop
 8000586:	3708      	adds	r7, #8
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	08004e78 	.word	0x08004e78

08000590 <led_flash_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_led_flash_task */
void led_flash_task(void const * argument)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN led_flash_task */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000598:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800059c:	4803      	ldr	r0, [pc, #12]	; (80005ac <led_flash_task+0x1c>)
 800059e:	f000 fd29 	bl	8000ff4 <HAL_GPIO_TogglePin>
    osDelay(1000);
 80005a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005a6:	f001 ff6b 	bl	8002480 <osDelay>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80005aa:	e7f5      	b.n	8000598 <led_flash_task+0x8>
 80005ac:	40011000 	.word	0x40011000

080005b0 <queue_str_task2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_queue_str_task2 */
void queue_str_task2(void const * argument)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN queue_str_task2 */
  /* Infinite loop */
  queue_str_task("Hola soy Tarea 2, probando ejecucion con FreeRTOS\n", 50);
 80005b8:	2132      	movs	r1, #50	; 0x32
 80005ba:	4803      	ldr	r0, [pc, #12]	; (80005c8 <queue_str_task2+0x18>)
 80005bc:	f7ff ffc2 	bl	8000544 <queue_str_task>
  /* USER CODE END queue_str_task2 */
}
 80005c0:	bf00      	nop
 80005c2:	3708      	adds	r7, #8
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	08004eac 	.word	0x08004eac

080005cc <rs232_xmit_msg_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_rs232_xmit_msg_task */
void rs232_xmit_msg_task(void const * argument)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
    int curr_char;

    while(1) {
        /* Read from the queue.  Keep trying until a message is received.  This
         * will block for a period of time (specified by portMAX_DELAY). */
        while(!xQueueReceive(serial_str_queueHandle, serial_str_msg, portMAX_DELAY));
 80005d4:	bf00      	nop
 80005d6:	4b0f      	ldr	r3, [pc, #60]	; (8000614 <rs232_xmit_msg_task+0x48>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	f04f 32ff 	mov.w	r2, #4294967295
 80005de:	490e      	ldr	r1, [pc, #56]	; (8000618 <rs232_xmit_msg_task+0x4c>)
 80005e0:	4618      	mov	r0, r3
 80005e2:	f002 fbcb 	bl	8002d7c <xQueueReceive>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d0f4      	beq.n	80005d6 <rs232_xmit_msg_task+0xa>

        /* Write each character of the message to the RS232 port. */
        curr_char = 0;
 80005ec:	2300      	movs	r3, #0
 80005ee:	60fb      	str	r3, [r7, #12]
        while(serial_str_msg[curr_char] != '\0') {
 80005f0:	e009      	b.n	8000606 <rs232_xmit_msg_task+0x3a>
            send_byte_rtos(serial_str_msg[curr_char]);
 80005f2:	4a09      	ldr	r2, [pc, #36]	; (8000618 <rs232_xmit_msg_task+0x4c>)
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	4413      	add	r3, r2
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	4618      	mov	r0, r3
 80005fc:	f7ff ff6c 	bl	80004d8 <send_byte_rtos>
            curr_char++;
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	3301      	adds	r3, #1
 8000604:	60fb      	str	r3, [r7, #12]
        while(serial_str_msg[curr_char] != '\0') {
 8000606:	4a04      	ldr	r2, [pc, #16]	; (8000618 <rs232_xmit_msg_task+0x4c>)
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	4413      	add	r3, r2
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d1ef      	bne.n	80005f2 <rs232_xmit_msg_task+0x26>
        while(!xQueueReceive(serial_str_queueHandle, serial_str_msg, portMAX_DELAY));
 8000612:	e7df      	b.n	80005d4 <rs232_xmit_msg_task+0x8>
 8000614:	20002f00 	.word	0x20002f00
 8000618:	20000320 	.word	0x20000320

0800061c <serial_readwrite_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_serial_readwrite_task */
void serial_readwrite_task(void const * argument)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b086      	sub	sp, #24
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
    char ch;
    int curr_char;
    int done;

    /* Prepare the response message to be queued. */
    strcpy(serial_str_msg, "RV: ");
 8000624:	4b1c      	ldr	r3, [pc, #112]	; (8000698 <serial_readwrite_task+0x7c>)
 8000626:	4a1d      	ldr	r2, [pc, #116]	; (800069c <serial_readwrite_task+0x80>)
 8000628:	e892 0003 	ldmia.w	r2, {r0, r1}
 800062c:	6018      	str	r0, [r3, #0]
 800062e:	3304      	adds	r3, #4
 8000630:	7019      	strb	r1, [r3, #0]

    while(1) {
        curr_char = 4;
 8000632:	2304      	movs	r3, #4
 8000634:	617b      	str	r3, [r7, #20]
        done = 0;
 8000636:	2300      	movs	r3, #0
 8000638:	613b      	str	r3, [r7, #16]
        do {
            /* Receive a byte from the RS232 port (this call will block). */
            ch = receive_byte_rtos();
 800063a:	f7ff ff6b 	bl	8000514 <receive_byte_rtos>
 800063e:	4603      	mov	r3, r0
 8000640:	73fb      	strb	r3, [r7, #15]

            /* If the byte is an end-of-line type character, then finish the
             * string and indicate we are done.
             */
            if((ch == '\r') || (ch == '\n')) {
 8000642:	7bfb      	ldrb	r3, [r7, #15]
 8000644:	2b0d      	cmp	r3, #13
 8000646:	d002      	beq.n	800064e <serial_readwrite_task+0x32>
 8000648:	7bfb      	ldrb	r3, [r7, #15]
 800064a:	2b0a      	cmp	r3, #10
 800064c:	d10d      	bne.n	800066a <serial_readwrite_task+0x4e>
                serial_str_msg[curr_char] = '\n';
 800064e:	4a12      	ldr	r2, [pc, #72]	; (8000698 <serial_readwrite_task+0x7c>)
 8000650:	697b      	ldr	r3, [r7, #20]
 8000652:	4413      	add	r3, r2
 8000654:	220a      	movs	r2, #10
 8000656:	701a      	strb	r2, [r3, #0]
                serial_str_msg[curr_char+1] = '\0';
 8000658:	697b      	ldr	r3, [r7, #20]
 800065a:	3301      	adds	r3, #1
 800065c:	4a0e      	ldr	r2, [pc, #56]	; (8000698 <serial_readwrite_task+0x7c>)
 800065e:	2100      	movs	r1, #0
 8000660:	54d1      	strb	r1, [r2, r3]
                done = -1;
 8000662:	f04f 33ff 	mov.w	r3, #4294967295
 8000666:	613b      	str	r3, [r7, #16]
 8000668:	e005      	b.n	8000676 <serial_readwrite_task+0x5a>
            /* Otherwise, add the character to the response string. */
            } else {
            	serial_str_msg[curr_char++] = ch;
 800066a:	697b      	ldr	r3, [r7, #20]
 800066c:	1c5a      	adds	r2, r3, #1
 800066e:	617a      	str	r2, [r7, #20]
 8000670:	4909      	ldr	r1, [pc, #36]	; (8000698 <serial_readwrite_task+0x7c>)
 8000672:	7bfa      	ldrb	r2, [r7, #15]
 8000674:	54ca      	strb	r2, [r1, r3]
            }
        } while(!done);
 8000676:	693b      	ldr	r3, [r7, #16]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d0de      	beq.n	800063a <serial_readwrite_task+0x1e>

        /* Once we are done building the response string, queue the response to
         * be sent to the RS232 port.
         */
        while(!xQueueSendToBack(serial_str_queueHandle, serial_str_msg, portMAX_DELAY));
 800067c:	bf00      	nop
 800067e:	4b08      	ldr	r3, [pc, #32]	; (80006a0 <serial_readwrite_task+0x84>)
 8000680:	6818      	ldr	r0, [r3, #0]
 8000682:	2300      	movs	r3, #0
 8000684:	f04f 32ff 	mov.w	r2, #4294967295
 8000688:	4903      	ldr	r1, [pc, #12]	; (8000698 <serial_readwrite_task+0x7c>)
 800068a:	f002 f953 	bl	8002934 <xQueueGenericSend>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d0f4      	beq.n	800067e <serial_readwrite_task+0x62>
        curr_char = 4;
 8000694:	e7cd      	b.n	8000632 <serial_readwrite_task+0x16>
 8000696:	bf00      	nop
 8000698:	20000320 	.word	0x20000320
 800069c:	08004ee0 	.word	0x08004ee0
 80006a0:	20002f00 	.word	0x20002f00

080006a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006a8:	b672      	cpsid	i
}
 80006aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006ac:	e7fe      	b.n	80006ac <Error_Handler+0x8>
	...

080006b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b084      	sub	sp, #16
 80006b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006b6:	4b18      	ldr	r3, [pc, #96]	; (8000718 <HAL_MspInit+0x68>)
 80006b8:	699b      	ldr	r3, [r3, #24]
 80006ba:	4a17      	ldr	r2, [pc, #92]	; (8000718 <HAL_MspInit+0x68>)
 80006bc:	f043 0301 	orr.w	r3, r3, #1
 80006c0:	6193      	str	r3, [r2, #24]
 80006c2:	4b15      	ldr	r3, [pc, #84]	; (8000718 <HAL_MspInit+0x68>)
 80006c4:	699b      	ldr	r3, [r3, #24]
 80006c6:	f003 0301 	and.w	r3, r3, #1
 80006ca:	60bb      	str	r3, [r7, #8]
 80006cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ce:	4b12      	ldr	r3, [pc, #72]	; (8000718 <HAL_MspInit+0x68>)
 80006d0:	69db      	ldr	r3, [r3, #28]
 80006d2:	4a11      	ldr	r2, [pc, #68]	; (8000718 <HAL_MspInit+0x68>)
 80006d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006d8:	61d3      	str	r3, [r2, #28]
 80006da:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <HAL_MspInit+0x68>)
 80006dc:	69db      	ldr	r3, [r3, #28]
 80006de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006e2:	607b      	str	r3, [r7, #4]
 80006e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80006e6:	2200      	movs	r2, #0
 80006e8:	210f      	movs	r1, #15
 80006ea:	f06f 0001 	mvn.w	r0, #1
 80006ee:	f000 f9fc 	bl	8000aea <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80006f2:	4b0a      	ldr	r3, [pc, #40]	; (800071c <HAL_MspInit+0x6c>)
 80006f4:	685b      	ldr	r3, [r3, #4]
 80006f6:	60fb      	str	r3, [r7, #12]
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80006fe:	60fb      	str	r3, [r7, #12]
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000706:	60fb      	str	r3, [r7, #12]
 8000708:	4a04      	ldr	r2, [pc, #16]	; (800071c <HAL_MspInit+0x6c>)
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800070e:	bf00      	nop
 8000710:	3710      	adds	r7, #16
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40021000 	.word	0x40021000
 800071c:	40010000 	.word	0x40010000

08000720 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b088      	sub	sp, #32
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000728:	f107 0310 	add.w	r3, r7, #16
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	605a      	str	r2, [r3, #4]
 8000732:	609a      	str	r2, [r3, #8]
 8000734:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	4a20      	ldr	r2, [pc, #128]	; (80007bc <HAL_UART_MspInit+0x9c>)
 800073c:	4293      	cmp	r3, r2
 800073e:	d139      	bne.n	80007b4 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000740:	4b1f      	ldr	r3, [pc, #124]	; (80007c0 <HAL_UART_MspInit+0xa0>)
 8000742:	699b      	ldr	r3, [r3, #24]
 8000744:	4a1e      	ldr	r2, [pc, #120]	; (80007c0 <HAL_UART_MspInit+0xa0>)
 8000746:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800074a:	6193      	str	r3, [r2, #24]
 800074c:	4b1c      	ldr	r3, [pc, #112]	; (80007c0 <HAL_UART_MspInit+0xa0>)
 800074e:	699b      	ldr	r3, [r3, #24]
 8000750:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000754:	60fb      	str	r3, [r7, #12]
 8000756:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000758:	4b19      	ldr	r3, [pc, #100]	; (80007c0 <HAL_UART_MspInit+0xa0>)
 800075a:	699b      	ldr	r3, [r3, #24]
 800075c:	4a18      	ldr	r2, [pc, #96]	; (80007c0 <HAL_UART_MspInit+0xa0>)
 800075e:	f043 0304 	orr.w	r3, r3, #4
 8000762:	6193      	str	r3, [r2, #24]
 8000764:	4b16      	ldr	r3, [pc, #88]	; (80007c0 <HAL_UART_MspInit+0xa0>)
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	f003 0304 	and.w	r3, r3, #4
 800076c:	60bb      	str	r3, [r7, #8]
 800076e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000770:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000774:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000776:	2302      	movs	r3, #2
 8000778:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800077a:	2303      	movs	r3, #3
 800077c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800077e:	f107 0310 	add.w	r3, r7, #16
 8000782:	4619      	mov	r1, r3
 8000784:	480f      	ldr	r0, [pc, #60]	; (80007c4 <HAL_UART_MspInit+0xa4>)
 8000786:	f000 fa99 	bl	8000cbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800078a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800078e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000790:	2300      	movs	r3, #0
 8000792:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000798:	f107 0310 	add.w	r3, r7, #16
 800079c:	4619      	mov	r1, r3
 800079e:	4809      	ldr	r0, [pc, #36]	; (80007c4 <HAL_UART_MspInit+0xa4>)
 80007a0:	f000 fa8c 	bl	8000cbc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80007a4:	2200      	movs	r2, #0
 80007a6:	2105      	movs	r1, #5
 80007a8:	2025      	movs	r0, #37	; 0x25
 80007aa:	f000 f99e 	bl	8000aea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80007ae:	2025      	movs	r0, #37	; 0x25
 80007b0:	f000 f9b7 	bl	8000b22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80007b4:	bf00      	nop
 80007b6:	3720      	adds	r7, #32
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	40013800 	.word	0x40013800
 80007c0:	40021000 	.word	0x40021000
 80007c4:	40010800 	.word	0x40010800

080007c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007cc:	e7fe      	b.n	80007cc <NMI_Handler+0x4>

080007ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ce:	b480      	push	{r7}
 80007d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007d2:	e7fe      	b.n	80007d2 <HardFault_Handler+0x4>

080007d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007d8:	e7fe      	b.n	80007d8 <MemManage_Handler+0x4>

080007da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007da:	b480      	push	{r7}
 80007dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007de:	e7fe      	b.n	80007de <BusFault_Handler+0x4>

080007e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007e4:	e7fe      	b.n	80007e4 <UsageFault_Handler+0x4>

080007e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007e6:	b480      	push	{r7}
 80007e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007ea:	bf00      	nop
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bc80      	pop	{r7}
 80007f0:	4770      	bx	lr

080007f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007f2:	b580      	push	{r7, lr}
 80007f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007f6:	f000 f885 	bl	8000904 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80007fa:	f003 fbc3 	bl	8003f84 <xTaskGetSchedulerState>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b01      	cmp	r3, #1
 8000802:	d001      	beq.n	8000808 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000804:	f003 ff70 	bl	80046e8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000808:	bf00      	nop
 800080a:	bd80      	pop	{r7, pc}

0800080c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000810:	4802      	ldr	r0, [pc, #8]	; (800081c <USART1_IRQHandler+0x10>)
 8000812:	f001 f8c3 	bl	800199c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	20000384 	.word	0x20000384

08000820 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000824:	bf00      	nop
 8000826:	46bd      	mov	sp, r7
 8000828:	bc80      	pop	{r7}
 800082a:	4770      	bx	lr

0800082c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800082c:	f7ff fff8 	bl	8000820 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000830:	480b      	ldr	r0, [pc, #44]	; (8000860 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000832:	490c      	ldr	r1, [pc, #48]	; (8000864 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000834:	4a0c      	ldr	r2, [pc, #48]	; (8000868 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000836:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000838:	e002      	b.n	8000840 <LoopCopyDataInit>

0800083a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800083a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800083c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800083e:	3304      	adds	r3, #4

08000840 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000840:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000842:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000844:	d3f9      	bcc.n	800083a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000846:	4a09      	ldr	r2, [pc, #36]	; (800086c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000848:	4c09      	ldr	r4, [pc, #36]	; (8000870 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800084a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800084c:	e001      	b.n	8000852 <LoopFillZerobss>

0800084e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800084e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000850:	3204      	adds	r2, #4

08000852 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000852:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000854:	d3fb      	bcc.n	800084e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000856:	f004 f9ff 	bl	8004c58 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800085a:	f7ff fc91 	bl	8000180 <main>
  bx lr
 800085e:	4770      	bx	lr
  ldr r0, =_sdata
 8000860:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000864:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000868:	08004f24 	.word	0x08004f24
  ldr r2, =_sbss
 800086c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000870:	20003e44 	.word	0x20003e44

08000874 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000874:	e7fe      	b.n	8000874 <ADC1_2_IRQHandler>
	...

08000878 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800087c:	4b08      	ldr	r3, [pc, #32]	; (80008a0 <HAL_Init+0x28>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a07      	ldr	r2, [pc, #28]	; (80008a0 <HAL_Init+0x28>)
 8000882:	f043 0310 	orr.w	r3, r3, #16
 8000886:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000888:	2003      	movs	r0, #3
 800088a:	f000 f923 	bl	8000ad4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800088e:	200f      	movs	r0, #15
 8000890:	f000 f808 	bl	80008a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000894:	f7ff ff0c 	bl	80006b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000898:	2300      	movs	r3, #0
}
 800089a:	4618      	mov	r0, r3
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40022000 	.word	0x40022000

080008a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008ac:	4b12      	ldr	r3, [pc, #72]	; (80008f8 <HAL_InitTick+0x54>)
 80008ae:	681a      	ldr	r2, [r3, #0]
 80008b0:	4b12      	ldr	r3, [pc, #72]	; (80008fc <HAL_InitTick+0x58>)
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	4619      	mov	r1, r3
 80008b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80008be:	fbb2 f3f3 	udiv	r3, r2, r3
 80008c2:	4618      	mov	r0, r3
 80008c4:	f000 f93b 	bl	8000b3e <HAL_SYSTICK_Config>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008ce:	2301      	movs	r3, #1
 80008d0:	e00e      	b.n	80008f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	2b0f      	cmp	r3, #15
 80008d6:	d80a      	bhi.n	80008ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008d8:	2200      	movs	r2, #0
 80008da:	6879      	ldr	r1, [r7, #4]
 80008dc:	f04f 30ff 	mov.w	r0, #4294967295
 80008e0:	f000 f903 	bl	8000aea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008e4:	4a06      	ldr	r2, [pc, #24]	; (8000900 <HAL_InitTick+0x5c>)
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008ea:	2300      	movs	r3, #0
 80008ec:	e000      	b.n	80008f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008ee:	2301      	movs	r3, #1
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	3708      	adds	r7, #8
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	20000000 	.word	0x20000000
 80008fc:	20000008 	.word	0x20000008
 8000900:	20000004 	.word	0x20000004

08000904 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000908:	4b05      	ldr	r3, [pc, #20]	; (8000920 <HAL_IncTick+0x1c>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	461a      	mov	r2, r3
 800090e:	4b05      	ldr	r3, [pc, #20]	; (8000924 <HAL_IncTick+0x20>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4413      	add	r3, r2
 8000914:	4a03      	ldr	r2, [pc, #12]	; (8000924 <HAL_IncTick+0x20>)
 8000916:	6013      	str	r3, [r2, #0]
}
 8000918:	bf00      	nop
 800091a:	46bd      	mov	sp, r7
 800091c:	bc80      	pop	{r7}
 800091e:	4770      	bx	lr
 8000920:	20000008 	.word	0x20000008
 8000924:	20002fb4 	.word	0x20002fb4

08000928 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  return uwTick;
 800092c:	4b02      	ldr	r3, [pc, #8]	; (8000938 <HAL_GetTick+0x10>)
 800092e:	681b      	ldr	r3, [r3, #0]
}
 8000930:	4618      	mov	r0, r3
 8000932:	46bd      	mov	sp, r7
 8000934:	bc80      	pop	{r7}
 8000936:	4770      	bx	lr
 8000938:	20002fb4 	.word	0x20002fb4

0800093c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800093c:	b480      	push	{r7}
 800093e:	b085      	sub	sp, #20
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	f003 0307 	and.w	r3, r3, #7
 800094a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800094c:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <__NVIC_SetPriorityGrouping+0x44>)
 800094e:	68db      	ldr	r3, [r3, #12]
 8000950:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000952:	68ba      	ldr	r2, [r7, #8]
 8000954:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000958:	4013      	ands	r3, r2
 800095a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000960:	68bb      	ldr	r3, [r7, #8]
 8000962:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000964:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000968:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800096c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800096e:	4a04      	ldr	r2, [pc, #16]	; (8000980 <__NVIC_SetPriorityGrouping+0x44>)
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	60d3      	str	r3, [r2, #12]
}
 8000974:	bf00      	nop
 8000976:	3714      	adds	r7, #20
 8000978:	46bd      	mov	sp, r7
 800097a:	bc80      	pop	{r7}
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	e000ed00 	.word	0xe000ed00

08000984 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000988:	4b04      	ldr	r3, [pc, #16]	; (800099c <__NVIC_GetPriorityGrouping+0x18>)
 800098a:	68db      	ldr	r3, [r3, #12]
 800098c:	0a1b      	lsrs	r3, r3, #8
 800098e:	f003 0307 	and.w	r3, r3, #7
}
 8000992:	4618      	mov	r0, r3
 8000994:	46bd      	mov	sp, r7
 8000996:	bc80      	pop	{r7}
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	e000ed00 	.word	0xe000ed00

080009a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	4603      	mov	r3, r0
 80009a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	db0b      	blt.n	80009ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009b2:	79fb      	ldrb	r3, [r7, #7]
 80009b4:	f003 021f 	and.w	r2, r3, #31
 80009b8:	4906      	ldr	r1, [pc, #24]	; (80009d4 <__NVIC_EnableIRQ+0x34>)
 80009ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009be:	095b      	lsrs	r3, r3, #5
 80009c0:	2001      	movs	r0, #1
 80009c2:	fa00 f202 	lsl.w	r2, r0, r2
 80009c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009ca:	bf00      	nop
 80009cc:	370c      	adds	r7, #12
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bc80      	pop	{r7}
 80009d2:	4770      	bx	lr
 80009d4:	e000e100 	.word	0xe000e100

080009d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4603      	mov	r3, r0
 80009e0:	6039      	str	r1, [r7, #0]
 80009e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	db0a      	blt.n	8000a02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	b2da      	uxtb	r2, r3
 80009f0:	490c      	ldr	r1, [pc, #48]	; (8000a24 <__NVIC_SetPriority+0x4c>)
 80009f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f6:	0112      	lsls	r2, r2, #4
 80009f8:	b2d2      	uxtb	r2, r2
 80009fa:	440b      	add	r3, r1
 80009fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a00:	e00a      	b.n	8000a18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	b2da      	uxtb	r2, r3
 8000a06:	4908      	ldr	r1, [pc, #32]	; (8000a28 <__NVIC_SetPriority+0x50>)
 8000a08:	79fb      	ldrb	r3, [r7, #7]
 8000a0a:	f003 030f 	and.w	r3, r3, #15
 8000a0e:	3b04      	subs	r3, #4
 8000a10:	0112      	lsls	r2, r2, #4
 8000a12:	b2d2      	uxtb	r2, r2
 8000a14:	440b      	add	r3, r1
 8000a16:	761a      	strb	r2, [r3, #24]
}
 8000a18:	bf00      	nop
 8000a1a:	370c      	adds	r7, #12
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bc80      	pop	{r7}
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	e000e100 	.word	0xe000e100
 8000a28:	e000ed00 	.word	0xe000ed00

08000a2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b089      	sub	sp, #36	; 0x24
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	60f8      	str	r0, [r7, #12]
 8000a34:	60b9      	str	r1, [r7, #8]
 8000a36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	f003 0307 	and.w	r3, r3, #7
 8000a3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a40:	69fb      	ldr	r3, [r7, #28]
 8000a42:	f1c3 0307 	rsb	r3, r3, #7
 8000a46:	2b04      	cmp	r3, #4
 8000a48:	bf28      	it	cs
 8000a4a:	2304      	movcs	r3, #4
 8000a4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a4e:	69fb      	ldr	r3, [r7, #28]
 8000a50:	3304      	adds	r3, #4
 8000a52:	2b06      	cmp	r3, #6
 8000a54:	d902      	bls.n	8000a5c <NVIC_EncodePriority+0x30>
 8000a56:	69fb      	ldr	r3, [r7, #28]
 8000a58:	3b03      	subs	r3, #3
 8000a5a:	e000      	b.n	8000a5e <NVIC_EncodePriority+0x32>
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a60:	f04f 32ff 	mov.w	r2, #4294967295
 8000a64:	69bb      	ldr	r3, [r7, #24]
 8000a66:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6a:	43da      	mvns	r2, r3
 8000a6c:	68bb      	ldr	r3, [r7, #8]
 8000a6e:	401a      	ands	r2, r3
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a74:	f04f 31ff 	mov.w	r1, #4294967295
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a7e:	43d9      	mvns	r1, r3
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a84:	4313      	orrs	r3, r2
         );
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	3724      	adds	r7, #36	; 0x24
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bc80      	pop	{r7}
 8000a8e:	4770      	bx	lr

08000a90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	3b01      	subs	r3, #1
 8000a9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000aa0:	d301      	bcc.n	8000aa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	e00f      	b.n	8000ac6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aa6:	4a0a      	ldr	r2, [pc, #40]	; (8000ad0 <SysTick_Config+0x40>)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	3b01      	subs	r3, #1
 8000aac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000aae:	210f      	movs	r1, #15
 8000ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab4:	f7ff ff90 	bl	80009d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ab8:	4b05      	ldr	r3, [pc, #20]	; (8000ad0 <SysTick_Config+0x40>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000abe:	4b04      	ldr	r3, [pc, #16]	; (8000ad0 <SysTick_Config+0x40>)
 8000ac0:	2207      	movs	r2, #7
 8000ac2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ac4:	2300      	movs	r3, #0
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3708      	adds	r7, #8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	e000e010 	.word	0xe000e010

08000ad4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000adc:	6878      	ldr	r0, [r7, #4]
 8000ade:	f7ff ff2d 	bl	800093c <__NVIC_SetPriorityGrouping>
}
 8000ae2:	bf00      	nop
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}

08000aea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000aea:	b580      	push	{r7, lr}
 8000aec:	b086      	sub	sp, #24
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	4603      	mov	r3, r0
 8000af2:	60b9      	str	r1, [r7, #8]
 8000af4:	607a      	str	r2, [r7, #4]
 8000af6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000af8:	2300      	movs	r3, #0
 8000afa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000afc:	f7ff ff42 	bl	8000984 <__NVIC_GetPriorityGrouping>
 8000b00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b02:	687a      	ldr	r2, [r7, #4]
 8000b04:	68b9      	ldr	r1, [r7, #8]
 8000b06:	6978      	ldr	r0, [r7, #20]
 8000b08:	f7ff ff90 	bl	8000a2c <NVIC_EncodePriority>
 8000b0c:	4602      	mov	r2, r0
 8000b0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b12:	4611      	mov	r1, r2
 8000b14:	4618      	mov	r0, r3
 8000b16:	f7ff ff5f 	bl	80009d8 <__NVIC_SetPriority>
}
 8000b1a:	bf00      	nop
 8000b1c:	3718      	adds	r7, #24
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b22:	b580      	push	{r7, lr}
 8000b24:	b082      	sub	sp, #8
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	4603      	mov	r3, r0
 8000b2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b30:	4618      	mov	r0, r3
 8000b32:	f7ff ff35 	bl	80009a0 <__NVIC_EnableIRQ>
}
 8000b36:	bf00      	nop
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}

08000b3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	b082      	sub	sp, #8
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b46:	6878      	ldr	r0, [r7, #4]
 8000b48:	f7ff ffa2 	bl	8000a90 <SysTick_Config>
 8000b4c:	4603      	mov	r3, r0
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000b56:	b480      	push	{r7}
 8000b58:	b085      	sub	sp, #20
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b68:	b2db      	uxtb	r3, r3
 8000b6a:	2b02      	cmp	r3, #2
 8000b6c:	d008      	beq.n	8000b80 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	2204      	movs	r2, #4
 8000b72:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	2200      	movs	r2, #0
 8000b78:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	e020      	b.n	8000bc2 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	681a      	ldr	r2, [r3, #0]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	f022 020e 	bic.w	r2, r2, #14
 8000b8e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	f022 0201 	bic.w	r2, r2, #1
 8000b9e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ba8:	2101      	movs	r1, #1
 8000baa:	fa01 f202 	lsl.w	r2, r1, r2
 8000bae:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	2200      	movs	r2, #0
 8000bbc:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3714      	adds	r7, #20
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bc80      	pop	{r7}
 8000bca:	4770      	bx	lr

08000bcc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	2b02      	cmp	r3, #2
 8000be2:	d005      	beq.n	8000bf0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2204      	movs	r2, #4
 8000be8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000bea:	2301      	movs	r3, #1
 8000bec:	73fb      	strb	r3, [r7, #15]
 8000bee:	e051      	b.n	8000c94 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	681a      	ldr	r2, [r3, #0]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f022 020e 	bic.w	r2, r2, #14
 8000bfe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	681a      	ldr	r2, [r3, #0]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	f022 0201 	bic.w	r2, r2, #1
 8000c0e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a22      	ldr	r2, [pc, #136]	; (8000ca0 <HAL_DMA_Abort_IT+0xd4>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d029      	beq.n	8000c6e <HAL_DMA_Abort_IT+0xa2>
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4a21      	ldr	r2, [pc, #132]	; (8000ca4 <HAL_DMA_Abort_IT+0xd8>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d022      	beq.n	8000c6a <HAL_DMA_Abort_IT+0x9e>
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a1f      	ldr	r2, [pc, #124]	; (8000ca8 <HAL_DMA_Abort_IT+0xdc>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d01a      	beq.n	8000c64 <HAL_DMA_Abort_IT+0x98>
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4a1e      	ldr	r2, [pc, #120]	; (8000cac <HAL_DMA_Abort_IT+0xe0>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d012      	beq.n	8000c5e <HAL_DMA_Abort_IT+0x92>
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a1c      	ldr	r2, [pc, #112]	; (8000cb0 <HAL_DMA_Abort_IT+0xe4>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d00a      	beq.n	8000c58 <HAL_DMA_Abort_IT+0x8c>
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4a1b      	ldr	r2, [pc, #108]	; (8000cb4 <HAL_DMA_Abort_IT+0xe8>)
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	d102      	bne.n	8000c52 <HAL_DMA_Abort_IT+0x86>
 8000c4c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000c50:	e00e      	b.n	8000c70 <HAL_DMA_Abort_IT+0xa4>
 8000c52:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c56:	e00b      	b.n	8000c70 <HAL_DMA_Abort_IT+0xa4>
 8000c58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c5c:	e008      	b.n	8000c70 <HAL_DMA_Abort_IT+0xa4>
 8000c5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c62:	e005      	b.n	8000c70 <HAL_DMA_Abort_IT+0xa4>
 8000c64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c68:	e002      	b.n	8000c70 <HAL_DMA_Abort_IT+0xa4>
 8000c6a:	2310      	movs	r3, #16
 8000c6c:	e000      	b.n	8000c70 <HAL_DMA_Abort_IT+0xa4>
 8000c6e:	2301      	movs	r3, #1
 8000c70:	4a11      	ldr	r2, [pc, #68]	; (8000cb8 <HAL_DMA_Abort_IT+0xec>)
 8000c72:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2201      	movs	r2, #1
 8000c78:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2200      	movs	r2, #0
 8000c80:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d003      	beq.n	8000c94 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c90:	6878      	ldr	r0, [r7, #4]
 8000c92:	4798      	blx	r3
    } 
  }
  return status;
 8000c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3710      	adds	r7, #16
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	40020008 	.word	0x40020008
 8000ca4:	4002001c 	.word	0x4002001c
 8000ca8:	40020030 	.word	0x40020030
 8000cac:	40020044 	.word	0x40020044
 8000cb0:	40020058 	.word	0x40020058
 8000cb4:	4002006c 	.word	0x4002006c
 8000cb8:	40020000 	.word	0x40020000

08000cbc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b08b      	sub	sp, #44	; 0x2c
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cce:	e169      	b.n	8000fa4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	69fa      	ldr	r2, [r7, #28]
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ce4:	69ba      	ldr	r2, [r7, #24]
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	f040 8158 	bne.w	8000f9e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	4a9a      	ldr	r2, [pc, #616]	; (8000f5c <HAL_GPIO_Init+0x2a0>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d05e      	beq.n	8000db6 <HAL_GPIO_Init+0xfa>
 8000cf8:	4a98      	ldr	r2, [pc, #608]	; (8000f5c <HAL_GPIO_Init+0x2a0>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d875      	bhi.n	8000dea <HAL_GPIO_Init+0x12e>
 8000cfe:	4a98      	ldr	r2, [pc, #608]	; (8000f60 <HAL_GPIO_Init+0x2a4>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d058      	beq.n	8000db6 <HAL_GPIO_Init+0xfa>
 8000d04:	4a96      	ldr	r2, [pc, #600]	; (8000f60 <HAL_GPIO_Init+0x2a4>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d86f      	bhi.n	8000dea <HAL_GPIO_Init+0x12e>
 8000d0a:	4a96      	ldr	r2, [pc, #600]	; (8000f64 <HAL_GPIO_Init+0x2a8>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d052      	beq.n	8000db6 <HAL_GPIO_Init+0xfa>
 8000d10:	4a94      	ldr	r2, [pc, #592]	; (8000f64 <HAL_GPIO_Init+0x2a8>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d869      	bhi.n	8000dea <HAL_GPIO_Init+0x12e>
 8000d16:	4a94      	ldr	r2, [pc, #592]	; (8000f68 <HAL_GPIO_Init+0x2ac>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d04c      	beq.n	8000db6 <HAL_GPIO_Init+0xfa>
 8000d1c:	4a92      	ldr	r2, [pc, #584]	; (8000f68 <HAL_GPIO_Init+0x2ac>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d863      	bhi.n	8000dea <HAL_GPIO_Init+0x12e>
 8000d22:	4a92      	ldr	r2, [pc, #584]	; (8000f6c <HAL_GPIO_Init+0x2b0>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d046      	beq.n	8000db6 <HAL_GPIO_Init+0xfa>
 8000d28:	4a90      	ldr	r2, [pc, #576]	; (8000f6c <HAL_GPIO_Init+0x2b0>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d85d      	bhi.n	8000dea <HAL_GPIO_Init+0x12e>
 8000d2e:	2b12      	cmp	r3, #18
 8000d30:	d82a      	bhi.n	8000d88 <HAL_GPIO_Init+0xcc>
 8000d32:	2b12      	cmp	r3, #18
 8000d34:	d859      	bhi.n	8000dea <HAL_GPIO_Init+0x12e>
 8000d36:	a201      	add	r2, pc, #4	; (adr r2, 8000d3c <HAL_GPIO_Init+0x80>)
 8000d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d3c:	08000db7 	.word	0x08000db7
 8000d40:	08000d91 	.word	0x08000d91
 8000d44:	08000da3 	.word	0x08000da3
 8000d48:	08000de5 	.word	0x08000de5
 8000d4c:	08000deb 	.word	0x08000deb
 8000d50:	08000deb 	.word	0x08000deb
 8000d54:	08000deb 	.word	0x08000deb
 8000d58:	08000deb 	.word	0x08000deb
 8000d5c:	08000deb 	.word	0x08000deb
 8000d60:	08000deb 	.word	0x08000deb
 8000d64:	08000deb 	.word	0x08000deb
 8000d68:	08000deb 	.word	0x08000deb
 8000d6c:	08000deb 	.word	0x08000deb
 8000d70:	08000deb 	.word	0x08000deb
 8000d74:	08000deb 	.word	0x08000deb
 8000d78:	08000deb 	.word	0x08000deb
 8000d7c:	08000deb 	.word	0x08000deb
 8000d80:	08000d99 	.word	0x08000d99
 8000d84:	08000dad 	.word	0x08000dad
 8000d88:	4a79      	ldr	r2, [pc, #484]	; (8000f70 <HAL_GPIO_Init+0x2b4>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d013      	beq.n	8000db6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d8e:	e02c      	b.n	8000dea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	623b      	str	r3, [r7, #32]
          break;
 8000d96:	e029      	b.n	8000dec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	68db      	ldr	r3, [r3, #12]
 8000d9c:	3304      	adds	r3, #4
 8000d9e:	623b      	str	r3, [r7, #32]
          break;
 8000da0:	e024      	b.n	8000dec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	68db      	ldr	r3, [r3, #12]
 8000da6:	3308      	adds	r3, #8
 8000da8:	623b      	str	r3, [r7, #32]
          break;
 8000daa:	e01f      	b.n	8000dec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	330c      	adds	r3, #12
 8000db2:	623b      	str	r3, [r7, #32]
          break;
 8000db4:	e01a      	b.n	8000dec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	689b      	ldr	r3, [r3, #8]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d102      	bne.n	8000dc4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000dbe:	2304      	movs	r3, #4
 8000dc0:	623b      	str	r3, [r7, #32]
          break;
 8000dc2:	e013      	b.n	8000dec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	689b      	ldr	r3, [r3, #8]
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d105      	bne.n	8000dd8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000dcc:	2308      	movs	r3, #8
 8000dce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	69fa      	ldr	r2, [r7, #28]
 8000dd4:	611a      	str	r2, [r3, #16]
          break;
 8000dd6:	e009      	b.n	8000dec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000dd8:	2308      	movs	r3, #8
 8000dda:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	69fa      	ldr	r2, [r7, #28]
 8000de0:	615a      	str	r2, [r3, #20]
          break;
 8000de2:	e003      	b.n	8000dec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000de4:	2300      	movs	r3, #0
 8000de6:	623b      	str	r3, [r7, #32]
          break;
 8000de8:	e000      	b.n	8000dec <HAL_GPIO_Init+0x130>
          break;
 8000dea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000dec:	69bb      	ldr	r3, [r7, #24]
 8000dee:	2bff      	cmp	r3, #255	; 0xff
 8000df0:	d801      	bhi.n	8000df6 <HAL_GPIO_Init+0x13a>
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	e001      	b.n	8000dfa <HAL_GPIO_Init+0x13e>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	3304      	adds	r3, #4
 8000dfa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000dfc:	69bb      	ldr	r3, [r7, #24]
 8000dfe:	2bff      	cmp	r3, #255	; 0xff
 8000e00:	d802      	bhi.n	8000e08 <HAL_GPIO_Init+0x14c>
 8000e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e04:	009b      	lsls	r3, r3, #2
 8000e06:	e002      	b.n	8000e0e <HAL_GPIO_Init+0x152>
 8000e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e0a:	3b08      	subs	r3, #8
 8000e0c:	009b      	lsls	r3, r3, #2
 8000e0e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	210f      	movs	r1, #15
 8000e16:	693b      	ldr	r3, [r7, #16]
 8000e18:	fa01 f303 	lsl.w	r3, r1, r3
 8000e1c:	43db      	mvns	r3, r3
 8000e1e:	401a      	ands	r2, r3
 8000e20:	6a39      	ldr	r1, [r7, #32]
 8000e22:	693b      	ldr	r3, [r7, #16]
 8000e24:	fa01 f303 	lsl.w	r3, r1, r3
 8000e28:	431a      	orrs	r2, r3
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	f000 80b1 	beq.w	8000f9e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e3c:	4b4d      	ldr	r3, [pc, #308]	; (8000f74 <HAL_GPIO_Init+0x2b8>)
 8000e3e:	699b      	ldr	r3, [r3, #24]
 8000e40:	4a4c      	ldr	r2, [pc, #304]	; (8000f74 <HAL_GPIO_Init+0x2b8>)
 8000e42:	f043 0301 	orr.w	r3, r3, #1
 8000e46:	6193      	str	r3, [r2, #24]
 8000e48:	4b4a      	ldr	r3, [pc, #296]	; (8000f74 <HAL_GPIO_Init+0x2b8>)
 8000e4a:	699b      	ldr	r3, [r3, #24]
 8000e4c:	f003 0301 	and.w	r3, r3, #1
 8000e50:	60bb      	str	r3, [r7, #8]
 8000e52:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e54:	4a48      	ldr	r2, [pc, #288]	; (8000f78 <HAL_GPIO_Init+0x2bc>)
 8000e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e58:	089b      	lsrs	r3, r3, #2
 8000e5a:	3302      	adds	r3, #2
 8000e5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e60:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e64:	f003 0303 	and.w	r3, r3, #3
 8000e68:	009b      	lsls	r3, r3, #2
 8000e6a:	220f      	movs	r2, #15
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	43db      	mvns	r3, r3
 8000e72:	68fa      	ldr	r2, [r7, #12]
 8000e74:	4013      	ands	r3, r2
 8000e76:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	4a40      	ldr	r2, [pc, #256]	; (8000f7c <HAL_GPIO_Init+0x2c0>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d013      	beq.n	8000ea8 <HAL_GPIO_Init+0x1ec>
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	4a3f      	ldr	r2, [pc, #252]	; (8000f80 <HAL_GPIO_Init+0x2c4>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d00d      	beq.n	8000ea4 <HAL_GPIO_Init+0x1e8>
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	4a3e      	ldr	r2, [pc, #248]	; (8000f84 <HAL_GPIO_Init+0x2c8>)
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d007      	beq.n	8000ea0 <HAL_GPIO_Init+0x1e4>
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	4a3d      	ldr	r2, [pc, #244]	; (8000f88 <HAL_GPIO_Init+0x2cc>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d101      	bne.n	8000e9c <HAL_GPIO_Init+0x1e0>
 8000e98:	2303      	movs	r3, #3
 8000e9a:	e006      	b.n	8000eaa <HAL_GPIO_Init+0x1ee>
 8000e9c:	2304      	movs	r3, #4
 8000e9e:	e004      	b.n	8000eaa <HAL_GPIO_Init+0x1ee>
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	e002      	b.n	8000eaa <HAL_GPIO_Init+0x1ee>
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	e000      	b.n	8000eaa <HAL_GPIO_Init+0x1ee>
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000eac:	f002 0203 	and.w	r2, r2, #3
 8000eb0:	0092      	lsls	r2, r2, #2
 8000eb2:	4093      	lsls	r3, r2
 8000eb4:	68fa      	ldr	r2, [r7, #12]
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000eba:	492f      	ldr	r1, [pc, #188]	; (8000f78 <HAL_GPIO_Init+0x2bc>)
 8000ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ebe:	089b      	lsrs	r3, r3, #2
 8000ec0:	3302      	adds	r3, #2
 8000ec2:	68fa      	ldr	r2, [r7, #12]
 8000ec4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d006      	beq.n	8000ee2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ed4:	4b2d      	ldr	r3, [pc, #180]	; (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000ed6:	689a      	ldr	r2, [r3, #8]
 8000ed8:	492c      	ldr	r1, [pc, #176]	; (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000eda:	69bb      	ldr	r3, [r7, #24]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	608b      	str	r3, [r1, #8]
 8000ee0:	e006      	b.n	8000ef0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ee2:	4b2a      	ldr	r3, [pc, #168]	; (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000ee4:	689a      	ldr	r2, [r3, #8]
 8000ee6:	69bb      	ldr	r3, [r7, #24]
 8000ee8:	43db      	mvns	r3, r3
 8000eea:	4928      	ldr	r1, [pc, #160]	; (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000eec:	4013      	ands	r3, r2
 8000eee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d006      	beq.n	8000f0a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000efc:	4b23      	ldr	r3, [pc, #140]	; (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000efe:	68da      	ldr	r2, [r3, #12]
 8000f00:	4922      	ldr	r1, [pc, #136]	; (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000f02:	69bb      	ldr	r3, [r7, #24]
 8000f04:	4313      	orrs	r3, r2
 8000f06:	60cb      	str	r3, [r1, #12]
 8000f08:	e006      	b.n	8000f18 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f0a:	4b20      	ldr	r3, [pc, #128]	; (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000f0c:	68da      	ldr	r2, [r3, #12]
 8000f0e:	69bb      	ldr	r3, [r7, #24]
 8000f10:	43db      	mvns	r3, r3
 8000f12:	491e      	ldr	r1, [pc, #120]	; (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000f14:	4013      	ands	r3, r2
 8000f16:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d006      	beq.n	8000f32 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f24:	4b19      	ldr	r3, [pc, #100]	; (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000f26:	685a      	ldr	r2, [r3, #4]
 8000f28:	4918      	ldr	r1, [pc, #96]	; (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000f2a:	69bb      	ldr	r3, [r7, #24]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	604b      	str	r3, [r1, #4]
 8000f30:	e006      	b.n	8000f40 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f32:	4b16      	ldr	r3, [pc, #88]	; (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000f34:	685a      	ldr	r2, [r3, #4]
 8000f36:	69bb      	ldr	r3, [r7, #24]
 8000f38:	43db      	mvns	r3, r3
 8000f3a:	4914      	ldr	r1, [pc, #80]	; (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d021      	beq.n	8000f90 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f4c:	4b0f      	ldr	r3, [pc, #60]	; (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	490e      	ldr	r1, [pc, #56]	; (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000f52:	69bb      	ldr	r3, [r7, #24]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	600b      	str	r3, [r1, #0]
 8000f58:	e021      	b.n	8000f9e <HAL_GPIO_Init+0x2e2>
 8000f5a:	bf00      	nop
 8000f5c:	10320000 	.word	0x10320000
 8000f60:	10310000 	.word	0x10310000
 8000f64:	10220000 	.word	0x10220000
 8000f68:	10210000 	.word	0x10210000
 8000f6c:	10120000 	.word	0x10120000
 8000f70:	10110000 	.word	0x10110000
 8000f74:	40021000 	.word	0x40021000
 8000f78:	40010000 	.word	0x40010000
 8000f7c:	40010800 	.word	0x40010800
 8000f80:	40010c00 	.word	0x40010c00
 8000f84:	40011000 	.word	0x40011000
 8000f88:	40011400 	.word	0x40011400
 8000f8c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f90:	4b0b      	ldr	r3, [pc, #44]	; (8000fc0 <HAL_GPIO_Init+0x304>)
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	69bb      	ldr	r3, [r7, #24]
 8000f96:	43db      	mvns	r3, r3
 8000f98:	4909      	ldr	r1, [pc, #36]	; (8000fc0 <HAL_GPIO_Init+0x304>)
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000faa:	fa22 f303 	lsr.w	r3, r2, r3
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	f47f ae8e 	bne.w	8000cd0 <HAL_GPIO_Init+0x14>
  }
}
 8000fb4:	bf00      	nop
 8000fb6:	bf00      	nop
 8000fb8:	372c      	adds	r7, #44	; 0x2c
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bc80      	pop	{r7}
 8000fbe:	4770      	bx	lr
 8000fc0:	40010400 	.word	0x40010400

08000fc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	460b      	mov	r3, r1
 8000fce:	807b      	strh	r3, [r7, #2]
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fd4:	787b      	ldrb	r3, [r7, #1]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d003      	beq.n	8000fe2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fda:	887a      	ldrh	r2, [r7, #2]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000fe0:	e003      	b.n	8000fea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000fe2:	887b      	ldrh	r3, [r7, #2]
 8000fe4:	041a      	lsls	r2, r3, #16
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	611a      	str	r2, [r3, #16]
}
 8000fea:	bf00      	nop
 8000fec:	370c      	adds	r7, #12
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bc80      	pop	{r7}
 8000ff2:	4770      	bx	lr

08000ff4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001006:	887a      	ldrh	r2, [r7, #2]
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	4013      	ands	r3, r2
 800100c:	041a      	lsls	r2, r3, #16
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	43d9      	mvns	r1, r3
 8001012:	887b      	ldrh	r3, [r7, #2]
 8001014:	400b      	ands	r3, r1
 8001016:	431a      	orrs	r2, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	611a      	str	r2, [r3, #16]
}
 800101c:	bf00      	nop
 800101e:	3714      	adds	r7, #20
 8001020:	46bd      	mov	sp, r7
 8001022:	bc80      	pop	{r7}
 8001024:	4770      	bx	lr
	...

08001028 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b086      	sub	sp, #24
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d101      	bne.n	800103a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
 8001038:	e272      	b.n	8001520 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f003 0301 	and.w	r3, r3, #1
 8001042:	2b00      	cmp	r3, #0
 8001044:	f000 8087 	beq.w	8001156 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001048:	4b92      	ldr	r3, [pc, #584]	; (8001294 <HAL_RCC_OscConfig+0x26c>)
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f003 030c 	and.w	r3, r3, #12
 8001050:	2b04      	cmp	r3, #4
 8001052:	d00c      	beq.n	800106e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001054:	4b8f      	ldr	r3, [pc, #572]	; (8001294 <HAL_RCC_OscConfig+0x26c>)
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f003 030c 	and.w	r3, r3, #12
 800105c:	2b08      	cmp	r3, #8
 800105e:	d112      	bne.n	8001086 <HAL_RCC_OscConfig+0x5e>
 8001060:	4b8c      	ldr	r3, [pc, #560]	; (8001294 <HAL_RCC_OscConfig+0x26c>)
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001068:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800106c:	d10b      	bne.n	8001086 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800106e:	4b89      	ldr	r3, [pc, #548]	; (8001294 <HAL_RCC_OscConfig+0x26c>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001076:	2b00      	cmp	r3, #0
 8001078:	d06c      	beq.n	8001154 <HAL_RCC_OscConfig+0x12c>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d168      	bne.n	8001154 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	e24c      	b.n	8001520 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800108e:	d106      	bne.n	800109e <HAL_RCC_OscConfig+0x76>
 8001090:	4b80      	ldr	r3, [pc, #512]	; (8001294 <HAL_RCC_OscConfig+0x26c>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a7f      	ldr	r2, [pc, #508]	; (8001294 <HAL_RCC_OscConfig+0x26c>)
 8001096:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800109a:	6013      	str	r3, [r2, #0]
 800109c:	e02e      	b.n	80010fc <HAL_RCC_OscConfig+0xd4>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d10c      	bne.n	80010c0 <HAL_RCC_OscConfig+0x98>
 80010a6:	4b7b      	ldr	r3, [pc, #492]	; (8001294 <HAL_RCC_OscConfig+0x26c>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a7a      	ldr	r2, [pc, #488]	; (8001294 <HAL_RCC_OscConfig+0x26c>)
 80010ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010b0:	6013      	str	r3, [r2, #0]
 80010b2:	4b78      	ldr	r3, [pc, #480]	; (8001294 <HAL_RCC_OscConfig+0x26c>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4a77      	ldr	r2, [pc, #476]	; (8001294 <HAL_RCC_OscConfig+0x26c>)
 80010b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010bc:	6013      	str	r3, [r2, #0]
 80010be:	e01d      	b.n	80010fc <HAL_RCC_OscConfig+0xd4>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010c8:	d10c      	bne.n	80010e4 <HAL_RCC_OscConfig+0xbc>
 80010ca:	4b72      	ldr	r3, [pc, #456]	; (8001294 <HAL_RCC_OscConfig+0x26c>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a71      	ldr	r2, [pc, #452]	; (8001294 <HAL_RCC_OscConfig+0x26c>)
 80010d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010d4:	6013      	str	r3, [r2, #0]
 80010d6:	4b6f      	ldr	r3, [pc, #444]	; (8001294 <HAL_RCC_OscConfig+0x26c>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a6e      	ldr	r2, [pc, #440]	; (8001294 <HAL_RCC_OscConfig+0x26c>)
 80010dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010e0:	6013      	str	r3, [r2, #0]
 80010e2:	e00b      	b.n	80010fc <HAL_RCC_OscConfig+0xd4>
 80010e4:	4b6b      	ldr	r3, [pc, #428]	; (8001294 <HAL_RCC_OscConfig+0x26c>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a6a      	ldr	r2, [pc, #424]	; (8001294 <HAL_RCC_OscConfig+0x26c>)
 80010ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010ee:	6013      	str	r3, [r2, #0]
 80010f0:	4b68      	ldr	r3, [pc, #416]	; (8001294 <HAL_RCC_OscConfig+0x26c>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a67      	ldr	r2, [pc, #412]	; (8001294 <HAL_RCC_OscConfig+0x26c>)
 80010f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d013      	beq.n	800112c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001104:	f7ff fc10 	bl	8000928 <HAL_GetTick>
 8001108:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800110a:	e008      	b.n	800111e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800110c:	f7ff fc0c 	bl	8000928 <HAL_GetTick>
 8001110:	4602      	mov	r2, r0
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	2b64      	cmp	r3, #100	; 0x64
 8001118:	d901      	bls.n	800111e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800111a:	2303      	movs	r3, #3
 800111c:	e200      	b.n	8001520 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800111e:	4b5d      	ldr	r3, [pc, #372]	; (8001294 <HAL_RCC_OscConfig+0x26c>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001126:	2b00      	cmp	r3, #0
 8001128:	d0f0      	beq.n	800110c <HAL_RCC_OscConfig+0xe4>
 800112a:	e014      	b.n	8001156 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800112c:	f7ff fbfc 	bl	8000928 <HAL_GetTick>
 8001130:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001132:	e008      	b.n	8001146 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001134:	f7ff fbf8 	bl	8000928 <HAL_GetTick>
 8001138:	4602      	mov	r2, r0
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	2b64      	cmp	r3, #100	; 0x64
 8001140:	d901      	bls.n	8001146 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001142:	2303      	movs	r3, #3
 8001144:	e1ec      	b.n	8001520 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001146:	4b53      	ldr	r3, [pc, #332]	; (8001294 <HAL_RCC_OscConfig+0x26c>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800114e:	2b00      	cmp	r3, #0
 8001150:	d1f0      	bne.n	8001134 <HAL_RCC_OscConfig+0x10c>
 8001152:	e000      	b.n	8001156 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001154:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f003 0302 	and.w	r3, r3, #2
 800115e:	2b00      	cmp	r3, #0
 8001160:	d063      	beq.n	800122a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001162:	4b4c      	ldr	r3, [pc, #304]	; (8001294 <HAL_RCC_OscConfig+0x26c>)
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f003 030c 	and.w	r3, r3, #12
 800116a:	2b00      	cmp	r3, #0
 800116c:	d00b      	beq.n	8001186 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800116e:	4b49      	ldr	r3, [pc, #292]	; (8001294 <HAL_RCC_OscConfig+0x26c>)
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f003 030c 	and.w	r3, r3, #12
 8001176:	2b08      	cmp	r3, #8
 8001178:	d11c      	bne.n	80011b4 <HAL_RCC_OscConfig+0x18c>
 800117a:	4b46      	ldr	r3, [pc, #280]	; (8001294 <HAL_RCC_OscConfig+0x26c>)
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001182:	2b00      	cmp	r3, #0
 8001184:	d116      	bne.n	80011b4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001186:	4b43      	ldr	r3, [pc, #268]	; (8001294 <HAL_RCC_OscConfig+0x26c>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f003 0302 	and.w	r3, r3, #2
 800118e:	2b00      	cmp	r3, #0
 8001190:	d005      	beq.n	800119e <HAL_RCC_OscConfig+0x176>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	691b      	ldr	r3, [r3, #16]
 8001196:	2b01      	cmp	r3, #1
 8001198:	d001      	beq.n	800119e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	e1c0      	b.n	8001520 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800119e:	4b3d      	ldr	r3, [pc, #244]	; (8001294 <HAL_RCC_OscConfig+0x26c>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	695b      	ldr	r3, [r3, #20]
 80011aa:	00db      	lsls	r3, r3, #3
 80011ac:	4939      	ldr	r1, [pc, #228]	; (8001294 <HAL_RCC_OscConfig+0x26c>)
 80011ae:	4313      	orrs	r3, r2
 80011b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011b2:	e03a      	b.n	800122a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	691b      	ldr	r3, [r3, #16]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d020      	beq.n	80011fe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011bc:	4b36      	ldr	r3, [pc, #216]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 80011be:	2201      	movs	r2, #1
 80011c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011c2:	f7ff fbb1 	bl	8000928 <HAL_GetTick>
 80011c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011c8:	e008      	b.n	80011dc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011ca:	f7ff fbad 	bl	8000928 <HAL_GetTick>
 80011ce:	4602      	mov	r2, r0
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	1ad3      	subs	r3, r2, r3
 80011d4:	2b02      	cmp	r3, #2
 80011d6:	d901      	bls.n	80011dc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80011d8:	2303      	movs	r3, #3
 80011da:	e1a1      	b.n	8001520 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011dc:	4b2d      	ldr	r3, [pc, #180]	; (8001294 <HAL_RCC_OscConfig+0x26c>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f003 0302 	and.w	r3, r3, #2
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d0f0      	beq.n	80011ca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011e8:	4b2a      	ldr	r3, [pc, #168]	; (8001294 <HAL_RCC_OscConfig+0x26c>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	695b      	ldr	r3, [r3, #20]
 80011f4:	00db      	lsls	r3, r3, #3
 80011f6:	4927      	ldr	r1, [pc, #156]	; (8001294 <HAL_RCC_OscConfig+0x26c>)
 80011f8:	4313      	orrs	r3, r2
 80011fa:	600b      	str	r3, [r1, #0]
 80011fc:	e015      	b.n	800122a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011fe:	4b26      	ldr	r3, [pc, #152]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001204:	f7ff fb90 	bl	8000928 <HAL_GetTick>
 8001208:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800120a:	e008      	b.n	800121e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800120c:	f7ff fb8c 	bl	8000928 <HAL_GetTick>
 8001210:	4602      	mov	r2, r0
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	2b02      	cmp	r3, #2
 8001218:	d901      	bls.n	800121e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800121a:	2303      	movs	r3, #3
 800121c:	e180      	b.n	8001520 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800121e:	4b1d      	ldr	r3, [pc, #116]	; (8001294 <HAL_RCC_OscConfig+0x26c>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f003 0302 	and.w	r3, r3, #2
 8001226:	2b00      	cmp	r3, #0
 8001228:	d1f0      	bne.n	800120c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f003 0308 	and.w	r3, r3, #8
 8001232:	2b00      	cmp	r3, #0
 8001234:	d03a      	beq.n	80012ac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	699b      	ldr	r3, [r3, #24]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d019      	beq.n	8001272 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800123e:	4b17      	ldr	r3, [pc, #92]	; (800129c <HAL_RCC_OscConfig+0x274>)
 8001240:	2201      	movs	r2, #1
 8001242:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001244:	f7ff fb70 	bl	8000928 <HAL_GetTick>
 8001248:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800124a:	e008      	b.n	800125e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800124c:	f7ff fb6c 	bl	8000928 <HAL_GetTick>
 8001250:	4602      	mov	r2, r0
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	2b02      	cmp	r3, #2
 8001258:	d901      	bls.n	800125e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800125a:	2303      	movs	r3, #3
 800125c:	e160      	b.n	8001520 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800125e:	4b0d      	ldr	r3, [pc, #52]	; (8001294 <HAL_RCC_OscConfig+0x26c>)
 8001260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001262:	f003 0302 	and.w	r3, r3, #2
 8001266:	2b00      	cmp	r3, #0
 8001268:	d0f0      	beq.n	800124c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800126a:	2001      	movs	r0, #1
 800126c:	f000 face 	bl	800180c <RCC_Delay>
 8001270:	e01c      	b.n	80012ac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001272:	4b0a      	ldr	r3, [pc, #40]	; (800129c <HAL_RCC_OscConfig+0x274>)
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001278:	f7ff fb56 	bl	8000928 <HAL_GetTick>
 800127c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800127e:	e00f      	b.n	80012a0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001280:	f7ff fb52 	bl	8000928 <HAL_GetTick>
 8001284:	4602      	mov	r2, r0
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	2b02      	cmp	r3, #2
 800128c:	d908      	bls.n	80012a0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800128e:	2303      	movs	r3, #3
 8001290:	e146      	b.n	8001520 <HAL_RCC_OscConfig+0x4f8>
 8001292:	bf00      	nop
 8001294:	40021000 	.word	0x40021000
 8001298:	42420000 	.word	0x42420000
 800129c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012a0:	4b92      	ldr	r3, [pc, #584]	; (80014ec <HAL_RCC_OscConfig+0x4c4>)
 80012a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a4:	f003 0302 	and.w	r3, r3, #2
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d1e9      	bne.n	8001280 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f003 0304 	and.w	r3, r3, #4
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	f000 80a6 	beq.w	8001406 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012ba:	2300      	movs	r3, #0
 80012bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012be:	4b8b      	ldr	r3, [pc, #556]	; (80014ec <HAL_RCC_OscConfig+0x4c4>)
 80012c0:	69db      	ldr	r3, [r3, #28]
 80012c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d10d      	bne.n	80012e6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012ca:	4b88      	ldr	r3, [pc, #544]	; (80014ec <HAL_RCC_OscConfig+0x4c4>)
 80012cc:	69db      	ldr	r3, [r3, #28]
 80012ce:	4a87      	ldr	r2, [pc, #540]	; (80014ec <HAL_RCC_OscConfig+0x4c4>)
 80012d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012d4:	61d3      	str	r3, [r2, #28]
 80012d6:	4b85      	ldr	r3, [pc, #532]	; (80014ec <HAL_RCC_OscConfig+0x4c4>)
 80012d8:	69db      	ldr	r3, [r3, #28]
 80012da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012de:	60bb      	str	r3, [r7, #8]
 80012e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012e2:	2301      	movs	r3, #1
 80012e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012e6:	4b82      	ldr	r3, [pc, #520]	; (80014f0 <HAL_RCC_OscConfig+0x4c8>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d118      	bne.n	8001324 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012f2:	4b7f      	ldr	r3, [pc, #508]	; (80014f0 <HAL_RCC_OscConfig+0x4c8>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a7e      	ldr	r2, [pc, #504]	; (80014f0 <HAL_RCC_OscConfig+0x4c8>)
 80012f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012fe:	f7ff fb13 	bl	8000928 <HAL_GetTick>
 8001302:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001304:	e008      	b.n	8001318 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001306:	f7ff fb0f 	bl	8000928 <HAL_GetTick>
 800130a:	4602      	mov	r2, r0
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	1ad3      	subs	r3, r2, r3
 8001310:	2b64      	cmp	r3, #100	; 0x64
 8001312:	d901      	bls.n	8001318 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001314:	2303      	movs	r3, #3
 8001316:	e103      	b.n	8001520 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001318:	4b75      	ldr	r3, [pc, #468]	; (80014f0 <HAL_RCC_OscConfig+0x4c8>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001320:	2b00      	cmp	r3, #0
 8001322:	d0f0      	beq.n	8001306 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	2b01      	cmp	r3, #1
 800132a:	d106      	bne.n	800133a <HAL_RCC_OscConfig+0x312>
 800132c:	4b6f      	ldr	r3, [pc, #444]	; (80014ec <HAL_RCC_OscConfig+0x4c4>)
 800132e:	6a1b      	ldr	r3, [r3, #32]
 8001330:	4a6e      	ldr	r2, [pc, #440]	; (80014ec <HAL_RCC_OscConfig+0x4c4>)
 8001332:	f043 0301 	orr.w	r3, r3, #1
 8001336:	6213      	str	r3, [r2, #32]
 8001338:	e02d      	b.n	8001396 <HAL_RCC_OscConfig+0x36e>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	68db      	ldr	r3, [r3, #12]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d10c      	bne.n	800135c <HAL_RCC_OscConfig+0x334>
 8001342:	4b6a      	ldr	r3, [pc, #424]	; (80014ec <HAL_RCC_OscConfig+0x4c4>)
 8001344:	6a1b      	ldr	r3, [r3, #32]
 8001346:	4a69      	ldr	r2, [pc, #420]	; (80014ec <HAL_RCC_OscConfig+0x4c4>)
 8001348:	f023 0301 	bic.w	r3, r3, #1
 800134c:	6213      	str	r3, [r2, #32]
 800134e:	4b67      	ldr	r3, [pc, #412]	; (80014ec <HAL_RCC_OscConfig+0x4c4>)
 8001350:	6a1b      	ldr	r3, [r3, #32]
 8001352:	4a66      	ldr	r2, [pc, #408]	; (80014ec <HAL_RCC_OscConfig+0x4c4>)
 8001354:	f023 0304 	bic.w	r3, r3, #4
 8001358:	6213      	str	r3, [r2, #32]
 800135a:	e01c      	b.n	8001396 <HAL_RCC_OscConfig+0x36e>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	2b05      	cmp	r3, #5
 8001362:	d10c      	bne.n	800137e <HAL_RCC_OscConfig+0x356>
 8001364:	4b61      	ldr	r3, [pc, #388]	; (80014ec <HAL_RCC_OscConfig+0x4c4>)
 8001366:	6a1b      	ldr	r3, [r3, #32]
 8001368:	4a60      	ldr	r2, [pc, #384]	; (80014ec <HAL_RCC_OscConfig+0x4c4>)
 800136a:	f043 0304 	orr.w	r3, r3, #4
 800136e:	6213      	str	r3, [r2, #32]
 8001370:	4b5e      	ldr	r3, [pc, #376]	; (80014ec <HAL_RCC_OscConfig+0x4c4>)
 8001372:	6a1b      	ldr	r3, [r3, #32]
 8001374:	4a5d      	ldr	r2, [pc, #372]	; (80014ec <HAL_RCC_OscConfig+0x4c4>)
 8001376:	f043 0301 	orr.w	r3, r3, #1
 800137a:	6213      	str	r3, [r2, #32]
 800137c:	e00b      	b.n	8001396 <HAL_RCC_OscConfig+0x36e>
 800137e:	4b5b      	ldr	r3, [pc, #364]	; (80014ec <HAL_RCC_OscConfig+0x4c4>)
 8001380:	6a1b      	ldr	r3, [r3, #32]
 8001382:	4a5a      	ldr	r2, [pc, #360]	; (80014ec <HAL_RCC_OscConfig+0x4c4>)
 8001384:	f023 0301 	bic.w	r3, r3, #1
 8001388:	6213      	str	r3, [r2, #32]
 800138a:	4b58      	ldr	r3, [pc, #352]	; (80014ec <HAL_RCC_OscConfig+0x4c4>)
 800138c:	6a1b      	ldr	r3, [r3, #32]
 800138e:	4a57      	ldr	r2, [pc, #348]	; (80014ec <HAL_RCC_OscConfig+0x4c4>)
 8001390:	f023 0304 	bic.w	r3, r3, #4
 8001394:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	68db      	ldr	r3, [r3, #12]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d015      	beq.n	80013ca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800139e:	f7ff fac3 	bl	8000928 <HAL_GetTick>
 80013a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013a4:	e00a      	b.n	80013bc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013a6:	f7ff fabf 	bl	8000928 <HAL_GetTick>
 80013aa:	4602      	mov	r2, r0
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d901      	bls.n	80013bc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80013b8:	2303      	movs	r3, #3
 80013ba:	e0b1      	b.n	8001520 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013bc:	4b4b      	ldr	r3, [pc, #300]	; (80014ec <HAL_RCC_OscConfig+0x4c4>)
 80013be:	6a1b      	ldr	r3, [r3, #32]
 80013c0:	f003 0302 	and.w	r3, r3, #2
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d0ee      	beq.n	80013a6 <HAL_RCC_OscConfig+0x37e>
 80013c8:	e014      	b.n	80013f4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ca:	f7ff faad 	bl	8000928 <HAL_GetTick>
 80013ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013d0:	e00a      	b.n	80013e8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013d2:	f7ff faa9 	bl	8000928 <HAL_GetTick>
 80013d6:	4602      	mov	r2, r0
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	1ad3      	subs	r3, r2, r3
 80013dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d901      	bls.n	80013e8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80013e4:	2303      	movs	r3, #3
 80013e6:	e09b      	b.n	8001520 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013e8:	4b40      	ldr	r3, [pc, #256]	; (80014ec <HAL_RCC_OscConfig+0x4c4>)
 80013ea:	6a1b      	ldr	r3, [r3, #32]
 80013ec:	f003 0302 	and.w	r3, r3, #2
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d1ee      	bne.n	80013d2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80013f4:	7dfb      	ldrb	r3, [r7, #23]
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d105      	bne.n	8001406 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013fa:	4b3c      	ldr	r3, [pc, #240]	; (80014ec <HAL_RCC_OscConfig+0x4c4>)
 80013fc:	69db      	ldr	r3, [r3, #28]
 80013fe:	4a3b      	ldr	r2, [pc, #236]	; (80014ec <HAL_RCC_OscConfig+0x4c4>)
 8001400:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001404:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	69db      	ldr	r3, [r3, #28]
 800140a:	2b00      	cmp	r3, #0
 800140c:	f000 8087 	beq.w	800151e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001410:	4b36      	ldr	r3, [pc, #216]	; (80014ec <HAL_RCC_OscConfig+0x4c4>)
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f003 030c 	and.w	r3, r3, #12
 8001418:	2b08      	cmp	r3, #8
 800141a:	d061      	beq.n	80014e0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	69db      	ldr	r3, [r3, #28]
 8001420:	2b02      	cmp	r3, #2
 8001422:	d146      	bne.n	80014b2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001424:	4b33      	ldr	r3, [pc, #204]	; (80014f4 <HAL_RCC_OscConfig+0x4cc>)
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800142a:	f7ff fa7d 	bl	8000928 <HAL_GetTick>
 800142e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001430:	e008      	b.n	8001444 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001432:	f7ff fa79 	bl	8000928 <HAL_GetTick>
 8001436:	4602      	mov	r2, r0
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	1ad3      	subs	r3, r2, r3
 800143c:	2b02      	cmp	r3, #2
 800143e:	d901      	bls.n	8001444 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001440:	2303      	movs	r3, #3
 8001442:	e06d      	b.n	8001520 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001444:	4b29      	ldr	r3, [pc, #164]	; (80014ec <HAL_RCC_OscConfig+0x4c4>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800144c:	2b00      	cmp	r3, #0
 800144e:	d1f0      	bne.n	8001432 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6a1b      	ldr	r3, [r3, #32]
 8001454:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001458:	d108      	bne.n	800146c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800145a:	4b24      	ldr	r3, [pc, #144]	; (80014ec <HAL_RCC_OscConfig+0x4c4>)
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	4921      	ldr	r1, [pc, #132]	; (80014ec <HAL_RCC_OscConfig+0x4c4>)
 8001468:	4313      	orrs	r3, r2
 800146a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800146c:	4b1f      	ldr	r3, [pc, #124]	; (80014ec <HAL_RCC_OscConfig+0x4c4>)
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6a19      	ldr	r1, [r3, #32]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800147c:	430b      	orrs	r3, r1
 800147e:	491b      	ldr	r1, [pc, #108]	; (80014ec <HAL_RCC_OscConfig+0x4c4>)
 8001480:	4313      	orrs	r3, r2
 8001482:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001484:	4b1b      	ldr	r3, [pc, #108]	; (80014f4 <HAL_RCC_OscConfig+0x4cc>)
 8001486:	2201      	movs	r2, #1
 8001488:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800148a:	f7ff fa4d 	bl	8000928 <HAL_GetTick>
 800148e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001490:	e008      	b.n	80014a4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001492:	f7ff fa49 	bl	8000928 <HAL_GetTick>
 8001496:	4602      	mov	r2, r0
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	2b02      	cmp	r3, #2
 800149e:	d901      	bls.n	80014a4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80014a0:	2303      	movs	r3, #3
 80014a2:	e03d      	b.n	8001520 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014a4:	4b11      	ldr	r3, [pc, #68]	; (80014ec <HAL_RCC_OscConfig+0x4c4>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d0f0      	beq.n	8001492 <HAL_RCC_OscConfig+0x46a>
 80014b0:	e035      	b.n	800151e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014b2:	4b10      	ldr	r3, [pc, #64]	; (80014f4 <HAL_RCC_OscConfig+0x4cc>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b8:	f7ff fa36 	bl	8000928 <HAL_GetTick>
 80014bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014be:	e008      	b.n	80014d2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014c0:	f7ff fa32 	bl	8000928 <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d901      	bls.n	80014d2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80014ce:	2303      	movs	r3, #3
 80014d0:	e026      	b.n	8001520 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014d2:	4b06      	ldr	r3, [pc, #24]	; (80014ec <HAL_RCC_OscConfig+0x4c4>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d1f0      	bne.n	80014c0 <HAL_RCC_OscConfig+0x498>
 80014de:	e01e      	b.n	800151e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	69db      	ldr	r3, [r3, #28]
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d107      	bne.n	80014f8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80014e8:	2301      	movs	r3, #1
 80014ea:	e019      	b.n	8001520 <HAL_RCC_OscConfig+0x4f8>
 80014ec:	40021000 	.word	0x40021000
 80014f0:	40007000 	.word	0x40007000
 80014f4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80014f8:	4b0b      	ldr	r3, [pc, #44]	; (8001528 <HAL_RCC_OscConfig+0x500>)
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6a1b      	ldr	r3, [r3, #32]
 8001508:	429a      	cmp	r2, r3
 800150a:	d106      	bne.n	800151a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001516:	429a      	cmp	r2, r3
 8001518:	d001      	beq.n	800151e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e000      	b.n	8001520 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800151e:	2300      	movs	r3, #0
}
 8001520:	4618      	mov	r0, r3
 8001522:	3718      	adds	r7, #24
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	40021000 	.word	0x40021000

0800152c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d101      	bne.n	8001540 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	e0d0      	b.n	80016e2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001540:	4b6a      	ldr	r3, [pc, #424]	; (80016ec <HAL_RCC_ClockConfig+0x1c0>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 0307 	and.w	r3, r3, #7
 8001548:	683a      	ldr	r2, [r7, #0]
 800154a:	429a      	cmp	r2, r3
 800154c:	d910      	bls.n	8001570 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800154e:	4b67      	ldr	r3, [pc, #412]	; (80016ec <HAL_RCC_ClockConfig+0x1c0>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f023 0207 	bic.w	r2, r3, #7
 8001556:	4965      	ldr	r1, [pc, #404]	; (80016ec <HAL_RCC_ClockConfig+0x1c0>)
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	4313      	orrs	r3, r2
 800155c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800155e:	4b63      	ldr	r3, [pc, #396]	; (80016ec <HAL_RCC_ClockConfig+0x1c0>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 0307 	and.w	r3, r3, #7
 8001566:	683a      	ldr	r2, [r7, #0]
 8001568:	429a      	cmp	r2, r3
 800156a:	d001      	beq.n	8001570 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	e0b8      	b.n	80016e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 0302 	and.w	r3, r3, #2
 8001578:	2b00      	cmp	r3, #0
 800157a:	d020      	beq.n	80015be <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 0304 	and.w	r3, r3, #4
 8001584:	2b00      	cmp	r3, #0
 8001586:	d005      	beq.n	8001594 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001588:	4b59      	ldr	r3, [pc, #356]	; (80016f0 <HAL_RCC_ClockConfig+0x1c4>)
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	4a58      	ldr	r2, [pc, #352]	; (80016f0 <HAL_RCC_ClockConfig+0x1c4>)
 800158e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001592:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0308 	and.w	r3, r3, #8
 800159c:	2b00      	cmp	r3, #0
 800159e:	d005      	beq.n	80015ac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015a0:	4b53      	ldr	r3, [pc, #332]	; (80016f0 <HAL_RCC_ClockConfig+0x1c4>)
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	4a52      	ldr	r2, [pc, #328]	; (80016f0 <HAL_RCC_ClockConfig+0x1c4>)
 80015a6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80015aa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015ac:	4b50      	ldr	r3, [pc, #320]	; (80016f0 <HAL_RCC_ClockConfig+0x1c4>)
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	494d      	ldr	r1, [pc, #308]	; (80016f0 <HAL_RCC_ClockConfig+0x1c4>)
 80015ba:	4313      	orrs	r3, r2
 80015bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d040      	beq.n	800164c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d107      	bne.n	80015e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015d2:	4b47      	ldr	r3, [pc, #284]	; (80016f0 <HAL_RCC_ClockConfig+0x1c4>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d115      	bne.n	800160a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e07f      	b.n	80016e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d107      	bne.n	80015fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015ea:	4b41      	ldr	r3, [pc, #260]	; (80016f0 <HAL_RCC_ClockConfig+0x1c4>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d109      	bne.n	800160a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e073      	b.n	80016e2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015fa:	4b3d      	ldr	r3, [pc, #244]	; (80016f0 <HAL_RCC_ClockConfig+0x1c4>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 0302 	and.w	r3, r3, #2
 8001602:	2b00      	cmp	r3, #0
 8001604:	d101      	bne.n	800160a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e06b      	b.n	80016e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800160a:	4b39      	ldr	r3, [pc, #228]	; (80016f0 <HAL_RCC_ClockConfig+0x1c4>)
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f023 0203 	bic.w	r2, r3, #3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	4936      	ldr	r1, [pc, #216]	; (80016f0 <HAL_RCC_ClockConfig+0x1c4>)
 8001618:	4313      	orrs	r3, r2
 800161a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800161c:	f7ff f984 	bl	8000928 <HAL_GetTick>
 8001620:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001622:	e00a      	b.n	800163a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001624:	f7ff f980 	bl	8000928 <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001632:	4293      	cmp	r3, r2
 8001634:	d901      	bls.n	800163a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e053      	b.n	80016e2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800163a:	4b2d      	ldr	r3, [pc, #180]	; (80016f0 <HAL_RCC_ClockConfig+0x1c4>)
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f003 020c 	and.w	r2, r3, #12
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	429a      	cmp	r2, r3
 800164a:	d1eb      	bne.n	8001624 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800164c:	4b27      	ldr	r3, [pc, #156]	; (80016ec <HAL_RCC_ClockConfig+0x1c0>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 0307 	and.w	r3, r3, #7
 8001654:	683a      	ldr	r2, [r7, #0]
 8001656:	429a      	cmp	r2, r3
 8001658:	d210      	bcs.n	800167c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800165a:	4b24      	ldr	r3, [pc, #144]	; (80016ec <HAL_RCC_ClockConfig+0x1c0>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f023 0207 	bic.w	r2, r3, #7
 8001662:	4922      	ldr	r1, [pc, #136]	; (80016ec <HAL_RCC_ClockConfig+0x1c0>)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	4313      	orrs	r3, r2
 8001668:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800166a:	4b20      	ldr	r3, [pc, #128]	; (80016ec <HAL_RCC_ClockConfig+0x1c0>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0307 	and.w	r3, r3, #7
 8001672:	683a      	ldr	r2, [r7, #0]
 8001674:	429a      	cmp	r2, r3
 8001676:	d001      	beq.n	800167c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e032      	b.n	80016e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 0304 	and.w	r3, r3, #4
 8001684:	2b00      	cmp	r3, #0
 8001686:	d008      	beq.n	800169a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001688:	4b19      	ldr	r3, [pc, #100]	; (80016f0 <HAL_RCC_ClockConfig+0x1c4>)
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	4916      	ldr	r1, [pc, #88]	; (80016f0 <HAL_RCC_ClockConfig+0x1c4>)
 8001696:	4313      	orrs	r3, r2
 8001698:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 0308 	and.w	r3, r3, #8
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d009      	beq.n	80016ba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80016a6:	4b12      	ldr	r3, [pc, #72]	; (80016f0 <HAL_RCC_ClockConfig+0x1c4>)
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	691b      	ldr	r3, [r3, #16]
 80016b2:	00db      	lsls	r3, r3, #3
 80016b4:	490e      	ldr	r1, [pc, #56]	; (80016f0 <HAL_RCC_ClockConfig+0x1c4>)
 80016b6:	4313      	orrs	r3, r2
 80016b8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80016ba:	f000 f821 	bl	8001700 <HAL_RCC_GetSysClockFreq>
 80016be:	4602      	mov	r2, r0
 80016c0:	4b0b      	ldr	r3, [pc, #44]	; (80016f0 <HAL_RCC_ClockConfig+0x1c4>)
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	091b      	lsrs	r3, r3, #4
 80016c6:	f003 030f 	and.w	r3, r3, #15
 80016ca:	490a      	ldr	r1, [pc, #40]	; (80016f4 <HAL_RCC_ClockConfig+0x1c8>)
 80016cc:	5ccb      	ldrb	r3, [r1, r3]
 80016ce:	fa22 f303 	lsr.w	r3, r2, r3
 80016d2:	4a09      	ldr	r2, [pc, #36]	; (80016f8 <HAL_RCC_ClockConfig+0x1cc>)
 80016d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80016d6:	4b09      	ldr	r3, [pc, #36]	; (80016fc <HAL_RCC_ClockConfig+0x1d0>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4618      	mov	r0, r3
 80016dc:	f7ff f8e2 	bl	80008a4 <HAL_InitTick>

  return HAL_OK;
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3710      	adds	r7, #16
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	40022000 	.word	0x40022000
 80016f0:	40021000 	.word	0x40021000
 80016f4:	08004ef0 	.word	0x08004ef0
 80016f8:	20000000 	.word	0x20000000
 80016fc:	20000004 	.word	0x20000004

08001700 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001700:	b480      	push	{r7}
 8001702:	b087      	sub	sp, #28
 8001704:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001706:	2300      	movs	r3, #0
 8001708:	60fb      	str	r3, [r7, #12]
 800170a:	2300      	movs	r3, #0
 800170c:	60bb      	str	r3, [r7, #8]
 800170e:	2300      	movs	r3, #0
 8001710:	617b      	str	r3, [r7, #20]
 8001712:	2300      	movs	r3, #0
 8001714:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001716:	2300      	movs	r3, #0
 8001718:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800171a:	4b1e      	ldr	r3, [pc, #120]	; (8001794 <HAL_RCC_GetSysClockFreq+0x94>)
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	f003 030c 	and.w	r3, r3, #12
 8001726:	2b04      	cmp	r3, #4
 8001728:	d002      	beq.n	8001730 <HAL_RCC_GetSysClockFreq+0x30>
 800172a:	2b08      	cmp	r3, #8
 800172c:	d003      	beq.n	8001736 <HAL_RCC_GetSysClockFreq+0x36>
 800172e:	e027      	b.n	8001780 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001730:	4b19      	ldr	r3, [pc, #100]	; (8001798 <HAL_RCC_GetSysClockFreq+0x98>)
 8001732:	613b      	str	r3, [r7, #16]
      break;
 8001734:	e027      	b.n	8001786 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	0c9b      	lsrs	r3, r3, #18
 800173a:	f003 030f 	and.w	r3, r3, #15
 800173e:	4a17      	ldr	r2, [pc, #92]	; (800179c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001740:	5cd3      	ldrb	r3, [r2, r3]
 8001742:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d010      	beq.n	8001770 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800174e:	4b11      	ldr	r3, [pc, #68]	; (8001794 <HAL_RCC_GetSysClockFreq+0x94>)
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	0c5b      	lsrs	r3, r3, #17
 8001754:	f003 0301 	and.w	r3, r3, #1
 8001758:	4a11      	ldr	r2, [pc, #68]	; (80017a0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800175a:	5cd3      	ldrb	r3, [r2, r3]
 800175c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4a0d      	ldr	r2, [pc, #52]	; (8001798 <HAL_RCC_GetSysClockFreq+0x98>)
 8001762:	fb03 f202 	mul.w	r2, r3, r2
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	fbb2 f3f3 	udiv	r3, r2, r3
 800176c:	617b      	str	r3, [r7, #20]
 800176e:	e004      	b.n	800177a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	4a0c      	ldr	r2, [pc, #48]	; (80017a4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001774:	fb02 f303 	mul.w	r3, r2, r3
 8001778:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	613b      	str	r3, [r7, #16]
      break;
 800177e:	e002      	b.n	8001786 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001780:	4b05      	ldr	r3, [pc, #20]	; (8001798 <HAL_RCC_GetSysClockFreq+0x98>)
 8001782:	613b      	str	r3, [r7, #16]
      break;
 8001784:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001786:	693b      	ldr	r3, [r7, #16]
}
 8001788:	4618      	mov	r0, r3
 800178a:	371c      	adds	r7, #28
 800178c:	46bd      	mov	sp, r7
 800178e:	bc80      	pop	{r7}
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	40021000 	.word	0x40021000
 8001798:	007a1200 	.word	0x007a1200
 800179c:	08004f08 	.word	0x08004f08
 80017a0:	08004f18 	.word	0x08004f18
 80017a4:	003d0900 	.word	0x003d0900

080017a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017ac:	4b02      	ldr	r3, [pc, #8]	; (80017b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80017ae:	681b      	ldr	r3, [r3, #0]
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bc80      	pop	{r7}
 80017b6:	4770      	bx	lr
 80017b8:	20000000 	.word	0x20000000

080017bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80017c0:	f7ff fff2 	bl	80017a8 <HAL_RCC_GetHCLKFreq>
 80017c4:	4602      	mov	r2, r0
 80017c6:	4b05      	ldr	r3, [pc, #20]	; (80017dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	0a1b      	lsrs	r3, r3, #8
 80017cc:	f003 0307 	and.w	r3, r3, #7
 80017d0:	4903      	ldr	r1, [pc, #12]	; (80017e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80017d2:	5ccb      	ldrb	r3, [r1, r3]
 80017d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80017d8:	4618      	mov	r0, r3
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	40021000 	.word	0x40021000
 80017e0:	08004f00 	.word	0x08004f00

080017e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80017e8:	f7ff ffde 	bl	80017a8 <HAL_RCC_GetHCLKFreq>
 80017ec:	4602      	mov	r2, r0
 80017ee:	4b05      	ldr	r3, [pc, #20]	; (8001804 <HAL_RCC_GetPCLK2Freq+0x20>)
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	0adb      	lsrs	r3, r3, #11
 80017f4:	f003 0307 	and.w	r3, r3, #7
 80017f8:	4903      	ldr	r1, [pc, #12]	; (8001808 <HAL_RCC_GetPCLK2Freq+0x24>)
 80017fa:	5ccb      	ldrb	r3, [r1, r3]
 80017fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001800:	4618      	mov	r0, r3
 8001802:	bd80      	pop	{r7, pc}
 8001804:	40021000 	.word	0x40021000
 8001808:	08004f00 	.word	0x08004f00

0800180c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800180c:	b480      	push	{r7}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001814:	4b0a      	ldr	r3, [pc, #40]	; (8001840 <RCC_Delay+0x34>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a0a      	ldr	r2, [pc, #40]	; (8001844 <RCC_Delay+0x38>)
 800181a:	fba2 2303 	umull	r2, r3, r2, r3
 800181e:	0a5b      	lsrs	r3, r3, #9
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	fb02 f303 	mul.w	r3, r2, r3
 8001826:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001828:	bf00      	nop
  }
  while (Delay --);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	1e5a      	subs	r2, r3, #1
 800182e:	60fa      	str	r2, [r7, #12]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d1f9      	bne.n	8001828 <RCC_Delay+0x1c>
}
 8001834:	bf00      	nop
 8001836:	bf00      	nop
 8001838:	3714      	adds	r7, #20
 800183a:	46bd      	mov	sp, r7
 800183c:	bc80      	pop	{r7}
 800183e:	4770      	bx	lr
 8001840:	20000000 	.word	0x20000000
 8001844:	10624dd3 	.word	0x10624dd3

08001848 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d101      	bne.n	800185a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e042      	b.n	80018e0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001860:	b2db      	uxtb	r3, r3
 8001862:	2b00      	cmp	r3, #0
 8001864:	d106      	bne.n	8001874 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2200      	movs	r2, #0
 800186a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f7fe ff56 	bl	8000720 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2224      	movs	r2, #36	; 0x24
 8001878:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	68da      	ldr	r2, [r3, #12]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800188a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f000 fcff 	bl	8002290 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	691a      	ldr	r2, [r3, #16]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80018a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	695a      	ldr	r2, [r3, #20]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80018b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	68da      	ldr	r2, [r3, #12]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80018c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2200      	movs	r2, #0
 80018c6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2220      	movs	r2, #32
 80018cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2220      	movs	r2, #32
 80018d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2200      	movs	r2, #0
 80018dc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80018de:	2300      	movs	r3, #0
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3708      	adds	r7, #8
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b085      	sub	sp, #20
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	60f8      	str	r0, [r7, #12]
 80018f0:	60b9      	str	r1, [r7, #8]
 80018f2:	4613      	mov	r3, r2
 80018f4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	2b20      	cmp	r3, #32
 8001900:	d121      	bne.n	8001946 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d002      	beq.n	800190e <HAL_UART_Transmit_IT+0x26>
 8001908:	88fb      	ldrh	r3, [r7, #6]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d101      	bne.n	8001912 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e01a      	b.n	8001948 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	68ba      	ldr	r2, [r7, #8]
 8001916:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	88fa      	ldrh	r2, [r7, #6]
 800191c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	88fa      	ldrh	r2, [r7, #6]
 8001922:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	2200      	movs	r2, #0
 8001928:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	2221      	movs	r2, #33	; 0x21
 800192e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	68da      	ldr	r2, [r3, #12]
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001940:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001942:	2300      	movs	r3, #0
 8001944:	e000      	b.n	8001948 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8001946:	2302      	movs	r3, #2
  }
}
 8001948:	4618      	mov	r0, r3
 800194a:	3714      	adds	r7, #20
 800194c:	46bd      	mov	sp, r7
 800194e:	bc80      	pop	{r7}
 8001950:	4770      	bx	lr

08001952 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001952:	b580      	push	{r7, lr}
 8001954:	b084      	sub	sp, #16
 8001956:	af00      	add	r7, sp, #0
 8001958:	60f8      	str	r0, [r7, #12]
 800195a:	60b9      	str	r1, [r7, #8]
 800195c:	4613      	mov	r3, r2
 800195e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001966:	b2db      	uxtb	r3, r3
 8001968:	2b20      	cmp	r3, #32
 800196a:	d112      	bne.n	8001992 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d002      	beq.n	8001978 <HAL_UART_Receive_IT+0x26>
 8001972:	88fb      	ldrh	r3, [r7, #6]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d101      	bne.n	800197c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	e00b      	b.n	8001994 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2200      	movs	r2, #0
 8001980:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001982:	88fb      	ldrh	r3, [r7, #6]
 8001984:	461a      	mov	r2, r3
 8001986:	68b9      	ldr	r1, [r7, #8]
 8001988:	68f8      	ldr	r0, [r7, #12]
 800198a:	f000 faad 	bl	8001ee8 <UART_Start_Receive_IT>
 800198e:	4603      	mov	r3, r0
 8001990:	e000      	b.n	8001994 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8001992:	2302      	movs	r3, #2
  }
}
 8001994:	4618      	mov	r0, r3
 8001996:	3710      	adds	r7, #16
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}

0800199c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b0ba      	sub	sp, #232	; 0xe8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	695b      	ldr	r3, [r3, #20]
 80019be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80019c2:	2300      	movs	r3, #0
 80019c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80019c8:	2300      	movs	r3, #0
 80019ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80019ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80019d2:	f003 030f 	and.w	r3, r3, #15
 80019d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80019da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d10f      	bne.n	8001a02 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80019e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80019e6:	f003 0320 	and.w	r3, r3, #32
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d009      	beq.n	8001a02 <HAL_UART_IRQHandler+0x66>
 80019ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80019f2:	f003 0320 	and.w	r3, r3, #32
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d003      	beq.n	8001a02 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f000 fb8a 	bl	8002114 <UART_Receive_IT>
      return;
 8001a00:	e25b      	b.n	8001eba <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001a02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	f000 80de 	beq.w	8001bc8 <HAL_UART_IRQHandler+0x22c>
 8001a0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001a10:	f003 0301 	and.w	r3, r3, #1
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d106      	bne.n	8001a26 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001a18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001a1c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	f000 80d1 	beq.w	8001bc8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001a26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d00b      	beq.n	8001a4a <HAL_UART_IRQHandler+0xae>
 8001a32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d005      	beq.n	8001a4a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a42:	f043 0201 	orr.w	r2, r3, #1
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001a4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001a4e:	f003 0304 	and.w	r3, r3, #4
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d00b      	beq.n	8001a6e <HAL_UART_IRQHandler+0xd2>
 8001a56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d005      	beq.n	8001a6e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a66:	f043 0202 	orr.w	r2, r3, #2
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001a6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001a72:	f003 0302 	and.w	r3, r3, #2
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d00b      	beq.n	8001a92 <HAL_UART_IRQHandler+0xf6>
 8001a7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d005      	beq.n	8001a92 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a8a:	f043 0204 	orr.w	r2, r3, #4
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001a92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001a96:	f003 0308 	and.w	r3, r3, #8
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d011      	beq.n	8001ac2 <HAL_UART_IRQHandler+0x126>
 8001a9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001aa2:	f003 0320 	and.w	r3, r3, #32
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d105      	bne.n	8001ab6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001aaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d005      	beq.n	8001ac2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aba:	f043 0208 	orr.w	r2, r3, #8
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	f000 81f2 	beq.w	8001eb0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001acc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001ad0:	f003 0320 	and.w	r3, r3, #32
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d008      	beq.n	8001aea <HAL_UART_IRQHandler+0x14e>
 8001ad8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001adc:	f003 0320 	and.w	r3, r3, #32
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d002      	beq.n	8001aea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f000 fb15 	bl	8002114 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	695b      	ldr	r3, [r3, #20]
 8001af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	bf14      	ite	ne
 8001af8:	2301      	movne	r3, #1
 8001afa:	2300      	moveq	r3, #0
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b06:	f003 0308 	and.w	r3, r3, #8
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d103      	bne.n	8001b16 <HAL_UART_IRQHandler+0x17a>
 8001b0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d04f      	beq.n	8001bb6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f000 fa1f 	bl	8001f5a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	695b      	ldr	r3, [r3, #20]
 8001b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d041      	beq.n	8001bae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	3314      	adds	r3, #20
 8001b30:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b34:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b38:	e853 3f00 	ldrex	r3, [r3]
 8001b3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8001b40:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001b44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001b48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	3314      	adds	r3, #20
 8001b52:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001b56:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8001b5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b5e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8001b62:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001b66:	e841 2300 	strex	r3, r2, [r1]
 8001b6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8001b6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d1d9      	bne.n	8001b2a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d013      	beq.n	8001ba6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b82:	4a7e      	ldr	r2, [pc, #504]	; (8001d7c <HAL_UART_IRQHandler+0x3e0>)
 8001b84:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7ff f81e 	bl	8000bcc <HAL_DMA_Abort_IT>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d016      	beq.n	8001bc4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001ba0:	4610      	mov	r0, r2
 8001ba2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ba4:	e00e      	b.n	8001bc4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f000 f98a 	bl	8001ec0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001bac:	e00a      	b.n	8001bc4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f000 f986 	bl	8001ec0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001bb4:	e006      	b.n	8001bc4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f000 f982 	bl	8001ec0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8001bc2:	e175      	b.n	8001eb0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001bc4:	bf00      	nop
    return;
 8001bc6:	e173      	b.n	8001eb0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	f040 814f 	bne.w	8001e70 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8001bd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001bd6:	f003 0310 	and.w	r3, r3, #16
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	f000 8148 	beq.w	8001e70 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8001be0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001be4:	f003 0310 	and.w	r3, r3, #16
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	f000 8141 	beq.w	8001e70 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001bee:	2300      	movs	r3, #0
 8001bf0:	60bb      	str	r3, [r7, #8]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	60bb      	str	r3, [r7, #8]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	60bb      	str	r3, [r7, #8]
 8001c02:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	695b      	ldr	r3, [r3, #20]
 8001c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	f000 80b6 	beq.w	8001d80 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8001c20:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	f000 8145 	beq.w	8001eb4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001c2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001c32:	429a      	cmp	r2, r3
 8001c34:	f080 813e 	bcs.w	8001eb4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001c3e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c44:	699b      	ldr	r3, [r3, #24]
 8001c46:	2b20      	cmp	r3, #32
 8001c48:	f000 8088 	beq.w	8001d5c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	330c      	adds	r3, #12
 8001c52:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c56:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001c5a:	e853 3f00 	ldrex	r3, [r3]
 8001c5e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8001c62:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c66:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c6a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	330c      	adds	r3, #12
 8001c74:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001c78:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001c7c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c80:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8001c84:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001c88:	e841 2300 	strex	r3, r2, [r1]
 8001c8c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8001c90:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d1d9      	bne.n	8001c4c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	3314      	adds	r3, #20
 8001c9e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ca0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ca2:	e853 3f00 	ldrex	r3, [r3]
 8001ca6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8001ca8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001caa:	f023 0301 	bic.w	r3, r3, #1
 8001cae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	3314      	adds	r3, #20
 8001cb8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001cbc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8001cc0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001cc2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001cc4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001cc8:	e841 2300 	strex	r3, r2, [r1]
 8001ccc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8001cce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d1e1      	bne.n	8001c98 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	3314      	adds	r3, #20
 8001cda:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001cdc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001cde:	e853 3f00 	ldrex	r3, [r3]
 8001ce2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8001ce4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ce6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001cea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	3314      	adds	r3, #20
 8001cf4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8001cf8:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001cfa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001cfc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001cfe:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001d00:	e841 2300 	strex	r3, r2, [r1]
 8001d04:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8001d06:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d1e3      	bne.n	8001cd4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2220      	movs	r2, #32
 8001d10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2200      	movs	r2, #0
 8001d18:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	330c      	adds	r3, #12
 8001d20:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d24:	e853 3f00 	ldrex	r3, [r3]
 8001d28:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8001d2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d2c:	f023 0310 	bic.w	r3, r3, #16
 8001d30:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	330c      	adds	r3, #12
 8001d3a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001d3e:	65ba      	str	r2, [r7, #88]	; 0x58
 8001d40:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d42:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001d44:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001d46:	e841 2300 	strex	r3, r2, [r1]
 8001d4a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8001d4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d1e3      	bne.n	8001d1a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7fe fefd 	bl	8000b56 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2202      	movs	r2, #2
 8001d60:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	4619      	mov	r1, r3
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f000 f8ad 	bl	8001ed2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8001d78:	e09c      	b.n	8001eb4 <HAL_UART_IRQHandler+0x518>
 8001d7a:	bf00      	nop
 8001d7c:	0800201f 	.word	0x0800201f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	f000 808e 	beq.w	8001eb8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8001d9c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	f000 8089 	beq.w	8001eb8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	330c      	adds	r3, #12
 8001dac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001db0:	e853 3f00 	ldrex	r3, [r3]
 8001db4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8001db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001db8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001dbc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	330c      	adds	r3, #12
 8001dc6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8001dca:	647a      	str	r2, [r7, #68]	; 0x44
 8001dcc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001dce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001dd0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001dd2:	e841 2300 	strex	r3, r2, [r1]
 8001dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8001dd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d1e3      	bne.n	8001da6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	3314      	adds	r3, #20
 8001de4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de8:	e853 3f00 	ldrex	r3, [r3]
 8001dec:	623b      	str	r3, [r7, #32]
   return(result);
 8001dee:	6a3b      	ldr	r3, [r7, #32]
 8001df0:	f023 0301 	bic.w	r3, r3, #1
 8001df4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	3314      	adds	r3, #20
 8001dfe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001e02:	633a      	str	r2, [r7, #48]	; 0x30
 8001e04:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001e08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e0a:	e841 2300 	strex	r3, r2, [r1]
 8001e0e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8001e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d1e3      	bne.n	8001dde <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2220      	movs	r2, #32
 8001e1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	330c      	adds	r3, #12
 8001e2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	e853 3f00 	ldrex	r3, [r3]
 8001e32:	60fb      	str	r3, [r7, #12]
   return(result);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	f023 0310 	bic.w	r3, r3, #16
 8001e3a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	330c      	adds	r3, #12
 8001e44:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8001e48:	61fa      	str	r2, [r7, #28]
 8001e4a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e4c:	69b9      	ldr	r1, [r7, #24]
 8001e4e:	69fa      	ldr	r2, [r7, #28]
 8001e50:	e841 2300 	strex	r3, r2, [r1]
 8001e54:	617b      	str	r3, [r7, #20]
   return(result);
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d1e3      	bne.n	8001e24 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2202      	movs	r2, #2
 8001e60:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001e62:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8001e66:	4619      	mov	r1, r3
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f000 f832 	bl	8001ed2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8001e6e:	e023      	b.n	8001eb8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001e70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001e74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d009      	beq.n	8001e90 <HAL_UART_IRQHandler+0x4f4>
 8001e7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001e80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d003      	beq.n	8001e90 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f000 f8dc 	bl	8002046 <UART_Transmit_IT>
    return;
 8001e8e:	e014      	b.n	8001eba <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001e90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d00e      	beq.n	8001eba <HAL_UART_IRQHandler+0x51e>
 8001e9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001ea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d008      	beq.n	8001eba <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f000 f91b 	bl	80020e4 <UART_EndTransmit_IT>
    return;
 8001eae:	e004      	b.n	8001eba <HAL_UART_IRQHandler+0x51e>
    return;
 8001eb0:	bf00      	nop
 8001eb2:	e002      	b.n	8001eba <HAL_UART_IRQHandler+0x51e>
      return;
 8001eb4:	bf00      	nop
 8001eb6:	e000      	b.n	8001eba <HAL_UART_IRQHandler+0x51e>
      return;
 8001eb8:	bf00      	nop
  }
}
 8001eba:	37e8      	adds	r7, #232	; 0xe8
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001ec8:	bf00      	nop
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bc80      	pop	{r7}
 8001ed0:	4770      	bx	lr

08001ed2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	b083      	sub	sp, #12
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
 8001eda:	460b      	mov	r3, r1
 8001edc:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8001ede:	bf00      	nop
 8001ee0:	370c      	adds	r7, #12
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bc80      	pop	{r7}
 8001ee6:	4770      	bx	lr

08001ee8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b085      	sub	sp, #20
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	60f8      	str	r0, [r7, #12]
 8001ef0:	60b9      	str	r1, [r7, #8]
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	68ba      	ldr	r2, [r7, #8]
 8001efa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	88fa      	ldrh	r2, [r7, #6]
 8001f00:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	88fa      	ldrh	r2, [r7, #6]
 8001f06:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2222      	movs	r2, #34	; 0x22
 8001f12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	691b      	ldr	r3, [r3, #16]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d007      	beq.n	8001f2e <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	68da      	ldr	r2, [r3, #12]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f2c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	695a      	ldr	r2, [r3, #20]
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f042 0201 	orr.w	r2, r2, #1
 8001f3c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	68da      	ldr	r2, [r3, #12]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f042 0220 	orr.w	r2, r2, #32
 8001f4c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8001f4e:	2300      	movs	r3, #0
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3714      	adds	r7, #20
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bc80      	pop	{r7}
 8001f58:	4770      	bx	lr

08001f5a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	b095      	sub	sp, #84	; 0x54
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	330c      	adds	r3, #12
 8001f68:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f6c:	e853 3f00 	ldrex	r3, [r3]
 8001f70:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8001f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f74:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001f78:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	330c      	adds	r3, #12
 8001f80:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001f82:	643a      	str	r2, [r7, #64]	; 0x40
 8001f84:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f86:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001f88:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001f8a:	e841 2300 	strex	r3, r2, [r1]
 8001f8e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8001f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d1e5      	bne.n	8001f62 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	3314      	adds	r3, #20
 8001f9c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f9e:	6a3b      	ldr	r3, [r7, #32]
 8001fa0:	e853 3f00 	ldrex	r3, [r3]
 8001fa4:	61fb      	str	r3, [r7, #28]
   return(result);
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	f023 0301 	bic.w	r3, r3, #1
 8001fac:	64bb      	str	r3, [r7, #72]	; 0x48
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	3314      	adds	r3, #20
 8001fb4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001fb6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001fb8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001fbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fbe:	e841 2300 	strex	r3, r2, [r1]
 8001fc2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d1e5      	bne.n	8001f96 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d119      	bne.n	8002006 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	330c      	adds	r3, #12
 8001fd8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	e853 3f00 	ldrex	r3, [r3]
 8001fe0:	60bb      	str	r3, [r7, #8]
   return(result);
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	f023 0310 	bic.w	r3, r3, #16
 8001fe8:	647b      	str	r3, [r7, #68]	; 0x44
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	330c      	adds	r3, #12
 8001ff0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001ff2:	61ba      	str	r2, [r7, #24]
 8001ff4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ff6:	6979      	ldr	r1, [r7, #20]
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	e841 2300 	strex	r3, r2, [r1]
 8001ffe:	613b      	str	r3, [r7, #16]
   return(result);
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d1e5      	bne.n	8001fd2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2220      	movs	r2, #32
 800200a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002014:	bf00      	nop
 8002016:	3754      	adds	r7, #84	; 0x54
 8002018:	46bd      	mov	sp, r7
 800201a:	bc80      	pop	{r7}
 800201c:	4770      	bx	lr

0800201e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800201e:	b580      	push	{r7, lr}
 8002020:	b084      	sub	sp, #16
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2200      	movs	r2, #0
 8002030:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2200      	movs	r2, #0
 8002036:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002038:	68f8      	ldr	r0, [r7, #12]
 800203a:	f7ff ff41 	bl	8001ec0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800203e:	bf00      	nop
 8002040:	3710      	adds	r7, #16
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}

08002046 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002046:	b480      	push	{r7}
 8002048:	b085      	sub	sp, #20
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2b21      	cmp	r3, #33	; 0x21
 8002058:	d13e      	bne.n	80020d8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002062:	d114      	bne.n	800208e <UART_Transmit_IT+0x48>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	691b      	ldr	r3, [r3, #16]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d110      	bne.n	800208e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a1b      	ldr	r3, [r3, #32]
 8002070:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	881b      	ldrh	r3, [r3, #0]
 8002076:	461a      	mov	r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002080:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6a1b      	ldr	r3, [r3, #32]
 8002086:	1c9a      	adds	r2, r3, #2
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	621a      	str	r2, [r3, #32]
 800208c:	e008      	b.n	80020a0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a1b      	ldr	r3, [r3, #32]
 8002092:	1c59      	adds	r1, r3, #1
 8002094:	687a      	ldr	r2, [r7, #4]
 8002096:	6211      	str	r1, [r2, #32]
 8002098:	781a      	ldrb	r2, [r3, #0]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	3b01      	subs	r3, #1
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	4619      	mov	r1, r3
 80020ae:	84d1      	strh	r1, [r2, #38]	; 0x26
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d10f      	bne.n	80020d4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	68da      	ldr	r2, [r3, #12]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020c2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	68da      	ldr	r2, [r3, #12]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020d2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80020d4:	2300      	movs	r3, #0
 80020d6:	e000      	b.n	80020da <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80020d8:	2302      	movs	r3, #2
  }
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3714      	adds	r7, #20
 80020de:	46bd      	mov	sp, r7
 80020e0:	bc80      	pop	{r7}
 80020e2:	4770      	bx	lr

080020e4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	68da      	ldr	r2, [r3, #12]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020fa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2220      	movs	r2, #32
 8002100:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f7fe f9a1 	bl	800044c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800210a:	2300      	movs	r3, #0
}
 800210c:	4618      	mov	r0, r3
 800210e:	3708      	adds	r7, #8
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}

08002114 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b08c      	sub	sp, #48	; 0x30
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002122:	b2db      	uxtb	r3, r3
 8002124:	2b22      	cmp	r3, #34	; 0x22
 8002126:	f040 80ae 	bne.w	8002286 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002132:	d117      	bne.n	8002164 <UART_Receive_IT+0x50>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	691b      	ldr	r3, [r3, #16]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d113      	bne.n	8002164 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800213c:	2300      	movs	r3, #0
 800213e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002144:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	b29b      	uxth	r3, r3
 800214e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002152:	b29a      	uxth	r2, r3
 8002154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002156:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800215c:	1c9a      	adds	r2, r3, #2
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	629a      	str	r2, [r3, #40]	; 0x28
 8002162:	e026      	b.n	80021b2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002168:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800216a:	2300      	movs	r3, #0
 800216c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002176:	d007      	beq.n	8002188 <UART_Receive_IT+0x74>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d10a      	bne.n	8002196 <UART_Receive_IT+0x82>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	691b      	ldr	r3, [r3, #16]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d106      	bne.n	8002196 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	b2da      	uxtb	r2, r3
 8002190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002192:	701a      	strb	r2, [r3, #0]
 8002194:	e008      	b.n	80021a8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	b2db      	uxtb	r3, r3
 800219e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021a2:	b2da      	uxtb	r2, r3
 80021a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021a6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ac:	1c5a      	adds	r2, r3, #1
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	3b01      	subs	r3, #1
 80021ba:	b29b      	uxth	r3, r3
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	4619      	mov	r1, r3
 80021c0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d15d      	bne.n	8002282 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	68da      	ldr	r2, [r3, #12]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f022 0220 	bic.w	r2, r2, #32
 80021d4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	68da      	ldr	r2, [r3, #12]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021e4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	695a      	ldr	r2, [r3, #20]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f022 0201 	bic.w	r2, r2, #1
 80021f4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2220      	movs	r2, #32
 80021fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002208:	2b01      	cmp	r3, #1
 800220a:	d135      	bne.n	8002278 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	330c      	adds	r3, #12
 8002218:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	e853 3f00 	ldrex	r3, [r3]
 8002220:	613b      	str	r3, [r7, #16]
   return(result);
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	f023 0310 	bic.w	r3, r3, #16
 8002228:	627b      	str	r3, [r7, #36]	; 0x24
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	330c      	adds	r3, #12
 8002230:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002232:	623a      	str	r2, [r7, #32]
 8002234:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002236:	69f9      	ldr	r1, [r7, #28]
 8002238:	6a3a      	ldr	r2, [r7, #32]
 800223a:	e841 2300 	strex	r3, r2, [r1]
 800223e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d1e5      	bne.n	8002212 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0310 	and.w	r3, r3, #16
 8002250:	2b10      	cmp	r3, #16
 8002252:	d10a      	bne.n	800226a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002254:	2300      	movs	r3, #0
 8002256:	60fb      	str	r3, [r7, #12]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	60fb      	str	r3, [r7, #12]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	60fb      	str	r3, [r7, #12]
 8002268:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800226e:	4619      	mov	r1, r3
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f7ff fe2e 	bl	8001ed2 <HAL_UARTEx_RxEventCallback>
 8002276:	e002      	b.n	800227e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f7fe f907 	bl	800048c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800227e:	2300      	movs	r3, #0
 8002280:	e002      	b.n	8002288 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002282:	2300      	movs	r3, #0
 8002284:	e000      	b.n	8002288 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002286:	2302      	movs	r3, #2
  }
}
 8002288:	4618      	mov	r0, r3
 800228a:	3730      	adds	r7, #48	; 0x30
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}

08002290 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	691b      	ldr	r3, [r3, #16]
 800229e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	68da      	ldr	r2, [r3, #12]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	430a      	orrs	r2, r1
 80022ac:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	689a      	ldr	r2, [r3, #8]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	691b      	ldr	r3, [r3, #16]
 80022b6:	431a      	orrs	r2, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	695b      	ldr	r3, [r3, #20]
 80022bc:	4313      	orrs	r3, r2
 80022be:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80022ca:	f023 030c 	bic.w	r3, r3, #12
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	6812      	ldr	r2, [r2, #0]
 80022d2:	68b9      	ldr	r1, [r7, #8]
 80022d4:	430b      	orrs	r3, r1
 80022d6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	695b      	ldr	r3, [r3, #20]
 80022de:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	699a      	ldr	r2, [r3, #24]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	430a      	orrs	r2, r1
 80022ec:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a2c      	ldr	r2, [pc, #176]	; (80023a4 <UART_SetConfig+0x114>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d103      	bne.n	8002300 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80022f8:	f7ff fa74 	bl	80017e4 <HAL_RCC_GetPCLK2Freq>
 80022fc:	60f8      	str	r0, [r7, #12]
 80022fe:	e002      	b.n	8002306 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002300:	f7ff fa5c 	bl	80017bc <HAL_RCC_GetPCLK1Freq>
 8002304:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002306:	68fa      	ldr	r2, [r7, #12]
 8002308:	4613      	mov	r3, r2
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	4413      	add	r3, r2
 800230e:	009a      	lsls	r2, r3, #2
 8002310:	441a      	add	r2, r3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	fbb2 f3f3 	udiv	r3, r2, r3
 800231c:	4a22      	ldr	r2, [pc, #136]	; (80023a8 <UART_SetConfig+0x118>)
 800231e:	fba2 2303 	umull	r2, r3, r2, r3
 8002322:	095b      	lsrs	r3, r3, #5
 8002324:	0119      	lsls	r1, r3, #4
 8002326:	68fa      	ldr	r2, [r7, #12]
 8002328:	4613      	mov	r3, r2
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	4413      	add	r3, r2
 800232e:	009a      	lsls	r2, r3, #2
 8002330:	441a      	add	r2, r3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	fbb2 f2f3 	udiv	r2, r2, r3
 800233c:	4b1a      	ldr	r3, [pc, #104]	; (80023a8 <UART_SetConfig+0x118>)
 800233e:	fba3 0302 	umull	r0, r3, r3, r2
 8002342:	095b      	lsrs	r3, r3, #5
 8002344:	2064      	movs	r0, #100	; 0x64
 8002346:	fb00 f303 	mul.w	r3, r0, r3
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	011b      	lsls	r3, r3, #4
 800234e:	3332      	adds	r3, #50	; 0x32
 8002350:	4a15      	ldr	r2, [pc, #84]	; (80023a8 <UART_SetConfig+0x118>)
 8002352:	fba2 2303 	umull	r2, r3, r2, r3
 8002356:	095b      	lsrs	r3, r3, #5
 8002358:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800235c:	4419      	add	r1, r3
 800235e:	68fa      	ldr	r2, [r7, #12]
 8002360:	4613      	mov	r3, r2
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	4413      	add	r3, r2
 8002366:	009a      	lsls	r2, r3, #2
 8002368:	441a      	add	r2, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	fbb2 f2f3 	udiv	r2, r2, r3
 8002374:	4b0c      	ldr	r3, [pc, #48]	; (80023a8 <UART_SetConfig+0x118>)
 8002376:	fba3 0302 	umull	r0, r3, r3, r2
 800237a:	095b      	lsrs	r3, r3, #5
 800237c:	2064      	movs	r0, #100	; 0x64
 800237e:	fb00 f303 	mul.w	r3, r0, r3
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	011b      	lsls	r3, r3, #4
 8002386:	3332      	adds	r3, #50	; 0x32
 8002388:	4a07      	ldr	r2, [pc, #28]	; (80023a8 <UART_SetConfig+0x118>)
 800238a:	fba2 2303 	umull	r2, r3, r2, r3
 800238e:	095b      	lsrs	r3, r3, #5
 8002390:	f003 020f 	and.w	r2, r3, #15
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	440a      	add	r2, r1
 800239a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800239c:	bf00      	nop
 800239e:	3710      	adds	r7, #16
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	40013800 	.word	0x40013800
 80023a8:	51eb851f 	.word	0x51eb851f

080023ac <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b085      	sub	sp, #20
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	4603      	mov	r3, r0
 80023b4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80023b6:	2300      	movs	r3, #0
 80023b8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80023ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023be:	2b84      	cmp	r3, #132	; 0x84
 80023c0:	d005      	beq.n	80023ce <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80023c2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	4413      	add	r3, r2
 80023ca:	3303      	adds	r3, #3
 80023cc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80023ce:	68fb      	ldr	r3, [r7, #12]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3714      	adds	r7, #20
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bc80      	pop	{r7}
 80023d8:	4770      	bx	lr

080023da <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80023da:	b580      	push	{r7, lr}
 80023dc:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80023de:	f001 f9b5 	bl	800374c <vTaskStartScheduler>
  
  return osOK;
 80023e2:	2300      	movs	r3, #0
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	bd80      	pop	{r7, pc}

080023e8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80023e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023ea:	b089      	sub	sp, #36	; 0x24
 80023ec:	af04      	add	r7, sp, #16
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	695b      	ldr	r3, [r3, #20]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d020      	beq.n	800243c <osThreadCreate+0x54>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	699b      	ldr	r3, [r3, #24]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d01c      	beq.n	800243c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685c      	ldr	r4, [r3, #4]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	691e      	ldr	r6, [r3, #16]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff ffc9 	bl	80023ac <makeFreeRtosPriority>
 800241a:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	695b      	ldr	r3, [r3, #20]
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002424:	9202      	str	r2, [sp, #8]
 8002426:	9301      	str	r3, [sp, #4]
 8002428:	9100      	str	r1, [sp, #0]
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	4632      	mov	r2, r6
 800242e:	4629      	mov	r1, r5
 8002430:	4620      	mov	r0, r4
 8002432:	f000 ffb6 	bl	80033a2 <xTaskCreateStatic>
 8002436:	4603      	mov	r3, r0
 8002438:	60fb      	str	r3, [r7, #12]
 800243a:	e01c      	b.n	8002476 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685c      	ldr	r4, [r3, #4]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002448:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002450:	4618      	mov	r0, r3
 8002452:	f7ff ffab 	bl	80023ac <makeFreeRtosPriority>
 8002456:	4602      	mov	r2, r0
 8002458:	f107 030c 	add.w	r3, r7, #12
 800245c:	9301      	str	r3, [sp, #4]
 800245e:	9200      	str	r2, [sp, #0]
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	4632      	mov	r2, r6
 8002464:	4629      	mov	r1, r5
 8002466:	4620      	mov	r0, r4
 8002468:	f000 fff7 	bl	800345a <xTaskCreate>
 800246c:	4603      	mov	r3, r0
 800246e:	2b01      	cmp	r3, #1
 8002470:	d001      	beq.n	8002476 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002472:	2300      	movs	r3, #0
 8002474:	e000      	b.n	8002478 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002476:	68fb      	ldr	r3, [r7, #12]
}
 8002478:	4618      	mov	r0, r3
 800247a:	3714      	adds	r7, #20
 800247c:	46bd      	mov	sp, r7
 800247e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002480 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d001      	beq.n	8002496 <osDelay+0x16>
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	e000      	b.n	8002498 <osDelay+0x18>
 8002496:	2301      	movs	r3, #1
 8002498:	4618      	mov	r0, r3
 800249a:	f001 f923 	bl	80036e4 <vTaskDelay>
  
  return osOK;
 800249e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3710      	adds	r7, #16
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b086      	sub	sp, #24
 80024ac:	af02      	add	r7, sp, #8
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d00f      	beq.n	80024da <osSemaphoreCreate+0x32>
    if (count == 1) {
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d10a      	bne.n	80024d6 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	2203      	movs	r2, #3
 80024c6:	9200      	str	r2, [sp, #0]
 80024c8:	2200      	movs	r2, #0
 80024ca:	2100      	movs	r1, #0
 80024cc:	2001      	movs	r0, #1
 80024ce:	f000 f95d 	bl	800278c <xQueueGenericCreateStatic>
 80024d2:	4603      	mov	r3, r0
 80024d4:	e016      	b.n	8002504 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80024d6:	2300      	movs	r3, #0
 80024d8:	e014      	b.n	8002504 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d110      	bne.n	8002502 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80024e0:	2203      	movs	r2, #3
 80024e2:	2100      	movs	r1, #0
 80024e4:	2001      	movs	r0, #1
 80024e6:	f000 f9c8 	bl	800287a <xQueueGenericCreate>
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d005      	beq.n	80024fe <osSemaphoreCreate+0x56>
 80024f2:	2300      	movs	r3, #0
 80024f4:	2200      	movs	r2, #0
 80024f6:	2100      	movs	r1, #0
 80024f8:	68f8      	ldr	r0, [r7, #12]
 80024fa:	f000 fa1b 	bl	8002934 <xQueueGenericSend>
      return sema;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	e000      	b.n	8002504 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8002502:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8002504:	4618      	mov	r0, r3
 8002506:	3710      	adds	r7, #16
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}

0800250c <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800250c:	b590      	push	{r4, r7, lr}
 800250e:	b085      	sub	sp, #20
 8002510:	af02      	add	r7, sp, #8
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d011      	beq.n	8002542 <osMessageCreate+0x36>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d00d      	beq.n	8002542 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6818      	ldr	r0, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6859      	ldr	r1, [r3, #4]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	689a      	ldr	r2, [r3, #8]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	2400      	movs	r4, #0
 8002538:	9400      	str	r4, [sp, #0]
 800253a:	f000 f927 	bl	800278c <xQueueGenericCreateStatic>
 800253e:	4603      	mov	r3, r0
 8002540:	e008      	b.n	8002554 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6818      	ldr	r0, [r3, #0]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	2200      	movs	r2, #0
 800254c:	4619      	mov	r1, r3
 800254e:	f000 f994 	bl	800287a <xQueueGenericCreate>
 8002552:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8002554:	4618      	mov	r0, r3
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	bd90      	pop	{r4, r7, pc}

0800255c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f103 0208 	add.w	r2, r3, #8
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f04f 32ff 	mov.w	r2, #4294967295
 8002574:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f103 0208 	add.w	r2, r3, #8
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f103 0208 	add.w	r2, r3, #8
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002590:	bf00      	nop
 8002592:	370c      	adds	r7, #12
 8002594:	46bd      	mov	sp, r7
 8002596:	bc80      	pop	{r7}
 8002598:	4770      	bx	lr

0800259a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800259a:	b480      	push	{r7}
 800259c:	b083      	sub	sp, #12
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80025a8:	bf00      	nop
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bc80      	pop	{r7}
 80025b0:	4770      	bx	lr

080025b2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80025b2:	b480      	push	{r7}
 80025b4:	b085      	sub	sp, #20
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
 80025ba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	68fa      	ldr	r2, [r7, #12]
 80025c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	689a      	ldr	r2, [r3, #8]
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	683a      	ldr	r2, [r7, #0]
 80025d6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	683a      	ldr	r2, [r7, #0]
 80025dc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	1c5a      	adds	r2, r3, #1
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	601a      	str	r2, [r3, #0]
}
 80025ee:	bf00      	nop
 80025f0:	3714      	adds	r7, #20
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bc80      	pop	{r7}
 80025f6:	4770      	bx	lr

080025f8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80025f8:	b480      	push	{r7}
 80025fa:	b085      	sub	sp, #20
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800260e:	d103      	bne.n	8002618 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	691b      	ldr	r3, [r3, #16]
 8002614:	60fb      	str	r3, [r7, #12]
 8002616:	e00c      	b.n	8002632 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	3308      	adds	r3, #8
 800261c:	60fb      	str	r3, [r7, #12]
 800261e:	e002      	b.n	8002626 <vListInsert+0x2e>
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	60fb      	str	r3, [r7, #12]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	68ba      	ldr	r2, [r7, #8]
 800262e:	429a      	cmp	r2, r3
 8002630:	d2f6      	bcs.n	8002620 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	685a      	ldr	r2, [r3, #4]
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	683a      	ldr	r2, [r7, #0]
 8002640:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	68fa      	ldr	r2, [r7, #12]
 8002646:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	683a      	ldr	r2, [r7, #0]
 800264c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	1c5a      	adds	r2, r3, #1
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	601a      	str	r2, [r3, #0]
}
 800265e:	bf00      	nop
 8002660:	3714      	adds	r7, #20
 8002662:	46bd      	mov	sp, r7
 8002664:	bc80      	pop	{r7}
 8002666:	4770      	bx	lr

08002668 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002668:	b480      	push	{r7}
 800266a:	b085      	sub	sp, #20
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	691b      	ldr	r3, [r3, #16]
 8002674:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	6892      	ldr	r2, [r2, #8]
 800267e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	6852      	ldr	r2, [r2, #4]
 8002688:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	429a      	cmp	r2, r3
 8002692:	d103      	bne.n	800269c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	689a      	ldr	r2, [r3, #8]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	1e5a      	subs	r2, r3, #1
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3714      	adds	r7, #20
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bc80      	pop	{r7}
 80026b8:	4770      	bx	lr
	...

080026bc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d10a      	bne.n	80026e6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80026d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026d4:	f383 8811 	msr	BASEPRI, r3
 80026d8:	f3bf 8f6f 	isb	sy
 80026dc:	f3bf 8f4f 	dsb	sy
 80026e0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80026e2:	bf00      	nop
 80026e4:	e7fe      	b.n	80026e4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80026e6:	f001 ff81 	bl	80045ec <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026f2:	68f9      	ldr	r1, [r7, #12]
 80026f4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80026f6:	fb01 f303 	mul.w	r3, r1, r3
 80026fa:	441a      	add	r2, r3
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2200      	movs	r2, #0
 8002704:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002716:	3b01      	subs	r3, #1
 8002718:	68f9      	ldr	r1, [r7, #12]
 800271a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800271c:	fb01 f303 	mul.w	r3, r1, r3
 8002720:	441a      	add	r2, r3
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	22ff      	movs	r2, #255	; 0xff
 800272a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	22ff      	movs	r2, #255	; 0xff
 8002732:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d114      	bne.n	8002766 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	691b      	ldr	r3, [r3, #16]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d01a      	beq.n	800277a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	3310      	adds	r3, #16
 8002748:	4618      	mov	r0, r3
 800274a:	f001 fa57 	bl	8003bfc <xTaskRemoveFromEventList>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d012      	beq.n	800277a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002754:	4b0c      	ldr	r3, [pc, #48]	; (8002788 <xQueueGenericReset+0xcc>)
 8002756:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800275a:	601a      	str	r2, [r3, #0]
 800275c:	f3bf 8f4f 	dsb	sy
 8002760:	f3bf 8f6f 	isb	sy
 8002764:	e009      	b.n	800277a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	3310      	adds	r3, #16
 800276a:	4618      	mov	r0, r3
 800276c:	f7ff fef6 	bl	800255c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	3324      	adds	r3, #36	; 0x24
 8002774:	4618      	mov	r0, r3
 8002776:	f7ff fef1 	bl	800255c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800277a:	f001 ff67 	bl	800464c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800277e:	2301      	movs	r3, #1
}
 8002780:	4618      	mov	r0, r3
 8002782:	3710      	adds	r7, #16
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	e000ed04 	.word	0xe000ed04

0800278c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800278c:	b580      	push	{r7, lr}
 800278e:	b08e      	sub	sp, #56	; 0x38
 8002790:	af02      	add	r7, sp, #8
 8002792:	60f8      	str	r0, [r7, #12]
 8002794:	60b9      	str	r1, [r7, #8]
 8002796:	607a      	str	r2, [r7, #4]
 8002798:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d10a      	bne.n	80027b6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80027a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027a4:	f383 8811 	msr	BASEPRI, r3
 80027a8:	f3bf 8f6f 	isb	sy
 80027ac:	f3bf 8f4f 	dsb	sy
 80027b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80027b2:	bf00      	nop
 80027b4:	e7fe      	b.n	80027b4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d10a      	bne.n	80027d2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80027bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027c0:	f383 8811 	msr	BASEPRI, r3
 80027c4:	f3bf 8f6f 	isb	sy
 80027c8:	f3bf 8f4f 	dsb	sy
 80027cc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80027ce:	bf00      	nop
 80027d0:	e7fe      	b.n	80027d0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d002      	beq.n	80027de <xQueueGenericCreateStatic+0x52>
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d001      	beq.n	80027e2 <xQueueGenericCreateStatic+0x56>
 80027de:	2301      	movs	r3, #1
 80027e0:	e000      	b.n	80027e4 <xQueueGenericCreateStatic+0x58>
 80027e2:	2300      	movs	r3, #0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d10a      	bne.n	80027fe <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80027e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ec:	f383 8811 	msr	BASEPRI, r3
 80027f0:	f3bf 8f6f 	isb	sy
 80027f4:	f3bf 8f4f 	dsb	sy
 80027f8:	623b      	str	r3, [r7, #32]
}
 80027fa:	bf00      	nop
 80027fc:	e7fe      	b.n	80027fc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d102      	bne.n	800280a <xQueueGenericCreateStatic+0x7e>
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d101      	bne.n	800280e <xQueueGenericCreateStatic+0x82>
 800280a:	2301      	movs	r3, #1
 800280c:	e000      	b.n	8002810 <xQueueGenericCreateStatic+0x84>
 800280e:	2300      	movs	r3, #0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d10a      	bne.n	800282a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002818:	f383 8811 	msr	BASEPRI, r3
 800281c:	f3bf 8f6f 	isb	sy
 8002820:	f3bf 8f4f 	dsb	sy
 8002824:	61fb      	str	r3, [r7, #28]
}
 8002826:	bf00      	nop
 8002828:	e7fe      	b.n	8002828 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800282a:	2348      	movs	r3, #72	; 0x48
 800282c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	2b48      	cmp	r3, #72	; 0x48
 8002832:	d00a      	beq.n	800284a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002838:	f383 8811 	msr	BASEPRI, r3
 800283c:	f3bf 8f6f 	isb	sy
 8002840:	f3bf 8f4f 	dsb	sy
 8002844:	61bb      	str	r3, [r7, #24]
}
 8002846:	bf00      	nop
 8002848:	e7fe      	b.n	8002848 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800284e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002850:	2b00      	cmp	r3, #0
 8002852:	d00d      	beq.n	8002870 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002856:	2201      	movs	r2, #1
 8002858:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800285c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002862:	9300      	str	r3, [sp, #0]
 8002864:	4613      	mov	r3, r2
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	68b9      	ldr	r1, [r7, #8]
 800286a:	68f8      	ldr	r0, [r7, #12]
 800286c:	f000 f843 	bl	80028f6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002872:	4618      	mov	r0, r3
 8002874:	3730      	adds	r7, #48	; 0x30
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}

0800287a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800287a:	b580      	push	{r7, lr}
 800287c:	b08a      	sub	sp, #40	; 0x28
 800287e:	af02      	add	r7, sp, #8
 8002880:	60f8      	str	r0, [r7, #12]
 8002882:	60b9      	str	r1, [r7, #8]
 8002884:	4613      	mov	r3, r2
 8002886:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d10a      	bne.n	80028a4 <xQueueGenericCreate+0x2a>
	__asm volatile
 800288e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002892:	f383 8811 	msr	BASEPRI, r3
 8002896:	f3bf 8f6f 	isb	sy
 800289a:	f3bf 8f4f 	dsb	sy
 800289e:	613b      	str	r3, [r7, #16]
}
 80028a0:	bf00      	nop
 80028a2:	e7fe      	b.n	80028a2 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d102      	bne.n	80028b0 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80028aa:	2300      	movs	r3, #0
 80028ac:	61fb      	str	r3, [r7, #28]
 80028ae:	e004      	b.n	80028ba <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	68ba      	ldr	r2, [r7, #8]
 80028b4:	fb02 f303 	mul.w	r3, r2, r3
 80028b8:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	3348      	adds	r3, #72	; 0x48
 80028be:	4618      	mov	r0, r3
 80028c0:	f001 ff94 	bl	80047ec <pvPortMalloc>
 80028c4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d00f      	beq.n	80028ec <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	3348      	adds	r3, #72	; 0x48
 80028d0:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	2200      	movs	r2, #0
 80028d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80028da:	79fa      	ldrb	r2, [r7, #7]
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	9300      	str	r3, [sp, #0]
 80028e0:	4613      	mov	r3, r2
 80028e2:	697a      	ldr	r2, [r7, #20]
 80028e4:	68b9      	ldr	r1, [r7, #8]
 80028e6:	68f8      	ldr	r0, [r7, #12]
 80028e8:	f000 f805 	bl	80028f6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80028ec:	69bb      	ldr	r3, [r7, #24]
	}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3720      	adds	r7, #32
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b084      	sub	sp, #16
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	60f8      	str	r0, [r7, #12]
 80028fe:	60b9      	str	r1, [r7, #8]
 8002900:	607a      	str	r2, [r7, #4]
 8002902:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d103      	bne.n	8002912 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	69ba      	ldr	r2, [r7, #24]
 800290e:	601a      	str	r2, [r3, #0]
 8002910:	e002      	b.n	8002918 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	68fa      	ldr	r2, [r7, #12]
 800291c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	68ba      	ldr	r2, [r7, #8]
 8002922:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002924:	2101      	movs	r1, #1
 8002926:	69b8      	ldr	r0, [r7, #24]
 8002928:	f7ff fec8 	bl	80026bc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800292c:	bf00      	nop
 800292e:	3710      	adds	r7, #16
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b08e      	sub	sp, #56	; 0x38
 8002938:	af00      	add	r7, sp, #0
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	60b9      	str	r1, [r7, #8]
 800293e:	607a      	str	r2, [r7, #4]
 8002940:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002942:	2300      	movs	r3, #0
 8002944:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800294a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800294c:	2b00      	cmp	r3, #0
 800294e:	d10a      	bne.n	8002966 <xQueueGenericSend+0x32>
	__asm volatile
 8002950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002954:	f383 8811 	msr	BASEPRI, r3
 8002958:	f3bf 8f6f 	isb	sy
 800295c:	f3bf 8f4f 	dsb	sy
 8002960:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002962:	bf00      	nop
 8002964:	e7fe      	b.n	8002964 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d103      	bne.n	8002974 <xQueueGenericSend+0x40>
 800296c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800296e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002970:	2b00      	cmp	r3, #0
 8002972:	d101      	bne.n	8002978 <xQueueGenericSend+0x44>
 8002974:	2301      	movs	r3, #1
 8002976:	e000      	b.n	800297a <xQueueGenericSend+0x46>
 8002978:	2300      	movs	r3, #0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d10a      	bne.n	8002994 <xQueueGenericSend+0x60>
	__asm volatile
 800297e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002982:	f383 8811 	msr	BASEPRI, r3
 8002986:	f3bf 8f6f 	isb	sy
 800298a:	f3bf 8f4f 	dsb	sy
 800298e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002990:	bf00      	nop
 8002992:	e7fe      	b.n	8002992 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	2b02      	cmp	r3, #2
 8002998:	d103      	bne.n	80029a2 <xQueueGenericSend+0x6e>
 800299a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800299c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d101      	bne.n	80029a6 <xQueueGenericSend+0x72>
 80029a2:	2301      	movs	r3, #1
 80029a4:	e000      	b.n	80029a8 <xQueueGenericSend+0x74>
 80029a6:	2300      	movs	r3, #0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d10a      	bne.n	80029c2 <xQueueGenericSend+0x8e>
	__asm volatile
 80029ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029b0:	f383 8811 	msr	BASEPRI, r3
 80029b4:	f3bf 8f6f 	isb	sy
 80029b8:	f3bf 8f4f 	dsb	sy
 80029bc:	623b      	str	r3, [r7, #32]
}
 80029be:	bf00      	nop
 80029c0:	e7fe      	b.n	80029c0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80029c2:	f001 fadf 	bl	8003f84 <xTaskGetSchedulerState>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d102      	bne.n	80029d2 <xQueueGenericSend+0x9e>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d101      	bne.n	80029d6 <xQueueGenericSend+0xa2>
 80029d2:	2301      	movs	r3, #1
 80029d4:	e000      	b.n	80029d8 <xQueueGenericSend+0xa4>
 80029d6:	2300      	movs	r3, #0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d10a      	bne.n	80029f2 <xQueueGenericSend+0xbe>
	__asm volatile
 80029dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029e0:	f383 8811 	msr	BASEPRI, r3
 80029e4:	f3bf 8f6f 	isb	sy
 80029e8:	f3bf 8f4f 	dsb	sy
 80029ec:	61fb      	str	r3, [r7, #28]
}
 80029ee:	bf00      	nop
 80029f0:	e7fe      	b.n	80029f0 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80029f2:	f001 fdfb 	bl	80045ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80029f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d302      	bcc.n	8002a08 <xQueueGenericSend+0xd4>
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d129      	bne.n	8002a5c <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002a08:	683a      	ldr	r2, [r7, #0]
 8002a0a:	68b9      	ldr	r1, [r7, #8]
 8002a0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a0e:	f000 fbb8 	bl	8003182 <prvCopyDataToQueue>
 8002a12:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d010      	beq.n	8002a3e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a1e:	3324      	adds	r3, #36	; 0x24
 8002a20:	4618      	mov	r0, r3
 8002a22:	f001 f8eb 	bl	8003bfc <xTaskRemoveFromEventList>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d013      	beq.n	8002a54 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002a2c:	4b3f      	ldr	r3, [pc, #252]	; (8002b2c <xQueueGenericSend+0x1f8>)
 8002a2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a32:	601a      	str	r2, [r3, #0]
 8002a34:	f3bf 8f4f 	dsb	sy
 8002a38:	f3bf 8f6f 	isb	sy
 8002a3c:	e00a      	b.n	8002a54 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d007      	beq.n	8002a54 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002a44:	4b39      	ldr	r3, [pc, #228]	; (8002b2c <xQueueGenericSend+0x1f8>)
 8002a46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a4a:	601a      	str	r2, [r3, #0]
 8002a4c:	f3bf 8f4f 	dsb	sy
 8002a50:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002a54:	f001 fdfa 	bl	800464c <vPortExitCritical>
				return pdPASS;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e063      	b.n	8002b24 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d103      	bne.n	8002a6a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002a62:	f001 fdf3 	bl	800464c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002a66:	2300      	movs	r3, #0
 8002a68:	e05c      	b.n	8002b24 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002a6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d106      	bne.n	8002a7e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002a70:	f107 0314 	add.w	r3, r7, #20
 8002a74:	4618      	mov	r0, r3
 8002a76:	f001 f923 	bl	8003cc0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002a7e:	f001 fde5 	bl	800464c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002a82:	f000 fecd 	bl	8003820 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002a86:	f001 fdb1 	bl	80045ec <vPortEnterCritical>
 8002a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a90:	b25b      	sxtb	r3, r3
 8002a92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a96:	d103      	bne.n	8002aa0 <xQueueGenericSend+0x16c>
 8002a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aa2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002aa6:	b25b      	sxtb	r3, r3
 8002aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aac:	d103      	bne.n	8002ab6 <xQueueGenericSend+0x182>
 8002aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ab6:	f001 fdc9 	bl	800464c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002aba:	1d3a      	adds	r2, r7, #4
 8002abc:	f107 0314 	add.w	r3, r7, #20
 8002ac0:	4611      	mov	r1, r2
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f001 f912 	bl	8003cec <xTaskCheckForTimeOut>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d124      	bne.n	8002b18 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002ace:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ad0:	f000 fc4f 	bl	8003372 <prvIsQueueFull>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d018      	beq.n	8002b0c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002adc:	3310      	adds	r3, #16
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	4611      	mov	r1, r2
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f001 f866 	bl	8003bb4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002ae8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002aea:	f000 fbda 	bl	80032a2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002aee:	f000 fea5 	bl	800383c <xTaskResumeAll>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	f47f af7c 	bne.w	80029f2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002afa:	4b0c      	ldr	r3, [pc, #48]	; (8002b2c <xQueueGenericSend+0x1f8>)
 8002afc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b00:	601a      	str	r2, [r3, #0]
 8002b02:	f3bf 8f4f 	dsb	sy
 8002b06:	f3bf 8f6f 	isb	sy
 8002b0a:	e772      	b.n	80029f2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002b0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b0e:	f000 fbc8 	bl	80032a2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002b12:	f000 fe93 	bl	800383c <xTaskResumeAll>
 8002b16:	e76c      	b.n	80029f2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002b18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b1a:	f000 fbc2 	bl	80032a2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002b1e:	f000 fe8d 	bl	800383c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002b22:	2300      	movs	r3, #0
		}
	}
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3738      	adds	r7, #56	; 0x38
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	e000ed04 	.word	0xe000ed04

08002b30 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b08e      	sub	sp, #56	; 0x38
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	607a      	str	r2, [r7, #4]
 8002b3c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d10a      	bne.n	8002b5e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b4c:	f383 8811 	msr	BASEPRI, r3
 8002b50:	f3bf 8f6f 	isb	sy
 8002b54:	f3bf 8f4f 	dsb	sy
 8002b58:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002b5a:	bf00      	nop
 8002b5c:	e7fe      	b.n	8002b5c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d103      	bne.n	8002b6c <xQueueGenericSendFromISR+0x3c>
 8002b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d101      	bne.n	8002b70 <xQueueGenericSendFromISR+0x40>
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e000      	b.n	8002b72 <xQueueGenericSendFromISR+0x42>
 8002b70:	2300      	movs	r3, #0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d10a      	bne.n	8002b8c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b7a:	f383 8811 	msr	BASEPRI, r3
 8002b7e:	f3bf 8f6f 	isb	sy
 8002b82:	f3bf 8f4f 	dsb	sy
 8002b86:	623b      	str	r3, [r7, #32]
}
 8002b88:	bf00      	nop
 8002b8a:	e7fe      	b.n	8002b8a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d103      	bne.n	8002b9a <xQueueGenericSendFromISR+0x6a>
 8002b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d101      	bne.n	8002b9e <xQueueGenericSendFromISR+0x6e>
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e000      	b.n	8002ba0 <xQueueGenericSendFromISR+0x70>
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d10a      	bne.n	8002bba <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ba8:	f383 8811 	msr	BASEPRI, r3
 8002bac:	f3bf 8f6f 	isb	sy
 8002bb0:	f3bf 8f4f 	dsb	sy
 8002bb4:	61fb      	str	r3, [r7, #28]
}
 8002bb6:	bf00      	nop
 8002bb8:	e7fe      	b.n	8002bb8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002bba:	f001 fdd9 	bl	8004770 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002bbe:	f3ef 8211 	mrs	r2, BASEPRI
 8002bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bc6:	f383 8811 	msr	BASEPRI, r3
 8002bca:	f3bf 8f6f 	isb	sy
 8002bce:	f3bf 8f4f 	dsb	sy
 8002bd2:	61ba      	str	r2, [r7, #24]
 8002bd4:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002bd6:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d302      	bcc.n	8002bec <xQueueGenericSendFromISR+0xbc>
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d12c      	bne.n	8002c46 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002bf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002bf6:	683a      	ldr	r2, [r7, #0]
 8002bf8:	68b9      	ldr	r1, [r7, #8]
 8002bfa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002bfc:	f000 fac1 	bl	8003182 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002c00:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c08:	d112      	bne.n	8002c30 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d016      	beq.n	8002c40 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c14:	3324      	adds	r3, #36	; 0x24
 8002c16:	4618      	mov	r0, r3
 8002c18:	f000 fff0 	bl	8003bfc <xTaskRemoveFromEventList>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d00e      	beq.n	8002c40 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d00b      	beq.n	8002c40 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	601a      	str	r2, [r3, #0]
 8002c2e:	e007      	b.n	8002c40 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002c30:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002c34:	3301      	adds	r3, #1
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	b25a      	sxtb	r2, r3
 8002c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002c40:	2301      	movs	r3, #1
 8002c42:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002c44:	e001      	b.n	8002c4a <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002c46:	2300      	movs	r3, #0
 8002c48:	637b      	str	r3, [r7, #52]	; 0x34
 8002c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c4c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002c54:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002c56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3738      	adds	r7, #56	; 0x38
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b08e      	sub	sp, #56	; 0x38
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8002c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d10a      	bne.n	8002c8a <xQueueGiveFromISR+0x2a>
	__asm volatile
 8002c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c78:	f383 8811 	msr	BASEPRI, r3
 8002c7c:	f3bf 8f6f 	isb	sy
 8002c80:	f3bf 8f4f 	dsb	sy
 8002c84:	623b      	str	r3, [r7, #32]
}
 8002c86:	bf00      	nop
 8002c88:	e7fe      	b.n	8002c88 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d00a      	beq.n	8002ca8 <xQueueGiveFromISR+0x48>
	__asm volatile
 8002c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c96:	f383 8811 	msr	BASEPRI, r3
 8002c9a:	f3bf 8f6f 	isb	sy
 8002c9e:	f3bf 8f4f 	dsb	sy
 8002ca2:	61fb      	str	r3, [r7, #28]
}
 8002ca4:	bf00      	nop
 8002ca6:	e7fe      	b.n	8002ca6 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8002ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d103      	bne.n	8002cb8 <xQueueGiveFromISR+0x58>
 8002cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d101      	bne.n	8002cbc <xQueueGiveFromISR+0x5c>
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e000      	b.n	8002cbe <xQueueGiveFromISR+0x5e>
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d10a      	bne.n	8002cd8 <xQueueGiveFromISR+0x78>
	__asm volatile
 8002cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cc6:	f383 8811 	msr	BASEPRI, r3
 8002cca:	f3bf 8f6f 	isb	sy
 8002cce:	f3bf 8f4f 	dsb	sy
 8002cd2:	61bb      	str	r3, [r7, #24]
}
 8002cd4:	bf00      	nop
 8002cd6:	e7fe      	b.n	8002cd6 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002cd8:	f001 fd4a 	bl	8004770 <vPortValidateInterruptPriority>
	__asm volatile
 8002cdc:	f3ef 8211 	mrs	r2, BASEPRI
 8002ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ce4:	f383 8811 	msr	BASEPRI, r3
 8002ce8:	f3bf 8f6f 	isb	sy
 8002cec:	f3bf 8f4f 	dsb	sy
 8002cf0:	617a      	str	r2, [r7, #20]
 8002cf2:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8002cf4:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cfc:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8002cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d22b      	bcs.n	8002d60 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d14:	1c5a      	adds	r2, r3, #1
 8002d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d18:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002d1a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002d1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d22:	d112      	bne.n	8002d4a <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d016      	beq.n	8002d5a <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d2e:	3324      	adds	r3, #36	; 0x24
 8002d30:	4618      	mov	r0, r3
 8002d32:	f000 ff63 	bl	8003bfc <xTaskRemoveFromEventList>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d00e      	beq.n	8002d5a <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d00b      	beq.n	8002d5a <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	2201      	movs	r2, #1
 8002d46:	601a      	str	r2, [r3, #0]
 8002d48:	e007      	b.n	8002d5a <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002d4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d4e:	3301      	adds	r3, #1
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	b25a      	sxtb	r2, r3
 8002d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	637b      	str	r3, [r7, #52]	; 0x34
 8002d5e:	e001      	b.n	8002d64 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002d60:	2300      	movs	r3, #0
 8002d62:	637b      	str	r3, [r7, #52]	; 0x34
 8002d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d66:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f383 8811 	msr	BASEPRI, r3
}
 8002d6e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3738      	adds	r7, #56	; 0x38
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
	...

08002d7c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b08c      	sub	sp, #48	; 0x30
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	60f8      	str	r0, [r7, #12]
 8002d84:	60b9      	str	r1, [r7, #8]
 8002d86:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d10a      	bne.n	8002dac <xQueueReceive+0x30>
	__asm volatile
 8002d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d9a:	f383 8811 	msr	BASEPRI, r3
 8002d9e:	f3bf 8f6f 	isb	sy
 8002da2:	f3bf 8f4f 	dsb	sy
 8002da6:	623b      	str	r3, [r7, #32]
}
 8002da8:	bf00      	nop
 8002daa:	e7fe      	b.n	8002daa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d103      	bne.n	8002dba <xQueueReceive+0x3e>
 8002db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d101      	bne.n	8002dbe <xQueueReceive+0x42>
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e000      	b.n	8002dc0 <xQueueReceive+0x44>
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d10a      	bne.n	8002dda <xQueueReceive+0x5e>
	__asm volatile
 8002dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dc8:	f383 8811 	msr	BASEPRI, r3
 8002dcc:	f3bf 8f6f 	isb	sy
 8002dd0:	f3bf 8f4f 	dsb	sy
 8002dd4:	61fb      	str	r3, [r7, #28]
}
 8002dd6:	bf00      	nop
 8002dd8:	e7fe      	b.n	8002dd8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002dda:	f001 f8d3 	bl	8003f84 <xTaskGetSchedulerState>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d102      	bne.n	8002dea <xQueueReceive+0x6e>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d101      	bne.n	8002dee <xQueueReceive+0x72>
 8002dea:	2301      	movs	r3, #1
 8002dec:	e000      	b.n	8002df0 <xQueueReceive+0x74>
 8002dee:	2300      	movs	r3, #0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d10a      	bne.n	8002e0a <xQueueReceive+0x8e>
	__asm volatile
 8002df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002df8:	f383 8811 	msr	BASEPRI, r3
 8002dfc:	f3bf 8f6f 	isb	sy
 8002e00:	f3bf 8f4f 	dsb	sy
 8002e04:	61bb      	str	r3, [r7, #24]
}
 8002e06:	bf00      	nop
 8002e08:	e7fe      	b.n	8002e08 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002e0a:	f001 fbef 	bl	80045ec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e12:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d01f      	beq.n	8002e5a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002e1a:	68b9      	ldr	r1, [r7, #8]
 8002e1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e1e:	f000 fa1a 	bl	8003256 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e24:	1e5a      	subs	r2, r3, #1
 8002e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e28:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d00f      	beq.n	8002e52 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e34:	3310      	adds	r3, #16
 8002e36:	4618      	mov	r0, r3
 8002e38:	f000 fee0 	bl	8003bfc <xTaskRemoveFromEventList>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d007      	beq.n	8002e52 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002e42:	4b3d      	ldr	r3, [pc, #244]	; (8002f38 <xQueueReceive+0x1bc>)
 8002e44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e48:	601a      	str	r2, [r3, #0]
 8002e4a:	f3bf 8f4f 	dsb	sy
 8002e4e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002e52:	f001 fbfb 	bl	800464c <vPortExitCritical>
				return pdPASS;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e069      	b.n	8002f2e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d103      	bne.n	8002e68 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002e60:	f001 fbf4 	bl	800464c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002e64:	2300      	movs	r3, #0
 8002e66:	e062      	b.n	8002f2e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d106      	bne.n	8002e7c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002e6e:	f107 0310 	add.w	r3, r7, #16
 8002e72:	4618      	mov	r0, r3
 8002e74:	f000 ff24 	bl	8003cc0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002e7c:	f001 fbe6 	bl	800464c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002e80:	f000 fcce 	bl	8003820 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002e84:	f001 fbb2 	bl	80045ec <vPortEnterCritical>
 8002e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e8a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e8e:	b25b      	sxtb	r3, r3
 8002e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e94:	d103      	bne.n	8002e9e <xQueueReceive+0x122>
 8002e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ea0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ea4:	b25b      	sxtb	r3, r3
 8002ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eaa:	d103      	bne.n	8002eb4 <xQueueReceive+0x138>
 8002eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002eb4:	f001 fbca 	bl	800464c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002eb8:	1d3a      	adds	r2, r7, #4
 8002eba:	f107 0310 	add.w	r3, r7, #16
 8002ebe:	4611      	mov	r1, r2
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f000 ff13 	bl	8003cec <xTaskCheckForTimeOut>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d123      	bne.n	8002f14 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002ecc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ece:	f000 fa3a 	bl	8003346 <prvIsQueueEmpty>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d017      	beq.n	8002f08 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eda:	3324      	adds	r3, #36	; 0x24
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	4611      	mov	r1, r2
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f000 fe67 	bl	8003bb4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002ee6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ee8:	f000 f9db 	bl	80032a2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002eec:	f000 fca6 	bl	800383c <xTaskResumeAll>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d189      	bne.n	8002e0a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002ef6:	4b10      	ldr	r3, [pc, #64]	; (8002f38 <xQueueReceive+0x1bc>)
 8002ef8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002efc:	601a      	str	r2, [r3, #0]
 8002efe:	f3bf 8f4f 	dsb	sy
 8002f02:	f3bf 8f6f 	isb	sy
 8002f06:	e780      	b.n	8002e0a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002f08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f0a:	f000 f9ca 	bl	80032a2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002f0e:	f000 fc95 	bl	800383c <xTaskResumeAll>
 8002f12:	e77a      	b.n	8002e0a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002f14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f16:	f000 f9c4 	bl	80032a2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002f1a:	f000 fc8f 	bl	800383c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f20:	f000 fa11 	bl	8003346 <prvIsQueueEmpty>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	f43f af6f 	beq.w	8002e0a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002f2c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3730      	adds	r7, #48	; 0x30
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	e000ed04 	.word	0xe000ed04

08002f3c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b08e      	sub	sp, #56	; 0x38
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8002f46:	2300      	movs	r3, #0
 8002f48:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d10a      	bne.n	8002f6e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8002f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f5c:	f383 8811 	msr	BASEPRI, r3
 8002f60:	f3bf 8f6f 	isb	sy
 8002f64:	f3bf 8f4f 	dsb	sy
 8002f68:	623b      	str	r3, [r7, #32]
}
 8002f6a:	bf00      	nop
 8002f6c:	e7fe      	b.n	8002f6c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d00a      	beq.n	8002f8c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8002f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f7a:	f383 8811 	msr	BASEPRI, r3
 8002f7e:	f3bf 8f6f 	isb	sy
 8002f82:	f3bf 8f4f 	dsb	sy
 8002f86:	61fb      	str	r3, [r7, #28]
}
 8002f88:	bf00      	nop
 8002f8a:	e7fe      	b.n	8002f8a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002f8c:	f000 fffa 	bl	8003f84 <xTaskGetSchedulerState>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d102      	bne.n	8002f9c <xQueueSemaphoreTake+0x60>
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d101      	bne.n	8002fa0 <xQueueSemaphoreTake+0x64>
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e000      	b.n	8002fa2 <xQueueSemaphoreTake+0x66>
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d10a      	bne.n	8002fbc <xQueueSemaphoreTake+0x80>
	__asm volatile
 8002fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002faa:	f383 8811 	msr	BASEPRI, r3
 8002fae:	f3bf 8f6f 	isb	sy
 8002fb2:	f3bf 8f4f 	dsb	sy
 8002fb6:	61bb      	str	r3, [r7, #24]
}
 8002fb8:	bf00      	nop
 8002fba:	e7fe      	b.n	8002fba <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002fbc:	f001 fb16 	bl	80045ec <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d024      	beq.n	8003016 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fce:	1e5a      	subs	r2, r3, #1
 8002fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fd2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d104      	bne.n	8002fe6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8002fdc:	f001 f99c 	bl	8004318 <pvTaskIncrementMutexHeldCount>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fe4:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fe8:	691b      	ldr	r3, [r3, #16]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d00f      	beq.n	800300e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ff0:	3310      	adds	r3, #16
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f000 fe02 	bl	8003bfc <xTaskRemoveFromEventList>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d007      	beq.n	800300e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002ffe:	4b54      	ldr	r3, [pc, #336]	; (8003150 <xQueueSemaphoreTake+0x214>)
 8003000:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003004:	601a      	str	r2, [r3, #0]
 8003006:	f3bf 8f4f 	dsb	sy
 800300a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800300e:	f001 fb1d 	bl	800464c <vPortExitCritical>
				return pdPASS;
 8003012:	2301      	movs	r3, #1
 8003014:	e097      	b.n	8003146 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d111      	bne.n	8003040 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800301c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800301e:	2b00      	cmp	r3, #0
 8003020:	d00a      	beq.n	8003038 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8003022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003026:	f383 8811 	msr	BASEPRI, r3
 800302a:	f3bf 8f6f 	isb	sy
 800302e:	f3bf 8f4f 	dsb	sy
 8003032:	617b      	str	r3, [r7, #20]
}
 8003034:	bf00      	nop
 8003036:	e7fe      	b.n	8003036 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003038:	f001 fb08 	bl	800464c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800303c:	2300      	movs	r3, #0
 800303e:	e082      	b.n	8003146 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003042:	2b00      	cmp	r3, #0
 8003044:	d106      	bne.n	8003054 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003046:	f107 030c 	add.w	r3, r7, #12
 800304a:	4618      	mov	r0, r3
 800304c:	f000 fe38 	bl	8003cc0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003050:	2301      	movs	r3, #1
 8003052:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003054:	f001 fafa 	bl	800464c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003058:	f000 fbe2 	bl	8003820 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800305c:	f001 fac6 	bl	80045ec <vPortEnterCritical>
 8003060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003062:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003066:	b25b      	sxtb	r3, r3
 8003068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800306c:	d103      	bne.n	8003076 <xQueueSemaphoreTake+0x13a>
 800306e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003070:	2200      	movs	r2, #0
 8003072:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003078:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800307c:	b25b      	sxtb	r3, r3
 800307e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003082:	d103      	bne.n	800308c <xQueueSemaphoreTake+0x150>
 8003084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003086:	2200      	movs	r2, #0
 8003088:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800308c:	f001 fade 	bl	800464c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003090:	463a      	mov	r2, r7
 8003092:	f107 030c 	add.w	r3, r7, #12
 8003096:	4611      	mov	r1, r2
 8003098:	4618      	mov	r0, r3
 800309a:	f000 fe27 	bl	8003cec <xTaskCheckForTimeOut>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d132      	bne.n	800310a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80030a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80030a6:	f000 f94e 	bl	8003346 <prvIsQueueEmpty>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d026      	beq.n	80030fe <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80030b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d109      	bne.n	80030cc <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80030b8:	f001 fa98 	bl	80045ec <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80030bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	4618      	mov	r0, r3
 80030c2:	f000 ff7d 	bl	8003fc0 <xTaskPriorityInherit>
 80030c6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80030c8:	f001 fac0 	bl	800464c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80030cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ce:	3324      	adds	r3, #36	; 0x24
 80030d0:	683a      	ldr	r2, [r7, #0]
 80030d2:	4611      	mov	r1, r2
 80030d4:	4618      	mov	r0, r3
 80030d6:	f000 fd6d 	bl	8003bb4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80030da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80030dc:	f000 f8e1 	bl	80032a2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80030e0:	f000 fbac 	bl	800383c <xTaskResumeAll>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	f47f af68 	bne.w	8002fbc <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80030ec:	4b18      	ldr	r3, [pc, #96]	; (8003150 <xQueueSemaphoreTake+0x214>)
 80030ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030f2:	601a      	str	r2, [r3, #0]
 80030f4:	f3bf 8f4f 	dsb	sy
 80030f8:	f3bf 8f6f 	isb	sy
 80030fc:	e75e      	b.n	8002fbc <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80030fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003100:	f000 f8cf 	bl	80032a2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003104:	f000 fb9a 	bl	800383c <xTaskResumeAll>
 8003108:	e758      	b.n	8002fbc <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800310a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800310c:	f000 f8c9 	bl	80032a2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003110:	f000 fb94 	bl	800383c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003114:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003116:	f000 f916 	bl	8003346 <prvIsQueueEmpty>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	f43f af4d 	beq.w	8002fbc <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003124:	2b00      	cmp	r3, #0
 8003126:	d00d      	beq.n	8003144 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8003128:	f001 fa60 	bl	80045ec <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800312c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800312e:	f000 f811 	bl	8003154 <prvGetDisinheritPriorityAfterTimeout>
 8003132:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8003134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800313a:	4618      	mov	r0, r3
 800313c:	f001 f84c 	bl	80041d8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003140:	f001 fa84 	bl	800464c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003144:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003146:	4618      	mov	r0, r3
 8003148:	3738      	adds	r7, #56	; 0x38
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	e000ed04 	.word	0xe000ed04

08003154 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003154:	b480      	push	{r7}
 8003156:	b085      	sub	sp, #20
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003160:	2b00      	cmp	r3, #0
 8003162:	d006      	beq.n	8003172 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f1c3 0307 	rsb	r3, r3, #7
 800316e:	60fb      	str	r3, [r7, #12]
 8003170:	e001      	b.n	8003176 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003172:	2300      	movs	r3, #0
 8003174:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003176:	68fb      	ldr	r3, [r7, #12]
	}
 8003178:	4618      	mov	r0, r3
 800317a:	3714      	adds	r7, #20
 800317c:	46bd      	mov	sp, r7
 800317e:	bc80      	pop	{r7}
 8003180:	4770      	bx	lr

08003182 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003182:	b580      	push	{r7, lr}
 8003184:	b086      	sub	sp, #24
 8003186:	af00      	add	r7, sp, #0
 8003188:	60f8      	str	r0, [r7, #12]
 800318a:	60b9      	str	r1, [r7, #8]
 800318c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800318e:	2300      	movs	r3, #0
 8003190:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003196:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319c:	2b00      	cmp	r3, #0
 800319e:	d10d      	bne.n	80031bc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d14d      	bne.n	8003244 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	4618      	mov	r0, r3
 80031ae:	f000 ff8d 	bl	80040cc <xTaskPriorityDisinherit>
 80031b2:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2200      	movs	r2, #0
 80031b8:	605a      	str	r2, [r3, #4]
 80031ba:	e043      	b.n	8003244 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d119      	bne.n	80031f6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6898      	ldr	r0, [r3, #8]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ca:	461a      	mov	r2, r3
 80031cc:	68b9      	ldr	r1, [r7, #8]
 80031ce:	f001 fd69 	bl	8004ca4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	689a      	ldr	r2, [r3, #8]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031da:	441a      	add	r2, r3
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	689a      	ldr	r2, [r3, #8]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d32b      	bcc.n	8003244 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	609a      	str	r2, [r3, #8]
 80031f4:	e026      	b.n	8003244 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	68d8      	ldr	r0, [r3, #12]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fe:	461a      	mov	r2, r3
 8003200:	68b9      	ldr	r1, [r7, #8]
 8003202:	f001 fd4f 	bl	8004ca4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	68da      	ldr	r2, [r3, #12]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320e:	425b      	negs	r3, r3
 8003210:	441a      	add	r2, r3
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	68da      	ldr	r2, [r3, #12]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	429a      	cmp	r2, r3
 8003220:	d207      	bcs.n	8003232 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	685a      	ldr	r2, [r3, #4]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322a:	425b      	negs	r3, r3
 800322c:	441a      	add	r2, r3
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2b02      	cmp	r3, #2
 8003236:	d105      	bne.n	8003244 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d002      	beq.n	8003244 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	3b01      	subs	r3, #1
 8003242:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	1c5a      	adds	r2, r3, #1
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800324c:	697b      	ldr	r3, [r7, #20]
}
 800324e:	4618      	mov	r0, r3
 8003250:	3718      	adds	r7, #24
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}

08003256 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003256:	b580      	push	{r7, lr}
 8003258:	b082      	sub	sp, #8
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
 800325e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003264:	2b00      	cmp	r3, #0
 8003266:	d018      	beq.n	800329a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	68da      	ldr	r2, [r3, #12]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003270:	441a      	add	r2, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	68da      	ldr	r2, [r3, #12]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	429a      	cmp	r2, r3
 8003280:	d303      	bcc.n	800328a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	68d9      	ldr	r1, [r3, #12]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003292:	461a      	mov	r2, r3
 8003294:	6838      	ldr	r0, [r7, #0]
 8003296:	f001 fd05 	bl	8004ca4 <memcpy>
	}
}
 800329a:	bf00      	nop
 800329c:	3708      	adds	r7, #8
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}

080032a2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80032a2:	b580      	push	{r7, lr}
 80032a4:	b084      	sub	sp, #16
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80032aa:	f001 f99f 	bl	80045ec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032b4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80032b6:	e011      	b.n	80032dc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d012      	beq.n	80032e6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	3324      	adds	r3, #36	; 0x24
 80032c4:	4618      	mov	r0, r3
 80032c6:	f000 fc99 	bl	8003bfc <xTaskRemoveFromEventList>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d001      	beq.n	80032d4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80032d0:	f000 fd6e 	bl	8003db0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80032d4:	7bfb      	ldrb	r3, [r7, #15]
 80032d6:	3b01      	subs	r3, #1
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80032dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	dce9      	bgt.n	80032b8 <prvUnlockQueue+0x16>
 80032e4:	e000      	b.n	80032e8 <prvUnlockQueue+0x46>
					break;
 80032e6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	22ff      	movs	r2, #255	; 0xff
 80032ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80032f0:	f001 f9ac 	bl	800464c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80032f4:	f001 f97a 	bl	80045ec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032fe:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003300:	e011      	b.n	8003326 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d012      	beq.n	8003330 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	3310      	adds	r3, #16
 800330e:	4618      	mov	r0, r3
 8003310:	f000 fc74 	bl	8003bfc <xTaskRemoveFromEventList>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d001      	beq.n	800331e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800331a:	f000 fd49 	bl	8003db0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800331e:	7bbb      	ldrb	r3, [r7, #14]
 8003320:	3b01      	subs	r3, #1
 8003322:	b2db      	uxtb	r3, r3
 8003324:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003326:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800332a:	2b00      	cmp	r3, #0
 800332c:	dce9      	bgt.n	8003302 <prvUnlockQueue+0x60>
 800332e:	e000      	b.n	8003332 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003330:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	22ff      	movs	r2, #255	; 0xff
 8003336:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800333a:	f001 f987 	bl	800464c <vPortExitCritical>
}
 800333e:	bf00      	nop
 8003340:	3710      	adds	r7, #16
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}

08003346 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003346:	b580      	push	{r7, lr}
 8003348:	b084      	sub	sp, #16
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800334e:	f001 f94d 	bl	80045ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003356:	2b00      	cmp	r3, #0
 8003358:	d102      	bne.n	8003360 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800335a:	2301      	movs	r3, #1
 800335c:	60fb      	str	r3, [r7, #12]
 800335e:	e001      	b.n	8003364 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003360:	2300      	movs	r3, #0
 8003362:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003364:	f001 f972 	bl	800464c <vPortExitCritical>

	return xReturn;
 8003368:	68fb      	ldr	r3, [r7, #12]
}
 800336a:	4618      	mov	r0, r3
 800336c:	3710      	adds	r7, #16
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}

08003372 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003372:	b580      	push	{r7, lr}
 8003374:	b084      	sub	sp, #16
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800337a:	f001 f937 	bl	80045ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003386:	429a      	cmp	r2, r3
 8003388:	d102      	bne.n	8003390 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800338a:	2301      	movs	r3, #1
 800338c:	60fb      	str	r3, [r7, #12]
 800338e:	e001      	b.n	8003394 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003390:	2300      	movs	r3, #0
 8003392:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003394:	f001 f95a 	bl	800464c <vPortExitCritical>

	return xReturn;
 8003398:	68fb      	ldr	r3, [r7, #12]
}
 800339a:	4618      	mov	r0, r3
 800339c:	3710      	adds	r7, #16
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}

080033a2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80033a2:	b580      	push	{r7, lr}
 80033a4:	b08e      	sub	sp, #56	; 0x38
 80033a6:	af04      	add	r7, sp, #16
 80033a8:	60f8      	str	r0, [r7, #12]
 80033aa:	60b9      	str	r1, [r7, #8]
 80033ac:	607a      	str	r2, [r7, #4]
 80033ae:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80033b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d10a      	bne.n	80033cc <xTaskCreateStatic+0x2a>
	__asm volatile
 80033b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ba:	f383 8811 	msr	BASEPRI, r3
 80033be:	f3bf 8f6f 	isb	sy
 80033c2:	f3bf 8f4f 	dsb	sy
 80033c6:	623b      	str	r3, [r7, #32]
}
 80033c8:	bf00      	nop
 80033ca:	e7fe      	b.n	80033ca <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80033cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d10a      	bne.n	80033e8 <xTaskCreateStatic+0x46>
	__asm volatile
 80033d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033d6:	f383 8811 	msr	BASEPRI, r3
 80033da:	f3bf 8f6f 	isb	sy
 80033de:	f3bf 8f4f 	dsb	sy
 80033e2:	61fb      	str	r3, [r7, #28]
}
 80033e4:	bf00      	nop
 80033e6:	e7fe      	b.n	80033e6 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80033e8:	23a0      	movs	r3, #160	; 0xa0
 80033ea:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	2ba0      	cmp	r3, #160	; 0xa0
 80033f0:	d00a      	beq.n	8003408 <xTaskCreateStatic+0x66>
	__asm volatile
 80033f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033f6:	f383 8811 	msr	BASEPRI, r3
 80033fa:	f3bf 8f6f 	isb	sy
 80033fe:	f3bf 8f4f 	dsb	sy
 8003402:	61bb      	str	r3, [r7, #24]
}
 8003404:	bf00      	nop
 8003406:	e7fe      	b.n	8003406 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800340a:	2b00      	cmp	r3, #0
 800340c:	d01e      	beq.n	800344c <xTaskCreateStatic+0xaa>
 800340e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003410:	2b00      	cmp	r3, #0
 8003412:	d01b      	beq.n	800344c <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003416:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800341c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800341e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003420:	2202      	movs	r2, #2
 8003422:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003426:	2300      	movs	r3, #0
 8003428:	9303      	str	r3, [sp, #12]
 800342a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342c:	9302      	str	r3, [sp, #8]
 800342e:	f107 0314 	add.w	r3, r7, #20
 8003432:	9301      	str	r3, [sp, #4]
 8003434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003436:	9300      	str	r3, [sp, #0]
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	68b9      	ldr	r1, [r7, #8]
 800343e:	68f8      	ldr	r0, [r7, #12]
 8003440:	f000 f850 	bl	80034e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003444:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003446:	f000 f8e3 	bl	8003610 <prvAddNewTaskToReadyList>
 800344a:	e001      	b.n	8003450 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800344c:	2300      	movs	r3, #0
 800344e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003450:	697b      	ldr	r3, [r7, #20]
	}
 8003452:	4618      	mov	r0, r3
 8003454:	3728      	adds	r7, #40	; 0x28
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}

0800345a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800345a:	b580      	push	{r7, lr}
 800345c:	b08c      	sub	sp, #48	; 0x30
 800345e:	af04      	add	r7, sp, #16
 8003460:	60f8      	str	r0, [r7, #12]
 8003462:	60b9      	str	r1, [r7, #8]
 8003464:	603b      	str	r3, [r7, #0]
 8003466:	4613      	mov	r3, r2
 8003468:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800346a:	88fb      	ldrh	r3, [r7, #6]
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	4618      	mov	r0, r3
 8003470:	f001 f9bc 	bl	80047ec <pvPortMalloc>
 8003474:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d00e      	beq.n	800349a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800347c:	20a0      	movs	r0, #160	; 0xa0
 800347e:	f001 f9b5 	bl	80047ec <pvPortMalloc>
 8003482:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d003      	beq.n	8003492 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	697a      	ldr	r2, [r7, #20]
 800348e:	631a      	str	r2, [r3, #48]	; 0x30
 8003490:	e005      	b.n	800349e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003492:	6978      	ldr	r0, [r7, #20]
 8003494:	f001 fa6e 	bl	8004974 <vPortFree>
 8003498:	e001      	b.n	800349e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800349a:	2300      	movs	r3, #0
 800349c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d017      	beq.n	80034d4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80034ac:	88fa      	ldrh	r2, [r7, #6]
 80034ae:	2300      	movs	r3, #0
 80034b0:	9303      	str	r3, [sp, #12]
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	9302      	str	r3, [sp, #8]
 80034b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034b8:	9301      	str	r3, [sp, #4]
 80034ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034bc:	9300      	str	r3, [sp, #0]
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	68b9      	ldr	r1, [r7, #8]
 80034c2:	68f8      	ldr	r0, [r7, #12]
 80034c4:	f000 f80e 	bl	80034e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80034c8:	69f8      	ldr	r0, [r7, #28]
 80034ca:	f000 f8a1 	bl	8003610 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80034ce:	2301      	movs	r3, #1
 80034d0:	61bb      	str	r3, [r7, #24]
 80034d2:	e002      	b.n	80034da <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80034d4:	f04f 33ff 	mov.w	r3, #4294967295
 80034d8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80034da:	69bb      	ldr	r3, [r7, #24]
	}
 80034dc:	4618      	mov	r0, r3
 80034de:	3720      	adds	r7, #32
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b088      	sub	sp, #32
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	60b9      	str	r1, [r7, #8]
 80034ee:	607a      	str	r2, [r7, #4]
 80034f0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80034f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80034fc:	3b01      	subs	r3, #1
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	4413      	add	r3, r2
 8003502:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003504:	69bb      	ldr	r3, [r7, #24]
 8003506:	f023 0307 	bic.w	r3, r3, #7
 800350a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	f003 0307 	and.w	r3, r3, #7
 8003512:	2b00      	cmp	r3, #0
 8003514:	d00a      	beq.n	800352c <prvInitialiseNewTask+0x48>
	__asm volatile
 8003516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800351a:	f383 8811 	msr	BASEPRI, r3
 800351e:	f3bf 8f6f 	isb	sy
 8003522:	f3bf 8f4f 	dsb	sy
 8003526:	617b      	str	r3, [r7, #20]
}
 8003528:	bf00      	nop
 800352a:	e7fe      	b.n	800352a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800352c:	2300      	movs	r3, #0
 800352e:	61fb      	str	r3, [r7, #28]
 8003530:	e012      	b.n	8003558 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003532:	68ba      	ldr	r2, [r7, #8]
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	4413      	add	r3, r2
 8003538:	7819      	ldrb	r1, [r3, #0]
 800353a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	4413      	add	r3, r2
 8003540:	3334      	adds	r3, #52	; 0x34
 8003542:	460a      	mov	r2, r1
 8003544:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003546:	68ba      	ldr	r2, [r7, #8]
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	4413      	add	r3, r2
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d006      	beq.n	8003560 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	3301      	adds	r3, #1
 8003556:	61fb      	str	r3, [r7, #28]
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	2b0f      	cmp	r3, #15
 800355c:	d9e9      	bls.n	8003532 <prvInitialiseNewTask+0x4e>
 800355e:	e000      	b.n	8003562 <prvInitialiseNewTask+0x7e>
		{
			break;
 8003560:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003564:	2200      	movs	r2, #0
 8003566:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800356a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800356c:	2b06      	cmp	r3, #6
 800356e:	d901      	bls.n	8003574 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003570:	2306      	movs	r3, #6
 8003572:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003576:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003578:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800357a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800357c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800357e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003582:	2200      	movs	r2, #0
 8003584:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003588:	3304      	adds	r3, #4
 800358a:	4618      	mov	r0, r3
 800358c:	f7ff f805 	bl	800259a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003592:	3318      	adds	r3, #24
 8003594:	4618      	mov	r0, r3
 8003596:	f7ff f800 	bl	800259a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800359a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800359c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800359e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035a2:	f1c3 0207 	rsb	r2, r3, #7
 80035a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80035aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035ae:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80035b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035b2:	2200      	movs	r2, #0
 80035b4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80035b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ba:	2200      	movs	r2, #0
 80035bc:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80035c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035c2:	334c      	adds	r3, #76	; 0x4c
 80035c4:	224c      	movs	r2, #76	; 0x4c
 80035c6:	2100      	movs	r1, #0
 80035c8:	4618      	mov	r0, r3
 80035ca:	f001 fae7 	bl	8004b9c <memset>
 80035ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d0:	4a0c      	ldr	r2, [pc, #48]	; (8003604 <prvInitialiseNewTask+0x120>)
 80035d2:	651a      	str	r2, [r3, #80]	; 0x50
 80035d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d6:	4a0c      	ldr	r2, [pc, #48]	; (8003608 <prvInitialiseNewTask+0x124>)
 80035d8:	655a      	str	r2, [r3, #84]	; 0x54
 80035da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035dc:	4a0b      	ldr	r2, [pc, #44]	; (800360c <prvInitialiseNewTask+0x128>)
 80035de:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80035e0:	683a      	ldr	r2, [r7, #0]
 80035e2:	68f9      	ldr	r1, [r7, #12]
 80035e4:	69b8      	ldr	r0, [r7, #24]
 80035e6:	f000 ff11 	bl	800440c <pxPortInitialiseStack>
 80035ea:	4602      	mov	r2, r0
 80035ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ee:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80035f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d002      	beq.n	80035fc <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80035f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035fa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80035fc:	bf00      	nop
 80035fe:	3720      	adds	r7, #32
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}
 8003604:	20003d04 	.word	0x20003d04
 8003608:	20003d6c 	.word	0x20003d6c
 800360c:	20003dd4 	.word	0x20003dd4

08003610 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003618:	f000 ffe8 	bl	80045ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800361c:	4b2a      	ldr	r3, [pc, #168]	; (80036c8 <prvAddNewTaskToReadyList+0xb8>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	3301      	adds	r3, #1
 8003622:	4a29      	ldr	r2, [pc, #164]	; (80036c8 <prvAddNewTaskToReadyList+0xb8>)
 8003624:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003626:	4b29      	ldr	r3, [pc, #164]	; (80036cc <prvAddNewTaskToReadyList+0xbc>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d109      	bne.n	8003642 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800362e:	4a27      	ldr	r2, [pc, #156]	; (80036cc <prvAddNewTaskToReadyList+0xbc>)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003634:	4b24      	ldr	r3, [pc, #144]	; (80036c8 <prvAddNewTaskToReadyList+0xb8>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2b01      	cmp	r3, #1
 800363a:	d110      	bne.n	800365e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800363c:	f000 fbdc 	bl	8003df8 <prvInitialiseTaskLists>
 8003640:	e00d      	b.n	800365e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003642:	4b23      	ldr	r3, [pc, #140]	; (80036d0 <prvAddNewTaskToReadyList+0xc0>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d109      	bne.n	800365e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800364a:	4b20      	ldr	r3, [pc, #128]	; (80036cc <prvAddNewTaskToReadyList+0xbc>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003654:	429a      	cmp	r2, r3
 8003656:	d802      	bhi.n	800365e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003658:	4a1c      	ldr	r2, [pc, #112]	; (80036cc <prvAddNewTaskToReadyList+0xbc>)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800365e:	4b1d      	ldr	r3, [pc, #116]	; (80036d4 <prvAddNewTaskToReadyList+0xc4>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	3301      	adds	r3, #1
 8003664:	4a1b      	ldr	r2, [pc, #108]	; (80036d4 <prvAddNewTaskToReadyList+0xc4>)
 8003666:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800366c:	2201      	movs	r2, #1
 800366e:	409a      	lsls	r2, r3
 8003670:	4b19      	ldr	r3, [pc, #100]	; (80036d8 <prvAddNewTaskToReadyList+0xc8>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4313      	orrs	r3, r2
 8003676:	4a18      	ldr	r2, [pc, #96]	; (80036d8 <prvAddNewTaskToReadyList+0xc8>)
 8003678:	6013      	str	r3, [r2, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800367e:	4613      	mov	r3, r2
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	4413      	add	r3, r2
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	4a15      	ldr	r2, [pc, #84]	; (80036dc <prvAddNewTaskToReadyList+0xcc>)
 8003688:	441a      	add	r2, r3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	3304      	adds	r3, #4
 800368e:	4619      	mov	r1, r3
 8003690:	4610      	mov	r0, r2
 8003692:	f7fe ff8e 	bl	80025b2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003696:	f000 ffd9 	bl	800464c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800369a:	4b0d      	ldr	r3, [pc, #52]	; (80036d0 <prvAddNewTaskToReadyList+0xc0>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00e      	beq.n	80036c0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80036a2:	4b0a      	ldr	r3, [pc, #40]	; (80036cc <prvAddNewTaskToReadyList+0xbc>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d207      	bcs.n	80036c0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80036b0:	4b0b      	ldr	r3, [pc, #44]	; (80036e0 <prvAddNewTaskToReadyList+0xd0>)
 80036b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036b6:	601a      	str	r2, [r3, #0]
 80036b8:	f3bf 8f4f 	dsb	sy
 80036bc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80036c0:	bf00      	nop
 80036c2:	3708      	adds	r7, #8
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	200030b8 	.word	0x200030b8
 80036cc:	20002fb8 	.word	0x20002fb8
 80036d0:	200030c4 	.word	0x200030c4
 80036d4:	200030d4 	.word	0x200030d4
 80036d8:	200030c0 	.word	0x200030c0
 80036dc:	20002fbc 	.word	0x20002fbc
 80036e0:	e000ed04 	.word	0xe000ed04

080036e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80036ec:	2300      	movs	r3, #0
 80036ee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d017      	beq.n	8003726 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80036f6:	4b13      	ldr	r3, [pc, #76]	; (8003744 <vTaskDelay+0x60>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d00a      	beq.n	8003714 <vTaskDelay+0x30>
	__asm volatile
 80036fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003702:	f383 8811 	msr	BASEPRI, r3
 8003706:	f3bf 8f6f 	isb	sy
 800370a:	f3bf 8f4f 	dsb	sy
 800370e:	60bb      	str	r3, [r7, #8]
}
 8003710:	bf00      	nop
 8003712:	e7fe      	b.n	8003712 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003714:	f000 f884 	bl	8003820 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003718:	2100      	movs	r1, #0
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f000 fe10 	bl	8004340 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003720:	f000 f88c 	bl	800383c <xTaskResumeAll>
 8003724:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d107      	bne.n	800373c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800372c:	4b06      	ldr	r3, [pc, #24]	; (8003748 <vTaskDelay+0x64>)
 800372e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003732:	601a      	str	r2, [r3, #0]
 8003734:	f3bf 8f4f 	dsb	sy
 8003738:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800373c:	bf00      	nop
 800373e:	3710      	adds	r7, #16
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}
 8003744:	200030e0 	.word	0x200030e0
 8003748:	e000ed04 	.word	0xe000ed04

0800374c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b08a      	sub	sp, #40	; 0x28
 8003750:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003752:	2300      	movs	r3, #0
 8003754:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003756:	2300      	movs	r3, #0
 8003758:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800375a:	463a      	mov	r2, r7
 800375c:	1d39      	adds	r1, r7, #4
 800375e:	f107 0308 	add.w	r3, r7, #8
 8003762:	4618      	mov	r0, r3
 8003764:	f7fc fcf4 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003768:	6839      	ldr	r1, [r7, #0]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	68ba      	ldr	r2, [r7, #8]
 800376e:	9202      	str	r2, [sp, #8]
 8003770:	9301      	str	r3, [sp, #4]
 8003772:	2300      	movs	r3, #0
 8003774:	9300      	str	r3, [sp, #0]
 8003776:	2300      	movs	r3, #0
 8003778:	460a      	mov	r2, r1
 800377a:	4921      	ldr	r1, [pc, #132]	; (8003800 <vTaskStartScheduler+0xb4>)
 800377c:	4821      	ldr	r0, [pc, #132]	; (8003804 <vTaskStartScheduler+0xb8>)
 800377e:	f7ff fe10 	bl	80033a2 <xTaskCreateStatic>
 8003782:	4603      	mov	r3, r0
 8003784:	4a20      	ldr	r2, [pc, #128]	; (8003808 <vTaskStartScheduler+0xbc>)
 8003786:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003788:	4b1f      	ldr	r3, [pc, #124]	; (8003808 <vTaskStartScheduler+0xbc>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d002      	beq.n	8003796 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003790:	2301      	movs	r3, #1
 8003792:	617b      	str	r3, [r7, #20]
 8003794:	e001      	b.n	800379a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003796:	2300      	movs	r3, #0
 8003798:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	2b01      	cmp	r3, #1
 800379e:	d11b      	bne.n	80037d8 <vTaskStartScheduler+0x8c>
	__asm volatile
 80037a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037a4:	f383 8811 	msr	BASEPRI, r3
 80037a8:	f3bf 8f6f 	isb	sy
 80037ac:	f3bf 8f4f 	dsb	sy
 80037b0:	613b      	str	r3, [r7, #16]
}
 80037b2:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80037b4:	4b15      	ldr	r3, [pc, #84]	; (800380c <vTaskStartScheduler+0xc0>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	334c      	adds	r3, #76	; 0x4c
 80037ba:	4a15      	ldr	r2, [pc, #84]	; (8003810 <vTaskStartScheduler+0xc4>)
 80037bc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80037be:	4b15      	ldr	r3, [pc, #84]	; (8003814 <vTaskStartScheduler+0xc8>)
 80037c0:	f04f 32ff 	mov.w	r2, #4294967295
 80037c4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80037c6:	4b14      	ldr	r3, [pc, #80]	; (8003818 <vTaskStartScheduler+0xcc>)
 80037c8:	2201      	movs	r2, #1
 80037ca:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80037cc:	4b13      	ldr	r3, [pc, #76]	; (800381c <vTaskStartScheduler+0xd0>)
 80037ce:	2200      	movs	r2, #0
 80037d0:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80037d2:	f000 fe99 	bl	8004508 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80037d6:	e00e      	b.n	80037f6 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037de:	d10a      	bne.n	80037f6 <vTaskStartScheduler+0xaa>
	__asm volatile
 80037e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037e4:	f383 8811 	msr	BASEPRI, r3
 80037e8:	f3bf 8f6f 	isb	sy
 80037ec:	f3bf 8f4f 	dsb	sy
 80037f0:	60fb      	str	r3, [r7, #12]
}
 80037f2:	bf00      	nop
 80037f4:	e7fe      	b.n	80037f4 <vTaskStartScheduler+0xa8>
}
 80037f6:	bf00      	nop
 80037f8:	3718      	adds	r7, #24
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	08004ee8 	.word	0x08004ee8
 8003804:	08003dc9 	.word	0x08003dc9
 8003808:	200030dc 	.word	0x200030dc
 800380c:	20002fb8 	.word	0x20002fb8
 8003810:	2000005c 	.word	0x2000005c
 8003814:	200030d8 	.word	0x200030d8
 8003818:	200030c4 	.word	0x200030c4
 800381c:	200030bc 	.word	0x200030bc

08003820 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003820:	b480      	push	{r7}
 8003822:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003824:	4b04      	ldr	r3, [pc, #16]	; (8003838 <vTaskSuspendAll+0x18>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	3301      	adds	r3, #1
 800382a:	4a03      	ldr	r2, [pc, #12]	; (8003838 <vTaskSuspendAll+0x18>)
 800382c:	6013      	str	r3, [r2, #0]
}
 800382e:	bf00      	nop
 8003830:	46bd      	mov	sp, r7
 8003832:	bc80      	pop	{r7}
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	200030e0 	.word	0x200030e0

0800383c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003842:	2300      	movs	r3, #0
 8003844:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003846:	2300      	movs	r3, #0
 8003848:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800384a:	4b41      	ldr	r3, [pc, #260]	; (8003950 <xTaskResumeAll+0x114>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d10a      	bne.n	8003868 <xTaskResumeAll+0x2c>
	__asm volatile
 8003852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003856:	f383 8811 	msr	BASEPRI, r3
 800385a:	f3bf 8f6f 	isb	sy
 800385e:	f3bf 8f4f 	dsb	sy
 8003862:	603b      	str	r3, [r7, #0]
}
 8003864:	bf00      	nop
 8003866:	e7fe      	b.n	8003866 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003868:	f000 fec0 	bl	80045ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800386c:	4b38      	ldr	r3, [pc, #224]	; (8003950 <xTaskResumeAll+0x114>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	3b01      	subs	r3, #1
 8003872:	4a37      	ldr	r2, [pc, #220]	; (8003950 <xTaskResumeAll+0x114>)
 8003874:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003876:	4b36      	ldr	r3, [pc, #216]	; (8003950 <xTaskResumeAll+0x114>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d161      	bne.n	8003942 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800387e:	4b35      	ldr	r3, [pc, #212]	; (8003954 <xTaskResumeAll+0x118>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d05d      	beq.n	8003942 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003886:	e02e      	b.n	80038e6 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003888:	4b33      	ldr	r3, [pc, #204]	; (8003958 <xTaskResumeAll+0x11c>)
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	3318      	adds	r3, #24
 8003894:	4618      	mov	r0, r3
 8003896:	f7fe fee7 	bl	8002668 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	3304      	adds	r3, #4
 800389e:	4618      	mov	r0, r3
 80038a0:	f7fe fee2 	bl	8002668 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a8:	2201      	movs	r2, #1
 80038aa:	409a      	lsls	r2, r3
 80038ac:	4b2b      	ldr	r3, [pc, #172]	; (800395c <xTaskResumeAll+0x120>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	4a2a      	ldr	r2, [pc, #168]	; (800395c <xTaskResumeAll+0x120>)
 80038b4:	6013      	str	r3, [r2, #0]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038ba:	4613      	mov	r3, r2
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	4413      	add	r3, r2
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	4a27      	ldr	r2, [pc, #156]	; (8003960 <xTaskResumeAll+0x124>)
 80038c4:	441a      	add	r2, r3
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	3304      	adds	r3, #4
 80038ca:	4619      	mov	r1, r3
 80038cc:	4610      	mov	r0, r2
 80038ce:	f7fe fe70 	bl	80025b2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038d6:	4b23      	ldr	r3, [pc, #140]	; (8003964 <xTaskResumeAll+0x128>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038dc:	429a      	cmp	r2, r3
 80038de:	d302      	bcc.n	80038e6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80038e0:	4b21      	ldr	r3, [pc, #132]	; (8003968 <xTaskResumeAll+0x12c>)
 80038e2:	2201      	movs	r2, #1
 80038e4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80038e6:	4b1c      	ldr	r3, [pc, #112]	; (8003958 <xTaskResumeAll+0x11c>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d1cc      	bne.n	8003888 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d001      	beq.n	80038f8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80038f4:	f000 fb22 	bl	8003f3c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80038f8:	4b1c      	ldr	r3, [pc, #112]	; (800396c <xTaskResumeAll+0x130>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d010      	beq.n	8003926 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003904:	f000 f836 	bl	8003974 <xTaskIncrementTick>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d002      	beq.n	8003914 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800390e:	4b16      	ldr	r3, [pc, #88]	; (8003968 <xTaskResumeAll+0x12c>)
 8003910:	2201      	movs	r2, #1
 8003912:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	3b01      	subs	r3, #1
 8003918:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d1f1      	bne.n	8003904 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8003920:	4b12      	ldr	r3, [pc, #72]	; (800396c <xTaskResumeAll+0x130>)
 8003922:	2200      	movs	r2, #0
 8003924:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003926:	4b10      	ldr	r3, [pc, #64]	; (8003968 <xTaskResumeAll+0x12c>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d009      	beq.n	8003942 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800392e:	2301      	movs	r3, #1
 8003930:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003932:	4b0f      	ldr	r3, [pc, #60]	; (8003970 <xTaskResumeAll+0x134>)
 8003934:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003938:	601a      	str	r2, [r3, #0]
 800393a:	f3bf 8f4f 	dsb	sy
 800393e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003942:	f000 fe83 	bl	800464c <vPortExitCritical>

	return xAlreadyYielded;
 8003946:	68bb      	ldr	r3, [r7, #8]
}
 8003948:	4618      	mov	r0, r3
 800394a:	3710      	adds	r7, #16
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}
 8003950:	200030e0 	.word	0x200030e0
 8003954:	200030b8 	.word	0x200030b8
 8003958:	20003078 	.word	0x20003078
 800395c:	200030c0 	.word	0x200030c0
 8003960:	20002fbc 	.word	0x20002fbc
 8003964:	20002fb8 	.word	0x20002fb8
 8003968:	200030cc 	.word	0x200030cc
 800396c:	200030c8 	.word	0x200030c8
 8003970:	e000ed04 	.word	0xe000ed04

08003974 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b086      	sub	sp, #24
 8003978:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800397a:	2300      	movs	r3, #0
 800397c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800397e:	4b51      	ldr	r3, [pc, #324]	; (8003ac4 <xTaskIncrementTick+0x150>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2b00      	cmp	r3, #0
 8003984:	f040 808d 	bne.w	8003aa2 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003988:	4b4f      	ldr	r3, [pc, #316]	; (8003ac8 <xTaskIncrementTick+0x154>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	3301      	adds	r3, #1
 800398e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003990:	4a4d      	ldr	r2, [pc, #308]	; (8003ac8 <xTaskIncrementTick+0x154>)
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d120      	bne.n	80039de <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800399c:	4b4b      	ldr	r3, [pc, #300]	; (8003acc <xTaskIncrementTick+0x158>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d00a      	beq.n	80039bc <xTaskIncrementTick+0x48>
	__asm volatile
 80039a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039aa:	f383 8811 	msr	BASEPRI, r3
 80039ae:	f3bf 8f6f 	isb	sy
 80039b2:	f3bf 8f4f 	dsb	sy
 80039b6:	603b      	str	r3, [r7, #0]
}
 80039b8:	bf00      	nop
 80039ba:	e7fe      	b.n	80039ba <xTaskIncrementTick+0x46>
 80039bc:	4b43      	ldr	r3, [pc, #268]	; (8003acc <xTaskIncrementTick+0x158>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	60fb      	str	r3, [r7, #12]
 80039c2:	4b43      	ldr	r3, [pc, #268]	; (8003ad0 <xTaskIncrementTick+0x15c>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a41      	ldr	r2, [pc, #260]	; (8003acc <xTaskIncrementTick+0x158>)
 80039c8:	6013      	str	r3, [r2, #0]
 80039ca:	4a41      	ldr	r2, [pc, #260]	; (8003ad0 <xTaskIncrementTick+0x15c>)
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6013      	str	r3, [r2, #0]
 80039d0:	4b40      	ldr	r3, [pc, #256]	; (8003ad4 <xTaskIncrementTick+0x160>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	3301      	adds	r3, #1
 80039d6:	4a3f      	ldr	r2, [pc, #252]	; (8003ad4 <xTaskIncrementTick+0x160>)
 80039d8:	6013      	str	r3, [r2, #0]
 80039da:	f000 faaf 	bl	8003f3c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80039de:	4b3e      	ldr	r3, [pc, #248]	; (8003ad8 <xTaskIncrementTick+0x164>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	693a      	ldr	r2, [r7, #16]
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d34d      	bcc.n	8003a84 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80039e8:	4b38      	ldr	r3, [pc, #224]	; (8003acc <xTaskIncrementTick+0x158>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d101      	bne.n	80039f6 <xTaskIncrementTick+0x82>
 80039f2:	2301      	movs	r3, #1
 80039f4:	e000      	b.n	80039f8 <xTaskIncrementTick+0x84>
 80039f6:	2300      	movs	r3, #0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d004      	beq.n	8003a06 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039fc:	4b36      	ldr	r3, [pc, #216]	; (8003ad8 <xTaskIncrementTick+0x164>)
 80039fe:	f04f 32ff 	mov.w	r2, #4294967295
 8003a02:	601a      	str	r2, [r3, #0]
					break;
 8003a04:	e03e      	b.n	8003a84 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003a06:	4b31      	ldr	r3, [pc, #196]	; (8003acc <xTaskIncrementTick+0x158>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003a16:	693a      	ldr	r2, [r7, #16]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d203      	bcs.n	8003a26 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003a1e:	4a2e      	ldr	r2, [pc, #184]	; (8003ad8 <xTaskIncrementTick+0x164>)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6013      	str	r3, [r2, #0]
						break;
 8003a24:	e02e      	b.n	8003a84 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	3304      	adds	r3, #4
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f7fe fe1c 	bl	8002668 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d004      	beq.n	8003a42 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	3318      	adds	r3, #24
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f7fe fe13 	bl	8002668 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a46:	2201      	movs	r2, #1
 8003a48:	409a      	lsls	r2, r3
 8003a4a:	4b24      	ldr	r3, [pc, #144]	; (8003adc <xTaskIncrementTick+0x168>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	4a22      	ldr	r2, [pc, #136]	; (8003adc <xTaskIncrementTick+0x168>)
 8003a52:	6013      	str	r3, [r2, #0]
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a58:	4613      	mov	r3, r2
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	4413      	add	r3, r2
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	4a1f      	ldr	r2, [pc, #124]	; (8003ae0 <xTaskIncrementTick+0x16c>)
 8003a62:	441a      	add	r2, r3
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	3304      	adds	r3, #4
 8003a68:	4619      	mov	r1, r3
 8003a6a:	4610      	mov	r0, r2
 8003a6c:	f7fe fda1 	bl	80025b2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a74:	4b1b      	ldr	r3, [pc, #108]	; (8003ae4 <xTaskIncrementTick+0x170>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d3b4      	bcc.n	80039e8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a82:	e7b1      	b.n	80039e8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003a84:	4b17      	ldr	r3, [pc, #92]	; (8003ae4 <xTaskIncrementTick+0x170>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a8a:	4915      	ldr	r1, [pc, #84]	; (8003ae0 <xTaskIncrementTick+0x16c>)
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	4413      	add	r3, r2
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	440b      	add	r3, r1
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d907      	bls.n	8003aac <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	617b      	str	r3, [r7, #20]
 8003aa0:	e004      	b.n	8003aac <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003aa2:	4b11      	ldr	r3, [pc, #68]	; (8003ae8 <xTaskIncrementTick+0x174>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	3301      	adds	r3, #1
 8003aa8:	4a0f      	ldr	r2, [pc, #60]	; (8003ae8 <xTaskIncrementTick+0x174>)
 8003aaa:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003aac:	4b0f      	ldr	r3, [pc, #60]	; (8003aec <xTaskIncrementTick+0x178>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d001      	beq.n	8003ab8 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003ab8:	697b      	ldr	r3, [r7, #20]
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3718      	adds	r7, #24
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	200030e0 	.word	0x200030e0
 8003ac8:	200030bc 	.word	0x200030bc
 8003acc:	20003070 	.word	0x20003070
 8003ad0:	20003074 	.word	0x20003074
 8003ad4:	200030d0 	.word	0x200030d0
 8003ad8:	200030d8 	.word	0x200030d8
 8003adc:	200030c0 	.word	0x200030c0
 8003ae0:	20002fbc 	.word	0x20002fbc
 8003ae4:	20002fb8 	.word	0x20002fb8
 8003ae8:	200030c8 	.word	0x200030c8
 8003aec:	200030cc 	.word	0x200030cc

08003af0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003af0:	b480      	push	{r7}
 8003af2:	b087      	sub	sp, #28
 8003af4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003af6:	4b29      	ldr	r3, [pc, #164]	; (8003b9c <vTaskSwitchContext+0xac>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d003      	beq.n	8003b06 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003afe:	4b28      	ldr	r3, [pc, #160]	; (8003ba0 <vTaskSwitchContext+0xb0>)
 8003b00:	2201      	movs	r2, #1
 8003b02:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003b04:	e044      	b.n	8003b90 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8003b06:	4b26      	ldr	r3, [pc, #152]	; (8003ba0 <vTaskSwitchContext+0xb0>)
 8003b08:	2200      	movs	r2, #0
 8003b0a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003b0c:	4b25      	ldr	r3, [pc, #148]	; (8003ba4 <vTaskSwitchContext+0xb4>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	fab3 f383 	clz	r3, r3
 8003b18:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003b1a:	7afb      	ldrb	r3, [r7, #11]
 8003b1c:	f1c3 031f 	rsb	r3, r3, #31
 8003b20:	617b      	str	r3, [r7, #20]
 8003b22:	4921      	ldr	r1, [pc, #132]	; (8003ba8 <vTaskSwitchContext+0xb8>)
 8003b24:	697a      	ldr	r2, [r7, #20]
 8003b26:	4613      	mov	r3, r2
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	4413      	add	r3, r2
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	440b      	add	r3, r1
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d10a      	bne.n	8003b4c <vTaskSwitchContext+0x5c>
	__asm volatile
 8003b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b3a:	f383 8811 	msr	BASEPRI, r3
 8003b3e:	f3bf 8f6f 	isb	sy
 8003b42:	f3bf 8f4f 	dsb	sy
 8003b46:	607b      	str	r3, [r7, #4]
}
 8003b48:	bf00      	nop
 8003b4a:	e7fe      	b.n	8003b4a <vTaskSwitchContext+0x5a>
 8003b4c:	697a      	ldr	r2, [r7, #20]
 8003b4e:	4613      	mov	r3, r2
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	4413      	add	r3, r2
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	4a14      	ldr	r2, [pc, #80]	; (8003ba8 <vTaskSwitchContext+0xb8>)
 8003b58:	4413      	add	r3, r2
 8003b5a:	613b      	str	r3, [r7, #16]
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	685a      	ldr	r2, [r3, #4]
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	605a      	str	r2, [r3, #4]
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	685a      	ldr	r2, [r3, #4]
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	3308      	adds	r3, #8
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d104      	bne.n	8003b7c <vTaskSwitchContext+0x8c>
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	685a      	ldr	r2, [r3, #4]
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	605a      	str	r2, [r3, #4]
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	4a0a      	ldr	r2, [pc, #40]	; (8003bac <vTaskSwitchContext+0xbc>)
 8003b84:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003b86:	4b09      	ldr	r3, [pc, #36]	; (8003bac <vTaskSwitchContext+0xbc>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	334c      	adds	r3, #76	; 0x4c
 8003b8c:	4a08      	ldr	r2, [pc, #32]	; (8003bb0 <vTaskSwitchContext+0xc0>)
 8003b8e:	6013      	str	r3, [r2, #0]
}
 8003b90:	bf00      	nop
 8003b92:	371c      	adds	r7, #28
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bc80      	pop	{r7}
 8003b98:	4770      	bx	lr
 8003b9a:	bf00      	nop
 8003b9c:	200030e0 	.word	0x200030e0
 8003ba0:	200030cc 	.word	0x200030cc
 8003ba4:	200030c0 	.word	0x200030c0
 8003ba8:	20002fbc 	.word	0x20002fbc
 8003bac:	20002fb8 	.word	0x20002fb8
 8003bb0:	2000005c 	.word	0x2000005c

08003bb4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d10a      	bne.n	8003bda <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc8:	f383 8811 	msr	BASEPRI, r3
 8003bcc:	f3bf 8f6f 	isb	sy
 8003bd0:	f3bf 8f4f 	dsb	sy
 8003bd4:	60fb      	str	r3, [r7, #12]
}
 8003bd6:	bf00      	nop
 8003bd8:	e7fe      	b.n	8003bd8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003bda:	4b07      	ldr	r3, [pc, #28]	; (8003bf8 <vTaskPlaceOnEventList+0x44>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	3318      	adds	r3, #24
 8003be0:	4619      	mov	r1, r3
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f7fe fd08 	bl	80025f8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003be8:	2101      	movs	r1, #1
 8003bea:	6838      	ldr	r0, [r7, #0]
 8003bec:	f000 fba8 	bl	8004340 <prvAddCurrentTaskToDelayedList>
}
 8003bf0:	bf00      	nop
 8003bf2:	3710      	adds	r7, #16
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	20002fb8 	.word	0x20002fb8

08003bfc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b086      	sub	sp, #24
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	68db      	ldr	r3, [r3, #12]
 8003c0a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d10a      	bne.n	8003c28 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c16:	f383 8811 	msr	BASEPRI, r3
 8003c1a:	f3bf 8f6f 	isb	sy
 8003c1e:	f3bf 8f4f 	dsb	sy
 8003c22:	60fb      	str	r3, [r7, #12]
}
 8003c24:	bf00      	nop
 8003c26:	e7fe      	b.n	8003c26 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	3318      	adds	r3, #24
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f7fe fd1b 	bl	8002668 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c32:	4b1d      	ldr	r3, [pc, #116]	; (8003ca8 <xTaskRemoveFromEventList+0xac>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d11c      	bne.n	8003c74 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	3304      	adds	r3, #4
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f7fe fd12 	bl	8002668 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c48:	2201      	movs	r2, #1
 8003c4a:	409a      	lsls	r2, r3
 8003c4c:	4b17      	ldr	r3, [pc, #92]	; (8003cac <xTaskRemoveFromEventList+0xb0>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	4a16      	ldr	r2, [pc, #88]	; (8003cac <xTaskRemoveFromEventList+0xb0>)
 8003c54:	6013      	str	r3, [r2, #0]
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c5a:	4613      	mov	r3, r2
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	4413      	add	r3, r2
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	4a13      	ldr	r2, [pc, #76]	; (8003cb0 <xTaskRemoveFromEventList+0xb4>)
 8003c64:	441a      	add	r2, r3
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	3304      	adds	r3, #4
 8003c6a:	4619      	mov	r1, r3
 8003c6c:	4610      	mov	r0, r2
 8003c6e:	f7fe fca0 	bl	80025b2 <vListInsertEnd>
 8003c72:	e005      	b.n	8003c80 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	3318      	adds	r3, #24
 8003c78:	4619      	mov	r1, r3
 8003c7a:	480e      	ldr	r0, [pc, #56]	; (8003cb4 <xTaskRemoveFromEventList+0xb8>)
 8003c7c:	f7fe fc99 	bl	80025b2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c84:	4b0c      	ldr	r3, [pc, #48]	; (8003cb8 <xTaskRemoveFromEventList+0xbc>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d905      	bls.n	8003c9a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003c92:	4b0a      	ldr	r3, [pc, #40]	; (8003cbc <xTaskRemoveFromEventList+0xc0>)
 8003c94:	2201      	movs	r2, #1
 8003c96:	601a      	str	r2, [r3, #0]
 8003c98:	e001      	b.n	8003c9e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003c9e:	697b      	ldr	r3, [r7, #20]
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3718      	adds	r7, #24
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	200030e0 	.word	0x200030e0
 8003cac:	200030c0 	.word	0x200030c0
 8003cb0:	20002fbc 	.word	0x20002fbc
 8003cb4:	20003078 	.word	0x20003078
 8003cb8:	20002fb8 	.word	0x20002fb8
 8003cbc:	200030cc 	.word	0x200030cc

08003cc0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003cc8:	4b06      	ldr	r3, [pc, #24]	; (8003ce4 <vTaskInternalSetTimeOutState+0x24>)
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003cd0:	4b05      	ldr	r3, [pc, #20]	; (8003ce8 <vTaskInternalSetTimeOutState+0x28>)
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	605a      	str	r2, [r3, #4]
}
 8003cd8:	bf00      	nop
 8003cda:	370c      	adds	r7, #12
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bc80      	pop	{r7}
 8003ce0:	4770      	bx	lr
 8003ce2:	bf00      	nop
 8003ce4:	200030d0 	.word	0x200030d0
 8003ce8:	200030bc 	.word	0x200030bc

08003cec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b088      	sub	sp, #32
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d10a      	bne.n	8003d12 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d00:	f383 8811 	msr	BASEPRI, r3
 8003d04:	f3bf 8f6f 	isb	sy
 8003d08:	f3bf 8f4f 	dsb	sy
 8003d0c:	613b      	str	r3, [r7, #16]
}
 8003d0e:	bf00      	nop
 8003d10:	e7fe      	b.n	8003d10 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d10a      	bne.n	8003d2e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d1c:	f383 8811 	msr	BASEPRI, r3
 8003d20:	f3bf 8f6f 	isb	sy
 8003d24:	f3bf 8f4f 	dsb	sy
 8003d28:	60fb      	str	r3, [r7, #12]
}
 8003d2a:	bf00      	nop
 8003d2c:	e7fe      	b.n	8003d2c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003d2e:	f000 fc5d 	bl	80045ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003d32:	4b1d      	ldr	r3, [pc, #116]	; (8003da8 <xTaskCheckForTimeOut+0xbc>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	69ba      	ldr	r2, [r7, #24]
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d4a:	d102      	bne.n	8003d52 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	61fb      	str	r3, [r7, #28]
 8003d50:	e023      	b.n	8003d9a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	4b15      	ldr	r3, [pc, #84]	; (8003dac <xTaskCheckForTimeOut+0xc0>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d007      	beq.n	8003d6e <xTaskCheckForTimeOut+0x82>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	69ba      	ldr	r2, [r7, #24]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d302      	bcc.n	8003d6e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	61fb      	str	r3, [r7, #28]
 8003d6c:	e015      	b.n	8003d9a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	697a      	ldr	r2, [r7, #20]
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d20b      	bcs.n	8003d90 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	1ad2      	subs	r2, r2, r3
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f7ff ff9b 	bl	8003cc0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	61fb      	str	r3, [r7, #28]
 8003d8e:	e004      	b.n	8003d9a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	2200      	movs	r2, #0
 8003d94:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003d96:	2301      	movs	r3, #1
 8003d98:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003d9a:	f000 fc57 	bl	800464c <vPortExitCritical>

	return xReturn;
 8003d9e:	69fb      	ldr	r3, [r7, #28]
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3720      	adds	r7, #32
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	200030bc 	.word	0x200030bc
 8003dac:	200030d0 	.word	0x200030d0

08003db0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003db0:	b480      	push	{r7}
 8003db2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003db4:	4b03      	ldr	r3, [pc, #12]	; (8003dc4 <vTaskMissedYield+0x14>)
 8003db6:	2201      	movs	r2, #1
 8003db8:	601a      	str	r2, [r3, #0]
}
 8003dba:	bf00      	nop
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bc80      	pop	{r7}
 8003dc0:	4770      	bx	lr
 8003dc2:	bf00      	nop
 8003dc4:	200030cc 	.word	0x200030cc

08003dc8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003dd0:	f000 f852 	bl	8003e78 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003dd4:	4b06      	ldr	r3, [pc, #24]	; (8003df0 <prvIdleTask+0x28>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d9f9      	bls.n	8003dd0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003ddc:	4b05      	ldr	r3, [pc, #20]	; (8003df4 <prvIdleTask+0x2c>)
 8003dde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003de2:	601a      	str	r2, [r3, #0]
 8003de4:	f3bf 8f4f 	dsb	sy
 8003de8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003dec:	e7f0      	b.n	8003dd0 <prvIdleTask+0x8>
 8003dee:	bf00      	nop
 8003df0:	20002fbc 	.word	0x20002fbc
 8003df4:	e000ed04 	.word	0xe000ed04

08003df8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b082      	sub	sp, #8
 8003dfc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003dfe:	2300      	movs	r3, #0
 8003e00:	607b      	str	r3, [r7, #4]
 8003e02:	e00c      	b.n	8003e1e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	4613      	mov	r3, r2
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	4413      	add	r3, r2
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	4a12      	ldr	r2, [pc, #72]	; (8003e58 <prvInitialiseTaskLists+0x60>)
 8003e10:	4413      	add	r3, r2
 8003e12:	4618      	mov	r0, r3
 8003e14:	f7fe fba2 	bl	800255c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	3301      	adds	r3, #1
 8003e1c:	607b      	str	r3, [r7, #4]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2b06      	cmp	r3, #6
 8003e22:	d9ef      	bls.n	8003e04 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003e24:	480d      	ldr	r0, [pc, #52]	; (8003e5c <prvInitialiseTaskLists+0x64>)
 8003e26:	f7fe fb99 	bl	800255c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003e2a:	480d      	ldr	r0, [pc, #52]	; (8003e60 <prvInitialiseTaskLists+0x68>)
 8003e2c:	f7fe fb96 	bl	800255c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003e30:	480c      	ldr	r0, [pc, #48]	; (8003e64 <prvInitialiseTaskLists+0x6c>)
 8003e32:	f7fe fb93 	bl	800255c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003e36:	480c      	ldr	r0, [pc, #48]	; (8003e68 <prvInitialiseTaskLists+0x70>)
 8003e38:	f7fe fb90 	bl	800255c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003e3c:	480b      	ldr	r0, [pc, #44]	; (8003e6c <prvInitialiseTaskLists+0x74>)
 8003e3e:	f7fe fb8d 	bl	800255c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003e42:	4b0b      	ldr	r3, [pc, #44]	; (8003e70 <prvInitialiseTaskLists+0x78>)
 8003e44:	4a05      	ldr	r2, [pc, #20]	; (8003e5c <prvInitialiseTaskLists+0x64>)
 8003e46:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003e48:	4b0a      	ldr	r3, [pc, #40]	; (8003e74 <prvInitialiseTaskLists+0x7c>)
 8003e4a:	4a05      	ldr	r2, [pc, #20]	; (8003e60 <prvInitialiseTaskLists+0x68>)
 8003e4c:	601a      	str	r2, [r3, #0]
}
 8003e4e:	bf00      	nop
 8003e50:	3708      	adds	r7, #8
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	20002fbc 	.word	0x20002fbc
 8003e5c:	20003048 	.word	0x20003048
 8003e60:	2000305c 	.word	0x2000305c
 8003e64:	20003078 	.word	0x20003078
 8003e68:	2000308c 	.word	0x2000308c
 8003e6c:	200030a4 	.word	0x200030a4
 8003e70:	20003070 	.word	0x20003070
 8003e74:	20003074 	.word	0x20003074

08003e78 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b082      	sub	sp, #8
 8003e7c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003e7e:	e019      	b.n	8003eb4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003e80:	f000 fbb4 	bl	80045ec <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003e84:	4b10      	ldr	r3, [pc, #64]	; (8003ec8 <prvCheckTasksWaitingTermination+0x50>)
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	3304      	adds	r3, #4
 8003e90:	4618      	mov	r0, r3
 8003e92:	f7fe fbe9 	bl	8002668 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003e96:	4b0d      	ldr	r3, [pc, #52]	; (8003ecc <prvCheckTasksWaitingTermination+0x54>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	3b01      	subs	r3, #1
 8003e9c:	4a0b      	ldr	r2, [pc, #44]	; (8003ecc <prvCheckTasksWaitingTermination+0x54>)
 8003e9e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003ea0:	4b0b      	ldr	r3, [pc, #44]	; (8003ed0 <prvCheckTasksWaitingTermination+0x58>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	3b01      	subs	r3, #1
 8003ea6:	4a0a      	ldr	r2, [pc, #40]	; (8003ed0 <prvCheckTasksWaitingTermination+0x58>)
 8003ea8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003eaa:	f000 fbcf 	bl	800464c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 f810 	bl	8003ed4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003eb4:	4b06      	ldr	r3, [pc, #24]	; (8003ed0 <prvCheckTasksWaitingTermination+0x58>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d1e1      	bne.n	8003e80 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003ebc:	bf00      	nop
 8003ebe:	bf00      	nop
 8003ec0:	3708      	adds	r7, #8
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	2000308c 	.word	0x2000308c
 8003ecc:	200030b8 	.word	0x200030b8
 8003ed0:	200030a0 	.word	0x200030a0

08003ed4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	334c      	adds	r3, #76	; 0x4c
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f000 fe63 	bl	8004bac <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d108      	bne.n	8003f02 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f000 fd3d 	bl	8004974 <vPortFree>
				vPortFree( pxTCB );
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f000 fd3a 	bl	8004974 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003f00:	e018      	b.n	8003f34 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d103      	bne.n	8003f14 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f000 fd31 	bl	8004974 <vPortFree>
	}
 8003f12:	e00f      	b.n	8003f34 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d00a      	beq.n	8003f34 <prvDeleteTCB+0x60>
	__asm volatile
 8003f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f22:	f383 8811 	msr	BASEPRI, r3
 8003f26:	f3bf 8f6f 	isb	sy
 8003f2a:	f3bf 8f4f 	dsb	sy
 8003f2e:	60fb      	str	r3, [r7, #12]
}
 8003f30:	bf00      	nop
 8003f32:	e7fe      	b.n	8003f32 <prvDeleteTCB+0x5e>
	}
 8003f34:	bf00      	nop
 8003f36:	3710      	adds	r7, #16
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}

08003f3c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f42:	4b0e      	ldr	r3, [pc, #56]	; (8003f7c <prvResetNextTaskUnblockTime+0x40>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d101      	bne.n	8003f50 <prvResetNextTaskUnblockTime+0x14>
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e000      	b.n	8003f52 <prvResetNextTaskUnblockTime+0x16>
 8003f50:	2300      	movs	r3, #0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d004      	beq.n	8003f60 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003f56:	4b0a      	ldr	r3, [pc, #40]	; (8003f80 <prvResetNextTaskUnblockTime+0x44>)
 8003f58:	f04f 32ff 	mov.w	r2, #4294967295
 8003f5c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003f5e:	e008      	b.n	8003f72 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003f60:	4b06      	ldr	r3, [pc, #24]	; (8003f7c <prvResetNextTaskUnblockTime+0x40>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	4a04      	ldr	r2, [pc, #16]	; (8003f80 <prvResetNextTaskUnblockTime+0x44>)
 8003f70:	6013      	str	r3, [r2, #0]
}
 8003f72:	bf00      	nop
 8003f74:	370c      	adds	r7, #12
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bc80      	pop	{r7}
 8003f7a:	4770      	bx	lr
 8003f7c:	20003070 	.word	0x20003070
 8003f80:	200030d8 	.word	0x200030d8

08003f84 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003f8a:	4b0b      	ldr	r3, [pc, #44]	; (8003fb8 <xTaskGetSchedulerState+0x34>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d102      	bne.n	8003f98 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003f92:	2301      	movs	r3, #1
 8003f94:	607b      	str	r3, [r7, #4]
 8003f96:	e008      	b.n	8003faa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f98:	4b08      	ldr	r3, [pc, #32]	; (8003fbc <xTaskGetSchedulerState+0x38>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d102      	bne.n	8003fa6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003fa0:	2302      	movs	r3, #2
 8003fa2:	607b      	str	r3, [r7, #4]
 8003fa4:	e001      	b.n	8003faa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003faa:	687b      	ldr	r3, [r7, #4]
	}
 8003fac:	4618      	mov	r0, r3
 8003fae:	370c      	adds	r7, #12
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bc80      	pop	{r7}
 8003fb4:	4770      	bx	lr
 8003fb6:	bf00      	nop
 8003fb8:	200030c4 	.word	0x200030c4
 8003fbc:	200030e0 	.word	0x200030e0

08003fc0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d06e      	beq.n	80040b4 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fda:	4b39      	ldr	r3, [pc, #228]	; (80040c0 <xTaskPriorityInherit+0x100>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d25e      	bcs.n	80040a2 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	699b      	ldr	r3, [r3, #24]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	db06      	blt.n	8003ffa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fec:	4b34      	ldr	r3, [pc, #208]	; (80040c0 <xTaskPriorityInherit+0x100>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff2:	f1c3 0207 	rsb	r2, r3, #7
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	6959      	ldr	r1, [r3, #20]
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004002:	4613      	mov	r3, r2
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	4413      	add	r3, r2
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	4a2e      	ldr	r2, [pc, #184]	; (80040c4 <xTaskPriorityInherit+0x104>)
 800400c:	4413      	add	r3, r2
 800400e:	4299      	cmp	r1, r3
 8004010:	d101      	bne.n	8004016 <xTaskPriorityInherit+0x56>
 8004012:	2301      	movs	r3, #1
 8004014:	e000      	b.n	8004018 <xTaskPriorityInherit+0x58>
 8004016:	2300      	movs	r3, #0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d03a      	beq.n	8004092 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	3304      	adds	r3, #4
 8004020:	4618      	mov	r0, r3
 8004022:	f7fe fb21 	bl	8002668 <uxListRemove>
 8004026:	4603      	mov	r3, r0
 8004028:	2b00      	cmp	r3, #0
 800402a:	d115      	bne.n	8004058 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004030:	4924      	ldr	r1, [pc, #144]	; (80040c4 <xTaskPriorityInherit+0x104>)
 8004032:	4613      	mov	r3, r2
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	4413      	add	r3, r2
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	440b      	add	r3, r1
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d10a      	bne.n	8004058 <xTaskPriorityInherit+0x98>
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004046:	2201      	movs	r2, #1
 8004048:	fa02 f303 	lsl.w	r3, r2, r3
 800404c:	43da      	mvns	r2, r3
 800404e:	4b1e      	ldr	r3, [pc, #120]	; (80040c8 <xTaskPriorityInherit+0x108>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4013      	ands	r3, r2
 8004054:	4a1c      	ldr	r2, [pc, #112]	; (80040c8 <xTaskPriorityInherit+0x108>)
 8004056:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004058:	4b19      	ldr	r3, [pc, #100]	; (80040c0 <xTaskPriorityInherit+0x100>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004066:	2201      	movs	r2, #1
 8004068:	409a      	lsls	r2, r3
 800406a:	4b17      	ldr	r3, [pc, #92]	; (80040c8 <xTaskPriorityInherit+0x108>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4313      	orrs	r3, r2
 8004070:	4a15      	ldr	r2, [pc, #84]	; (80040c8 <xTaskPriorityInherit+0x108>)
 8004072:	6013      	str	r3, [r2, #0]
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004078:	4613      	mov	r3, r2
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	4413      	add	r3, r2
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	4a10      	ldr	r2, [pc, #64]	; (80040c4 <xTaskPriorityInherit+0x104>)
 8004082:	441a      	add	r2, r3
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	3304      	adds	r3, #4
 8004088:	4619      	mov	r1, r3
 800408a:	4610      	mov	r0, r2
 800408c:	f7fe fa91 	bl	80025b2 <vListInsertEnd>
 8004090:	e004      	b.n	800409c <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004092:	4b0b      	ldr	r3, [pc, #44]	; (80040c0 <xTaskPriorityInherit+0x100>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800409c:	2301      	movs	r3, #1
 800409e:	60fb      	str	r3, [r7, #12]
 80040a0:	e008      	b.n	80040b4 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040a6:	4b06      	ldr	r3, [pc, #24]	; (80040c0 <xTaskPriorityInherit+0x100>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d201      	bcs.n	80040b4 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80040b0:	2301      	movs	r3, #1
 80040b2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80040b4:	68fb      	ldr	r3, [r7, #12]
	}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3710      	adds	r7, #16
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	20002fb8 	.word	0x20002fb8
 80040c4:	20002fbc 	.word	0x20002fbc
 80040c8:	200030c0 	.word	0x200030c0

080040cc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b086      	sub	sp, #24
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80040d8:	2300      	movs	r3, #0
 80040da:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d06e      	beq.n	80041c0 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80040e2:	4b3a      	ldr	r3, [pc, #232]	; (80041cc <xTaskPriorityDisinherit+0x100>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	693a      	ldr	r2, [r7, #16]
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d00a      	beq.n	8004102 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80040ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040f0:	f383 8811 	msr	BASEPRI, r3
 80040f4:	f3bf 8f6f 	isb	sy
 80040f8:	f3bf 8f4f 	dsb	sy
 80040fc:	60fb      	str	r3, [r7, #12]
}
 80040fe:	bf00      	nop
 8004100:	e7fe      	b.n	8004100 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004106:	2b00      	cmp	r3, #0
 8004108:	d10a      	bne.n	8004120 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800410a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800410e:	f383 8811 	msr	BASEPRI, r3
 8004112:	f3bf 8f6f 	isb	sy
 8004116:	f3bf 8f4f 	dsb	sy
 800411a:	60bb      	str	r3, [r7, #8]
}
 800411c:	bf00      	nop
 800411e:	e7fe      	b.n	800411e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004124:	1e5a      	subs	r2, r3, #1
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004132:	429a      	cmp	r2, r3
 8004134:	d044      	beq.n	80041c0 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800413a:	2b00      	cmp	r3, #0
 800413c:	d140      	bne.n	80041c0 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	3304      	adds	r3, #4
 8004142:	4618      	mov	r0, r3
 8004144:	f7fe fa90 	bl	8002668 <uxListRemove>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d115      	bne.n	800417a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004152:	491f      	ldr	r1, [pc, #124]	; (80041d0 <xTaskPriorityDisinherit+0x104>)
 8004154:	4613      	mov	r3, r2
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	4413      	add	r3, r2
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	440b      	add	r3, r1
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d10a      	bne.n	800417a <xTaskPriorityDisinherit+0xae>
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004168:	2201      	movs	r2, #1
 800416a:	fa02 f303 	lsl.w	r3, r2, r3
 800416e:	43da      	mvns	r2, r3
 8004170:	4b18      	ldr	r3, [pc, #96]	; (80041d4 <xTaskPriorityDisinherit+0x108>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4013      	ands	r3, r2
 8004176:	4a17      	ldr	r2, [pc, #92]	; (80041d4 <xTaskPriorityDisinherit+0x108>)
 8004178:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004186:	f1c3 0207 	rsb	r2, r3, #7
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004192:	2201      	movs	r2, #1
 8004194:	409a      	lsls	r2, r3
 8004196:	4b0f      	ldr	r3, [pc, #60]	; (80041d4 <xTaskPriorityDisinherit+0x108>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4313      	orrs	r3, r2
 800419c:	4a0d      	ldr	r2, [pc, #52]	; (80041d4 <xTaskPriorityDisinherit+0x108>)
 800419e:	6013      	str	r3, [r2, #0]
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041a4:	4613      	mov	r3, r2
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	4413      	add	r3, r2
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	4a08      	ldr	r2, [pc, #32]	; (80041d0 <xTaskPriorityDisinherit+0x104>)
 80041ae:	441a      	add	r2, r3
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	3304      	adds	r3, #4
 80041b4:	4619      	mov	r1, r3
 80041b6:	4610      	mov	r0, r2
 80041b8:	f7fe f9fb 	bl	80025b2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80041bc:	2301      	movs	r3, #1
 80041be:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80041c0:	697b      	ldr	r3, [r7, #20]
	}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3718      	adds	r7, #24
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	bf00      	nop
 80041cc:	20002fb8 	.word	0x20002fb8
 80041d0:	20002fbc 	.word	0x20002fbc
 80041d4:	200030c0 	.word	0x200030c0

080041d8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b088      	sub	sp, #32
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80041e6:	2301      	movs	r3, #1
 80041e8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	f000 8088 	beq.w	8004302 <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80041f2:	69bb      	ldr	r3, [r7, #24]
 80041f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d10a      	bne.n	8004210 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80041fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041fe:	f383 8811 	msr	BASEPRI, r3
 8004202:	f3bf 8f6f 	isb	sy
 8004206:	f3bf 8f4f 	dsb	sy
 800420a:	60fb      	str	r3, [r7, #12]
}
 800420c:	bf00      	nop
 800420e:	e7fe      	b.n	800420e <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004210:	69bb      	ldr	r3, [r7, #24]
 8004212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004214:	683a      	ldr	r2, [r7, #0]
 8004216:	429a      	cmp	r2, r3
 8004218:	d902      	bls.n	8004220 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	61fb      	str	r3, [r7, #28]
 800421e:	e002      	b.n	8004226 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004220:	69bb      	ldr	r3, [r7, #24]
 8004222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004224:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004226:	69bb      	ldr	r3, [r7, #24]
 8004228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800422a:	69fa      	ldr	r2, [r7, #28]
 800422c:	429a      	cmp	r2, r3
 800422e:	d068      	beq.n	8004302 <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004230:	69bb      	ldr	r3, [r7, #24]
 8004232:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004234:	697a      	ldr	r2, [r7, #20]
 8004236:	429a      	cmp	r2, r3
 8004238:	d163      	bne.n	8004302 <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800423a:	4b34      	ldr	r3, [pc, #208]	; (800430c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	69ba      	ldr	r2, [r7, #24]
 8004240:	429a      	cmp	r2, r3
 8004242:	d10a      	bne.n	800425a <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 8004244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004248:	f383 8811 	msr	BASEPRI, r3
 800424c:	f3bf 8f6f 	isb	sy
 8004250:	f3bf 8f4f 	dsb	sy
 8004254:	60bb      	str	r3, [r7, #8]
}
 8004256:	bf00      	nop
 8004258:	e7fe      	b.n	8004258 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800425a:	69bb      	ldr	r3, [r7, #24]
 800425c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800425e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004260:	69bb      	ldr	r3, [r7, #24]
 8004262:	69fa      	ldr	r2, [r7, #28]
 8004264:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004266:	69bb      	ldr	r3, [r7, #24]
 8004268:	699b      	ldr	r3, [r3, #24]
 800426a:	2b00      	cmp	r3, #0
 800426c:	db04      	blt.n	8004278 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800426e:	69fb      	ldr	r3, [r7, #28]
 8004270:	f1c3 0207 	rsb	r2, r3, #7
 8004274:	69bb      	ldr	r3, [r7, #24]
 8004276:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004278:	69bb      	ldr	r3, [r7, #24]
 800427a:	6959      	ldr	r1, [r3, #20]
 800427c:	693a      	ldr	r2, [r7, #16]
 800427e:	4613      	mov	r3, r2
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	4413      	add	r3, r2
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	4a22      	ldr	r2, [pc, #136]	; (8004310 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8004288:	4413      	add	r3, r2
 800428a:	4299      	cmp	r1, r3
 800428c:	d101      	bne.n	8004292 <vTaskPriorityDisinheritAfterTimeout+0xba>
 800428e:	2301      	movs	r3, #1
 8004290:	e000      	b.n	8004294 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 8004292:	2300      	movs	r3, #0
 8004294:	2b00      	cmp	r3, #0
 8004296:	d034      	beq.n	8004302 <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	3304      	adds	r3, #4
 800429c:	4618      	mov	r0, r3
 800429e:	f7fe f9e3 	bl	8002668 <uxListRemove>
 80042a2:	4603      	mov	r3, r0
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d115      	bne.n	80042d4 <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80042a8:	69bb      	ldr	r3, [r7, #24]
 80042aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042ac:	4918      	ldr	r1, [pc, #96]	; (8004310 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80042ae:	4613      	mov	r3, r2
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	4413      	add	r3, r2
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	440b      	add	r3, r1
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d10a      	bne.n	80042d4 <vTaskPriorityDisinheritAfterTimeout+0xfc>
 80042be:	69bb      	ldr	r3, [r7, #24]
 80042c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c2:	2201      	movs	r2, #1
 80042c4:	fa02 f303 	lsl.w	r3, r2, r3
 80042c8:	43da      	mvns	r2, r3
 80042ca:	4b12      	ldr	r3, [pc, #72]	; (8004314 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4013      	ands	r3, r2
 80042d0:	4a10      	ldr	r2, [pc, #64]	; (8004314 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80042d2:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80042d4:	69bb      	ldr	r3, [r7, #24]
 80042d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d8:	2201      	movs	r2, #1
 80042da:	409a      	lsls	r2, r3
 80042dc:	4b0d      	ldr	r3, [pc, #52]	; (8004314 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	4a0c      	ldr	r2, [pc, #48]	; (8004314 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80042e4:	6013      	str	r3, [r2, #0]
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042ea:	4613      	mov	r3, r2
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	4413      	add	r3, r2
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	4a07      	ldr	r2, [pc, #28]	; (8004310 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80042f4:	441a      	add	r2, r3
 80042f6:	69bb      	ldr	r3, [r7, #24]
 80042f8:	3304      	adds	r3, #4
 80042fa:	4619      	mov	r1, r3
 80042fc:	4610      	mov	r0, r2
 80042fe:	f7fe f958 	bl	80025b2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004302:	bf00      	nop
 8004304:	3720      	adds	r7, #32
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	20002fb8 	.word	0x20002fb8
 8004310:	20002fbc 	.word	0x20002fbc
 8004314:	200030c0 	.word	0x200030c0

08004318 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8004318:	b480      	push	{r7}
 800431a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800431c:	4b07      	ldr	r3, [pc, #28]	; (800433c <pvTaskIncrementMutexHeldCount+0x24>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d004      	beq.n	800432e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004324:	4b05      	ldr	r3, [pc, #20]	; (800433c <pvTaskIncrementMutexHeldCount+0x24>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800432a:	3201      	adds	r2, #1
 800432c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800432e:	4b03      	ldr	r3, [pc, #12]	; (800433c <pvTaskIncrementMutexHeldCount+0x24>)
 8004330:	681b      	ldr	r3, [r3, #0]
	}
 8004332:	4618      	mov	r0, r3
 8004334:	46bd      	mov	sp, r7
 8004336:	bc80      	pop	{r7}
 8004338:	4770      	bx	lr
 800433a:	bf00      	nop
 800433c:	20002fb8 	.word	0x20002fb8

08004340 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800434a:	4b29      	ldr	r3, [pc, #164]	; (80043f0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004350:	4b28      	ldr	r3, [pc, #160]	; (80043f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	3304      	adds	r3, #4
 8004356:	4618      	mov	r0, r3
 8004358:	f7fe f986 	bl	8002668 <uxListRemove>
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d10b      	bne.n	800437a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8004362:	4b24      	ldr	r3, [pc, #144]	; (80043f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004368:	2201      	movs	r2, #1
 800436a:	fa02 f303 	lsl.w	r3, r2, r3
 800436e:	43da      	mvns	r2, r3
 8004370:	4b21      	ldr	r3, [pc, #132]	; (80043f8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4013      	ands	r3, r2
 8004376:	4a20      	ldr	r2, [pc, #128]	; (80043f8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004378:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004380:	d10a      	bne.n	8004398 <prvAddCurrentTaskToDelayedList+0x58>
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d007      	beq.n	8004398 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004388:	4b1a      	ldr	r3, [pc, #104]	; (80043f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	3304      	adds	r3, #4
 800438e:	4619      	mov	r1, r3
 8004390:	481a      	ldr	r0, [pc, #104]	; (80043fc <prvAddCurrentTaskToDelayedList+0xbc>)
 8004392:	f7fe f90e 	bl	80025b2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004396:	e026      	b.n	80043e6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004398:	68fa      	ldr	r2, [r7, #12]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4413      	add	r3, r2
 800439e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80043a0:	4b14      	ldr	r3, [pc, #80]	; (80043f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	68ba      	ldr	r2, [r7, #8]
 80043a6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80043a8:	68ba      	ldr	r2, [r7, #8]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d209      	bcs.n	80043c4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043b0:	4b13      	ldr	r3, [pc, #76]	; (8004400 <prvAddCurrentTaskToDelayedList+0xc0>)
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	4b0f      	ldr	r3, [pc, #60]	; (80043f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	3304      	adds	r3, #4
 80043ba:	4619      	mov	r1, r3
 80043bc:	4610      	mov	r0, r2
 80043be:	f7fe f91b 	bl	80025f8 <vListInsert>
}
 80043c2:	e010      	b.n	80043e6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043c4:	4b0f      	ldr	r3, [pc, #60]	; (8004404 <prvAddCurrentTaskToDelayedList+0xc4>)
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	4b0a      	ldr	r3, [pc, #40]	; (80043f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	3304      	adds	r3, #4
 80043ce:	4619      	mov	r1, r3
 80043d0:	4610      	mov	r0, r2
 80043d2:	f7fe f911 	bl	80025f8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80043d6:	4b0c      	ldr	r3, [pc, #48]	; (8004408 <prvAddCurrentTaskToDelayedList+0xc8>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	68ba      	ldr	r2, [r7, #8]
 80043dc:	429a      	cmp	r2, r3
 80043de:	d202      	bcs.n	80043e6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80043e0:	4a09      	ldr	r2, [pc, #36]	; (8004408 <prvAddCurrentTaskToDelayedList+0xc8>)
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	6013      	str	r3, [r2, #0]
}
 80043e6:	bf00      	nop
 80043e8:	3710      	adds	r7, #16
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	200030bc 	.word	0x200030bc
 80043f4:	20002fb8 	.word	0x20002fb8
 80043f8:	200030c0 	.word	0x200030c0
 80043fc:	200030a4 	.word	0x200030a4
 8004400:	20003074 	.word	0x20003074
 8004404:	20003070 	.word	0x20003070
 8004408:	200030d8 	.word	0x200030d8

0800440c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800440c:	b480      	push	{r7}
 800440e:	b085      	sub	sp, #20
 8004410:	af00      	add	r7, sp, #0
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	3b04      	subs	r3, #4
 800441c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004424:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	3b04      	subs	r3, #4
 800442a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	f023 0201 	bic.w	r2, r3, #1
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	3b04      	subs	r3, #4
 800443a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800443c:	4a08      	ldr	r2, [pc, #32]	; (8004460 <pxPortInitialiseStack+0x54>)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	3b14      	subs	r3, #20
 8004446:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	3b20      	subs	r3, #32
 8004452:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004454:	68fb      	ldr	r3, [r7, #12]
}
 8004456:	4618      	mov	r0, r3
 8004458:	3714      	adds	r7, #20
 800445a:	46bd      	mov	sp, r7
 800445c:	bc80      	pop	{r7}
 800445e:	4770      	bx	lr
 8004460:	08004465 	.word	0x08004465

08004464 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004464:	b480      	push	{r7}
 8004466:	b085      	sub	sp, #20
 8004468:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800446a:	2300      	movs	r3, #0
 800446c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800446e:	4b12      	ldr	r3, [pc, #72]	; (80044b8 <prvTaskExitError+0x54>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004476:	d00a      	beq.n	800448e <prvTaskExitError+0x2a>
	__asm volatile
 8004478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800447c:	f383 8811 	msr	BASEPRI, r3
 8004480:	f3bf 8f6f 	isb	sy
 8004484:	f3bf 8f4f 	dsb	sy
 8004488:	60fb      	str	r3, [r7, #12]
}
 800448a:	bf00      	nop
 800448c:	e7fe      	b.n	800448c <prvTaskExitError+0x28>
	__asm volatile
 800448e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004492:	f383 8811 	msr	BASEPRI, r3
 8004496:	f3bf 8f6f 	isb	sy
 800449a:	f3bf 8f4f 	dsb	sy
 800449e:	60bb      	str	r3, [r7, #8]
}
 80044a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80044a2:	bf00      	nop
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d0fc      	beq.n	80044a4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80044aa:	bf00      	nop
 80044ac:	bf00      	nop
 80044ae:	3714      	adds	r7, #20
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bc80      	pop	{r7}
 80044b4:	4770      	bx	lr
 80044b6:	bf00      	nop
 80044b8:	2000000c 	.word	0x2000000c
 80044bc:	00000000 	.word	0x00000000

080044c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80044c0:	4b07      	ldr	r3, [pc, #28]	; (80044e0 <pxCurrentTCBConst2>)
 80044c2:	6819      	ldr	r1, [r3, #0]
 80044c4:	6808      	ldr	r0, [r1, #0]
 80044c6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80044ca:	f380 8809 	msr	PSP, r0
 80044ce:	f3bf 8f6f 	isb	sy
 80044d2:	f04f 0000 	mov.w	r0, #0
 80044d6:	f380 8811 	msr	BASEPRI, r0
 80044da:	f04e 0e0d 	orr.w	lr, lr, #13
 80044de:	4770      	bx	lr

080044e0 <pxCurrentTCBConst2>:
 80044e0:	20002fb8 	.word	0x20002fb8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80044e4:	bf00      	nop
 80044e6:	bf00      	nop

080044e8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80044e8:	4806      	ldr	r0, [pc, #24]	; (8004504 <prvPortStartFirstTask+0x1c>)
 80044ea:	6800      	ldr	r0, [r0, #0]
 80044ec:	6800      	ldr	r0, [r0, #0]
 80044ee:	f380 8808 	msr	MSP, r0
 80044f2:	b662      	cpsie	i
 80044f4:	b661      	cpsie	f
 80044f6:	f3bf 8f4f 	dsb	sy
 80044fa:	f3bf 8f6f 	isb	sy
 80044fe:	df00      	svc	0
 8004500:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004502:	bf00      	nop
 8004504:	e000ed08 	.word	0xe000ed08

08004508 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b084      	sub	sp, #16
 800450c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800450e:	4b32      	ldr	r3, [pc, #200]	; (80045d8 <xPortStartScheduler+0xd0>)
 8004510:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	b2db      	uxtb	r3, r3
 8004518:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	22ff      	movs	r2, #255	; 0xff
 800451e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	b2db      	uxtb	r3, r3
 8004526:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004528:	78fb      	ldrb	r3, [r7, #3]
 800452a:	b2db      	uxtb	r3, r3
 800452c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004530:	b2da      	uxtb	r2, r3
 8004532:	4b2a      	ldr	r3, [pc, #168]	; (80045dc <xPortStartScheduler+0xd4>)
 8004534:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004536:	4b2a      	ldr	r3, [pc, #168]	; (80045e0 <xPortStartScheduler+0xd8>)
 8004538:	2207      	movs	r2, #7
 800453a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800453c:	e009      	b.n	8004552 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800453e:	4b28      	ldr	r3, [pc, #160]	; (80045e0 <xPortStartScheduler+0xd8>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	3b01      	subs	r3, #1
 8004544:	4a26      	ldr	r2, [pc, #152]	; (80045e0 <xPortStartScheduler+0xd8>)
 8004546:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004548:	78fb      	ldrb	r3, [r7, #3]
 800454a:	b2db      	uxtb	r3, r3
 800454c:	005b      	lsls	r3, r3, #1
 800454e:	b2db      	uxtb	r3, r3
 8004550:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004552:	78fb      	ldrb	r3, [r7, #3]
 8004554:	b2db      	uxtb	r3, r3
 8004556:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800455a:	2b80      	cmp	r3, #128	; 0x80
 800455c:	d0ef      	beq.n	800453e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800455e:	4b20      	ldr	r3, [pc, #128]	; (80045e0 <xPortStartScheduler+0xd8>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f1c3 0307 	rsb	r3, r3, #7
 8004566:	2b04      	cmp	r3, #4
 8004568:	d00a      	beq.n	8004580 <xPortStartScheduler+0x78>
	__asm volatile
 800456a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800456e:	f383 8811 	msr	BASEPRI, r3
 8004572:	f3bf 8f6f 	isb	sy
 8004576:	f3bf 8f4f 	dsb	sy
 800457a:	60bb      	str	r3, [r7, #8]
}
 800457c:	bf00      	nop
 800457e:	e7fe      	b.n	800457e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004580:	4b17      	ldr	r3, [pc, #92]	; (80045e0 <xPortStartScheduler+0xd8>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	021b      	lsls	r3, r3, #8
 8004586:	4a16      	ldr	r2, [pc, #88]	; (80045e0 <xPortStartScheduler+0xd8>)
 8004588:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800458a:	4b15      	ldr	r3, [pc, #84]	; (80045e0 <xPortStartScheduler+0xd8>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004592:	4a13      	ldr	r2, [pc, #76]	; (80045e0 <xPortStartScheduler+0xd8>)
 8004594:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	b2da      	uxtb	r2, r3
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800459e:	4b11      	ldr	r3, [pc, #68]	; (80045e4 <xPortStartScheduler+0xdc>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a10      	ldr	r2, [pc, #64]	; (80045e4 <xPortStartScheduler+0xdc>)
 80045a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80045a8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80045aa:	4b0e      	ldr	r3, [pc, #56]	; (80045e4 <xPortStartScheduler+0xdc>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a0d      	ldr	r2, [pc, #52]	; (80045e4 <xPortStartScheduler+0xdc>)
 80045b0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80045b4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80045b6:	f000 f8b9 	bl	800472c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80045ba:	4b0b      	ldr	r3, [pc, #44]	; (80045e8 <xPortStartScheduler+0xe0>)
 80045bc:	2200      	movs	r2, #0
 80045be:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80045c0:	f7ff ff92 	bl	80044e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80045c4:	f7ff fa94 	bl	8003af0 <vTaskSwitchContext>
	prvTaskExitError();
 80045c8:	f7ff ff4c 	bl	8004464 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80045cc:	2300      	movs	r3, #0
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3710      	adds	r7, #16
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	e000e400 	.word	0xe000e400
 80045dc:	200030e4 	.word	0x200030e4
 80045e0:	200030e8 	.word	0x200030e8
 80045e4:	e000ed20 	.word	0xe000ed20
 80045e8:	2000000c 	.word	0x2000000c

080045ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80045ec:	b480      	push	{r7}
 80045ee:	b083      	sub	sp, #12
 80045f0:	af00      	add	r7, sp, #0
	__asm volatile
 80045f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f6:	f383 8811 	msr	BASEPRI, r3
 80045fa:	f3bf 8f6f 	isb	sy
 80045fe:	f3bf 8f4f 	dsb	sy
 8004602:	607b      	str	r3, [r7, #4]
}
 8004604:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004606:	4b0f      	ldr	r3, [pc, #60]	; (8004644 <vPortEnterCritical+0x58>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	3301      	adds	r3, #1
 800460c:	4a0d      	ldr	r2, [pc, #52]	; (8004644 <vPortEnterCritical+0x58>)
 800460e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004610:	4b0c      	ldr	r3, [pc, #48]	; (8004644 <vPortEnterCritical+0x58>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	2b01      	cmp	r3, #1
 8004616:	d10f      	bne.n	8004638 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004618:	4b0b      	ldr	r3, [pc, #44]	; (8004648 <vPortEnterCritical+0x5c>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	b2db      	uxtb	r3, r3
 800461e:	2b00      	cmp	r3, #0
 8004620:	d00a      	beq.n	8004638 <vPortEnterCritical+0x4c>
	__asm volatile
 8004622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004626:	f383 8811 	msr	BASEPRI, r3
 800462a:	f3bf 8f6f 	isb	sy
 800462e:	f3bf 8f4f 	dsb	sy
 8004632:	603b      	str	r3, [r7, #0]
}
 8004634:	bf00      	nop
 8004636:	e7fe      	b.n	8004636 <vPortEnterCritical+0x4a>
	}
}
 8004638:	bf00      	nop
 800463a:	370c      	adds	r7, #12
 800463c:	46bd      	mov	sp, r7
 800463e:	bc80      	pop	{r7}
 8004640:	4770      	bx	lr
 8004642:	bf00      	nop
 8004644:	2000000c 	.word	0x2000000c
 8004648:	e000ed04 	.word	0xe000ed04

0800464c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004652:	4b11      	ldr	r3, [pc, #68]	; (8004698 <vPortExitCritical+0x4c>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d10a      	bne.n	8004670 <vPortExitCritical+0x24>
	__asm volatile
 800465a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800465e:	f383 8811 	msr	BASEPRI, r3
 8004662:	f3bf 8f6f 	isb	sy
 8004666:	f3bf 8f4f 	dsb	sy
 800466a:	607b      	str	r3, [r7, #4]
}
 800466c:	bf00      	nop
 800466e:	e7fe      	b.n	800466e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004670:	4b09      	ldr	r3, [pc, #36]	; (8004698 <vPortExitCritical+0x4c>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	3b01      	subs	r3, #1
 8004676:	4a08      	ldr	r2, [pc, #32]	; (8004698 <vPortExitCritical+0x4c>)
 8004678:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800467a:	4b07      	ldr	r3, [pc, #28]	; (8004698 <vPortExitCritical+0x4c>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d105      	bne.n	800468e <vPortExitCritical+0x42>
 8004682:	2300      	movs	r3, #0
 8004684:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	f383 8811 	msr	BASEPRI, r3
}
 800468c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800468e:	bf00      	nop
 8004690:	370c      	adds	r7, #12
 8004692:	46bd      	mov	sp, r7
 8004694:	bc80      	pop	{r7}
 8004696:	4770      	bx	lr
 8004698:	2000000c 	.word	0x2000000c
 800469c:	00000000 	.word	0x00000000

080046a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80046a0:	f3ef 8009 	mrs	r0, PSP
 80046a4:	f3bf 8f6f 	isb	sy
 80046a8:	4b0d      	ldr	r3, [pc, #52]	; (80046e0 <pxCurrentTCBConst>)
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80046b0:	6010      	str	r0, [r2, #0]
 80046b2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80046b6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80046ba:	f380 8811 	msr	BASEPRI, r0
 80046be:	f7ff fa17 	bl	8003af0 <vTaskSwitchContext>
 80046c2:	f04f 0000 	mov.w	r0, #0
 80046c6:	f380 8811 	msr	BASEPRI, r0
 80046ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80046ce:	6819      	ldr	r1, [r3, #0]
 80046d0:	6808      	ldr	r0, [r1, #0]
 80046d2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80046d6:	f380 8809 	msr	PSP, r0
 80046da:	f3bf 8f6f 	isb	sy
 80046de:	4770      	bx	lr

080046e0 <pxCurrentTCBConst>:
 80046e0:	20002fb8 	.word	0x20002fb8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80046e4:	bf00      	nop
 80046e6:	bf00      	nop

080046e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b082      	sub	sp, #8
 80046ec:	af00      	add	r7, sp, #0
	__asm volatile
 80046ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046f2:	f383 8811 	msr	BASEPRI, r3
 80046f6:	f3bf 8f6f 	isb	sy
 80046fa:	f3bf 8f4f 	dsb	sy
 80046fe:	607b      	str	r3, [r7, #4]
}
 8004700:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004702:	f7ff f937 	bl	8003974 <xTaskIncrementTick>
 8004706:	4603      	mov	r3, r0
 8004708:	2b00      	cmp	r3, #0
 800470a:	d003      	beq.n	8004714 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800470c:	4b06      	ldr	r3, [pc, #24]	; (8004728 <xPortSysTickHandler+0x40>)
 800470e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004712:	601a      	str	r2, [r3, #0]
 8004714:	2300      	movs	r3, #0
 8004716:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	f383 8811 	msr	BASEPRI, r3
}
 800471e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004720:	bf00      	nop
 8004722:	3708      	adds	r7, #8
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}
 8004728:	e000ed04 	.word	0xe000ed04

0800472c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800472c:	b480      	push	{r7}
 800472e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004730:	4b0a      	ldr	r3, [pc, #40]	; (800475c <vPortSetupTimerInterrupt+0x30>)
 8004732:	2200      	movs	r2, #0
 8004734:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004736:	4b0a      	ldr	r3, [pc, #40]	; (8004760 <vPortSetupTimerInterrupt+0x34>)
 8004738:	2200      	movs	r2, #0
 800473a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800473c:	4b09      	ldr	r3, [pc, #36]	; (8004764 <vPortSetupTimerInterrupt+0x38>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a09      	ldr	r2, [pc, #36]	; (8004768 <vPortSetupTimerInterrupt+0x3c>)
 8004742:	fba2 2303 	umull	r2, r3, r2, r3
 8004746:	099b      	lsrs	r3, r3, #6
 8004748:	4a08      	ldr	r2, [pc, #32]	; (800476c <vPortSetupTimerInterrupt+0x40>)
 800474a:	3b01      	subs	r3, #1
 800474c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800474e:	4b03      	ldr	r3, [pc, #12]	; (800475c <vPortSetupTimerInterrupt+0x30>)
 8004750:	2207      	movs	r2, #7
 8004752:	601a      	str	r2, [r3, #0]
}
 8004754:	bf00      	nop
 8004756:	46bd      	mov	sp, r7
 8004758:	bc80      	pop	{r7}
 800475a:	4770      	bx	lr
 800475c:	e000e010 	.word	0xe000e010
 8004760:	e000e018 	.word	0xe000e018
 8004764:	20000000 	.word	0x20000000
 8004768:	10624dd3 	.word	0x10624dd3
 800476c:	e000e014 	.word	0xe000e014

08004770 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004770:	b480      	push	{r7}
 8004772:	b085      	sub	sp, #20
 8004774:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004776:	f3ef 8305 	mrs	r3, IPSR
 800477a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2b0f      	cmp	r3, #15
 8004780:	d914      	bls.n	80047ac <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004782:	4a16      	ldr	r2, [pc, #88]	; (80047dc <vPortValidateInterruptPriority+0x6c>)
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	4413      	add	r3, r2
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800478c:	4b14      	ldr	r3, [pc, #80]	; (80047e0 <vPortValidateInterruptPriority+0x70>)
 800478e:	781b      	ldrb	r3, [r3, #0]
 8004790:	7afa      	ldrb	r2, [r7, #11]
 8004792:	429a      	cmp	r2, r3
 8004794:	d20a      	bcs.n	80047ac <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800479a:	f383 8811 	msr	BASEPRI, r3
 800479e:	f3bf 8f6f 	isb	sy
 80047a2:	f3bf 8f4f 	dsb	sy
 80047a6:	607b      	str	r3, [r7, #4]
}
 80047a8:	bf00      	nop
 80047aa:	e7fe      	b.n	80047aa <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80047ac:	4b0d      	ldr	r3, [pc, #52]	; (80047e4 <vPortValidateInterruptPriority+0x74>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80047b4:	4b0c      	ldr	r3, [pc, #48]	; (80047e8 <vPortValidateInterruptPriority+0x78>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d90a      	bls.n	80047d2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80047bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047c0:	f383 8811 	msr	BASEPRI, r3
 80047c4:	f3bf 8f6f 	isb	sy
 80047c8:	f3bf 8f4f 	dsb	sy
 80047cc:	603b      	str	r3, [r7, #0]
}
 80047ce:	bf00      	nop
 80047d0:	e7fe      	b.n	80047d0 <vPortValidateInterruptPriority+0x60>
	}
 80047d2:	bf00      	nop
 80047d4:	3714      	adds	r7, #20
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bc80      	pop	{r7}
 80047da:	4770      	bx	lr
 80047dc:	e000e3f0 	.word	0xe000e3f0
 80047e0:	200030e4 	.word	0x200030e4
 80047e4:	e000ed0c 	.word	0xe000ed0c
 80047e8:	200030e8 	.word	0x200030e8

080047ec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b08a      	sub	sp, #40	; 0x28
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80047f4:	2300      	movs	r3, #0
 80047f6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80047f8:	f7ff f812 	bl	8003820 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80047fc:	4b58      	ldr	r3, [pc, #352]	; (8004960 <pvPortMalloc+0x174>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d101      	bne.n	8004808 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004804:	f000 f910 	bl	8004a28 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004808:	4b56      	ldr	r3, [pc, #344]	; (8004964 <pvPortMalloc+0x178>)
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	4013      	ands	r3, r2
 8004810:	2b00      	cmp	r3, #0
 8004812:	f040 808e 	bne.w	8004932 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d01d      	beq.n	8004858 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800481c:	2208      	movs	r2, #8
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4413      	add	r3, r2
 8004822:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f003 0307 	and.w	r3, r3, #7
 800482a:	2b00      	cmp	r3, #0
 800482c:	d014      	beq.n	8004858 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f023 0307 	bic.w	r3, r3, #7
 8004834:	3308      	adds	r3, #8
 8004836:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f003 0307 	and.w	r3, r3, #7
 800483e:	2b00      	cmp	r3, #0
 8004840:	d00a      	beq.n	8004858 <pvPortMalloc+0x6c>
	__asm volatile
 8004842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004846:	f383 8811 	msr	BASEPRI, r3
 800484a:	f3bf 8f6f 	isb	sy
 800484e:	f3bf 8f4f 	dsb	sy
 8004852:	617b      	str	r3, [r7, #20]
}
 8004854:	bf00      	nop
 8004856:	e7fe      	b.n	8004856 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d069      	beq.n	8004932 <pvPortMalloc+0x146>
 800485e:	4b42      	ldr	r3, [pc, #264]	; (8004968 <pvPortMalloc+0x17c>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	429a      	cmp	r2, r3
 8004866:	d864      	bhi.n	8004932 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004868:	4b40      	ldr	r3, [pc, #256]	; (800496c <pvPortMalloc+0x180>)
 800486a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800486c:	4b3f      	ldr	r3, [pc, #252]	; (800496c <pvPortMalloc+0x180>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004872:	e004      	b.n	800487e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004876:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800487e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	429a      	cmp	r2, r3
 8004886:	d903      	bls.n	8004890 <pvPortMalloc+0xa4>
 8004888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d1f1      	bne.n	8004874 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004890:	4b33      	ldr	r3, [pc, #204]	; (8004960 <pvPortMalloc+0x174>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004896:	429a      	cmp	r2, r3
 8004898:	d04b      	beq.n	8004932 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800489a:	6a3b      	ldr	r3, [r7, #32]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	2208      	movs	r2, #8
 80048a0:	4413      	add	r3, r2
 80048a2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80048a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	6a3b      	ldr	r3, [r7, #32]
 80048aa:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80048ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ae:	685a      	ldr	r2, [r3, #4]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	1ad2      	subs	r2, r2, r3
 80048b4:	2308      	movs	r3, #8
 80048b6:	005b      	lsls	r3, r3, #1
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d91f      	bls.n	80048fc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80048bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4413      	add	r3, r2
 80048c2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80048c4:	69bb      	ldr	r3, [r7, #24]
 80048c6:	f003 0307 	and.w	r3, r3, #7
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d00a      	beq.n	80048e4 <pvPortMalloc+0xf8>
	__asm volatile
 80048ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d2:	f383 8811 	msr	BASEPRI, r3
 80048d6:	f3bf 8f6f 	isb	sy
 80048da:	f3bf 8f4f 	dsb	sy
 80048de:	613b      	str	r3, [r7, #16]
}
 80048e0:	bf00      	nop
 80048e2:	e7fe      	b.n	80048e2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80048e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e6:	685a      	ldr	r2, [r3, #4]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	1ad2      	subs	r2, r2, r3
 80048ec:	69bb      	ldr	r3, [r7, #24]
 80048ee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80048f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80048f6:	69b8      	ldr	r0, [r7, #24]
 80048f8:	f000 f8f8 	bl	8004aec <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80048fc:	4b1a      	ldr	r3, [pc, #104]	; (8004968 <pvPortMalloc+0x17c>)
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	4a18      	ldr	r2, [pc, #96]	; (8004968 <pvPortMalloc+0x17c>)
 8004908:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800490a:	4b17      	ldr	r3, [pc, #92]	; (8004968 <pvPortMalloc+0x17c>)
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	4b18      	ldr	r3, [pc, #96]	; (8004970 <pvPortMalloc+0x184>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	429a      	cmp	r2, r3
 8004914:	d203      	bcs.n	800491e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004916:	4b14      	ldr	r3, [pc, #80]	; (8004968 <pvPortMalloc+0x17c>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a15      	ldr	r2, [pc, #84]	; (8004970 <pvPortMalloc+0x184>)
 800491c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800491e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004920:	685a      	ldr	r2, [r3, #4]
 8004922:	4b10      	ldr	r3, [pc, #64]	; (8004964 <pvPortMalloc+0x178>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	431a      	orrs	r2, r3
 8004928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800492c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492e:	2200      	movs	r2, #0
 8004930:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004932:	f7fe ff83 	bl	800383c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	f003 0307 	and.w	r3, r3, #7
 800493c:	2b00      	cmp	r3, #0
 800493e:	d00a      	beq.n	8004956 <pvPortMalloc+0x16a>
	__asm volatile
 8004940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004944:	f383 8811 	msr	BASEPRI, r3
 8004948:	f3bf 8f6f 	isb	sy
 800494c:	f3bf 8f4f 	dsb	sy
 8004950:	60fb      	str	r3, [r7, #12]
}
 8004952:	bf00      	nop
 8004954:	e7fe      	b.n	8004954 <pvPortMalloc+0x168>
	return pvReturn;
 8004956:	69fb      	ldr	r3, [r7, #28]
}
 8004958:	4618      	mov	r0, r3
 800495a:	3728      	adds	r7, #40	; 0x28
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}
 8004960:	20003cf4 	.word	0x20003cf4
 8004964:	20003d00 	.word	0x20003d00
 8004968:	20003cf8 	.word	0x20003cf8
 800496c:	20003cec 	.word	0x20003cec
 8004970:	20003cfc 	.word	0x20003cfc

08004974 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b086      	sub	sp, #24
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d048      	beq.n	8004a18 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004986:	2308      	movs	r3, #8
 8004988:	425b      	negs	r3, r3
 800498a:	697a      	ldr	r2, [r7, #20]
 800498c:	4413      	add	r3, r2
 800498e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	685a      	ldr	r2, [r3, #4]
 8004998:	4b21      	ldr	r3, [pc, #132]	; (8004a20 <vPortFree+0xac>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4013      	ands	r3, r2
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d10a      	bne.n	80049b8 <vPortFree+0x44>
	__asm volatile
 80049a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a6:	f383 8811 	msr	BASEPRI, r3
 80049aa:	f3bf 8f6f 	isb	sy
 80049ae:	f3bf 8f4f 	dsb	sy
 80049b2:	60fb      	str	r3, [r7, #12]
}
 80049b4:	bf00      	nop
 80049b6:	e7fe      	b.n	80049b6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d00a      	beq.n	80049d6 <vPortFree+0x62>
	__asm volatile
 80049c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c4:	f383 8811 	msr	BASEPRI, r3
 80049c8:	f3bf 8f6f 	isb	sy
 80049cc:	f3bf 8f4f 	dsb	sy
 80049d0:	60bb      	str	r3, [r7, #8]
}
 80049d2:	bf00      	nop
 80049d4:	e7fe      	b.n	80049d4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	685a      	ldr	r2, [r3, #4]
 80049da:	4b11      	ldr	r3, [pc, #68]	; (8004a20 <vPortFree+0xac>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4013      	ands	r3, r2
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d019      	beq.n	8004a18 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d115      	bne.n	8004a18 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	685a      	ldr	r2, [r3, #4]
 80049f0:	4b0b      	ldr	r3, [pc, #44]	; (8004a20 <vPortFree+0xac>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	43db      	mvns	r3, r3
 80049f6:	401a      	ands	r2, r3
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80049fc:	f7fe ff10 	bl	8003820 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	685a      	ldr	r2, [r3, #4]
 8004a04:	4b07      	ldr	r3, [pc, #28]	; (8004a24 <vPortFree+0xb0>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4413      	add	r3, r2
 8004a0a:	4a06      	ldr	r2, [pc, #24]	; (8004a24 <vPortFree+0xb0>)
 8004a0c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004a0e:	6938      	ldr	r0, [r7, #16]
 8004a10:	f000 f86c 	bl	8004aec <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004a14:	f7fe ff12 	bl	800383c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004a18:	bf00      	nop
 8004a1a:	3718      	adds	r7, #24
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	20003d00 	.word	0x20003d00
 8004a24:	20003cf8 	.word	0x20003cf8

08004a28 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b085      	sub	sp, #20
 8004a2c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004a2e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004a32:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004a34:	4b27      	ldr	r3, [pc, #156]	; (8004ad4 <prvHeapInit+0xac>)
 8004a36:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f003 0307 	and.w	r3, r3, #7
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d00c      	beq.n	8004a5c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	3307      	adds	r3, #7
 8004a46:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f023 0307 	bic.w	r3, r3, #7
 8004a4e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004a50:	68ba      	ldr	r2, [r7, #8]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	4a1f      	ldr	r2, [pc, #124]	; (8004ad4 <prvHeapInit+0xac>)
 8004a58:	4413      	add	r3, r2
 8004a5a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004a60:	4a1d      	ldr	r2, [pc, #116]	; (8004ad8 <prvHeapInit+0xb0>)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004a66:	4b1c      	ldr	r3, [pc, #112]	; (8004ad8 <prvHeapInit+0xb0>)
 8004a68:	2200      	movs	r2, #0
 8004a6a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	68ba      	ldr	r2, [r7, #8]
 8004a70:	4413      	add	r3, r2
 8004a72:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004a74:	2208      	movs	r2, #8
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	1a9b      	subs	r3, r3, r2
 8004a7a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f023 0307 	bic.w	r3, r3, #7
 8004a82:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	4a15      	ldr	r2, [pc, #84]	; (8004adc <prvHeapInit+0xb4>)
 8004a88:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004a8a:	4b14      	ldr	r3, [pc, #80]	; (8004adc <prvHeapInit+0xb4>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004a92:	4b12      	ldr	r3, [pc, #72]	; (8004adc <prvHeapInit+0xb4>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	2200      	movs	r2, #0
 8004a98:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	68fa      	ldr	r2, [r7, #12]
 8004aa2:	1ad2      	subs	r2, r2, r3
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004aa8:	4b0c      	ldr	r3, [pc, #48]	; (8004adc <prvHeapInit+0xb4>)
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	4a0a      	ldr	r2, [pc, #40]	; (8004ae0 <prvHeapInit+0xb8>)
 8004ab6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	4a09      	ldr	r2, [pc, #36]	; (8004ae4 <prvHeapInit+0xbc>)
 8004abe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004ac0:	4b09      	ldr	r3, [pc, #36]	; (8004ae8 <prvHeapInit+0xc0>)
 8004ac2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004ac6:	601a      	str	r2, [r3, #0]
}
 8004ac8:	bf00      	nop
 8004aca:	3714      	adds	r7, #20
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bc80      	pop	{r7}
 8004ad0:	4770      	bx	lr
 8004ad2:	bf00      	nop
 8004ad4:	200030ec 	.word	0x200030ec
 8004ad8:	20003cec 	.word	0x20003cec
 8004adc:	20003cf4 	.word	0x20003cf4
 8004ae0:	20003cfc 	.word	0x20003cfc
 8004ae4:	20003cf8 	.word	0x20003cf8
 8004ae8:	20003d00 	.word	0x20003d00

08004aec <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004aec:	b480      	push	{r7}
 8004aee:	b085      	sub	sp, #20
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004af4:	4b27      	ldr	r3, [pc, #156]	; (8004b94 <prvInsertBlockIntoFreeList+0xa8>)
 8004af6:	60fb      	str	r3, [r7, #12]
 8004af8:	e002      	b.n	8004b00 <prvInsertBlockIntoFreeList+0x14>
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	60fb      	str	r3, [r7, #12]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d8f7      	bhi.n	8004afa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	68ba      	ldr	r2, [r7, #8]
 8004b14:	4413      	add	r3, r2
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d108      	bne.n	8004b2e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	685a      	ldr	r2, [r3, #4]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	441a      	add	r2, r3
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	68ba      	ldr	r2, [r7, #8]
 8004b38:	441a      	add	r2, r3
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d118      	bne.n	8004b74 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	4b14      	ldr	r3, [pc, #80]	; (8004b98 <prvInsertBlockIntoFreeList+0xac>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d00d      	beq.n	8004b6a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	685a      	ldr	r2, [r3, #4]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	441a      	add	r2, r3
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	601a      	str	r2, [r3, #0]
 8004b68:	e008      	b.n	8004b7c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004b6a:	4b0b      	ldr	r3, [pc, #44]	; (8004b98 <prvInsertBlockIntoFreeList+0xac>)
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	601a      	str	r2, [r3, #0]
 8004b72:	e003      	b.n	8004b7c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004b7c:	68fa      	ldr	r2, [r7, #12]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d002      	beq.n	8004b8a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b8a:	bf00      	nop
 8004b8c:	3714      	adds	r7, #20
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bc80      	pop	{r7}
 8004b92:	4770      	bx	lr
 8004b94:	20003cec 	.word	0x20003cec
 8004b98:	20003cf4 	.word	0x20003cf4

08004b9c <memset>:
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	4402      	add	r2, r0
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d100      	bne.n	8004ba6 <memset+0xa>
 8004ba4:	4770      	bx	lr
 8004ba6:	f803 1b01 	strb.w	r1, [r3], #1
 8004baa:	e7f9      	b.n	8004ba0 <memset+0x4>

08004bac <_reclaim_reent>:
 8004bac:	4b29      	ldr	r3, [pc, #164]	; (8004c54 <_reclaim_reent+0xa8>)
 8004bae:	b570      	push	{r4, r5, r6, lr}
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4604      	mov	r4, r0
 8004bb4:	4283      	cmp	r3, r0
 8004bb6:	d04b      	beq.n	8004c50 <_reclaim_reent+0xa4>
 8004bb8:	69c3      	ldr	r3, [r0, #28]
 8004bba:	b143      	cbz	r3, 8004bce <_reclaim_reent+0x22>
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d144      	bne.n	8004c4c <_reclaim_reent+0xa0>
 8004bc2:	69e3      	ldr	r3, [r4, #28]
 8004bc4:	6819      	ldr	r1, [r3, #0]
 8004bc6:	b111      	cbz	r1, 8004bce <_reclaim_reent+0x22>
 8004bc8:	4620      	mov	r0, r4
 8004bca:	f000 f879 	bl	8004cc0 <_free_r>
 8004bce:	6961      	ldr	r1, [r4, #20]
 8004bd0:	b111      	cbz	r1, 8004bd8 <_reclaim_reent+0x2c>
 8004bd2:	4620      	mov	r0, r4
 8004bd4:	f000 f874 	bl	8004cc0 <_free_r>
 8004bd8:	69e1      	ldr	r1, [r4, #28]
 8004bda:	b111      	cbz	r1, 8004be2 <_reclaim_reent+0x36>
 8004bdc:	4620      	mov	r0, r4
 8004bde:	f000 f86f 	bl	8004cc0 <_free_r>
 8004be2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004be4:	b111      	cbz	r1, 8004bec <_reclaim_reent+0x40>
 8004be6:	4620      	mov	r0, r4
 8004be8:	f000 f86a 	bl	8004cc0 <_free_r>
 8004bec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004bee:	b111      	cbz	r1, 8004bf6 <_reclaim_reent+0x4a>
 8004bf0:	4620      	mov	r0, r4
 8004bf2:	f000 f865 	bl	8004cc0 <_free_r>
 8004bf6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004bf8:	b111      	cbz	r1, 8004c00 <_reclaim_reent+0x54>
 8004bfa:	4620      	mov	r0, r4
 8004bfc:	f000 f860 	bl	8004cc0 <_free_r>
 8004c00:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004c02:	b111      	cbz	r1, 8004c0a <_reclaim_reent+0x5e>
 8004c04:	4620      	mov	r0, r4
 8004c06:	f000 f85b 	bl	8004cc0 <_free_r>
 8004c0a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004c0c:	b111      	cbz	r1, 8004c14 <_reclaim_reent+0x68>
 8004c0e:	4620      	mov	r0, r4
 8004c10:	f000 f856 	bl	8004cc0 <_free_r>
 8004c14:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004c16:	b111      	cbz	r1, 8004c1e <_reclaim_reent+0x72>
 8004c18:	4620      	mov	r0, r4
 8004c1a:	f000 f851 	bl	8004cc0 <_free_r>
 8004c1e:	6a23      	ldr	r3, [r4, #32]
 8004c20:	b1b3      	cbz	r3, 8004c50 <_reclaim_reent+0xa4>
 8004c22:	4620      	mov	r0, r4
 8004c24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004c28:	4718      	bx	r3
 8004c2a:	5949      	ldr	r1, [r1, r5]
 8004c2c:	b941      	cbnz	r1, 8004c40 <_reclaim_reent+0x94>
 8004c2e:	3504      	adds	r5, #4
 8004c30:	69e3      	ldr	r3, [r4, #28]
 8004c32:	2d80      	cmp	r5, #128	; 0x80
 8004c34:	68d9      	ldr	r1, [r3, #12]
 8004c36:	d1f8      	bne.n	8004c2a <_reclaim_reent+0x7e>
 8004c38:	4620      	mov	r0, r4
 8004c3a:	f000 f841 	bl	8004cc0 <_free_r>
 8004c3e:	e7c0      	b.n	8004bc2 <_reclaim_reent+0x16>
 8004c40:	680e      	ldr	r6, [r1, #0]
 8004c42:	4620      	mov	r0, r4
 8004c44:	f000 f83c 	bl	8004cc0 <_free_r>
 8004c48:	4631      	mov	r1, r6
 8004c4a:	e7ef      	b.n	8004c2c <_reclaim_reent+0x80>
 8004c4c:	2500      	movs	r5, #0
 8004c4e:	e7ef      	b.n	8004c30 <_reclaim_reent+0x84>
 8004c50:	bd70      	pop	{r4, r5, r6, pc}
 8004c52:	bf00      	nop
 8004c54:	2000005c 	.word	0x2000005c

08004c58 <__libc_init_array>:
 8004c58:	b570      	push	{r4, r5, r6, lr}
 8004c5a:	2600      	movs	r6, #0
 8004c5c:	4d0c      	ldr	r5, [pc, #48]	; (8004c90 <__libc_init_array+0x38>)
 8004c5e:	4c0d      	ldr	r4, [pc, #52]	; (8004c94 <__libc_init_array+0x3c>)
 8004c60:	1b64      	subs	r4, r4, r5
 8004c62:	10a4      	asrs	r4, r4, #2
 8004c64:	42a6      	cmp	r6, r4
 8004c66:	d109      	bne.n	8004c7c <__libc_init_array+0x24>
 8004c68:	f000 f87e 	bl	8004d68 <_init>
 8004c6c:	2600      	movs	r6, #0
 8004c6e:	4d0a      	ldr	r5, [pc, #40]	; (8004c98 <__libc_init_array+0x40>)
 8004c70:	4c0a      	ldr	r4, [pc, #40]	; (8004c9c <__libc_init_array+0x44>)
 8004c72:	1b64      	subs	r4, r4, r5
 8004c74:	10a4      	asrs	r4, r4, #2
 8004c76:	42a6      	cmp	r6, r4
 8004c78:	d105      	bne.n	8004c86 <__libc_init_array+0x2e>
 8004c7a:	bd70      	pop	{r4, r5, r6, pc}
 8004c7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c80:	4798      	blx	r3
 8004c82:	3601      	adds	r6, #1
 8004c84:	e7ee      	b.n	8004c64 <__libc_init_array+0xc>
 8004c86:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c8a:	4798      	blx	r3
 8004c8c:	3601      	adds	r6, #1
 8004c8e:	e7f2      	b.n	8004c76 <__libc_init_array+0x1e>
 8004c90:	08004f1c 	.word	0x08004f1c
 8004c94:	08004f1c 	.word	0x08004f1c
 8004c98:	08004f1c 	.word	0x08004f1c
 8004c9c:	08004f20 	.word	0x08004f20

08004ca0 <__retarget_lock_acquire_recursive>:
 8004ca0:	4770      	bx	lr

08004ca2 <__retarget_lock_release_recursive>:
 8004ca2:	4770      	bx	lr

08004ca4 <memcpy>:
 8004ca4:	440a      	add	r2, r1
 8004ca6:	4291      	cmp	r1, r2
 8004ca8:	f100 33ff 	add.w	r3, r0, #4294967295
 8004cac:	d100      	bne.n	8004cb0 <memcpy+0xc>
 8004cae:	4770      	bx	lr
 8004cb0:	b510      	push	{r4, lr}
 8004cb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004cb6:	4291      	cmp	r1, r2
 8004cb8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004cbc:	d1f9      	bne.n	8004cb2 <memcpy+0xe>
 8004cbe:	bd10      	pop	{r4, pc}

08004cc0 <_free_r>:
 8004cc0:	b538      	push	{r3, r4, r5, lr}
 8004cc2:	4605      	mov	r5, r0
 8004cc4:	2900      	cmp	r1, #0
 8004cc6:	d040      	beq.n	8004d4a <_free_r+0x8a>
 8004cc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ccc:	1f0c      	subs	r4, r1, #4
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	bfb8      	it	lt
 8004cd2:	18e4      	addlt	r4, r4, r3
 8004cd4:	f000 f83c 	bl	8004d50 <__malloc_lock>
 8004cd8:	4a1c      	ldr	r2, [pc, #112]	; (8004d4c <_free_r+0x8c>)
 8004cda:	6813      	ldr	r3, [r2, #0]
 8004cdc:	b933      	cbnz	r3, 8004cec <_free_r+0x2c>
 8004cde:	6063      	str	r3, [r4, #4]
 8004ce0:	6014      	str	r4, [r2, #0]
 8004ce2:	4628      	mov	r0, r5
 8004ce4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ce8:	f000 b838 	b.w	8004d5c <__malloc_unlock>
 8004cec:	42a3      	cmp	r3, r4
 8004cee:	d908      	bls.n	8004d02 <_free_r+0x42>
 8004cf0:	6820      	ldr	r0, [r4, #0]
 8004cf2:	1821      	adds	r1, r4, r0
 8004cf4:	428b      	cmp	r3, r1
 8004cf6:	bf01      	itttt	eq
 8004cf8:	6819      	ldreq	r1, [r3, #0]
 8004cfa:	685b      	ldreq	r3, [r3, #4]
 8004cfc:	1809      	addeq	r1, r1, r0
 8004cfe:	6021      	streq	r1, [r4, #0]
 8004d00:	e7ed      	b.n	8004cde <_free_r+0x1e>
 8004d02:	461a      	mov	r2, r3
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	b10b      	cbz	r3, 8004d0c <_free_r+0x4c>
 8004d08:	42a3      	cmp	r3, r4
 8004d0a:	d9fa      	bls.n	8004d02 <_free_r+0x42>
 8004d0c:	6811      	ldr	r1, [r2, #0]
 8004d0e:	1850      	adds	r0, r2, r1
 8004d10:	42a0      	cmp	r0, r4
 8004d12:	d10b      	bne.n	8004d2c <_free_r+0x6c>
 8004d14:	6820      	ldr	r0, [r4, #0]
 8004d16:	4401      	add	r1, r0
 8004d18:	1850      	adds	r0, r2, r1
 8004d1a:	4283      	cmp	r3, r0
 8004d1c:	6011      	str	r1, [r2, #0]
 8004d1e:	d1e0      	bne.n	8004ce2 <_free_r+0x22>
 8004d20:	6818      	ldr	r0, [r3, #0]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	4408      	add	r0, r1
 8004d26:	6010      	str	r0, [r2, #0]
 8004d28:	6053      	str	r3, [r2, #4]
 8004d2a:	e7da      	b.n	8004ce2 <_free_r+0x22>
 8004d2c:	d902      	bls.n	8004d34 <_free_r+0x74>
 8004d2e:	230c      	movs	r3, #12
 8004d30:	602b      	str	r3, [r5, #0]
 8004d32:	e7d6      	b.n	8004ce2 <_free_r+0x22>
 8004d34:	6820      	ldr	r0, [r4, #0]
 8004d36:	1821      	adds	r1, r4, r0
 8004d38:	428b      	cmp	r3, r1
 8004d3a:	bf01      	itttt	eq
 8004d3c:	6819      	ldreq	r1, [r3, #0]
 8004d3e:	685b      	ldreq	r3, [r3, #4]
 8004d40:	1809      	addeq	r1, r1, r0
 8004d42:	6021      	streq	r1, [r4, #0]
 8004d44:	6063      	str	r3, [r4, #4]
 8004d46:	6054      	str	r4, [r2, #4]
 8004d48:	e7cb      	b.n	8004ce2 <_free_r+0x22>
 8004d4a:	bd38      	pop	{r3, r4, r5, pc}
 8004d4c:	20003e40 	.word	0x20003e40

08004d50 <__malloc_lock>:
 8004d50:	4801      	ldr	r0, [pc, #4]	; (8004d58 <__malloc_lock+0x8>)
 8004d52:	f7ff bfa5 	b.w	8004ca0 <__retarget_lock_acquire_recursive>
 8004d56:	bf00      	nop
 8004d58:	20003e3c 	.word	0x20003e3c

08004d5c <__malloc_unlock>:
 8004d5c:	4801      	ldr	r0, [pc, #4]	; (8004d64 <__malloc_unlock+0x8>)
 8004d5e:	f7ff bfa0 	b.w	8004ca2 <__retarget_lock_release_recursive>
 8004d62:	bf00      	nop
 8004d64:	20003e3c 	.word	0x20003e3c

08004d68 <_init>:
 8004d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d6a:	bf00      	nop
 8004d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d6e:	bc08      	pop	{r3}
 8004d70:	469e      	mov	lr, r3
 8004d72:	4770      	bx	lr

08004d74 <_fini>:
 8004d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d76:	bf00      	nop
 8004d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d7a:	bc08      	pop	{r3}
 8004d7c:	469e      	mov	lr, r3
 8004d7e:	4770      	bx	lr
