
freertos_multithread_queue.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a1c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08004b2c  08004b2c  00014b2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c20  08004c20  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08004c20  08004c20  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004c20  08004c20  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c20  08004c20  00014c20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c24  08004c24  00014c24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08004c28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002da8  20000060  08004c88  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002e08  08004c88  00022e08  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c846  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000278c  00000000  00000000  0002c912  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ad0  00000000  00000000  0002f0a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000838  00000000  00000000  0002fb70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000186b3  00000000  00000000  000303a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e769  00000000  00000000  00048a5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00089d2c  00000000  00000000  000571c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002cf8  00000000  00000000  000e0ef0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009e  00000000  00000000  000e3be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	08004b14 	.word	0x08004b14

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	08004b14 	.word	0x08004b14

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	; (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	; (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	; 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	2000007c 	.word	0x2000007c
 800017c:	2000011c 	.word	0x2000011c

08000180 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName )
{
 8000180:	b480      	push	{r7}
 8000182:	b085      	sub	sp, #20
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
 8000188:	6039      	str	r1, [r7, #0]
	int i=0;
 800018a:	2300      	movs	r3, #0
 800018c:	60fb      	str	r3, [r7, #12]
	i++;
 800018e:	68fb      	ldr	r3, [r7, #12]
 8000190:	3301      	adds	r3, #1
 8000192:	60fb      	str	r3, [r7, #12]

}
 8000194:	bf00      	nop
 8000196:	3714      	adds	r7, #20
 8000198:	46bd      	mov	sp, r7
 800019a:	bc80      	pop	{r7}
 800019c:	4770      	bx	lr

0800019e <vApplicationMallocFailedHook>:

void vApplicationMallocFailedHook( void )
{
 800019e:	b480      	push	{r7}
 80001a0:	b083      	sub	sp, #12
 80001a2:	af00      	add	r7, sp, #0
	int i=0;
 80001a4:	2300      	movs	r3, #0
 80001a6:	607b      	str	r3, [r7, #4]
	i++;
 80001a8:	687b      	ldr	r3, [r7, #4]
 80001aa:	3301      	adds	r3, #1
 80001ac:	607b      	str	r3, [r7, #4]

}
 80001ae:	bf00      	nop
 80001b0:	370c      	adds	r7, #12
 80001b2:	46bd      	mov	sp, r7
 80001b4:	bc80      	pop	{r7}
 80001b6:	4770      	bx	lr

080001b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	b086      	sub	sp, #24
 80001bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001be:	f107 0308 	add.w	r3, r7, #8
 80001c2:	2200      	movs	r2, #0
 80001c4:	601a      	str	r2, [r3, #0]
 80001c6:	605a      	str	r2, [r3, #4]
 80001c8:	609a      	str	r2, [r3, #8]
 80001ca:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001cc:	4b18      	ldr	r3, [pc, #96]	; (8000230 <MX_GPIO_Init+0x78>)
 80001ce:	699b      	ldr	r3, [r3, #24]
 80001d0:	4a17      	ldr	r2, [pc, #92]	; (8000230 <MX_GPIO_Init+0x78>)
 80001d2:	f043 0310 	orr.w	r3, r3, #16
 80001d6:	6193      	str	r3, [r2, #24]
 80001d8:	4b15      	ldr	r3, [pc, #84]	; (8000230 <MX_GPIO_Init+0x78>)
 80001da:	699b      	ldr	r3, [r3, #24]
 80001dc:	f003 0310 	and.w	r3, r3, #16
 80001e0:	607b      	str	r3, [r7, #4]
 80001e2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001e4:	4b12      	ldr	r3, [pc, #72]	; (8000230 <MX_GPIO_Init+0x78>)
 80001e6:	699b      	ldr	r3, [r3, #24]
 80001e8:	4a11      	ldr	r2, [pc, #68]	; (8000230 <MX_GPIO_Init+0x78>)
 80001ea:	f043 0304 	orr.w	r3, r3, #4
 80001ee:	6193      	str	r3, [r2, #24]
 80001f0:	4b0f      	ldr	r3, [pc, #60]	; (8000230 <MX_GPIO_Init+0x78>)
 80001f2:	699b      	ldr	r3, [r3, #24]
 80001f4:	f003 0304 	and.w	r3, r3, #4
 80001f8:	603b      	str	r3, [r7, #0]
 80001fa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80001fc:	2200      	movs	r2, #0
 80001fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000202:	480c      	ldr	r0, [pc, #48]	; (8000234 <MX_GPIO_Init+0x7c>)
 8000204:	f000 fee0 	bl	8000fc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000208:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800020c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800020e:	2301      	movs	r3, #1
 8000210:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000212:	2300      	movs	r3, #0
 8000214:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000216:	2302      	movs	r3, #2
 8000218:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800021a:	f107 0308 	add.w	r3, r7, #8
 800021e:	4619      	mov	r1, r3
 8000220:	4804      	ldr	r0, [pc, #16]	; (8000234 <MX_GPIO_Init+0x7c>)
 8000222:	f000 fd4d 	bl	8000cc0 <HAL_GPIO_Init>

}
 8000226:	bf00      	nop
 8000228:	3718      	adds	r7, #24
 800022a:	46bd      	mov	sp, r7
 800022c:	bd80      	pop	{r7, pc}
 800022e:	bf00      	nop
 8000230:	40021000 	.word	0x40021000
 8000234:	40011000 	.word	0x40011000

08000238 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b084      	sub	sp, #16
 800023c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800023e:	f000 fb1d 	bl	800087c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000242:	f000 f883 	bl	800034c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000246:	f7ff ffb7 	bl	80001b8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800024a:	f000 fa73 	bl	8000734 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1,(void *)&(rx_msg.ch), sizeof(rx_msg.ch));
 800024e:	1d3b      	adds	r3, r7, #4
 8000250:	2201      	movs	r2, #1
 8000252:	4619      	mov	r1, r3
 8000254:	482f      	ldr	r0, [pc, #188]	; (8000314 <main+0xdc>)
 8000256:	f001 fb7e 	bl	8001956 <HAL_UART_Receive_IT>

  /* Create the queue to hold messages to be written to the RS232. */
  serial_str_queue = xQueueCreate( 10, sizeof( serial_str_msg ) );
 800025a:	2200      	movs	r2, #0
 800025c:	2164      	movs	r1, #100	; 0x64
 800025e:	200a      	movs	r0, #10
 8000260:	f002 f9be 	bl	80025e0 <xQueueGenericCreate>
 8000264:	4603      	mov	r3, r0
 8000266:	4a2c      	ldr	r2, [pc, #176]	; (8000318 <main+0xe0>)
 8000268:	6013      	str	r3, [r2, #0]
  vSemaphoreCreateBinary(serial_tx_wait_sem);
 800026a:	2203      	movs	r2, #3
 800026c:	2100      	movs	r1, #0
 800026e:	2001      	movs	r0, #1
 8000270:	f002 f9b6 	bl	80025e0 <xQueueGenericCreate>
 8000274:	4603      	mov	r3, r0
 8000276:	4a29      	ldr	r2, [pc, #164]	; (800031c <main+0xe4>)
 8000278:	6013      	str	r3, [r2, #0]
 800027a:	4b28      	ldr	r3, [pc, #160]	; (800031c <main+0xe4>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	2b00      	cmp	r3, #0
 8000280:	d006      	beq.n	8000290 <main+0x58>
 8000282:	4b26      	ldr	r3, [pc, #152]	; (800031c <main+0xe4>)
 8000284:	6818      	ldr	r0, [r3, #0]
 8000286:	2300      	movs	r3, #0
 8000288:	2200      	movs	r2, #0
 800028a:	2100      	movs	r1, #0
 800028c:	f002 fa06 	bl	800269c <xQueueGenericSend>
  serial_rx_queue = xQueueCreate( 1, sizeof( serial_ch_msg ) );
 8000290:	2200      	movs	r2, #0
 8000292:	2101      	movs	r1, #1
 8000294:	2001      	movs	r0, #1
 8000296:	f002 f9a3 	bl	80025e0 <xQueueGenericCreate>
 800029a:	4603      	mov	r3, r0
 800029c:	4a20      	ldr	r2, [pc, #128]	; (8000320 <main+0xe8>)
 800029e:	6013      	str	r3, [r2, #0]

  /* Create a task to flash the LED. */
  xTaskCreate( led_flash_task,"LED Flash", 256, NULL, tskIDLE_PRIORITY + 5, NULL );
 80002a0:	2300      	movs	r3, #0
 80002a2:	9301      	str	r3, [sp, #4]
 80002a4:	2305      	movs	r3, #5
 80002a6:	9300      	str	r3, [sp, #0]
 80002a8:	2300      	movs	r3, #0
 80002aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80002ae:	491d      	ldr	r1, [pc, #116]	; (8000324 <main+0xec>)
 80002b0:	481d      	ldr	r0, [pc, #116]	; (8000328 <main+0xf0>)
 80002b2:	f002 ff86 	bl	80031c2 <xTaskCreate>

  /* Create tasks to queue a string to be written to the RS232 port. */
  xTaskCreate( queue_str_task1, "Serial Write 1", 256 , NULL, tskIDLE_PRIORITY + 10, NULL );
 80002b6:	2300      	movs	r3, #0
 80002b8:	9301      	str	r3, [sp, #4]
 80002ba:	230a      	movs	r3, #10
 80002bc:	9300      	str	r3, [sp, #0]
 80002be:	2300      	movs	r3, #0
 80002c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80002c4:	4919      	ldr	r1, [pc, #100]	; (800032c <main+0xf4>)
 80002c6:	481a      	ldr	r0, [pc, #104]	; (8000330 <main+0xf8>)
 80002c8:	f002 ff7b 	bl	80031c2 <xTaskCreate>
  xTaskCreate( queue_str_task2, "Serial Write 2", 256 , NULL, tskIDLE_PRIORITY + 10, NULL );
 80002cc:	2300      	movs	r3, #0
 80002ce:	9301      	str	r3, [sp, #4]
 80002d0:	230a      	movs	r3, #10
 80002d2:	9300      	str	r3, [sp, #0]
 80002d4:	2300      	movs	r3, #0
 80002d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80002da:	4916      	ldr	r1, [pc, #88]	; (8000334 <main+0xfc>)
 80002dc:	4816      	ldr	r0, [pc, #88]	; (8000338 <main+0x100>)
 80002de:	f002 ff70 	bl	80031c2 <xTaskCreate>

  /* Create a task to write messages from the queue to the RS232 port. */
  xTaskCreate(rs232_xmit_msg_task, "Serial Xmit Str", 256 , NULL, tskIDLE_PRIORITY + 2, NULL );
 80002e2:	2300      	movs	r3, #0
 80002e4:	9301      	str	r3, [sp, #4]
 80002e6:	2302      	movs	r3, #2
 80002e8:	9300      	str	r3, [sp, #0]
 80002ea:	2300      	movs	r3, #0
 80002ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80002f0:	4912      	ldr	r1, [pc, #72]	; (800033c <main+0x104>)
 80002f2:	4813      	ldr	r0, [pc, #76]	; (8000340 <main+0x108>)
 80002f4:	f002 ff65 	bl	80031c2 <xTaskCreate>

  /* Create a task to receive characters from the RS232 port and echo them back to the RS232 port. */
  xTaskCreate(serial_readwrite_task, "Serial Read/Write", 256 ,NULL, tskIDLE_PRIORITY + 10, NULL );
 80002f8:	2300      	movs	r3, #0
 80002fa:	9301      	str	r3, [sp, #4]
 80002fc:	230a      	movs	r3, #10
 80002fe:	9300      	str	r3, [sp, #0]
 8000300:	2300      	movs	r3, #0
 8000302:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000306:	490f      	ldr	r1, [pc, #60]	; (8000344 <main+0x10c>)
 8000308:	480f      	ldr	r0, [pc, #60]	; (8000348 <main+0x110>)
 800030a:	f002 ff5a 	bl	80031c2 <xTaskCreate>

  /* Start running the tasks. */
  vTaskStartScheduler();
 800030e:	f003 f8d1 	bl	80034b4 <vTaskStartScheduler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  while (1)
 8000312:	e7fe      	b.n	8000312 <main+0xda>
 8000314:	20000330 	.word	0x20000330
 8000318:	2000031c 	.word	0x2000031c
 800031c:	20000320 	.word	0x20000320
 8000320:	20000324 	.word	0x20000324
 8000324:	08004b2c 	.word	0x08004b2c
 8000328:	080004c9 	.word	0x080004c9
 800032c:	08004b38 	.word	0x08004b38
 8000330:	0800057d 	.word	0x0800057d
 8000334:	08004b48 	.word	0x08004b48
 8000338:	0800059d 	.word	0x0800059d
 800033c:	08004b58 	.word	0x08004b58
 8000340:	080004e9 	.word	0x080004e9
 8000344:	08004b68 	.word	0x08004b68
 8000348:	080005bd 	.word	0x080005bd

0800034c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b090      	sub	sp, #64	; 0x40
 8000350:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000352:	f107 0318 	add.w	r3, r7, #24
 8000356:	2228      	movs	r2, #40	; 0x28
 8000358:	2100      	movs	r1, #0
 800035a:	4618      	mov	r0, r3
 800035c:	f004 faec 	bl	8004938 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000360:	1d3b      	adds	r3, r7, #4
 8000362:	2200      	movs	r2, #0
 8000364:	601a      	str	r2, [r3, #0]
 8000366:	605a      	str	r2, [r3, #4]
 8000368:	609a      	str	r2, [r3, #8]
 800036a:	60da      	str	r2, [r3, #12]
 800036c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800036e:	2302      	movs	r3, #2
 8000370:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000372:	2301      	movs	r3, #1
 8000374:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000376:	2310      	movs	r3, #16
 8000378:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800037a:	2300      	movs	r3, #0
 800037c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800037e:	f107 0318 	add.w	r3, r7, #24
 8000382:	4618      	mov	r0, r3
 8000384:	f000 fe52 	bl	800102c <HAL_RCC_OscConfig>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d001      	beq.n	8000392 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800038e:	f000 f961 	bl	8000654 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000392:	230f      	movs	r3, #15
 8000394:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000396:	2300      	movs	r3, #0
 8000398:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800039a:	2300      	movs	r3, #0
 800039c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800039e:	2300      	movs	r3, #0
 80003a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003a2:	2300      	movs	r3, #0
 80003a4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003a6:	1d3b      	adds	r3, r7, #4
 80003a8:	2100      	movs	r1, #0
 80003aa:	4618      	mov	r0, r3
 80003ac:	f001 f8c0 	bl	8001530 <HAL_RCC_ClockConfig>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d001      	beq.n	80003ba <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80003b6:	f000 f94d 	bl	8000654 <Error_Handler>
  }
}
 80003ba:	bf00      	nop
 80003bc:	3740      	adds	r7, #64	; 0x40
 80003be:	46bd      	mov	sp, r7
 80003c0:	bd80      	pop	{r7, pc}
	...

080003c4 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b082      	sub	sp, #8
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
   static signed portBASE_TYPE xHigherPriorityTaskWoken;
   //serial_ch_msg rx_msg;

   xSemaphoreGiveFromISR(serial_tx_wait_sem, &xHigherPriorityTaskWoken);
 80003cc:	4b0a      	ldr	r3, [pc, #40]	; (80003f8 <HAL_UART_TxCpltCallback+0x34>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	490a      	ldr	r1, [pc, #40]	; (80003fc <HAL_UART_TxCpltCallback+0x38>)
 80003d2:	4618      	mov	r0, r3
 80003d4:	f002 faf8 	bl	80029c8 <xQueueGiveFromISR>

   if(xHigherPriorityTaskWoken)
 80003d8:	4b08      	ldr	r3, [pc, #32]	; (80003fc <HAL_UART_TxCpltCallback+0x38>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d007      	beq.n	80003f0 <HAL_UART_TxCpltCallback+0x2c>
   {
	 taskYIELD();
 80003e0:	4b07      	ldr	r3, [pc, #28]	; (8000400 <HAL_UART_TxCpltCallback+0x3c>)
 80003e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80003e6:	601a      	str	r2, [r3, #0]
 80003e8:	f3bf 8f4f 	dsb	sy
 80003ec:	f3bf 8f6f 	isb	sy
   }
}
 80003f0:	bf00      	nop
 80003f2:	3708      	adds	r7, #8
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bd80      	pop	{r7, pc}
 80003f8:	20000320 	.word	0x20000320
 80003fc:	20000328 	.word	0x20000328
 8000400:	e000ed04 	.word	0xe000ed04

08000404 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b084      	sub	sp, #16
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
   static signed portBASE_TYPE xHigherPriorityTaskWoken;
   serial_ch_msg rx_msg;

   HAL_UART_Receive_IT(huart,(void *)&(rx_msg.ch), sizeof(rx_msg.ch));
 800040c:	f107 030c 	add.w	r3, r7, #12
 8000410:	2201      	movs	r2, #1
 8000412:	4619      	mov	r1, r3
 8000414:	6878      	ldr	r0, [r7, #4]
 8000416:	f001 fa9e 	bl	8001956 <HAL_UART_Receive_IT>


   if(!xQueueSendToBackFromISR(serial_rx_queue, &rx_msg, &xHigherPriorityTaskWoken))
 800041a:	4b0e      	ldr	r3, [pc, #56]	; (8000454 <HAL_UART_RxCpltCallback+0x50>)
 800041c:	6818      	ldr	r0, [r3, #0]
 800041e:	f107 010c 	add.w	r1, r7, #12
 8000422:	2300      	movs	r3, #0
 8000424:	4a0c      	ldr	r2, [pc, #48]	; (8000458 <HAL_UART_RxCpltCallback+0x54>)
 8000426:	f002 fa37 	bl	8002898 <xQueueGenericSendFromISR>
 800042a:	4603      	mov	r3, r0
 800042c:	2b00      	cmp	r3, #0
 800042e:	d100      	bne.n	8000432 <HAL_UART_RxCpltCallback+0x2e>
   {
	   /* If there was an error queueing the received byte, freeze. */
	   while(1);
 8000430:	e7fe      	b.n	8000430 <HAL_UART_RxCpltCallback+0x2c>
   }

   if(xHigherPriorityTaskWoken)
 8000432:	4b09      	ldr	r3, [pc, #36]	; (8000458 <HAL_UART_RxCpltCallback+0x54>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	2b00      	cmp	r3, #0
 8000438:	d007      	beq.n	800044a <HAL_UART_RxCpltCallback+0x46>
   {
      taskYIELD();
 800043a:	4b08      	ldr	r3, [pc, #32]	; (800045c <HAL_UART_RxCpltCallback+0x58>)
 800043c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000440:	601a      	str	r2, [r3, #0]
 8000442:	f3bf 8f4f 	dsb	sy
 8000446:	f3bf 8f6f 	isb	sy
   }
}
 800044a:	bf00      	nop
 800044c:	3710      	adds	r7, #16
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	20000324 	.word	0x20000324
 8000458:	2000032c 	.word	0x2000032c
 800045c:	e000ed04 	.word	0xe000ed04

08000460 <send_byte_rtos>:

void send_byte_rtos(char ch)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b082      	sub	sp, #8
 8000464:	af00      	add	r7, sp, #0
 8000466:	4603      	mov	r3, r0
 8000468:	71fb      	strb	r3, [r7, #7]
    /* Wait until the RS232 port can receive another byte (this semaphore is
     * "given" by the RS232 port interrupt when the buffer has room for another
     * byte.
     */
	while(!xSemaphoreTake(serial_tx_wait_sem,100));
 800046a:	bf00      	nop
 800046c:	4b09      	ldr	r3, [pc, #36]	; (8000494 <send_byte_rtos+0x34>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	2164      	movs	r1, #100	; 0x64
 8000472:	4618      	mov	r0, r3
 8000474:	f002 fc16 	bl	8002ca4 <xQueueSemaphoreTake>
 8000478:	4603      	mov	r3, r0
 800047a:	2b00      	cmp	r3, #0
 800047c:	d0f6      	beq.n	800046c <send_byte_rtos+0xc>
    //while(!xSemaphoreTake(serial_tx_wait_sem, HAL_MAX_DELAY));

    /* Send the byte and enable the transmit interrupt (it is disabled by the
     * interrupt).
     */
	HAL_UART_Transmit_IT(&huart1,(uint8_t *)&ch, sizeof(ch));
 800047e:	1dfb      	adds	r3, r7, #7
 8000480:	2201      	movs	r2, #1
 8000482:	4619      	mov	r1, r3
 8000484:	4804      	ldr	r0, [pc, #16]	; (8000498 <send_byte_rtos+0x38>)
 8000486:	f001 fa31 	bl	80018ec <HAL_UART_Transmit_IT>
 }
 800048a:	bf00      	nop
 800048c:	3708      	adds	r7, #8
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}
 8000492:	bf00      	nop
 8000494:	20000320 	.word	0x20000320
 8000498:	20000330 	.word	0x20000330

0800049c <receive_byte_rtos>:

char receive_byte_rtos(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b082      	sub	sp, #8
 80004a0:	af00      	add	r7, sp, #0
    serial_ch_msg msg;

    /* Wait for a byte to be queued by the receive interrupt handler. */
    while(!xQueueReceive(serial_rx_queue, &msg, HAL_MAX_DELAY));
 80004a2:	bf00      	nop
 80004a4:	4b07      	ldr	r3, [pc, #28]	; (80004c4 <receive_byte_rtos+0x28>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	1d39      	adds	r1, r7, #4
 80004aa:	f04f 32ff 	mov.w	r2, #4294967295
 80004ae:	4618      	mov	r0, r3
 80004b0:	f002 fb18 	bl	8002ae4 <xQueueReceive>
 80004b4:	4603      	mov	r3, r0
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d0f4      	beq.n	80004a4 <receive_byte_rtos+0x8>

    return msg.ch;
 80004ba:	793b      	ldrb	r3, [r7, #4]
}
 80004bc:	4618      	mov	r0, r3
 80004be:	3708      	adds	r7, #8
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}
 80004c4:	20000324 	.word	0x20000324

080004c8 <led_flash_task>:

void led_flash_task( void *pvParameters )
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
    while(1)
    {
        /* Toggle the LED. */

    	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80004d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004d4:	4803      	ldr	r0, [pc, #12]	; (80004e4 <led_flash_task+0x1c>)
 80004d6:	f000 fd8f 	bl	8000ff8 <HAL_GPIO_TogglePin>
		/* Wait one second. */
		vTaskDelay(1000);
 80004da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004de:	f002 ffb5 	bl	800344c <vTaskDelay>
    	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80004e2:	e7f5      	b.n	80004d0 <led_flash_task+0x8>
 80004e4:	40011000 	.word	0x40011000

080004e8 <rs232_xmit_msg_task>:
    }
}

void rs232_xmit_msg_task( void *pvParameters )
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b09c      	sub	sp, #112	; 0x70
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
    int curr_char;

    while(1) {
        /* Read from the queue.  Keep trying until a message is received.  This
         * will block for a period of time (specified by portMAX_DELAY). */
        while(!xQueueReceive(serial_str_queue, &msg, portMAX_DELAY));
 80004f0:	bf00      	nop
 80004f2:	4b11      	ldr	r3, [pc, #68]	; (8000538 <rs232_xmit_msg_task+0x50>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	f107 0108 	add.w	r1, r7, #8
 80004fa:	f04f 32ff 	mov.w	r2, #4294967295
 80004fe:	4618      	mov	r0, r3
 8000500:	f002 faf0 	bl	8002ae4 <xQueueReceive>
 8000504:	4603      	mov	r3, r0
 8000506:	2b00      	cmp	r3, #0
 8000508:	d0f3      	beq.n	80004f2 <rs232_xmit_msg_task+0xa>

        /* Write each character of the message to the RS232 port. */
        curr_char = 0;
 800050a:	2300      	movs	r3, #0
 800050c:	66fb      	str	r3, [r7, #108]	; 0x6c
        while(msg.str[curr_char] != '\0') {
 800050e:	e00a      	b.n	8000526 <rs232_xmit_msg_task+0x3e>
            send_byte_rtos(msg.str[curr_char]);
 8000510:	f107 0208 	add.w	r2, r7, #8
 8000514:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000516:	4413      	add	r3, r2
 8000518:	781b      	ldrb	r3, [r3, #0]
 800051a:	4618      	mov	r0, r3
 800051c:	f7ff ffa0 	bl	8000460 <send_byte_rtos>
            curr_char++;
 8000520:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000522:	3301      	adds	r3, #1
 8000524:	66fb      	str	r3, [r7, #108]	; 0x6c
        while(msg.str[curr_char] != '\0') {
 8000526:	f107 0208 	add.w	r2, r7, #8
 800052a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800052c:	4413      	add	r3, r2
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	2b00      	cmp	r3, #0
 8000532:	d1ed      	bne.n	8000510 <rs232_xmit_msg_task+0x28>
        while(!xQueueReceive(serial_str_queue, &msg, portMAX_DELAY));
 8000534:	e7dc      	b.n	80004f0 <rs232_xmit_msg_task+0x8>
 8000536:	bf00      	nop
 8000538:	2000031c 	.word	0x2000031c

0800053c <queue_str_task>:
/* Repeatedly queues a string to be sent to the RS232.
 *   delay - the time to wait between sending messages.  A delay of 1 means
 *           wait 1/100th of a second.
 */
void queue_str_task(const char *str, int delay)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b09c      	sub	sp, #112	; 0x70
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
 8000544:	6039      	str	r1, [r7, #0]
    serial_str_msg msg;

    /* Prepare the message to be queued. */
    strcpy(msg.str, str);
 8000546:	f107 030c 	add.w	r3, r7, #12
 800054a:	6879      	ldr	r1, [r7, #4]
 800054c:	4618      	mov	r0, r3
 800054e:	f004 fa77 	bl	8004a40 <strcpy>

    while(1) {
        /* Post the message.  Keep on trying until it is successful. */
        while(!xQueueSendToBack(serial_str_queue, &msg, portMAX_DELAY));
 8000552:	bf00      	nop
 8000554:	4b08      	ldr	r3, [pc, #32]	; (8000578 <queue_str_task+0x3c>)
 8000556:	6818      	ldr	r0, [r3, #0]
 8000558:	f107 010c 	add.w	r1, r7, #12
 800055c:	2300      	movs	r3, #0
 800055e:	f04f 32ff 	mov.w	r2, #4294967295
 8000562:	f002 f89b 	bl	800269c <xQueueGenericSend>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d0f3      	beq.n	8000554 <queue_str_task+0x18>

        /* Wait. */
        vTaskDelay(delay);
 800056c:	683b      	ldr	r3, [r7, #0]
 800056e:	4618      	mov	r0, r3
 8000570:	f002 ff6c 	bl	800344c <vTaskDelay>
        while(!xQueueSendToBack(serial_str_queue, &msg, portMAX_DELAY));
 8000574:	e7ed      	b.n	8000552 <queue_str_task+0x16>
 8000576:	bf00      	nop
 8000578:	2000031c 	.word	0x2000031c

0800057c <queue_str_task1>:
    }
}

void queue_str_task1( void *pvParameters )
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
    queue_str_task("Hola soy Tarea 1, probando ejecucion con FreeRTOS\r\n", 5000);
 8000584:	f241 3188 	movw	r1, #5000	; 0x1388
 8000588:	4803      	ldr	r0, [pc, #12]	; (8000598 <queue_str_task1+0x1c>)
 800058a:	f7ff ffd7 	bl	800053c <queue_str_task>
}
 800058e:	bf00      	nop
 8000590:	3708      	adds	r7, #8
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	08004b7c 	.word	0x08004b7c

0800059c <queue_str_task2>:

void queue_str_task2( void *pvParameters )
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
    queue_str_task("Hola soy Tarea 2, probando ejecucion con FreeRTOS\r\n", 5000);
 80005a4:	f241 3188 	movw	r1, #5000	; 0x1388
 80005a8:	4803      	ldr	r0, [pc, #12]	; (80005b8 <queue_str_task2+0x1c>)
 80005aa:	f7ff ffc7 	bl	800053c <queue_str_task>
}
 80005ae:	bf00      	nop
 80005b0:	3708      	adds	r7, #8
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	08004bb0 	.word	0x08004bb0

080005bc <serial_readwrite_task>:

void serial_readwrite_task( void *pvParameters )
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b09e      	sub	sp, #120	; 0x78
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
    char ch;
    int curr_char;
    int done;

    /* Prepare the response message to be queued. */
    strcpy(msg.str, "RV: ");
 80005c4:	f107 0308 	add.w	r3, r7, #8
 80005c8:	4a20      	ldr	r2, [pc, #128]	; (800064c <serial_readwrite_task+0x90>)
 80005ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005ce:	6018      	str	r0, [r3, #0]
 80005d0:	3304      	adds	r3, #4
 80005d2:	7019      	strb	r1, [r3, #0]

    while(1) {
        curr_char = 4;
 80005d4:	2304      	movs	r3, #4
 80005d6:	677b      	str	r3, [r7, #116]	; 0x74
        done = 0;
 80005d8:	2300      	movs	r3, #0
 80005da:	673b      	str	r3, [r7, #112]	; 0x70
        do {
            /* Receive a byte from the RS232 port (this call will block). */
            ch = receive_byte_rtos();
 80005dc:	f7ff ff5e 	bl	800049c <receive_byte_rtos>
 80005e0:	4603      	mov	r3, r0
 80005e2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

            /* If the byte is an end-of-line type character, then finish the
             * string and indicate we are done.
             */
            if((ch == '\r') || (ch == '\n')) {
 80005e6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80005ea:	2b0d      	cmp	r3, #13
 80005ec:	d003      	beq.n	80005f6 <serial_readwrite_task+0x3a>
 80005ee:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80005f2:	2b0a      	cmp	r3, #10
 80005f4:	d110      	bne.n	8000618 <serial_readwrite_task+0x5c>
                msg.str[curr_char] = '\n';
 80005f6:	f107 0208 	add.w	r2, r7, #8
 80005fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80005fc:	4413      	add	r3, r2
 80005fe:	220a      	movs	r2, #10
 8000600:	701a      	strb	r2, [r3, #0]
                msg.str[curr_char+1] = '\0';
 8000602:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000604:	3301      	adds	r3, #1
 8000606:	3378      	adds	r3, #120	; 0x78
 8000608:	443b      	add	r3, r7
 800060a:	2200      	movs	r2, #0
 800060c:	f803 2c70 	strb.w	r2, [r3, #-112]
                done = -1;
 8000610:	f04f 33ff 	mov.w	r3, #4294967295
 8000614:	673b      	str	r3, [r7, #112]	; 0x70
 8000616:	e008      	b.n	800062a <serial_readwrite_task+0x6e>
            /* Otherwise, add the character to the response string. */
            } else {
                msg.str[curr_char++] = ch;
 8000618:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800061a:	1c5a      	adds	r2, r3, #1
 800061c:	677a      	str	r2, [r7, #116]	; 0x74
 800061e:	3378      	adds	r3, #120	; 0x78
 8000620:	443b      	add	r3, r7
 8000622:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8000626:	f803 2c70 	strb.w	r2, [r3, #-112]
            }
        } while(!done);
 800062a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800062c:	2b00      	cmp	r3, #0
 800062e:	d0d5      	beq.n	80005dc <serial_readwrite_task+0x20>

        /* Once we are done building the response string, queue the response to
         * be sent to the RS232 port.
         */
        while(!xQueueSendToBack(serial_str_queue, &msg, portMAX_DELAY));
 8000630:	bf00      	nop
 8000632:	4b07      	ldr	r3, [pc, #28]	; (8000650 <serial_readwrite_task+0x94>)
 8000634:	6818      	ldr	r0, [r3, #0]
 8000636:	f107 0108 	add.w	r1, r7, #8
 800063a:	2300      	movs	r3, #0
 800063c:	f04f 32ff 	mov.w	r2, #4294967295
 8000640:	f002 f82c 	bl	800269c <xQueueGenericSend>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d0f3      	beq.n	8000632 <serial_readwrite_task+0x76>
        curr_char = 4;
 800064a:	e7c3      	b.n	80005d4 <serial_readwrite_task+0x18>
 800064c:	08004be4 	.word	0x08004be4
 8000650:	2000031c 	.word	0x2000031c

08000654 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000658:	b672      	cpsid	i
}
 800065a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800065c:	e7fe      	b.n	800065c <Error_Handler+0x8>
	...

08000660 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000666:	4b18      	ldr	r3, [pc, #96]	; (80006c8 <HAL_MspInit+0x68>)
 8000668:	699b      	ldr	r3, [r3, #24]
 800066a:	4a17      	ldr	r2, [pc, #92]	; (80006c8 <HAL_MspInit+0x68>)
 800066c:	f043 0301 	orr.w	r3, r3, #1
 8000670:	6193      	str	r3, [r2, #24]
 8000672:	4b15      	ldr	r3, [pc, #84]	; (80006c8 <HAL_MspInit+0x68>)
 8000674:	699b      	ldr	r3, [r3, #24]
 8000676:	f003 0301 	and.w	r3, r3, #1
 800067a:	60bb      	str	r3, [r7, #8]
 800067c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800067e:	4b12      	ldr	r3, [pc, #72]	; (80006c8 <HAL_MspInit+0x68>)
 8000680:	69db      	ldr	r3, [r3, #28]
 8000682:	4a11      	ldr	r2, [pc, #68]	; (80006c8 <HAL_MspInit+0x68>)
 8000684:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000688:	61d3      	str	r3, [r2, #28]
 800068a:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <HAL_MspInit+0x68>)
 800068c:	69db      	ldr	r3, [r3, #28]
 800068e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000696:	2200      	movs	r2, #0
 8000698:	210f      	movs	r1, #15
 800069a:	f06f 0001 	mvn.w	r0, #1
 800069e:	f000 fa26 	bl	8000aee <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80006a2:	4b0a      	ldr	r3, [pc, #40]	; (80006cc <HAL_MspInit+0x6c>)
 80006a4:	685b      	ldr	r3, [r3, #4]
 80006a6:	60fb      	str	r3, [r7, #12]
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80006ae:	60fb      	str	r3, [r7, #12]
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006b6:	60fb      	str	r3, [r7, #12]
 80006b8:	4a04      	ldr	r2, [pc, #16]	; (80006cc <HAL_MspInit+0x6c>)
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006be:	bf00      	nop
 80006c0:	3710      	adds	r7, #16
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40021000 	.word	0x40021000
 80006cc:	40010000 	.word	0x40010000

080006d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006d4:	e7fe      	b.n	80006d4 <NMI_Handler+0x4>

080006d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006d6:	b480      	push	{r7}
 80006d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006da:	e7fe      	b.n	80006da <HardFault_Handler+0x4>

080006dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006e0:	e7fe      	b.n	80006e0 <MemManage_Handler+0x4>

080006e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006e2:	b480      	push	{r7}
 80006e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006e6:	e7fe      	b.n	80006e6 <BusFault_Handler+0x4>

080006e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006ec:	e7fe      	b.n	80006ec <UsageFault_Handler+0x4>

080006ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006ee:	b480      	push	{r7}
 80006f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006f2:	bf00      	nop
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bc80      	pop	{r7}
 80006f8:	4770      	bx	lr

080006fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006fa:	b580      	push	{r7, lr}
 80006fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006fe:	f000 f903 	bl	8000908 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000702:	f003 fb03 	bl	8003d0c <xTaskGetSchedulerState>
 8000706:	4603      	mov	r3, r0
 8000708:	2b01      	cmp	r3, #1
 800070a:	d001      	beq.n	8000710 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800070c:	f003 feb4 	bl	8004478 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000710:	bf00      	nop
 8000712:	bd80      	pop	{r7, pc}

08000714 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000718:	4802      	ldr	r0, [pc, #8]	; (8000724 <USART1_IRQHandler+0x10>)
 800071a:	f001 f941 	bl	80019a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800071e:	bf00      	nop
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	20000330 	.word	0x20000330

08000728 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800072c:	bf00      	nop
 800072e:	46bd      	mov	sp, r7
 8000730:	bc80      	pop	{r7}
 8000732:	4770      	bx	lr

08000734 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000738:	4b11      	ldr	r3, [pc, #68]	; (8000780 <MX_USART1_UART_Init+0x4c>)
 800073a:	4a12      	ldr	r2, [pc, #72]	; (8000784 <MX_USART1_UART_Init+0x50>)
 800073c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800073e:	4b10      	ldr	r3, [pc, #64]	; (8000780 <MX_USART1_UART_Init+0x4c>)
 8000740:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000744:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000746:	4b0e      	ldr	r3, [pc, #56]	; (8000780 <MX_USART1_UART_Init+0x4c>)
 8000748:	2200      	movs	r2, #0
 800074a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800074c:	4b0c      	ldr	r3, [pc, #48]	; (8000780 <MX_USART1_UART_Init+0x4c>)
 800074e:	2200      	movs	r2, #0
 8000750:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000752:	4b0b      	ldr	r3, [pc, #44]	; (8000780 <MX_USART1_UART_Init+0x4c>)
 8000754:	2200      	movs	r2, #0
 8000756:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000758:	4b09      	ldr	r3, [pc, #36]	; (8000780 <MX_USART1_UART_Init+0x4c>)
 800075a:	220c      	movs	r2, #12
 800075c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800075e:	4b08      	ldr	r3, [pc, #32]	; (8000780 <MX_USART1_UART_Init+0x4c>)
 8000760:	2200      	movs	r2, #0
 8000762:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000764:	4b06      	ldr	r3, [pc, #24]	; (8000780 <MX_USART1_UART_Init+0x4c>)
 8000766:	2200      	movs	r2, #0
 8000768:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800076a:	4805      	ldr	r0, [pc, #20]	; (8000780 <MX_USART1_UART_Init+0x4c>)
 800076c:	f001 f86e 	bl	800184c <HAL_UART_Init>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000776:	f7ff ff6d 	bl	8000654 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	20000330 	.word	0x20000330
 8000784:	40013800 	.word	0x40013800

08000788 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b088      	sub	sp, #32
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000790:	f107 0310 	add.w	r3, r7, #16
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	605a      	str	r2, [r3, #4]
 800079a:	609a      	str	r2, [r3, #8]
 800079c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	4a20      	ldr	r2, [pc, #128]	; (8000824 <HAL_UART_MspInit+0x9c>)
 80007a4:	4293      	cmp	r3, r2
 80007a6:	d139      	bne.n	800081c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80007a8:	4b1f      	ldr	r3, [pc, #124]	; (8000828 <HAL_UART_MspInit+0xa0>)
 80007aa:	699b      	ldr	r3, [r3, #24]
 80007ac:	4a1e      	ldr	r2, [pc, #120]	; (8000828 <HAL_UART_MspInit+0xa0>)
 80007ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007b2:	6193      	str	r3, [r2, #24]
 80007b4:	4b1c      	ldr	r3, [pc, #112]	; (8000828 <HAL_UART_MspInit+0xa0>)
 80007b6:	699b      	ldr	r3, [r3, #24]
 80007b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007bc:	60fb      	str	r3, [r7, #12]
 80007be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c0:	4b19      	ldr	r3, [pc, #100]	; (8000828 <HAL_UART_MspInit+0xa0>)
 80007c2:	699b      	ldr	r3, [r3, #24]
 80007c4:	4a18      	ldr	r2, [pc, #96]	; (8000828 <HAL_UART_MspInit+0xa0>)
 80007c6:	f043 0304 	orr.w	r3, r3, #4
 80007ca:	6193      	str	r3, [r2, #24]
 80007cc:	4b16      	ldr	r3, [pc, #88]	; (8000828 <HAL_UART_MspInit+0xa0>)
 80007ce:	699b      	ldr	r3, [r3, #24]
 80007d0:	f003 0304 	and.w	r3, r3, #4
 80007d4:	60bb      	str	r3, [r7, #8]
 80007d6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80007d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007dc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007de:	2302      	movs	r3, #2
 80007e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007e2:	2303      	movs	r3, #3
 80007e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e6:	f107 0310 	add.w	r3, r7, #16
 80007ea:	4619      	mov	r1, r3
 80007ec:	480f      	ldr	r0, [pc, #60]	; (800082c <HAL_UART_MspInit+0xa4>)
 80007ee:	f000 fa67 	bl	8000cc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80007f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007f8:	2300      	movs	r3, #0
 80007fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000800:	f107 0310 	add.w	r3, r7, #16
 8000804:	4619      	mov	r1, r3
 8000806:	4809      	ldr	r0, [pc, #36]	; (800082c <HAL_UART_MspInit+0xa4>)
 8000808:	f000 fa5a 	bl	8000cc0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800080c:	2200      	movs	r2, #0
 800080e:	2105      	movs	r1, #5
 8000810:	2025      	movs	r0, #37	; 0x25
 8000812:	f000 f96c 	bl	8000aee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000816:	2025      	movs	r0, #37	; 0x25
 8000818:	f000 f985 	bl	8000b26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800081c:	bf00      	nop
 800081e:	3720      	adds	r7, #32
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	40013800 	.word	0x40013800
 8000828:	40021000 	.word	0x40021000
 800082c:	40010800 	.word	0x40010800

08000830 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000830:	f7ff ff7a 	bl	8000728 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000834:	480b      	ldr	r0, [pc, #44]	; (8000864 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000836:	490c      	ldr	r1, [pc, #48]	; (8000868 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000838:	4a0c      	ldr	r2, [pc, #48]	; (800086c <LoopFillZerobss+0x16>)
  movs r3, #0
 800083a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800083c:	e002      	b.n	8000844 <LoopCopyDataInit>

0800083e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800083e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000840:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000842:	3304      	adds	r3, #4

08000844 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000844:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000846:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000848:	d3f9      	bcc.n	800083e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800084a:	4a09      	ldr	r2, [pc, #36]	; (8000870 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800084c:	4c09      	ldr	r4, [pc, #36]	; (8000874 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800084e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000850:	e001      	b.n	8000856 <LoopFillZerobss>

08000852 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000852:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000854:	3204      	adds	r2, #4

08000856 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000856:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000858:	d3fb      	bcc.n	8000852 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800085a:	f004 f8cb 	bl	80049f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800085e:	f7ff fceb 	bl	8000238 <main>
  bx lr
 8000862:	4770      	bx	lr
  ldr r0, =_sdata
 8000864:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000868:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800086c:	08004c28 	.word	0x08004c28
  ldr r2, =_sbss
 8000870:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000874:	20002e08 	.word	0x20002e08

08000878 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000878:	e7fe      	b.n	8000878 <ADC1_2_IRQHandler>
	...

0800087c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000880:	4b08      	ldr	r3, [pc, #32]	; (80008a4 <HAL_Init+0x28>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a07      	ldr	r2, [pc, #28]	; (80008a4 <HAL_Init+0x28>)
 8000886:	f043 0310 	orr.w	r3, r3, #16
 800088a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800088c:	2003      	movs	r0, #3
 800088e:	f000 f923 	bl	8000ad8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000892:	200f      	movs	r0, #15
 8000894:	f000 f808 	bl	80008a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000898:	f7ff fee2 	bl	8000660 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800089c:	2300      	movs	r3, #0
}
 800089e:	4618      	mov	r0, r3
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	40022000 	.word	0x40022000

080008a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008b0:	4b12      	ldr	r3, [pc, #72]	; (80008fc <HAL_InitTick+0x54>)
 80008b2:	681a      	ldr	r2, [r3, #0]
 80008b4:	4b12      	ldr	r3, [pc, #72]	; (8000900 <HAL_InitTick+0x58>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	4619      	mov	r1, r3
 80008ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008be:	fbb3 f3f1 	udiv	r3, r3, r1
 80008c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80008c6:	4618      	mov	r0, r3
 80008c8:	f000 f93b 	bl	8000b42 <HAL_SYSTICK_Config>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008d2:	2301      	movs	r3, #1
 80008d4:	e00e      	b.n	80008f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	2b0f      	cmp	r3, #15
 80008da:	d80a      	bhi.n	80008f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008dc:	2200      	movs	r2, #0
 80008de:	6879      	ldr	r1, [r7, #4]
 80008e0:	f04f 30ff 	mov.w	r0, #4294967295
 80008e4:	f000 f903 	bl	8000aee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008e8:	4a06      	ldr	r2, [pc, #24]	; (8000904 <HAL_InitTick+0x5c>)
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008ee:	2300      	movs	r3, #0
 80008f0:	e000      	b.n	80008f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008f2:	2301      	movs	r3, #1
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	3708      	adds	r7, #8
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	20000000 	.word	0x20000000
 8000900:	20000008 	.word	0x20000008
 8000904:	20000004 	.word	0x20000004

08000908 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800090c:	4b05      	ldr	r3, [pc, #20]	; (8000924 <HAL_IncTick+0x1c>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	461a      	mov	r2, r3
 8000912:	4b05      	ldr	r3, [pc, #20]	; (8000928 <HAL_IncTick+0x20>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4413      	add	r3, r2
 8000918:	4a03      	ldr	r2, [pc, #12]	; (8000928 <HAL_IncTick+0x20>)
 800091a:	6013      	str	r3, [r2, #0]
}
 800091c:	bf00      	nop
 800091e:	46bd      	mov	sp, r7
 8000920:	bc80      	pop	{r7}
 8000922:	4770      	bx	lr
 8000924:	20000008 	.word	0x20000008
 8000928:	20000378 	.word	0x20000378

0800092c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  return uwTick;
 8000930:	4b02      	ldr	r3, [pc, #8]	; (800093c <HAL_GetTick+0x10>)
 8000932:	681b      	ldr	r3, [r3, #0]
}
 8000934:	4618      	mov	r0, r3
 8000936:	46bd      	mov	sp, r7
 8000938:	bc80      	pop	{r7}
 800093a:	4770      	bx	lr
 800093c:	20000378 	.word	0x20000378

08000940 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000940:	b480      	push	{r7}
 8000942:	b085      	sub	sp, #20
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	f003 0307 	and.w	r3, r3, #7
 800094e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000950:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <__NVIC_SetPriorityGrouping+0x44>)
 8000952:	68db      	ldr	r3, [r3, #12]
 8000954:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000956:	68ba      	ldr	r2, [r7, #8]
 8000958:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800095c:	4013      	ands	r3, r2
 800095e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000964:	68bb      	ldr	r3, [r7, #8]
 8000966:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000968:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800096c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000970:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000972:	4a04      	ldr	r2, [pc, #16]	; (8000984 <__NVIC_SetPriorityGrouping+0x44>)
 8000974:	68bb      	ldr	r3, [r7, #8]
 8000976:	60d3      	str	r3, [r2, #12]
}
 8000978:	bf00      	nop
 800097a:	3714      	adds	r7, #20
 800097c:	46bd      	mov	sp, r7
 800097e:	bc80      	pop	{r7}
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	e000ed00 	.word	0xe000ed00

08000988 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800098c:	4b04      	ldr	r3, [pc, #16]	; (80009a0 <__NVIC_GetPriorityGrouping+0x18>)
 800098e:	68db      	ldr	r3, [r3, #12]
 8000990:	0a1b      	lsrs	r3, r3, #8
 8000992:	f003 0307 	and.w	r3, r3, #7
}
 8000996:	4618      	mov	r0, r3
 8000998:	46bd      	mov	sp, r7
 800099a:	bc80      	pop	{r7}
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	e000ed00 	.word	0xe000ed00

080009a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	4603      	mov	r3, r0
 80009ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	db0b      	blt.n	80009ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009b6:	79fb      	ldrb	r3, [r7, #7]
 80009b8:	f003 021f 	and.w	r2, r3, #31
 80009bc:	4906      	ldr	r1, [pc, #24]	; (80009d8 <__NVIC_EnableIRQ+0x34>)
 80009be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c2:	095b      	lsrs	r3, r3, #5
 80009c4:	2001      	movs	r0, #1
 80009c6:	fa00 f202 	lsl.w	r2, r0, r2
 80009ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009ce:	bf00      	nop
 80009d0:	370c      	adds	r7, #12
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bc80      	pop	{r7}
 80009d6:	4770      	bx	lr
 80009d8:	e000e100 	.word	0xe000e100

080009dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	4603      	mov	r3, r0
 80009e4:	6039      	str	r1, [r7, #0]
 80009e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	db0a      	blt.n	8000a06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	b2da      	uxtb	r2, r3
 80009f4:	490c      	ldr	r1, [pc, #48]	; (8000a28 <__NVIC_SetPriority+0x4c>)
 80009f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009fa:	0112      	lsls	r2, r2, #4
 80009fc:	b2d2      	uxtb	r2, r2
 80009fe:	440b      	add	r3, r1
 8000a00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a04:	e00a      	b.n	8000a1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	b2da      	uxtb	r2, r3
 8000a0a:	4908      	ldr	r1, [pc, #32]	; (8000a2c <__NVIC_SetPriority+0x50>)
 8000a0c:	79fb      	ldrb	r3, [r7, #7]
 8000a0e:	f003 030f 	and.w	r3, r3, #15
 8000a12:	3b04      	subs	r3, #4
 8000a14:	0112      	lsls	r2, r2, #4
 8000a16:	b2d2      	uxtb	r2, r2
 8000a18:	440b      	add	r3, r1
 8000a1a:	761a      	strb	r2, [r3, #24]
}
 8000a1c:	bf00      	nop
 8000a1e:	370c      	adds	r7, #12
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bc80      	pop	{r7}
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	e000e100 	.word	0xe000e100
 8000a2c:	e000ed00 	.word	0xe000ed00

08000a30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b089      	sub	sp, #36	; 0x24
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	60f8      	str	r0, [r7, #12]
 8000a38:	60b9      	str	r1, [r7, #8]
 8000a3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	f003 0307 	and.w	r3, r3, #7
 8000a42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a44:	69fb      	ldr	r3, [r7, #28]
 8000a46:	f1c3 0307 	rsb	r3, r3, #7
 8000a4a:	2b04      	cmp	r3, #4
 8000a4c:	bf28      	it	cs
 8000a4e:	2304      	movcs	r3, #4
 8000a50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a52:	69fb      	ldr	r3, [r7, #28]
 8000a54:	3304      	adds	r3, #4
 8000a56:	2b06      	cmp	r3, #6
 8000a58:	d902      	bls.n	8000a60 <NVIC_EncodePriority+0x30>
 8000a5a:	69fb      	ldr	r3, [r7, #28]
 8000a5c:	3b03      	subs	r3, #3
 8000a5e:	e000      	b.n	8000a62 <NVIC_EncodePriority+0x32>
 8000a60:	2300      	movs	r3, #0
 8000a62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a64:	f04f 32ff 	mov.w	r2, #4294967295
 8000a68:	69bb      	ldr	r3, [r7, #24]
 8000a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6e:	43da      	mvns	r2, r3
 8000a70:	68bb      	ldr	r3, [r7, #8]
 8000a72:	401a      	ands	r2, r3
 8000a74:	697b      	ldr	r3, [r7, #20]
 8000a76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a78:	f04f 31ff 	mov.w	r1, #4294967295
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a82:	43d9      	mvns	r1, r3
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a88:	4313      	orrs	r3, r2
         );
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	3724      	adds	r7, #36	; 0x24
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bc80      	pop	{r7}
 8000a92:	4770      	bx	lr

08000a94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	3b01      	subs	r3, #1
 8000aa0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000aa4:	d301      	bcc.n	8000aaa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	e00f      	b.n	8000aca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aaa:	4a0a      	ldr	r2, [pc, #40]	; (8000ad4 <SysTick_Config+0x40>)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	3b01      	subs	r3, #1
 8000ab0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ab2:	210f      	movs	r1, #15
 8000ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab8:	f7ff ff90 	bl	80009dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000abc:	4b05      	ldr	r3, [pc, #20]	; (8000ad4 <SysTick_Config+0x40>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ac2:	4b04      	ldr	r3, [pc, #16]	; (8000ad4 <SysTick_Config+0x40>)
 8000ac4:	2207      	movs	r2, #7
 8000ac6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ac8:	2300      	movs	r3, #0
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3708      	adds	r7, #8
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	e000e010 	.word	0xe000e010

08000ad8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ae0:	6878      	ldr	r0, [r7, #4]
 8000ae2:	f7ff ff2d 	bl	8000940 <__NVIC_SetPriorityGrouping>
}
 8000ae6:	bf00      	nop
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}

08000aee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000aee:	b580      	push	{r7, lr}
 8000af0:	b086      	sub	sp, #24
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	4603      	mov	r3, r0
 8000af6:	60b9      	str	r1, [r7, #8]
 8000af8:	607a      	str	r2, [r7, #4]
 8000afa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000afc:	2300      	movs	r3, #0
 8000afe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b00:	f7ff ff42 	bl	8000988 <__NVIC_GetPriorityGrouping>
 8000b04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b06:	687a      	ldr	r2, [r7, #4]
 8000b08:	68b9      	ldr	r1, [r7, #8]
 8000b0a:	6978      	ldr	r0, [r7, #20]
 8000b0c:	f7ff ff90 	bl	8000a30 <NVIC_EncodePriority>
 8000b10:	4602      	mov	r2, r0
 8000b12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b16:	4611      	mov	r1, r2
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f7ff ff5f 	bl	80009dc <__NVIC_SetPriority>
}
 8000b1e:	bf00      	nop
 8000b20:	3718      	adds	r7, #24
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}

08000b26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b26:	b580      	push	{r7, lr}
 8000b28:	b082      	sub	sp, #8
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b34:	4618      	mov	r0, r3
 8000b36:	f7ff ff35 	bl	80009a4 <__NVIC_EnableIRQ>
}
 8000b3a:	bf00      	nop
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}

08000b42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b42:	b580      	push	{r7, lr}
 8000b44:	b082      	sub	sp, #8
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b4a:	6878      	ldr	r0, [r7, #4]
 8000b4c:	f7ff ffa2 	bl	8000a94 <SysTick_Config>
 8000b50:	4603      	mov	r3, r0
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	b085      	sub	sp, #20
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b62:	2300      	movs	r3, #0
 8000b64:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b6c:	b2db      	uxtb	r3, r3
 8000b6e:	2b02      	cmp	r3, #2
 8000b70:	d008      	beq.n	8000b84 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	2204      	movs	r2, #4
 8000b76:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000b80:	2301      	movs	r3, #1
 8000b82:	e020      	b.n	8000bc6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	f022 020e 	bic.w	r2, r2, #14
 8000b92:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	681a      	ldr	r2, [r3, #0]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	f022 0201 	bic.w	r2, r2, #1
 8000ba2:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bac:	2101      	movs	r1, #1
 8000bae:	fa01 f202 	lsl.w	r2, r1, r2
 8000bb2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3714      	adds	r7, #20
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bc80      	pop	{r7}
 8000bce:	4770      	bx	lr

08000bd0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000be2:	b2db      	uxtb	r3, r3
 8000be4:	2b02      	cmp	r3, #2
 8000be6:	d005      	beq.n	8000bf4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	2204      	movs	r2, #4
 8000bec:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	73fb      	strb	r3, [r7, #15]
 8000bf2:	e051      	b.n	8000c98 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	681a      	ldr	r2, [r3, #0]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	f022 020e 	bic.w	r2, r2, #14
 8000c02:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	681a      	ldr	r2, [r3, #0]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f022 0201 	bic.w	r2, r2, #1
 8000c12:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a22      	ldr	r2, [pc, #136]	; (8000ca4 <HAL_DMA_Abort_IT+0xd4>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d029      	beq.n	8000c72 <HAL_DMA_Abort_IT+0xa2>
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4a21      	ldr	r2, [pc, #132]	; (8000ca8 <HAL_DMA_Abort_IT+0xd8>)
 8000c24:	4293      	cmp	r3, r2
 8000c26:	d022      	beq.n	8000c6e <HAL_DMA_Abort_IT+0x9e>
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a1f      	ldr	r2, [pc, #124]	; (8000cac <HAL_DMA_Abort_IT+0xdc>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d01a      	beq.n	8000c68 <HAL_DMA_Abort_IT+0x98>
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4a1e      	ldr	r2, [pc, #120]	; (8000cb0 <HAL_DMA_Abort_IT+0xe0>)
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d012      	beq.n	8000c62 <HAL_DMA_Abort_IT+0x92>
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a1c      	ldr	r2, [pc, #112]	; (8000cb4 <HAL_DMA_Abort_IT+0xe4>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d00a      	beq.n	8000c5c <HAL_DMA_Abort_IT+0x8c>
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4a1b      	ldr	r2, [pc, #108]	; (8000cb8 <HAL_DMA_Abort_IT+0xe8>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d102      	bne.n	8000c56 <HAL_DMA_Abort_IT+0x86>
 8000c50:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000c54:	e00e      	b.n	8000c74 <HAL_DMA_Abort_IT+0xa4>
 8000c56:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c5a:	e00b      	b.n	8000c74 <HAL_DMA_Abort_IT+0xa4>
 8000c5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c60:	e008      	b.n	8000c74 <HAL_DMA_Abort_IT+0xa4>
 8000c62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c66:	e005      	b.n	8000c74 <HAL_DMA_Abort_IT+0xa4>
 8000c68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c6c:	e002      	b.n	8000c74 <HAL_DMA_Abort_IT+0xa4>
 8000c6e:	2310      	movs	r3, #16
 8000c70:	e000      	b.n	8000c74 <HAL_DMA_Abort_IT+0xa4>
 8000c72:	2301      	movs	r3, #1
 8000c74:	4a11      	ldr	r2, [pc, #68]	; (8000cbc <HAL_DMA_Abort_IT+0xec>)
 8000c76:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	2200      	movs	r2, #0
 8000c84:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d003      	beq.n	8000c98 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c94:	6878      	ldr	r0, [r7, #4]
 8000c96:	4798      	blx	r3
    } 
  }
  return status;
 8000c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3710      	adds	r7, #16
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40020008 	.word	0x40020008
 8000ca8:	4002001c 	.word	0x4002001c
 8000cac:	40020030 	.word	0x40020030
 8000cb0:	40020044 	.word	0x40020044
 8000cb4:	40020058 	.word	0x40020058
 8000cb8:	4002006c 	.word	0x4002006c
 8000cbc:	40020000 	.word	0x40020000

08000cc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b08b      	sub	sp, #44	; 0x2c
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cd2:	e169      	b.n	8000fa8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cdc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	69fa      	ldr	r2, [r7, #28]
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ce8:	69ba      	ldr	r2, [r7, #24]
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	429a      	cmp	r2, r3
 8000cee:	f040 8158 	bne.w	8000fa2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	4a9a      	ldr	r2, [pc, #616]	; (8000f60 <HAL_GPIO_Init+0x2a0>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d05e      	beq.n	8000dba <HAL_GPIO_Init+0xfa>
 8000cfc:	4a98      	ldr	r2, [pc, #608]	; (8000f60 <HAL_GPIO_Init+0x2a0>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d875      	bhi.n	8000dee <HAL_GPIO_Init+0x12e>
 8000d02:	4a98      	ldr	r2, [pc, #608]	; (8000f64 <HAL_GPIO_Init+0x2a4>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d058      	beq.n	8000dba <HAL_GPIO_Init+0xfa>
 8000d08:	4a96      	ldr	r2, [pc, #600]	; (8000f64 <HAL_GPIO_Init+0x2a4>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d86f      	bhi.n	8000dee <HAL_GPIO_Init+0x12e>
 8000d0e:	4a96      	ldr	r2, [pc, #600]	; (8000f68 <HAL_GPIO_Init+0x2a8>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d052      	beq.n	8000dba <HAL_GPIO_Init+0xfa>
 8000d14:	4a94      	ldr	r2, [pc, #592]	; (8000f68 <HAL_GPIO_Init+0x2a8>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d869      	bhi.n	8000dee <HAL_GPIO_Init+0x12e>
 8000d1a:	4a94      	ldr	r2, [pc, #592]	; (8000f6c <HAL_GPIO_Init+0x2ac>)
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d04c      	beq.n	8000dba <HAL_GPIO_Init+0xfa>
 8000d20:	4a92      	ldr	r2, [pc, #584]	; (8000f6c <HAL_GPIO_Init+0x2ac>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d863      	bhi.n	8000dee <HAL_GPIO_Init+0x12e>
 8000d26:	4a92      	ldr	r2, [pc, #584]	; (8000f70 <HAL_GPIO_Init+0x2b0>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d046      	beq.n	8000dba <HAL_GPIO_Init+0xfa>
 8000d2c:	4a90      	ldr	r2, [pc, #576]	; (8000f70 <HAL_GPIO_Init+0x2b0>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d85d      	bhi.n	8000dee <HAL_GPIO_Init+0x12e>
 8000d32:	2b12      	cmp	r3, #18
 8000d34:	d82a      	bhi.n	8000d8c <HAL_GPIO_Init+0xcc>
 8000d36:	2b12      	cmp	r3, #18
 8000d38:	d859      	bhi.n	8000dee <HAL_GPIO_Init+0x12e>
 8000d3a:	a201      	add	r2, pc, #4	; (adr r2, 8000d40 <HAL_GPIO_Init+0x80>)
 8000d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d40:	08000dbb 	.word	0x08000dbb
 8000d44:	08000d95 	.word	0x08000d95
 8000d48:	08000da7 	.word	0x08000da7
 8000d4c:	08000de9 	.word	0x08000de9
 8000d50:	08000def 	.word	0x08000def
 8000d54:	08000def 	.word	0x08000def
 8000d58:	08000def 	.word	0x08000def
 8000d5c:	08000def 	.word	0x08000def
 8000d60:	08000def 	.word	0x08000def
 8000d64:	08000def 	.word	0x08000def
 8000d68:	08000def 	.word	0x08000def
 8000d6c:	08000def 	.word	0x08000def
 8000d70:	08000def 	.word	0x08000def
 8000d74:	08000def 	.word	0x08000def
 8000d78:	08000def 	.word	0x08000def
 8000d7c:	08000def 	.word	0x08000def
 8000d80:	08000def 	.word	0x08000def
 8000d84:	08000d9d 	.word	0x08000d9d
 8000d88:	08000db1 	.word	0x08000db1
 8000d8c:	4a79      	ldr	r2, [pc, #484]	; (8000f74 <HAL_GPIO_Init+0x2b4>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d013      	beq.n	8000dba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d92:	e02c      	b.n	8000dee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	623b      	str	r3, [r7, #32]
          break;
 8000d9a:	e029      	b.n	8000df0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	68db      	ldr	r3, [r3, #12]
 8000da0:	3304      	adds	r3, #4
 8000da2:	623b      	str	r3, [r7, #32]
          break;
 8000da4:	e024      	b.n	8000df0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	68db      	ldr	r3, [r3, #12]
 8000daa:	3308      	adds	r3, #8
 8000dac:	623b      	str	r3, [r7, #32]
          break;
 8000dae:	e01f      	b.n	8000df0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	330c      	adds	r3, #12
 8000db6:	623b      	str	r3, [r7, #32]
          break;
 8000db8:	e01a      	b.n	8000df0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	689b      	ldr	r3, [r3, #8]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d102      	bne.n	8000dc8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000dc2:	2304      	movs	r3, #4
 8000dc4:	623b      	str	r3, [r7, #32]
          break;
 8000dc6:	e013      	b.n	8000df0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	689b      	ldr	r3, [r3, #8]
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d105      	bne.n	8000ddc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000dd0:	2308      	movs	r3, #8
 8000dd2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	69fa      	ldr	r2, [r7, #28]
 8000dd8:	611a      	str	r2, [r3, #16]
          break;
 8000dda:	e009      	b.n	8000df0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ddc:	2308      	movs	r3, #8
 8000dde:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	69fa      	ldr	r2, [r7, #28]
 8000de4:	615a      	str	r2, [r3, #20]
          break;
 8000de6:	e003      	b.n	8000df0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000de8:	2300      	movs	r3, #0
 8000dea:	623b      	str	r3, [r7, #32]
          break;
 8000dec:	e000      	b.n	8000df0 <HAL_GPIO_Init+0x130>
          break;
 8000dee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000df0:	69bb      	ldr	r3, [r7, #24]
 8000df2:	2bff      	cmp	r3, #255	; 0xff
 8000df4:	d801      	bhi.n	8000dfa <HAL_GPIO_Init+0x13a>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	e001      	b.n	8000dfe <HAL_GPIO_Init+0x13e>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	3304      	adds	r3, #4
 8000dfe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e00:	69bb      	ldr	r3, [r7, #24]
 8000e02:	2bff      	cmp	r3, #255	; 0xff
 8000e04:	d802      	bhi.n	8000e0c <HAL_GPIO_Init+0x14c>
 8000e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e08:	009b      	lsls	r3, r3, #2
 8000e0a:	e002      	b.n	8000e12 <HAL_GPIO_Init+0x152>
 8000e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e0e:	3b08      	subs	r3, #8
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	210f      	movs	r1, #15
 8000e1a:	693b      	ldr	r3, [r7, #16]
 8000e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e20:	43db      	mvns	r3, r3
 8000e22:	401a      	ands	r2, r3
 8000e24:	6a39      	ldr	r1, [r7, #32]
 8000e26:	693b      	ldr	r3, [r7, #16]
 8000e28:	fa01 f303 	lsl.w	r3, r1, r3
 8000e2c:	431a      	orrs	r2, r3
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	f000 80b1 	beq.w	8000fa2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e40:	4b4d      	ldr	r3, [pc, #308]	; (8000f78 <HAL_GPIO_Init+0x2b8>)
 8000e42:	699b      	ldr	r3, [r3, #24]
 8000e44:	4a4c      	ldr	r2, [pc, #304]	; (8000f78 <HAL_GPIO_Init+0x2b8>)
 8000e46:	f043 0301 	orr.w	r3, r3, #1
 8000e4a:	6193      	str	r3, [r2, #24]
 8000e4c:	4b4a      	ldr	r3, [pc, #296]	; (8000f78 <HAL_GPIO_Init+0x2b8>)
 8000e4e:	699b      	ldr	r3, [r3, #24]
 8000e50:	f003 0301 	and.w	r3, r3, #1
 8000e54:	60bb      	str	r3, [r7, #8]
 8000e56:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e58:	4a48      	ldr	r2, [pc, #288]	; (8000f7c <HAL_GPIO_Init+0x2bc>)
 8000e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e5c:	089b      	lsrs	r3, r3, #2
 8000e5e:	3302      	adds	r3, #2
 8000e60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e64:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e68:	f003 0303 	and.w	r3, r3, #3
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	220f      	movs	r2, #15
 8000e70:	fa02 f303 	lsl.w	r3, r2, r3
 8000e74:	43db      	mvns	r3, r3
 8000e76:	68fa      	ldr	r2, [r7, #12]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	4a40      	ldr	r2, [pc, #256]	; (8000f80 <HAL_GPIO_Init+0x2c0>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d013      	beq.n	8000eac <HAL_GPIO_Init+0x1ec>
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	4a3f      	ldr	r2, [pc, #252]	; (8000f84 <HAL_GPIO_Init+0x2c4>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d00d      	beq.n	8000ea8 <HAL_GPIO_Init+0x1e8>
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	4a3e      	ldr	r2, [pc, #248]	; (8000f88 <HAL_GPIO_Init+0x2c8>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d007      	beq.n	8000ea4 <HAL_GPIO_Init+0x1e4>
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	4a3d      	ldr	r2, [pc, #244]	; (8000f8c <HAL_GPIO_Init+0x2cc>)
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d101      	bne.n	8000ea0 <HAL_GPIO_Init+0x1e0>
 8000e9c:	2303      	movs	r3, #3
 8000e9e:	e006      	b.n	8000eae <HAL_GPIO_Init+0x1ee>
 8000ea0:	2304      	movs	r3, #4
 8000ea2:	e004      	b.n	8000eae <HAL_GPIO_Init+0x1ee>
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	e002      	b.n	8000eae <HAL_GPIO_Init+0x1ee>
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	e000      	b.n	8000eae <HAL_GPIO_Init+0x1ee>
 8000eac:	2300      	movs	r3, #0
 8000eae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000eb0:	f002 0203 	and.w	r2, r2, #3
 8000eb4:	0092      	lsls	r2, r2, #2
 8000eb6:	4093      	lsls	r3, r2
 8000eb8:	68fa      	ldr	r2, [r7, #12]
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000ebe:	492f      	ldr	r1, [pc, #188]	; (8000f7c <HAL_GPIO_Init+0x2bc>)
 8000ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec2:	089b      	lsrs	r3, r3, #2
 8000ec4:	3302      	adds	r3, #2
 8000ec6:	68fa      	ldr	r2, [r7, #12]
 8000ec8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d006      	beq.n	8000ee6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ed8:	4b2d      	ldr	r3, [pc, #180]	; (8000f90 <HAL_GPIO_Init+0x2d0>)
 8000eda:	689a      	ldr	r2, [r3, #8]
 8000edc:	492c      	ldr	r1, [pc, #176]	; (8000f90 <HAL_GPIO_Init+0x2d0>)
 8000ede:	69bb      	ldr	r3, [r7, #24]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	608b      	str	r3, [r1, #8]
 8000ee4:	e006      	b.n	8000ef4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ee6:	4b2a      	ldr	r3, [pc, #168]	; (8000f90 <HAL_GPIO_Init+0x2d0>)
 8000ee8:	689a      	ldr	r2, [r3, #8]
 8000eea:	69bb      	ldr	r3, [r7, #24]
 8000eec:	43db      	mvns	r3, r3
 8000eee:	4928      	ldr	r1, [pc, #160]	; (8000f90 <HAL_GPIO_Init+0x2d0>)
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d006      	beq.n	8000f0e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f00:	4b23      	ldr	r3, [pc, #140]	; (8000f90 <HAL_GPIO_Init+0x2d0>)
 8000f02:	68da      	ldr	r2, [r3, #12]
 8000f04:	4922      	ldr	r1, [pc, #136]	; (8000f90 <HAL_GPIO_Init+0x2d0>)
 8000f06:	69bb      	ldr	r3, [r7, #24]
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	60cb      	str	r3, [r1, #12]
 8000f0c:	e006      	b.n	8000f1c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f0e:	4b20      	ldr	r3, [pc, #128]	; (8000f90 <HAL_GPIO_Init+0x2d0>)
 8000f10:	68da      	ldr	r2, [r3, #12]
 8000f12:	69bb      	ldr	r3, [r7, #24]
 8000f14:	43db      	mvns	r3, r3
 8000f16:	491e      	ldr	r1, [pc, #120]	; (8000f90 <HAL_GPIO_Init+0x2d0>)
 8000f18:	4013      	ands	r3, r2
 8000f1a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d006      	beq.n	8000f36 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f28:	4b19      	ldr	r3, [pc, #100]	; (8000f90 <HAL_GPIO_Init+0x2d0>)
 8000f2a:	685a      	ldr	r2, [r3, #4]
 8000f2c:	4918      	ldr	r1, [pc, #96]	; (8000f90 <HAL_GPIO_Init+0x2d0>)
 8000f2e:	69bb      	ldr	r3, [r7, #24]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	604b      	str	r3, [r1, #4]
 8000f34:	e006      	b.n	8000f44 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f36:	4b16      	ldr	r3, [pc, #88]	; (8000f90 <HAL_GPIO_Init+0x2d0>)
 8000f38:	685a      	ldr	r2, [r3, #4]
 8000f3a:	69bb      	ldr	r3, [r7, #24]
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	4914      	ldr	r1, [pc, #80]	; (8000f90 <HAL_GPIO_Init+0x2d0>)
 8000f40:	4013      	ands	r3, r2
 8000f42:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d021      	beq.n	8000f94 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f50:	4b0f      	ldr	r3, [pc, #60]	; (8000f90 <HAL_GPIO_Init+0x2d0>)
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	490e      	ldr	r1, [pc, #56]	; (8000f90 <HAL_GPIO_Init+0x2d0>)
 8000f56:	69bb      	ldr	r3, [r7, #24]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	600b      	str	r3, [r1, #0]
 8000f5c:	e021      	b.n	8000fa2 <HAL_GPIO_Init+0x2e2>
 8000f5e:	bf00      	nop
 8000f60:	10320000 	.word	0x10320000
 8000f64:	10310000 	.word	0x10310000
 8000f68:	10220000 	.word	0x10220000
 8000f6c:	10210000 	.word	0x10210000
 8000f70:	10120000 	.word	0x10120000
 8000f74:	10110000 	.word	0x10110000
 8000f78:	40021000 	.word	0x40021000
 8000f7c:	40010000 	.word	0x40010000
 8000f80:	40010800 	.word	0x40010800
 8000f84:	40010c00 	.word	0x40010c00
 8000f88:	40011000 	.word	0x40011000
 8000f8c:	40011400 	.word	0x40011400
 8000f90:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f94:	4b0b      	ldr	r3, [pc, #44]	; (8000fc4 <HAL_GPIO_Init+0x304>)
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	69bb      	ldr	r3, [r7, #24]
 8000f9a:	43db      	mvns	r3, r3
 8000f9c:	4909      	ldr	r1, [pc, #36]	; (8000fc4 <HAL_GPIO_Init+0x304>)
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fae:	fa22 f303 	lsr.w	r3, r2, r3
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	f47f ae8e 	bne.w	8000cd4 <HAL_GPIO_Init+0x14>
  }
}
 8000fb8:	bf00      	nop
 8000fba:	bf00      	nop
 8000fbc:	372c      	adds	r7, #44	; 0x2c
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bc80      	pop	{r7}
 8000fc2:	4770      	bx	lr
 8000fc4:	40010400 	.word	0x40010400

08000fc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	807b      	strh	r3, [r7, #2]
 8000fd4:	4613      	mov	r3, r2
 8000fd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fd8:	787b      	ldrb	r3, [r7, #1]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d003      	beq.n	8000fe6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fde:	887a      	ldrh	r2, [r7, #2]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000fe4:	e003      	b.n	8000fee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000fe6:	887b      	ldrh	r3, [r7, #2]
 8000fe8:	041a      	lsls	r2, r3, #16
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	611a      	str	r2, [r3, #16]
}
 8000fee:	bf00      	nop
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bc80      	pop	{r7}
 8000ff6:	4770      	bx	lr

08000ff8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b085      	sub	sp, #20
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	460b      	mov	r3, r1
 8001002:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800100a:	887a      	ldrh	r2, [r7, #2]
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	4013      	ands	r3, r2
 8001010:	041a      	lsls	r2, r3, #16
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	43d9      	mvns	r1, r3
 8001016:	887b      	ldrh	r3, [r7, #2]
 8001018:	400b      	ands	r3, r1
 800101a:	431a      	orrs	r2, r3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	611a      	str	r2, [r3, #16]
}
 8001020:	bf00      	nop
 8001022:	3714      	adds	r7, #20
 8001024:	46bd      	mov	sp, r7
 8001026:	bc80      	pop	{r7}
 8001028:	4770      	bx	lr
	...

0800102c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b086      	sub	sp, #24
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d101      	bne.n	800103e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	e272      	b.n	8001524 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f003 0301 	and.w	r3, r3, #1
 8001046:	2b00      	cmp	r3, #0
 8001048:	f000 8087 	beq.w	800115a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800104c:	4b92      	ldr	r3, [pc, #584]	; (8001298 <HAL_RCC_OscConfig+0x26c>)
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f003 030c 	and.w	r3, r3, #12
 8001054:	2b04      	cmp	r3, #4
 8001056:	d00c      	beq.n	8001072 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001058:	4b8f      	ldr	r3, [pc, #572]	; (8001298 <HAL_RCC_OscConfig+0x26c>)
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f003 030c 	and.w	r3, r3, #12
 8001060:	2b08      	cmp	r3, #8
 8001062:	d112      	bne.n	800108a <HAL_RCC_OscConfig+0x5e>
 8001064:	4b8c      	ldr	r3, [pc, #560]	; (8001298 <HAL_RCC_OscConfig+0x26c>)
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800106c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001070:	d10b      	bne.n	800108a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001072:	4b89      	ldr	r3, [pc, #548]	; (8001298 <HAL_RCC_OscConfig+0x26c>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800107a:	2b00      	cmp	r3, #0
 800107c:	d06c      	beq.n	8001158 <HAL_RCC_OscConfig+0x12c>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d168      	bne.n	8001158 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e24c      	b.n	8001524 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001092:	d106      	bne.n	80010a2 <HAL_RCC_OscConfig+0x76>
 8001094:	4b80      	ldr	r3, [pc, #512]	; (8001298 <HAL_RCC_OscConfig+0x26c>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a7f      	ldr	r2, [pc, #508]	; (8001298 <HAL_RCC_OscConfig+0x26c>)
 800109a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800109e:	6013      	str	r3, [r2, #0]
 80010a0:	e02e      	b.n	8001100 <HAL_RCC_OscConfig+0xd4>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d10c      	bne.n	80010c4 <HAL_RCC_OscConfig+0x98>
 80010aa:	4b7b      	ldr	r3, [pc, #492]	; (8001298 <HAL_RCC_OscConfig+0x26c>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a7a      	ldr	r2, [pc, #488]	; (8001298 <HAL_RCC_OscConfig+0x26c>)
 80010b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010b4:	6013      	str	r3, [r2, #0]
 80010b6:	4b78      	ldr	r3, [pc, #480]	; (8001298 <HAL_RCC_OscConfig+0x26c>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a77      	ldr	r2, [pc, #476]	; (8001298 <HAL_RCC_OscConfig+0x26c>)
 80010bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010c0:	6013      	str	r3, [r2, #0]
 80010c2:	e01d      	b.n	8001100 <HAL_RCC_OscConfig+0xd4>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010cc:	d10c      	bne.n	80010e8 <HAL_RCC_OscConfig+0xbc>
 80010ce:	4b72      	ldr	r3, [pc, #456]	; (8001298 <HAL_RCC_OscConfig+0x26c>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a71      	ldr	r2, [pc, #452]	; (8001298 <HAL_RCC_OscConfig+0x26c>)
 80010d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010d8:	6013      	str	r3, [r2, #0]
 80010da:	4b6f      	ldr	r3, [pc, #444]	; (8001298 <HAL_RCC_OscConfig+0x26c>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a6e      	ldr	r2, [pc, #440]	; (8001298 <HAL_RCC_OscConfig+0x26c>)
 80010e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010e4:	6013      	str	r3, [r2, #0]
 80010e6:	e00b      	b.n	8001100 <HAL_RCC_OscConfig+0xd4>
 80010e8:	4b6b      	ldr	r3, [pc, #428]	; (8001298 <HAL_RCC_OscConfig+0x26c>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a6a      	ldr	r2, [pc, #424]	; (8001298 <HAL_RCC_OscConfig+0x26c>)
 80010ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010f2:	6013      	str	r3, [r2, #0]
 80010f4:	4b68      	ldr	r3, [pc, #416]	; (8001298 <HAL_RCC_OscConfig+0x26c>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a67      	ldr	r2, [pc, #412]	; (8001298 <HAL_RCC_OscConfig+0x26c>)
 80010fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010fe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d013      	beq.n	8001130 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001108:	f7ff fc10 	bl	800092c <HAL_GetTick>
 800110c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800110e:	e008      	b.n	8001122 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001110:	f7ff fc0c 	bl	800092c <HAL_GetTick>
 8001114:	4602      	mov	r2, r0
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	2b64      	cmp	r3, #100	; 0x64
 800111c:	d901      	bls.n	8001122 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800111e:	2303      	movs	r3, #3
 8001120:	e200      	b.n	8001524 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001122:	4b5d      	ldr	r3, [pc, #372]	; (8001298 <HAL_RCC_OscConfig+0x26c>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800112a:	2b00      	cmp	r3, #0
 800112c:	d0f0      	beq.n	8001110 <HAL_RCC_OscConfig+0xe4>
 800112e:	e014      	b.n	800115a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001130:	f7ff fbfc 	bl	800092c <HAL_GetTick>
 8001134:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001136:	e008      	b.n	800114a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001138:	f7ff fbf8 	bl	800092c <HAL_GetTick>
 800113c:	4602      	mov	r2, r0
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	2b64      	cmp	r3, #100	; 0x64
 8001144:	d901      	bls.n	800114a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001146:	2303      	movs	r3, #3
 8001148:	e1ec      	b.n	8001524 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800114a:	4b53      	ldr	r3, [pc, #332]	; (8001298 <HAL_RCC_OscConfig+0x26c>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001152:	2b00      	cmp	r3, #0
 8001154:	d1f0      	bne.n	8001138 <HAL_RCC_OscConfig+0x10c>
 8001156:	e000      	b.n	800115a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001158:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f003 0302 	and.w	r3, r3, #2
 8001162:	2b00      	cmp	r3, #0
 8001164:	d063      	beq.n	800122e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001166:	4b4c      	ldr	r3, [pc, #304]	; (8001298 <HAL_RCC_OscConfig+0x26c>)
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f003 030c 	and.w	r3, r3, #12
 800116e:	2b00      	cmp	r3, #0
 8001170:	d00b      	beq.n	800118a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001172:	4b49      	ldr	r3, [pc, #292]	; (8001298 <HAL_RCC_OscConfig+0x26c>)
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f003 030c 	and.w	r3, r3, #12
 800117a:	2b08      	cmp	r3, #8
 800117c:	d11c      	bne.n	80011b8 <HAL_RCC_OscConfig+0x18c>
 800117e:	4b46      	ldr	r3, [pc, #280]	; (8001298 <HAL_RCC_OscConfig+0x26c>)
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001186:	2b00      	cmp	r3, #0
 8001188:	d116      	bne.n	80011b8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800118a:	4b43      	ldr	r3, [pc, #268]	; (8001298 <HAL_RCC_OscConfig+0x26c>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f003 0302 	and.w	r3, r3, #2
 8001192:	2b00      	cmp	r3, #0
 8001194:	d005      	beq.n	80011a2 <HAL_RCC_OscConfig+0x176>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	691b      	ldr	r3, [r3, #16]
 800119a:	2b01      	cmp	r3, #1
 800119c:	d001      	beq.n	80011a2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	e1c0      	b.n	8001524 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011a2:	4b3d      	ldr	r3, [pc, #244]	; (8001298 <HAL_RCC_OscConfig+0x26c>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	695b      	ldr	r3, [r3, #20]
 80011ae:	00db      	lsls	r3, r3, #3
 80011b0:	4939      	ldr	r1, [pc, #228]	; (8001298 <HAL_RCC_OscConfig+0x26c>)
 80011b2:	4313      	orrs	r3, r2
 80011b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011b6:	e03a      	b.n	800122e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	691b      	ldr	r3, [r3, #16]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d020      	beq.n	8001202 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011c0:	4b36      	ldr	r3, [pc, #216]	; (800129c <HAL_RCC_OscConfig+0x270>)
 80011c2:	2201      	movs	r2, #1
 80011c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011c6:	f7ff fbb1 	bl	800092c <HAL_GetTick>
 80011ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011cc:	e008      	b.n	80011e0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011ce:	f7ff fbad 	bl	800092c <HAL_GetTick>
 80011d2:	4602      	mov	r2, r0
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	1ad3      	subs	r3, r2, r3
 80011d8:	2b02      	cmp	r3, #2
 80011da:	d901      	bls.n	80011e0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80011dc:	2303      	movs	r3, #3
 80011de:	e1a1      	b.n	8001524 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011e0:	4b2d      	ldr	r3, [pc, #180]	; (8001298 <HAL_RCC_OscConfig+0x26c>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f003 0302 	and.w	r3, r3, #2
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d0f0      	beq.n	80011ce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ec:	4b2a      	ldr	r3, [pc, #168]	; (8001298 <HAL_RCC_OscConfig+0x26c>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	695b      	ldr	r3, [r3, #20]
 80011f8:	00db      	lsls	r3, r3, #3
 80011fa:	4927      	ldr	r1, [pc, #156]	; (8001298 <HAL_RCC_OscConfig+0x26c>)
 80011fc:	4313      	orrs	r3, r2
 80011fe:	600b      	str	r3, [r1, #0]
 8001200:	e015      	b.n	800122e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001202:	4b26      	ldr	r3, [pc, #152]	; (800129c <HAL_RCC_OscConfig+0x270>)
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001208:	f7ff fb90 	bl	800092c <HAL_GetTick>
 800120c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800120e:	e008      	b.n	8001222 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001210:	f7ff fb8c 	bl	800092c <HAL_GetTick>
 8001214:	4602      	mov	r2, r0
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	2b02      	cmp	r3, #2
 800121c:	d901      	bls.n	8001222 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800121e:	2303      	movs	r3, #3
 8001220:	e180      	b.n	8001524 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001222:	4b1d      	ldr	r3, [pc, #116]	; (8001298 <HAL_RCC_OscConfig+0x26c>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f003 0302 	and.w	r3, r3, #2
 800122a:	2b00      	cmp	r3, #0
 800122c:	d1f0      	bne.n	8001210 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f003 0308 	and.w	r3, r3, #8
 8001236:	2b00      	cmp	r3, #0
 8001238:	d03a      	beq.n	80012b0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	699b      	ldr	r3, [r3, #24]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d019      	beq.n	8001276 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001242:	4b17      	ldr	r3, [pc, #92]	; (80012a0 <HAL_RCC_OscConfig+0x274>)
 8001244:	2201      	movs	r2, #1
 8001246:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001248:	f7ff fb70 	bl	800092c <HAL_GetTick>
 800124c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800124e:	e008      	b.n	8001262 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001250:	f7ff fb6c 	bl	800092c <HAL_GetTick>
 8001254:	4602      	mov	r2, r0
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	2b02      	cmp	r3, #2
 800125c:	d901      	bls.n	8001262 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800125e:	2303      	movs	r3, #3
 8001260:	e160      	b.n	8001524 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001262:	4b0d      	ldr	r3, [pc, #52]	; (8001298 <HAL_RCC_OscConfig+0x26c>)
 8001264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001266:	f003 0302 	and.w	r3, r3, #2
 800126a:	2b00      	cmp	r3, #0
 800126c:	d0f0      	beq.n	8001250 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800126e:	2001      	movs	r0, #1
 8001270:	f000 face 	bl	8001810 <RCC_Delay>
 8001274:	e01c      	b.n	80012b0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001276:	4b0a      	ldr	r3, [pc, #40]	; (80012a0 <HAL_RCC_OscConfig+0x274>)
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800127c:	f7ff fb56 	bl	800092c <HAL_GetTick>
 8001280:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001282:	e00f      	b.n	80012a4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001284:	f7ff fb52 	bl	800092c <HAL_GetTick>
 8001288:	4602      	mov	r2, r0
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	2b02      	cmp	r3, #2
 8001290:	d908      	bls.n	80012a4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001292:	2303      	movs	r3, #3
 8001294:	e146      	b.n	8001524 <HAL_RCC_OscConfig+0x4f8>
 8001296:	bf00      	nop
 8001298:	40021000 	.word	0x40021000
 800129c:	42420000 	.word	0x42420000
 80012a0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012a4:	4b92      	ldr	r3, [pc, #584]	; (80014f0 <HAL_RCC_OscConfig+0x4c4>)
 80012a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a8:	f003 0302 	and.w	r3, r3, #2
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d1e9      	bne.n	8001284 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f003 0304 	and.w	r3, r3, #4
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	f000 80a6 	beq.w	800140a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012be:	2300      	movs	r3, #0
 80012c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012c2:	4b8b      	ldr	r3, [pc, #556]	; (80014f0 <HAL_RCC_OscConfig+0x4c4>)
 80012c4:	69db      	ldr	r3, [r3, #28]
 80012c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d10d      	bne.n	80012ea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012ce:	4b88      	ldr	r3, [pc, #544]	; (80014f0 <HAL_RCC_OscConfig+0x4c4>)
 80012d0:	69db      	ldr	r3, [r3, #28]
 80012d2:	4a87      	ldr	r2, [pc, #540]	; (80014f0 <HAL_RCC_OscConfig+0x4c4>)
 80012d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012d8:	61d3      	str	r3, [r2, #28]
 80012da:	4b85      	ldr	r3, [pc, #532]	; (80014f0 <HAL_RCC_OscConfig+0x4c4>)
 80012dc:	69db      	ldr	r3, [r3, #28]
 80012de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012e2:	60bb      	str	r3, [r7, #8]
 80012e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012e6:	2301      	movs	r3, #1
 80012e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012ea:	4b82      	ldr	r3, [pc, #520]	; (80014f4 <HAL_RCC_OscConfig+0x4c8>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d118      	bne.n	8001328 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012f6:	4b7f      	ldr	r3, [pc, #508]	; (80014f4 <HAL_RCC_OscConfig+0x4c8>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a7e      	ldr	r2, [pc, #504]	; (80014f4 <HAL_RCC_OscConfig+0x4c8>)
 80012fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001300:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001302:	f7ff fb13 	bl	800092c <HAL_GetTick>
 8001306:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001308:	e008      	b.n	800131c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800130a:	f7ff fb0f 	bl	800092c <HAL_GetTick>
 800130e:	4602      	mov	r2, r0
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	1ad3      	subs	r3, r2, r3
 8001314:	2b64      	cmp	r3, #100	; 0x64
 8001316:	d901      	bls.n	800131c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001318:	2303      	movs	r3, #3
 800131a:	e103      	b.n	8001524 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800131c:	4b75      	ldr	r3, [pc, #468]	; (80014f4 <HAL_RCC_OscConfig+0x4c8>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001324:	2b00      	cmp	r3, #0
 8001326:	d0f0      	beq.n	800130a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	2b01      	cmp	r3, #1
 800132e:	d106      	bne.n	800133e <HAL_RCC_OscConfig+0x312>
 8001330:	4b6f      	ldr	r3, [pc, #444]	; (80014f0 <HAL_RCC_OscConfig+0x4c4>)
 8001332:	6a1b      	ldr	r3, [r3, #32]
 8001334:	4a6e      	ldr	r2, [pc, #440]	; (80014f0 <HAL_RCC_OscConfig+0x4c4>)
 8001336:	f043 0301 	orr.w	r3, r3, #1
 800133a:	6213      	str	r3, [r2, #32]
 800133c:	e02d      	b.n	800139a <HAL_RCC_OscConfig+0x36e>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	68db      	ldr	r3, [r3, #12]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d10c      	bne.n	8001360 <HAL_RCC_OscConfig+0x334>
 8001346:	4b6a      	ldr	r3, [pc, #424]	; (80014f0 <HAL_RCC_OscConfig+0x4c4>)
 8001348:	6a1b      	ldr	r3, [r3, #32]
 800134a:	4a69      	ldr	r2, [pc, #420]	; (80014f0 <HAL_RCC_OscConfig+0x4c4>)
 800134c:	f023 0301 	bic.w	r3, r3, #1
 8001350:	6213      	str	r3, [r2, #32]
 8001352:	4b67      	ldr	r3, [pc, #412]	; (80014f0 <HAL_RCC_OscConfig+0x4c4>)
 8001354:	6a1b      	ldr	r3, [r3, #32]
 8001356:	4a66      	ldr	r2, [pc, #408]	; (80014f0 <HAL_RCC_OscConfig+0x4c4>)
 8001358:	f023 0304 	bic.w	r3, r3, #4
 800135c:	6213      	str	r3, [r2, #32]
 800135e:	e01c      	b.n	800139a <HAL_RCC_OscConfig+0x36e>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	2b05      	cmp	r3, #5
 8001366:	d10c      	bne.n	8001382 <HAL_RCC_OscConfig+0x356>
 8001368:	4b61      	ldr	r3, [pc, #388]	; (80014f0 <HAL_RCC_OscConfig+0x4c4>)
 800136a:	6a1b      	ldr	r3, [r3, #32]
 800136c:	4a60      	ldr	r2, [pc, #384]	; (80014f0 <HAL_RCC_OscConfig+0x4c4>)
 800136e:	f043 0304 	orr.w	r3, r3, #4
 8001372:	6213      	str	r3, [r2, #32]
 8001374:	4b5e      	ldr	r3, [pc, #376]	; (80014f0 <HAL_RCC_OscConfig+0x4c4>)
 8001376:	6a1b      	ldr	r3, [r3, #32]
 8001378:	4a5d      	ldr	r2, [pc, #372]	; (80014f0 <HAL_RCC_OscConfig+0x4c4>)
 800137a:	f043 0301 	orr.w	r3, r3, #1
 800137e:	6213      	str	r3, [r2, #32]
 8001380:	e00b      	b.n	800139a <HAL_RCC_OscConfig+0x36e>
 8001382:	4b5b      	ldr	r3, [pc, #364]	; (80014f0 <HAL_RCC_OscConfig+0x4c4>)
 8001384:	6a1b      	ldr	r3, [r3, #32]
 8001386:	4a5a      	ldr	r2, [pc, #360]	; (80014f0 <HAL_RCC_OscConfig+0x4c4>)
 8001388:	f023 0301 	bic.w	r3, r3, #1
 800138c:	6213      	str	r3, [r2, #32]
 800138e:	4b58      	ldr	r3, [pc, #352]	; (80014f0 <HAL_RCC_OscConfig+0x4c4>)
 8001390:	6a1b      	ldr	r3, [r3, #32]
 8001392:	4a57      	ldr	r2, [pc, #348]	; (80014f0 <HAL_RCC_OscConfig+0x4c4>)
 8001394:	f023 0304 	bic.w	r3, r3, #4
 8001398:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	68db      	ldr	r3, [r3, #12]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d015      	beq.n	80013ce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013a2:	f7ff fac3 	bl	800092c <HAL_GetTick>
 80013a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013a8:	e00a      	b.n	80013c0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013aa:	f7ff fabf 	bl	800092c <HAL_GetTick>
 80013ae:	4602      	mov	r2, r0
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d901      	bls.n	80013c0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80013bc:	2303      	movs	r3, #3
 80013be:	e0b1      	b.n	8001524 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013c0:	4b4b      	ldr	r3, [pc, #300]	; (80014f0 <HAL_RCC_OscConfig+0x4c4>)
 80013c2:	6a1b      	ldr	r3, [r3, #32]
 80013c4:	f003 0302 	and.w	r3, r3, #2
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d0ee      	beq.n	80013aa <HAL_RCC_OscConfig+0x37e>
 80013cc:	e014      	b.n	80013f8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ce:	f7ff faad 	bl	800092c <HAL_GetTick>
 80013d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013d4:	e00a      	b.n	80013ec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013d6:	f7ff faa9 	bl	800092c <HAL_GetTick>
 80013da:	4602      	mov	r2, r0
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d901      	bls.n	80013ec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80013e8:	2303      	movs	r3, #3
 80013ea:	e09b      	b.n	8001524 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013ec:	4b40      	ldr	r3, [pc, #256]	; (80014f0 <HAL_RCC_OscConfig+0x4c4>)
 80013ee:	6a1b      	ldr	r3, [r3, #32]
 80013f0:	f003 0302 	and.w	r3, r3, #2
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d1ee      	bne.n	80013d6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80013f8:	7dfb      	ldrb	r3, [r7, #23]
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d105      	bne.n	800140a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013fe:	4b3c      	ldr	r3, [pc, #240]	; (80014f0 <HAL_RCC_OscConfig+0x4c4>)
 8001400:	69db      	ldr	r3, [r3, #28]
 8001402:	4a3b      	ldr	r2, [pc, #236]	; (80014f0 <HAL_RCC_OscConfig+0x4c4>)
 8001404:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001408:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	69db      	ldr	r3, [r3, #28]
 800140e:	2b00      	cmp	r3, #0
 8001410:	f000 8087 	beq.w	8001522 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001414:	4b36      	ldr	r3, [pc, #216]	; (80014f0 <HAL_RCC_OscConfig+0x4c4>)
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f003 030c 	and.w	r3, r3, #12
 800141c:	2b08      	cmp	r3, #8
 800141e:	d061      	beq.n	80014e4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	69db      	ldr	r3, [r3, #28]
 8001424:	2b02      	cmp	r3, #2
 8001426:	d146      	bne.n	80014b6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001428:	4b33      	ldr	r3, [pc, #204]	; (80014f8 <HAL_RCC_OscConfig+0x4cc>)
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800142e:	f7ff fa7d 	bl	800092c <HAL_GetTick>
 8001432:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001434:	e008      	b.n	8001448 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001436:	f7ff fa79 	bl	800092c <HAL_GetTick>
 800143a:	4602      	mov	r2, r0
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	2b02      	cmp	r3, #2
 8001442:	d901      	bls.n	8001448 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001444:	2303      	movs	r3, #3
 8001446:	e06d      	b.n	8001524 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001448:	4b29      	ldr	r3, [pc, #164]	; (80014f0 <HAL_RCC_OscConfig+0x4c4>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001450:	2b00      	cmp	r3, #0
 8001452:	d1f0      	bne.n	8001436 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6a1b      	ldr	r3, [r3, #32]
 8001458:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800145c:	d108      	bne.n	8001470 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800145e:	4b24      	ldr	r3, [pc, #144]	; (80014f0 <HAL_RCC_OscConfig+0x4c4>)
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	4921      	ldr	r1, [pc, #132]	; (80014f0 <HAL_RCC_OscConfig+0x4c4>)
 800146c:	4313      	orrs	r3, r2
 800146e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001470:	4b1f      	ldr	r3, [pc, #124]	; (80014f0 <HAL_RCC_OscConfig+0x4c4>)
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6a19      	ldr	r1, [r3, #32]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001480:	430b      	orrs	r3, r1
 8001482:	491b      	ldr	r1, [pc, #108]	; (80014f0 <HAL_RCC_OscConfig+0x4c4>)
 8001484:	4313      	orrs	r3, r2
 8001486:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001488:	4b1b      	ldr	r3, [pc, #108]	; (80014f8 <HAL_RCC_OscConfig+0x4cc>)
 800148a:	2201      	movs	r2, #1
 800148c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800148e:	f7ff fa4d 	bl	800092c <HAL_GetTick>
 8001492:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001494:	e008      	b.n	80014a8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001496:	f7ff fa49 	bl	800092c <HAL_GetTick>
 800149a:	4602      	mov	r2, r0
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	d901      	bls.n	80014a8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80014a4:	2303      	movs	r3, #3
 80014a6:	e03d      	b.n	8001524 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014a8:	4b11      	ldr	r3, [pc, #68]	; (80014f0 <HAL_RCC_OscConfig+0x4c4>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d0f0      	beq.n	8001496 <HAL_RCC_OscConfig+0x46a>
 80014b4:	e035      	b.n	8001522 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014b6:	4b10      	ldr	r3, [pc, #64]	; (80014f8 <HAL_RCC_OscConfig+0x4cc>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014bc:	f7ff fa36 	bl	800092c <HAL_GetTick>
 80014c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014c2:	e008      	b.n	80014d6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014c4:	f7ff fa32 	bl	800092c <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d901      	bls.n	80014d6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e026      	b.n	8001524 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014d6:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <HAL_RCC_OscConfig+0x4c4>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d1f0      	bne.n	80014c4 <HAL_RCC_OscConfig+0x498>
 80014e2:	e01e      	b.n	8001522 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	69db      	ldr	r3, [r3, #28]
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d107      	bne.n	80014fc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	e019      	b.n	8001524 <HAL_RCC_OscConfig+0x4f8>
 80014f0:	40021000 	.word	0x40021000
 80014f4:	40007000 	.word	0x40007000
 80014f8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80014fc:	4b0b      	ldr	r3, [pc, #44]	; (800152c <HAL_RCC_OscConfig+0x500>)
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6a1b      	ldr	r3, [r3, #32]
 800150c:	429a      	cmp	r2, r3
 800150e:	d106      	bne.n	800151e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800151a:	429a      	cmp	r2, r3
 800151c:	d001      	beq.n	8001522 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e000      	b.n	8001524 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001522:	2300      	movs	r3, #0
}
 8001524:	4618      	mov	r0, r3
 8001526:	3718      	adds	r7, #24
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	40021000 	.word	0x40021000

08001530 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d101      	bne.n	8001544 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	e0d0      	b.n	80016e6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001544:	4b6a      	ldr	r3, [pc, #424]	; (80016f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f003 0307 	and.w	r3, r3, #7
 800154c:	683a      	ldr	r2, [r7, #0]
 800154e:	429a      	cmp	r2, r3
 8001550:	d910      	bls.n	8001574 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001552:	4b67      	ldr	r3, [pc, #412]	; (80016f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f023 0207 	bic.w	r2, r3, #7
 800155a:	4965      	ldr	r1, [pc, #404]	; (80016f0 <HAL_RCC_ClockConfig+0x1c0>)
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	4313      	orrs	r3, r2
 8001560:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001562:	4b63      	ldr	r3, [pc, #396]	; (80016f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 0307 	and.w	r3, r3, #7
 800156a:	683a      	ldr	r2, [r7, #0]
 800156c:	429a      	cmp	r2, r3
 800156e:	d001      	beq.n	8001574 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	e0b8      	b.n	80016e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 0302 	and.w	r3, r3, #2
 800157c:	2b00      	cmp	r3, #0
 800157e:	d020      	beq.n	80015c2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 0304 	and.w	r3, r3, #4
 8001588:	2b00      	cmp	r3, #0
 800158a:	d005      	beq.n	8001598 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800158c:	4b59      	ldr	r3, [pc, #356]	; (80016f4 <HAL_RCC_ClockConfig+0x1c4>)
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	4a58      	ldr	r2, [pc, #352]	; (80016f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001592:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001596:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 0308 	and.w	r3, r3, #8
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d005      	beq.n	80015b0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015a4:	4b53      	ldr	r3, [pc, #332]	; (80016f4 <HAL_RCC_ClockConfig+0x1c4>)
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	4a52      	ldr	r2, [pc, #328]	; (80016f4 <HAL_RCC_ClockConfig+0x1c4>)
 80015aa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80015ae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015b0:	4b50      	ldr	r3, [pc, #320]	; (80016f4 <HAL_RCC_ClockConfig+0x1c4>)
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	494d      	ldr	r1, [pc, #308]	; (80016f4 <HAL_RCC_ClockConfig+0x1c4>)
 80015be:	4313      	orrs	r3, r2
 80015c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d040      	beq.n	8001650 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d107      	bne.n	80015e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015d6:	4b47      	ldr	r3, [pc, #284]	; (80016f4 <HAL_RCC_ClockConfig+0x1c4>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d115      	bne.n	800160e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e07f      	b.n	80016e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d107      	bne.n	80015fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015ee:	4b41      	ldr	r3, [pc, #260]	; (80016f4 <HAL_RCC_ClockConfig+0x1c4>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d109      	bne.n	800160e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e073      	b.n	80016e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015fe:	4b3d      	ldr	r3, [pc, #244]	; (80016f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 0302 	and.w	r3, r3, #2
 8001606:	2b00      	cmp	r3, #0
 8001608:	d101      	bne.n	800160e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e06b      	b.n	80016e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800160e:	4b39      	ldr	r3, [pc, #228]	; (80016f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f023 0203 	bic.w	r2, r3, #3
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	4936      	ldr	r1, [pc, #216]	; (80016f4 <HAL_RCC_ClockConfig+0x1c4>)
 800161c:	4313      	orrs	r3, r2
 800161e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001620:	f7ff f984 	bl	800092c <HAL_GetTick>
 8001624:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001626:	e00a      	b.n	800163e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001628:	f7ff f980 	bl	800092c <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	f241 3288 	movw	r2, #5000	; 0x1388
 8001636:	4293      	cmp	r3, r2
 8001638:	d901      	bls.n	800163e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e053      	b.n	80016e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800163e:	4b2d      	ldr	r3, [pc, #180]	; (80016f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f003 020c 	and.w	r2, r3, #12
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	429a      	cmp	r2, r3
 800164e:	d1eb      	bne.n	8001628 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001650:	4b27      	ldr	r3, [pc, #156]	; (80016f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 0307 	and.w	r3, r3, #7
 8001658:	683a      	ldr	r2, [r7, #0]
 800165a:	429a      	cmp	r2, r3
 800165c:	d210      	bcs.n	8001680 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800165e:	4b24      	ldr	r3, [pc, #144]	; (80016f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f023 0207 	bic.w	r2, r3, #7
 8001666:	4922      	ldr	r1, [pc, #136]	; (80016f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	4313      	orrs	r3, r2
 800166c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800166e:	4b20      	ldr	r3, [pc, #128]	; (80016f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0307 	and.w	r3, r3, #7
 8001676:	683a      	ldr	r2, [r7, #0]
 8001678:	429a      	cmp	r2, r3
 800167a:	d001      	beq.n	8001680 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800167c:	2301      	movs	r3, #1
 800167e:	e032      	b.n	80016e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 0304 	and.w	r3, r3, #4
 8001688:	2b00      	cmp	r3, #0
 800168a:	d008      	beq.n	800169e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800168c:	4b19      	ldr	r3, [pc, #100]	; (80016f4 <HAL_RCC_ClockConfig+0x1c4>)
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	4916      	ldr	r1, [pc, #88]	; (80016f4 <HAL_RCC_ClockConfig+0x1c4>)
 800169a:	4313      	orrs	r3, r2
 800169c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0308 	and.w	r3, r3, #8
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d009      	beq.n	80016be <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80016aa:	4b12      	ldr	r3, [pc, #72]	; (80016f4 <HAL_RCC_ClockConfig+0x1c4>)
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	691b      	ldr	r3, [r3, #16]
 80016b6:	00db      	lsls	r3, r3, #3
 80016b8:	490e      	ldr	r1, [pc, #56]	; (80016f4 <HAL_RCC_ClockConfig+0x1c4>)
 80016ba:	4313      	orrs	r3, r2
 80016bc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80016be:	f000 f821 	bl	8001704 <HAL_RCC_GetSysClockFreq>
 80016c2:	4602      	mov	r2, r0
 80016c4:	4b0b      	ldr	r3, [pc, #44]	; (80016f4 <HAL_RCC_ClockConfig+0x1c4>)
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	091b      	lsrs	r3, r3, #4
 80016ca:	f003 030f 	and.w	r3, r3, #15
 80016ce:	490a      	ldr	r1, [pc, #40]	; (80016f8 <HAL_RCC_ClockConfig+0x1c8>)
 80016d0:	5ccb      	ldrb	r3, [r1, r3]
 80016d2:	fa22 f303 	lsr.w	r3, r2, r3
 80016d6:	4a09      	ldr	r2, [pc, #36]	; (80016fc <HAL_RCC_ClockConfig+0x1cc>)
 80016d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80016da:	4b09      	ldr	r3, [pc, #36]	; (8001700 <HAL_RCC_ClockConfig+0x1d0>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4618      	mov	r0, r3
 80016e0:	f7ff f8e2 	bl	80008a8 <HAL_InitTick>

  return HAL_OK;
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3710      	adds	r7, #16
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	40022000 	.word	0x40022000
 80016f4:	40021000 	.word	0x40021000
 80016f8:	08004bf4 	.word	0x08004bf4
 80016fc:	20000000 	.word	0x20000000
 8001700:	20000004 	.word	0x20000004

08001704 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001704:	b480      	push	{r7}
 8001706:	b087      	sub	sp, #28
 8001708:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800170a:	2300      	movs	r3, #0
 800170c:	60fb      	str	r3, [r7, #12]
 800170e:	2300      	movs	r3, #0
 8001710:	60bb      	str	r3, [r7, #8]
 8001712:	2300      	movs	r3, #0
 8001714:	617b      	str	r3, [r7, #20]
 8001716:	2300      	movs	r3, #0
 8001718:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800171a:	2300      	movs	r3, #0
 800171c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800171e:	4b1e      	ldr	r3, [pc, #120]	; (8001798 <HAL_RCC_GetSysClockFreq+0x94>)
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	f003 030c 	and.w	r3, r3, #12
 800172a:	2b04      	cmp	r3, #4
 800172c:	d002      	beq.n	8001734 <HAL_RCC_GetSysClockFreq+0x30>
 800172e:	2b08      	cmp	r3, #8
 8001730:	d003      	beq.n	800173a <HAL_RCC_GetSysClockFreq+0x36>
 8001732:	e027      	b.n	8001784 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001734:	4b19      	ldr	r3, [pc, #100]	; (800179c <HAL_RCC_GetSysClockFreq+0x98>)
 8001736:	613b      	str	r3, [r7, #16]
      break;
 8001738:	e027      	b.n	800178a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	0c9b      	lsrs	r3, r3, #18
 800173e:	f003 030f 	and.w	r3, r3, #15
 8001742:	4a17      	ldr	r2, [pc, #92]	; (80017a0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001744:	5cd3      	ldrb	r3, [r2, r3]
 8001746:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d010      	beq.n	8001774 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001752:	4b11      	ldr	r3, [pc, #68]	; (8001798 <HAL_RCC_GetSysClockFreq+0x94>)
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	0c5b      	lsrs	r3, r3, #17
 8001758:	f003 0301 	and.w	r3, r3, #1
 800175c:	4a11      	ldr	r2, [pc, #68]	; (80017a4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800175e:	5cd3      	ldrb	r3, [r2, r3]
 8001760:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4a0d      	ldr	r2, [pc, #52]	; (800179c <HAL_RCC_GetSysClockFreq+0x98>)
 8001766:	fb03 f202 	mul.w	r2, r3, r2
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001770:	617b      	str	r3, [r7, #20]
 8001772:	e004      	b.n	800177e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	4a0c      	ldr	r2, [pc, #48]	; (80017a8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001778:	fb02 f303 	mul.w	r3, r2, r3
 800177c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	613b      	str	r3, [r7, #16]
      break;
 8001782:	e002      	b.n	800178a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001784:	4b05      	ldr	r3, [pc, #20]	; (800179c <HAL_RCC_GetSysClockFreq+0x98>)
 8001786:	613b      	str	r3, [r7, #16]
      break;
 8001788:	bf00      	nop
    }
  }
  return sysclockfreq;
 800178a:	693b      	ldr	r3, [r7, #16]
}
 800178c:	4618      	mov	r0, r3
 800178e:	371c      	adds	r7, #28
 8001790:	46bd      	mov	sp, r7
 8001792:	bc80      	pop	{r7}
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	40021000 	.word	0x40021000
 800179c:	007a1200 	.word	0x007a1200
 80017a0:	08004c0c 	.word	0x08004c0c
 80017a4:	08004c1c 	.word	0x08004c1c
 80017a8:	003d0900 	.word	0x003d0900

080017ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017b0:	4b02      	ldr	r3, [pc, #8]	; (80017bc <HAL_RCC_GetHCLKFreq+0x10>)
 80017b2:	681b      	ldr	r3, [r3, #0]
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bc80      	pop	{r7}
 80017ba:	4770      	bx	lr
 80017bc:	20000000 	.word	0x20000000

080017c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80017c4:	f7ff fff2 	bl	80017ac <HAL_RCC_GetHCLKFreq>
 80017c8:	4602      	mov	r2, r0
 80017ca:	4b05      	ldr	r3, [pc, #20]	; (80017e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	0a1b      	lsrs	r3, r3, #8
 80017d0:	f003 0307 	and.w	r3, r3, #7
 80017d4:	4903      	ldr	r1, [pc, #12]	; (80017e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80017d6:	5ccb      	ldrb	r3, [r1, r3]
 80017d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80017dc:	4618      	mov	r0, r3
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	40021000 	.word	0x40021000
 80017e4:	08004c04 	.word	0x08004c04

080017e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80017ec:	f7ff ffde 	bl	80017ac <HAL_RCC_GetHCLKFreq>
 80017f0:	4602      	mov	r2, r0
 80017f2:	4b05      	ldr	r3, [pc, #20]	; (8001808 <HAL_RCC_GetPCLK2Freq+0x20>)
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	0adb      	lsrs	r3, r3, #11
 80017f8:	f003 0307 	and.w	r3, r3, #7
 80017fc:	4903      	ldr	r1, [pc, #12]	; (800180c <HAL_RCC_GetPCLK2Freq+0x24>)
 80017fe:	5ccb      	ldrb	r3, [r1, r3]
 8001800:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001804:	4618      	mov	r0, r3
 8001806:	bd80      	pop	{r7, pc}
 8001808:	40021000 	.word	0x40021000
 800180c:	08004c04 	.word	0x08004c04

08001810 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001810:	b480      	push	{r7}
 8001812:	b085      	sub	sp, #20
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001818:	4b0a      	ldr	r3, [pc, #40]	; (8001844 <RCC_Delay+0x34>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a0a      	ldr	r2, [pc, #40]	; (8001848 <RCC_Delay+0x38>)
 800181e:	fba2 2303 	umull	r2, r3, r2, r3
 8001822:	0a5b      	lsrs	r3, r3, #9
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	fb02 f303 	mul.w	r3, r2, r3
 800182a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800182c:	bf00      	nop
  }
  while (Delay --);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	1e5a      	subs	r2, r3, #1
 8001832:	60fa      	str	r2, [r7, #12]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d1f9      	bne.n	800182c <RCC_Delay+0x1c>
}
 8001838:	bf00      	nop
 800183a:	bf00      	nop
 800183c:	3714      	adds	r7, #20
 800183e:	46bd      	mov	sp, r7
 8001840:	bc80      	pop	{r7}
 8001842:	4770      	bx	lr
 8001844:	20000000 	.word	0x20000000
 8001848:	10624dd3 	.word	0x10624dd3

0800184c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d101      	bne.n	800185e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e042      	b.n	80018e4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001864:	b2db      	uxtb	r3, r3
 8001866:	2b00      	cmp	r3, #0
 8001868:	d106      	bne.n	8001878 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2200      	movs	r2, #0
 800186e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f7fe ff88 	bl	8000788 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2224      	movs	r2, #36	; 0x24
 800187c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	68da      	ldr	r2, [r3, #12]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800188e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f000 fcff 	bl	8002294 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	691a      	ldr	r2, [r3, #16]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80018a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	695a      	ldr	r2, [r3, #20]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80018b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	68da      	ldr	r2, [r3, #12]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80018c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2220      	movs	r2, #32
 80018d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2220      	movs	r2, #32
 80018d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2200      	movs	r2, #0
 80018e0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80018e2:	2300      	movs	r3, #0
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3708      	adds	r7, #8
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}

080018ec <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	4613      	mov	r3, r2
 80018f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001900:	b2db      	uxtb	r3, r3
 8001902:	2b20      	cmp	r3, #32
 8001904:	d121      	bne.n	800194a <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d002      	beq.n	8001912 <HAL_UART_Transmit_IT+0x26>
 800190c:	88fb      	ldrh	r3, [r7, #6]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d101      	bne.n	8001916 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e01a      	b.n	800194c <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	68ba      	ldr	r2, [r7, #8]
 800191a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	88fa      	ldrh	r2, [r7, #6]
 8001920:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	88fa      	ldrh	r2, [r7, #6]
 8001926:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	2200      	movs	r2, #0
 800192c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	2221      	movs	r2, #33	; 0x21
 8001932:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	68da      	ldr	r2, [r3, #12]
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001944:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001946:	2300      	movs	r3, #0
 8001948:	e000      	b.n	800194c <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800194a:	2302      	movs	r3, #2
  }
}
 800194c:	4618      	mov	r0, r3
 800194e:	3714      	adds	r7, #20
 8001950:	46bd      	mov	sp, r7
 8001952:	bc80      	pop	{r7}
 8001954:	4770      	bx	lr

08001956 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	b084      	sub	sp, #16
 800195a:	af00      	add	r7, sp, #0
 800195c:	60f8      	str	r0, [r7, #12]
 800195e:	60b9      	str	r1, [r7, #8]
 8001960:	4613      	mov	r3, r2
 8001962:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800196a:	b2db      	uxtb	r3, r3
 800196c:	2b20      	cmp	r3, #32
 800196e:	d112      	bne.n	8001996 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d002      	beq.n	800197c <HAL_UART_Receive_IT+0x26>
 8001976:	88fb      	ldrh	r3, [r7, #6]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d101      	bne.n	8001980 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e00b      	b.n	8001998 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2200      	movs	r2, #0
 8001984:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001986:	88fb      	ldrh	r3, [r7, #6]
 8001988:	461a      	mov	r2, r3
 800198a:	68b9      	ldr	r1, [r7, #8]
 800198c:	68f8      	ldr	r0, [r7, #12]
 800198e:	f000 faad 	bl	8001eec <UART_Start_Receive_IT>
 8001992:	4603      	mov	r3, r0
 8001994:	e000      	b.n	8001998 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8001996:	2302      	movs	r3, #2
  }
}
 8001998:	4618      	mov	r0, r3
 800199a:	3710      	adds	r7, #16
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}

080019a0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b0ba      	sub	sp, #232	; 0xe8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	695b      	ldr	r3, [r3, #20]
 80019c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80019c6:	2300      	movs	r3, #0
 80019c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80019cc:	2300      	movs	r3, #0
 80019ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80019d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80019d6:	f003 030f 	and.w	r3, r3, #15
 80019da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80019de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d10f      	bne.n	8001a06 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80019e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80019ea:	f003 0320 	and.w	r3, r3, #32
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d009      	beq.n	8001a06 <HAL_UART_IRQHandler+0x66>
 80019f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80019f6:	f003 0320 	and.w	r3, r3, #32
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d003      	beq.n	8001a06 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f000 fb8a 	bl	8002118 <UART_Receive_IT>
      return;
 8001a04:	e25b      	b.n	8001ebe <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001a06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	f000 80de 	beq.w	8001bcc <HAL_UART_IRQHandler+0x22c>
 8001a10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001a14:	f003 0301 	and.w	r3, r3, #1
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d106      	bne.n	8001a2a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001a1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001a20:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	f000 80d1 	beq.w	8001bcc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001a2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001a2e:	f003 0301 	and.w	r3, r3, #1
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d00b      	beq.n	8001a4e <HAL_UART_IRQHandler+0xae>
 8001a36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d005      	beq.n	8001a4e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a46:	f043 0201 	orr.w	r2, r3, #1
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001a4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001a52:	f003 0304 	and.w	r3, r3, #4
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d00b      	beq.n	8001a72 <HAL_UART_IRQHandler+0xd2>
 8001a5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d005      	beq.n	8001a72 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6a:	f043 0202 	orr.w	r2, r3, #2
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001a72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d00b      	beq.n	8001a96 <HAL_UART_IRQHandler+0xf6>
 8001a7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001a82:	f003 0301 	and.w	r3, r3, #1
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d005      	beq.n	8001a96 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a8e:	f043 0204 	orr.w	r2, r3, #4
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001a96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001a9a:	f003 0308 	and.w	r3, r3, #8
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d011      	beq.n	8001ac6 <HAL_UART_IRQHandler+0x126>
 8001aa2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001aa6:	f003 0320 	and.w	r3, r3, #32
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d105      	bne.n	8001aba <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001aae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001ab2:	f003 0301 	and.w	r3, r3, #1
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d005      	beq.n	8001ac6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001abe:	f043 0208 	orr.w	r2, r3, #8
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	f000 81f2 	beq.w	8001eb4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001ad0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001ad4:	f003 0320 	and.w	r3, r3, #32
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d008      	beq.n	8001aee <HAL_UART_IRQHandler+0x14e>
 8001adc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001ae0:	f003 0320 	and.w	r3, r3, #32
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d002      	beq.n	8001aee <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f000 fb15 	bl	8002118 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	695b      	ldr	r3, [r3, #20]
 8001af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	bf14      	ite	ne
 8001afc:	2301      	movne	r3, #1
 8001afe:	2300      	moveq	r3, #0
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b0a:	f003 0308 	and.w	r3, r3, #8
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d103      	bne.n	8001b1a <HAL_UART_IRQHandler+0x17a>
 8001b12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d04f      	beq.n	8001bba <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f000 fa1f 	bl	8001f5e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	695b      	ldr	r3, [r3, #20]
 8001b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d041      	beq.n	8001bb2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	3314      	adds	r3, #20
 8001b34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b38:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b3c:	e853 3f00 	ldrex	r3, [r3]
 8001b40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8001b44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001b48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001b4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	3314      	adds	r3, #20
 8001b56:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001b5a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8001b5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b62:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8001b66:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001b6a:	e841 2300 	strex	r3, r2, [r1]
 8001b6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8001b72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d1d9      	bne.n	8001b2e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d013      	beq.n	8001baa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b86:	4a7e      	ldr	r2, [pc, #504]	; (8001d80 <HAL_UART_IRQHandler+0x3e0>)
 8001b88:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff f81e 	bl	8000bd0 <HAL_DMA_Abort_IT>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d016      	beq.n	8001bc8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001ba4:	4610      	mov	r0, r2
 8001ba6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ba8:	e00e      	b.n	8001bc8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f000 f98a 	bl	8001ec4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001bb0:	e00a      	b.n	8001bc8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f000 f986 	bl	8001ec4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001bb8:	e006      	b.n	8001bc8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f000 f982 	bl	8001ec4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8001bc6:	e175      	b.n	8001eb4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001bc8:	bf00      	nop
    return;
 8001bca:	e173      	b.n	8001eb4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	f040 814f 	bne.w	8001e74 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8001bd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001bda:	f003 0310 	and.w	r3, r3, #16
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	f000 8148 	beq.w	8001e74 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8001be4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001be8:	f003 0310 	and.w	r3, r3, #16
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	f000 8141 	beq.w	8001e74 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	60bb      	str	r3, [r7, #8]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	60bb      	str	r3, [r7, #8]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	60bb      	str	r3, [r7, #8]
 8001c06:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	695b      	ldr	r3, [r3, #20]
 8001c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	f000 80b6 	beq.w	8001d84 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8001c24:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	f000 8145 	beq.w	8001eb8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001c32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001c36:	429a      	cmp	r2, r3
 8001c38:	f080 813e 	bcs.w	8001eb8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001c42:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c48:	699b      	ldr	r3, [r3, #24]
 8001c4a:	2b20      	cmp	r3, #32
 8001c4c:	f000 8088 	beq.w	8001d60 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	330c      	adds	r3, #12
 8001c56:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c5a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001c5e:	e853 3f00 	ldrex	r3, [r3]
 8001c62:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8001c66:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c6a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c6e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	330c      	adds	r3, #12
 8001c78:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001c7c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001c80:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c84:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8001c88:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001c8c:	e841 2300 	strex	r3, r2, [r1]
 8001c90:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8001c94:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d1d9      	bne.n	8001c50 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	3314      	adds	r3, #20
 8001ca2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ca4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ca6:	e853 3f00 	ldrex	r3, [r3]
 8001caa:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8001cac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001cae:	f023 0301 	bic.w	r3, r3, #1
 8001cb2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	3314      	adds	r3, #20
 8001cbc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001cc0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8001cc4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001cc6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001cc8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001ccc:	e841 2300 	strex	r3, r2, [r1]
 8001cd0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8001cd2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d1e1      	bne.n	8001c9c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	3314      	adds	r3, #20
 8001cde:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ce0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ce2:	e853 3f00 	ldrex	r3, [r3]
 8001ce6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8001ce8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001cee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	3314      	adds	r3, #20
 8001cf8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8001cfc:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001cfe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d00:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001d02:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001d04:	e841 2300 	strex	r3, r2, [r1]
 8001d08:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8001d0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d1e3      	bne.n	8001cd8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2220      	movs	r2, #32
 8001d14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	330c      	adds	r3, #12
 8001d24:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d28:	e853 3f00 	ldrex	r3, [r3]
 8001d2c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8001d2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d30:	f023 0310 	bic.w	r3, r3, #16
 8001d34:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	330c      	adds	r3, #12
 8001d3e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001d42:	65ba      	str	r2, [r7, #88]	; 0x58
 8001d44:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d46:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001d48:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001d4a:	e841 2300 	strex	r3, r2, [r1]
 8001d4e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8001d50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d1e3      	bne.n	8001d1e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7fe fefd 	bl	8000b5a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2202      	movs	r2, #2
 8001d64:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	4619      	mov	r1, r3
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f000 f8ad 	bl	8001ed6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8001d7c:	e09c      	b.n	8001eb8 <HAL_UART_IRQHandler+0x518>
 8001d7e:	bf00      	nop
 8001d80:	08002023 	.word	0x08002023
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	f000 808e 	beq.w	8001ebc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8001da0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	f000 8089 	beq.w	8001ebc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	330c      	adds	r3, #12
 8001db0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001db4:	e853 3f00 	ldrex	r3, [r3]
 8001db8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8001dba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dbc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001dc0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	330c      	adds	r3, #12
 8001dca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8001dce:	647a      	str	r2, [r7, #68]	; 0x44
 8001dd0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001dd2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001dd4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001dd6:	e841 2300 	strex	r3, r2, [r1]
 8001dda:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8001ddc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d1e3      	bne.n	8001daa <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	3314      	adds	r3, #20
 8001de8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dec:	e853 3f00 	ldrex	r3, [r3]
 8001df0:	623b      	str	r3, [r7, #32]
   return(result);
 8001df2:	6a3b      	ldr	r3, [r7, #32]
 8001df4:	f023 0301 	bic.w	r3, r3, #1
 8001df8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	3314      	adds	r3, #20
 8001e02:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001e06:	633a      	str	r2, [r7, #48]	; 0x30
 8001e08:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001e0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e0e:	e841 2300 	strex	r3, r2, [r1]
 8001e12:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8001e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d1e3      	bne.n	8001de2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2220      	movs	r2, #32
 8001e1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	330c      	adds	r3, #12
 8001e2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	e853 3f00 	ldrex	r3, [r3]
 8001e36:	60fb      	str	r3, [r7, #12]
   return(result);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	f023 0310 	bic.w	r3, r3, #16
 8001e3e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	330c      	adds	r3, #12
 8001e48:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8001e4c:	61fa      	str	r2, [r7, #28]
 8001e4e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e50:	69b9      	ldr	r1, [r7, #24]
 8001e52:	69fa      	ldr	r2, [r7, #28]
 8001e54:	e841 2300 	strex	r3, r2, [r1]
 8001e58:	617b      	str	r3, [r7, #20]
   return(result);
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d1e3      	bne.n	8001e28 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2202      	movs	r2, #2
 8001e64:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001e66:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f000 f832 	bl	8001ed6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8001e72:	e023      	b.n	8001ebc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001e74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001e78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d009      	beq.n	8001e94 <HAL_UART_IRQHandler+0x4f4>
 8001e80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001e84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d003      	beq.n	8001e94 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f000 f8dc 	bl	800204a <UART_Transmit_IT>
    return;
 8001e92:	e014      	b.n	8001ebe <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001e94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001e98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d00e      	beq.n	8001ebe <HAL_UART_IRQHandler+0x51e>
 8001ea0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001ea4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d008      	beq.n	8001ebe <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f000 f91b 	bl	80020e8 <UART_EndTransmit_IT>
    return;
 8001eb2:	e004      	b.n	8001ebe <HAL_UART_IRQHandler+0x51e>
    return;
 8001eb4:	bf00      	nop
 8001eb6:	e002      	b.n	8001ebe <HAL_UART_IRQHandler+0x51e>
      return;
 8001eb8:	bf00      	nop
 8001eba:	e000      	b.n	8001ebe <HAL_UART_IRQHandler+0x51e>
      return;
 8001ebc:	bf00      	nop
  }
}
 8001ebe:	37e8      	adds	r7, #232	; 0xe8
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001ecc:	bf00      	nop
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bc80      	pop	{r7}
 8001ed4:	4770      	bx	lr

08001ed6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	b083      	sub	sp, #12
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
 8001ede:	460b      	mov	r3, r1
 8001ee0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8001ee2:	bf00      	nop
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bc80      	pop	{r7}
 8001eea:	4770      	bx	lr

08001eec <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b085      	sub	sp, #20
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	60b9      	str	r1, [r7, #8]
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	68ba      	ldr	r2, [r7, #8]
 8001efe:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	88fa      	ldrh	r2, [r7, #6]
 8001f04:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	88fa      	ldrh	r2, [r7, #6]
 8001f0a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2222      	movs	r2, #34	; 0x22
 8001f16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	691b      	ldr	r3, [r3, #16]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d007      	beq.n	8001f32 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	68da      	ldr	r2, [r3, #12]
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f30:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	695a      	ldr	r2, [r3, #20]
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f042 0201 	orr.w	r2, r2, #1
 8001f40:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	68da      	ldr	r2, [r3, #12]
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f042 0220 	orr.w	r2, r2, #32
 8001f50:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8001f52:	2300      	movs	r3, #0
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3714      	adds	r7, #20
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bc80      	pop	{r7}
 8001f5c:	4770      	bx	lr

08001f5e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001f5e:	b480      	push	{r7}
 8001f60:	b095      	sub	sp, #84	; 0x54
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	330c      	adds	r3, #12
 8001f6c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f70:	e853 3f00 	ldrex	r3, [r3]
 8001f74:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8001f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f78:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001f7c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	330c      	adds	r3, #12
 8001f84:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001f86:	643a      	str	r2, [r7, #64]	; 0x40
 8001f88:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f8a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001f8c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001f8e:	e841 2300 	strex	r3, r2, [r1]
 8001f92:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8001f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d1e5      	bne.n	8001f66 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	3314      	adds	r3, #20
 8001fa0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fa2:	6a3b      	ldr	r3, [r7, #32]
 8001fa4:	e853 3f00 	ldrex	r3, [r3]
 8001fa8:	61fb      	str	r3, [r7, #28]
   return(result);
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	f023 0301 	bic.w	r3, r3, #1
 8001fb0:	64bb      	str	r3, [r7, #72]	; 0x48
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	3314      	adds	r3, #20
 8001fb8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001fba:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001fbc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fbe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001fc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fc2:	e841 2300 	strex	r3, r2, [r1]
 8001fc6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d1e5      	bne.n	8001f9a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d119      	bne.n	800200a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	330c      	adds	r3, #12
 8001fdc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	e853 3f00 	ldrex	r3, [r3]
 8001fe4:	60bb      	str	r3, [r7, #8]
   return(result);
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	f023 0310 	bic.w	r3, r3, #16
 8001fec:	647b      	str	r3, [r7, #68]	; 0x44
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	330c      	adds	r3, #12
 8001ff4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001ff6:	61ba      	str	r2, [r7, #24]
 8001ff8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ffa:	6979      	ldr	r1, [r7, #20]
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	e841 2300 	strex	r3, r2, [r1]
 8002002:	613b      	str	r3, [r7, #16]
   return(result);
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d1e5      	bne.n	8001fd6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2220      	movs	r2, #32
 800200e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002018:	bf00      	nop
 800201a:	3754      	adds	r7, #84	; 0x54
 800201c:	46bd      	mov	sp, r7
 800201e:	bc80      	pop	{r7}
 8002020:	4770      	bx	lr

08002022 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	b084      	sub	sp, #16
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2200      	movs	r2, #0
 8002034:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2200      	movs	r2, #0
 800203a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800203c:	68f8      	ldr	r0, [r7, #12]
 800203e:	f7ff ff41 	bl	8001ec4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002042:	bf00      	nop
 8002044:	3710      	adds	r7, #16
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}

0800204a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800204a:	b480      	push	{r7}
 800204c:	b085      	sub	sp, #20
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002058:	b2db      	uxtb	r3, r3
 800205a:	2b21      	cmp	r3, #33	; 0x21
 800205c:	d13e      	bne.n	80020dc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002066:	d114      	bne.n	8002092 <UART_Transmit_IT+0x48>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	691b      	ldr	r3, [r3, #16]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d110      	bne.n	8002092 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6a1b      	ldr	r3, [r3, #32]
 8002074:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	881b      	ldrh	r3, [r3, #0]
 800207a:	461a      	mov	r2, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002084:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6a1b      	ldr	r3, [r3, #32]
 800208a:	1c9a      	adds	r2, r3, #2
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	621a      	str	r2, [r3, #32]
 8002090:	e008      	b.n	80020a4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6a1b      	ldr	r3, [r3, #32]
 8002096:	1c59      	adds	r1, r3, #1
 8002098:	687a      	ldr	r2, [r7, #4]
 800209a:	6211      	str	r1, [r2, #32]
 800209c:	781a      	ldrb	r2, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	3b01      	subs	r3, #1
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	4619      	mov	r1, r3
 80020b2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d10f      	bne.n	80020d8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	68da      	ldr	r2, [r3, #12]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020c6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	68da      	ldr	r2, [r3, #12]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020d6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80020d8:	2300      	movs	r3, #0
 80020da:	e000      	b.n	80020de <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80020dc:	2302      	movs	r3, #2
  }
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3714      	adds	r7, #20
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bc80      	pop	{r7}
 80020e6:	4770      	bx	lr

080020e8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	68da      	ldr	r2, [r3, #12]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020fe:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2220      	movs	r2, #32
 8002104:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f7fe f95b 	bl	80003c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800210e:	2300      	movs	r3, #0
}
 8002110:	4618      	mov	r0, r3
 8002112:	3708      	adds	r7, #8
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}

08002118 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b08c      	sub	sp, #48	; 0x30
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002126:	b2db      	uxtb	r3, r3
 8002128:	2b22      	cmp	r3, #34	; 0x22
 800212a:	f040 80ae 	bne.w	800228a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002136:	d117      	bne.n	8002168 <UART_Receive_IT+0x50>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	691b      	ldr	r3, [r3, #16]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d113      	bne.n	8002168 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002140:	2300      	movs	r3, #0
 8002142:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002148:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	b29b      	uxth	r3, r3
 8002152:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002156:	b29a      	uxth	r2, r3
 8002158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800215a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002160:	1c9a      	adds	r2, r3, #2
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	629a      	str	r2, [r3, #40]	; 0x28
 8002166:	e026      	b.n	80021b6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800216c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800216e:	2300      	movs	r3, #0
 8002170:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800217a:	d007      	beq.n	800218c <UART_Receive_IT+0x74>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d10a      	bne.n	800219a <UART_Receive_IT+0x82>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	691b      	ldr	r3, [r3, #16]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d106      	bne.n	800219a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	b2da      	uxtb	r2, r3
 8002194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002196:	701a      	strb	r2, [r3, #0]
 8002198:	e008      	b.n	80021ac <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021a6:	b2da      	uxtb	r2, r3
 80021a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021aa:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b0:	1c5a      	adds	r2, r3, #1
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80021ba:	b29b      	uxth	r3, r3
 80021bc:	3b01      	subs	r3, #1
 80021be:	b29b      	uxth	r3, r3
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	4619      	mov	r1, r3
 80021c4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d15d      	bne.n	8002286 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	68da      	ldr	r2, [r3, #12]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f022 0220 	bic.w	r2, r2, #32
 80021d8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	68da      	ldr	r2, [r3, #12]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021e8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	695a      	ldr	r2, [r3, #20]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f022 0201 	bic.w	r2, r2, #1
 80021f8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2220      	movs	r2, #32
 80021fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220c:	2b01      	cmp	r3, #1
 800220e:	d135      	bne.n	800227c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	330c      	adds	r3, #12
 800221c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	e853 3f00 	ldrex	r3, [r3]
 8002224:	613b      	str	r3, [r7, #16]
   return(result);
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	f023 0310 	bic.w	r3, r3, #16
 800222c:	627b      	str	r3, [r7, #36]	; 0x24
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	330c      	adds	r3, #12
 8002234:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002236:	623a      	str	r2, [r7, #32]
 8002238:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800223a:	69f9      	ldr	r1, [r7, #28]
 800223c:	6a3a      	ldr	r2, [r7, #32]
 800223e:	e841 2300 	strex	r3, r2, [r1]
 8002242:	61bb      	str	r3, [r7, #24]
   return(result);
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d1e5      	bne.n	8002216 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0310 	and.w	r3, r3, #16
 8002254:	2b10      	cmp	r3, #16
 8002256:	d10a      	bne.n	800226e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002258:	2300      	movs	r3, #0
 800225a:	60fb      	str	r3, [r7, #12]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	60fb      	str	r3, [r7, #12]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	60fb      	str	r3, [r7, #12]
 800226c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002272:	4619      	mov	r1, r3
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	f7ff fe2e 	bl	8001ed6 <HAL_UARTEx_RxEventCallback>
 800227a:	e002      	b.n	8002282 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f7fe f8c1 	bl	8000404 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002282:	2300      	movs	r3, #0
 8002284:	e002      	b.n	800228c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002286:	2300      	movs	r3, #0
 8002288:	e000      	b.n	800228c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800228a:	2302      	movs	r3, #2
  }
}
 800228c:	4618      	mov	r0, r3
 800228e:	3730      	adds	r7, #48	; 0x30
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}

08002294 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	68da      	ldr	r2, [r3, #12]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	430a      	orrs	r2, r1
 80022b0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	689a      	ldr	r2, [r3, #8]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	691b      	ldr	r3, [r3, #16]
 80022ba:	431a      	orrs	r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	695b      	ldr	r3, [r3, #20]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80022ce:	f023 030c 	bic.w	r3, r3, #12
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	6812      	ldr	r2, [r2, #0]
 80022d6:	68b9      	ldr	r1, [r7, #8]
 80022d8:	430b      	orrs	r3, r1
 80022da:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	695b      	ldr	r3, [r3, #20]
 80022e2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	699a      	ldr	r2, [r3, #24]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	430a      	orrs	r2, r1
 80022f0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a2c      	ldr	r2, [pc, #176]	; (80023a8 <UART_SetConfig+0x114>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d103      	bne.n	8002304 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80022fc:	f7ff fa74 	bl	80017e8 <HAL_RCC_GetPCLK2Freq>
 8002300:	60f8      	str	r0, [r7, #12]
 8002302:	e002      	b.n	800230a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002304:	f7ff fa5c 	bl	80017c0 <HAL_RCC_GetPCLK1Freq>
 8002308:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800230a:	68fa      	ldr	r2, [r7, #12]
 800230c:	4613      	mov	r3, r2
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	4413      	add	r3, r2
 8002312:	009a      	lsls	r2, r3, #2
 8002314:	441a      	add	r2, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002320:	4a22      	ldr	r2, [pc, #136]	; (80023ac <UART_SetConfig+0x118>)
 8002322:	fba2 2303 	umull	r2, r3, r2, r3
 8002326:	095b      	lsrs	r3, r3, #5
 8002328:	0119      	lsls	r1, r3, #4
 800232a:	68fa      	ldr	r2, [r7, #12]
 800232c:	4613      	mov	r3, r2
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	4413      	add	r3, r2
 8002332:	009a      	lsls	r2, r3, #2
 8002334:	441a      	add	r2, r3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002340:	4b1a      	ldr	r3, [pc, #104]	; (80023ac <UART_SetConfig+0x118>)
 8002342:	fba3 0302 	umull	r0, r3, r3, r2
 8002346:	095b      	lsrs	r3, r3, #5
 8002348:	2064      	movs	r0, #100	; 0x64
 800234a:	fb00 f303 	mul.w	r3, r0, r3
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	011b      	lsls	r3, r3, #4
 8002352:	3332      	adds	r3, #50	; 0x32
 8002354:	4a15      	ldr	r2, [pc, #84]	; (80023ac <UART_SetConfig+0x118>)
 8002356:	fba2 2303 	umull	r2, r3, r2, r3
 800235a:	095b      	lsrs	r3, r3, #5
 800235c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002360:	4419      	add	r1, r3
 8002362:	68fa      	ldr	r2, [r7, #12]
 8002364:	4613      	mov	r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	4413      	add	r3, r2
 800236a:	009a      	lsls	r2, r3, #2
 800236c:	441a      	add	r2, r3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	fbb2 f2f3 	udiv	r2, r2, r3
 8002378:	4b0c      	ldr	r3, [pc, #48]	; (80023ac <UART_SetConfig+0x118>)
 800237a:	fba3 0302 	umull	r0, r3, r3, r2
 800237e:	095b      	lsrs	r3, r3, #5
 8002380:	2064      	movs	r0, #100	; 0x64
 8002382:	fb00 f303 	mul.w	r3, r0, r3
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	011b      	lsls	r3, r3, #4
 800238a:	3332      	adds	r3, #50	; 0x32
 800238c:	4a07      	ldr	r2, [pc, #28]	; (80023ac <UART_SetConfig+0x118>)
 800238e:	fba2 2303 	umull	r2, r3, r2, r3
 8002392:	095b      	lsrs	r3, r3, #5
 8002394:	f003 020f 	and.w	r2, r3, #15
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	440a      	add	r2, r1
 800239e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80023a0:	bf00      	nop
 80023a2:	3710      	adds	r7, #16
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	40013800 	.word	0x40013800
 80023ac:	51eb851f 	.word	0x51eb851f

080023b0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f103 0208 	add.w	r2, r3, #8
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f04f 32ff 	mov.w	r2, #4294967295
 80023c8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f103 0208 	add.w	r2, r3, #8
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f103 0208 	add.w	r2, r3, #8
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80023e4:	bf00      	nop
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bc80      	pop	{r7}
 80023ec:	4770      	bx	lr

080023ee <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80023ee:	b480      	push	{r7}
 80023f0:	b083      	sub	sp, #12
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80023fc:	bf00      	nop
 80023fe:	370c      	adds	r7, #12
 8002400:	46bd      	mov	sp, r7
 8002402:	bc80      	pop	{r7}
 8002404:	4770      	bx	lr

08002406 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002406:	b480      	push	{r7}
 8002408:	b085      	sub	sp, #20
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
 800240e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	68fa      	ldr	r2, [r7, #12]
 800241a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	689a      	ldr	r2, [r3, #8]
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	683a      	ldr	r2, [r7, #0]
 800242a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	683a      	ldr	r2, [r7, #0]
 8002430:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	1c5a      	adds	r2, r3, #1
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	601a      	str	r2, [r3, #0]
}
 8002442:	bf00      	nop
 8002444:	3714      	adds	r7, #20
 8002446:	46bd      	mov	sp, r7
 8002448:	bc80      	pop	{r7}
 800244a:	4770      	bx	lr

0800244c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800244c:	b480      	push	{r7}
 800244e:	b085      	sub	sp, #20
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002462:	d103      	bne.n	800246c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	691b      	ldr	r3, [r3, #16]
 8002468:	60fb      	str	r3, [r7, #12]
 800246a:	e00c      	b.n	8002486 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	3308      	adds	r3, #8
 8002470:	60fb      	str	r3, [r7, #12]
 8002472:	e002      	b.n	800247a <vListInsert+0x2e>
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	60fb      	str	r3, [r7, #12]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	68ba      	ldr	r2, [r7, #8]
 8002482:	429a      	cmp	r2, r3
 8002484:	d2f6      	bcs.n	8002474 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	685a      	ldr	r2, [r3, #4]
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	683a      	ldr	r2, [r7, #0]
 8002494:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	68fa      	ldr	r2, [r7, #12]
 800249a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	683a      	ldr	r2, [r7, #0]
 80024a0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	1c5a      	adds	r2, r3, #1
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	601a      	str	r2, [r3, #0]
}
 80024b2:	bf00      	nop
 80024b4:	3714      	adds	r7, #20
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bc80      	pop	{r7}
 80024ba:	4770      	bx	lr

080024bc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80024bc:	b480      	push	{r7}
 80024be:	b085      	sub	sp, #20
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	691b      	ldr	r3, [r3, #16]
 80024c8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	6892      	ldr	r2, [r2, #8]
 80024d2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	6852      	ldr	r2, [r2, #4]
 80024dc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d103      	bne.n	80024f0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	689a      	ldr	r2, [r3, #8]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2200      	movs	r2, #0
 80024f4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	1e5a      	subs	r2, r3, #1
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
}
 8002504:	4618      	mov	r0, r3
 8002506:	3714      	adds	r7, #20
 8002508:	46bd      	mov	sp, r7
 800250a:	bc80      	pop	{r7}
 800250c:	4770      	bx	lr
	...

08002510 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d10a      	bne.n	800253a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002528:	f383 8811 	msr	BASEPRI, r3
 800252c:	f3bf 8f6f 	isb	sy
 8002530:	f3bf 8f4f 	dsb	sy
 8002534:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002536:	bf00      	nop
 8002538:	e7fe      	b.n	8002538 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800253a:	f001 ff1f 	bl	800437c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002546:	68f9      	ldr	r1, [r7, #12]
 8002548:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800254a:	fb01 f303 	mul.w	r3, r1, r3
 800254e:	441a      	add	r2, r3
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2200      	movs	r2, #0
 8002558:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800256a:	3b01      	subs	r3, #1
 800256c:	68f9      	ldr	r1, [r7, #12]
 800256e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002570:	fb01 f303 	mul.w	r3, r1, r3
 8002574:	441a      	add	r2, r3
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	22ff      	movs	r2, #255	; 0xff
 800257e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	22ff      	movs	r2, #255	; 0xff
 8002586:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d114      	bne.n	80025ba <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	691b      	ldr	r3, [r3, #16]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d01a      	beq.n	80025ce <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	3310      	adds	r3, #16
 800259c:	4618      	mov	r0, r3
 800259e:	f001 f9f1 	bl	8003984 <xTaskRemoveFromEventList>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d012      	beq.n	80025ce <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80025a8:	4b0c      	ldr	r3, [pc, #48]	; (80025dc <xQueueGenericReset+0xcc>)
 80025aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025ae:	601a      	str	r2, [r3, #0]
 80025b0:	f3bf 8f4f 	dsb	sy
 80025b4:	f3bf 8f6f 	isb	sy
 80025b8:	e009      	b.n	80025ce <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	3310      	adds	r3, #16
 80025be:	4618      	mov	r0, r3
 80025c0:	f7ff fef6 	bl	80023b0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	3324      	adds	r3, #36	; 0x24
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7ff fef1 	bl	80023b0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80025ce:	f001 ff05 	bl	80043dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80025d2:	2301      	movs	r3, #1
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3710      	adds	r7, #16
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	e000ed04 	.word	0xe000ed04

080025e0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b08a      	sub	sp, #40	; 0x28
 80025e4:	af02      	add	r7, sp, #8
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	60b9      	str	r1, [r7, #8]
 80025ea:	4613      	mov	r3, r2
 80025ec:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d10a      	bne.n	800260a <xQueueGenericCreate+0x2a>
	__asm volatile
 80025f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025f8:	f383 8811 	msr	BASEPRI, r3
 80025fc:	f3bf 8f6f 	isb	sy
 8002600:	f3bf 8f4f 	dsb	sy
 8002604:	613b      	str	r3, [r7, #16]
}
 8002606:	bf00      	nop
 8002608:	e7fe      	b.n	8002608 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d102      	bne.n	8002616 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002610:	2300      	movs	r3, #0
 8002612:	61fb      	str	r3, [r7, #28]
 8002614:	e004      	b.n	8002620 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	68ba      	ldr	r2, [r7, #8]
 800261a:	fb02 f303 	mul.w	r3, r2, r3
 800261e:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	3348      	adds	r3, #72	; 0x48
 8002624:	4618      	mov	r0, r3
 8002626:	f001 ffa9 	bl	800457c <pvPortMalloc>
 800262a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d00f      	beq.n	8002652 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	3348      	adds	r3, #72	; 0x48
 8002636:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	2200      	movs	r2, #0
 800263c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002640:	79fa      	ldrb	r2, [r7, #7]
 8002642:	69bb      	ldr	r3, [r7, #24]
 8002644:	9300      	str	r3, [sp, #0]
 8002646:	4613      	mov	r3, r2
 8002648:	697a      	ldr	r2, [r7, #20]
 800264a:	68b9      	ldr	r1, [r7, #8]
 800264c:	68f8      	ldr	r0, [r7, #12]
 800264e:	f000 f805 	bl	800265c <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002652:	69bb      	ldr	r3, [r7, #24]
	}
 8002654:	4618      	mov	r0, r3
 8002656:	3720      	adds	r7, #32
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}

0800265c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	60b9      	str	r1, [r7, #8]
 8002666:	607a      	str	r2, [r7, #4]
 8002668:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d103      	bne.n	8002678 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	69ba      	ldr	r2, [r7, #24]
 8002674:	601a      	str	r2, [r3, #0]
 8002676:	e002      	b.n	800267e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	68fa      	ldr	r2, [r7, #12]
 8002682:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	68ba      	ldr	r2, [r7, #8]
 8002688:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800268a:	2101      	movs	r1, #1
 800268c:	69b8      	ldr	r0, [r7, #24]
 800268e:	f7ff ff3f 	bl	8002510 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002692:	bf00      	nop
 8002694:	3710      	adds	r7, #16
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
	...

0800269c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b08e      	sub	sp, #56	; 0x38
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	60f8      	str	r0, [r7, #12]
 80026a4:	60b9      	str	r1, [r7, #8]
 80026a6:	607a      	str	r2, [r7, #4]
 80026a8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80026aa:	2300      	movs	r3, #0
 80026ac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80026b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d10a      	bne.n	80026ce <xQueueGenericSend+0x32>
	__asm volatile
 80026b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026bc:	f383 8811 	msr	BASEPRI, r3
 80026c0:	f3bf 8f6f 	isb	sy
 80026c4:	f3bf 8f4f 	dsb	sy
 80026c8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80026ca:	bf00      	nop
 80026cc:	e7fe      	b.n	80026cc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d103      	bne.n	80026dc <xQueueGenericSend+0x40>
 80026d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d101      	bne.n	80026e0 <xQueueGenericSend+0x44>
 80026dc:	2301      	movs	r3, #1
 80026de:	e000      	b.n	80026e2 <xQueueGenericSend+0x46>
 80026e0:	2300      	movs	r3, #0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d10a      	bne.n	80026fc <xQueueGenericSend+0x60>
	__asm volatile
 80026e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026ea:	f383 8811 	msr	BASEPRI, r3
 80026ee:	f3bf 8f6f 	isb	sy
 80026f2:	f3bf 8f4f 	dsb	sy
 80026f6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80026f8:	bf00      	nop
 80026fa:	e7fe      	b.n	80026fa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d103      	bne.n	800270a <xQueueGenericSend+0x6e>
 8002702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002706:	2b01      	cmp	r3, #1
 8002708:	d101      	bne.n	800270e <xQueueGenericSend+0x72>
 800270a:	2301      	movs	r3, #1
 800270c:	e000      	b.n	8002710 <xQueueGenericSend+0x74>
 800270e:	2300      	movs	r3, #0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d10a      	bne.n	800272a <xQueueGenericSend+0x8e>
	__asm volatile
 8002714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002718:	f383 8811 	msr	BASEPRI, r3
 800271c:	f3bf 8f6f 	isb	sy
 8002720:	f3bf 8f4f 	dsb	sy
 8002724:	623b      	str	r3, [r7, #32]
}
 8002726:	bf00      	nop
 8002728:	e7fe      	b.n	8002728 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800272a:	f001 faef 	bl	8003d0c <xTaskGetSchedulerState>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d102      	bne.n	800273a <xQueueGenericSend+0x9e>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d101      	bne.n	800273e <xQueueGenericSend+0xa2>
 800273a:	2301      	movs	r3, #1
 800273c:	e000      	b.n	8002740 <xQueueGenericSend+0xa4>
 800273e:	2300      	movs	r3, #0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d10a      	bne.n	800275a <xQueueGenericSend+0xbe>
	__asm volatile
 8002744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002748:	f383 8811 	msr	BASEPRI, r3
 800274c:	f3bf 8f6f 	isb	sy
 8002750:	f3bf 8f4f 	dsb	sy
 8002754:	61fb      	str	r3, [r7, #28]
}
 8002756:	bf00      	nop
 8002758:	e7fe      	b.n	8002758 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800275a:	f001 fe0f 	bl	800437c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800275e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002760:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002766:	429a      	cmp	r2, r3
 8002768:	d302      	bcc.n	8002770 <xQueueGenericSend+0xd4>
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	2b02      	cmp	r3, #2
 800276e:	d129      	bne.n	80027c4 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002770:	683a      	ldr	r2, [r7, #0]
 8002772:	68b9      	ldr	r1, [r7, #8]
 8002774:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002776:	f000 fbb8 	bl	8002eea <prvCopyDataToQueue>
 800277a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800277c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800277e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002780:	2b00      	cmp	r3, #0
 8002782:	d010      	beq.n	80027a6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002786:	3324      	adds	r3, #36	; 0x24
 8002788:	4618      	mov	r0, r3
 800278a:	f001 f8fb 	bl	8003984 <xTaskRemoveFromEventList>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d013      	beq.n	80027bc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002794:	4b3f      	ldr	r3, [pc, #252]	; (8002894 <xQueueGenericSend+0x1f8>)
 8002796:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800279a:	601a      	str	r2, [r3, #0]
 800279c:	f3bf 8f4f 	dsb	sy
 80027a0:	f3bf 8f6f 	isb	sy
 80027a4:	e00a      	b.n	80027bc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80027a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d007      	beq.n	80027bc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80027ac:	4b39      	ldr	r3, [pc, #228]	; (8002894 <xQueueGenericSend+0x1f8>)
 80027ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027b2:	601a      	str	r2, [r3, #0]
 80027b4:	f3bf 8f4f 	dsb	sy
 80027b8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80027bc:	f001 fe0e 	bl	80043dc <vPortExitCritical>
				return pdPASS;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e063      	b.n	800288c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d103      	bne.n	80027d2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80027ca:	f001 fe07 	bl	80043dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80027ce:	2300      	movs	r3, #0
 80027d0:	e05c      	b.n	800288c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80027d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d106      	bne.n	80027e6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80027d8:	f107 0314 	add.w	r3, r7, #20
 80027dc:	4618      	mov	r0, r3
 80027de:	f001 f933 	bl	8003a48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80027e2:	2301      	movs	r3, #1
 80027e4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80027e6:	f001 fdf9 	bl	80043dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80027ea:	f000 fecd 	bl	8003588 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80027ee:	f001 fdc5 	bl	800437c <vPortEnterCritical>
 80027f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80027f8:	b25b      	sxtb	r3, r3
 80027fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027fe:	d103      	bne.n	8002808 <xQueueGenericSend+0x16c>
 8002800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002802:	2200      	movs	r2, #0
 8002804:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800280a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800280e:	b25b      	sxtb	r3, r3
 8002810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002814:	d103      	bne.n	800281e <xQueueGenericSend+0x182>
 8002816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002818:	2200      	movs	r2, #0
 800281a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800281e:	f001 fddd 	bl	80043dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002822:	1d3a      	adds	r2, r7, #4
 8002824:	f107 0314 	add.w	r3, r7, #20
 8002828:	4611      	mov	r1, r2
 800282a:	4618      	mov	r0, r3
 800282c:	f001 f922 	bl	8003a74 <xTaskCheckForTimeOut>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d124      	bne.n	8002880 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002836:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002838:	f000 fc4f 	bl	80030da <prvIsQueueFull>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d018      	beq.n	8002874 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002844:	3310      	adds	r3, #16
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	4611      	mov	r1, r2
 800284a:	4618      	mov	r0, r3
 800284c:	f001 f876 	bl	800393c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002850:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002852:	f000 fbda 	bl	800300a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002856:	f000 fea5 	bl	80035a4 <xTaskResumeAll>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	f47f af7c 	bne.w	800275a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002862:	4b0c      	ldr	r3, [pc, #48]	; (8002894 <xQueueGenericSend+0x1f8>)
 8002864:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002868:	601a      	str	r2, [r3, #0]
 800286a:	f3bf 8f4f 	dsb	sy
 800286e:	f3bf 8f6f 	isb	sy
 8002872:	e772      	b.n	800275a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002874:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002876:	f000 fbc8 	bl	800300a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800287a:	f000 fe93 	bl	80035a4 <xTaskResumeAll>
 800287e:	e76c      	b.n	800275a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002880:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002882:	f000 fbc2 	bl	800300a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002886:	f000 fe8d 	bl	80035a4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800288a:	2300      	movs	r3, #0
		}
	}
}
 800288c:	4618      	mov	r0, r3
 800288e:	3738      	adds	r7, #56	; 0x38
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	e000ed04 	.word	0xe000ed04

08002898 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b08e      	sub	sp, #56	; 0x38
 800289c:	af00      	add	r7, sp, #0
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	60b9      	str	r1, [r7, #8]
 80028a2:	607a      	str	r2, [r7, #4]
 80028a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80028aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d10a      	bne.n	80028c6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80028b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028b4:	f383 8811 	msr	BASEPRI, r3
 80028b8:	f3bf 8f6f 	isb	sy
 80028bc:	f3bf 8f4f 	dsb	sy
 80028c0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80028c2:	bf00      	nop
 80028c4:	e7fe      	b.n	80028c4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d103      	bne.n	80028d4 <xQueueGenericSendFromISR+0x3c>
 80028cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d101      	bne.n	80028d8 <xQueueGenericSendFromISR+0x40>
 80028d4:	2301      	movs	r3, #1
 80028d6:	e000      	b.n	80028da <xQueueGenericSendFromISR+0x42>
 80028d8:	2300      	movs	r3, #0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d10a      	bne.n	80028f4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80028de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028e2:	f383 8811 	msr	BASEPRI, r3
 80028e6:	f3bf 8f6f 	isb	sy
 80028ea:	f3bf 8f4f 	dsb	sy
 80028ee:	623b      	str	r3, [r7, #32]
}
 80028f0:	bf00      	nop
 80028f2:	e7fe      	b.n	80028f2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d103      	bne.n	8002902 <xQueueGenericSendFromISR+0x6a>
 80028fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d101      	bne.n	8002906 <xQueueGenericSendFromISR+0x6e>
 8002902:	2301      	movs	r3, #1
 8002904:	e000      	b.n	8002908 <xQueueGenericSendFromISR+0x70>
 8002906:	2300      	movs	r3, #0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d10a      	bne.n	8002922 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800290c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002910:	f383 8811 	msr	BASEPRI, r3
 8002914:	f3bf 8f6f 	isb	sy
 8002918:	f3bf 8f4f 	dsb	sy
 800291c:	61fb      	str	r3, [r7, #28]
}
 800291e:	bf00      	nop
 8002920:	e7fe      	b.n	8002920 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002922:	f001 fded 	bl	8004500 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002926:	f3ef 8211 	mrs	r2, BASEPRI
 800292a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800292e:	f383 8811 	msr	BASEPRI, r3
 8002932:	f3bf 8f6f 	isb	sy
 8002936:	f3bf 8f4f 	dsb	sy
 800293a:	61ba      	str	r2, [r7, #24]
 800293c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800293e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002940:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002944:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800294a:	429a      	cmp	r2, r3
 800294c:	d302      	bcc.n	8002954 <xQueueGenericSendFromISR+0xbc>
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	2b02      	cmp	r3, #2
 8002952:	d12c      	bne.n	80029ae <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002956:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800295a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800295e:	683a      	ldr	r2, [r7, #0]
 8002960:	68b9      	ldr	r1, [r7, #8]
 8002962:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002964:	f000 fac1 	bl	8002eea <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002968:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800296c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002970:	d112      	bne.n	8002998 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002976:	2b00      	cmp	r3, #0
 8002978:	d016      	beq.n	80029a8 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800297a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800297c:	3324      	adds	r3, #36	; 0x24
 800297e:	4618      	mov	r0, r3
 8002980:	f001 f800 	bl	8003984 <xTaskRemoveFromEventList>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d00e      	beq.n	80029a8 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d00b      	beq.n	80029a8 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	601a      	str	r2, [r3, #0]
 8002996:	e007      	b.n	80029a8 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002998:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800299c:	3301      	adds	r3, #1
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	b25a      	sxtb	r2, r3
 80029a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80029a8:	2301      	movs	r3, #1
 80029aa:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80029ac:	e001      	b.n	80029b2 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80029ae:	2300      	movs	r3, #0
 80029b0:	637b      	str	r3, [r7, #52]	; 0x34
 80029b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029b4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80029bc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80029be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3738      	adds	r7, #56	; 0x38
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b08e      	sub	sp, #56	; 0x38
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80029d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d10a      	bne.n	80029f2 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80029dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029e0:	f383 8811 	msr	BASEPRI, r3
 80029e4:	f3bf 8f6f 	isb	sy
 80029e8:	f3bf 8f4f 	dsb	sy
 80029ec:	623b      	str	r3, [r7, #32]
}
 80029ee:	bf00      	nop
 80029f0:	e7fe      	b.n	80029f0 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80029f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d00a      	beq.n	8002a10 <xQueueGiveFromISR+0x48>
	__asm volatile
 80029fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029fe:	f383 8811 	msr	BASEPRI, r3
 8002a02:	f3bf 8f6f 	isb	sy
 8002a06:	f3bf 8f4f 	dsb	sy
 8002a0a:	61fb      	str	r3, [r7, #28]
}
 8002a0c:	bf00      	nop
 8002a0e:	e7fe      	b.n	8002a0e <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8002a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d103      	bne.n	8002a20 <xQueueGiveFromISR+0x58>
 8002a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d101      	bne.n	8002a24 <xQueueGiveFromISR+0x5c>
 8002a20:	2301      	movs	r3, #1
 8002a22:	e000      	b.n	8002a26 <xQueueGiveFromISR+0x5e>
 8002a24:	2300      	movs	r3, #0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d10a      	bne.n	8002a40 <xQueueGiveFromISR+0x78>
	__asm volatile
 8002a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a2e:	f383 8811 	msr	BASEPRI, r3
 8002a32:	f3bf 8f6f 	isb	sy
 8002a36:	f3bf 8f4f 	dsb	sy
 8002a3a:	61bb      	str	r3, [r7, #24]
}
 8002a3c:	bf00      	nop
 8002a3e:	e7fe      	b.n	8002a3e <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002a40:	f001 fd5e 	bl	8004500 <vPortValidateInterruptPriority>
	__asm volatile
 8002a44:	f3ef 8211 	mrs	r2, BASEPRI
 8002a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a4c:	f383 8811 	msr	BASEPRI, r3
 8002a50:	f3bf 8f6f 	isb	sy
 8002a54:	f3bf 8f4f 	dsb	sy
 8002a58:	617a      	str	r2, [r7, #20]
 8002a5a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8002a5c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a64:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8002a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d22b      	bcs.n	8002ac8 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a7c:	1c5a      	adds	r2, r3, #1
 8002a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a80:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002a82:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a8a:	d112      	bne.n	8002ab2 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d016      	beq.n	8002ac2 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a96:	3324      	adds	r3, #36	; 0x24
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f000 ff73 	bl	8003984 <xTaskRemoveFromEventList>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d00e      	beq.n	8002ac2 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d00b      	beq.n	8002ac2 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	2201      	movs	r2, #1
 8002aae:	601a      	str	r2, [r3, #0]
 8002ab0:	e007      	b.n	8002ac2 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002ab2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	b25a      	sxtb	r2, r3
 8002abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002abe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	637b      	str	r3, [r7, #52]	; 0x34
 8002ac6:	e001      	b.n	8002acc <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	637b      	str	r3, [r7, #52]	; 0x34
 8002acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ace:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f383 8811 	msr	BASEPRI, r3
}
 8002ad6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002ad8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3738      	adds	r7, #56	; 0x38
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
	...

08002ae4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b08c      	sub	sp, #48	; 0x30
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002af0:	2300      	movs	r3, #0
 8002af2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d10a      	bne.n	8002b14 <xQueueReceive+0x30>
	__asm volatile
 8002afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b02:	f383 8811 	msr	BASEPRI, r3
 8002b06:	f3bf 8f6f 	isb	sy
 8002b0a:	f3bf 8f4f 	dsb	sy
 8002b0e:	623b      	str	r3, [r7, #32]
}
 8002b10:	bf00      	nop
 8002b12:	e7fe      	b.n	8002b12 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d103      	bne.n	8002b22 <xQueueReceive+0x3e>
 8002b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d101      	bne.n	8002b26 <xQueueReceive+0x42>
 8002b22:	2301      	movs	r3, #1
 8002b24:	e000      	b.n	8002b28 <xQueueReceive+0x44>
 8002b26:	2300      	movs	r3, #0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d10a      	bne.n	8002b42 <xQueueReceive+0x5e>
	__asm volatile
 8002b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b30:	f383 8811 	msr	BASEPRI, r3
 8002b34:	f3bf 8f6f 	isb	sy
 8002b38:	f3bf 8f4f 	dsb	sy
 8002b3c:	61fb      	str	r3, [r7, #28]
}
 8002b3e:	bf00      	nop
 8002b40:	e7fe      	b.n	8002b40 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002b42:	f001 f8e3 	bl	8003d0c <xTaskGetSchedulerState>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d102      	bne.n	8002b52 <xQueueReceive+0x6e>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d101      	bne.n	8002b56 <xQueueReceive+0x72>
 8002b52:	2301      	movs	r3, #1
 8002b54:	e000      	b.n	8002b58 <xQueueReceive+0x74>
 8002b56:	2300      	movs	r3, #0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d10a      	bne.n	8002b72 <xQueueReceive+0x8e>
	__asm volatile
 8002b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b60:	f383 8811 	msr	BASEPRI, r3
 8002b64:	f3bf 8f6f 	isb	sy
 8002b68:	f3bf 8f4f 	dsb	sy
 8002b6c:	61bb      	str	r3, [r7, #24]
}
 8002b6e:	bf00      	nop
 8002b70:	e7fe      	b.n	8002b70 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002b72:	f001 fc03 	bl	800437c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b7a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d01f      	beq.n	8002bc2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002b82:	68b9      	ldr	r1, [r7, #8]
 8002b84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b86:	f000 fa1a 	bl	8002fbe <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8c:	1e5a      	subs	r2, r3, #1
 8002b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b90:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b94:	691b      	ldr	r3, [r3, #16]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d00f      	beq.n	8002bba <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b9c:	3310      	adds	r3, #16
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f000 fef0 	bl	8003984 <xTaskRemoveFromEventList>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d007      	beq.n	8002bba <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002baa:	4b3d      	ldr	r3, [pc, #244]	; (8002ca0 <xQueueReceive+0x1bc>)
 8002bac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bb0:	601a      	str	r2, [r3, #0]
 8002bb2:	f3bf 8f4f 	dsb	sy
 8002bb6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002bba:	f001 fc0f 	bl	80043dc <vPortExitCritical>
				return pdPASS;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e069      	b.n	8002c96 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d103      	bne.n	8002bd0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002bc8:	f001 fc08 	bl	80043dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	e062      	b.n	8002c96 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d106      	bne.n	8002be4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002bd6:	f107 0310 	add.w	r3, r7, #16
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f000 ff34 	bl	8003a48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002be0:	2301      	movs	r3, #1
 8002be2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002be4:	f001 fbfa 	bl	80043dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002be8:	f000 fcce 	bl	8003588 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002bec:	f001 fbc6 	bl	800437c <vPortEnterCritical>
 8002bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bf2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002bf6:	b25b      	sxtb	r3, r3
 8002bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bfc:	d103      	bne.n	8002c06 <xQueueReceive+0x122>
 8002bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c00:	2200      	movs	r2, #0
 8002c02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c0c:	b25b      	sxtb	r3, r3
 8002c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c12:	d103      	bne.n	8002c1c <xQueueReceive+0x138>
 8002c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c16:	2200      	movs	r2, #0
 8002c18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c1c:	f001 fbde 	bl	80043dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002c20:	1d3a      	adds	r2, r7, #4
 8002c22:	f107 0310 	add.w	r3, r7, #16
 8002c26:	4611      	mov	r1, r2
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f000 ff23 	bl	8003a74 <xTaskCheckForTimeOut>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d123      	bne.n	8002c7c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002c34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c36:	f000 fa3a 	bl	80030ae <prvIsQueueEmpty>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d017      	beq.n	8002c70 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c42:	3324      	adds	r3, #36	; 0x24
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	4611      	mov	r1, r2
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f000 fe77 	bl	800393c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002c4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c50:	f000 f9db 	bl	800300a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002c54:	f000 fca6 	bl	80035a4 <xTaskResumeAll>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d189      	bne.n	8002b72 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002c5e:	4b10      	ldr	r3, [pc, #64]	; (8002ca0 <xQueueReceive+0x1bc>)
 8002c60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c64:	601a      	str	r2, [r3, #0]
 8002c66:	f3bf 8f4f 	dsb	sy
 8002c6a:	f3bf 8f6f 	isb	sy
 8002c6e:	e780      	b.n	8002b72 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002c70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c72:	f000 f9ca 	bl	800300a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002c76:	f000 fc95 	bl	80035a4 <xTaskResumeAll>
 8002c7a:	e77a      	b.n	8002b72 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002c7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c7e:	f000 f9c4 	bl	800300a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002c82:	f000 fc8f 	bl	80035a4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002c86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c88:	f000 fa11 	bl	80030ae <prvIsQueueEmpty>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	f43f af6f 	beq.w	8002b72 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002c94:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3730      	adds	r7, #48	; 0x30
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	e000ed04 	.word	0xe000ed04

08002ca4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b08e      	sub	sp, #56	; 0x38
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d10a      	bne.n	8002cd6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8002cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cc4:	f383 8811 	msr	BASEPRI, r3
 8002cc8:	f3bf 8f6f 	isb	sy
 8002ccc:	f3bf 8f4f 	dsb	sy
 8002cd0:	623b      	str	r3, [r7, #32]
}
 8002cd2:	bf00      	nop
 8002cd4:	e7fe      	b.n	8002cd4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d00a      	beq.n	8002cf4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8002cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ce2:	f383 8811 	msr	BASEPRI, r3
 8002ce6:	f3bf 8f6f 	isb	sy
 8002cea:	f3bf 8f4f 	dsb	sy
 8002cee:	61fb      	str	r3, [r7, #28]
}
 8002cf0:	bf00      	nop
 8002cf2:	e7fe      	b.n	8002cf2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002cf4:	f001 f80a 	bl	8003d0c <xTaskGetSchedulerState>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d102      	bne.n	8002d04 <xQueueSemaphoreTake+0x60>
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d101      	bne.n	8002d08 <xQueueSemaphoreTake+0x64>
 8002d04:	2301      	movs	r3, #1
 8002d06:	e000      	b.n	8002d0a <xQueueSemaphoreTake+0x66>
 8002d08:	2300      	movs	r3, #0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d10a      	bne.n	8002d24 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8002d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d12:	f383 8811 	msr	BASEPRI, r3
 8002d16:	f3bf 8f6f 	isb	sy
 8002d1a:	f3bf 8f4f 	dsb	sy
 8002d1e:	61bb      	str	r3, [r7, #24]
}
 8002d20:	bf00      	nop
 8002d22:	e7fe      	b.n	8002d22 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002d24:	f001 fb2a 	bl	800437c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d2c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d024      	beq.n	8002d7e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d36:	1e5a      	subs	r2, r3, #1
 8002d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d3a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d104      	bne.n	8002d4e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8002d44:	f001 f9ac 	bl	80040a0 <pvTaskIncrementMutexHeldCount>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d4c:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d00f      	beq.n	8002d76 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d58:	3310      	adds	r3, #16
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f000 fe12 	bl	8003984 <xTaskRemoveFromEventList>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d007      	beq.n	8002d76 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002d66:	4b54      	ldr	r3, [pc, #336]	; (8002eb8 <xQueueSemaphoreTake+0x214>)
 8002d68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d6c:	601a      	str	r2, [r3, #0]
 8002d6e:	f3bf 8f4f 	dsb	sy
 8002d72:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002d76:	f001 fb31 	bl	80043dc <vPortExitCritical>
				return pdPASS;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e097      	b.n	8002eae <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d111      	bne.n	8002da8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8002d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d00a      	beq.n	8002da0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8002d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d8e:	f383 8811 	msr	BASEPRI, r3
 8002d92:	f3bf 8f6f 	isb	sy
 8002d96:	f3bf 8f4f 	dsb	sy
 8002d9a:	617b      	str	r3, [r7, #20]
}
 8002d9c:	bf00      	nop
 8002d9e:	e7fe      	b.n	8002d9e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8002da0:	f001 fb1c 	bl	80043dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002da4:	2300      	movs	r3, #0
 8002da6:	e082      	b.n	8002eae <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002da8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d106      	bne.n	8002dbc <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002dae:	f107 030c 	add.w	r3, r7, #12
 8002db2:	4618      	mov	r0, r3
 8002db4:	f000 fe48 	bl	8003a48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002db8:	2301      	movs	r3, #1
 8002dba:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002dbc:	f001 fb0e 	bl	80043dc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002dc0:	f000 fbe2 	bl	8003588 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002dc4:	f001 fada 	bl	800437c <vPortEnterCritical>
 8002dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002dce:	b25b      	sxtb	r3, r3
 8002dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dd4:	d103      	bne.n	8002dde <xQueueSemaphoreTake+0x13a>
 8002dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002de4:	b25b      	sxtb	r3, r3
 8002de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dea:	d103      	bne.n	8002df4 <xQueueSemaphoreTake+0x150>
 8002dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002df4:	f001 faf2 	bl	80043dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002df8:	463a      	mov	r2, r7
 8002dfa:	f107 030c 	add.w	r3, r7, #12
 8002dfe:	4611      	mov	r1, r2
 8002e00:	4618      	mov	r0, r3
 8002e02:	f000 fe37 	bl	8003a74 <xTaskCheckForTimeOut>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d132      	bne.n	8002e72 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002e0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002e0e:	f000 f94e 	bl	80030ae <prvIsQueueEmpty>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d026      	beq.n	8002e66 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d109      	bne.n	8002e34 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8002e20:	f001 faac 	bl	800437c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8002e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f000 ff8d 	bl	8003d48 <xTaskPriorityInherit>
 8002e2e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8002e30:	f001 fad4 	bl	80043dc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e36:	3324      	adds	r3, #36	; 0x24
 8002e38:	683a      	ldr	r2, [r7, #0]
 8002e3a:	4611      	mov	r1, r2
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f000 fd7d 	bl	800393c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002e42:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002e44:	f000 f8e1 	bl	800300a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002e48:	f000 fbac 	bl	80035a4 <xTaskResumeAll>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	f47f af68 	bne.w	8002d24 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8002e54:	4b18      	ldr	r3, [pc, #96]	; (8002eb8 <xQueueSemaphoreTake+0x214>)
 8002e56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e5a:	601a      	str	r2, [r3, #0]
 8002e5c:	f3bf 8f4f 	dsb	sy
 8002e60:	f3bf 8f6f 	isb	sy
 8002e64:	e75e      	b.n	8002d24 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8002e66:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002e68:	f000 f8cf 	bl	800300a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002e6c:	f000 fb9a 	bl	80035a4 <xTaskResumeAll>
 8002e70:	e758      	b.n	8002d24 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8002e72:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002e74:	f000 f8c9 	bl	800300a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002e78:	f000 fb94 	bl	80035a4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002e7c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002e7e:	f000 f916 	bl	80030ae <prvIsQueueEmpty>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	f43f af4d 	beq.w	8002d24 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8002e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d00d      	beq.n	8002eac <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8002e90:	f001 fa74 	bl	800437c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8002e94:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002e96:	f000 f811 	bl	8002ebc <prvGetDisinheritPriorityAfterTimeout>
 8002e9a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8002e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f001 f85c 	bl	8003f60 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8002ea8:	f001 fa98 	bl	80043dc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002eac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3738      	adds	r7, #56	; 0x38
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	e000ed04 	.word	0xe000ed04

08002ebc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b085      	sub	sp, #20
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d006      	beq.n	8002eda <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f1c3 0307 	rsb	r3, r3, #7
 8002ed6:	60fb      	str	r3, [r7, #12]
 8002ed8:	e001      	b.n	8002ede <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8002eda:	2300      	movs	r3, #0
 8002edc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8002ede:	68fb      	ldr	r3, [r7, #12]
	}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3714      	adds	r7, #20
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bc80      	pop	{r7}
 8002ee8:	4770      	bx	lr

08002eea <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002eea:	b580      	push	{r7, lr}
 8002eec:	b086      	sub	sp, #24
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	60f8      	str	r0, [r7, #12]
 8002ef2:	60b9      	str	r1, [r7, #8]
 8002ef4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002efe:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d10d      	bne.n	8002f24 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d14d      	bne.n	8002fac <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	4618      	mov	r0, r3
 8002f16:	f000 ff9d 	bl	8003e54 <xTaskPriorityDisinherit>
 8002f1a:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	605a      	str	r2, [r3, #4]
 8002f22:	e043      	b.n	8002fac <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d119      	bne.n	8002f5e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6898      	ldr	r0, [r3, #8]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f32:	461a      	mov	r2, r3
 8002f34:	68b9      	ldr	r1, [r7, #8]
 8002f36:	f001 fd8b 	bl	8004a50 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	689a      	ldr	r2, [r3, #8]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f42:	441a      	add	r2, r3
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	689a      	ldr	r2, [r3, #8]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d32b      	bcc.n	8002fac <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	609a      	str	r2, [r3, #8]
 8002f5c:	e026      	b.n	8002fac <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	68d8      	ldr	r0, [r3, #12]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f66:	461a      	mov	r2, r3
 8002f68:	68b9      	ldr	r1, [r7, #8]
 8002f6a:	f001 fd71 	bl	8004a50 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	68da      	ldr	r2, [r3, #12]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f76:	425b      	negs	r3, r3
 8002f78:	441a      	add	r2, r3
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	68da      	ldr	r2, [r3, #12]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d207      	bcs.n	8002f9a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	685a      	ldr	r2, [r3, #4]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f92:	425b      	negs	r3, r3
 8002f94:	441a      	add	r2, r3
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d105      	bne.n	8002fac <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d002      	beq.n	8002fac <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	3b01      	subs	r3, #1
 8002faa:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	1c5a      	adds	r2, r3, #1
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002fb4:	697b      	ldr	r3, [r7, #20]
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3718      	adds	r7, #24
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}

08002fbe <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	b082      	sub	sp, #8
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
 8002fc6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d018      	beq.n	8003002 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	68da      	ldr	r2, [r3, #12]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd8:	441a      	add	r2, r3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	68da      	ldr	r2, [r3, #12]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d303      	bcc.n	8002ff2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	68d9      	ldr	r1, [r3, #12]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	6838      	ldr	r0, [r7, #0]
 8002ffe:	f001 fd27 	bl	8004a50 <memcpy>
	}
}
 8003002:	bf00      	nop
 8003004:	3708      	adds	r7, #8
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}

0800300a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800300a:	b580      	push	{r7, lr}
 800300c:	b084      	sub	sp, #16
 800300e:	af00      	add	r7, sp, #0
 8003010:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003012:	f001 f9b3 	bl	800437c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800301c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800301e:	e011      	b.n	8003044 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003024:	2b00      	cmp	r3, #0
 8003026:	d012      	beq.n	800304e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	3324      	adds	r3, #36	; 0x24
 800302c:	4618      	mov	r0, r3
 800302e:	f000 fca9 	bl	8003984 <xTaskRemoveFromEventList>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d001      	beq.n	800303c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003038:	f000 fd7e 	bl	8003b38 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800303c:	7bfb      	ldrb	r3, [r7, #15]
 800303e:	3b01      	subs	r3, #1
 8003040:	b2db      	uxtb	r3, r3
 8003042:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003044:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003048:	2b00      	cmp	r3, #0
 800304a:	dce9      	bgt.n	8003020 <prvUnlockQueue+0x16>
 800304c:	e000      	b.n	8003050 <prvUnlockQueue+0x46>
					break;
 800304e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	22ff      	movs	r2, #255	; 0xff
 8003054:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003058:	f001 f9c0 	bl	80043dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800305c:	f001 f98e 	bl	800437c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003066:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003068:	e011      	b.n	800308e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	691b      	ldr	r3, [r3, #16]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d012      	beq.n	8003098 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	3310      	adds	r3, #16
 8003076:	4618      	mov	r0, r3
 8003078:	f000 fc84 	bl	8003984 <xTaskRemoveFromEventList>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d001      	beq.n	8003086 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003082:	f000 fd59 	bl	8003b38 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003086:	7bbb      	ldrb	r3, [r7, #14]
 8003088:	3b01      	subs	r3, #1
 800308a:	b2db      	uxtb	r3, r3
 800308c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800308e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003092:	2b00      	cmp	r3, #0
 8003094:	dce9      	bgt.n	800306a <prvUnlockQueue+0x60>
 8003096:	e000      	b.n	800309a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003098:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	22ff      	movs	r2, #255	; 0xff
 800309e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80030a2:	f001 f99b 	bl	80043dc <vPortExitCritical>
}
 80030a6:	bf00      	nop
 80030a8:	3710      	adds	r7, #16
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}

080030ae <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80030ae:	b580      	push	{r7, lr}
 80030b0:	b084      	sub	sp, #16
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80030b6:	f001 f961 	bl	800437c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d102      	bne.n	80030c8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80030c2:	2301      	movs	r3, #1
 80030c4:	60fb      	str	r3, [r7, #12]
 80030c6:	e001      	b.n	80030cc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80030c8:	2300      	movs	r3, #0
 80030ca:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80030cc:	f001 f986 	bl	80043dc <vPortExitCritical>

	return xReturn;
 80030d0:	68fb      	ldr	r3, [r7, #12]
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3710      	adds	r7, #16
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}

080030da <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80030da:	b580      	push	{r7, lr}
 80030dc:	b084      	sub	sp, #16
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80030e2:	f001 f94b 	bl	800437c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d102      	bne.n	80030f8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80030f2:	2301      	movs	r3, #1
 80030f4:	60fb      	str	r3, [r7, #12]
 80030f6:	e001      	b.n	80030fc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80030f8:	2300      	movs	r3, #0
 80030fa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80030fc:	f001 f96e 	bl	80043dc <vPortExitCritical>

	return xReturn;
 8003100:	68fb      	ldr	r3, [r7, #12]
}
 8003102:	4618      	mov	r0, r3
 8003104:	3710      	adds	r7, #16
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}

0800310a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800310a:	b580      	push	{r7, lr}
 800310c:	b08e      	sub	sp, #56	; 0x38
 800310e:	af04      	add	r7, sp, #16
 8003110:	60f8      	str	r0, [r7, #12]
 8003112:	60b9      	str	r1, [r7, #8]
 8003114:	607a      	str	r2, [r7, #4]
 8003116:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800311a:	2b00      	cmp	r3, #0
 800311c:	d10a      	bne.n	8003134 <xTaskCreateStatic+0x2a>
	__asm volatile
 800311e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003122:	f383 8811 	msr	BASEPRI, r3
 8003126:	f3bf 8f6f 	isb	sy
 800312a:	f3bf 8f4f 	dsb	sy
 800312e:	623b      	str	r3, [r7, #32]
}
 8003130:	bf00      	nop
 8003132:	e7fe      	b.n	8003132 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003136:	2b00      	cmp	r3, #0
 8003138:	d10a      	bne.n	8003150 <xTaskCreateStatic+0x46>
	__asm volatile
 800313a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800313e:	f383 8811 	msr	BASEPRI, r3
 8003142:	f3bf 8f6f 	isb	sy
 8003146:	f3bf 8f4f 	dsb	sy
 800314a:	61fb      	str	r3, [r7, #28]
}
 800314c:	bf00      	nop
 800314e:	e7fe      	b.n	800314e <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003150:	23a0      	movs	r3, #160	; 0xa0
 8003152:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	2ba0      	cmp	r3, #160	; 0xa0
 8003158:	d00a      	beq.n	8003170 <xTaskCreateStatic+0x66>
	__asm volatile
 800315a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800315e:	f383 8811 	msr	BASEPRI, r3
 8003162:	f3bf 8f6f 	isb	sy
 8003166:	f3bf 8f4f 	dsb	sy
 800316a:	61bb      	str	r3, [r7, #24]
}
 800316c:	bf00      	nop
 800316e:	e7fe      	b.n	800316e <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003172:	2b00      	cmp	r3, #0
 8003174:	d01e      	beq.n	80031b4 <xTaskCreateStatic+0xaa>
 8003176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003178:	2b00      	cmp	r3, #0
 800317a:	d01b      	beq.n	80031b4 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800317c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800317e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003182:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003184:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003188:	2202      	movs	r2, #2
 800318a:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800318e:	2300      	movs	r3, #0
 8003190:	9303      	str	r3, [sp, #12]
 8003192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003194:	9302      	str	r3, [sp, #8]
 8003196:	f107 0314 	add.w	r3, r7, #20
 800319a:	9301      	str	r3, [sp, #4]
 800319c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800319e:	9300      	str	r3, [sp, #0]
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	68b9      	ldr	r1, [r7, #8]
 80031a6:	68f8      	ldr	r0, [r7, #12]
 80031a8:	f000 f850 	bl	800324c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80031ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80031ae:	f000 f8e3 	bl	8003378 <prvAddNewTaskToReadyList>
 80031b2:	e001      	b.n	80031b8 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80031b4:	2300      	movs	r3, #0
 80031b6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80031b8:	697b      	ldr	r3, [r7, #20]
	}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3728      	adds	r7, #40	; 0x28
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80031c2:	b580      	push	{r7, lr}
 80031c4:	b08c      	sub	sp, #48	; 0x30
 80031c6:	af04      	add	r7, sp, #16
 80031c8:	60f8      	str	r0, [r7, #12]
 80031ca:	60b9      	str	r1, [r7, #8]
 80031cc:	603b      	str	r3, [r7, #0]
 80031ce:	4613      	mov	r3, r2
 80031d0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031d2:	88fb      	ldrh	r3, [r7, #6]
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	4618      	mov	r0, r3
 80031d8:	f001 f9d0 	bl	800457c <pvPortMalloc>
 80031dc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d00e      	beq.n	8003202 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80031e4:	20a0      	movs	r0, #160	; 0xa0
 80031e6:	f001 f9c9 	bl	800457c <pvPortMalloc>
 80031ea:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d003      	beq.n	80031fa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	697a      	ldr	r2, [r7, #20]
 80031f6:	631a      	str	r2, [r3, #48]	; 0x30
 80031f8:	e005      	b.n	8003206 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80031fa:	6978      	ldr	r0, [r7, #20]
 80031fc:	f001 fa88 	bl	8004710 <vPortFree>
 8003200:	e001      	b.n	8003206 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003202:	2300      	movs	r3, #0
 8003204:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d017      	beq.n	800323c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003214:	88fa      	ldrh	r2, [r7, #6]
 8003216:	2300      	movs	r3, #0
 8003218:	9303      	str	r3, [sp, #12]
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	9302      	str	r3, [sp, #8]
 800321e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003220:	9301      	str	r3, [sp, #4]
 8003222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003224:	9300      	str	r3, [sp, #0]
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	68b9      	ldr	r1, [r7, #8]
 800322a:	68f8      	ldr	r0, [r7, #12]
 800322c:	f000 f80e 	bl	800324c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003230:	69f8      	ldr	r0, [r7, #28]
 8003232:	f000 f8a1 	bl	8003378 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003236:	2301      	movs	r3, #1
 8003238:	61bb      	str	r3, [r7, #24]
 800323a:	e002      	b.n	8003242 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800323c:	f04f 33ff 	mov.w	r3, #4294967295
 8003240:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003242:	69bb      	ldr	r3, [r7, #24]
	}
 8003244:	4618      	mov	r0, r3
 8003246:	3720      	adds	r7, #32
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b088      	sub	sp, #32
 8003250:	af00      	add	r7, sp, #0
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	60b9      	str	r1, [r7, #8]
 8003256:	607a      	str	r2, [r7, #4]
 8003258:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800325a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800325c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003264:	3b01      	subs	r3, #1
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	4413      	add	r3, r2
 800326a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800326c:	69bb      	ldr	r3, [r7, #24]
 800326e:	f023 0307 	bic.w	r3, r3, #7
 8003272:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	f003 0307 	and.w	r3, r3, #7
 800327a:	2b00      	cmp	r3, #0
 800327c:	d00a      	beq.n	8003294 <prvInitialiseNewTask+0x48>
	__asm volatile
 800327e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003282:	f383 8811 	msr	BASEPRI, r3
 8003286:	f3bf 8f6f 	isb	sy
 800328a:	f3bf 8f4f 	dsb	sy
 800328e:	617b      	str	r3, [r7, #20]
}
 8003290:	bf00      	nop
 8003292:	e7fe      	b.n	8003292 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003294:	2300      	movs	r3, #0
 8003296:	61fb      	str	r3, [r7, #28]
 8003298:	e012      	b.n	80032c0 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800329a:	68ba      	ldr	r2, [r7, #8]
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	4413      	add	r3, r2
 80032a0:	7819      	ldrb	r1, [r3, #0]
 80032a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	4413      	add	r3, r2
 80032a8:	3334      	adds	r3, #52	; 0x34
 80032aa:	460a      	mov	r2, r1
 80032ac:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80032ae:	68ba      	ldr	r2, [r7, #8]
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	4413      	add	r3, r2
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d006      	beq.n	80032c8 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	3301      	adds	r3, #1
 80032be:	61fb      	str	r3, [r7, #28]
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	2b0f      	cmp	r3, #15
 80032c4:	d9e9      	bls.n	800329a <prvInitialiseNewTask+0x4e>
 80032c6:	e000      	b.n	80032ca <prvInitialiseNewTask+0x7e>
		{
			break;
 80032c8:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80032ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80032d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032d4:	2b06      	cmp	r3, #6
 80032d6:	d901      	bls.n	80032dc <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80032d8:	2306      	movs	r3, #6
 80032da:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80032dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032e0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80032e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032e6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80032e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ea:	2200      	movs	r2, #0
 80032ec:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80032ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f0:	3304      	adds	r3, #4
 80032f2:	4618      	mov	r0, r3
 80032f4:	f7ff f87b 	bl	80023ee <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80032f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032fa:	3318      	adds	r3, #24
 80032fc:	4618      	mov	r0, r3
 80032fe:	f7ff f876 	bl	80023ee <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003304:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003306:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800330a:	f1c3 0207 	rsb	r2, r3, #7
 800330e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003310:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003314:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003316:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800331a:	2200      	movs	r2, #0
 800331c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003322:	2200      	movs	r2, #0
 8003324:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800332a:	334c      	adds	r3, #76	; 0x4c
 800332c:	224c      	movs	r2, #76	; 0x4c
 800332e:	2100      	movs	r1, #0
 8003330:	4618      	mov	r0, r3
 8003332:	f001 fb01 	bl	8004938 <memset>
 8003336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003338:	4a0c      	ldr	r2, [pc, #48]	; (800336c <prvInitialiseNewTask+0x120>)
 800333a:	651a      	str	r2, [r3, #80]	; 0x50
 800333c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800333e:	4a0c      	ldr	r2, [pc, #48]	; (8003370 <prvInitialiseNewTask+0x124>)
 8003340:	655a      	str	r2, [r3, #84]	; 0x54
 8003342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003344:	4a0b      	ldr	r2, [pc, #44]	; (8003374 <prvInitialiseNewTask+0x128>)
 8003346:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003348:	683a      	ldr	r2, [r7, #0]
 800334a:	68f9      	ldr	r1, [r7, #12]
 800334c:	69b8      	ldr	r0, [r7, #24]
 800334e:	f000 ff21 	bl	8004194 <pxPortInitialiseStack>
 8003352:	4602      	mov	r2, r0
 8003354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003356:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800335a:	2b00      	cmp	r3, #0
 800335c:	d002      	beq.n	8003364 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800335e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003360:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003362:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003364:	bf00      	nop
 8003366:	3720      	adds	r7, #32
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	20002cc8 	.word	0x20002cc8
 8003370:	20002d30 	.word	0x20002d30
 8003374:	20002d98 	.word	0x20002d98

08003378 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003380:	f000 fffc 	bl	800437c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003384:	4b2a      	ldr	r3, [pc, #168]	; (8003430 <prvAddNewTaskToReadyList+0xb8>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	3301      	adds	r3, #1
 800338a:	4a29      	ldr	r2, [pc, #164]	; (8003430 <prvAddNewTaskToReadyList+0xb8>)
 800338c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800338e:	4b29      	ldr	r3, [pc, #164]	; (8003434 <prvAddNewTaskToReadyList+0xbc>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d109      	bne.n	80033aa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003396:	4a27      	ldr	r2, [pc, #156]	; (8003434 <prvAddNewTaskToReadyList+0xbc>)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800339c:	4b24      	ldr	r3, [pc, #144]	; (8003430 <prvAddNewTaskToReadyList+0xb8>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d110      	bne.n	80033c6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80033a4:	f000 fbec 	bl	8003b80 <prvInitialiseTaskLists>
 80033a8:	e00d      	b.n	80033c6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80033aa:	4b23      	ldr	r3, [pc, #140]	; (8003438 <prvAddNewTaskToReadyList+0xc0>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d109      	bne.n	80033c6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80033b2:	4b20      	ldr	r3, [pc, #128]	; (8003434 <prvAddNewTaskToReadyList+0xbc>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033bc:	429a      	cmp	r2, r3
 80033be:	d802      	bhi.n	80033c6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80033c0:	4a1c      	ldr	r2, [pc, #112]	; (8003434 <prvAddNewTaskToReadyList+0xbc>)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80033c6:	4b1d      	ldr	r3, [pc, #116]	; (800343c <prvAddNewTaskToReadyList+0xc4>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	3301      	adds	r3, #1
 80033cc:	4a1b      	ldr	r2, [pc, #108]	; (800343c <prvAddNewTaskToReadyList+0xc4>)
 80033ce:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d4:	2201      	movs	r2, #1
 80033d6:	409a      	lsls	r2, r3
 80033d8:	4b19      	ldr	r3, [pc, #100]	; (8003440 <prvAddNewTaskToReadyList+0xc8>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4313      	orrs	r3, r2
 80033de:	4a18      	ldr	r2, [pc, #96]	; (8003440 <prvAddNewTaskToReadyList+0xc8>)
 80033e0:	6013      	str	r3, [r2, #0]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033e6:	4613      	mov	r3, r2
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	4413      	add	r3, r2
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	4a15      	ldr	r2, [pc, #84]	; (8003444 <prvAddNewTaskToReadyList+0xcc>)
 80033f0:	441a      	add	r2, r3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	3304      	adds	r3, #4
 80033f6:	4619      	mov	r1, r3
 80033f8:	4610      	mov	r0, r2
 80033fa:	f7ff f804 	bl	8002406 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80033fe:	f000 ffed 	bl	80043dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003402:	4b0d      	ldr	r3, [pc, #52]	; (8003438 <prvAddNewTaskToReadyList+0xc0>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00e      	beq.n	8003428 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800340a:	4b0a      	ldr	r3, [pc, #40]	; (8003434 <prvAddNewTaskToReadyList+0xbc>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003414:	429a      	cmp	r2, r3
 8003416:	d207      	bcs.n	8003428 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003418:	4b0b      	ldr	r3, [pc, #44]	; (8003448 <prvAddNewTaskToReadyList+0xd0>)
 800341a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800341e:	601a      	str	r2, [r3, #0]
 8003420:	f3bf 8f4f 	dsb	sy
 8003424:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003428:	bf00      	nop
 800342a:	3708      	adds	r7, #8
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}
 8003430:	2000047c 	.word	0x2000047c
 8003434:	2000037c 	.word	0x2000037c
 8003438:	20000488 	.word	0x20000488
 800343c:	20000498 	.word	0x20000498
 8003440:	20000484 	.word	0x20000484
 8003444:	20000380 	.word	0x20000380
 8003448:	e000ed04 	.word	0xe000ed04

0800344c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003454:	2300      	movs	r3, #0
 8003456:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d017      	beq.n	800348e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800345e:	4b13      	ldr	r3, [pc, #76]	; (80034ac <vTaskDelay+0x60>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d00a      	beq.n	800347c <vTaskDelay+0x30>
	__asm volatile
 8003466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800346a:	f383 8811 	msr	BASEPRI, r3
 800346e:	f3bf 8f6f 	isb	sy
 8003472:	f3bf 8f4f 	dsb	sy
 8003476:	60bb      	str	r3, [r7, #8]
}
 8003478:	bf00      	nop
 800347a:	e7fe      	b.n	800347a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800347c:	f000 f884 	bl	8003588 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003480:	2100      	movs	r1, #0
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f000 fe20 	bl	80040c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003488:	f000 f88c 	bl	80035a4 <xTaskResumeAll>
 800348c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d107      	bne.n	80034a4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003494:	4b06      	ldr	r3, [pc, #24]	; (80034b0 <vTaskDelay+0x64>)
 8003496:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800349a:	601a      	str	r2, [r3, #0]
 800349c:	f3bf 8f4f 	dsb	sy
 80034a0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80034a4:	bf00      	nop
 80034a6:	3710      	adds	r7, #16
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	200004a4 	.word	0x200004a4
 80034b0:	e000ed04 	.word	0xe000ed04

080034b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b08a      	sub	sp, #40	; 0x28
 80034b8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80034ba:	2300      	movs	r3, #0
 80034bc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80034be:	2300      	movs	r3, #0
 80034c0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80034c2:	463a      	mov	r2, r7
 80034c4:	1d39      	adds	r1, r7, #4
 80034c6:	f107 0308 	add.w	r3, r7, #8
 80034ca:	4618      	mov	r0, r3
 80034cc:	f7fc fe40 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80034d0:	6839      	ldr	r1, [r7, #0]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	68ba      	ldr	r2, [r7, #8]
 80034d6:	9202      	str	r2, [sp, #8]
 80034d8:	9301      	str	r3, [sp, #4]
 80034da:	2300      	movs	r3, #0
 80034dc:	9300      	str	r3, [sp, #0]
 80034de:	2300      	movs	r3, #0
 80034e0:	460a      	mov	r2, r1
 80034e2:	4921      	ldr	r1, [pc, #132]	; (8003568 <vTaskStartScheduler+0xb4>)
 80034e4:	4821      	ldr	r0, [pc, #132]	; (800356c <vTaskStartScheduler+0xb8>)
 80034e6:	f7ff fe10 	bl	800310a <xTaskCreateStatic>
 80034ea:	4603      	mov	r3, r0
 80034ec:	4a20      	ldr	r2, [pc, #128]	; (8003570 <vTaskStartScheduler+0xbc>)
 80034ee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80034f0:	4b1f      	ldr	r3, [pc, #124]	; (8003570 <vTaskStartScheduler+0xbc>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d002      	beq.n	80034fe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80034f8:	2301      	movs	r3, #1
 80034fa:	617b      	str	r3, [r7, #20]
 80034fc:	e001      	b.n	8003502 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80034fe:	2300      	movs	r3, #0
 8003500:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	2b01      	cmp	r3, #1
 8003506:	d11b      	bne.n	8003540 <vTaskStartScheduler+0x8c>
	__asm volatile
 8003508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800350c:	f383 8811 	msr	BASEPRI, r3
 8003510:	f3bf 8f6f 	isb	sy
 8003514:	f3bf 8f4f 	dsb	sy
 8003518:	613b      	str	r3, [r7, #16]
}
 800351a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800351c:	4b15      	ldr	r3, [pc, #84]	; (8003574 <vTaskStartScheduler+0xc0>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	334c      	adds	r3, #76	; 0x4c
 8003522:	4a15      	ldr	r2, [pc, #84]	; (8003578 <vTaskStartScheduler+0xc4>)
 8003524:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003526:	4b15      	ldr	r3, [pc, #84]	; (800357c <vTaskStartScheduler+0xc8>)
 8003528:	f04f 32ff 	mov.w	r2, #4294967295
 800352c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800352e:	4b14      	ldr	r3, [pc, #80]	; (8003580 <vTaskStartScheduler+0xcc>)
 8003530:	2201      	movs	r2, #1
 8003532:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003534:	4b13      	ldr	r3, [pc, #76]	; (8003584 <vTaskStartScheduler+0xd0>)
 8003536:	2200      	movs	r2, #0
 8003538:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800353a:	f000 fead 	bl	8004298 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800353e:	e00e      	b.n	800355e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003546:	d10a      	bne.n	800355e <vTaskStartScheduler+0xaa>
	__asm volatile
 8003548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800354c:	f383 8811 	msr	BASEPRI, r3
 8003550:	f3bf 8f6f 	isb	sy
 8003554:	f3bf 8f4f 	dsb	sy
 8003558:	60fb      	str	r3, [r7, #12]
}
 800355a:	bf00      	nop
 800355c:	e7fe      	b.n	800355c <vTaskStartScheduler+0xa8>
}
 800355e:	bf00      	nop
 8003560:	3718      	adds	r7, #24
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	08004bec 	.word	0x08004bec
 800356c:	08003b51 	.word	0x08003b51
 8003570:	200004a0 	.word	0x200004a0
 8003574:	2000037c 	.word	0x2000037c
 8003578:	2000005c 	.word	0x2000005c
 800357c:	2000049c 	.word	0x2000049c
 8003580:	20000488 	.word	0x20000488
 8003584:	20000480 	.word	0x20000480

08003588 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003588:	b480      	push	{r7}
 800358a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800358c:	4b04      	ldr	r3, [pc, #16]	; (80035a0 <vTaskSuspendAll+0x18>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	3301      	adds	r3, #1
 8003592:	4a03      	ldr	r2, [pc, #12]	; (80035a0 <vTaskSuspendAll+0x18>)
 8003594:	6013      	str	r3, [r2, #0]
}
 8003596:	bf00      	nop
 8003598:	46bd      	mov	sp, r7
 800359a:	bc80      	pop	{r7}
 800359c:	4770      	bx	lr
 800359e:	bf00      	nop
 80035a0:	200004a4 	.word	0x200004a4

080035a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80035aa:	2300      	movs	r3, #0
 80035ac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80035ae:	2300      	movs	r3, #0
 80035b0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80035b2:	4b41      	ldr	r3, [pc, #260]	; (80036b8 <xTaskResumeAll+0x114>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d10a      	bne.n	80035d0 <xTaskResumeAll+0x2c>
	__asm volatile
 80035ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035be:	f383 8811 	msr	BASEPRI, r3
 80035c2:	f3bf 8f6f 	isb	sy
 80035c6:	f3bf 8f4f 	dsb	sy
 80035ca:	603b      	str	r3, [r7, #0]
}
 80035cc:	bf00      	nop
 80035ce:	e7fe      	b.n	80035ce <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80035d0:	f000 fed4 	bl	800437c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80035d4:	4b38      	ldr	r3, [pc, #224]	; (80036b8 <xTaskResumeAll+0x114>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	3b01      	subs	r3, #1
 80035da:	4a37      	ldr	r2, [pc, #220]	; (80036b8 <xTaskResumeAll+0x114>)
 80035dc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035de:	4b36      	ldr	r3, [pc, #216]	; (80036b8 <xTaskResumeAll+0x114>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d161      	bne.n	80036aa <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80035e6:	4b35      	ldr	r3, [pc, #212]	; (80036bc <xTaskResumeAll+0x118>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d05d      	beq.n	80036aa <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80035ee:	e02e      	b.n	800364e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80035f0:	4b33      	ldr	r3, [pc, #204]	; (80036c0 <xTaskResumeAll+0x11c>)
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	3318      	adds	r3, #24
 80035fc:	4618      	mov	r0, r3
 80035fe:	f7fe ff5d 	bl	80024bc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	3304      	adds	r3, #4
 8003606:	4618      	mov	r0, r3
 8003608:	f7fe ff58 	bl	80024bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003610:	2201      	movs	r2, #1
 8003612:	409a      	lsls	r2, r3
 8003614:	4b2b      	ldr	r3, [pc, #172]	; (80036c4 <xTaskResumeAll+0x120>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4313      	orrs	r3, r2
 800361a:	4a2a      	ldr	r2, [pc, #168]	; (80036c4 <xTaskResumeAll+0x120>)
 800361c:	6013      	str	r3, [r2, #0]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003622:	4613      	mov	r3, r2
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	4413      	add	r3, r2
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	4a27      	ldr	r2, [pc, #156]	; (80036c8 <xTaskResumeAll+0x124>)
 800362c:	441a      	add	r2, r3
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	3304      	adds	r3, #4
 8003632:	4619      	mov	r1, r3
 8003634:	4610      	mov	r0, r2
 8003636:	f7fe fee6 	bl	8002406 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800363e:	4b23      	ldr	r3, [pc, #140]	; (80036cc <xTaskResumeAll+0x128>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003644:	429a      	cmp	r2, r3
 8003646:	d302      	bcc.n	800364e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003648:	4b21      	ldr	r3, [pc, #132]	; (80036d0 <xTaskResumeAll+0x12c>)
 800364a:	2201      	movs	r2, #1
 800364c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800364e:	4b1c      	ldr	r3, [pc, #112]	; (80036c0 <xTaskResumeAll+0x11c>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d1cc      	bne.n	80035f0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d001      	beq.n	8003660 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800365c:	f000 fb32 	bl	8003cc4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003660:	4b1c      	ldr	r3, [pc, #112]	; (80036d4 <xTaskResumeAll+0x130>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d010      	beq.n	800368e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800366c:	f000 f836 	bl	80036dc <xTaskIncrementTick>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d002      	beq.n	800367c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003676:	4b16      	ldr	r3, [pc, #88]	; (80036d0 <xTaskResumeAll+0x12c>)
 8003678:	2201      	movs	r2, #1
 800367a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	3b01      	subs	r3, #1
 8003680:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d1f1      	bne.n	800366c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8003688:	4b12      	ldr	r3, [pc, #72]	; (80036d4 <xTaskResumeAll+0x130>)
 800368a:	2200      	movs	r2, #0
 800368c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800368e:	4b10      	ldr	r3, [pc, #64]	; (80036d0 <xTaskResumeAll+0x12c>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d009      	beq.n	80036aa <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003696:	2301      	movs	r3, #1
 8003698:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800369a:	4b0f      	ldr	r3, [pc, #60]	; (80036d8 <xTaskResumeAll+0x134>)
 800369c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036a0:	601a      	str	r2, [r3, #0]
 80036a2:	f3bf 8f4f 	dsb	sy
 80036a6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80036aa:	f000 fe97 	bl	80043dc <vPortExitCritical>

	return xAlreadyYielded;
 80036ae:	68bb      	ldr	r3, [r7, #8]
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3710      	adds	r7, #16
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	200004a4 	.word	0x200004a4
 80036bc:	2000047c 	.word	0x2000047c
 80036c0:	2000043c 	.word	0x2000043c
 80036c4:	20000484 	.word	0x20000484
 80036c8:	20000380 	.word	0x20000380
 80036cc:	2000037c 	.word	0x2000037c
 80036d0:	20000490 	.word	0x20000490
 80036d4:	2000048c 	.word	0x2000048c
 80036d8:	e000ed04 	.word	0xe000ed04

080036dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b086      	sub	sp, #24
 80036e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80036e2:	2300      	movs	r3, #0
 80036e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80036e6:	4b51      	ldr	r3, [pc, #324]	; (800382c <xTaskIncrementTick+0x150>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	f040 808d 	bne.w	800380a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80036f0:	4b4f      	ldr	r3, [pc, #316]	; (8003830 <xTaskIncrementTick+0x154>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	3301      	adds	r3, #1
 80036f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80036f8:	4a4d      	ldr	r2, [pc, #308]	; (8003830 <xTaskIncrementTick+0x154>)
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d120      	bne.n	8003746 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003704:	4b4b      	ldr	r3, [pc, #300]	; (8003834 <xTaskIncrementTick+0x158>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d00a      	beq.n	8003724 <xTaskIncrementTick+0x48>
	__asm volatile
 800370e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003712:	f383 8811 	msr	BASEPRI, r3
 8003716:	f3bf 8f6f 	isb	sy
 800371a:	f3bf 8f4f 	dsb	sy
 800371e:	603b      	str	r3, [r7, #0]
}
 8003720:	bf00      	nop
 8003722:	e7fe      	b.n	8003722 <xTaskIncrementTick+0x46>
 8003724:	4b43      	ldr	r3, [pc, #268]	; (8003834 <xTaskIncrementTick+0x158>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	60fb      	str	r3, [r7, #12]
 800372a:	4b43      	ldr	r3, [pc, #268]	; (8003838 <xTaskIncrementTick+0x15c>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a41      	ldr	r2, [pc, #260]	; (8003834 <xTaskIncrementTick+0x158>)
 8003730:	6013      	str	r3, [r2, #0]
 8003732:	4a41      	ldr	r2, [pc, #260]	; (8003838 <xTaskIncrementTick+0x15c>)
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6013      	str	r3, [r2, #0]
 8003738:	4b40      	ldr	r3, [pc, #256]	; (800383c <xTaskIncrementTick+0x160>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	3301      	adds	r3, #1
 800373e:	4a3f      	ldr	r2, [pc, #252]	; (800383c <xTaskIncrementTick+0x160>)
 8003740:	6013      	str	r3, [r2, #0]
 8003742:	f000 fabf 	bl	8003cc4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003746:	4b3e      	ldr	r3, [pc, #248]	; (8003840 <xTaskIncrementTick+0x164>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	693a      	ldr	r2, [r7, #16]
 800374c:	429a      	cmp	r2, r3
 800374e:	d34d      	bcc.n	80037ec <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003750:	4b38      	ldr	r3, [pc, #224]	; (8003834 <xTaskIncrementTick+0x158>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d101      	bne.n	800375e <xTaskIncrementTick+0x82>
 800375a:	2301      	movs	r3, #1
 800375c:	e000      	b.n	8003760 <xTaskIncrementTick+0x84>
 800375e:	2300      	movs	r3, #0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d004      	beq.n	800376e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003764:	4b36      	ldr	r3, [pc, #216]	; (8003840 <xTaskIncrementTick+0x164>)
 8003766:	f04f 32ff 	mov.w	r2, #4294967295
 800376a:	601a      	str	r2, [r3, #0]
					break;
 800376c:	e03e      	b.n	80037ec <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800376e:	4b31      	ldr	r3, [pc, #196]	; (8003834 <xTaskIncrementTick+0x158>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800377e:	693a      	ldr	r2, [r7, #16]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	429a      	cmp	r2, r3
 8003784:	d203      	bcs.n	800378e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003786:	4a2e      	ldr	r2, [pc, #184]	; (8003840 <xTaskIncrementTick+0x164>)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6013      	str	r3, [r2, #0]
						break;
 800378c:	e02e      	b.n	80037ec <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	3304      	adds	r3, #4
 8003792:	4618      	mov	r0, r3
 8003794:	f7fe fe92 	bl	80024bc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800379c:	2b00      	cmp	r3, #0
 800379e:	d004      	beq.n	80037aa <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	3318      	adds	r3, #24
 80037a4:	4618      	mov	r0, r3
 80037a6:	f7fe fe89 	bl	80024bc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ae:	2201      	movs	r2, #1
 80037b0:	409a      	lsls	r2, r3
 80037b2:	4b24      	ldr	r3, [pc, #144]	; (8003844 <xTaskIncrementTick+0x168>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	4a22      	ldr	r2, [pc, #136]	; (8003844 <xTaskIncrementTick+0x168>)
 80037ba:	6013      	str	r3, [r2, #0]
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037c0:	4613      	mov	r3, r2
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	4413      	add	r3, r2
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	4a1f      	ldr	r2, [pc, #124]	; (8003848 <xTaskIncrementTick+0x16c>)
 80037ca:	441a      	add	r2, r3
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	3304      	adds	r3, #4
 80037d0:	4619      	mov	r1, r3
 80037d2:	4610      	mov	r0, r2
 80037d4:	f7fe fe17 	bl	8002406 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037dc:	4b1b      	ldr	r3, [pc, #108]	; (800384c <xTaskIncrementTick+0x170>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d3b4      	bcc.n	8003750 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80037e6:	2301      	movs	r3, #1
 80037e8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80037ea:	e7b1      	b.n	8003750 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80037ec:	4b17      	ldr	r3, [pc, #92]	; (800384c <xTaskIncrementTick+0x170>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037f2:	4915      	ldr	r1, [pc, #84]	; (8003848 <xTaskIncrementTick+0x16c>)
 80037f4:	4613      	mov	r3, r2
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	4413      	add	r3, r2
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	440b      	add	r3, r1
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2b01      	cmp	r3, #1
 8003802:	d907      	bls.n	8003814 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8003804:	2301      	movs	r3, #1
 8003806:	617b      	str	r3, [r7, #20]
 8003808:	e004      	b.n	8003814 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800380a:	4b11      	ldr	r3, [pc, #68]	; (8003850 <xTaskIncrementTick+0x174>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	3301      	adds	r3, #1
 8003810:	4a0f      	ldr	r2, [pc, #60]	; (8003850 <xTaskIncrementTick+0x174>)
 8003812:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003814:	4b0f      	ldr	r3, [pc, #60]	; (8003854 <xTaskIncrementTick+0x178>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d001      	beq.n	8003820 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800381c:	2301      	movs	r3, #1
 800381e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003820:	697b      	ldr	r3, [r7, #20]
}
 8003822:	4618      	mov	r0, r3
 8003824:	3718      	adds	r7, #24
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	200004a4 	.word	0x200004a4
 8003830:	20000480 	.word	0x20000480
 8003834:	20000434 	.word	0x20000434
 8003838:	20000438 	.word	0x20000438
 800383c:	20000494 	.word	0x20000494
 8003840:	2000049c 	.word	0x2000049c
 8003844:	20000484 	.word	0x20000484
 8003848:	20000380 	.word	0x20000380
 800384c:	2000037c 	.word	0x2000037c
 8003850:	2000048c 	.word	0x2000048c
 8003854:	20000490 	.word	0x20000490

08003858 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b086      	sub	sp, #24
 800385c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800385e:	4b31      	ldr	r3, [pc, #196]	; (8003924 <vTaskSwitchContext+0xcc>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d003      	beq.n	800386e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003866:	4b30      	ldr	r3, [pc, #192]	; (8003928 <vTaskSwitchContext+0xd0>)
 8003868:	2201      	movs	r2, #1
 800386a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800386c:	e055      	b.n	800391a <vTaskSwitchContext+0xc2>
		xYieldPending = pdFALSE;
 800386e:	4b2e      	ldr	r3, [pc, #184]	; (8003928 <vTaskSwitchContext+0xd0>)
 8003870:	2200      	movs	r2, #0
 8003872:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8003874:	4b2d      	ldr	r3, [pc, #180]	; (800392c <vTaskSwitchContext+0xd4>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	4b2c      	ldr	r3, [pc, #176]	; (800392c <vTaskSwitchContext+0xd4>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003880:	429a      	cmp	r2, r3
 8003882:	d808      	bhi.n	8003896 <vTaskSwitchContext+0x3e>
 8003884:	4b29      	ldr	r3, [pc, #164]	; (800392c <vTaskSwitchContext+0xd4>)
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	4b28      	ldr	r3, [pc, #160]	; (800392c <vTaskSwitchContext+0xd4>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	3334      	adds	r3, #52	; 0x34
 800388e:	4619      	mov	r1, r3
 8003890:	4610      	mov	r0, r2
 8003892:	f7fc fc75 	bl	8000180 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003896:	4b26      	ldr	r3, [pc, #152]	; (8003930 <vTaskSwitchContext+0xd8>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	fab3 f383 	clz	r3, r3
 80038a2:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80038a4:	7afb      	ldrb	r3, [r7, #11]
 80038a6:	f1c3 031f 	rsb	r3, r3, #31
 80038aa:	617b      	str	r3, [r7, #20]
 80038ac:	4921      	ldr	r1, [pc, #132]	; (8003934 <vTaskSwitchContext+0xdc>)
 80038ae:	697a      	ldr	r2, [r7, #20]
 80038b0:	4613      	mov	r3, r2
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	4413      	add	r3, r2
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	440b      	add	r3, r1
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d10a      	bne.n	80038d6 <vTaskSwitchContext+0x7e>
	__asm volatile
 80038c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038c4:	f383 8811 	msr	BASEPRI, r3
 80038c8:	f3bf 8f6f 	isb	sy
 80038cc:	f3bf 8f4f 	dsb	sy
 80038d0:	607b      	str	r3, [r7, #4]
}
 80038d2:	bf00      	nop
 80038d4:	e7fe      	b.n	80038d4 <vTaskSwitchContext+0x7c>
 80038d6:	697a      	ldr	r2, [r7, #20]
 80038d8:	4613      	mov	r3, r2
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	4413      	add	r3, r2
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	4a14      	ldr	r2, [pc, #80]	; (8003934 <vTaskSwitchContext+0xdc>)
 80038e2:	4413      	add	r3, r2
 80038e4:	613b      	str	r3, [r7, #16]
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	685a      	ldr	r2, [r3, #4]
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	605a      	str	r2, [r3, #4]
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	685a      	ldr	r2, [r3, #4]
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	3308      	adds	r3, #8
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d104      	bne.n	8003906 <vTaskSwitchContext+0xae>
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	685a      	ldr	r2, [r3, #4]
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	605a      	str	r2, [r3, #4]
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	4a07      	ldr	r2, [pc, #28]	; (800392c <vTaskSwitchContext+0xd4>)
 800390e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003910:	4b06      	ldr	r3, [pc, #24]	; (800392c <vTaskSwitchContext+0xd4>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	334c      	adds	r3, #76	; 0x4c
 8003916:	4a08      	ldr	r2, [pc, #32]	; (8003938 <vTaskSwitchContext+0xe0>)
 8003918:	6013      	str	r3, [r2, #0]
}
 800391a:	bf00      	nop
 800391c:	3718      	adds	r7, #24
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	200004a4 	.word	0x200004a4
 8003928:	20000490 	.word	0x20000490
 800392c:	2000037c 	.word	0x2000037c
 8003930:	20000484 	.word	0x20000484
 8003934:	20000380 	.word	0x20000380
 8003938:	2000005c 	.word	0x2000005c

0800393c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d10a      	bne.n	8003962 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800394c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003950:	f383 8811 	msr	BASEPRI, r3
 8003954:	f3bf 8f6f 	isb	sy
 8003958:	f3bf 8f4f 	dsb	sy
 800395c:	60fb      	str	r3, [r7, #12]
}
 800395e:	bf00      	nop
 8003960:	e7fe      	b.n	8003960 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003962:	4b07      	ldr	r3, [pc, #28]	; (8003980 <vTaskPlaceOnEventList+0x44>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	3318      	adds	r3, #24
 8003968:	4619      	mov	r1, r3
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f7fe fd6e 	bl	800244c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003970:	2101      	movs	r1, #1
 8003972:	6838      	ldr	r0, [r7, #0]
 8003974:	f000 fba8 	bl	80040c8 <prvAddCurrentTaskToDelayedList>
}
 8003978:	bf00      	nop
 800397a:	3710      	adds	r7, #16
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}
 8003980:	2000037c 	.word	0x2000037c

08003984 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b086      	sub	sp, #24
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d10a      	bne.n	80039b0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800399a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800399e:	f383 8811 	msr	BASEPRI, r3
 80039a2:	f3bf 8f6f 	isb	sy
 80039a6:	f3bf 8f4f 	dsb	sy
 80039aa:	60fb      	str	r3, [r7, #12]
}
 80039ac:	bf00      	nop
 80039ae:	e7fe      	b.n	80039ae <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	3318      	adds	r3, #24
 80039b4:	4618      	mov	r0, r3
 80039b6:	f7fe fd81 	bl	80024bc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039ba:	4b1d      	ldr	r3, [pc, #116]	; (8003a30 <xTaskRemoveFromEventList+0xac>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d11c      	bne.n	80039fc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	3304      	adds	r3, #4
 80039c6:	4618      	mov	r0, r3
 80039c8:	f7fe fd78 	bl	80024bc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d0:	2201      	movs	r2, #1
 80039d2:	409a      	lsls	r2, r3
 80039d4:	4b17      	ldr	r3, [pc, #92]	; (8003a34 <xTaskRemoveFromEventList+0xb0>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4313      	orrs	r3, r2
 80039da:	4a16      	ldr	r2, [pc, #88]	; (8003a34 <xTaskRemoveFromEventList+0xb0>)
 80039dc:	6013      	str	r3, [r2, #0]
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039e2:	4613      	mov	r3, r2
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	4413      	add	r3, r2
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	4a13      	ldr	r2, [pc, #76]	; (8003a38 <xTaskRemoveFromEventList+0xb4>)
 80039ec:	441a      	add	r2, r3
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	3304      	adds	r3, #4
 80039f2:	4619      	mov	r1, r3
 80039f4:	4610      	mov	r0, r2
 80039f6:	f7fe fd06 	bl	8002406 <vListInsertEnd>
 80039fa:	e005      	b.n	8003a08 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	3318      	adds	r3, #24
 8003a00:	4619      	mov	r1, r3
 8003a02:	480e      	ldr	r0, [pc, #56]	; (8003a3c <xTaskRemoveFromEventList+0xb8>)
 8003a04:	f7fe fcff 	bl	8002406 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a0c:	4b0c      	ldr	r3, [pc, #48]	; (8003a40 <xTaskRemoveFromEventList+0xbc>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d905      	bls.n	8003a22 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003a16:	2301      	movs	r3, #1
 8003a18:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003a1a:	4b0a      	ldr	r3, [pc, #40]	; (8003a44 <xTaskRemoveFromEventList+0xc0>)
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	601a      	str	r2, [r3, #0]
 8003a20:	e001      	b.n	8003a26 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8003a22:	2300      	movs	r3, #0
 8003a24:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003a26:	697b      	ldr	r3, [r7, #20]
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3718      	adds	r7, #24
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	200004a4 	.word	0x200004a4
 8003a34:	20000484 	.word	0x20000484
 8003a38:	20000380 	.word	0x20000380
 8003a3c:	2000043c 	.word	0x2000043c
 8003a40:	2000037c 	.word	0x2000037c
 8003a44:	20000490 	.word	0x20000490

08003a48 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003a50:	4b06      	ldr	r3, [pc, #24]	; (8003a6c <vTaskInternalSetTimeOutState+0x24>)
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003a58:	4b05      	ldr	r3, [pc, #20]	; (8003a70 <vTaskInternalSetTimeOutState+0x28>)
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	605a      	str	r2, [r3, #4]
}
 8003a60:	bf00      	nop
 8003a62:	370c      	adds	r7, #12
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bc80      	pop	{r7}
 8003a68:	4770      	bx	lr
 8003a6a:	bf00      	nop
 8003a6c:	20000494 	.word	0x20000494
 8003a70:	20000480 	.word	0x20000480

08003a74 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b088      	sub	sp, #32
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d10a      	bne.n	8003a9a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a88:	f383 8811 	msr	BASEPRI, r3
 8003a8c:	f3bf 8f6f 	isb	sy
 8003a90:	f3bf 8f4f 	dsb	sy
 8003a94:	613b      	str	r3, [r7, #16]
}
 8003a96:	bf00      	nop
 8003a98:	e7fe      	b.n	8003a98 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d10a      	bne.n	8003ab6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aa4:	f383 8811 	msr	BASEPRI, r3
 8003aa8:	f3bf 8f6f 	isb	sy
 8003aac:	f3bf 8f4f 	dsb	sy
 8003ab0:	60fb      	str	r3, [r7, #12]
}
 8003ab2:	bf00      	nop
 8003ab4:	e7fe      	b.n	8003ab4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003ab6:	f000 fc61 	bl	800437c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003aba:	4b1d      	ldr	r3, [pc, #116]	; (8003b30 <xTaskCheckForTimeOut+0xbc>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	69ba      	ldr	r2, [r7, #24]
 8003ac6:	1ad3      	subs	r3, r2, r3
 8003ac8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ad2:	d102      	bne.n	8003ada <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	61fb      	str	r3, [r7, #28]
 8003ad8:	e023      	b.n	8003b22 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	4b15      	ldr	r3, [pc, #84]	; (8003b34 <xTaskCheckForTimeOut+0xc0>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d007      	beq.n	8003af6 <xTaskCheckForTimeOut+0x82>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	69ba      	ldr	r2, [r7, #24]
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d302      	bcc.n	8003af6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003af0:	2301      	movs	r3, #1
 8003af2:	61fb      	str	r3, [r7, #28]
 8003af4:	e015      	b.n	8003b22 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	697a      	ldr	r2, [r7, #20]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d20b      	bcs.n	8003b18 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	1ad2      	subs	r2, r2, r3
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f7ff ff9b 	bl	8003a48 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003b12:	2300      	movs	r3, #0
 8003b14:	61fb      	str	r3, [r7, #28]
 8003b16:	e004      	b.n	8003b22 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003b22:	f000 fc5b 	bl	80043dc <vPortExitCritical>

	return xReturn;
 8003b26:	69fb      	ldr	r3, [r7, #28]
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3720      	adds	r7, #32
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	20000480 	.word	0x20000480
 8003b34:	20000494 	.word	0x20000494

08003b38 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003b38:	b480      	push	{r7}
 8003b3a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003b3c:	4b03      	ldr	r3, [pc, #12]	; (8003b4c <vTaskMissedYield+0x14>)
 8003b3e:	2201      	movs	r2, #1
 8003b40:	601a      	str	r2, [r3, #0]
}
 8003b42:	bf00      	nop
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bc80      	pop	{r7}
 8003b48:	4770      	bx	lr
 8003b4a:	bf00      	nop
 8003b4c:	20000490 	.word	0x20000490

08003b50 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003b58:	f000 f852 	bl	8003c00 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003b5c:	4b06      	ldr	r3, [pc, #24]	; (8003b78 <prvIdleTask+0x28>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d9f9      	bls.n	8003b58 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003b64:	4b05      	ldr	r3, [pc, #20]	; (8003b7c <prvIdleTask+0x2c>)
 8003b66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b6a:	601a      	str	r2, [r3, #0]
 8003b6c:	f3bf 8f4f 	dsb	sy
 8003b70:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003b74:	e7f0      	b.n	8003b58 <prvIdleTask+0x8>
 8003b76:	bf00      	nop
 8003b78:	20000380 	.word	0x20000380
 8003b7c:	e000ed04 	.word	0xe000ed04

08003b80 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b082      	sub	sp, #8
 8003b84:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003b86:	2300      	movs	r3, #0
 8003b88:	607b      	str	r3, [r7, #4]
 8003b8a:	e00c      	b.n	8003ba6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	4613      	mov	r3, r2
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	4413      	add	r3, r2
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	4a12      	ldr	r2, [pc, #72]	; (8003be0 <prvInitialiseTaskLists+0x60>)
 8003b98:	4413      	add	r3, r2
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f7fe fc08 	bl	80023b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	3301      	adds	r3, #1
 8003ba4:	607b      	str	r3, [r7, #4]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2b06      	cmp	r3, #6
 8003baa:	d9ef      	bls.n	8003b8c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003bac:	480d      	ldr	r0, [pc, #52]	; (8003be4 <prvInitialiseTaskLists+0x64>)
 8003bae:	f7fe fbff 	bl	80023b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003bb2:	480d      	ldr	r0, [pc, #52]	; (8003be8 <prvInitialiseTaskLists+0x68>)
 8003bb4:	f7fe fbfc 	bl	80023b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003bb8:	480c      	ldr	r0, [pc, #48]	; (8003bec <prvInitialiseTaskLists+0x6c>)
 8003bba:	f7fe fbf9 	bl	80023b0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003bbe:	480c      	ldr	r0, [pc, #48]	; (8003bf0 <prvInitialiseTaskLists+0x70>)
 8003bc0:	f7fe fbf6 	bl	80023b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003bc4:	480b      	ldr	r0, [pc, #44]	; (8003bf4 <prvInitialiseTaskLists+0x74>)
 8003bc6:	f7fe fbf3 	bl	80023b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003bca:	4b0b      	ldr	r3, [pc, #44]	; (8003bf8 <prvInitialiseTaskLists+0x78>)
 8003bcc:	4a05      	ldr	r2, [pc, #20]	; (8003be4 <prvInitialiseTaskLists+0x64>)
 8003bce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003bd0:	4b0a      	ldr	r3, [pc, #40]	; (8003bfc <prvInitialiseTaskLists+0x7c>)
 8003bd2:	4a05      	ldr	r2, [pc, #20]	; (8003be8 <prvInitialiseTaskLists+0x68>)
 8003bd4:	601a      	str	r2, [r3, #0]
}
 8003bd6:	bf00      	nop
 8003bd8:	3708      	adds	r7, #8
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	20000380 	.word	0x20000380
 8003be4:	2000040c 	.word	0x2000040c
 8003be8:	20000420 	.word	0x20000420
 8003bec:	2000043c 	.word	0x2000043c
 8003bf0:	20000450 	.word	0x20000450
 8003bf4:	20000468 	.word	0x20000468
 8003bf8:	20000434 	.word	0x20000434
 8003bfc:	20000438 	.word	0x20000438

08003c00 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c06:	e019      	b.n	8003c3c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003c08:	f000 fbb8 	bl	800437c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003c0c:	4b10      	ldr	r3, [pc, #64]	; (8003c50 <prvCheckTasksWaitingTermination+0x50>)
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	68db      	ldr	r3, [r3, #12]
 8003c12:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	3304      	adds	r3, #4
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f7fe fc4f 	bl	80024bc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003c1e:	4b0d      	ldr	r3, [pc, #52]	; (8003c54 <prvCheckTasksWaitingTermination+0x54>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	3b01      	subs	r3, #1
 8003c24:	4a0b      	ldr	r2, [pc, #44]	; (8003c54 <prvCheckTasksWaitingTermination+0x54>)
 8003c26:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003c28:	4b0b      	ldr	r3, [pc, #44]	; (8003c58 <prvCheckTasksWaitingTermination+0x58>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	3b01      	subs	r3, #1
 8003c2e:	4a0a      	ldr	r2, [pc, #40]	; (8003c58 <prvCheckTasksWaitingTermination+0x58>)
 8003c30:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003c32:	f000 fbd3 	bl	80043dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 f810 	bl	8003c5c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c3c:	4b06      	ldr	r3, [pc, #24]	; (8003c58 <prvCheckTasksWaitingTermination+0x58>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d1e1      	bne.n	8003c08 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003c44:	bf00      	nop
 8003c46:	bf00      	nop
 8003c48:	3708      	adds	r7, #8
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	20000450 	.word	0x20000450
 8003c54:	2000047c 	.word	0x2000047c
 8003c58:	20000464 	.word	0x20000464

08003c5c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	334c      	adds	r3, #76	; 0x4c
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f000 fe6d 	bl	8004948 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d108      	bne.n	8003c8a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f000 fd47 	bl	8004710 <vPortFree>
				vPortFree( pxTCB );
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f000 fd44 	bl	8004710 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003c88:	e018      	b.n	8003cbc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d103      	bne.n	8003c9c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f000 fd3b 	bl	8004710 <vPortFree>
	}
 8003c9a:	e00f      	b.n	8003cbc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d00a      	beq.n	8003cbc <prvDeleteTCB+0x60>
	__asm volatile
 8003ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003caa:	f383 8811 	msr	BASEPRI, r3
 8003cae:	f3bf 8f6f 	isb	sy
 8003cb2:	f3bf 8f4f 	dsb	sy
 8003cb6:	60fb      	str	r3, [r7, #12]
}
 8003cb8:	bf00      	nop
 8003cba:	e7fe      	b.n	8003cba <prvDeleteTCB+0x5e>
	}
 8003cbc:	bf00      	nop
 8003cbe:	3710      	adds	r7, #16
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}

08003cc4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003cca:	4b0e      	ldr	r3, [pc, #56]	; (8003d04 <prvResetNextTaskUnblockTime+0x40>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d101      	bne.n	8003cd8 <prvResetNextTaskUnblockTime+0x14>
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e000      	b.n	8003cda <prvResetNextTaskUnblockTime+0x16>
 8003cd8:	2300      	movs	r3, #0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d004      	beq.n	8003ce8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003cde:	4b0a      	ldr	r3, [pc, #40]	; (8003d08 <prvResetNextTaskUnblockTime+0x44>)
 8003ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ce4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003ce6:	e008      	b.n	8003cfa <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003ce8:	4b06      	ldr	r3, [pc, #24]	; (8003d04 <prvResetNextTaskUnblockTime+0x40>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	68db      	ldr	r3, [r3, #12]
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	4a04      	ldr	r2, [pc, #16]	; (8003d08 <prvResetNextTaskUnblockTime+0x44>)
 8003cf8:	6013      	str	r3, [r2, #0]
}
 8003cfa:	bf00      	nop
 8003cfc:	370c      	adds	r7, #12
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bc80      	pop	{r7}
 8003d02:	4770      	bx	lr
 8003d04:	20000434 	.word	0x20000434
 8003d08:	2000049c 	.word	0x2000049c

08003d0c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003d12:	4b0b      	ldr	r3, [pc, #44]	; (8003d40 <xTaskGetSchedulerState+0x34>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d102      	bne.n	8003d20 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	607b      	str	r3, [r7, #4]
 8003d1e:	e008      	b.n	8003d32 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d20:	4b08      	ldr	r3, [pc, #32]	; (8003d44 <xTaskGetSchedulerState+0x38>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d102      	bne.n	8003d2e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003d28:	2302      	movs	r3, #2
 8003d2a:	607b      	str	r3, [r7, #4]
 8003d2c:	e001      	b.n	8003d32 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003d32:	687b      	ldr	r3, [r7, #4]
	}
 8003d34:	4618      	mov	r0, r3
 8003d36:	370c      	adds	r7, #12
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bc80      	pop	{r7}
 8003d3c:	4770      	bx	lr
 8003d3e:	bf00      	nop
 8003d40:	20000488 	.word	0x20000488
 8003d44:	200004a4 	.word	0x200004a4

08003d48 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8003d54:	2300      	movs	r3, #0
 8003d56:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d06e      	beq.n	8003e3c <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d62:	4b39      	ldr	r3, [pc, #228]	; (8003e48 <xTaskPriorityInherit+0x100>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d25e      	bcs.n	8003e2a <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	699b      	ldr	r3, [r3, #24]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	db06      	blt.n	8003d82 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d74:	4b34      	ldr	r3, [pc, #208]	; (8003e48 <xTaskPriorityInherit+0x100>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d7a:	f1c3 0207 	rsb	r2, r3, #7
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	6959      	ldr	r1, [r3, #20]
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	4413      	add	r3, r2
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	4a2e      	ldr	r2, [pc, #184]	; (8003e4c <xTaskPriorityInherit+0x104>)
 8003d94:	4413      	add	r3, r2
 8003d96:	4299      	cmp	r1, r3
 8003d98:	d101      	bne.n	8003d9e <xTaskPriorityInherit+0x56>
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e000      	b.n	8003da0 <xTaskPriorityInherit+0x58>
 8003d9e:	2300      	movs	r3, #0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d03a      	beq.n	8003e1a <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	3304      	adds	r3, #4
 8003da8:	4618      	mov	r0, r3
 8003daa:	f7fe fb87 	bl	80024bc <uxListRemove>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d115      	bne.n	8003de0 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003db8:	4924      	ldr	r1, [pc, #144]	; (8003e4c <xTaskPriorityInherit+0x104>)
 8003dba:	4613      	mov	r3, r2
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	4413      	add	r3, r2
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	440b      	add	r3, r1
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d10a      	bne.n	8003de0 <xTaskPriorityInherit+0x98>
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dce:	2201      	movs	r2, #1
 8003dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd4:	43da      	mvns	r2, r3
 8003dd6:	4b1e      	ldr	r3, [pc, #120]	; (8003e50 <xTaskPriorityInherit+0x108>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4013      	ands	r3, r2
 8003ddc:	4a1c      	ldr	r2, [pc, #112]	; (8003e50 <xTaskPriorityInherit+0x108>)
 8003dde:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003de0:	4b19      	ldr	r3, [pc, #100]	; (8003e48 <xTaskPriorityInherit+0x100>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dee:	2201      	movs	r2, #1
 8003df0:	409a      	lsls	r2, r3
 8003df2:	4b17      	ldr	r3, [pc, #92]	; (8003e50 <xTaskPriorityInherit+0x108>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	4a15      	ldr	r2, [pc, #84]	; (8003e50 <xTaskPriorityInherit+0x108>)
 8003dfa:	6013      	str	r3, [r2, #0]
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e00:	4613      	mov	r3, r2
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	4413      	add	r3, r2
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	4a10      	ldr	r2, [pc, #64]	; (8003e4c <xTaskPriorityInherit+0x104>)
 8003e0a:	441a      	add	r2, r3
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	3304      	adds	r3, #4
 8003e10:	4619      	mov	r1, r3
 8003e12:	4610      	mov	r0, r2
 8003e14:	f7fe faf7 	bl	8002406 <vListInsertEnd>
 8003e18:	e004      	b.n	8003e24 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003e1a:	4b0b      	ldr	r3, [pc, #44]	; (8003e48 <xTaskPriorityInherit+0x100>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8003e24:	2301      	movs	r3, #1
 8003e26:	60fb      	str	r3, [r7, #12]
 8003e28:	e008      	b.n	8003e3c <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e2e:	4b06      	ldr	r3, [pc, #24]	; (8003e48 <xTaskPriorityInherit+0x100>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d201      	bcs.n	8003e3c <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
	}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3710      	adds	r7, #16
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	2000037c 	.word	0x2000037c
 8003e4c:	20000380 	.word	0x20000380
 8003e50:	20000484 	.word	0x20000484

08003e54 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b086      	sub	sp, #24
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003e60:	2300      	movs	r3, #0
 8003e62:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d06e      	beq.n	8003f48 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003e6a:	4b3a      	ldr	r3, [pc, #232]	; (8003f54 <xTaskPriorityDisinherit+0x100>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	693a      	ldr	r2, [r7, #16]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d00a      	beq.n	8003e8a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e78:	f383 8811 	msr	BASEPRI, r3
 8003e7c:	f3bf 8f6f 	isb	sy
 8003e80:	f3bf 8f4f 	dsb	sy
 8003e84:	60fb      	str	r3, [r7, #12]
}
 8003e86:	bf00      	nop
 8003e88:	e7fe      	b.n	8003e88 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d10a      	bne.n	8003ea8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e96:	f383 8811 	msr	BASEPRI, r3
 8003e9a:	f3bf 8f6f 	isb	sy
 8003e9e:	f3bf 8f4f 	dsb	sy
 8003ea2:	60bb      	str	r3, [r7, #8]
}
 8003ea4:	bf00      	nop
 8003ea6:	e7fe      	b.n	8003ea6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003eac:	1e5a      	subs	r2, r3, #1
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d044      	beq.n	8003f48 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d140      	bne.n	8003f48 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	3304      	adds	r3, #4
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f7fe faf6 	bl	80024bc <uxListRemove>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d115      	bne.n	8003f02 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eda:	491f      	ldr	r1, [pc, #124]	; (8003f58 <xTaskPriorityDisinherit+0x104>)
 8003edc:	4613      	mov	r3, r2
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	4413      	add	r3, r2
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	440b      	add	r3, r1
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d10a      	bne.n	8003f02 <xTaskPriorityDisinherit+0xae>
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef6:	43da      	mvns	r2, r3
 8003ef8:	4b18      	ldr	r3, [pc, #96]	; (8003f5c <xTaskPriorityDisinherit+0x108>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4013      	ands	r3, r2
 8003efe:	4a17      	ldr	r2, [pc, #92]	; (8003f5c <xTaskPriorityDisinherit+0x108>)
 8003f00:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f0e:	f1c3 0207 	rsb	r2, r3, #7
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	409a      	lsls	r2, r3
 8003f1e:	4b0f      	ldr	r3, [pc, #60]	; (8003f5c <xTaskPriorityDisinherit+0x108>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4313      	orrs	r3, r2
 8003f24:	4a0d      	ldr	r2, [pc, #52]	; (8003f5c <xTaskPriorityDisinherit+0x108>)
 8003f26:	6013      	str	r3, [r2, #0]
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	4413      	add	r3, r2
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	4a08      	ldr	r2, [pc, #32]	; (8003f58 <xTaskPriorityDisinherit+0x104>)
 8003f36:	441a      	add	r2, r3
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	3304      	adds	r3, #4
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	4610      	mov	r0, r2
 8003f40:	f7fe fa61 	bl	8002406 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003f44:	2301      	movs	r3, #1
 8003f46:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003f48:	697b      	ldr	r3, [r7, #20]
	}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3718      	adds	r7, #24
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	2000037c 	.word	0x2000037c
 8003f58:	20000380 	.word	0x20000380
 8003f5c:	20000484 	.word	0x20000484

08003f60 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b088      	sub	sp, #32
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	f000 8088 	beq.w	800408a <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8003f7a:	69bb      	ldr	r3, [r7, #24]
 8003f7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d10a      	bne.n	8003f98 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8003f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f86:	f383 8811 	msr	BASEPRI, r3
 8003f8a:	f3bf 8f6f 	isb	sy
 8003f8e:	f3bf 8f4f 	dsb	sy
 8003f92:	60fb      	str	r3, [r7, #12]
}
 8003f94:	bf00      	nop
 8003f96:	e7fe      	b.n	8003f96 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8003f98:	69bb      	ldr	r3, [r7, #24]
 8003f9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f9c:	683a      	ldr	r2, [r7, #0]
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d902      	bls.n	8003fa8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	61fb      	str	r3, [r7, #28]
 8003fa6:	e002      	b.n	8003fae <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8003fa8:	69bb      	ldr	r3, [r7, #24]
 8003faa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fac:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb2:	69fa      	ldr	r2, [r7, #28]
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d068      	beq.n	800408a <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8003fb8:	69bb      	ldr	r3, [r7, #24]
 8003fba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fbc:	697a      	ldr	r2, [r7, #20]
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d163      	bne.n	800408a <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8003fc2:	4b34      	ldr	r3, [pc, #208]	; (8004094 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	69ba      	ldr	r2, [r7, #24]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d10a      	bne.n	8003fe2 <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 8003fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd0:	f383 8811 	msr	BASEPRI, r3
 8003fd4:	f3bf 8f6f 	isb	sy
 8003fd8:	f3bf 8f4f 	dsb	sy
 8003fdc:	60bb      	str	r3, [r7, #8]
}
 8003fde:	bf00      	nop
 8003fe0:	e7fe      	b.n	8003fe0 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe6:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8003fe8:	69bb      	ldr	r3, [r7, #24]
 8003fea:	69fa      	ldr	r2, [r7, #28]
 8003fec:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	699b      	ldr	r3, [r3, #24]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	db04      	blt.n	8004000 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	f1c3 0207 	rsb	r2, r3, #7
 8003ffc:	69bb      	ldr	r3, [r7, #24]
 8003ffe:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	6959      	ldr	r1, [r3, #20]
 8004004:	693a      	ldr	r2, [r7, #16]
 8004006:	4613      	mov	r3, r2
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	4413      	add	r3, r2
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	4a22      	ldr	r2, [pc, #136]	; (8004098 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8004010:	4413      	add	r3, r2
 8004012:	4299      	cmp	r1, r3
 8004014:	d101      	bne.n	800401a <vTaskPriorityDisinheritAfterTimeout+0xba>
 8004016:	2301      	movs	r3, #1
 8004018:	e000      	b.n	800401c <vTaskPriorityDisinheritAfterTimeout+0xbc>
 800401a:	2300      	movs	r3, #0
 800401c:	2b00      	cmp	r3, #0
 800401e:	d034      	beq.n	800408a <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004020:	69bb      	ldr	r3, [r7, #24]
 8004022:	3304      	adds	r3, #4
 8004024:	4618      	mov	r0, r3
 8004026:	f7fe fa49 	bl	80024bc <uxListRemove>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d115      	bne.n	800405c <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004030:	69bb      	ldr	r3, [r7, #24]
 8004032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004034:	4918      	ldr	r1, [pc, #96]	; (8004098 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8004036:	4613      	mov	r3, r2
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	4413      	add	r3, r2
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	440b      	add	r3, r1
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d10a      	bne.n	800405c <vTaskPriorityDisinheritAfterTimeout+0xfc>
 8004046:	69bb      	ldr	r3, [r7, #24]
 8004048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800404a:	2201      	movs	r2, #1
 800404c:	fa02 f303 	lsl.w	r3, r2, r3
 8004050:	43da      	mvns	r2, r3
 8004052:	4b12      	ldr	r3, [pc, #72]	; (800409c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4013      	ands	r3, r2
 8004058:	4a10      	ldr	r2, [pc, #64]	; (800409c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800405a:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800405c:	69bb      	ldr	r3, [r7, #24]
 800405e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004060:	2201      	movs	r2, #1
 8004062:	409a      	lsls	r2, r3
 8004064:	4b0d      	ldr	r3, [pc, #52]	; (800409c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4313      	orrs	r3, r2
 800406a:	4a0c      	ldr	r2, [pc, #48]	; (800409c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800406c:	6013      	str	r3, [r2, #0]
 800406e:	69bb      	ldr	r3, [r7, #24]
 8004070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004072:	4613      	mov	r3, r2
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	4413      	add	r3, r2
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	4a07      	ldr	r2, [pc, #28]	; (8004098 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800407c:	441a      	add	r2, r3
 800407e:	69bb      	ldr	r3, [r7, #24]
 8004080:	3304      	adds	r3, #4
 8004082:	4619      	mov	r1, r3
 8004084:	4610      	mov	r0, r2
 8004086:	f7fe f9be 	bl	8002406 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800408a:	bf00      	nop
 800408c:	3720      	adds	r7, #32
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	2000037c 	.word	0x2000037c
 8004098:	20000380 	.word	0x20000380
 800409c:	20000484 	.word	0x20000484

080040a0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80040a0:	b480      	push	{r7}
 80040a2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80040a4:	4b07      	ldr	r3, [pc, #28]	; (80040c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d004      	beq.n	80040b6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80040ac:	4b05      	ldr	r3, [pc, #20]	; (80040c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80040b2:	3201      	adds	r2, #1
 80040b4:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80040b6:	4b03      	ldr	r3, [pc, #12]	; (80040c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80040b8:	681b      	ldr	r3, [r3, #0]
	}
 80040ba:	4618      	mov	r0, r3
 80040bc:	46bd      	mov	sp, r7
 80040be:	bc80      	pop	{r7}
 80040c0:	4770      	bx	lr
 80040c2:	bf00      	nop
 80040c4:	2000037c 	.word	0x2000037c

080040c8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80040d2:	4b29      	ldr	r3, [pc, #164]	; (8004178 <prvAddCurrentTaskToDelayedList+0xb0>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80040d8:	4b28      	ldr	r3, [pc, #160]	; (800417c <prvAddCurrentTaskToDelayedList+0xb4>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	3304      	adds	r3, #4
 80040de:	4618      	mov	r0, r3
 80040e0:	f7fe f9ec 	bl	80024bc <uxListRemove>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d10b      	bne.n	8004102 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80040ea:	4b24      	ldr	r3, [pc, #144]	; (800417c <prvAddCurrentTaskToDelayedList+0xb4>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f0:	2201      	movs	r2, #1
 80040f2:	fa02 f303 	lsl.w	r3, r2, r3
 80040f6:	43da      	mvns	r2, r3
 80040f8:	4b21      	ldr	r3, [pc, #132]	; (8004180 <prvAddCurrentTaskToDelayedList+0xb8>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4013      	ands	r3, r2
 80040fe:	4a20      	ldr	r2, [pc, #128]	; (8004180 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004100:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004108:	d10a      	bne.n	8004120 <prvAddCurrentTaskToDelayedList+0x58>
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d007      	beq.n	8004120 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004110:	4b1a      	ldr	r3, [pc, #104]	; (800417c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	3304      	adds	r3, #4
 8004116:	4619      	mov	r1, r3
 8004118:	481a      	ldr	r0, [pc, #104]	; (8004184 <prvAddCurrentTaskToDelayedList+0xbc>)
 800411a:	f7fe f974 	bl	8002406 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800411e:	e026      	b.n	800416e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004120:	68fa      	ldr	r2, [r7, #12]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4413      	add	r3, r2
 8004126:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004128:	4b14      	ldr	r3, [pc, #80]	; (800417c <prvAddCurrentTaskToDelayedList+0xb4>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	68ba      	ldr	r2, [r7, #8]
 800412e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004130:	68ba      	ldr	r2, [r7, #8]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	429a      	cmp	r2, r3
 8004136:	d209      	bcs.n	800414c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004138:	4b13      	ldr	r3, [pc, #76]	; (8004188 <prvAddCurrentTaskToDelayedList+0xc0>)
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	4b0f      	ldr	r3, [pc, #60]	; (800417c <prvAddCurrentTaskToDelayedList+0xb4>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	3304      	adds	r3, #4
 8004142:	4619      	mov	r1, r3
 8004144:	4610      	mov	r0, r2
 8004146:	f7fe f981 	bl	800244c <vListInsert>
}
 800414a:	e010      	b.n	800416e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800414c:	4b0f      	ldr	r3, [pc, #60]	; (800418c <prvAddCurrentTaskToDelayedList+0xc4>)
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	4b0a      	ldr	r3, [pc, #40]	; (800417c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	3304      	adds	r3, #4
 8004156:	4619      	mov	r1, r3
 8004158:	4610      	mov	r0, r2
 800415a:	f7fe f977 	bl	800244c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800415e:	4b0c      	ldr	r3, [pc, #48]	; (8004190 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	68ba      	ldr	r2, [r7, #8]
 8004164:	429a      	cmp	r2, r3
 8004166:	d202      	bcs.n	800416e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004168:	4a09      	ldr	r2, [pc, #36]	; (8004190 <prvAddCurrentTaskToDelayedList+0xc8>)
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	6013      	str	r3, [r2, #0]
}
 800416e:	bf00      	nop
 8004170:	3710      	adds	r7, #16
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	20000480 	.word	0x20000480
 800417c:	2000037c 	.word	0x2000037c
 8004180:	20000484 	.word	0x20000484
 8004184:	20000468 	.word	0x20000468
 8004188:	20000438 	.word	0x20000438
 800418c:	20000434 	.word	0x20000434
 8004190:	2000049c 	.word	0x2000049c

08004194 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004194:	b480      	push	{r7}
 8004196:	b085      	sub	sp, #20
 8004198:	af00      	add	r7, sp, #0
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	60b9      	str	r1, [r7, #8]
 800419e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	3b04      	subs	r3, #4
 80041a4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80041ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	3b04      	subs	r3, #4
 80041b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	f023 0201 	bic.w	r2, r3, #1
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	3b04      	subs	r3, #4
 80041c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80041c4:	4a08      	ldr	r2, [pc, #32]	; (80041e8 <pxPortInitialiseStack+0x54>)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	3b14      	subs	r3, #20
 80041ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	3b20      	subs	r3, #32
 80041da:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80041dc:	68fb      	ldr	r3, [r7, #12]
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3714      	adds	r7, #20
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bc80      	pop	{r7}
 80041e6:	4770      	bx	lr
 80041e8:	080041ed 	.word	0x080041ed

080041ec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80041ec:	b480      	push	{r7}
 80041ee:	b085      	sub	sp, #20
 80041f0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80041f2:	2300      	movs	r3, #0
 80041f4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80041f6:	4b12      	ldr	r3, [pc, #72]	; (8004240 <prvTaskExitError+0x54>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041fe:	d00a      	beq.n	8004216 <prvTaskExitError+0x2a>
	__asm volatile
 8004200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004204:	f383 8811 	msr	BASEPRI, r3
 8004208:	f3bf 8f6f 	isb	sy
 800420c:	f3bf 8f4f 	dsb	sy
 8004210:	60fb      	str	r3, [r7, #12]
}
 8004212:	bf00      	nop
 8004214:	e7fe      	b.n	8004214 <prvTaskExitError+0x28>
	__asm volatile
 8004216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800421a:	f383 8811 	msr	BASEPRI, r3
 800421e:	f3bf 8f6f 	isb	sy
 8004222:	f3bf 8f4f 	dsb	sy
 8004226:	60bb      	str	r3, [r7, #8]
}
 8004228:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800422a:	bf00      	nop
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d0fc      	beq.n	800422c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004232:	bf00      	nop
 8004234:	bf00      	nop
 8004236:	3714      	adds	r7, #20
 8004238:	46bd      	mov	sp, r7
 800423a:	bc80      	pop	{r7}
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop
 8004240:	2000000c 	.word	0x2000000c
	...

08004250 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004250:	4b07      	ldr	r3, [pc, #28]	; (8004270 <pxCurrentTCBConst2>)
 8004252:	6819      	ldr	r1, [r3, #0]
 8004254:	6808      	ldr	r0, [r1, #0]
 8004256:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800425a:	f380 8809 	msr	PSP, r0
 800425e:	f3bf 8f6f 	isb	sy
 8004262:	f04f 0000 	mov.w	r0, #0
 8004266:	f380 8811 	msr	BASEPRI, r0
 800426a:	f04e 0e0d 	orr.w	lr, lr, #13
 800426e:	4770      	bx	lr

08004270 <pxCurrentTCBConst2>:
 8004270:	2000037c 	.word	0x2000037c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004274:	bf00      	nop
 8004276:	bf00      	nop

08004278 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004278:	4806      	ldr	r0, [pc, #24]	; (8004294 <prvPortStartFirstTask+0x1c>)
 800427a:	6800      	ldr	r0, [r0, #0]
 800427c:	6800      	ldr	r0, [r0, #0]
 800427e:	f380 8808 	msr	MSP, r0
 8004282:	b662      	cpsie	i
 8004284:	b661      	cpsie	f
 8004286:	f3bf 8f4f 	dsb	sy
 800428a:	f3bf 8f6f 	isb	sy
 800428e:	df00      	svc	0
 8004290:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004292:	bf00      	nop
 8004294:	e000ed08 	.word	0xe000ed08

08004298 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b084      	sub	sp, #16
 800429c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800429e:	4b32      	ldr	r3, [pc, #200]	; (8004368 <xPortStartScheduler+0xd0>)
 80042a0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	781b      	ldrb	r3, [r3, #0]
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	22f0      	movs	r2, #240	; 0xf0
 80042ae:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80042b8:	78fb      	ldrb	r3, [r7, #3]
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80042c0:	b2da      	uxtb	r2, r3
 80042c2:	4b2a      	ldr	r3, [pc, #168]	; (800436c <xPortStartScheduler+0xd4>)
 80042c4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80042c6:	4b2a      	ldr	r3, [pc, #168]	; (8004370 <xPortStartScheduler+0xd8>)
 80042c8:	2207      	movs	r2, #7
 80042ca:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80042cc:	e009      	b.n	80042e2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80042ce:	4b28      	ldr	r3, [pc, #160]	; (8004370 <xPortStartScheduler+0xd8>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	3b01      	subs	r3, #1
 80042d4:	4a26      	ldr	r2, [pc, #152]	; (8004370 <xPortStartScheduler+0xd8>)
 80042d6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80042d8:	78fb      	ldrb	r3, [r7, #3]
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	005b      	lsls	r3, r3, #1
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80042e2:	78fb      	ldrb	r3, [r7, #3]
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ea:	2b80      	cmp	r3, #128	; 0x80
 80042ec:	d0ef      	beq.n	80042ce <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80042ee:	4b20      	ldr	r3, [pc, #128]	; (8004370 <xPortStartScheduler+0xd8>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f1c3 0307 	rsb	r3, r3, #7
 80042f6:	2b04      	cmp	r3, #4
 80042f8:	d00a      	beq.n	8004310 <xPortStartScheduler+0x78>
	__asm volatile
 80042fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042fe:	f383 8811 	msr	BASEPRI, r3
 8004302:	f3bf 8f6f 	isb	sy
 8004306:	f3bf 8f4f 	dsb	sy
 800430a:	60bb      	str	r3, [r7, #8]
}
 800430c:	bf00      	nop
 800430e:	e7fe      	b.n	800430e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004310:	4b17      	ldr	r3, [pc, #92]	; (8004370 <xPortStartScheduler+0xd8>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	021b      	lsls	r3, r3, #8
 8004316:	4a16      	ldr	r2, [pc, #88]	; (8004370 <xPortStartScheduler+0xd8>)
 8004318:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800431a:	4b15      	ldr	r3, [pc, #84]	; (8004370 <xPortStartScheduler+0xd8>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004322:	4a13      	ldr	r2, [pc, #76]	; (8004370 <xPortStartScheduler+0xd8>)
 8004324:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	b2da      	uxtb	r2, r3
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800432e:	4b11      	ldr	r3, [pc, #68]	; (8004374 <xPortStartScheduler+0xdc>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a10      	ldr	r2, [pc, #64]	; (8004374 <xPortStartScheduler+0xdc>)
 8004334:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004338:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800433a:	4b0e      	ldr	r3, [pc, #56]	; (8004374 <xPortStartScheduler+0xdc>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a0d      	ldr	r2, [pc, #52]	; (8004374 <xPortStartScheduler+0xdc>)
 8004340:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004344:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004346:	f000 f8b9 	bl	80044bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800434a:	4b0b      	ldr	r3, [pc, #44]	; (8004378 <xPortStartScheduler+0xe0>)
 800434c:	2200      	movs	r2, #0
 800434e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004350:	f7ff ff92 	bl	8004278 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004354:	f7ff fa80 	bl	8003858 <vTaskSwitchContext>
	prvTaskExitError();
 8004358:	f7ff ff48 	bl	80041ec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800435c:	2300      	movs	r3, #0
}
 800435e:	4618      	mov	r0, r3
 8004360:	3710      	adds	r7, #16
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
 8004366:	bf00      	nop
 8004368:	e000e400 	.word	0xe000e400
 800436c:	200004a8 	.word	0x200004a8
 8004370:	200004ac 	.word	0x200004ac
 8004374:	e000ed20 	.word	0xe000ed20
 8004378:	2000000c 	.word	0x2000000c

0800437c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800437c:	b480      	push	{r7}
 800437e:	b083      	sub	sp, #12
 8004380:	af00      	add	r7, sp, #0
	__asm volatile
 8004382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004386:	f383 8811 	msr	BASEPRI, r3
 800438a:	f3bf 8f6f 	isb	sy
 800438e:	f3bf 8f4f 	dsb	sy
 8004392:	607b      	str	r3, [r7, #4]
}
 8004394:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004396:	4b0f      	ldr	r3, [pc, #60]	; (80043d4 <vPortEnterCritical+0x58>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	3301      	adds	r3, #1
 800439c:	4a0d      	ldr	r2, [pc, #52]	; (80043d4 <vPortEnterCritical+0x58>)
 800439e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80043a0:	4b0c      	ldr	r3, [pc, #48]	; (80043d4 <vPortEnterCritical+0x58>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d10f      	bne.n	80043c8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80043a8:	4b0b      	ldr	r3, [pc, #44]	; (80043d8 <vPortEnterCritical+0x5c>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d00a      	beq.n	80043c8 <vPortEnterCritical+0x4c>
	__asm volatile
 80043b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b6:	f383 8811 	msr	BASEPRI, r3
 80043ba:	f3bf 8f6f 	isb	sy
 80043be:	f3bf 8f4f 	dsb	sy
 80043c2:	603b      	str	r3, [r7, #0]
}
 80043c4:	bf00      	nop
 80043c6:	e7fe      	b.n	80043c6 <vPortEnterCritical+0x4a>
	}
}
 80043c8:	bf00      	nop
 80043ca:	370c      	adds	r7, #12
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bc80      	pop	{r7}
 80043d0:	4770      	bx	lr
 80043d2:	bf00      	nop
 80043d4:	2000000c 	.word	0x2000000c
 80043d8:	e000ed04 	.word	0xe000ed04

080043dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80043e2:	4b11      	ldr	r3, [pc, #68]	; (8004428 <vPortExitCritical+0x4c>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d10a      	bne.n	8004400 <vPortExitCritical+0x24>
	__asm volatile
 80043ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ee:	f383 8811 	msr	BASEPRI, r3
 80043f2:	f3bf 8f6f 	isb	sy
 80043f6:	f3bf 8f4f 	dsb	sy
 80043fa:	607b      	str	r3, [r7, #4]
}
 80043fc:	bf00      	nop
 80043fe:	e7fe      	b.n	80043fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004400:	4b09      	ldr	r3, [pc, #36]	; (8004428 <vPortExitCritical+0x4c>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	3b01      	subs	r3, #1
 8004406:	4a08      	ldr	r2, [pc, #32]	; (8004428 <vPortExitCritical+0x4c>)
 8004408:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800440a:	4b07      	ldr	r3, [pc, #28]	; (8004428 <vPortExitCritical+0x4c>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d105      	bne.n	800441e <vPortExitCritical+0x42>
 8004412:	2300      	movs	r3, #0
 8004414:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	f383 8811 	msr	BASEPRI, r3
}
 800441c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800441e:	bf00      	nop
 8004420:	370c      	adds	r7, #12
 8004422:	46bd      	mov	sp, r7
 8004424:	bc80      	pop	{r7}
 8004426:	4770      	bx	lr
 8004428:	2000000c 	.word	0x2000000c
 800442c:	00000000 	.word	0x00000000

08004430 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004430:	f3ef 8009 	mrs	r0, PSP
 8004434:	f3bf 8f6f 	isb	sy
 8004438:	4b0d      	ldr	r3, [pc, #52]	; (8004470 <pxCurrentTCBConst>)
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004440:	6010      	str	r0, [r2, #0]
 8004442:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004446:	f04f 0050 	mov.w	r0, #80	; 0x50
 800444a:	f380 8811 	msr	BASEPRI, r0
 800444e:	f7ff fa03 	bl	8003858 <vTaskSwitchContext>
 8004452:	f04f 0000 	mov.w	r0, #0
 8004456:	f380 8811 	msr	BASEPRI, r0
 800445a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800445e:	6819      	ldr	r1, [r3, #0]
 8004460:	6808      	ldr	r0, [r1, #0]
 8004462:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004466:	f380 8809 	msr	PSP, r0
 800446a:	f3bf 8f6f 	isb	sy
 800446e:	4770      	bx	lr

08004470 <pxCurrentTCBConst>:
 8004470:	2000037c 	.word	0x2000037c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004474:	bf00      	nop
 8004476:	bf00      	nop

08004478 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b082      	sub	sp, #8
 800447c:	af00      	add	r7, sp, #0
	__asm volatile
 800447e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004482:	f383 8811 	msr	BASEPRI, r3
 8004486:	f3bf 8f6f 	isb	sy
 800448a:	f3bf 8f4f 	dsb	sy
 800448e:	607b      	str	r3, [r7, #4]
}
 8004490:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004492:	f7ff f923 	bl	80036dc <xTaskIncrementTick>
 8004496:	4603      	mov	r3, r0
 8004498:	2b00      	cmp	r3, #0
 800449a:	d003      	beq.n	80044a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800449c:	4b06      	ldr	r3, [pc, #24]	; (80044b8 <xPortSysTickHandler+0x40>)
 800449e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044a2:	601a      	str	r2, [r3, #0]
 80044a4:	2300      	movs	r3, #0
 80044a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	f383 8811 	msr	BASEPRI, r3
}
 80044ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80044b0:	bf00      	nop
 80044b2:	3708      	adds	r7, #8
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	e000ed04 	.word	0xe000ed04

080044bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80044bc:	b480      	push	{r7}
 80044be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80044c0:	4b0a      	ldr	r3, [pc, #40]	; (80044ec <vPortSetupTimerInterrupt+0x30>)
 80044c2:	2200      	movs	r2, #0
 80044c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80044c6:	4b0a      	ldr	r3, [pc, #40]	; (80044f0 <vPortSetupTimerInterrupt+0x34>)
 80044c8:	2200      	movs	r2, #0
 80044ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80044cc:	4b09      	ldr	r3, [pc, #36]	; (80044f4 <vPortSetupTimerInterrupt+0x38>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a09      	ldr	r2, [pc, #36]	; (80044f8 <vPortSetupTimerInterrupt+0x3c>)
 80044d2:	fba2 2303 	umull	r2, r3, r2, r3
 80044d6:	099b      	lsrs	r3, r3, #6
 80044d8:	4a08      	ldr	r2, [pc, #32]	; (80044fc <vPortSetupTimerInterrupt+0x40>)
 80044da:	3b01      	subs	r3, #1
 80044dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80044de:	4b03      	ldr	r3, [pc, #12]	; (80044ec <vPortSetupTimerInterrupt+0x30>)
 80044e0:	2207      	movs	r2, #7
 80044e2:	601a      	str	r2, [r3, #0]
}
 80044e4:	bf00      	nop
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bc80      	pop	{r7}
 80044ea:	4770      	bx	lr
 80044ec:	e000e010 	.word	0xe000e010
 80044f0:	e000e018 	.word	0xe000e018
 80044f4:	20000000 	.word	0x20000000
 80044f8:	10624dd3 	.word	0x10624dd3
 80044fc:	e000e014 	.word	0xe000e014

08004500 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004500:	b480      	push	{r7}
 8004502:	b085      	sub	sp, #20
 8004504:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004506:	f3ef 8305 	mrs	r3, IPSR
 800450a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2b0f      	cmp	r3, #15
 8004510:	d914      	bls.n	800453c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004512:	4a16      	ldr	r2, [pc, #88]	; (800456c <vPortValidateInterruptPriority+0x6c>)
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	4413      	add	r3, r2
 8004518:	781b      	ldrb	r3, [r3, #0]
 800451a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800451c:	4b14      	ldr	r3, [pc, #80]	; (8004570 <vPortValidateInterruptPriority+0x70>)
 800451e:	781b      	ldrb	r3, [r3, #0]
 8004520:	7afa      	ldrb	r2, [r7, #11]
 8004522:	429a      	cmp	r2, r3
 8004524:	d20a      	bcs.n	800453c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800452a:	f383 8811 	msr	BASEPRI, r3
 800452e:	f3bf 8f6f 	isb	sy
 8004532:	f3bf 8f4f 	dsb	sy
 8004536:	607b      	str	r3, [r7, #4]
}
 8004538:	bf00      	nop
 800453a:	e7fe      	b.n	800453a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800453c:	4b0d      	ldr	r3, [pc, #52]	; (8004574 <vPortValidateInterruptPriority+0x74>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004544:	4b0c      	ldr	r3, [pc, #48]	; (8004578 <vPortValidateInterruptPriority+0x78>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	429a      	cmp	r2, r3
 800454a:	d90a      	bls.n	8004562 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800454c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004550:	f383 8811 	msr	BASEPRI, r3
 8004554:	f3bf 8f6f 	isb	sy
 8004558:	f3bf 8f4f 	dsb	sy
 800455c:	603b      	str	r3, [r7, #0]
}
 800455e:	bf00      	nop
 8004560:	e7fe      	b.n	8004560 <vPortValidateInterruptPriority+0x60>
	}
 8004562:	bf00      	nop
 8004564:	3714      	adds	r7, #20
 8004566:	46bd      	mov	sp, r7
 8004568:	bc80      	pop	{r7}
 800456a:	4770      	bx	lr
 800456c:	e000e3f0 	.word	0xe000e3f0
 8004570:	200004a8 	.word	0x200004a8
 8004574:	e000ed0c 	.word	0xe000ed0c
 8004578:	200004ac 	.word	0x200004ac

0800457c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b08a      	sub	sp, #40	; 0x28
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004584:	2300      	movs	r3, #0
 8004586:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004588:	f7fe fffe 	bl	8003588 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800458c:	4b5b      	ldr	r3, [pc, #364]	; (80046fc <pvPortMalloc+0x180>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d101      	bne.n	8004598 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004594:	f000 f916 	bl	80047c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004598:	4b59      	ldr	r3, [pc, #356]	; (8004700 <pvPortMalloc+0x184>)
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	4013      	ands	r3, r2
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	f040 808e 	bne.w	80046c2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d01d      	beq.n	80045e8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80045ac:	2208      	movs	r2, #8
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4413      	add	r3, r2
 80045b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f003 0307 	and.w	r3, r3, #7
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d014      	beq.n	80045e8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	f023 0307 	bic.w	r3, r3, #7
 80045c4:	3308      	adds	r3, #8
 80045c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f003 0307 	and.w	r3, r3, #7
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d00a      	beq.n	80045e8 <pvPortMalloc+0x6c>
	__asm volatile
 80045d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d6:	f383 8811 	msr	BASEPRI, r3
 80045da:	f3bf 8f6f 	isb	sy
 80045de:	f3bf 8f4f 	dsb	sy
 80045e2:	617b      	str	r3, [r7, #20]
}
 80045e4:	bf00      	nop
 80045e6:	e7fe      	b.n	80045e6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d069      	beq.n	80046c2 <pvPortMalloc+0x146>
 80045ee:	4b45      	ldr	r3, [pc, #276]	; (8004704 <pvPortMalloc+0x188>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d864      	bhi.n	80046c2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80045f8:	4b43      	ldr	r3, [pc, #268]	; (8004708 <pvPortMalloc+0x18c>)
 80045fa:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80045fc:	4b42      	ldr	r3, [pc, #264]	; (8004708 <pvPortMalloc+0x18c>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004602:	e004      	b.n	800460e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004606:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800460e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	429a      	cmp	r2, r3
 8004616:	d903      	bls.n	8004620 <pvPortMalloc+0xa4>
 8004618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d1f1      	bne.n	8004604 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004620:	4b36      	ldr	r3, [pc, #216]	; (80046fc <pvPortMalloc+0x180>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004626:	429a      	cmp	r2, r3
 8004628:	d04b      	beq.n	80046c2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800462a:	6a3b      	ldr	r3, [r7, #32]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	2208      	movs	r2, #8
 8004630:	4413      	add	r3, r2
 8004632:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	6a3b      	ldr	r3, [r7, #32]
 800463a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800463c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463e:	685a      	ldr	r2, [r3, #4]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	1ad2      	subs	r2, r2, r3
 8004644:	2308      	movs	r3, #8
 8004646:	005b      	lsls	r3, r3, #1
 8004648:	429a      	cmp	r2, r3
 800464a:	d91f      	bls.n	800468c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800464c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4413      	add	r3, r2
 8004652:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004654:	69bb      	ldr	r3, [r7, #24]
 8004656:	f003 0307 	and.w	r3, r3, #7
 800465a:	2b00      	cmp	r3, #0
 800465c:	d00a      	beq.n	8004674 <pvPortMalloc+0xf8>
	__asm volatile
 800465e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004662:	f383 8811 	msr	BASEPRI, r3
 8004666:	f3bf 8f6f 	isb	sy
 800466a:	f3bf 8f4f 	dsb	sy
 800466e:	613b      	str	r3, [r7, #16]
}
 8004670:	bf00      	nop
 8004672:	e7fe      	b.n	8004672 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004676:	685a      	ldr	r2, [r3, #4]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	1ad2      	subs	r2, r2, r3
 800467c:	69bb      	ldr	r3, [r7, #24]
 800467e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004686:	69b8      	ldr	r0, [r7, #24]
 8004688:	f000 f8fe 	bl	8004888 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800468c:	4b1d      	ldr	r3, [pc, #116]	; (8004704 <pvPortMalloc+0x188>)
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	4a1b      	ldr	r2, [pc, #108]	; (8004704 <pvPortMalloc+0x188>)
 8004698:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800469a:	4b1a      	ldr	r3, [pc, #104]	; (8004704 <pvPortMalloc+0x188>)
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	4b1b      	ldr	r3, [pc, #108]	; (800470c <pvPortMalloc+0x190>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d203      	bcs.n	80046ae <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80046a6:	4b17      	ldr	r3, [pc, #92]	; (8004704 <pvPortMalloc+0x188>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a18      	ldr	r2, [pc, #96]	; (800470c <pvPortMalloc+0x190>)
 80046ac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80046ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b0:	685a      	ldr	r2, [r3, #4]
 80046b2:	4b13      	ldr	r3, [pc, #76]	; (8004700 <pvPortMalloc+0x184>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	431a      	orrs	r2, r3
 80046b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80046bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046be:	2200      	movs	r2, #0
 80046c0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80046c2:	f7fe ff6f 	bl	80035a4 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d101      	bne.n	80046d0 <pvPortMalloc+0x154>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 80046cc:	f7fb fd67 	bl	800019e <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	f003 0307 	and.w	r3, r3, #7
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d00a      	beq.n	80046f0 <pvPortMalloc+0x174>
	__asm volatile
 80046da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046de:	f383 8811 	msr	BASEPRI, r3
 80046e2:	f3bf 8f6f 	isb	sy
 80046e6:	f3bf 8f4f 	dsb	sy
 80046ea:	60fb      	str	r3, [r7, #12]
}
 80046ec:	bf00      	nop
 80046ee:	e7fe      	b.n	80046ee <pvPortMalloc+0x172>
	return pvReturn;
 80046f0:	69fb      	ldr	r3, [r7, #28]
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3728      	adds	r7, #40	; 0x28
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}
 80046fa:	bf00      	nop
 80046fc:	20002cb8 	.word	0x20002cb8
 8004700:	20002cc4 	.word	0x20002cc4
 8004704:	20002cbc 	.word	0x20002cbc
 8004708:	20002cb0 	.word	0x20002cb0
 800470c:	20002cc0 	.word	0x20002cc0

08004710 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b086      	sub	sp, #24
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d048      	beq.n	80047b4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004722:	2308      	movs	r3, #8
 8004724:	425b      	negs	r3, r3
 8004726:	697a      	ldr	r2, [r7, #20]
 8004728:	4413      	add	r3, r2
 800472a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	685a      	ldr	r2, [r3, #4]
 8004734:	4b21      	ldr	r3, [pc, #132]	; (80047bc <vPortFree+0xac>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4013      	ands	r3, r2
 800473a:	2b00      	cmp	r3, #0
 800473c:	d10a      	bne.n	8004754 <vPortFree+0x44>
	__asm volatile
 800473e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004742:	f383 8811 	msr	BASEPRI, r3
 8004746:	f3bf 8f6f 	isb	sy
 800474a:	f3bf 8f4f 	dsb	sy
 800474e:	60fb      	str	r3, [r7, #12]
}
 8004750:	bf00      	nop
 8004752:	e7fe      	b.n	8004752 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d00a      	beq.n	8004772 <vPortFree+0x62>
	__asm volatile
 800475c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004760:	f383 8811 	msr	BASEPRI, r3
 8004764:	f3bf 8f6f 	isb	sy
 8004768:	f3bf 8f4f 	dsb	sy
 800476c:	60bb      	str	r3, [r7, #8]
}
 800476e:	bf00      	nop
 8004770:	e7fe      	b.n	8004770 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	685a      	ldr	r2, [r3, #4]
 8004776:	4b11      	ldr	r3, [pc, #68]	; (80047bc <vPortFree+0xac>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4013      	ands	r3, r2
 800477c:	2b00      	cmp	r3, #0
 800477e:	d019      	beq.n	80047b4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d115      	bne.n	80047b4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	685a      	ldr	r2, [r3, #4]
 800478c:	4b0b      	ldr	r3, [pc, #44]	; (80047bc <vPortFree+0xac>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	43db      	mvns	r3, r3
 8004792:	401a      	ands	r2, r3
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004798:	f7fe fef6 	bl	8003588 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	685a      	ldr	r2, [r3, #4]
 80047a0:	4b07      	ldr	r3, [pc, #28]	; (80047c0 <vPortFree+0xb0>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4413      	add	r3, r2
 80047a6:	4a06      	ldr	r2, [pc, #24]	; (80047c0 <vPortFree+0xb0>)
 80047a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80047aa:	6938      	ldr	r0, [r7, #16]
 80047ac:	f000 f86c 	bl	8004888 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80047b0:	f7fe fef8 	bl	80035a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80047b4:	bf00      	nop
 80047b6:	3718      	adds	r7, #24
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}
 80047bc:	20002cc4 	.word	0x20002cc4
 80047c0:	20002cbc 	.word	0x20002cbc

080047c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80047c4:	b480      	push	{r7}
 80047c6:	b085      	sub	sp, #20
 80047c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80047ca:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80047ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80047d0:	4b27      	ldr	r3, [pc, #156]	; (8004870 <prvHeapInit+0xac>)
 80047d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f003 0307 	and.w	r3, r3, #7
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d00c      	beq.n	80047f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	3307      	adds	r3, #7
 80047e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f023 0307 	bic.w	r3, r3, #7
 80047ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80047ec:	68ba      	ldr	r2, [r7, #8]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	1ad3      	subs	r3, r2, r3
 80047f2:	4a1f      	ldr	r2, [pc, #124]	; (8004870 <prvHeapInit+0xac>)
 80047f4:	4413      	add	r3, r2
 80047f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80047fc:	4a1d      	ldr	r2, [pc, #116]	; (8004874 <prvHeapInit+0xb0>)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004802:	4b1c      	ldr	r3, [pc, #112]	; (8004874 <prvHeapInit+0xb0>)
 8004804:	2200      	movs	r2, #0
 8004806:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	68ba      	ldr	r2, [r7, #8]
 800480c:	4413      	add	r3, r2
 800480e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004810:	2208      	movs	r2, #8
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	1a9b      	subs	r3, r3, r2
 8004816:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f023 0307 	bic.w	r3, r3, #7
 800481e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	4a15      	ldr	r2, [pc, #84]	; (8004878 <prvHeapInit+0xb4>)
 8004824:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004826:	4b14      	ldr	r3, [pc, #80]	; (8004878 <prvHeapInit+0xb4>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	2200      	movs	r2, #0
 800482c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800482e:	4b12      	ldr	r3, [pc, #72]	; (8004878 <prvHeapInit+0xb4>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	2200      	movs	r2, #0
 8004834:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	68fa      	ldr	r2, [r7, #12]
 800483e:	1ad2      	subs	r2, r2, r3
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004844:	4b0c      	ldr	r3, [pc, #48]	; (8004878 <prvHeapInit+0xb4>)
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	4a0a      	ldr	r2, [pc, #40]	; (800487c <prvHeapInit+0xb8>)
 8004852:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	4a09      	ldr	r2, [pc, #36]	; (8004880 <prvHeapInit+0xbc>)
 800485a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800485c:	4b09      	ldr	r3, [pc, #36]	; (8004884 <prvHeapInit+0xc0>)
 800485e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004862:	601a      	str	r2, [r3, #0]
}
 8004864:	bf00      	nop
 8004866:	3714      	adds	r7, #20
 8004868:	46bd      	mov	sp, r7
 800486a:	bc80      	pop	{r7}
 800486c:	4770      	bx	lr
 800486e:	bf00      	nop
 8004870:	200004b0 	.word	0x200004b0
 8004874:	20002cb0 	.word	0x20002cb0
 8004878:	20002cb8 	.word	0x20002cb8
 800487c:	20002cc0 	.word	0x20002cc0
 8004880:	20002cbc 	.word	0x20002cbc
 8004884:	20002cc4 	.word	0x20002cc4

08004888 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004888:	b480      	push	{r7}
 800488a:	b085      	sub	sp, #20
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004890:	4b27      	ldr	r3, [pc, #156]	; (8004930 <prvInsertBlockIntoFreeList+0xa8>)
 8004892:	60fb      	str	r3, [r7, #12]
 8004894:	e002      	b.n	800489c <prvInsertBlockIntoFreeList+0x14>
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	60fb      	str	r3, [r7, #12]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d8f7      	bhi.n	8004896 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	68ba      	ldr	r2, [r7, #8]
 80048b0:	4413      	add	r3, r2
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d108      	bne.n	80048ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	685a      	ldr	r2, [r3, #4]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	441a      	add	r2, r3
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	68ba      	ldr	r2, [r7, #8]
 80048d4:	441a      	add	r2, r3
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	429a      	cmp	r2, r3
 80048dc:	d118      	bne.n	8004910 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	4b14      	ldr	r3, [pc, #80]	; (8004934 <prvInsertBlockIntoFreeList+0xac>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d00d      	beq.n	8004906 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	685a      	ldr	r2, [r3, #4]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	441a      	add	r2, r3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	601a      	str	r2, [r3, #0]
 8004904:	e008      	b.n	8004918 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004906:	4b0b      	ldr	r3, [pc, #44]	; (8004934 <prvInsertBlockIntoFreeList+0xac>)
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	601a      	str	r2, [r3, #0]
 800490e:	e003      	b.n	8004918 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004918:	68fa      	ldr	r2, [r7, #12]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	429a      	cmp	r2, r3
 800491e:	d002      	beq.n	8004926 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004926:	bf00      	nop
 8004928:	3714      	adds	r7, #20
 800492a:	46bd      	mov	sp, r7
 800492c:	bc80      	pop	{r7}
 800492e:	4770      	bx	lr
 8004930:	20002cb0 	.word	0x20002cb0
 8004934:	20002cb8 	.word	0x20002cb8

08004938 <memset>:
 8004938:	4603      	mov	r3, r0
 800493a:	4402      	add	r2, r0
 800493c:	4293      	cmp	r3, r2
 800493e:	d100      	bne.n	8004942 <memset+0xa>
 8004940:	4770      	bx	lr
 8004942:	f803 1b01 	strb.w	r1, [r3], #1
 8004946:	e7f9      	b.n	800493c <memset+0x4>

08004948 <_reclaim_reent>:
 8004948:	4b29      	ldr	r3, [pc, #164]	; (80049f0 <_reclaim_reent+0xa8>)
 800494a:	b570      	push	{r4, r5, r6, lr}
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4604      	mov	r4, r0
 8004950:	4283      	cmp	r3, r0
 8004952:	d04b      	beq.n	80049ec <_reclaim_reent+0xa4>
 8004954:	69c3      	ldr	r3, [r0, #28]
 8004956:	b143      	cbz	r3, 800496a <_reclaim_reent+0x22>
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d144      	bne.n	80049e8 <_reclaim_reent+0xa0>
 800495e:	69e3      	ldr	r3, [r4, #28]
 8004960:	6819      	ldr	r1, [r3, #0]
 8004962:	b111      	cbz	r1, 800496a <_reclaim_reent+0x22>
 8004964:	4620      	mov	r0, r4
 8004966:	f000 f881 	bl	8004a6c <_free_r>
 800496a:	6961      	ldr	r1, [r4, #20]
 800496c:	b111      	cbz	r1, 8004974 <_reclaim_reent+0x2c>
 800496e:	4620      	mov	r0, r4
 8004970:	f000 f87c 	bl	8004a6c <_free_r>
 8004974:	69e1      	ldr	r1, [r4, #28]
 8004976:	b111      	cbz	r1, 800497e <_reclaim_reent+0x36>
 8004978:	4620      	mov	r0, r4
 800497a:	f000 f877 	bl	8004a6c <_free_r>
 800497e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004980:	b111      	cbz	r1, 8004988 <_reclaim_reent+0x40>
 8004982:	4620      	mov	r0, r4
 8004984:	f000 f872 	bl	8004a6c <_free_r>
 8004988:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800498a:	b111      	cbz	r1, 8004992 <_reclaim_reent+0x4a>
 800498c:	4620      	mov	r0, r4
 800498e:	f000 f86d 	bl	8004a6c <_free_r>
 8004992:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004994:	b111      	cbz	r1, 800499c <_reclaim_reent+0x54>
 8004996:	4620      	mov	r0, r4
 8004998:	f000 f868 	bl	8004a6c <_free_r>
 800499c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800499e:	b111      	cbz	r1, 80049a6 <_reclaim_reent+0x5e>
 80049a0:	4620      	mov	r0, r4
 80049a2:	f000 f863 	bl	8004a6c <_free_r>
 80049a6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80049a8:	b111      	cbz	r1, 80049b0 <_reclaim_reent+0x68>
 80049aa:	4620      	mov	r0, r4
 80049ac:	f000 f85e 	bl	8004a6c <_free_r>
 80049b0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80049b2:	b111      	cbz	r1, 80049ba <_reclaim_reent+0x72>
 80049b4:	4620      	mov	r0, r4
 80049b6:	f000 f859 	bl	8004a6c <_free_r>
 80049ba:	6a23      	ldr	r3, [r4, #32]
 80049bc:	b1b3      	cbz	r3, 80049ec <_reclaim_reent+0xa4>
 80049be:	4620      	mov	r0, r4
 80049c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80049c4:	4718      	bx	r3
 80049c6:	5949      	ldr	r1, [r1, r5]
 80049c8:	b941      	cbnz	r1, 80049dc <_reclaim_reent+0x94>
 80049ca:	3504      	adds	r5, #4
 80049cc:	69e3      	ldr	r3, [r4, #28]
 80049ce:	2d80      	cmp	r5, #128	; 0x80
 80049d0:	68d9      	ldr	r1, [r3, #12]
 80049d2:	d1f8      	bne.n	80049c6 <_reclaim_reent+0x7e>
 80049d4:	4620      	mov	r0, r4
 80049d6:	f000 f849 	bl	8004a6c <_free_r>
 80049da:	e7c0      	b.n	800495e <_reclaim_reent+0x16>
 80049dc:	680e      	ldr	r6, [r1, #0]
 80049de:	4620      	mov	r0, r4
 80049e0:	f000 f844 	bl	8004a6c <_free_r>
 80049e4:	4631      	mov	r1, r6
 80049e6:	e7ef      	b.n	80049c8 <_reclaim_reent+0x80>
 80049e8:	2500      	movs	r5, #0
 80049ea:	e7ef      	b.n	80049cc <_reclaim_reent+0x84>
 80049ec:	bd70      	pop	{r4, r5, r6, pc}
 80049ee:	bf00      	nop
 80049f0:	2000005c 	.word	0x2000005c

080049f4 <__libc_init_array>:
 80049f4:	b570      	push	{r4, r5, r6, lr}
 80049f6:	2600      	movs	r6, #0
 80049f8:	4d0c      	ldr	r5, [pc, #48]	; (8004a2c <__libc_init_array+0x38>)
 80049fa:	4c0d      	ldr	r4, [pc, #52]	; (8004a30 <__libc_init_array+0x3c>)
 80049fc:	1b64      	subs	r4, r4, r5
 80049fe:	10a4      	asrs	r4, r4, #2
 8004a00:	42a6      	cmp	r6, r4
 8004a02:	d109      	bne.n	8004a18 <__libc_init_array+0x24>
 8004a04:	f000 f886 	bl	8004b14 <_init>
 8004a08:	2600      	movs	r6, #0
 8004a0a:	4d0a      	ldr	r5, [pc, #40]	; (8004a34 <__libc_init_array+0x40>)
 8004a0c:	4c0a      	ldr	r4, [pc, #40]	; (8004a38 <__libc_init_array+0x44>)
 8004a0e:	1b64      	subs	r4, r4, r5
 8004a10:	10a4      	asrs	r4, r4, #2
 8004a12:	42a6      	cmp	r6, r4
 8004a14:	d105      	bne.n	8004a22 <__libc_init_array+0x2e>
 8004a16:	bd70      	pop	{r4, r5, r6, pc}
 8004a18:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a1c:	4798      	blx	r3
 8004a1e:	3601      	adds	r6, #1
 8004a20:	e7ee      	b.n	8004a00 <__libc_init_array+0xc>
 8004a22:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a26:	4798      	blx	r3
 8004a28:	3601      	adds	r6, #1
 8004a2a:	e7f2      	b.n	8004a12 <__libc_init_array+0x1e>
 8004a2c:	08004c20 	.word	0x08004c20
 8004a30:	08004c20 	.word	0x08004c20
 8004a34:	08004c20 	.word	0x08004c20
 8004a38:	08004c24 	.word	0x08004c24

08004a3c <__retarget_lock_acquire_recursive>:
 8004a3c:	4770      	bx	lr

08004a3e <__retarget_lock_release_recursive>:
 8004a3e:	4770      	bx	lr

08004a40 <strcpy>:
 8004a40:	4603      	mov	r3, r0
 8004a42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004a46:	f803 2b01 	strb.w	r2, [r3], #1
 8004a4a:	2a00      	cmp	r2, #0
 8004a4c:	d1f9      	bne.n	8004a42 <strcpy+0x2>
 8004a4e:	4770      	bx	lr

08004a50 <memcpy>:
 8004a50:	440a      	add	r2, r1
 8004a52:	4291      	cmp	r1, r2
 8004a54:	f100 33ff 	add.w	r3, r0, #4294967295
 8004a58:	d100      	bne.n	8004a5c <memcpy+0xc>
 8004a5a:	4770      	bx	lr
 8004a5c:	b510      	push	{r4, lr}
 8004a5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a62:	4291      	cmp	r1, r2
 8004a64:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a68:	d1f9      	bne.n	8004a5e <memcpy+0xe>
 8004a6a:	bd10      	pop	{r4, pc}

08004a6c <_free_r>:
 8004a6c:	b538      	push	{r3, r4, r5, lr}
 8004a6e:	4605      	mov	r5, r0
 8004a70:	2900      	cmp	r1, #0
 8004a72:	d040      	beq.n	8004af6 <_free_r+0x8a>
 8004a74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a78:	1f0c      	subs	r4, r1, #4
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	bfb8      	it	lt
 8004a7e:	18e4      	addlt	r4, r4, r3
 8004a80:	f000 f83c 	bl	8004afc <__malloc_lock>
 8004a84:	4a1c      	ldr	r2, [pc, #112]	; (8004af8 <_free_r+0x8c>)
 8004a86:	6813      	ldr	r3, [r2, #0]
 8004a88:	b933      	cbnz	r3, 8004a98 <_free_r+0x2c>
 8004a8a:	6063      	str	r3, [r4, #4]
 8004a8c:	6014      	str	r4, [r2, #0]
 8004a8e:	4628      	mov	r0, r5
 8004a90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a94:	f000 b838 	b.w	8004b08 <__malloc_unlock>
 8004a98:	42a3      	cmp	r3, r4
 8004a9a:	d908      	bls.n	8004aae <_free_r+0x42>
 8004a9c:	6820      	ldr	r0, [r4, #0]
 8004a9e:	1821      	adds	r1, r4, r0
 8004aa0:	428b      	cmp	r3, r1
 8004aa2:	bf01      	itttt	eq
 8004aa4:	6819      	ldreq	r1, [r3, #0]
 8004aa6:	685b      	ldreq	r3, [r3, #4]
 8004aa8:	1809      	addeq	r1, r1, r0
 8004aaa:	6021      	streq	r1, [r4, #0]
 8004aac:	e7ed      	b.n	8004a8a <_free_r+0x1e>
 8004aae:	461a      	mov	r2, r3
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	b10b      	cbz	r3, 8004ab8 <_free_r+0x4c>
 8004ab4:	42a3      	cmp	r3, r4
 8004ab6:	d9fa      	bls.n	8004aae <_free_r+0x42>
 8004ab8:	6811      	ldr	r1, [r2, #0]
 8004aba:	1850      	adds	r0, r2, r1
 8004abc:	42a0      	cmp	r0, r4
 8004abe:	d10b      	bne.n	8004ad8 <_free_r+0x6c>
 8004ac0:	6820      	ldr	r0, [r4, #0]
 8004ac2:	4401      	add	r1, r0
 8004ac4:	1850      	adds	r0, r2, r1
 8004ac6:	4283      	cmp	r3, r0
 8004ac8:	6011      	str	r1, [r2, #0]
 8004aca:	d1e0      	bne.n	8004a8e <_free_r+0x22>
 8004acc:	6818      	ldr	r0, [r3, #0]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	4408      	add	r0, r1
 8004ad2:	6010      	str	r0, [r2, #0]
 8004ad4:	6053      	str	r3, [r2, #4]
 8004ad6:	e7da      	b.n	8004a8e <_free_r+0x22>
 8004ad8:	d902      	bls.n	8004ae0 <_free_r+0x74>
 8004ada:	230c      	movs	r3, #12
 8004adc:	602b      	str	r3, [r5, #0]
 8004ade:	e7d6      	b.n	8004a8e <_free_r+0x22>
 8004ae0:	6820      	ldr	r0, [r4, #0]
 8004ae2:	1821      	adds	r1, r4, r0
 8004ae4:	428b      	cmp	r3, r1
 8004ae6:	bf01      	itttt	eq
 8004ae8:	6819      	ldreq	r1, [r3, #0]
 8004aea:	685b      	ldreq	r3, [r3, #4]
 8004aec:	1809      	addeq	r1, r1, r0
 8004aee:	6021      	streq	r1, [r4, #0]
 8004af0:	6063      	str	r3, [r4, #4]
 8004af2:	6054      	str	r4, [r2, #4]
 8004af4:	e7cb      	b.n	8004a8e <_free_r+0x22>
 8004af6:	bd38      	pop	{r3, r4, r5, pc}
 8004af8:	20002e04 	.word	0x20002e04

08004afc <__malloc_lock>:
 8004afc:	4801      	ldr	r0, [pc, #4]	; (8004b04 <__malloc_lock+0x8>)
 8004afe:	f7ff bf9d 	b.w	8004a3c <__retarget_lock_acquire_recursive>
 8004b02:	bf00      	nop
 8004b04:	20002e00 	.word	0x20002e00

08004b08 <__malloc_unlock>:
 8004b08:	4801      	ldr	r0, [pc, #4]	; (8004b10 <__malloc_unlock+0x8>)
 8004b0a:	f7ff bf98 	b.w	8004a3e <__retarget_lock_release_recursive>
 8004b0e:	bf00      	nop
 8004b10:	20002e00 	.word	0x20002e00

08004b14 <_init>:
 8004b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b16:	bf00      	nop
 8004b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b1a:	bc08      	pop	{r3}
 8004b1c:	469e      	mov	lr, r3
 8004b1e:	4770      	bx	lr

08004b20 <_fini>:
 8004b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b22:	bf00      	nop
 8004b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b26:	bc08      	pop	{r3}
 8004b28:	469e      	mov	lr, r3
 8004b2a:	4770      	bx	lr
