
freertos_singlethread_without_CMSIS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003958  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08003a68  08003a68  00013a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b08  08003b08  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08003b08  08003b08  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003b08  08003b08  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b08  08003b08  00013b08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b0c  08003b0c  00013b0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08003b10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011e8  20000060  08003b70  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001248  08003b70  00021248  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ef52  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002628  00000000  00000000  0002f01e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e50  00000000  00000000  00031648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b21  00000000  00000000  00032498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018c53  00000000  00000000  00032fb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010f00  00000000  00000000  0004bc0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000918fc  00000000  00000000  0005cb0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003fd8  00000000  00000000  000ee408  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a7  00000000  00000000  000f23e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	08003a50 	.word	0x08003a50

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	08003a50 	.word	0x08003a50

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	; (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	; (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	; 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	2000007c 	.word	0x2000007c
 800017c:	2000011c 	.word	0x2000011c

08000180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000180:	b580      	push	{r7, lr}
 8000182:	b086      	sub	sp, #24
 8000184:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  TaskHandle_t xHandleLed = NULL;
 8000186:	2300      	movs	r3, #0
 8000188:	60bb      	str	r3, [r7, #8]
  TaskHandle_t xHandleText = NULL;
 800018a:	2300      	movs	r3, #0
 800018c:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800018e:	f000 faaf 	bl	80006f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000192:	f000 f827 	bl	80001e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000196:	f000 f88b 	bl	80002b0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800019a:	f000 f85f 	bl	800025c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  xReturned=xTaskCreate(led_flash_task,"ledFlash", 256, NULL, 0, &xHandleLed);
 800019e:	f107 0308 	add.w	r3, r7, #8
 80001a2:	9301      	str	r3, [sp, #4]
 80001a4:	2300      	movs	r3, #0
 80001a6:	9300      	str	r3, [sp, #0]
 80001a8:	2300      	movs	r3, #0
 80001aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80001ae:	4909      	ldr	r1, [pc, #36]	; (80001d4 <main+0x54>)
 80001b0:	4809      	ldr	r0, [pc, #36]	; (80001d8 <main+0x58>)
 80001b2:	f001 feca 	bl	8001f4a <xTaskCreate>
 80001b6:	60f8      	str	r0, [r7, #12]

  xTaskCreate(sendtext,"sendText", 256, NULL, 0, &xHandleText);
 80001b8:	1d3b      	adds	r3, r7, #4
 80001ba:	9301      	str	r3, [sp, #4]
 80001bc:	2300      	movs	r3, #0
 80001be:	9300      	str	r3, [sp, #0]
 80001c0:	2300      	movs	r3, #0
 80001c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80001c6:	4905      	ldr	r1, [pc, #20]	; (80001dc <main+0x5c>)
 80001c8:	4805      	ldr	r0, [pc, #20]	; (80001e0 <main+0x60>)
 80001ca:	f001 febe 	bl	8001f4a <xTaskCreate>


  vTaskStartScheduler();
 80001ce:	f002 f835 	bl	800223c <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001d2:	e7fe      	b.n	80001d2 <main+0x52>
 80001d4:	08003a68 	.word	0x08003a68
 80001d8:	08000349 	.word	0x08000349
 80001dc:	08003a74 	.word	0x08003a74
 80001e0:	08000369 	.word	0x08000369

080001e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b090      	sub	sp, #64	; 0x40
 80001e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ea:	f107 0318 	add.w	r3, r7, #24
 80001ee:	2228      	movs	r2, #40	; 0x28
 80001f0:	2100      	movs	r1, #0
 80001f2:	4618      	mov	r0, r3
 80001f4:	f002 ff44 	bl	8003080 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001f8:	1d3b      	adds	r3, r7, #4
 80001fa:	2200      	movs	r2, #0
 80001fc:	601a      	str	r2, [r3, #0]
 80001fe:	605a      	str	r2, [r3, #4]
 8000200:	609a      	str	r2, [r3, #8]
 8000202:	60da      	str	r2, [r3, #12]
 8000204:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000206:	2302      	movs	r3, #2
 8000208:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800020a:	2301      	movs	r3, #1
 800020c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800020e:	2310      	movs	r3, #16
 8000210:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000212:	2300      	movs	r3, #0
 8000214:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000216:	f107 0318 	add.w	r3, r7, #24
 800021a:	4618      	mov	r0, r3
 800021c:	f000 fd30 	bl	8000c80 <HAL_RCC_OscConfig>
 8000220:	4603      	mov	r3, r0
 8000222:	2b00      	cmp	r3, #0
 8000224:	d001      	beq.n	800022a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000226:	f000 f8dc 	bl	80003e2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800022a:	230f      	movs	r3, #15
 800022c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800022e:	2300      	movs	r3, #0
 8000230:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000232:	2300      	movs	r3, #0
 8000234:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000236:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800023a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800023c:	2300      	movs	r3, #0
 800023e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000240:	1d3b      	adds	r3, r7, #4
 8000242:	2100      	movs	r1, #0
 8000244:	4618      	mov	r0, r3
 8000246:	f000 ff9d 	bl	8001184 <HAL_RCC_ClockConfig>
 800024a:	4603      	mov	r3, r0
 800024c:	2b00      	cmp	r3, #0
 800024e:	d001      	beq.n	8000254 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000250:	f000 f8c7 	bl	80003e2 <Error_Handler>
  }
}
 8000254:	bf00      	nop
 8000256:	3740      	adds	r7, #64	; 0x40
 8000258:	46bd      	mov	sp, r7
 800025a:	bd80      	pop	{r7, pc}

0800025c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000260:	4b11      	ldr	r3, [pc, #68]	; (80002a8 <MX_USART1_UART_Init+0x4c>)
 8000262:	4a12      	ldr	r2, [pc, #72]	; (80002ac <MX_USART1_UART_Init+0x50>)
 8000264:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000266:	4b10      	ldr	r3, [pc, #64]	; (80002a8 <MX_USART1_UART_Init+0x4c>)
 8000268:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800026c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800026e:	4b0e      	ldr	r3, [pc, #56]	; (80002a8 <MX_USART1_UART_Init+0x4c>)
 8000270:	2200      	movs	r2, #0
 8000272:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000274:	4b0c      	ldr	r3, [pc, #48]	; (80002a8 <MX_USART1_UART_Init+0x4c>)
 8000276:	2200      	movs	r2, #0
 8000278:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800027a:	4b0b      	ldr	r3, [pc, #44]	; (80002a8 <MX_USART1_UART_Init+0x4c>)
 800027c:	2200      	movs	r2, #0
 800027e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000280:	4b09      	ldr	r3, [pc, #36]	; (80002a8 <MX_USART1_UART_Init+0x4c>)
 8000282:	220c      	movs	r2, #12
 8000284:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000286:	4b08      	ldr	r3, [pc, #32]	; (80002a8 <MX_USART1_UART_Init+0x4c>)
 8000288:	2200      	movs	r2, #0
 800028a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800028c:	4b06      	ldr	r3, [pc, #24]	; (80002a8 <MX_USART1_UART_Init+0x4c>)
 800028e:	2200      	movs	r2, #0
 8000290:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000292:	4805      	ldr	r0, [pc, #20]	; (80002a8 <MX_USART1_UART_Init+0x4c>)
 8000294:	f001 fb7e 	bl	8001994 <HAL_UART_Init>
 8000298:	4603      	mov	r3, r0
 800029a:	2b00      	cmp	r3, #0
 800029c:	d001      	beq.n	80002a2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800029e:	f000 f8a0 	bl	80003e2 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80002a2:	bf00      	nop
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	2000031c 	.word	0x2000031c
 80002ac:	40013800 	.word	0x40013800

080002b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b088      	sub	sp, #32
 80002b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002b6:	f107 0310 	add.w	r3, r7, #16
 80002ba:	2200      	movs	r2, #0
 80002bc:	601a      	str	r2, [r3, #0]
 80002be:	605a      	str	r2, [r3, #4]
 80002c0:	609a      	str	r2, [r3, #8]
 80002c2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002c4:	4b1e      	ldr	r3, [pc, #120]	; (8000340 <MX_GPIO_Init+0x90>)
 80002c6:	699b      	ldr	r3, [r3, #24]
 80002c8:	4a1d      	ldr	r2, [pc, #116]	; (8000340 <MX_GPIO_Init+0x90>)
 80002ca:	f043 0310 	orr.w	r3, r3, #16
 80002ce:	6193      	str	r3, [r2, #24]
 80002d0:	4b1b      	ldr	r3, [pc, #108]	; (8000340 <MX_GPIO_Init+0x90>)
 80002d2:	699b      	ldr	r3, [r3, #24]
 80002d4:	f003 0310 	and.w	r3, r3, #16
 80002d8:	60fb      	str	r3, [r7, #12]
 80002da:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002dc:	4b18      	ldr	r3, [pc, #96]	; (8000340 <MX_GPIO_Init+0x90>)
 80002de:	699b      	ldr	r3, [r3, #24]
 80002e0:	4a17      	ldr	r2, [pc, #92]	; (8000340 <MX_GPIO_Init+0x90>)
 80002e2:	f043 0320 	orr.w	r3, r3, #32
 80002e6:	6193      	str	r3, [r2, #24]
 80002e8:	4b15      	ldr	r3, [pc, #84]	; (8000340 <MX_GPIO_Init+0x90>)
 80002ea:	699b      	ldr	r3, [r3, #24]
 80002ec:	f003 0320 	and.w	r3, r3, #32
 80002f0:	60bb      	str	r3, [r7, #8]
 80002f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002f4:	4b12      	ldr	r3, [pc, #72]	; (8000340 <MX_GPIO_Init+0x90>)
 80002f6:	699b      	ldr	r3, [r3, #24]
 80002f8:	4a11      	ldr	r2, [pc, #68]	; (8000340 <MX_GPIO_Init+0x90>)
 80002fa:	f043 0304 	orr.w	r3, r3, #4
 80002fe:	6193      	str	r3, [r2, #24]
 8000300:	4b0f      	ldr	r3, [pc, #60]	; (8000340 <MX_GPIO_Init+0x90>)
 8000302:	699b      	ldr	r3, [r3, #24]
 8000304:	f003 0304 	and.w	r3, r3, #4
 8000308:	607b      	str	r3, [r7, #4]
 800030a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800030c:	2200      	movs	r2, #0
 800030e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000312:	480c      	ldr	r0, [pc, #48]	; (8000344 <MX_GPIO_Init+0x94>)
 8000314:	f000 fc82 	bl	8000c1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000318:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800031c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800031e:	2301      	movs	r3, #1
 8000320:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000322:	2300      	movs	r3, #0
 8000324:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000326:	2302      	movs	r3, #2
 8000328:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800032a:	f107 0310 	add.w	r3, r7, #16
 800032e:	4619      	mov	r1, r3
 8000330:	4804      	ldr	r0, [pc, #16]	; (8000344 <MX_GPIO_Init+0x94>)
 8000332:	f000 faef 	bl	8000914 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000336:	bf00      	nop
 8000338:	3720      	adds	r7, #32
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	40021000 	.word	0x40021000
 8000344:	40011000 	.word	0x40011000

08000348 <led_flash_task>:

/* USER CODE BEGIN 4 */
void led_flash_task( void *pvParameters )
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
    while(1) {
        /* Toggle the LED. */
    	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000350:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000354:	4803      	ldr	r0, [pc, #12]	; (8000364 <led_flash_task+0x1c>)
 8000356:	f000 fc79 	bl	8000c4c <HAL_GPIO_TogglePin>

        /* Wait one second. */
        vTaskDelay(1000);
 800035a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800035e:	f001 ff39 	bl	80021d4 <vTaskDelay>
    	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000362:	e7f5      	b.n	8000350 <led_flash_task+0x8>
 8000364:	40011000 	.word	0x40011000

08000368 <sendtext>:
    }
}

void sendtext( void *pvParameters )
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b08c      	sub	sp, #48	; 0x30
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN sendtext */
   uint8_t message[35] = {'\0'};
 8000370:	2300      	movs	r3, #0
 8000372:	60fb      	str	r3, [r7, #12]
 8000374:	f107 0310 	add.w	r3, r7, #16
 8000378:	221f      	movs	r2, #31
 800037a:	2100      	movs	r1, #0
 800037c:	4618      	mov	r0, r3
 800037e:	f002 fe7f 	bl	8003080 <memset>
   uint8_t num = 0;
 8000382:	2300      	movs	r3, #0
 8000384:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  /* Infinite loop */
  while(1)
  {
	  /* USER CODE END WHILE */
	sprintf(message, "Welcome to lab! Counting = %d\r\n", num);
 8000388:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800038c:	f107 030c 	add.w	r3, r7, #12
 8000390:	490a      	ldr	r1, [pc, #40]	; (80003bc <sendtext+0x54>)
 8000392:	4618      	mov	r0, r3
 8000394:	f002 fe54 	bl	8003040 <siprintf>
	HAL_UART_Transmit(&huart1, message, sizeof(message), 100);
 8000398:	f107 010c 	add.w	r1, r7, #12
 800039c:	2364      	movs	r3, #100	; 0x64
 800039e:	2223      	movs	r2, #35	; 0x23
 80003a0:	4807      	ldr	r0, [pc, #28]	; (80003c0 <sendtext+0x58>)
 80003a2:	f001 fb47 	bl	8001a34 <HAL_UART_Transmit>
	num++;
 80003a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80003aa:	3301      	adds	r3, #1
 80003ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	vTaskDelay(1000);
 80003b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003b4:	f001 ff0e 	bl	80021d4 <vTaskDelay>
  {
 80003b8:	e7e6      	b.n	8000388 <sendtext+0x20>
 80003ba:	bf00      	nop
 80003bc:	08003a80 	.word	0x08003a80
 80003c0:	2000031c 	.word	0x2000031c

080003c4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b082      	sub	sp, #8
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80003d4:	d101      	bne.n	80003da <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80003d6:	f000 f9a1 	bl	800071c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80003da:	bf00      	nop
 80003dc:	3708      	adds	r7, #8
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}

080003e2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003e2:	b480      	push	{r7}
 80003e4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003e6:	b672      	cpsid	i
}
 80003e8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003ea:	e7fe      	b.n	80003ea <Error_Handler+0x8>

080003ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b084      	sub	sp, #16
 80003f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003f2:	4b18      	ldr	r3, [pc, #96]	; (8000454 <HAL_MspInit+0x68>)
 80003f4:	699b      	ldr	r3, [r3, #24]
 80003f6:	4a17      	ldr	r2, [pc, #92]	; (8000454 <HAL_MspInit+0x68>)
 80003f8:	f043 0301 	orr.w	r3, r3, #1
 80003fc:	6193      	str	r3, [r2, #24]
 80003fe:	4b15      	ldr	r3, [pc, #84]	; (8000454 <HAL_MspInit+0x68>)
 8000400:	699b      	ldr	r3, [r3, #24]
 8000402:	f003 0301 	and.w	r3, r3, #1
 8000406:	60bb      	str	r3, [r7, #8]
 8000408:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800040a:	4b12      	ldr	r3, [pc, #72]	; (8000454 <HAL_MspInit+0x68>)
 800040c:	69db      	ldr	r3, [r3, #28]
 800040e:	4a11      	ldr	r2, [pc, #68]	; (8000454 <HAL_MspInit+0x68>)
 8000410:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000414:	61d3      	str	r3, [r2, #28]
 8000416:	4b0f      	ldr	r3, [pc, #60]	; (8000454 <HAL_MspInit+0x68>)
 8000418:	69db      	ldr	r3, [r3, #28]
 800041a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800041e:	607b      	str	r3, [r7, #4]
 8000420:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000422:	2200      	movs	r2, #0
 8000424:	210f      	movs	r1, #15
 8000426:	f06f 0001 	mvn.w	r0, #1
 800042a:	f000 fa48 	bl	80008be <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800042e:	4b0a      	ldr	r3, [pc, #40]	; (8000458 <HAL_MspInit+0x6c>)
 8000430:	685b      	ldr	r3, [r3, #4]
 8000432:	60fb      	str	r3, [r7, #12]
 8000434:	68fb      	ldr	r3, [r7, #12]
 8000436:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800043a:	60fb      	str	r3, [r7, #12]
 800043c:	68fb      	ldr	r3, [r7, #12]
 800043e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000442:	60fb      	str	r3, [r7, #12]
 8000444:	4a04      	ldr	r2, [pc, #16]	; (8000458 <HAL_MspInit+0x6c>)
 8000446:	68fb      	ldr	r3, [r7, #12]
 8000448:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800044a:	bf00      	nop
 800044c:	3710      	adds	r7, #16
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	40021000 	.word	0x40021000
 8000458:	40010000 	.word	0x40010000

0800045c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b088      	sub	sp, #32
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000464:	f107 0310 	add.w	r3, r7, #16
 8000468:	2200      	movs	r2, #0
 800046a:	601a      	str	r2, [r3, #0]
 800046c:	605a      	str	r2, [r3, #4]
 800046e:	609a      	str	r2, [r3, #8]
 8000470:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	4a1c      	ldr	r2, [pc, #112]	; (80004e8 <HAL_UART_MspInit+0x8c>)
 8000478:	4293      	cmp	r3, r2
 800047a:	d131      	bne.n	80004e0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800047c:	4b1b      	ldr	r3, [pc, #108]	; (80004ec <HAL_UART_MspInit+0x90>)
 800047e:	699b      	ldr	r3, [r3, #24]
 8000480:	4a1a      	ldr	r2, [pc, #104]	; (80004ec <HAL_UART_MspInit+0x90>)
 8000482:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000486:	6193      	str	r3, [r2, #24]
 8000488:	4b18      	ldr	r3, [pc, #96]	; (80004ec <HAL_UART_MspInit+0x90>)
 800048a:	699b      	ldr	r3, [r3, #24]
 800048c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000490:	60fb      	str	r3, [r7, #12]
 8000492:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000494:	4b15      	ldr	r3, [pc, #84]	; (80004ec <HAL_UART_MspInit+0x90>)
 8000496:	699b      	ldr	r3, [r3, #24]
 8000498:	4a14      	ldr	r2, [pc, #80]	; (80004ec <HAL_UART_MspInit+0x90>)
 800049a:	f043 0304 	orr.w	r3, r3, #4
 800049e:	6193      	str	r3, [r2, #24]
 80004a0:	4b12      	ldr	r3, [pc, #72]	; (80004ec <HAL_UART_MspInit+0x90>)
 80004a2:	699b      	ldr	r3, [r3, #24]
 80004a4:	f003 0304 	and.w	r3, r3, #4
 80004a8:	60bb      	str	r3, [r7, #8]
 80004aa:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80004ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80004b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004b2:	2302      	movs	r3, #2
 80004b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004b6:	2303      	movs	r3, #3
 80004b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ba:	f107 0310 	add.w	r3, r7, #16
 80004be:	4619      	mov	r1, r3
 80004c0:	480b      	ldr	r0, [pc, #44]	; (80004f0 <HAL_UART_MspInit+0x94>)
 80004c2:	f000 fa27 	bl	8000914 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80004c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004cc:	2300      	movs	r3, #0
 80004ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d0:	2300      	movs	r3, #0
 80004d2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004d4:	f107 0310 	add.w	r3, r7, #16
 80004d8:	4619      	mov	r1, r3
 80004da:	4805      	ldr	r0, [pc, #20]	; (80004f0 <HAL_UART_MspInit+0x94>)
 80004dc:	f000 fa1a 	bl	8000914 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80004e0:	bf00      	nop
 80004e2:	3720      	adds	r7, #32
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	40013800 	.word	0x40013800
 80004ec:	40021000 	.word	0x40021000
 80004f0:	40010800 	.word	0x40010800

080004f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b08e      	sub	sp, #56	; 0x38
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80004fc:	2300      	movs	r3, #0
 80004fe:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000500:	2300      	movs	r3, #0
 8000502:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000504:	2300      	movs	r3, #0
 8000506:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800050a:	4b34      	ldr	r3, [pc, #208]	; (80005dc <HAL_InitTick+0xe8>)
 800050c:	69db      	ldr	r3, [r3, #28]
 800050e:	4a33      	ldr	r2, [pc, #204]	; (80005dc <HAL_InitTick+0xe8>)
 8000510:	f043 0301 	orr.w	r3, r3, #1
 8000514:	61d3      	str	r3, [r2, #28]
 8000516:	4b31      	ldr	r3, [pc, #196]	; (80005dc <HAL_InitTick+0xe8>)
 8000518:	69db      	ldr	r3, [r3, #28]
 800051a:	f003 0301 	and.w	r3, r3, #1
 800051e:	60fb      	str	r3, [r7, #12]
 8000520:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000522:	f107 0210 	add.w	r2, r7, #16
 8000526:	f107 0314 	add.w	r3, r7, #20
 800052a:	4611      	mov	r1, r2
 800052c:	4618      	mov	r0, r3
 800052e:	f000 ff99 	bl	8001464 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000532:	6a3b      	ldr	r3, [r7, #32]
 8000534:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000538:	2b00      	cmp	r3, #0
 800053a:	d103      	bne.n	8000544 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800053c:	f000 ff6a 	bl	8001414 <HAL_RCC_GetPCLK1Freq>
 8000540:	6378      	str	r0, [r7, #52]	; 0x34
 8000542:	e004      	b.n	800054e <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000544:	f000 ff66 	bl	8001414 <HAL_RCC_GetPCLK1Freq>
 8000548:	4603      	mov	r3, r0
 800054a:	005b      	lsls	r3, r3, #1
 800054c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800054e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000550:	4a23      	ldr	r2, [pc, #140]	; (80005e0 <HAL_InitTick+0xec>)
 8000552:	fba2 2303 	umull	r2, r3, r2, r3
 8000556:	0c9b      	lsrs	r3, r3, #18
 8000558:	3b01      	subs	r3, #1
 800055a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800055c:	4b21      	ldr	r3, [pc, #132]	; (80005e4 <HAL_InitTick+0xf0>)
 800055e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000562:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000564:	4b1f      	ldr	r3, [pc, #124]	; (80005e4 <HAL_InitTick+0xf0>)
 8000566:	f240 32e7 	movw	r2, #999	; 0x3e7
 800056a:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800056c:	4a1d      	ldr	r2, [pc, #116]	; (80005e4 <HAL_InitTick+0xf0>)
 800056e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000570:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000572:	4b1c      	ldr	r3, [pc, #112]	; (80005e4 <HAL_InitTick+0xf0>)
 8000574:	2200      	movs	r2, #0
 8000576:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000578:	4b1a      	ldr	r3, [pc, #104]	; (80005e4 <HAL_InitTick+0xf0>)
 800057a:	2200      	movs	r2, #0
 800057c:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800057e:	4b19      	ldr	r3, [pc, #100]	; (80005e4 <HAL_InitTick+0xf0>)
 8000580:	2200      	movs	r2, #0
 8000582:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8000584:	4817      	ldr	r0, [pc, #92]	; (80005e4 <HAL_InitTick+0xf0>)
 8000586:	f000 ffbb 	bl	8001500 <HAL_TIM_Base_Init>
 800058a:	4603      	mov	r3, r0
 800058c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000590:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000594:	2b00      	cmp	r3, #0
 8000596:	d11b      	bne.n	80005d0 <HAL_InitTick+0xdc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000598:	4812      	ldr	r0, [pc, #72]	; (80005e4 <HAL_InitTick+0xf0>)
 800059a:	f001 f809 	bl	80015b0 <HAL_TIM_Base_Start_IT>
 800059e:	4603      	mov	r3, r0
 80005a0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80005a4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d111      	bne.n	80005d0 <HAL_InitTick+0xdc>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80005ac:	201c      	movs	r0, #28
 80005ae:	f000 f9a2 	bl	80008f6 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	2b0f      	cmp	r3, #15
 80005b6:	d808      	bhi.n	80005ca <HAL_InitTick+0xd6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80005b8:	2200      	movs	r2, #0
 80005ba:	6879      	ldr	r1, [r7, #4]
 80005bc:	201c      	movs	r0, #28
 80005be:	f000 f97e 	bl	80008be <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80005c2:	4a09      	ldr	r2, [pc, #36]	; (80005e8 <HAL_InitTick+0xf4>)
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	6013      	str	r3, [r2, #0]
 80005c8:	e002      	b.n	80005d0 <HAL_InitTick+0xdc>
      }
      else
      {
        status = HAL_ERROR;
 80005ca:	2301      	movs	r3, #1
 80005cc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80005d0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80005d4:	4618      	mov	r0, r3
 80005d6:	3738      	adds	r7, #56	; 0x38
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	40021000 	.word	0x40021000
 80005e0:	431bde83 	.word	0x431bde83
 80005e4:	20000364 	.word	0x20000364
 80005e8:	20000004 	.word	0x20000004

080005ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005f0:	e7fe      	b.n	80005f0 <NMI_Handler+0x4>

080005f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005f2:	b480      	push	{r7}
 80005f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005f6:	e7fe      	b.n	80005f6 <HardFault_Handler+0x4>

080005f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005fc:	e7fe      	b.n	80005fc <MemManage_Handler+0x4>

080005fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005fe:	b480      	push	{r7}
 8000600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000602:	e7fe      	b.n	8000602 <BusFault_Handler+0x4>

08000604 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000608:	e7fe      	b.n	8000608 <UsageFault_Handler+0x4>

0800060a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800060a:	b480      	push	{r7}
 800060c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800060e:	bf00      	nop
 8000610:	46bd      	mov	sp, r7
 8000612:	bc80      	pop	{r7}
 8000614:	4770      	bx	lr
	...

08000618 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800061c:	4802      	ldr	r0, [pc, #8]	; (8000628 <TIM2_IRQHandler+0x10>)
 800061e:	f001 f819 	bl	8001654 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000622:	bf00      	nop
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	20000364 	.word	0x20000364

0800062c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b086      	sub	sp, #24
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000634:	4a14      	ldr	r2, [pc, #80]	; (8000688 <_sbrk+0x5c>)
 8000636:	4b15      	ldr	r3, [pc, #84]	; (800068c <_sbrk+0x60>)
 8000638:	1ad3      	subs	r3, r2, r3
 800063a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800063c:	697b      	ldr	r3, [r7, #20]
 800063e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000640:	4b13      	ldr	r3, [pc, #76]	; (8000690 <_sbrk+0x64>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d102      	bne.n	800064e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000648:	4b11      	ldr	r3, [pc, #68]	; (8000690 <_sbrk+0x64>)
 800064a:	4a12      	ldr	r2, [pc, #72]	; (8000694 <_sbrk+0x68>)
 800064c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800064e:	4b10      	ldr	r3, [pc, #64]	; (8000690 <_sbrk+0x64>)
 8000650:	681a      	ldr	r2, [r3, #0]
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	4413      	add	r3, r2
 8000656:	693a      	ldr	r2, [r7, #16]
 8000658:	429a      	cmp	r2, r3
 800065a:	d207      	bcs.n	800066c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800065c:	f002 fd6e 	bl	800313c <__errno>
 8000660:	4603      	mov	r3, r0
 8000662:	220c      	movs	r2, #12
 8000664:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000666:	f04f 33ff 	mov.w	r3, #4294967295
 800066a:	e009      	b.n	8000680 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800066c:	4b08      	ldr	r3, [pc, #32]	; (8000690 <_sbrk+0x64>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000672:	4b07      	ldr	r3, [pc, #28]	; (8000690 <_sbrk+0x64>)
 8000674:	681a      	ldr	r2, [r3, #0]
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	4413      	add	r3, r2
 800067a:	4a05      	ldr	r2, [pc, #20]	; (8000690 <_sbrk+0x64>)
 800067c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800067e:	68fb      	ldr	r3, [r7, #12]
}
 8000680:	4618      	mov	r0, r3
 8000682:	3718      	adds	r7, #24
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	20005000 	.word	0x20005000
 800068c:	00000400 	.word	0x00000400
 8000690:	200003ac 	.word	0x200003ac
 8000694:	20001248 	.word	0x20001248

08000698 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800069c:	bf00      	nop
 800069e:	46bd      	mov	sp, r7
 80006a0:	bc80      	pop	{r7}
 80006a2:	4770      	bx	lr

080006a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80006a4:	f7ff fff8 	bl	8000698 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006a8:	480b      	ldr	r0, [pc, #44]	; (80006d8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80006aa:	490c      	ldr	r1, [pc, #48]	; (80006dc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80006ac:	4a0c      	ldr	r2, [pc, #48]	; (80006e0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80006ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006b0:	e002      	b.n	80006b8 <LoopCopyDataInit>

080006b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006b6:	3304      	adds	r3, #4

080006b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006bc:	d3f9      	bcc.n	80006b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006be:	4a09      	ldr	r2, [pc, #36]	; (80006e4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80006c0:	4c09      	ldr	r4, [pc, #36]	; (80006e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80006c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006c4:	e001      	b.n	80006ca <LoopFillZerobss>

080006c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006c8:	3204      	adds	r2, #4

080006ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006cc:	d3fb      	bcc.n	80006c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006ce:	f002 fd3b 	bl	8003148 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006d2:	f7ff fd55 	bl	8000180 <main>
  bx lr
 80006d6:	4770      	bx	lr
  ldr r0, =_sdata
 80006d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006dc:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80006e0:	08003b10 	.word	0x08003b10
  ldr r2, =_sbss
 80006e4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80006e8:	20001248 	.word	0x20001248

080006ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006ec:	e7fe      	b.n	80006ec <ADC1_2_IRQHandler>
	...

080006f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006f4:	4b08      	ldr	r3, [pc, #32]	; (8000718 <HAL_Init+0x28>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a07      	ldr	r2, [pc, #28]	; (8000718 <HAL_Init+0x28>)
 80006fa:	f043 0310 	orr.w	r3, r3, #16
 80006fe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000700:	2003      	movs	r0, #3
 8000702:	f000 f8d1 	bl	80008a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000706:	200f      	movs	r0, #15
 8000708:	f7ff fef4 	bl	80004f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800070c:	f7ff fe6e 	bl	80003ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000710:	2300      	movs	r3, #0
}
 8000712:	4618      	mov	r0, r3
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40022000 	.word	0x40022000

0800071c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000720:	4b05      	ldr	r3, [pc, #20]	; (8000738 <HAL_IncTick+0x1c>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	461a      	mov	r2, r3
 8000726:	4b05      	ldr	r3, [pc, #20]	; (800073c <HAL_IncTick+0x20>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	4413      	add	r3, r2
 800072c:	4a03      	ldr	r2, [pc, #12]	; (800073c <HAL_IncTick+0x20>)
 800072e:	6013      	str	r3, [r2, #0]
}
 8000730:	bf00      	nop
 8000732:	46bd      	mov	sp, r7
 8000734:	bc80      	pop	{r7}
 8000736:	4770      	bx	lr
 8000738:	20000008 	.word	0x20000008
 800073c:	200003b0 	.word	0x200003b0

08000740 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  return uwTick;
 8000744:	4b02      	ldr	r3, [pc, #8]	; (8000750 <HAL_GetTick+0x10>)
 8000746:	681b      	ldr	r3, [r3, #0]
}
 8000748:	4618      	mov	r0, r3
 800074a:	46bd      	mov	sp, r7
 800074c:	bc80      	pop	{r7}
 800074e:	4770      	bx	lr
 8000750:	200003b0 	.word	0x200003b0

08000754 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000754:	b480      	push	{r7}
 8000756:	b085      	sub	sp, #20
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	f003 0307 	and.w	r3, r3, #7
 8000762:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000764:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <__NVIC_SetPriorityGrouping+0x44>)
 8000766:	68db      	ldr	r3, [r3, #12]
 8000768:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800076a:	68ba      	ldr	r2, [r7, #8]
 800076c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000770:	4013      	ands	r3, r2
 8000772:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000778:	68bb      	ldr	r3, [r7, #8]
 800077a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800077c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000780:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000784:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000786:	4a04      	ldr	r2, [pc, #16]	; (8000798 <__NVIC_SetPriorityGrouping+0x44>)
 8000788:	68bb      	ldr	r3, [r7, #8]
 800078a:	60d3      	str	r3, [r2, #12]
}
 800078c:	bf00      	nop
 800078e:	3714      	adds	r7, #20
 8000790:	46bd      	mov	sp, r7
 8000792:	bc80      	pop	{r7}
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	e000ed00 	.word	0xe000ed00

0800079c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007a0:	4b04      	ldr	r3, [pc, #16]	; (80007b4 <__NVIC_GetPriorityGrouping+0x18>)
 80007a2:	68db      	ldr	r3, [r3, #12]
 80007a4:	0a1b      	lsrs	r3, r3, #8
 80007a6:	f003 0307 	and.w	r3, r3, #7
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bc80      	pop	{r7}
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	e000ed00 	.word	0xe000ed00

080007b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	db0b      	blt.n	80007e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007ca:	79fb      	ldrb	r3, [r7, #7]
 80007cc:	f003 021f 	and.w	r2, r3, #31
 80007d0:	4906      	ldr	r1, [pc, #24]	; (80007ec <__NVIC_EnableIRQ+0x34>)
 80007d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007d6:	095b      	lsrs	r3, r3, #5
 80007d8:	2001      	movs	r0, #1
 80007da:	fa00 f202 	lsl.w	r2, r0, r2
 80007de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007e2:	bf00      	nop
 80007e4:	370c      	adds	r7, #12
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bc80      	pop	{r7}
 80007ea:	4770      	bx	lr
 80007ec:	e000e100 	.word	0xe000e100

080007f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4603      	mov	r3, r0
 80007f8:	6039      	str	r1, [r7, #0]
 80007fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000800:	2b00      	cmp	r3, #0
 8000802:	db0a      	blt.n	800081a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	b2da      	uxtb	r2, r3
 8000808:	490c      	ldr	r1, [pc, #48]	; (800083c <__NVIC_SetPriority+0x4c>)
 800080a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800080e:	0112      	lsls	r2, r2, #4
 8000810:	b2d2      	uxtb	r2, r2
 8000812:	440b      	add	r3, r1
 8000814:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000818:	e00a      	b.n	8000830 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	b2da      	uxtb	r2, r3
 800081e:	4908      	ldr	r1, [pc, #32]	; (8000840 <__NVIC_SetPriority+0x50>)
 8000820:	79fb      	ldrb	r3, [r7, #7]
 8000822:	f003 030f 	and.w	r3, r3, #15
 8000826:	3b04      	subs	r3, #4
 8000828:	0112      	lsls	r2, r2, #4
 800082a:	b2d2      	uxtb	r2, r2
 800082c:	440b      	add	r3, r1
 800082e:	761a      	strb	r2, [r3, #24]
}
 8000830:	bf00      	nop
 8000832:	370c      	adds	r7, #12
 8000834:	46bd      	mov	sp, r7
 8000836:	bc80      	pop	{r7}
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	e000e100 	.word	0xe000e100
 8000840:	e000ed00 	.word	0xe000ed00

08000844 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000844:	b480      	push	{r7}
 8000846:	b089      	sub	sp, #36	; 0x24
 8000848:	af00      	add	r7, sp, #0
 800084a:	60f8      	str	r0, [r7, #12]
 800084c:	60b9      	str	r1, [r7, #8]
 800084e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	f003 0307 	and.w	r3, r3, #7
 8000856:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000858:	69fb      	ldr	r3, [r7, #28]
 800085a:	f1c3 0307 	rsb	r3, r3, #7
 800085e:	2b04      	cmp	r3, #4
 8000860:	bf28      	it	cs
 8000862:	2304      	movcs	r3, #4
 8000864:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000866:	69fb      	ldr	r3, [r7, #28]
 8000868:	3304      	adds	r3, #4
 800086a:	2b06      	cmp	r3, #6
 800086c:	d902      	bls.n	8000874 <NVIC_EncodePriority+0x30>
 800086e:	69fb      	ldr	r3, [r7, #28]
 8000870:	3b03      	subs	r3, #3
 8000872:	e000      	b.n	8000876 <NVIC_EncodePriority+0x32>
 8000874:	2300      	movs	r3, #0
 8000876:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000878:	f04f 32ff 	mov.w	r2, #4294967295
 800087c:	69bb      	ldr	r3, [r7, #24]
 800087e:	fa02 f303 	lsl.w	r3, r2, r3
 8000882:	43da      	mvns	r2, r3
 8000884:	68bb      	ldr	r3, [r7, #8]
 8000886:	401a      	ands	r2, r3
 8000888:	697b      	ldr	r3, [r7, #20]
 800088a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800088c:	f04f 31ff 	mov.w	r1, #4294967295
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	fa01 f303 	lsl.w	r3, r1, r3
 8000896:	43d9      	mvns	r1, r3
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800089c:	4313      	orrs	r3, r2
         );
}
 800089e:	4618      	mov	r0, r3
 80008a0:	3724      	adds	r7, #36	; 0x24
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bc80      	pop	{r7}
 80008a6:	4770      	bx	lr

080008a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008b0:	6878      	ldr	r0, [r7, #4]
 80008b2:	f7ff ff4f 	bl	8000754 <__NVIC_SetPriorityGrouping>
}
 80008b6:	bf00      	nop
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}

080008be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008be:	b580      	push	{r7, lr}
 80008c0:	b086      	sub	sp, #24
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	4603      	mov	r3, r0
 80008c6:	60b9      	str	r1, [r7, #8]
 80008c8:	607a      	str	r2, [r7, #4]
 80008ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008cc:	2300      	movs	r3, #0
 80008ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008d0:	f7ff ff64 	bl	800079c <__NVIC_GetPriorityGrouping>
 80008d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008d6:	687a      	ldr	r2, [r7, #4]
 80008d8:	68b9      	ldr	r1, [r7, #8]
 80008da:	6978      	ldr	r0, [r7, #20]
 80008dc:	f7ff ffb2 	bl	8000844 <NVIC_EncodePriority>
 80008e0:	4602      	mov	r2, r0
 80008e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008e6:	4611      	mov	r1, r2
 80008e8:	4618      	mov	r0, r3
 80008ea:	f7ff ff81 	bl	80007f0 <__NVIC_SetPriority>
}
 80008ee:	bf00      	nop
 80008f0:	3718      	adds	r7, #24
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}

080008f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008f6:	b580      	push	{r7, lr}
 80008f8:	b082      	sub	sp, #8
 80008fa:	af00      	add	r7, sp, #0
 80008fc:	4603      	mov	r3, r0
 80008fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000904:	4618      	mov	r0, r3
 8000906:	f7ff ff57 	bl	80007b8 <__NVIC_EnableIRQ>
}
 800090a:	bf00      	nop
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
	...

08000914 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000914:	b480      	push	{r7}
 8000916:	b08b      	sub	sp, #44	; 0x2c
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
 800091c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800091e:	2300      	movs	r3, #0
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000922:	2300      	movs	r3, #0
 8000924:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000926:	e169      	b.n	8000bfc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000928:	2201      	movs	r2, #1
 800092a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800092c:	fa02 f303 	lsl.w	r3, r2, r3
 8000930:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	69fa      	ldr	r2, [r7, #28]
 8000938:	4013      	ands	r3, r2
 800093a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800093c:	69ba      	ldr	r2, [r7, #24]
 800093e:	69fb      	ldr	r3, [r7, #28]
 8000940:	429a      	cmp	r2, r3
 8000942:	f040 8158 	bne.w	8000bf6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	685b      	ldr	r3, [r3, #4]
 800094a:	4a9a      	ldr	r2, [pc, #616]	; (8000bb4 <HAL_GPIO_Init+0x2a0>)
 800094c:	4293      	cmp	r3, r2
 800094e:	d05e      	beq.n	8000a0e <HAL_GPIO_Init+0xfa>
 8000950:	4a98      	ldr	r2, [pc, #608]	; (8000bb4 <HAL_GPIO_Init+0x2a0>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d875      	bhi.n	8000a42 <HAL_GPIO_Init+0x12e>
 8000956:	4a98      	ldr	r2, [pc, #608]	; (8000bb8 <HAL_GPIO_Init+0x2a4>)
 8000958:	4293      	cmp	r3, r2
 800095a:	d058      	beq.n	8000a0e <HAL_GPIO_Init+0xfa>
 800095c:	4a96      	ldr	r2, [pc, #600]	; (8000bb8 <HAL_GPIO_Init+0x2a4>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d86f      	bhi.n	8000a42 <HAL_GPIO_Init+0x12e>
 8000962:	4a96      	ldr	r2, [pc, #600]	; (8000bbc <HAL_GPIO_Init+0x2a8>)
 8000964:	4293      	cmp	r3, r2
 8000966:	d052      	beq.n	8000a0e <HAL_GPIO_Init+0xfa>
 8000968:	4a94      	ldr	r2, [pc, #592]	; (8000bbc <HAL_GPIO_Init+0x2a8>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d869      	bhi.n	8000a42 <HAL_GPIO_Init+0x12e>
 800096e:	4a94      	ldr	r2, [pc, #592]	; (8000bc0 <HAL_GPIO_Init+0x2ac>)
 8000970:	4293      	cmp	r3, r2
 8000972:	d04c      	beq.n	8000a0e <HAL_GPIO_Init+0xfa>
 8000974:	4a92      	ldr	r2, [pc, #584]	; (8000bc0 <HAL_GPIO_Init+0x2ac>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d863      	bhi.n	8000a42 <HAL_GPIO_Init+0x12e>
 800097a:	4a92      	ldr	r2, [pc, #584]	; (8000bc4 <HAL_GPIO_Init+0x2b0>)
 800097c:	4293      	cmp	r3, r2
 800097e:	d046      	beq.n	8000a0e <HAL_GPIO_Init+0xfa>
 8000980:	4a90      	ldr	r2, [pc, #576]	; (8000bc4 <HAL_GPIO_Init+0x2b0>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d85d      	bhi.n	8000a42 <HAL_GPIO_Init+0x12e>
 8000986:	2b12      	cmp	r3, #18
 8000988:	d82a      	bhi.n	80009e0 <HAL_GPIO_Init+0xcc>
 800098a:	2b12      	cmp	r3, #18
 800098c:	d859      	bhi.n	8000a42 <HAL_GPIO_Init+0x12e>
 800098e:	a201      	add	r2, pc, #4	; (adr r2, 8000994 <HAL_GPIO_Init+0x80>)
 8000990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000994:	08000a0f 	.word	0x08000a0f
 8000998:	080009e9 	.word	0x080009e9
 800099c:	080009fb 	.word	0x080009fb
 80009a0:	08000a3d 	.word	0x08000a3d
 80009a4:	08000a43 	.word	0x08000a43
 80009a8:	08000a43 	.word	0x08000a43
 80009ac:	08000a43 	.word	0x08000a43
 80009b0:	08000a43 	.word	0x08000a43
 80009b4:	08000a43 	.word	0x08000a43
 80009b8:	08000a43 	.word	0x08000a43
 80009bc:	08000a43 	.word	0x08000a43
 80009c0:	08000a43 	.word	0x08000a43
 80009c4:	08000a43 	.word	0x08000a43
 80009c8:	08000a43 	.word	0x08000a43
 80009cc:	08000a43 	.word	0x08000a43
 80009d0:	08000a43 	.word	0x08000a43
 80009d4:	08000a43 	.word	0x08000a43
 80009d8:	080009f1 	.word	0x080009f1
 80009dc:	08000a05 	.word	0x08000a05
 80009e0:	4a79      	ldr	r2, [pc, #484]	; (8000bc8 <HAL_GPIO_Init+0x2b4>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d013      	beq.n	8000a0e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80009e6:	e02c      	b.n	8000a42 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	68db      	ldr	r3, [r3, #12]
 80009ec:	623b      	str	r3, [r7, #32]
          break;
 80009ee:	e029      	b.n	8000a44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	68db      	ldr	r3, [r3, #12]
 80009f4:	3304      	adds	r3, #4
 80009f6:	623b      	str	r3, [r7, #32]
          break;
 80009f8:	e024      	b.n	8000a44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	68db      	ldr	r3, [r3, #12]
 80009fe:	3308      	adds	r3, #8
 8000a00:	623b      	str	r3, [r7, #32]
          break;
 8000a02:	e01f      	b.n	8000a44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	68db      	ldr	r3, [r3, #12]
 8000a08:	330c      	adds	r3, #12
 8000a0a:	623b      	str	r3, [r7, #32]
          break;
 8000a0c:	e01a      	b.n	8000a44 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	689b      	ldr	r3, [r3, #8]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d102      	bne.n	8000a1c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a16:	2304      	movs	r3, #4
 8000a18:	623b      	str	r3, [r7, #32]
          break;
 8000a1a:	e013      	b.n	8000a44 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	689b      	ldr	r3, [r3, #8]
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d105      	bne.n	8000a30 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a24:	2308      	movs	r3, #8
 8000a26:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	69fa      	ldr	r2, [r7, #28]
 8000a2c:	611a      	str	r2, [r3, #16]
          break;
 8000a2e:	e009      	b.n	8000a44 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a30:	2308      	movs	r3, #8
 8000a32:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	69fa      	ldr	r2, [r7, #28]
 8000a38:	615a      	str	r2, [r3, #20]
          break;
 8000a3a:	e003      	b.n	8000a44 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	623b      	str	r3, [r7, #32]
          break;
 8000a40:	e000      	b.n	8000a44 <HAL_GPIO_Init+0x130>
          break;
 8000a42:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a44:	69bb      	ldr	r3, [r7, #24]
 8000a46:	2bff      	cmp	r3, #255	; 0xff
 8000a48:	d801      	bhi.n	8000a4e <HAL_GPIO_Init+0x13a>
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	e001      	b.n	8000a52 <HAL_GPIO_Init+0x13e>
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	3304      	adds	r3, #4
 8000a52:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a54:	69bb      	ldr	r3, [r7, #24]
 8000a56:	2bff      	cmp	r3, #255	; 0xff
 8000a58:	d802      	bhi.n	8000a60 <HAL_GPIO_Init+0x14c>
 8000a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a5c:	009b      	lsls	r3, r3, #2
 8000a5e:	e002      	b.n	8000a66 <HAL_GPIO_Init+0x152>
 8000a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a62:	3b08      	subs	r3, #8
 8000a64:	009b      	lsls	r3, r3, #2
 8000a66:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	681a      	ldr	r2, [r3, #0]
 8000a6c:	210f      	movs	r1, #15
 8000a6e:	693b      	ldr	r3, [r7, #16]
 8000a70:	fa01 f303 	lsl.w	r3, r1, r3
 8000a74:	43db      	mvns	r3, r3
 8000a76:	401a      	ands	r2, r3
 8000a78:	6a39      	ldr	r1, [r7, #32]
 8000a7a:	693b      	ldr	r3, [r7, #16]
 8000a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a80:	431a      	orrs	r2, r3
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	685b      	ldr	r3, [r3, #4]
 8000a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	f000 80b1 	beq.w	8000bf6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a94:	4b4d      	ldr	r3, [pc, #308]	; (8000bcc <HAL_GPIO_Init+0x2b8>)
 8000a96:	699b      	ldr	r3, [r3, #24]
 8000a98:	4a4c      	ldr	r2, [pc, #304]	; (8000bcc <HAL_GPIO_Init+0x2b8>)
 8000a9a:	f043 0301 	orr.w	r3, r3, #1
 8000a9e:	6193      	str	r3, [r2, #24]
 8000aa0:	4b4a      	ldr	r3, [pc, #296]	; (8000bcc <HAL_GPIO_Init+0x2b8>)
 8000aa2:	699b      	ldr	r3, [r3, #24]
 8000aa4:	f003 0301 	and.w	r3, r3, #1
 8000aa8:	60bb      	str	r3, [r7, #8]
 8000aaa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000aac:	4a48      	ldr	r2, [pc, #288]	; (8000bd0 <HAL_GPIO_Init+0x2bc>)
 8000aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ab0:	089b      	lsrs	r3, r3, #2
 8000ab2:	3302      	adds	r3, #2
 8000ab4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ab8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000abc:	f003 0303 	and.w	r3, r3, #3
 8000ac0:	009b      	lsls	r3, r3, #2
 8000ac2:	220f      	movs	r2, #15
 8000ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac8:	43db      	mvns	r3, r3
 8000aca:	68fa      	ldr	r2, [r7, #12]
 8000acc:	4013      	ands	r3, r2
 8000ace:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	4a40      	ldr	r2, [pc, #256]	; (8000bd4 <HAL_GPIO_Init+0x2c0>)
 8000ad4:	4293      	cmp	r3, r2
 8000ad6:	d013      	beq.n	8000b00 <HAL_GPIO_Init+0x1ec>
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	4a3f      	ldr	r2, [pc, #252]	; (8000bd8 <HAL_GPIO_Init+0x2c4>)
 8000adc:	4293      	cmp	r3, r2
 8000ade:	d00d      	beq.n	8000afc <HAL_GPIO_Init+0x1e8>
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	4a3e      	ldr	r2, [pc, #248]	; (8000bdc <HAL_GPIO_Init+0x2c8>)
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	d007      	beq.n	8000af8 <HAL_GPIO_Init+0x1e4>
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	4a3d      	ldr	r2, [pc, #244]	; (8000be0 <HAL_GPIO_Init+0x2cc>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d101      	bne.n	8000af4 <HAL_GPIO_Init+0x1e0>
 8000af0:	2303      	movs	r3, #3
 8000af2:	e006      	b.n	8000b02 <HAL_GPIO_Init+0x1ee>
 8000af4:	2304      	movs	r3, #4
 8000af6:	e004      	b.n	8000b02 <HAL_GPIO_Init+0x1ee>
 8000af8:	2302      	movs	r3, #2
 8000afa:	e002      	b.n	8000b02 <HAL_GPIO_Init+0x1ee>
 8000afc:	2301      	movs	r3, #1
 8000afe:	e000      	b.n	8000b02 <HAL_GPIO_Init+0x1ee>
 8000b00:	2300      	movs	r3, #0
 8000b02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b04:	f002 0203 	and.w	r2, r2, #3
 8000b08:	0092      	lsls	r2, r2, #2
 8000b0a:	4093      	lsls	r3, r2
 8000b0c:	68fa      	ldr	r2, [r7, #12]
 8000b0e:	4313      	orrs	r3, r2
 8000b10:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b12:	492f      	ldr	r1, [pc, #188]	; (8000bd0 <HAL_GPIO_Init+0x2bc>)
 8000b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b16:	089b      	lsrs	r3, r3, #2
 8000b18:	3302      	adds	r3, #2
 8000b1a:	68fa      	ldr	r2, [r7, #12]
 8000b1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	685b      	ldr	r3, [r3, #4]
 8000b24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d006      	beq.n	8000b3a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b2c:	4b2d      	ldr	r3, [pc, #180]	; (8000be4 <HAL_GPIO_Init+0x2d0>)
 8000b2e:	689a      	ldr	r2, [r3, #8]
 8000b30:	492c      	ldr	r1, [pc, #176]	; (8000be4 <HAL_GPIO_Init+0x2d0>)
 8000b32:	69bb      	ldr	r3, [r7, #24]
 8000b34:	4313      	orrs	r3, r2
 8000b36:	608b      	str	r3, [r1, #8]
 8000b38:	e006      	b.n	8000b48 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b3a:	4b2a      	ldr	r3, [pc, #168]	; (8000be4 <HAL_GPIO_Init+0x2d0>)
 8000b3c:	689a      	ldr	r2, [r3, #8]
 8000b3e:	69bb      	ldr	r3, [r7, #24]
 8000b40:	43db      	mvns	r3, r3
 8000b42:	4928      	ldr	r1, [pc, #160]	; (8000be4 <HAL_GPIO_Init+0x2d0>)
 8000b44:	4013      	ands	r3, r2
 8000b46:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	685b      	ldr	r3, [r3, #4]
 8000b4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d006      	beq.n	8000b62 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b54:	4b23      	ldr	r3, [pc, #140]	; (8000be4 <HAL_GPIO_Init+0x2d0>)
 8000b56:	68da      	ldr	r2, [r3, #12]
 8000b58:	4922      	ldr	r1, [pc, #136]	; (8000be4 <HAL_GPIO_Init+0x2d0>)
 8000b5a:	69bb      	ldr	r3, [r7, #24]
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	60cb      	str	r3, [r1, #12]
 8000b60:	e006      	b.n	8000b70 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b62:	4b20      	ldr	r3, [pc, #128]	; (8000be4 <HAL_GPIO_Init+0x2d0>)
 8000b64:	68da      	ldr	r2, [r3, #12]
 8000b66:	69bb      	ldr	r3, [r7, #24]
 8000b68:	43db      	mvns	r3, r3
 8000b6a:	491e      	ldr	r1, [pc, #120]	; (8000be4 <HAL_GPIO_Init+0x2d0>)
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d006      	beq.n	8000b8a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000b7c:	4b19      	ldr	r3, [pc, #100]	; (8000be4 <HAL_GPIO_Init+0x2d0>)
 8000b7e:	685a      	ldr	r2, [r3, #4]
 8000b80:	4918      	ldr	r1, [pc, #96]	; (8000be4 <HAL_GPIO_Init+0x2d0>)
 8000b82:	69bb      	ldr	r3, [r7, #24]
 8000b84:	4313      	orrs	r3, r2
 8000b86:	604b      	str	r3, [r1, #4]
 8000b88:	e006      	b.n	8000b98 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000b8a:	4b16      	ldr	r3, [pc, #88]	; (8000be4 <HAL_GPIO_Init+0x2d0>)
 8000b8c:	685a      	ldr	r2, [r3, #4]
 8000b8e:	69bb      	ldr	r3, [r7, #24]
 8000b90:	43db      	mvns	r3, r3
 8000b92:	4914      	ldr	r1, [pc, #80]	; (8000be4 <HAL_GPIO_Init+0x2d0>)
 8000b94:	4013      	ands	r3, r2
 8000b96:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d021      	beq.n	8000be8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ba4:	4b0f      	ldr	r3, [pc, #60]	; (8000be4 <HAL_GPIO_Init+0x2d0>)
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	490e      	ldr	r1, [pc, #56]	; (8000be4 <HAL_GPIO_Init+0x2d0>)
 8000baa:	69bb      	ldr	r3, [r7, #24]
 8000bac:	4313      	orrs	r3, r2
 8000bae:	600b      	str	r3, [r1, #0]
 8000bb0:	e021      	b.n	8000bf6 <HAL_GPIO_Init+0x2e2>
 8000bb2:	bf00      	nop
 8000bb4:	10320000 	.word	0x10320000
 8000bb8:	10310000 	.word	0x10310000
 8000bbc:	10220000 	.word	0x10220000
 8000bc0:	10210000 	.word	0x10210000
 8000bc4:	10120000 	.word	0x10120000
 8000bc8:	10110000 	.word	0x10110000
 8000bcc:	40021000 	.word	0x40021000
 8000bd0:	40010000 	.word	0x40010000
 8000bd4:	40010800 	.word	0x40010800
 8000bd8:	40010c00 	.word	0x40010c00
 8000bdc:	40011000 	.word	0x40011000
 8000be0:	40011400 	.word	0x40011400
 8000be4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000be8:	4b0b      	ldr	r3, [pc, #44]	; (8000c18 <HAL_GPIO_Init+0x304>)
 8000bea:	681a      	ldr	r2, [r3, #0]
 8000bec:	69bb      	ldr	r3, [r7, #24]
 8000bee:	43db      	mvns	r3, r3
 8000bf0:	4909      	ldr	r1, [pc, #36]	; (8000c18 <HAL_GPIO_Init+0x304>)
 8000bf2:	4013      	ands	r3, r2
 8000bf4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	681a      	ldr	r2, [r3, #0]
 8000c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c02:	fa22 f303 	lsr.w	r3, r2, r3
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	f47f ae8e 	bne.w	8000928 <HAL_GPIO_Init+0x14>
  }
}
 8000c0c:	bf00      	nop
 8000c0e:	bf00      	nop
 8000c10:	372c      	adds	r7, #44	; 0x2c
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bc80      	pop	{r7}
 8000c16:	4770      	bx	lr
 8000c18:	40010400 	.word	0x40010400

08000c1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
 8000c24:	460b      	mov	r3, r1
 8000c26:	807b      	strh	r3, [r7, #2]
 8000c28:	4613      	mov	r3, r2
 8000c2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c2c:	787b      	ldrb	r3, [r7, #1]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d003      	beq.n	8000c3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c32:	887a      	ldrh	r2, [r7, #2]
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000c38:	e003      	b.n	8000c42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c3a:	887b      	ldrh	r3, [r7, #2]
 8000c3c:	041a      	lsls	r2, r3, #16
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	611a      	str	r2, [r3, #16]
}
 8000c42:	bf00      	nop
 8000c44:	370c      	adds	r7, #12
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bc80      	pop	{r7}
 8000c4a:	4770      	bx	lr

08000c4c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b085      	sub	sp, #20
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	460b      	mov	r3, r1
 8000c56:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	68db      	ldr	r3, [r3, #12]
 8000c5c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000c5e:	887a      	ldrh	r2, [r7, #2]
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	4013      	ands	r3, r2
 8000c64:	041a      	lsls	r2, r3, #16
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	43d9      	mvns	r1, r3
 8000c6a:	887b      	ldrh	r3, [r7, #2]
 8000c6c:	400b      	ands	r3, r1
 8000c6e:	431a      	orrs	r2, r3
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	611a      	str	r2, [r3, #16]
}
 8000c74:	bf00      	nop
 8000c76:	3714      	adds	r7, #20
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bc80      	pop	{r7}
 8000c7c:	4770      	bx	lr
	...

08000c80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b086      	sub	sp, #24
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d101      	bne.n	8000c92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	e272      	b.n	8001178 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f003 0301 	and.w	r3, r3, #1
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	f000 8087 	beq.w	8000dae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ca0:	4b92      	ldr	r3, [pc, #584]	; (8000eec <HAL_RCC_OscConfig+0x26c>)
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	f003 030c 	and.w	r3, r3, #12
 8000ca8:	2b04      	cmp	r3, #4
 8000caa:	d00c      	beq.n	8000cc6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000cac:	4b8f      	ldr	r3, [pc, #572]	; (8000eec <HAL_RCC_OscConfig+0x26c>)
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	f003 030c 	and.w	r3, r3, #12
 8000cb4:	2b08      	cmp	r3, #8
 8000cb6:	d112      	bne.n	8000cde <HAL_RCC_OscConfig+0x5e>
 8000cb8:	4b8c      	ldr	r3, [pc, #560]	; (8000eec <HAL_RCC_OscConfig+0x26c>)
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cc4:	d10b      	bne.n	8000cde <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cc6:	4b89      	ldr	r3, [pc, #548]	; (8000eec <HAL_RCC_OscConfig+0x26c>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d06c      	beq.n	8000dac <HAL_RCC_OscConfig+0x12c>
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d168      	bne.n	8000dac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	e24c      	b.n	8001178 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ce6:	d106      	bne.n	8000cf6 <HAL_RCC_OscConfig+0x76>
 8000ce8:	4b80      	ldr	r3, [pc, #512]	; (8000eec <HAL_RCC_OscConfig+0x26c>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a7f      	ldr	r2, [pc, #508]	; (8000eec <HAL_RCC_OscConfig+0x26c>)
 8000cee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cf2:	6013      	str	r3, [r2, #0]
 8000cf4:	e02e      	b.n	8000d54 <HAL_RCC_OscConfig+0xd4>
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d10c      	bne.n	8000d18 <HAL_RCC_OscConfig+0x98>
 8000cfe:	4b7b      	ldr	r3, [pc, #492]	; (8000eec <HAL_RCC_OscConfig+0x26c>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4a7a      	ldr	r2, [pc, #488]	; (8000eec <HAL_RCC_OscConfig+0x26c>)
 8000d04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d08:	6013      	str	r3, [r2, #0]
 8000d0a:	4b78      	ldr	r3, [pc, #480]	; (8000eec <HAL_RCC_OscConfig+0x26c>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4a77      	ldr	r2, [pc, #476]	; (8000eec <HAL_RCC_OscConfig+0x26c>)
 8000d10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d14:	6013      	str	r3, [r2, #0]
 8000d16:	e01d      	b.n	8000d54 <HAL_RCC_OscConfig+0xd4>
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d20:	d10c      	bne.n	8000d3c <HAL_RCC_OscConfig+0xbc>
 8000d22:	4b72      	ldr	r3, [pc, #456]	; (8000eec <HAL_RCC_OscConfig+0x26c>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4a71      	ldr	r2, [pc, #452]	; (8000eec <HAL_RCC_OscConfig+0x26c>)
 8000d28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d2c:	6013      	str	r3, [r2, #0]
 8000d2e:	4b6f      	ldr	r3, [pc, #444]	; (8000eec <HAL_RCC_OscConfig+0x26c>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4a6e      	ldr	r2, [pc, #440]	; (8000eec <HAL_RCC_OscConfig+0x26c>)
 8000d34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d38:	6013      	str	r3, [r2, #0]
 8000d3a:	e00b      	b.n	8000d54 <HAL_RCC_OscConfig+0xd4>
 8000d3c:	4b6b      	ldr	r3, [pc, #428]	; (8000eec <HAL_RCC_OscConfig+0x26c>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a6a      	ldr	r2, [pc, #424]	; (8000eec <HAL_RCC_OscConfig+0x26c>)
 8000d42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d46:	6013      	str	r3, [r2, #0]
 8000d48:	4b68      	ldr	r3, [pc, #416]	; (8000eec <HAL_RCC_OscConfig+0x26c>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a67      	ldr	r2, [pc, #412]	; (8000eec <HAL_RCC_OscConfig+0x26c>)
 8000d4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d52:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d013      	beq.n	8000d84 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d5c:	f7ff fcf0 	bl	8000740 <HAL_GetTick>
 8000d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d62:	e008      	b.n	8000d76 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d64:	f7ff fcec 	bl	8000740 <HAL_GetTick>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	693b      	ldr	r3, [r7, #16]
 8000d6c:	1ad3      	subs	r3, r2, r3
 8000d6e:	2b64      	cmp	r3, #100	; 0x64
 8000d70:	d901      	bls.n	8000d76 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000d72:	2303      	movs	r3, #3
 8000d74:	e200      	b.n	8001178 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d76:	4b5d      	ldr	r3, [pc, #372]	; (8000eec <HAL_RCC_OscConfig+0x26c>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d0f0      	beq.n	8000d64 <HAL_RCC_OscConfig+0xe4>
 8000d82:	e014      	b.n	8000dae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d84:	f7ff fcdc 	bl	8000740 <HAL_GetTick>
 8000d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d8a:	e008      	b.n	8000d9e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d8c:	f7ff fcd8 	bl	8000740 <HAL_GetTick>
 8000d90:	4602      	mov	r2, r0
 8000d92:	693b      	ldr	r3, [r7, #16]
 8000d94:	1ad3      	subs	r3, r2, r3
 8000d96:	2b64      	cmp	r3, #100	; 0x64
 8000d98:	d901      	bls.n	8000d9e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000d9a:	2303      	movs	r3, #3
 8000d9c:	e1ec      	b.n	8001178 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d9e:	4b53      	ldr	r3, [pc, #332]	; (8000eec <HAL_RCC_OscConfig+0x26c>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d1f0      	bne.n	8000d8c <HAL_RCC_OscConfig+0x10c>
 8000daa:	e000      	b.n	8000dae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f003 0302 	and.w	r3, r3, #2
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d063      	beq.n	8000e82 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000dba:	4b4c      	ldr	r3, [pc, #304]	; (8000eec <HAL_RCC_OscConfig+0x26c>)
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	f003 030c 	and.w	r3, r3, #12
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d00b      	beq.n	8000dde <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000dc6:	4b49      	ldr	r3, [pc, #292]	; (8000eec <HAL_RCC_OscConfig+0x26c>)
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	f003 030c 	and.w	r3, r3, #12
 8000dce:	2b08      	cmp	r3, #8
 8000dd0:	d11c      	bne.n	8000e0c <HAL_RCC_OscConfig+0x18c>
 8000dd2:	4b46      	ldr	r3, [pc, #280]	; (8000eec <HAL_RCC_OscConfig+0x26c>)
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d116      	bne.n	8000e0c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dde:	4b43      	ldr	r3, [pc, #268]	; (8000eec <HAL_RCC_OscConfig+0x26c>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f003 0302 	and.w	r3, r3, #2
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d005      	beq.n	8000df6 <HAL_RCC_OscConfig+0x176>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	691b      	ldr	r3, [r3, #16]
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	d001      	beq.n	8000df6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000df2:	2301      	movs	r3, #1
 8000df4:	e1c0      	b.n	8001178 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000df6:	4b3d      	ldr	r3, [pc, #244]	; (8000eec <HAL_RCC_OscConfig+0x26c>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	695b      	ldr	r3, [r3, #20]
 8000e02:	00db      	lsls	r3, r3, #3
 8000e04:	4939      	ldr	r1, [pc, #228]	; (8000eec <HAL_RCC_OscConfig+0x26c>)
 8000e06:	4313      	orrs	r3, r2
 8000e08:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e0a:	e03a      	b.n	8000e82 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	691b      	ldr	r3, [r3, #16]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d020      	beq.n	8000e56 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e14:	4b36      	ldr	r3, [pc, #216]	; (8000ef0 <HAL_RCC_OscConfig+0x270>)
 8000e16:	2201      	movs	r2, #1
 8000e18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e1a:	f7ff fc91 	bl	8000740 <HAL_GetTick>
 8000e1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e20:	e008      	b.n	8000e34 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e22:	f7ff fc8d 	bl	8000740 <HAL_GetTick>
 8000e26:	4602      	mov	r2, r0
 8000e28:	693b      	ldr	r3, [r7, #16]
 8000e2a:	1ad3      	subs	r3, r2, r3
 8000e2c:	2b02      	cmp	r3, #2
 8000e2e:	d901      	bls.n	8000e34 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000e30:	2303      	movs	r3, #3
 8000e32:	e1a1      	b.n	8001178 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e34:	4b2d      	ldr	r3, [pc, #180]	; (8000eec <HAL_RCC_OscConfig+0x26c>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f003 0302 	and.w	r3, r3, #2
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d0f0      	beq.n	8000e22 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e40:	4b2a      	ldr	r3, [pc, #168]	; (8000eec <HAL_RCC_OscConfig+0x26c>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	695b      	ldr	r3, [r3, #20]
 8000e4c:	00db      	lsls	r3, r3, #3
 8000e4e:	4927      	ldr	r1, [pc, #156]	; (8000eec <HAL_RCC_OscConfig+0x26c>)
 8000e50:	4313      	orrs	r3, r2
 8000e52:	600b      	str	r3, [r1, #0]
 8000e54:	e015      	b.n	8000e82 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e56:	4b26      	ldr	r3, [pc, #152]	; (8000ef0 <HAL_RCC_OscConfig+0x270>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e5c:	f7ff fc70 	bl	8000740 <HAL_GetTick>
 8000e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e62:	e008      	b.n	8000e76 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e64:	f7ff fc6c 	bl	8000740 <HAL_GetTick>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	693b      	ldr	r3, [r7, #16]
 8000e6c:	1ad3      	subs	r3, r2, r3
 8000e6e:	2b02      	cmp	r3, #2
 8000e70:	d901      	bls.n	8000e76 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000e72:	2303      	movs	r3, #3
 8000e74:	e180      	b.n	8001178 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e76:	4b1d      	ldr	r3, [pc, #116]	; (8000eec <HAL_RCC_OscConfig+0x26c>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f003 0302 	and.w	r3, r3, #2
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d1f0      	bne.n	8000e64 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f003 0308 	and.w	r3, r3, #8
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d03a      	beq.n	8000f04 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	699b      	ldr	r3, [r3, #24]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d019      	beq.n	8000eca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e96:	4b17      	ldr	r3, [pc, #92]	; (8000ef4 <HAL_RCC_OscConfig+0x274>)
 8000e98:	2201      	movs	r2, #1
 8000e9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e9c:	f7ff fc50 	bl	8000740 <HAL_GetTick>
 8000ea0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ea2:	e008      	b.n	8000eb6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ea4:	f7ff fc4c 	bl	8000740 <HAL_GetTick>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	1ad3      	subs	r3, r2, r3
 8000eae:	2b02      	cmp	r3, #2
 8000eb0:	d901      	bls.n	8000eb6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000eb2:	2303      	movs	r3, #3
 8000eb4:	e160      	b.n	8001178 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000eb6:	4b0d      	ldr	r3, [pc, #52]	; (8000eec <HAL_RCC_OscConfig+0x26c>)
 8000eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eba:	f003 0302 	and.w	r3, r3, #2
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d0f0      	beq.n	8000ea4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000ec2:	2001      	movs	r0, #1
 8000ec4:	f000 fafe 	bl	80014c4 <RCC_Delay>
 8000ec8:	e01c      	b.n	8000f04 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000eca:	4b0a      	ldr	r3, [pc, #40]	; (8000ef4 <HAL_RCC_OscConfig+0x274>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ed0:	f7ff fc36 	bl	8000740 <HAL_GetTick>
 8000ed4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ed6:	e00f      	b.n	8000ef8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ed8:	f7ff fc32 	bl	8000740 <HAL_GetTick>
 8000edc:	4602      	mov	r2, r0
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	1ad3      	subs	r3, r2, r3
 8000ee2:	2b02      	cmp	r3, #2
 8000ee4:	d908      	bls.n	8000ef8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000ee6:	2303      	movs	r3, #3
 8000ee8:	e146      	b.n	8001178 <HAL_RCC_OscConfig+0x4f8>
 8000eea:	bf00      	nop
 8000eec:	40021000 	.word	0x40021000
 8000ef0:	42420000 	.word	0x42420000
 8000ef4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ef8:	4b92      	ldr	r3, [pc, #584]	; (8001144 <HAL_RCC_OscConfig+0x4c4>)
 8000efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000efc:	f003 0302 	and.w	r3, r3, #2
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d1e9      	bne.n	8000ed8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f003 0304 	and.w	r3, r3, #4
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	f000 80a6 	beq.w	800105e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f12:	2300      	movs	r3, #0
 8000f14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f16:	4b8b      	ldr	r3, [pc, #556]	; (8001144 <HAL_RCC_OscConfig+0x4c4>)
 8000f18:	69db      	ldr	r3, [r3, #28]
 8000f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d10d      	bne.n	8000f3e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f22:	4b88      	ldr	r3, [pc, #544]	; (8001144 <HAL_RCC_OscConfig+0x4c4>)
 8000f24:	69db      	ldr	r3, [r3, #28]
 8000f26:	4a87      	ldr	r2, [pc, #540]	; (8001144 <HAL_RCC_OscConfig+0x4c4>)
 8000f28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f2c:	61d3      	str	r3, [r2, #28]
 8000f2e:	4b85      	ldr	r3, [pc, #532]	; (8001144 <HAL_RCC_OscConfig+0x4c4>)
 8000f30:	69db      	ldr	r3, [r3, #28]
 8000f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f36:	60bb      	str	r3, [r7, #8]
 8000f38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f3e:	4b82      	ldr	r3, [pc, #520]	; (8001148 <HAL_RCC_OscConfig+0x4c8>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d118      	bne.n	8000f7c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f4a:	4b7f      	ldr	r3, [pc, #508]	; (8001148 <HAL_RCC_OscConfig+0x4c8>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4a7e      	ldr	r2, [pc, #504]	; (8001148 <HAL_RCC_OscConfig+0x4c8>)
 8000f50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f56:	f7ff fbf3 	bl	8000740 <HAL_GetTick>
 8000f5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f5c:	e008      	b.n	8000f70 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f5e:	f7ff fbef 	bl	8000740 <HAL_GetTick>
 8000f62:	4602      	mov	r2, r0
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	1ad3      	subs	r3, r2, r3
 8000f68:	2b64      	cmp	r3, #100	; 0x64
 8000f6a:	d901      	bls.n	8000f70 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000f6c:	2303      	movs	r3, #3
 8000f6e:	e103      	b.n	8001178 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f70:	4b75      	ldr	r3, [pc, #468]	; (8001148 <HAL_RCC_OscConfig+0x4c8>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d0f0      	beq.n	8000f5e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	2b01      	cmp	r3, #1
 8000f82:	d106      	bne.n	8000f92 <HAL_RCC_OscConfig+0x312>
 8000f84:	4b6f      	ldr	r3, [pc, #444]	; (8001144 <HAL_RCC_OscConfig+0x4c4>)
 8000f86:	6a1b      	ldr	r3, [r3, #32]
 8000f88:	4a6e      	ldr	r2, [pc, #440]	; (8001144 <HAL_RCC_OscConfig+0x4c4>)
 8000f8a:	f043 0301 	orr.w	r3, r3, #1
 8000f8e:	6213      	str	r3, [r2, #32]
 8000f90:	e02d      	b.n	8000fee <HAL_RCC_OscConfig+0x36e>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	68db      	ldr	r3, [r3, #12]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d10c      	bne.n	8000fb4 <HAL_RCC_OscConfig+0x334>
 8000f9a:	4b6a      	ldr	r3, [pc, #424]	; (8001144 <HAL_RCC_OscConfig+0x4c4>)
 8000f9c:	6a1b      	ldr	r3, [r3, #32]
 8000f9e:	4a69      	ldr	r2, [pc, #420]	; (8001144 <HAL_RCC_OscConfig+0x4c4>)
 8000fa0:	f023 0301 	bic.w	r3, r3, #1
 8000fa4:	6213      	str	r3, [r2, #32]
 8000fa6:	4b67      	ldr	r3, [pc, #412]	; (8001144 <HAL_RCC_OscConfig+0x4c4>)
 8000fa8:	6a1b      	ldr	r3, [r3, #32]
 8000faa:	4a66      	ldr	r2, [pc, #408]	; (8001144 <HAL_RCC_OscConfig+0x4c4>)
 8000fac:	f023 0304 	bic.w	r3, r3, #4
 8000fb0:	6213      	str	r3, [r2, #32]
 8000fb2:	e01c      	b.n	8000fee <HAL_RCC_OscConfig+0x36e>
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	2b05      	cmp	r3, #5
 8000fba:	d10c      	bne.n	8000fd6 <HAL_RCC_OscConfig+0x356>
 8000fbc:	4b61      	ldr	r3, [pc, #388]	; (8001144 <HAL_RCC_OscConfig+0x4c4>)
 8000fbe:	6a1b      	ldr	r3, [r3, #32]
 8000fc0:	4a60      	ldr	r2, [pc, #384]	; (8001144 <HAL_RCC_OscConfig+0x4c4>)
 8000fc2:	f043 0304 	orr.w	r3, r3, #4
 8000fc6:	6213      	str	r3, [r2, #32]
 8000fc8:	4b5e      	ldr	r3, [pc, #376]	; (8001144 <HAL_RCC_OscConfig+0x4c4>)
 8000fca:	6a1b      	ldr	r3, [r3, #32]
 8000fcc:	4a5d      	ldr	r2, [pc, #372]	; (8001144 <HAL_RCC_OscConfig+0x4c4>)
 8000fce:	f043 0301 	orr.w	r3, r3, #1
 8000fd2:	6213      	str	r3, [r2, #32]
 8000fd4:	e00b      	b.n	8000fee <HAL_RCC_OscConfig+0x36e>
 8000fd6:	4b5b      	ldr	r3, [pc, #364]	; (8001144 <HAL_RCC_OscConfig+0x4c4>)
 8000fd8:	6a1b      	ldr	r3, [r3, #32]
 8000fda:	4a5a      	ldr	r2, [pc, #360]	; (8001144 <HAL_RCC_OscConfig+0x4c4>)
 8000fdc:	f023 0301 	bic.w	r3, r3, #1
 8000fe0:	6213      	str	r3, [r2, #32]
 8000fe2:	4b58      	ldr	r3, [pc, #352]	; (8001144 <HAL_RCC_OscConfig+0x4c4>)
 8000fe4:	6a1b      	ldr	r3, [r3, #32]
 8000fe6:	4a57      	ldr	r2, [pc, #348]	; (8001144 <HAL_RCC_OscConfig+0x4c4>)
 8000fe8:	f023 0304 	bic.w	r3, r3, #4
 8000fec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	68db      	ldr	r3, [r3, #12]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d015      	beq.n	8001022 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ff6:	f7ff fba3 	bl	8000740 <HAL_GetTick>
 8000ffa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ffc:	e00a      	b.n	8001014 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ffe:	f7ff fb9f 	bl	8000740 <HAL_GetTick>
 8001002:	4602      	mov	r2, r0
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	1ad3      	subs	r3, r2, r3
 8001008:	f241 3288 	movw	r2, #5000	; 0x1388
 800100c:	4293      	cmp	r3, r2
 800100e:	d901      	bls.n	8001014 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001010:	2303      	movs	r3, #3
 8001012:	e0b1      	b.n	8001178 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001014:	4b4b      	ldr	r3, [pc, #300]	; (8001144 <HAL_RCC_OscConfig+0x4c4>)
 8001016:	6a1b      	ldr	r3, [r3, #32]
 8001018:	f003 0302 	and.w	r3, r3, #2
 800101c:	2b00      	cmp	r3, #0
 800101e:	d0ee      	beq.n	8000ffe <HAL_RCC_OscConfig+0x37e>
 8001020:	e014      	b.n	800104c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001022:	f7ff fb8d 	bl	8000740 <HAL_GetTick>
 8001026:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001028:	e00a      	b.n	8001040 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800102a:	f7ff fb89 	bl	8000740 <HAL_GetTick>
 800102e:	4602      	mov	r2, r0
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	1ad3      	subs	r3, r2, r3
 8001034:	f241 3288 	movw	r2, #5000	; 0x1388
 8001038:	4293      	cmp	r3, r2
 800103a:	d901      	bls.n	8001040 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800103c:	2303      	movs	r3, #3
 800103e:	e09b      	b.n	8001178 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001040:	4b40      	ldr	r3, [pc, #256]	; (8001144 <HAL_RCC_OscConfig+0x4c4>)
 8001042:	6a1b      	ldr	r3, [r3, #32]
 8001044:	f003 0302 	and.w	r3, r3, #2
 8001048:	2b00      	cmp	r3, #0
 800104a:	d1ee      	bne.n	800102a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800104c:	7dfb      	ldrb	r3, [r7, #23]
 800104e:	2b01      	cmp	r3, #1
 8001050:	d105      	bne.n	800105e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001052:	4b3c      	ldr	r3, [pc, #240]	; (8001144 <HAL_RCC_OscConfig+0x4c4>)
 8001054:	69db      	ldr	r3, [r3, #28]
 8001056:	4a3b      	ldr	r2, [pc, #236]	; (8001144 <HAL_RCC_OscConfig+0x4c4>)
 8001058:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800105c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	69db      	ldr	r3, [r3, #28]
 8001062:	2b00      	cmp	r3, #0
 8001064:	f000 8087 	beq.w	8001176 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001068:	4b36      	ldr	r3, [pc, #216]	; (8001144 <HAL_RCC_OscConfig+0x4c4>)
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f003 030c 	and.w	r3, r3, #12
 8001070:	2b08      	cmp	r3, #8
 8001072:	d061      	beq.n	8001138 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	69db      	ldr	r3, [r3, #28]
 8001078:	2b02      	cmp	r3, #2
 800107a:	d146      	bne.n	800110a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800107c:	4b33      	ldr	r3, [pc, #204]	; (800114c <HAL_RCC_OscConfig+0x4cc>)
 800107e:	2200      	movs	r2, #0
 8001080:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001082:	f7ff fb5d 	bl	8000740 <HAL_GetTick>
 8001086:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001088:	e008      	b.n	800109c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800108a:	f7ff fb59 	bl	8000740 <HAL_GetTick>
 800108e:	4602      	mov	r2, r0
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	1ad3      	subs	r3, r2, r3
 8001094:	2b02      	cmp	r3, #2
 8001096:	d901      	bls.n	800109c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001098:	2303      	movs	r3, #3
 800109a:	e06d      	b.n	8001178 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800109c:	4b29      	ldr	r3, [pc, #164]	; (8001144 <HAL_RCC_OscConfig+0x4c4>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d1f0      	bne.n	800108a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6a1b      	ldr	r3, [r3, #32]
 80010ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010b0:	d108      	bne.n	80010c4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80010b2:	4b24      	ldr	r3, [pc, #144]	; (8001144 <HAL_RCC_OscConfig+0x4c4>)
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	4921      	ldr	r1, [pc, #132]	; (8001144 <HAL_RCC_OscConfig+0x4c4>)
 80010c0:	4313      	orrs	r3, r2
 80010c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80010c4:	4b1f      	ldr	r3, [pc, #124]	; (8001144 <HAL_RCC_OscConfig+0x4c4>)
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6a19      	ldr	r1, [r3, #32]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010d4:	430b      	orrs	r3, r1
 80010d6:	491b      	ldr	r1, [pc, #108]	; (8001144 <HAL_RCC_OscConfig+0x4c4>)
 80010d8:	4313      	orrs	r3, r2
 80010da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80010dc:	4b1b      	ldr	r3, [pc, #108]	; (800114c <HAL_RCC_OscConfig+0x4cc>)
 80010de:	2201      	movs	r2, #1
 80010e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010e2:	f7ff fb2d 	bl	8000740 <HAL_GetTick>
 80010e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010e8:	e008      	b.n	80010fc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010ea:	f7ff fb29 	bl	8000740 <HAL_GetTick>
 80010ee:	4602      	mov	r2, r0
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	1ad3      	subs	r3, r2, r3
 80010f4:	2b02      	cmp	r3, #2
 80010f6:	d901      	bls.n	80010fc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80010f8:	2303      	movs	r3, #3
 80010fa:	e03d      	b.n	8001178 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010fc:	4b11      	ldr	r3, [pc, #68]	; (8001144 <HAL_RCC_OscConfig+0x4c4>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001104:	2b00      	cmp	r3, #0
 8001106:	d0f0      	beq.n	80010ea <HAL_RCC_OscConfig+0x46a>
 8001108:	e035      	b.n	8001176 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800110a:	4b10      	ldr	r3, [pc, #64]	; (800114c <HAL_RCC_OscConfig+0x4cc>)
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001110:	f7ff fb16 	bl	8000740 <HAL_GetTick>
 8001114:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001116:	e008      	b.n	800112a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001118:	f7ff fb12 	bl	8000740 <HAL_GetTick>
 800111c:	4602      	mov	r2, r0
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	2b02      	cmp	r3, #2
 8001124:	d901      	bls.n	800112a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001126:	2303      	movs	r3, #3
 8001128:	e026      	b.n	8001178 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800112a:	4b06      	ldr	r3, [pc, #24]	; (8001144 <HAL_RCC_OscConfig+0x4c4>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001132:	2b00      	cmp	r3, #0
 8001134:	d1f0      	bne.n	8001118 <HAL_RCC_OscConfig+0x498>
 8001136:	e01e      	b.n	8001176 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	69db      	ldr	r3, [r3, #28]
 800113c:	2b01      	cmp	r3, #1
 800113e:	d107      	bne.n	8001150 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001140:	2301      	movs	r3, #1
 8001142:	e019      	b.n	8001178 <HAL_RCC_OscConfig+0x4f8>
 8001144:	40021000 	.word	0x40021000
 8001148:	40007000 	.word	0x40007000
 800114c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001150:	4b0b      	ldr	r3, [pc, #44]	; (8001180 <HAL_RCC_OscConfig+0x500>)
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6a1b      	ldr	r3, [r3, #32]
 8001160:	429a      	cmp	r2, r3
 8001162:	d106      	bne.n	8001172 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800116e:	429a      	cmp	r2, r3
 8001170:	d001      	beq.n	8001176 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	e000      	b.n	8001178 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001176:	2300      	movs	r3, #0
}
 8001178:	4618      	mov	r0, r3
 800117a:	3718      	adds	r7, #24
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	40021000 	.word	0x40021000

08001184 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d101      	bne.n	8001198 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001194:	2301      	movs	r3, #1
 8001196:	e0d0      	b.n	800133a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001198:	4b6a      	ldr	r3, [pc, #424]	; (8001344 <HAL_RCC_ClockConfig+0x1c0>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f003 0307 	and.w	r3, r3, #7
 80011a0:	683a      	ldr	r2, [r7, #0]
 80011a2:	429a      	cmp	r2, r3
 80011a4:	d910      	bls.n	80011c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011a6:	4b67      	ldr	r3, [pc, #412]	; (8001344 <HAL_RCC_ClockConfig+0x1c0>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f023 0207 	bic.w	r2, r3, #7
 80011ae:	4965      	ldr	r1, [pc, #404]	; (8001344 <HAL_RCC_ClockConfig+0x1c0>)
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011b6:	4b63      	ldr	r3, [pc, #396]	; (8001344 <HAL_RCC_ClockConfig+0x1c0>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f003 0307 	and.w	r3, r3, #7
 80011be:	683a      	ldr	r2, [r7, #0]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d001      	beq.n	80011c8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80011c4:	2301      	movs	r3, #1
 80011c6:	e0b8      	b.n	800133a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f003 0302 	and.w	r3, r3, #2
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d020      	beq.n	8001216 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f003 0304 	and.w	r3, r3, #4
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d005      	beq.n	80011ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011e0:	4b59      	ldr	r3, [pc, #356]	; (8001348 <HAL_RCC_ClockConfig+0x1c4>)
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	4a58      	ldr	r2, [pc, #352]	; (8001348 <HAL_RCC_ClockConfig+0x1c4>)
 80011e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80011ea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f003 0308 	and.w	r3, r3, #8
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d005      	beq.n	8001204 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011f8:	4b53      	ldr	r3, [pc, #332]	; (8001348 <HAL_RCC_ClockConfig+0x1c4>)
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	4a52      	ldr	r2, [pc, #328]	; (8001348 <HAL_RCC_ClockConfig+0x1c4>)
 80011fe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001202:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001204:	4b50      	ldr	r3, [pc, #320]	; (8001348 <HAL_RCC_ClockConfig+0x1c4>)
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	494d      	ldr	r1, [pc, #308]	; (8001348 <HAL_RCC_ClockConfig+0x1c4>)
 8001212:	4313      	orrs	r3, r2
 8001214:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f003 0301 	and.w	r3, r3, #1
 800121e:	2b00      	cmp	r3, #0
 8001220:	d040      	beq.n	80012a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	2b01      	cmp	r3, #1
 8001228:	d107      	bne.n	800123a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800122a:	4b47      	ldr	r3, [pc, #284]	; (8001348 <HAL_RCC_ClockConfig+0x1c4>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001232:	2b00      	cmp	r3, #0
 8001234:	d115      	bne.n	8001262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	e07f      	b.n	800133a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	2b02      	cmp	r3, #2
 8001240:	d107      	bne.n	8001252 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001242:	4b41      	ldr	r3, [pc, #260]	; (8001348 <HAL_RCC_ClockConfig+0x1c4>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d109      	bne.n	8001262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e073      	b.n	800133a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001252:	4b3d      	ldr	r3, [pc, #244]	; (8001348 <HAL_RCC_ClockConfig+0x1c4>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f003 0302 	and.w	r3, r3, #2
 800125a:	2b00      	cmp	r3, #0
 800125c:	d101      	bne.n	8001262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e06b      	b.n	800133a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001262:	4b39      	ldr	r3, [pc, #228]	; (8001348 <HAL_RCC_ClockConfig+0x1c4>)
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f023 0203 	bic.w	r2, r3, #3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	4936      	ldr	r1, [pc, #216]	; (8001348 <HAL_RCC_ClockConfig+0x1c4>)
 8001270:	4313      	orrs	r3, r2
 8001272:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001274:	f7ff fa64 	bl	8000740 <HAL_GetTick>
 8001278:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800127a:	e00a      	b.n	8001292 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800127c:	f7ff fa60 	bl	8000740 <HAL_GetTick>
 8001280:	4602      	mov	r2, r0
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	f241 3288 	movw	r2, #5000	; 0x1388
 800128a:	4293      	cmp	r3, r2
 800128c:	d901      	bls.n	8001292 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800128e:	2303      	movs	r3, #3
 8001290:	e053      	b.n	800133a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001292:	4b2d      	ldr	r3, [pc, #180]	; (8001348 <HAL_RCC_ClockConfig+0x1c4>)
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f003 020c 	and.w	r2, r3, #12
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d1eb      	bne.n	800127c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80012a4:	4b27      	ldr	r3, [pc, #156]	; (8001344 <HAL_RCC_ClockConfig+0x1c0>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f003 0307 	and.w	r3, r3, #7
 80012ac:	683a      	ldr	r2, [r7, #0]
 80012ae:	429a      	cmp	r2, r3
 80012b0:	d210      	bcs.n	80012d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012b2:	4b24      	ldr	r3, [pc, #144]	; (8001344 <HAL_RCC_ClockConfig+0x1c0>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f023 0207 	bic.w	r2, r3, #7
 80012ba:	4922      	ldr	r1, [pc, #136]	; (8001344 <HAL_RCC_ClockConfig+0x1c0>)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	4313      	orrs	r3, r2
 80012c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012c2:	4b20      	ldr	r3, [pc, #128]	; (8001344 <HAL_RCC_ClockConfig+0x1c0>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f003 0307 	and.w	r3, r3, #7
 80012ca:	683a      	ldr	r2, [r7, #0]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d001      	beq.n	80012d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	e032      	b.n	800133a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f003 0304 	and.w	r3, r3, #4
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d008      	beq.n	80012f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012e0:	4b19      	ldr	r3, [pc, #100]	; (8001348 <HAL_RCC_ClockConfig+0x1c4>)
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	4916      	ldr	r1, [pc, #88]	; (8001348 <HAL_RCC_ClockConfig+0x1c4>)
 80012ee:	4313      	orrs	r3, r2
 80012f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f003 0308 	and.w	r3, r3, #8
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d009      	beq.n	8001312 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80012fe:	4b12      	ldr	r3, [pc, #72]	; (8001348 <HAL_RCC_ClockConfig+0x1c4>)
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	691b      	ldr	r3, [r3, #16]
 800130a:	00db      	lsls	r3, r3, #3
 800130c:	490e      	ldr	r1, [pc, #56]	; (8001348 <HAL_RCC_ClockConfig+0x1c4>)
 800130e:	4313      	orrs	r3, r2
 8001310:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001312:	f000 f821 	bl	8001358 <HAL_RCC_GetSysClockFreq>
 8001316:	4602      	mov	r2, r0
 8001318:	4b0b      	ldr	r3, [pc, #44]	; (8001348 <HAL_RCC_ClockConfig+0x1c4>)
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	091b      	lsrs	r3, r3, #4
 800131e:	f003 030f 	and.w	r3, r3, #15
 8001322:	490a      	ldr	r1, [pc, #40]	; (800134c <HAL_RCC_ClockConfig+0x1c8>)
 8001324:	5ccb      	ldrb	r3, [r1, r3]
 8001326:	fa22 f303 	lsr.w	r3, r2, r3
 800132a:	4a09      	ldr	r2, [pc, #36]	; (8001350 <HAL_RCC_ClockConfig+0x1cc>)
 800132c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800132e:	4b09      	ldr	r3, [pc, #36]	; (8001354 <HAL_RCC_ClockConfig+0x1d0>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff f8de 	bl	80004f4 <HAL_InitTick>

  return HAL_OK;
 8001338:	2300      	movs	r3, #0
}
 800133a:	4618      	mov	r0, r3
 800133c:	3710      	adds	r7, #16
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40022000 	.word	0x40022000
 8001348:	40021000 	.word	0x40021000
 800134c:	08003aa8 	.word	0x08003aa8
 8001350:	20000000 	.word	0x20000000
 8001354:	20000004 	.word	0x20000004

08001358 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001358:	b480      	push	{r7}
 800135a:	b087      	sub	sp, #28
 800135c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800135e:	2300      	movs	r3, #0
 8001360:	60fb      	str	r3, [r7, #12]
 8001362:	2300      	movs	r3, #0
 8001364:	60bb      	str	r3, [r7, #8]
 8001366:	2300      	movs	r3, #0
 8001368:	617b      	str	r3, [r7, #20]
 800136a:	2300      	movs	r3, #0
 800136c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800136e:	2300      	movs	r3, #0
 8001370:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001372:	4b1e      	ldr	r3, [pc, #120]	; (80013ec <HAL_RCC_GetSysClockFreq+0x94>)
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	f003 030c 	and.w	r3, r3, #12
 800137e:	2b04      	cmp	r3, #4
 8001380:	d002      	beq.n	8001388 <HAL_RCC_GetSysClockFreq+0x30>
 8001382:	2b08      	cmp	r3, #8
 8001384:	d003      	beq.n	800138e <HAL_RCC_GetSysClockFreq+0x36>
 8001386:	e027      	b.n	80013d8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001388:	4b19      	ldr	r3, [pc, #100]	; (80013f0 <HAL_RCC_GetSysClockFreq+0x98>)
 800138a:	613b      	str	r3, [r7, #16]
      break;
 800138c:	e027      	b.n	80013de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	0c9b      	lsrs	r3, r3, #18
 8001392:	f003 030f 	and.w	r3, r3, #15
 8001396:	4a17      	ldr	r2, [pc, #92]	; (80013f4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001398:	5cd3      	ldrb	r3, [r2, r3]
 800139a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d010      	beq.n	80013c8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80013a6:	4b11      	ldr	r3, [pc, #68]	; (80013ec <HAL_RCC_GetSysClockFreq+0x94>)
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	0c5b      	lsrs	r3, r3, #17
 80013ac:	f003 0301 	and.w	r3, r3, #1
 80013b0:	4a11      	ldr	r2, [pc, #68]	; (80013f8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80013b2:	5cd3      	ldrb	r3, [r2, r3]
 80013b4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a0d      	ldr	r2, [pc, #52]	; (80013f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80013ba:	fb03 f202 	mul.w	r2, r3, r2
 80013be:	68bb      	ldr	r3, [r7, #8]
 80013c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80013c4:	617b      	str	r3, [r7, #20]
 80013c6:	e004      	b.n	80013d2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	4a0c      	ldr	r2, [pc, #48]	; (80013fc <HAL_RCC_GetSysClockFreq+0xa4>)
 80013cc:	fb02 f303 	mul.w	r3, r2, r3
 80013d0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	613b      	str	r3, [r7, #16]
      break;
 80013d6:	e002      	b.n	80013de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80013d8:	4b05      	ldr	r3, [pc, #20]	; (80013f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80013da:	613b      	str	r3, [r7, #16]
      break;
 80013dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80013de:	693b      	ldr	r3, [r7, #16]
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	371c      	adds	r7, #28
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bc80      	pop	{r7}
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	40021000 	.word	0x40021000
 80013f0:	007a1200 	.word	0x007a1200
 80013f4:	08003ac0 	.word	0x08003ac0
 80013f8:	08003ad0 	.word	0x08003ad0
 80013fc:	003d0900 	.word	0x003d0900

08001400 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001404:	4b02      	ldr	r3, [pc, #8]	; (8001410 <HAL_RCC_GetHCLKFreq+0x10>)
 8001406:	681b      	ldr	r3, [r3, #0]
}
 8001408:	4618      	mov	r0, r3
 800140a:	46bd      	mov	sp, r7
 800140c:	bc80      	pop	{r7}
 800140e:	4770      	bx	lr
 8001410:	20000000 	.word	0x20000000

08001414 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001418:	f7ff fff2 	bl	8001400 <HAL_RCC_GetHCLKFreq>
 800141c:	4602      	mov	r2, r0
 800141e:	4b05      	ldr	r3, [pc, #20]	; (8001434 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	0a1b      	lsrs	r3, r3, #8
 8001424:	f003 0307 	and.w	r3, r3, #7
 8001428:	4903      	ldr	r1, [pc, #12]	; (8001438 <HAL_RCC_GetPCLK1Freq+0x24>)
 800142a:	5ccb      	ldrb	r3, [r1, r3]
 800142c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001430:	4618      	mov	r0, r3
 8001432:	bd80      	pop	{r7, pc}
 8001434:	40021000 	.word	0x40021000
 8001438:	08003ab8 	.word	0x08003ab8

0800143c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001440:	f7ff ffde 	bl	8001400 <HAL_RCC_GetHCLKFreq>
 8001444:	4602      	mov	r2, r0
 8001446:	4b05      	ldr	r3, [pc, #20]	; (800145c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	0adb      	lsrs	r3, r3, #11
 800144c:	f003 0307 	and.w	r3, r3, #7
 8001450:	4903      	ldr	r1, [pc, #12]	; (8001460 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001452:	5ccb      	ldrb	r3, [r1, r3]
 8001454:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001458:	4618      	mov	r0, r3
 800145a:	bd80      	pop	{r7, pc}
 800145c:	40021000 	.word	0x40021000
 8001460:	08003ab8 	.word	0x08003ab8

08001464 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	220f      	movs	r2, #15
 8001472:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001474:	4b11      	ldr	r3, [pc, #68]	; (80014bc <HAL_RCC_GetClockConfig+0x58>)
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f003 0203 	and.w	r2, r3, #3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001480:	4b0e      	ldr	r3, [pc, #56]	; (80014bc <HAL_RCC_GetClockConfig+0x58>)
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800148c:	4b0b      	ldr	r3, [pc, #44]	; (80014bc <HAL_RCC_GetClockConfig+0x58>)
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001498:	4b08      	ldr	r3, [pc, #32]	; (80014bc <HAL_RCC_GetClockConfig+0x58>)
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	08db      	lsrs	r3, r3, #3
 800149e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80014a6:	4b06      	ldr	r3, [pc, #24]	; (80014c0 <HAL_RCC_GetClockConfig+0x5c>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0207 	and.w	r2, r3, #7
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80014b2:	bf00      	nop
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bc80      	pop	{r7}
 80014ba:	4770      	bx	lr
 80014bc:	40021000 	.word	0x40021000
 80014c0:	40022000 	.word	0x40022000

080014c4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b085      	sub	sp, #20
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80014cc:	4b0a      	ldr	r3, [pc, #40]	; (80014f8 <RCC_Delay+0x34>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a0a      	ldr	r2, [pc, #40]	; (80014fc <RCC_Delay+0x38>)
 80014d2:	fba2 2303 	umull	r2, r3, r2, r3
 80014d6:	0a5b      	lsrs	r3, r3, #9
 80014d8:	687a      	ldr	r2, [r7, #4]
 80014da:	fb02 f303 	mul.w	r3, r2, r3
 80014de:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80014e0:	bf00      	nop
  }
  while (Delay --);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	1e5a      	subs	r2, r3, #1
 80014e6:	60fa      	str	r2, [r7, #12]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d1f9      	bne.n	80014e0 <RCC_Delay+0x1c>
}
 80014ec:	bf00      	nop
 80014ee:	bf00      	nop
 80014f0:	3714      	adds	r7, #20
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bc80      	pop	{r7}
 80014f6:	4770      	bx	lr
 80014f8:	20000000 	.word	0x20000000
 80014fc:	10624dd3 	.word	0x10624dd3

08001500 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d101      	bne.n	8001512 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e041      	b.n	8001596 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001518:	b2db      	uxtb	r3, r3
 800151a:	2b00      	cmp	r3, #0
 800151c:	d106      	bne.n	800152c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2200      	movs	r2, #0
 8001522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	f000 f839 	bl	800159e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2202      	movs	r2, #2
 8001530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	3304      	adds	r3, #4
 800153c:	4619      	mov	r1, r3
 800153e:	4610      	mov	r0, r2
 8001540:	f000 f9b4 	bl	80018ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2201      	movs	r2, #1
 8001548:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2201      	movs	r2, #1
 8001550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2201      	movs	r2, #1
 8001558:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2201      	movs	r2, #1
 8001560:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2201      	movs	r2, #1
 8001568:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2201      	movs	r2, #1
 8001570:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2201      	movs	r2, #1
 8001578:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2201      	movs	r2, #1
 8001580:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2201      	movs	r2, #1
 8001588:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2201      	movs	r2, #1
 8001590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800159e:	b480      	push	{r7}
 80015a0:	b083      	sub	sp, #12
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80015a6:	bf00      	nop
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bc80      	pop	{r7}
 80015ae:	4770      	bx	lr

080015b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d001      	beq.n	80015c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e03a      	b.n	800163e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2202      	movs	r2, #2
 80015cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	68da      	ldr	r2, [r3, #12]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f042 0201 	orr.w	r2, r2, #1
 80015de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a18      	ldr	r2, [pc, #96]	; (8001648 <HAL_TIM_Base_Start_IT+0x98>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d00e      	beq.n	8001608 <HAL_TIM_Base_Start_IT+0x58>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015f2:	d009      	beq.n	8001608 <HAL_TIM_Base_Start_IT+0x58>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a14      	ldr	r2, [pc, #80]	; (800164c <HAL_TIM_Base_Start_IT+0x9c>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d004      	beq.n	8001608 <HAL_TIM_Base_Start_IT+0x58>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a13      	ldr	r2, [pc, #76]	; (8001650 <HAL_TIM_Base_Start_IT+0xa0>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d111      	bne.n	800162c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	f003 0307 	and.w	r3, r3, #7
 8001612:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	2b06      	cmp	r3, #6
 8001618:	d010      	beq.n	800163c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f042 0201 	orr.w	r2, r2, #1
 8001628:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800162a:	e007      	b.n	800163c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f042 0201 	orr.w	r2, r2, #1
 800163a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800163c:	2300      	movs	r3, #0
}
 800163e:	4618      	mov	r0, r3
 8001640:	3714      	adds	r7, #20
 8001642:	46bd      	mov	sp, r7
 8001644:	bc80      	pop	{r7}
 8001646:	4770      	bx	lr
 8001648:	40012c00 	.word	0x40012c00
 800164c:	40000400 	.word	0x40000400
 8001650:	40000800 	.word	0x40000800

08001654 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	691b      	ldr	r3, [r3, #16]
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	2b02      	cmp	r3, #2
 8001668:	d122      	bne.n	80016b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	f003 0302 	and.w	r3, r3, #2
 8001674:	2b02      	cmp	r3, #2
 8001676:	d11b      	bne.n	80016b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f06f 0202 	mvn.w	r2, #2
 8001680:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2201      	movs	r2, #1
 8001686:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	699b      	ldr	r3, [r3, #24]
 800168e:	f003 0303 	and.w	r3, r3, #3
 8001692:	2b00      	cmp	r3, #0
 8001694:	d003      	beq.n	800169e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f000 f8ed 	bl	8001876 <HAL_TIM_IC_CaptureCallback>
 800169c:	e005      	b.n	80016aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f000 f8e0 	bl	8001864 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f000 f8ef 	bl	8001888 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2200      	movs	r2, #0
 80016ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	691b      	ldr	r3, [r3, #16]
 80016b6:	f003 0304 	and.w	r3, r3, #4
 80016ba:	2b04      	cmp	r3, #4
 80016bc:	d122      	bne.n	8001704 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	f003 0304 	and.w	r3, r3, #4
 80016c8:	2b04      	cmp	r3, #4
 80016ca:	d11b      	bne.n	8001704 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f06f 0204 	mvn.w	r2, #4
 80016d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2202      	movs	r2, #2
 80016da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	699b      	ldr	r3, [r3, #24]
 80016e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d003      	beq.n	80016f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f000 f8c3 	bl	8001876 <HAL_TIM_IC_CaptureCallback>
 80016f0:	e005      	b.n	80016fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f000 f8b6 	bl	8001864 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f000 f8c5 	bl	8001888 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2200      	movs	r2, #0
 8001702:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	691b      	ldr	r3, [r3, #16]
 800170a:	f003 0308 	and.w	r3, r3, #8
 800170e:	2b08      	cmp	r3, #8
 8001710:	d122      	bne.n	8001758 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	f003 0308 	and.w	r3, r3, #8
 800171c:	2b08      	cmp	r3, #8
 800171e:	d11b      	bne.n	8001758 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f06f 0208 	mvn.w	r2, #8
 8001728:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2204      	movs	r2, #4
 800172e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	69db      	ldr	r3, [r3, #28]
 8001736:	f003 0303 	and.w	r3, r3, #3
 800173a:	2b00      	cmp	r3, #0
 800173c:	d003      	beq.n	8001746 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f000 f899 	bl	8001876 <HAL_TIM_IC_CaptureCallback>
 8001744:	e005      	b.n	8001752 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f000 f88c 	bl	8001864 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f000 f89b 	bl	8001888 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2200      	movs	r2, #0
 8001756:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	691b      	ldr	r3, [r3, #16]
 800175e:	f003 0310 	and.w	r3, r3, #16
 8001762:	2b10      	cmp	r3, #16
 8001764:	d122      	bne.n	80017ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	f003 0310 	and.w	r3, r3, #16
 8001770:	2b10      	cmp	r3, #16
 8001772:	d11b      	bne.n	80017ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f06f 0210 	mvn.w	r2, #16
 800177c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2208      	movs	r2, #8
 8001782:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	69db      	ldr	r3, [r3, #28]
 800178a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800178e:	2b00      	cmp	r3, #0
 8001790:	d003      	beq.n	800179a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f000 f86f 	bl	8001876 <HAL_TIM_IC_CaptureCallback>
 8001798:	e005      	b.n	80017a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f000 f862 	bl	8001864 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f000 f871 	bl	8001888 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2200      	movs	r2, #0
 80017aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	691b      	ldr	r3, [r3, #16]
 80017b2:	f003 0301 	and.w	r3, r3, #1
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d10e      	bne.n	80017d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	f003 0301 	and.w	r3, r3, #1
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d107      	bne.n	80017d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f06f 0201 	mvn.w	r2, #1
 80017d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f7fe fdf6 	bl	80003c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	691b      	ldr	r3, [r3, #16]
 80017de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017e2:	2b80      	cmp	r3, #128	; 0x80
 80017e4:	d10e      	bne.n	8001804 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017f0:	2b80      	cmp	r3, #128	; 0x80
 80017f2:	d107      	bne.n	8001804 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80017fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f000 f8bf 	bl	8001982 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	691b      	ldr	r3, [r3, #16]
 800180a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800180e:	2b40      	cmp	r3, #64	; 0x40
 8001810:	d10e      	bne.n	8001830 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800181c:	2b40      	cmp	r3, #64	; 0x40
 800181e:	d107      	bne.n	8001830 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001828:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f000 f835 	bl	800189a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	691b      	ldr	r3, [r3, #16]
 8001836:	f003 0320 	and.w	r3, r3, #32
 800183a:	2b20      	cmp	r3, #32
 800183c:	d10e      	bne.n	800185c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	f003 0320 	and.w	r3, r3, #32
 8001848:	2b20      	cmp	r3, #32
 800184a:	d107      	bne.n	800185c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f06f 0220 	mvn.w	r2, #32
 8001854:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f000 f88a 	bl	8001970 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800185c:	bf00      	nop
 800185e:	3708      	adds	r7, #8
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}

08001864 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800186c:	bf00      	nop
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	bc80      	pop	{r7}
 8001874:	4770      	bx	lr

08001876 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001876:	b480      	push	{r7}
 8001878:	b083      	sub	sp, #12
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800187e:	bf00      	nop
 8001880:	370c      	adds	r7, #12
 8001882:	46bd      	mov	sp, r7
 8001884:	bc80      	pop	{r7}
 8001886:	4770      	bx	lr

08001888 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001890:	bf00      	nop
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	bc80      	pop	{r7}
 8001898:	4770      	bx	lr

0800189a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800189a:	b480      	push	{r7}
 800189c:	b083      	sub	sp, #12
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80018a2:	bf00      	nop
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bc80      	pop	{r7}
 80018aa:	4770      	bx	lr

080018ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b085      	sub	sp, #20
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	4a29      	ldr	r2, [pc, #164]	; (8001964 <TIM_Base_SetConfig+0xb8>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d00b      	beq.n	80018dc <TIM_Base_SetConfig+0x30>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018ca:	d007      	beq.n	80018dc <TIM_Base_SetConfig+0x30>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	4a26      	ldr	r2, [pc, #152]	; (8001968 <TIM_Base_SetConfig+0xbc>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d003      	beq.n	80018dc <TIM_Base_SetConfig+0x30>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	4a25      	ldr	r2, [pc, #148]	; (800196c <TIM_Base_SetConfig+0xc0>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d108      	bne.n	80018ee <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	68fa      	ldr	r2, [r7, #12]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4a1c      	ldr	r2, [pc, #112]	; (8001964 <TIM_Base_SetConfig+0xb8>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d00b      	beq.n	800190e <TIM_Base_SetConfig+0x62>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018fc:	d007      	beq.n	800190e <TIM_Base_SetConfig+0x62>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a19      	ldr	r2, [pc, #100]	; (8001968 <TIM_Base_SetConfig+0xbc>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d003      	beq.n	800190e <TIM_Base_SetConfig+0x62>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a18      	ldr	r2, [pc, #96]	; (800196c <TIM_Base_SetConfig+0xc0>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d108      	bne.n	8001920 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001914:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	68db      	ldr	r3, [r3, #12]
 800191a:	68fa      	ldr	r2, [r7, #12]
 800191c:	4313      	orrs	r3, r2
 800191e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	695b      	ldr	r3, [r3, #20]
 800192a:	4313      	orrs	r3, r2
 800192c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	68fa      	ldr	r2, [r7, #12]
 8001932:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	689a      	ldr	r2, [r3, #8]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	4a07      	ldr	r2, [pc, #28]	; (8001964 <TIM_Base_SetConfig+0xb8>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d103      	bne.n	8001954 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	691a      	ldr	r2, [r3, #16]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2201      	movs	r2, #1
 8001958:	615a      	str	r2, [r3, #20]
}
 800195a:	bf00      	nop
 800195c:	3714      	adds	r7, #20
 800195e:	46bd      	mov	sp, r7
 8001960:	bc80      	pop	{r7}
 8001962:	4770      	bx	lr
 8001964:	40012c00 	.word	0x40012c00
 8001968:	40000400 	.word	0x40000400
 800196c:	40000800 	.word	0x40000800

08001970 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001978:	bf00      	nop
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	bc80      	pop	{r7}
 8001980:	4770      	bx	lr

08001982 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001982:	b480      	push	{r7}
 8001984:	b083      	sub	sp, #12
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800198a:	bf00      	nop
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	bc80      	pop	{r7}
 8001992:	4770      	bx	lr

08001994 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d101      	bne.n	80019a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e042      	b.n	8001a2c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d106      	bne.n	80019c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2200      	movs	r2, #0
 80019b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f7fe fd4e 	bl	800045c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2224      	movs	r2, #36	; 0x24
 80019c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	68da      	ldr	r2, [r3, #12]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80019d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f000 f91d 	bl	8001c18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	691a      	ldr	r2, [r3, #16]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80019ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	695a      	ldr	r2, [r3, #20]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80019fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	68da      	ldr	r2, [r3, #12]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2200      	movs	r2, #0
 8001a12:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2220      	movs	r2, #32
 8001a18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2220      	movs	r2, #32
 8001a20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2200      	movs	r2, #0
 8001a28:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001a2a:	2300      	movs	r3, #0
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3708      	adds	r7, #8
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}

08001a34 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b08a      	sub	sp, #40	; 0x28
 8001a38:	af02      	add	r7, sp, #8
 8001a3a:	60f8      	str	r0, [r7, #12]
 8001a3c:	60b9      	str	r1, [r7, #8]
 8001a3e:	603b      	str	r3, [r7, #0]
 8001a40:	4613      	mov	r3, r2
 8001a42:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001a44:	2300      	movs	r3, #0
 8001a46:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	2b20      	cmp	r3, #32
 8001a52:	d16d      	bne.n	8001b30 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d002      	beq.n	8001a60 <HAL_UART_Transmit+0x2c>
 8001a5a:	88fb      	ldrh	r3, [r7, #6]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d101      	bne.n	8001a64 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e066      	b.n	8001b32 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	2200      	movs	r2, #0
 8001a68:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	2221      	movs	r2, #33	; 0x21
 8001a6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001a72:	f7fe fe65 	bl	8000740 <HAL_GetTick>
 8001a76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	88fa      	ldrh	r2, [r7, #6]
 8001a7c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	88fa      	ldrh	r2, [r7, #6]
 8001a82:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a8c:	d108      	bne.n	8001aa0 <HAL_UART_Transmit+0x6c>
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	691b      	ldr	r3, [r3, #16]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d104      	bne.n	8001aa0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001a96:	2300      	movs	r3, #0
 8001a98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	61bb      	str	r3, [r7, #24]
 8001a9e:	e003      	b.n	8001aa8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001aa8:	e02a      	b.n	8001b00 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	9300      	str	r3, [sp, #0]
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	2180      	movs	r1, #128	; 0x80
 8001ab4:	68f8      	ldr	r0, [r7, #12]
 8001ab6:	f000 f840 	bl	8001b3a <UART_WaitOnFlagUntilTimeout>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	e036      	b.n	8001b32 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d10b      	bne.n	8001ae2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	881b      	ldrh	r3, [r3, #0]
 8001ace:	461a      	mov	r2, r3
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ad8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	3302      	adds	r3, #2
 8001ade:	61bb      	str	r3, [r7, #24]
 8001ae0:	e007      	b.n	8001af2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	781a      	ldrb	r2, [r3, #0]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	3301      	adds	r3, #1
 8001af0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	3b01      	subs	r3, #1
 8001afa:	b29a      	uxth	r2, r3
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001b04:	b29b      	uxth	r3, r3
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d1cf      	bne.n	8001aaa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	9300      	str	r3, [sp, #0]
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	2200      	movs	r2, #0
 8001b12:	2140      	movs	r1, #64	; 0x40
 8001b14:	68f8      	ldr	r0, [r7, #12]
 8001b16:	f000 f810 	bl	8001b3a <UART_WaitOnFlagUntilTimeout>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001b20:	2303      	movs	r3, #3
 8001b22:	e006      	b.n	8001b32 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2220      	movs	r2, #32
 8001b28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	e000      	b.n	8001b32 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001b30:	2302      	movs	r3, #2
  }
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3720      	adds	r7, #32
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b090      	sub	sp, #64	; 0x40
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	60f8      	str	r0, [r7, #12]
 8001b42:	60b9      	str	r1, [r7, #8]
 8001b44:	603b      	str	r3, [r7, #0]
 8001b46:	4613      	mov	r3, r2
 8001b48:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001b4a:	e050      	b.n	8001bee <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b52:	d04c      	beq.n	8001bee <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001b54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d007      	beq.n	8001b6a <UART_WaitOnFlagUntilTimeout+0x30>
 8001b5a:	f7fe fdf1 	bl	8000740 <HAL_GetTick>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d241      	bcs.n	8001bee <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	330c      	adds	r3, #12
 8001b70:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b74:	e853 3f00 	ldrex	r3, [r3]
 8001b78:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001b80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	330c      	adds	r3, #12
 8001b88:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001b8a:	637a      	str	r2, [r7, #52]	; 0x34
 8001b8c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b8e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001b90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001b92:	e841 2300 	strex	r3, r2, [r1]
 8001b96:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d1e5      	bne.n	8001b6a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	3314      	adds	r3, #20
 8001ba4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	e853 3f00 	ldrex	r3, [r3]
 8001bac:	613b      	str	r3, [r7, #16]
   return(result);
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	f023 0301 	bic.w	r3, r3, #1
 8001bb4:	63bb      	str	r3, [r7, #56]	; 0x38
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	3314      	adds	r3, #20
 8001bbc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001bbe:	623a      	str	r2, [r7, #32]
 8001bc0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001bc2:	69f9      	ldr	r1, [r7, #28]
 8001bc4:	6a3a      	ldr	r2, [r7, #32]
 8001bc6:	e841 2300 	strex	r3, r2, [r1]
 8001bca:	61bb      	str	r3, [r7, #24]
   return(result);
 8001bcc:	69bb      	ldr	r3, [r7, #24]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d1e5      	bne.n	8001b9e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2220      	movs	r2, #32
 8001bd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2220      	movs	r2, #32
 8001bde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2200      	movs	r2, #0
 8001be6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e00f      	b.n	8001c0e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	68ba      	ldr	r2, [r7, #8]
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	bf0c      	ite	eq
 8001bfe:	2301      	moveq	r3, #1
 8001c00:	2300      	movne	r3, #0
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	461a      	mov	r2, r3
 8001c06:	79fb      	ldrb	r3, [r7, #7]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d09f      	beq.n	8001b4c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3740      	adds	r7, #64	; 0x40
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
	...

08001c18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	691b      	ldr	r3, [r3, #16]
 8001c26:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	68da      	ldr	r2, [r3, #12]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	430a      	orrs	r2, r1
 8001c34:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	689a      	ldr	r2, [r3, #8]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	691b      	ldr	r3, [r3, #16]
 8001c3e:	431a      	orrs	r2, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	695b      	ldr	r3, [r3, #20]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	68db      	ldr	r3, [r3, #12]
 8001c4e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001c52:	f023 030c 	bic.w	r3, r3, #12
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	6812      	ldr	r2, [r2, #0]
 8001c5a:	68b9      	ldr	r1, [r7, #8]
 8001c5c:	430b      	orrs	r3, r1
 8001c5e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	695b      	ldr	r3, [r3, #20]
 8001c66:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	699a      	ldr	r2, [r3, #24]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	430a      	orrs	r2, r1
 8001c74:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a2c      	ldr	r2, [pc, #176]	; (8001d2c <UART_SetConfig+0x114>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d103      	bne.n	8001c88 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001c80:	f7ff fbdc 	bl	800143c <HAL_RCC_GetPCLK2Freq>
 8001c84:	60f8      	str	r0, [r7, #12]
 8001c86:	e002      	b.n	8001c8e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001c88:	f7ff fbc4 	bl	8001414 <HAL_RCC_GetPCLK1Freq>
 8001c8c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001c8e:	68fa      	ldr	r2, [r7, #12]
 8001c90:	4613      	mov	r3, r2
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	4413      	add	r3, r2
 8001c96:	009a      	lsls	r2, r3, #2
 8001c98:	441a      	add	r2, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ca4:	4a22      	ldr	r2, [pc, #136]	; (8001d30 <UART_SetConfig+0x118>)
 8001ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8001caa:	095b      	lsrs	r3, r3, #5
 8001cac:	0119      	lsls	r1, r3, #4
 8001cae:	68fa      	ldr	r2, [r7, #12]
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	4413      	add	r3, r2
 8001cb6:	009a      	lsls	r2, r3, #2
 8001cb8:	441a      	add	r2, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001cc4:	4b1a      	ldr	r3, [pc, #104]	; (8001d30 <UART_SetConfig+0x118>)
 8001cc6:	fba3 0302 	umull	r0, r3, r3, r2
 8001cca:	095b      	lsrs	r3, r3, #5
 8001ccc:	2064      	movs	r0, #100	; 0x64
 8001cce:	fb00 f303 	mul.w	r3, r0, r3
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	011b      	lsls	r3, r3, #4
 8001cd6:	3332      	adds	r3, #50	; 0x32
 8001cd8:	4a15      	ldr	r2, [pc, #84]	; (8001d30 <UART_SetConfig+0x118>)
 8001cda:	fba2 2303 	umull	r2, r3, r2, r3
 8001cde:	095b      	lsrs	r3, r3, #5
 8001ce0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ce4:	4419      	add	r1, r3
 8001ce6:	68fa      	ldr	r2, [r7, #12]
 8001ce8:	4613      	mov	r3, r2
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	4413      	add	r3, r2
 8001cee:	009a      	lsls	r2, r3, #2
 8001cf0:	441a      	add	r2, r3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001cfc:	4b0c      	ldr	r3, [pc, #48]	; (8001d30 <UART_SetConfig+0x118>)
 8001cfe:	fba3 0302 	umull	r0, r3, r3, r2
 8001d02:	095b      	lsrs	r3, r3, #5
 8001d04:	2064      	movs	r0, #100	; 0x64
 8001d06:	fb00 f303 	mul.w	r3, r0, r3
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	011b      	lsls	r3, r3, #4
 8001d0e:	3332      	adds	r3, #50	; 0x32
 8001d10:	4a07      	ldr	r2, [pc, #28]	; (8001d30 <UART_SetConfig+0x118>)
 8001d12:	fba2 2303 	umull	r2, r3, r2, r3
 8001d16:	095b      	lsrs	r3, r3, #5
 8001d18:	f003 020f 	and.w	r2, r3, #15
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	440a      	add	r2, r1
 8001d22:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001d24:	bf00      	nop
 8001d26:	3710      	adds	r7, #16
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	40013800 	.word	0x40013800
 8001d30:	51eb851f 	.word	0x51eb851f

08001d34 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f103 0208 	add.w	r2, r3, #8
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	f04f 32ff 	mov.w	r2, #4294967295
 8001d4c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f103 0208 	add.w	r2, r3, #8
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f103 0208 	add.w	r2, r3, #8
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001d68:	bf00      	nop
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bc80      	pop	{r7}
 8001d70:	4770      	bx	lr

08001d72 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001d72:	b480      	push	{r7}
 8001d74:	b083      	sub	sp, #12
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001d80:	bf00      	nop
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bc80      	pop	{r7}
 8001d88:	4770      	bx	lr

08001d8a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	b085      	sub	sp, #20
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
 8001d92:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	68fa      	ldr	r2, [r7, #12]
 8001d9e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	689a      	ldr	r2, [r3, #8]
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	683a      	ldr	r2, [r7, #0]
 8001dae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	683a      	ldr	r2, [r7, #0]
 8001db4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	1c5a      	adds	r2, r3, #1
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	601a      	str	r2, [r3, #0]
}
 8001dc6:	bf00      	nop
 8001dc8:	3714      	adds	r7, #20
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bc80      	pop	{r7}
 8001dce:	4770      	bx	lr

08001dd0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b085      	sub	sp, #20
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001de6:	d103      	bne.n	8001df0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	691b      	ldr	r3, [r3, #16]
 8001dec:	60fb      	str	r3, [r7, #12]
 8001dee:	e00c      	b.n	8001e0a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	3308      	adds	r3, #8
 8001df4:	60fb      	str	r3, [r7, #12]
 8001df6:	e002      	b.n	8001dfe <vListInsert+0x2e>
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	60fb      	str	r3, [r7, #12]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	68ba      	ldr	r2, [r7, #8]
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d2f6      	bcs.n	8001df8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	685a      	ldr	r2, [r3, #4]
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	683a      	ldr	r2, [r7, #0]
 8001e18:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	68fa      	ldr	r2, [r7, #12]
 8001e1e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	683a      	ldr	r2, [r7, #0]
 8001e24:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	1c5a      	adds	r2, r3, #1
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	601a      	str	r2, [r3, #0]
}
 8001e36:	bf00      	nop
 8001e38:	3714      	adds	r7, #20
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bc80      	pop	{r7}
 8001e3e:	4770      	bx	lr

08001e40 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	691b      	ldr	r3, [r3, #16]
 8001e4c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	6892      	ldr	r2, [r2, #8]
 8001e56:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	6852      	ldr	r2, [r2, #4]
 8001e60:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d103      	bne.n	8001e74 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	689a      	ldr	r2, [r3, #8]
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2200      	movs	r2, #0
 8001e78:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	1e5a      	subs	r2, r3, #1
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3714      	adds	r7, #20
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bc80      	pop	{r7}
 8001e90:	4770      	bx	lr

08001e92 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b08e      	sub	sp, #56	; 0x38
 8001e96:	af04      	add	r7, sp, #16
 8001e98:	60f8      	str	r0, [r7, #12]
 8001e9a:	60b9      	str	r1, [r7, #8]
 8001e9c:	607a      	str	r2, [r7, #4]
 8001e9e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8001ea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d10a      	bne.n	8001ebc <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001eaa:	f383 8811 	msr	BASEPRI, r3
 8001eae:	f3bf 8f6f 	isb	sy
 8001eb2:	f3bf 8f4f 	dsb	sy
 8001eb6:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001eb8:	bf00      	nop
 8001eba:	e7fe      	b.n	8001eba <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8001ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d10a      	bne.n	8001ed8 <xTaskCreateStatic+0x46>
	__asm volatile
 8001ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ec6:	f383 8811 	msr	BASEPRI, r3
 8001eca:	f3bf 8f6f 	isb	sy
 8001ece:	f3bf 8f4f 	dsb	sy
 8001ed2:	61fb      	str	r3, [r7, #28]
}
 8001ed4:	bf00      	nop
 8001ed6:	e7fe      	b.n	8001ed6 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8001ed8:	23a0      	movs	r3, #160	; 0xa0
 8001eda:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	2ba0      	cmp	r3, #160	; 0xa0
 8001ee0:	d00a      	beq.n	8001ef8 <xTaskCreateStatic+0x66>
	__asm volatile
 8001ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ee6:	f383 8811 	msr	BASEPRI, r3
 8001eea:	f3bf 8f6f 	isb	sy
 8001eee:	f3bf 8f4f 	dsb	sy
 8001ef2:	61bb      	str	r3, [r7, #24]
}
 8001ef4:	bf00      	nop
 8001ef6:	e7fe      	b.n	8001ef6 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8001ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d01e      	beq.n	8001f3c <xTaskCreateStatic+0xaa>
 8001efe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d01b      	beq.n	8001f3c <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f06:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8001f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f0c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8001f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f10:	2202      	movs	r2, #2
 8001f12:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8001f16:	2300      	movs	r3, #0
 8001f18:	9303      	str	r3, [sp, #12]
 8001f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1c:	9302      	str	r3, [sp, #8]
 8001f1e:	f107 0314 	add.w	r3, r7, #20
 8001f22:	9301      	str	r3, [sp, #4]
 8001f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f26:	9300      	str	r3, [sp, #0]
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	68b9      	ldr	r1, [r7, #8]
 8001f2e:	68f8      	ldr	r0, [r7, #12]
 8001f30:	f000 f850 	bl	8001fd4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001f34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001f36:	f000 f8e3 	bl	8002100 <prvAddNewTaskToReadyList>
 8001f3a:	e001      	b.n	8001f40 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8001f40:	697b      	ldr	r3, [r7, #20]
	}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3728      	adds	r7, #40	; 0x28
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b08c      	sub	sp, #48	; 0x30
 8001f4e:	af04      	add	r7, sp, #16
 8001f50:	60f8      	str	r0, [r7, #12]
 8001f52:	60b9      	str	r1, [r7, #8]
 8001f54:	603b      	str	r3, [r7, #0]
 8001f56:	4613      	mov	r3, r2
 8001f58:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001f5a:	88fb      	ldrh	r3, [r7, #6]
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f000 fe96 	bl	8002c90 <pvPortMalloc>
 8001f64:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d00e      	beq.n	8001f8a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8001f6c:	20a0      	movs	r0, #160	; 0xa0
 8001f6e:	f000 fe8f 	bl	8002c90 <pvPortMalloc>
 8001f72:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d003      	beq.n	8001f82 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	697a      	ldr	r2, [r7, #20]
 8001f7e:	631a      	str	r2, [r3, #48]	; 0x30
 8001f80:	e005      	b.n	8001f8e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001f82:	6978      	ldr	r0, [r7, #20]
 8001f84:	f000 ff48 	bl	8002e18 <vPortFree>
 8001f88:	e001      	b.n	8001f8e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d017      	beq.n	8001fc4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	2200      	movs	r2, #0
 8001f98:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001f9c:	88fa      	ldrh	r2, [r7, #6]
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	9303      	str	r3, [sp, #12]
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	9302      	str	r3, [sp, #8]
 8001fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fa8:	9301      	str	r3, [sp, #4]
 8001faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fac:	9300      	str	r3, [sp, #0]
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	68b9      	ldr	r1, [r7, #8]
 8001fb2:	68f8      	ldr	r0, [r7, #12]
 8001fb4:	f000 f80e 	bl	8001fd4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001fb8:	69f8      	ldr	r0, [r7, #28]
 8001fba:	f000 f8a1 	bl	8002100 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	61bb      	str	r3, [r7, #24]
 8001fc2:	e002      	b.n	8001fca <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001fc4:	f04f 33ff 	mov.w	r3, #4294967295
 8001fc8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001fca:	69bb      	ldr	r3, [r7, #24]
	}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3720      	adds	r7, #32
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b088      	sub	sp, #32
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	60f8      	str	r0, [r7, #12]
 8001fdc:	60b9      	str	r1, [r7, #8]
 8001fde:	607a      	str	r2, [r7, #4]
 8001fe0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fe4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001fec:	3b01      	subs	r3, #1
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	4413      	add	r3, r2
 8001ff2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	f023 0307 	bic.w	r3, r3, #7
 8001ffa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	f003 0307 	and.w	r3, r3, #7
 8002002:	2b00      	cmp	r3, #0
 8002004:	d00a      	beq.n	800201c <prvInitialiseNewTask+0x48>
	__asm volatile
 8002006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800200a:	f383 8811 	msr	BASEPRI, r3
 800200e:	f3bf 8f6f 	isb	sy
 8002012:	f3bf 8f4f 	dsb	sy
 8002016:	617b      	str	r3, [r7, #20]
}
 8002018:	bf00      	nop
 800201a:	e7fe      	b.n	800201a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800201c:	2300      	movs	r3, #0
 800201e:	61fb      	str	r3, [r7, #28]
 8002020:	e012      	b.n	8002048 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002022:	68ba      	ldr	r2, [r7, #8]
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	4413      	add	r3, r2
 8002028:	7819      	ldrb	r1, [r3, #0]
 800202a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	4413      	add	r3, r2
 8002030:	3334      	adds	r3, #52	; 0x34
 8002032:	460a      	mov	r2, r1
 8002034:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002036:	68ba      	ldr	r2, [r7, #8]
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	4413      	add	r3, r2
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d006      	beq.n	8002050 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	3301      	adds	r3, #1
 8002046:	61fb      	str	r3, [r7, #28]
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	2b0f      	cmp	r3, #15
 800204c:	d9e9      	bls.n	8002022 <prvInitialiseNewTask+0x4e>
 800204e:	e000      	b.n	8002052 <prvInitialiseNewTask+0x7e>
		{
			break;
 8002050:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002054:	2200      	movs	r2, #0
 8002056:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800205a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800205c:	2b06      	cmp	r3, #6
 800205e:	d901      	bls.n	8002064 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002060:	2306      	movs	r3, #6
 8002062:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002066:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002068:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800206a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800206c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800206e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002072:	2200      	movs	r2, #0
 8002074:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002078:	3304      	adds	r3, #4
 800207a:	4618      	mov	r0, r3
 800207c:	f7ff fe79 	bl	8001d72 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002082:	3318      	adds	r3, #24
 8002084:	4618      	mov	r0, r3
 8002086:	f7ff fe74 	bl	8001d72 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800208a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800208c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800208e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002092:	f1c3 0207 	rsb	r2, r3, #7
 8002096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002098:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800209a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800209c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800209e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80020a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020a2:	2200      	movs	r2, #0
 80020a4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80020a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020aa:	2200      	movs	r2, #0
 80020ac:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80020b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020b2:	334c      	adds	r3, #76	; 0x4c
 80020b4:	224c      	movs	r2, #76	; 0x4c
 80020b6:	2100      	movs	r1, #0
 80020b8:	4618      	mov	r0, r3
 80020ba:	f000 ffe1 	bl	8003080 <memset>
 80020be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020c0:	4a0c      	ldr	r2, [pc, #48]	; (80020f4 <prvInitialiseNewTask+0x120>)
 80020c2:	651a      	str	r2, [r3, #80]	; 0x50
 80020c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020c6:	4a0c      	ldr	r2, [pc, #48]	; (80020f8 <prvInitialiseNewTask+0x124>)
 80020c8:	655a      	str	r2, [r3, #84]	; 0x54
 80020ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020cc:	4a0b      	ldr	r2, [pc, #44]	; (80020fc <prvInitialiseNewTask+0x128>)
 80020ce:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80020d0:	683a      	ldr	r2, [r7, #0]
 80020d2:	68f9      	ldr	r1, [r7, #12]
 80020d4:	69b8      	ldr	r0, [r7, #24]
 80020d6:	f000 fc29 	bl	800292c <pxPortInitialiseStack>
 80020da:	4602      	mov	r2, r0
 80020dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020de:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80020e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d002      	beq.n	80020ec <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80020e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80020ea:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80020ec:	bf00      	nop
 80020ee:	3720      	adds	r7, #32
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	20001100 	.word	0x20001100
 80020f8:	20001168 	.word	0x20001168
 80020fc:	200011d0 	.word	0x200011d0

08002100 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002108:	f000 fd00 	bl	8002b0c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800210c:	4b2a      	ldr	r3, [pc, #168]	; (80021b8 <prvAddNewTaskToReadyList+0xb8>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	3301      	adds	r3, #1
 8002112:	4a29      	ldr	r2, [pc, #164]	; (80021b8 <prvAddNewTaskToReadyList+0xb8>)
 8002114:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002116:	4b29      	ldr	r3, [pc, #164]	; (80021bc <prvAddNewTaskToReadyList+0xbc>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d109      	bne.n	8002132 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800211e:	4a27      	ldr	r2, [pc, #156]	; (80021bc <prvAddNewTaskToReadyList+0xbc>)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002124:	4b24      	ldr	r3, [pc, #144]	; (80021b8 <prvAddNewTaskToReadyList+0xb8>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	2b01      	cmp	r3, #1
 800212a:	d110      	bne.n	800214e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800212c:	f000 fad2 	bl	80026d4 <prvInitialiseTaskLists>
 8002130:	e00d      	b.n	800214e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002132:	4b23      	ldr	r3, [pc, #140]	; (80021c0 <prvAddNewTaskToReadyList+0xc0>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d109      	bne.n	800214e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800213a:	4b20      	ldr	r3, [pc, #128]	; (80021bc <prvAddNewTaskToReadyList+0xbc>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002144:	429a      	cmp	r2, r3
 8002146:	d802      	bhi.n	800214e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002148:	4a1c      	ldr	r2, [pc, #112]	; (80021bc <prvAddNewTaskToReadyList+0xbc>)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800214e:	4b1d      	ldr	r3, [pc, #116]	; (80021c4 <prvAddNewTaskToReadyList+0xc4>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	3301      	adds	r3, #1
 8002154:	4a1b      	ldr	r2, [pc, #108]	; (80021c4 <prvAddNewTaskToReadyList+0xc4>)
 8002156:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800215c:	2201      	movs	r2, #1
 800215e:	409a      	lsls	r2, r3
 8002160:	4b19      	ldr	r3, [pc, #100]	; (80021c8 <prvAddNewTaskToReadyList+0xc8>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4313      	orrs	r3, r2
 8002166:	4a18      	ldr	r2, [pc, #96]	; (80021c8 <prvAddNewTaskToReadyList+0xc8>)
 8002168:	6013      	str	r3, [r2, #0]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800216e:	4613      	mov	r3, r2
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	4413      	add	r3, r2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	4a15      	ldr	r2, [pc, #84]	; (80021cc <prvAddNewTaskToReadyList+0xcc>)
 8002178:	441a      	add	r2, r3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	3304      	adds	r3, #4
 800217e:	4619      	mov	r1, r3
 8002180:	4610      	mov	r0, r2
 8002182:	f7ff fe02 	bl	8001d8a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002186:	f000 fcf1 	bl	8002b6c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800218a:	4b0d      	ldr	r3, [pc, #52]	; (80021c0 <prvAddNewTaskToReadyList+0xc0>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d00e      	beq.n	80021b0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002192:	4b0a      	ldr	r3, [pc, #40]	; (80021bc <prvAddNewTaskToReadyList+0xbc>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800219c:	429a      	cmp	r2, r3
 800219e:	d207      	bcs.n	80021b0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80021a0:	4b0b      	ldr	r3, [pc, #44]	; (80021d0 <prvAddNewTaskToReadyList+0xd0>)
 80021a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021a6:	601a      	str	r2, [r3, #0]
 80021a8:	f3bf 8f4f 	dsb	sy
 80021ac:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80021b0:	bf00      	nop
 80021b2:	3708      	adds	r7, #8
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	200004b4 	.word	0x200004b4
 80021bc:	200003b4 	.word	0x200003b4
 80021c0:	200004c0 	.word	0x200004c0
 80021c4:	200004d0 	.word	0x200004d0
 80021c8:	200004bc 	.word	0x200004bc
 80021cc:	200003b8 	.word	0x200003b8
 80021d0:	e000ed04 	.word	0xe000ed04

080021d4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80021dc:	2300      	movs	r3, #0
 80021de:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d017      	beq.n	8002216 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80021e6:	4b13      	ldr	r3, [pc, #76]	; (8002234 <vTaskDelay+0x60>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d00a      	beq.n	8002204 <vTaskDelay+0x30>
	__asm volatile
 80021ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021f2:	f383 8811 	msr	BASEPRI, r3
 80021f6:	f3bf 8f6f 	isb	sy
 80021fa:	f3bf 8f4f 	dsb	sy
 80021fe:	60bb      	str	r3, [r7, #8]
}
 8002200:	bf00      	nop
 8002202:	e7fe      	b.n	8002202 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002204:	f000 f884 	bl	8002310 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002208:	2100      	movs	r1, #0
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f000 fb28 	bl	8002860 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002210:	f000 f88c 	bl	800232c <xTaskResumeAll>
 8002214:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d107      	bne.n	800222c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800221c:	4b06      	ldr	r3, [pc, #24]	; (8002238 <vTaskDelay+0x64>)
 800221e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002222:	601a      	str	r2, [r3, #0]
 8002224:	f3bf 8f4f 	dsb	sy
 8002228:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800222c:	bf00      	nop
 800222e:	3710      	adds	r7, #16
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	200004dc 	.word	0x200004dc
 8002238:	e000ed04 	.word	0xe000ed04

0800223c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b08a      	sub	sp, #40	; 0x28
 8002240:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002242:	2300      	movs	r3, #0
 8002244:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002246:	2300      	movs	r3, #0
 8002248:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800224a:	463a      	mov	r2, r7
 800224c:	1d39      	adds	r1, r7, #4
 800224e:	f107 0308 	add.w	r3, r7, #8
 8002252:	4618      	mov	r0, r3
 8002254:	f7fd ff7c 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002258:	6839      	ldr	r1, [r7, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	68ba      	ldr	r2, [r7, #8]
 800225e:	9202      	str	r2, [sp, #8]
 8002260:	9301      	str	r3, [sp, #4]
 8002262:	2300      	movs	r3, #0
 8002264:	9300      	str	r3, [sp, #0]
 8002266:	2300      	movs	r3, #0
 8002268:	460a      	mov	r2, r1
 800226a:	4921      	ldr	r1, [pc, #132]	; (80022f0 <vTaskStartScheduler+0xb4>)
 800226c:	4821      	ldr	r0, [pc, #132]	; (80022f4 <vTaskStartScheduler+0xb8>)
 800226e:	f7ff fe10 	bl	8001e92 <xTaskCreateStatic>
 8002272:	4603      	mov	r3, r0
 8002274:	4a20      	ldr	r2, [pc, #128]	; (80022f8 <vTaskStartScheduler+0xbc>)
 8002276:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002278:	4b1f      	ldr	r3, [pc, #124]	; (80022f8 <vTaskStartScheduler+0xbc>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d002      	beq.n	8002286 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002280:	2301      	movs	r3, #1
 8002282:	617b      	str	r3, [r7, #20]
 8002284:	e001      	b.n	800228a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002286:	2300      	movs	r3, #0
 8002288:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	2b01      	cmp	r3, #1
 800228e:	d11b      	bne.n	80022c8 <vTaskStartScheduler+0x8c>
	__asm volatile
 8002290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002294:	f383 8811 	msr	BASEPRI, r3
 8002298:	f3bf 8f6f 	isb	sy
 800229c:	f3bf 8f4f 	dsb	sy
 80022a0:	613b      	str	r3, [r7, #16]
}
 80022a2:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80022a4:	4b15      	ldr	r3, [pc, #84]	; (80022fc <vTaskStartScheduler+0xc0>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	334c      	adds	r3, #76	; 0x4c
 80022aa:	4a15      	ldr	r2, [pc, #84]	; (8002300 <vTaskStartScheduler+0xc4>)
 80022ac:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80022ae:	4b15      	ldr	r3, [pc, #84]	; (8002304 <vTaskStartScheduler+0xc8>)
 80022b0:	f04f 32ff 	mov.w	r2, #4294967295
 80022b4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80022b6:	4b14      	ldr	r3, [pc, #80]	; (8002308 <vTaskStartScheduler+0xcc>)
 80022b8:	2201      	movs	r2, #1
 80022ba:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80022bc:	4b13      	ldr	r3, [pc, #76]	; (800230c <vTaskStartScheduler+0xd0>)
 80022be:	2200      	movs	r2, #0
 80022c0:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80022c2:	f000 fbb1 	bl	8002a28 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80022c6:	e00e      	b.n	80022e6 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022ce:	d10a      	bne.n	80022e6 <vTaskStartScheduler+0xaa>
	__asm volatile
 80022d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022d4:	f383 8811 	msr	BASEPRI, r3
 80022d8:	f3bf 8f6f 	isb	sy
 80022dc:	f3bf 8f4f 	dsb	sy
 80022e0:	60fb      	str	r3, [r7, #12]
}
 80022e2:	bf00      	nop
 80022e4:	e7fe      	b.n	80022e4 <vTaskStartScheduler+0xa8>
}
 80022e6:	bf00      	nop
 80022e8:	3718      	adds	r7, #24
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	08003aa0 	.word	0x08003aa0
 80022f4:	080026a5 	.word	0x080026a5
 80022f8:	200004d8 	.word	0x200004d8
 80022fc:	200003b4 	.word	0x200003b4
 8002300:	2000005c 	.word	0x2000005c
 8002304:	200004d4 	.word	0x200004d4
 8002308:	200004c0 	.word	0x200004c0
 800230c:	200004b8 	.word	0x200004b8

08002310 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002314:	4b04      	ldr	r3, [pc, #16]	; (8002328 <vTaskSuspendAll+0x18>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	3301      	adds	r3, #1
 800231a:	4a03      	ldr	r2, [pc, #12]	; (8002328 <vTaskSuspendAll+0x18>)
 800231c:	6013      	str	r3, [r2, #0]
}
 800231e:	bf00      	nop
 8002320:	46bd      	mov	sp, r7
 8002322:	bc80      	pop	{r7}
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	200004dc 	.word	0x200004dc

0800232c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002332:	2300      	movs	r3, #0
 8002334:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002336:	2300      	movs	r3, #0
 8002338:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800233a:	4b41      	ldr	r3, [pc, #260]	; (8002440 <xTaskResumeAll+0x114>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d10a      	bne.n	8002358 <xTaskResumeAll+0x2c>
	__asm volatile
 8002342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002346:	f383 8811 	msr	BASEPRI, r3
 800234a:	f3bf 8f6f 	isb	sy
 800234e:	f3bf 8f4f 	dsb	sy
 8002352:	603b      	str	r3, [r7, #0]
}
 8002354:	bf00      	nop
 8002356:	e7fe      	b.n	8002356 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002358:	f000 fbd8 	bl	8002b0c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800235c:	4b38      	ldr	r3, [pc, #224]	; (8002440 <xTaskResumeAll+0x114>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	3b01      	subs	r3, #1
 8002362:	4a37      	ldr	r2, [pc, #220]	; (8002440 <xTaskResumeAll+0x114>)
 8002364:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002366:	4b36      	ldr	r3, [pc, #216]	; (8002440 <xTaskResumeAll+0x114>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d161      	bne.n	8002432 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800236e:	4b35      	ldr	r3, [pc, #212]	; (8002444 <xTaskResumeAll+0x118>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d05d      	beq.n	8002432 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002376:	e02e      	b.n	80023d6 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002378:	4b33      	ldr	r3, [pc, #204]	; (8002448 <xTaskResumeAll+0x11c>)
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	3318      	adds	r3, #24
 8002384:	4618      	mov	r0, r3
 8002386:	f7ff fd5b 	bl	8001e40 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	3304      	adds	r3, #4
 800238e:	4618      	mov	r0, r3
 8002390:	f7ff fd56 	bl	8001e40 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002398:	2201      	movs	r2, #1
 800239a:	409a      	lsls	r2, r3
 800239c:	4b2b      	ldr	r3, [pc, #172]	; (800244c <xTaskResumeAll+0x120>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	4a2a      	ldr	r2, [pc, #168]	; (800244c <xTaskResumeAll+0x120>)
 80023a4:	6013      	str	r3, [r2, #0]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023aa:	4613      	mov	r3, r2
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	4413      	add	r3, r2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	4a27      	ldr	r2, [pc, #156]	; (8002450 <xTaskResumeAll+0x124>)
 80023b4:	441a      	add	r2, r3
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	3304      	adds	r3, #4
 80023ba:	4619      	mov	r1, r3
 80023bc:	4610      	mov	r0, r2
 80023be:	f7ff fce4 	bl	8001d8a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023c6:	4b23      	ldr	r3, [pc, #140]	; (8002454 <xTaskResumeAll+0x128>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d302      	bcc.n	80023d6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80023d0:	4b21      	ldr	r3, [pc, #132]	; (8002458 <xTaskResumeAll+0x12c>)
 80023d2:	2201      	movs	r2, #1
 80023d4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80023d6:	4b1c      	ldr	r3, [pc, #112]	; (8002448 <xTaskResumeAll+0x11c>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d1cc      	bne.n	8002378 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80023e4:	f000 fa18 	bl	8002818 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80023e8:	4b1c      	ldr	r3, [pc, #112]	; (800245c <xTaskResumeAll+0x130>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d010      	beq.n	8002416 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80023f4:	f000 f836 	bl	8002464 <xTaskIncrementTick>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d002      	beq.n	8002404 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80023fe:	4b16      	ldr	r3, [pc, #88]	; (8002458 <xTaskResumeAll+0x12c>)
 8002400:	2201      	movs	r2, #1
 8002402:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	3b01      	subs	r3, #1
 8002408:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d1f1      	bne.n	80023f4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8002410:	4b12      	ldr	r3, [pc, #72]	; (800245c <xTaskResumeAll+0x130>)
 8002412:	2200      	movs	r2, #0
 8002414:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002416:	4b10      	ldr	r3, [pc, #64]	; (8002458 <xTaskResumeAll+0x12c>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d009      	beq.n	8002432 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800241e:	2301      	movs	r3, #1
 8002420:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002422:	4b0f      	ldr	r3, [pc, #60]	; (8002460 <xTaskResumeAll+0x134>)
 8002424:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002428:	601a      	str	r2, [r3, #0]
 800242a:	f3bf 8f4f 	dsb	sy
 800242e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002432:	f000 fb9b 	bl	8002b6c <vPortExitCritical>

	return xAlreadyYielded;
 8002436:	68bb      	ldr	r3, [r7, #8]
}
 8002438:	4618      	mov	r0, r3
 800243a:	3710      	adds	r7, #16
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	200004dc 	.word	0x200004dc
 8002444:	200004b4 	.word	0x200004b4
 8002448:	20000474 	.word	0x20000474
 800244c:	200004bc 	.word	0x200004bc
 8002450:	200003b8 	.word	0x200003b8
 8002454:	200003b4 	.word	0x200003b4
 8002458:	200004c8 	.word	0x200004c8
 800245c:	200004c4 	.word	0x200004c4
 8002460:	e000ed04 	.word	0xe000ed04

08002464 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b086      	sub	sp, #24
 8002468:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800246a:	2300      	movs	r3, #0
 800246c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800246e:	4b51      	ldr	r3, [pc, #324]	; (80025b4 <xTaskIncrementTick+0x150>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2b00      	cmp	r3, #0
 8002474:	f040 808d 	bne.w	8002592 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002478:	4b4f      	ldr	r3, [pc, #316]	; (80025b8 <xTaskIncrementTick+0x154>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	3301      	adds	r3, #1
 800247e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002480:	4a4d      	ldr	r2, [pc, #308]	; (80025b8 <xTaskIncrementTick+0x154>)
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d120      	bne.n	80024ce <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800248c:	4b4b      	ldr	r3, [pc, #300]	; (80025bc <xTaskIncrementTick+0x158>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d00a      	beq.n	80024ac <xTaskIncrementTick+0x48>
	__asm volatile
 8002496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800249a:	f383 8811 	msr	BASEPRI, r3
 800249e:	f3bf 8f6f 	isb	sy
 80024a2:	f3bf 8f4f 	dsb	sy
 80024a6:	603b      	str	r3, [r7, #0]
}
 80024a8:	bf00      	nop
 80024aa:	e7fe      	b.n	80024aa <xTaskIncrementTick+0x46>
 80024ac:	4b43      	ldr	r3, [pc, #268]	; (80025bc <xTaskIncrementTick+0x158>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	60fb      	str	r3, [r7, #12]
 80024b2:	4b43      	ldr	r3, [pc, #268]	; (80025c0 <xTaskIncrementTick+0x15c>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a41      	ldr	r2, [pc, #260]	; (80025bc <xTaskIncrementTick+0x158>)
 80024b8:	6013      	str	r3, [r2, #0]
 80024ba:	4a41      	ldr	r2, [pc, #260]	; (80025c0 <xTaskIncrementTick+0x15c>)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	6013      	str	r3, [r2, #0]
 80024c0:	4b40      	ldr	r3, [pc, #256]	; (80025c4 <xTaskIncrementTick+0x160>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	3301      	adds	r3, #1
 80024c6:	4a3f      	ldr	r2, [pc, #252]	; (80025c4 <xTaskIncrementTick+0x160>)
 80024c8:	6013      	str	r3, [r2, #0]
 80024ca:	f000 f9a5 	bl	8002818 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80024ce:	4b3e      	ldr	r3, [pc, #248]	; (80025c8 <xTaskIncrementTick+0x164>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	693a      	ldr	r2, [r7, #16]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d34d      	bcc.n	8002574 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80024d8:	4b38      	ldr	r3, [pc, #224]	; (80025bc <xTaskIncrementTick+0x158>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d101      	bne.n	80024e6 <xTaskIncrementTick+0x82>
 80024e2:	2301      	movs	r3, #1
 80024e4:	e000      	b.n	80024e8 <xTaskIncrementTick+0x84>
 80024e6:	2300      	movs	r3, #0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d004      	beq.n	80024f6 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80024ec:	4b36      	ldr	r3, [pc, #216]	; (80025c8 <xTaskIncrementTick+0x164>)
 80024ee:	f04f 32ff 	mov.w	r2, #4294967295
 80024f2:	601a      	str	r2, [r3, #0]
					break;
 80024f4:	e03e      	b.n	8002574 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80024f6:	4b31      	ldr	r3, [pc, #196]	; (80025bc <xTaskIncrementTick+0x158>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002506:	693a      	ldr	r2, [r7, #16]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	429a      	cmp	r2, r3
 800250c:	d203      	bcs.n	8002516 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800250e:	4a2e      	ldr	r2, [pc, #184]	; (80025c8 <xTaskIncrementTick+0x164>)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6013      	str	r3, [r2, #0]
						break;
 8002514:	e02e      	b.n	8002574 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	3304      	adds	r3, #4
 800251a:	4618      	mov	r0, r3
 800251c:	f7ff fc90 	bl	8001e40 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002524:	2b00      	cmp	r3, #0
 8002526:	d004      	beq.n	8002532 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	3318      	adds	r3, #24
 800252c:	4618      	mov	r0, r3
 800252e:	f7ff fc87 	bl	8001e40 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002536:	2201      	movs	r2, #1
 8002538:	409a      	lsls	r2, r3
 800253a:	4b24      	ldr	r3, [pc, #144]	; (80025cc <xTaskIncrementTick+0x168>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4313      	orrs	r3, r2
 8002540:	4a22      	ldr	r2, [pc, #136]	; (80025cc <xTaskIncrementTick+0x168>)
 8002542:	6013      	str	r3, [r2, #0]
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002548:	4613      	mov	r3, r2
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	4413      	add	r3, r2
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	4a1f      	ldr	r2, [pc, #124]	; (80025d0 <xTaskIncrementTick+0x16c>)
 8002552:	441a      	add	r2, r3
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	3304      	adds	r3, #4
 8002558:	4619      	mov	r1, r3
 800255a:	4610      	mov	r0, r2
 800255c:	f7ff fc15 	bl	8001d8a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002564:	4b1b      	ldr	r3, [pc, #108]	; (80025d4 <xTaskIncrementTick+0x170>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800256a:	429a      	cmp	r2, r3
 800256c:	d3b4      	bcc.n	80024d8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800256e:	2301      	movs	r3, #1
 8002570:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002572:	e7b1      	b.n	80024d8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002574:	4b17      	ldr	r3, [pc, #92]	; (80025d4 <xTaskIncrementTick+0x170>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800257a:	4915      	ldr	r1, [pc, #84]	; (80025d0 <xTaskIncrementTick+0x16c>)
 800257c:	4613      	mov	r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	4413      	add	r3, r2
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	440b      	add	r3, r1
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2b01      	cmp	r3, #1
 800258a:	d907      	bls.n	800259c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800258c:	2301      	movs	r3, #1
 800258e:	617b      	str	r3, [r7, #20]
 8002590:	e004      	b.n	800259c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002592:	4b11      	ldr	r3, [pc, #68]	; (80025d8 <xTaskIncrementTick+0x174>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	3301      	adds	r3, #1
 8002598:	4a0f      	ldr	r2, [pc, #60]	; (80025d8 <xTaskIncrementTick+0x174>)
 800259a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800259c:	4b0f      	ldr	r3, [pc, #60]	; (80025dc <xTaskIncrementTick+0x178>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d001      	beq.n	80025a8 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80025a4:	2301      	movs	r3, #1
 80025a6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80025a8:	697b      	ldr	r3, [r7, #20]
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3718      	adds	r7, #24
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	200004dc 	.word	0x200004dc
 80025b8:	200004b8 	.word	0x200004b8
 80025bc:	2000046c 	.word	0x2000046c
 80025c0:	20000470 	.word	0x20000470
 80025c4:	200004cc 	.word	0x200004cc
 80025c8:	200004d4 	.word	0x200004d4
 80025cc:	200004bc 	.word	0x200004bc
 80025d0:	200003b8 	.word	0x200003b8
 80025d4:	200003b4 	.word	0x200003b4
 80025d8:	200004c4 	.word	0x200004c4
 80025dc:	200004c8 	.word	0x200004c8

080025e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80025e0:	b480      	push	{r7}
 80025e2:	b087      	sub	sp, #28
 80025e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80025e6:	4b29      	ldr	r3, [pc, #164]	; (800268c <vTaskSwitchContext+0xac>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d003      	beq.n	80025f6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80025ee:	4b28      	ldr	r3, [pc, #160]	; (8002690 <vTaskSwitchContext+0xb0>)
 80025f0:	2201      	movs	r2, #1
 80025f2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80025f4:	e044      	b.n	8002680 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80025f6:	4b26      	ldr	r3, [pc, #152]	; (8002690 <vTaskSwitchContext+0xb0>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80025fc:	4b25      	ldr	r3, [pc, #148]	; (8002694 <vTaskSwitchContext+0xb4>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	fab3 f383 	clz	r3, r3
 8002608:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800260a:	7afb      	ldrb	r3, [r7, #11]
 800260c:	f1c3 031f 	rsb	r3, r3, #31
 8002610:	617b      	str	r3, [r7, #20]
 8002612:	4921      	ldr	r1, [pc, #132]	; (8002698 <vTaskSwitchContext+0xb8>)
 8002614:	697a      	ldr	r2, [r7, #20]
 8002616:	4613      	mov	r3, r2
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	4413      	add	r3, r2
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	440b      	add	r3, r1
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d10a      	bne.n	800263c <vTaskSwitchContext+0x5c>
	__asm volatile
 8002626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800262a:	f383 8811 	msr	BASEPRI, r3
 800262e:	f3bf 8f6f 	isb	sy
 8002632:	f3bf 8f4f 	dsb	sy
 8002636:	607b      	str	r3, [r7, #4]
}
 8002638:	bf00      	nop
 800263a:	e7fe      	b.n	800263a <vTaskSwitchContext+0x5a>
 800263c:	697a      	ldr	r2, [r7, #20]
 800263e:	4613      	mov	r3, r2
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	4413      	add	r3, r2
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	4a14      	ldr	r2, [pc, #80]	; (8002698 <vTaskSwitchContext+0xb8>)
 8002648:	4413      	add	r3, r2
 800264a:	613b      	str	r3, [r7, #16]
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	685a      	ldr	r2, [r3, #4]
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	605a      	str	r2, [r3, #4]
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	685a      	ldr	r2, [r3, #4]
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	3308      	adds	r3, #8
 800265e:	429a      	cmp	r2, r3
 8002660:	d104      	bne.n	800266c <vTaskSwitchContext+0x8c>
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	685a      	ldr	r2, [r3, #4]
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	605a      	str	r2, [r3, #4]
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	4a0a      	ldr	r2, [pc, #40]	; (800269c <vTaskSwitchContext+0xbc>)
 8002674:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002676:	4b09      	ldr	r3, [pc, #36]	; (800269c <vTaskSwitchContext+0xbc>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	334c      	adds	r3, #76	; 0x4c
 800267c:	4a08      	ldr	r2, [pc, #32]	; (80026a0 <vTaskSwitchContext+0xc0>)
 800267e:	6013      	str	r3, [r2, #0]
}
 8002680:	bf00      	nop
 8002682:	371c      	adds	r7, #28
 8002684:	46bd      	mov	sp, r7
 8002686:	bc80      	pop	{r7}
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	200004dc 	.word	0x200004dc
 8002690:	200004c8 	.word	0x200004c8
 8002694:	200004bc 	.word	0x200004bc
 8002698:	200003b8 	.word	0x200003b8
 800269c:	200003b4 	.word	0x200003b4
 80026a0:	2000005c 	.word	0x2000005c

080026a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80026ac:	f000 f852 	bl	8002754 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80026b0:	4b06      	ldr	r3, [pc, #24]	; (80026cc <prvIdleTask+0x28>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d9f9      	bls.n	80026ac <prvIdleTask+0x8>
			{
				taskYIELD();
 80026b8:	4b05      	ldr	r3, [pc, #20]	; (80026d0 <prvIdleTask+0x2c>)
 80026ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026be:	601a      	str	r2, [r3, #0]
 80026c0:	f3bf 8f4f 	dsb	sy
 80026c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80026c8:	e7f0      	b.n	80026ac <prvIdleTask+0x8>
 80026ca:	bf00      	nop
 80026cc:	200003b8 	.word	0x200003b8
 80026d0:	e000ed04 	.word	0xe000ed04

080026d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80026da:	2300      	movs	r3, #0
 80026dc:	607b      	str	r3, [r7, #4]
 80026de:	e00c      	b.n	80026fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	4613      	mov	r3, r2
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	4413      	add	r3, r2
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	4a12      	ldr	r2, [pc, #72]	; (8002734 <prvInitialiseTaskLists+0x60>)
 80026ec:	4413      	add	r3, r2
 80026ee:	4618      	mov	r0, r3
 80026f0:	f7ff fb20 	bl	8001d34 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	3301      	adds	r3, #1
 80026f8:	607b      	str	r3, [r7, #4]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2b06      	cmp	r3, #6
 80026fe:	d9ef      	bls.n	80026e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002700:	480d      	ldr	r0, [pc, #52]	; (8002738 <prvInitialiseTaskLists+0x64>)
 8002702:	f7ff fb17 	bl	8001d34 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002706:	480d      	ldr	r0, [pc, #52]	; (800273c <prvInitialiseTaskLists+0x68>)
 8002708:	f7ff fb14 	bl	8001d34 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800270c:	480c      	ldr	r0, [pc, #48]	; (8002740 <prvInitialiseTaskLists+0x6c>)
 800270e:	f7ff fb11 	bl	8001d34 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002712:	480c      	ldr	r0, [pc, #48]	; (8002744 <prvInitialiseTaskLists+0x70>)
 8002714:	f7ff fb0e 	bl	8001d34 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002718:	480b      	ldr	r0, [pc, #44]	; (8002748 <prvInitialiseTaskLists+0x74>)
 800271a:	f7ff fb0b 	bl	8001d34 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800271e:	4b0b      	ldr	r3, [pc, #44]	; (800274c <prvInitialiseTaskLists+0x78>)
 8002720:	4a05      	ldr	r2, [pc, #20]	; (8002738 <prvInitialiseTaskLists+0x64>)
 8002722:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002724:	4b0a      	ldr	r3, [pc, #40]	; (8002750 <prvInitialiseTaskLists+0x7c>)
 8002726:	4a05      	ldr	r2, [pc, #20]	; (800273c <prvInitialiseTaskLists+0x68>)
 8002728:	601a      	str	r2, [r3, #0]
}
 800272a:	bf00      	nop
 800272c:	3708      	adds	r7, #8
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	200003b8 	.word	0x200003b8
 8002738:	20000444 	.word	0x20000444
 800273c:	20000458 	.word	0x20000458
 8002740:	20000474 	.word	0x20000474
 8002744:	20000488 	.word	0x20000488
 8002748:	200004a0 	.word	0x200004a0
 800274c:	2000046c 	.word	0x2000046c
 8002750:	20000470 	.word	0x20000470

08002754 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800275a:	e019      	b.n	8002790 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800275c:	f000 f9d6 	bl	8002b0c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002760:	4b10      	ldr	r3, [pc, #64]	; (80027a4 <prvCheckTasksWaitingTermination+0x50>)
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	3304      	adds	r3, #4
 800276c:	4618      	mov	r0, r3
 800276e:	f7ff fb67 	bl	8001e40 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002772:	4b0d      	ldr	r3, [pc, #52]	; (80027a8 <prvCheckTasksWaitingTermination+0x54>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	3b01      	subs	r3, #1
 8002778:	4a0b      	ldr	r2, [pc, #44]	; (80027a8 <prvCheckTasksWaitingTermination+0x54>)
 800277a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800277c:	4b0b      	ldr	r3, [pc, #44]	; (80027ac <prvCheckTasksWaitingTermination+0x58>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	3b01      	subs	r3, #1
 8002782:	4a0a      	ldr	r2, [pc, #40]	; (80027ac <prvCheckTasksWaitingTermination+0x58>)
 8002784:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002786:	f000 f9f1 	bl	8002b6c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f000 f810 	bl	80027b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002790:	4b06      	ldr	r3, [pc, #24]	; (80027ac <prvCheckTasksWaitingTermination+0x58>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d1e1      	bne.n	800275c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002798:	bf00      	nop
 800279a:	bf00      	nop
 800279c:	3708      	adds	r7, #8
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	20000488 	.word	0x20000488
 80027a8:	200004b4 	.word	0x200004b4
 80027ac:	2000049c 	.word	0x2000049c

080027b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	334c      	adds	r3, #76	; 0x4c
 80027bc:	4618      	mov	r0, r3
 80027be:	f000 fc67 	bl	8003090 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d108      	bne.n	80027de <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d0:	4618      	mov	r0, r3
 80027d2:	f000 fb21 	bl	8002e18 <vPortFree>
				vPortFree( pxTCB );
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f000 fb1e 	bl	8002e18 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80027dc:	e018      	b.n	8002810 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d103      	bne.n	80027f0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f000 fb15 	bl	8002e18 <vPortFree>
	}
 80027ee:	e00f      	b.n	8002810 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d00a      	beq.n	8002810 <prvDeleteTCB+0x60>
	__asm volatile
 80027fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027fe:	f383 8811 	msr	BASEPRI, r3
 8002802:	f3bf 8f6f 	isb	sy
 8002806:	f3bf 8f4f 	dsb	sy
 800280a:	60fb      	str	r3, [r7, #12]
}
 800280c:	bf00      	nop
 800280e:	e7fe      	b.n	800280e <prvDeleteTCB+0x5e>
	}
 8002810:	bf00      	nop
 8002812:	3710      	adds	r7, #16
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800281e:	4b0e      	ldr	r3, [pc, #56]	; (8002858 <prvResetNextTaskUnblockTime+0x40>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d101      	bne.n	800282c <prvResetNextTaskUnblockTime+0x14>
 8002828:	2301      	movs	r3, #1
 800282a:	e000      	b.n	800282e <prvResetNextTaskUnblockTime+0x16>
 800282c:	2300      	movs	r3, #0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d004      	beq.n	800283c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002832:	4b0a      	ldr	r3, [pc, #40]	; (800285c <prvResetNextTaskUnblockTime+0x44>)
 8002834:	f04f 32ff 	mov.w	r2, #4294967295
 8002838:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800283a:	e008      	b.n	800284e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800283c:	4b06      	ldr	r3, [pc, #24]	; (8002858 <prvResetNextTaskUnblockTime+0x40>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	4a04      	ldr	r2, [pc, #16]	; (800285c <prvResetNextTaskUnblockTime+0x44>)
 800284c:	6013      	str	r3, [r2, #0]
}
 800284e:	bf00      	nop
 8002850:	370c      	adds	r7, #12
 8002852:	46bd      	mov	sp, r7
 8002854:	bc80      	pop	{r7}
 8002856:	4770      	bx	lr
 8002858:	2000046c 	.word	0x2000046c
 800285c:	200004d4 	.word	0x200004d4

08002860 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800286a:	4b29      	ldr	r3, [pc, #164]	; (8002910 <prvAddCurrentTaskToDelayedList+0xb0>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002870:	4b28      	ldr	r3, [pc, #160]	; (8002914 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	3304      	adds	r3, #4
 8002876:	4618      	mov	r0, r3
 8002878:	f7ff fae2 	bl	8001e40 <uxListRemove>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d10b      	bne.n	800289a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002882:	4b24      	ldr	r3, [pc, #144]	; (8002914 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002888:	2201      	movs	r2, #1
 800288a:	fa02 f303 	lsl.w	r3, r2, r3
 800288e:	43da      	mvns	r2, r3
 8002890:	4b21      	ldr	r3, [pc, #132]	; (8002918 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4013      	ands	r3, r2
 8002896:	4a20      	ldr	r2, [pc, #128]	; (8002918 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002898:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028a0:	d10a      	bne.n	80028b8 <prvAddCurrentTaskToDelayedList+0x58>
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d007      	beq.n	80028b8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80028a8:	4b1a      	ldr	r3, [pc, #104]	; (8002914 <prvAddCurrentTaskToDelayedList+0xb4>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	3304      	adds	r3, #4
 80028ae:	4619      	mov	r1, r3
 80028b0:	481a      	ldr	r0, [pc, #104]	; (800291c <prvAddCurrentTaskToDelayedList+0xbc>)
 80028b2:	f7ff fa6a 	bl	8001d8a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80028b6:	e026      	b.n	8002906 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80028b8:	68fa      	ldr	r2, [r7, #12]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4413      	add	r3, r2
 80028be:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80028c0:	4b14      	ldr	r3, [pc, #80]	; (8002914 <prvAddCurrentTaskToDelayedList+0xb4>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	68ba      	ldr	r2, [r7, #8]
 80028c6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80028c8:	68ba      	ldr	r2, [r7, #8]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d209      	bcs.n	80028e4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80028d0:	4b13      	ldr	r3, [pc, #76]	; (8002920 <prvAddCurrentTaskToDelayedList+0xc0>)
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	4b0f      	ldr	r3, [pc, #60]	; (8002914 <prvAddCurrentTaskToDelayedList+0xb4>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	3304      	adds	r3, #4
 80028da:	4619      	mov	r1, r3
 80028dc:	4610      	mov	r0, r2
 80028de:	f7ff fa77 	bl	8001dd0 <vListInsert>
}
 80028e2:	e010      	b.n	8002906 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80028e4:	4b0f      	ldr	r3, [pc, #60]	; (8002924 <prvAddCurrentTaskToDelayedList+0xc4>)
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	4b0a      	ldr	r3, [pc, #40]	; (8002914 <prvAddCurrentTaskToDelayedList+0xb4>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	3304      	adds	r3, #4
 80028ee:	4619      	mov	r1, r3
 80028f0:	4610      	mov	r0, r2
 80028f2:	f7ff fa6d 	bl	8001dd0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80028f6:	4b0c      	ldr	r3, [pc, #48]	; (8002928 <prvAddCurrentTaskToDelayedList+0xc8>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	68ba      	ldr	r2, [r7, #8]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d202      	bcs.n	8002906 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002900:	4a09      	ldr	r2, [pc, #36]	; (8002928 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	6013      	str	r3, [r2, #0]
}
 8002906:	bf00      	nop
 8002908:	3710      	adds	r7, #16
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	200004b8 	.word	0x200004b8
 8002914:	200003b4 	.word	0x200003b4
 8002918:	200004bc 	.word	0x200004bc
 800291c:	200004a0 	.word	0x200004a0
 8002920:	20000470 	.word	0x20000470
 8002924:	2000046c 	.word	0x2000046c
 8002928:	200004d4 	.word	0x200004d4

0800292c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800292c:	b480      	push	{r7}
 800292e:	b085      	sub	sp, #20
 8002930:	af00      	add	r7, sp, #0
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	60b9      	str	r1, [r7, #8]
 8002936:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	3b04      	subs	r3, #4
 800293c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002944:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	3b04      	subs	r3, #4
 800294a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	f023 0201 	bic.w	r2, r3, #1
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	3b04      	subs	r3, #4
 800295a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800295c:	4a08      	ldr	r2, [pc, #32]	; (8002980 <pxPortInitialiseStack+0x54>)
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	3b14      	subs	r3, #20
 8002966:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	3b20      	subs	r3, #32
 8002972:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002974:	68fb      	ldr	r3, [r7, #12]
}
 8002976:	4618      	mov	r0, r3
 8002978:	3714      	adds	r7, #20
 800297a:	46bd      	mov	sp, r7
 800297c:	bc80      	pop	{r7}
 800297e:	4770      	bx	lr
 8002980:	08002985 	.word	0x08002985

08002984 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002984:	b480      	push	{r7}
 8002986:	b085      	sub	sp, #20
 8002988:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800298a:	2300      	movs	r3, #0
 800298c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800298e:	4b12      	ldr	r3, [pc, #72]	; (80029d8 <prvTaskExitError+0x54>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002996:	d00a      	beq.n	80029ae <prvTaskExitError+0x2a>
	__asm volatile
 8002998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800299c:	f383 8811 	msr	BASEPRI, r3
 80029a0:	f3bf 8f6f 	isb	sy
 80029a4:	f3bf 8f4f 	dsb	sy
 80029a8:	60fb      	str	r3, [r7, #12]
}
 80029aa:	bf00      	nop
 80029ac:	e7fe      	b.n	80029ac <prvTaskExitError+0x28>
	__asm volatile
 80029ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029b2:	f383 8811 	msr	BASEPRI, r3
 80029b6:	f3bf 8f6f 	isb	sy
 80029ba:	f3bf 8f4f 	dsb	sy
 80029be:	60bb      	str	r3, [r7, #8]
}
 80029c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80029c2:	bf00      	nop
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d0fc      	beq.n	80029c4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80029ca:	bf00      	nop
 80029cc:	bf00      	nop
 80029ce:	3714      	adds	r7, #20
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bc80      	pop	{r7}
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	2000000c 	.word	0x2000000c
 80029dc:	00000000 	.word	0x00000000

080029e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80029e0:	4b07      	ldr	r3, [pc, #28]	; (8002a00 <pxCurrentTCBConst2>)
 80029e2:	6819      	ldr	r1, [r3, #0]
 80029e4:	6808      	ldr	r0, [r1, #0]
 80029e6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80029ea:	f380 8809 	msr	PSP, r0
 80029ee:	f3bf 8f6f 	isb	sy
 80029f2:	f04f 0000 	mov.w	r0, #0
 80029f6:	f380 8811 	msr	BASEPRI, r0
 80029fa:	f04e 0e0d 	orr.w	lr, lr, #13
 80029fe:	4770      	bx	lr

08002a00 <pxCurrentTCBConst2>:
 8002a00:	200003b4 	.word	0x200003b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002a04:	bf00      	nop
 8002a06:	bf00      	nop

08002a08 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8002a08:	4806      	ldr	r0, [pc, #24]	; (8002a24 <prvPortStartFirstTask+0x1c>)
 8002a0a:	6800      	ldr	r0, [r0, #0]
 8002a0c:	6800      	ldr	r0, [r0, #0]
 8002a0e:	f380 8808 	msr	MSP, r0
 8002a12:	b662      	cpsie	i
 8002a14:	b661      	cpsie	f
 8002a16:	f3bf 8f4f 	dsb	sy
 8002a1a:	f3bf 8f6f 	isb	sy
 8002a1e:	df00      	svc	0
 8002a20:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002a22:	bf00      	nop
 8002a24:	e000ed08 	.word	0xe000ed08

08002a28 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002a2e:	4b32      	ldr	r3, [pc, #200]	; (8002af8 <xPortStartScheduler+0xd0>)
 8002a30:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	22f0      	movs	r2, #240	; 0xf0
 8002a3e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002a48:	78fb      	ldrb	r3, [r7, #3]
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002a50:	b2da      	uxtb	r2, r3
 8002a52:	4b2a      	ldr	r3, [pc, #168]	; (8002afc <xPortStartScheduler+0xd4>)
 8002a54:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002a56:	4b2a      	ldr	r3, [pc, #168]	; (8002b00 <xPortStartScheduler+0xd8>)
 8002a58:	2207      	movs	r2, #7
 8002a5a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002a5c:	e009      	b.n	8002a72 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8002a5e:	4b28      	ldr	r3, [pc, #160]	; (8002b00 <xPortStartScheduler+0xd8>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	3b01      	subs	r3, #1
 8002a64:	4a26      	ldr	r2, [pc, #152]	; (8002b00 <xPortStartScheduler+0xd8>)
 8002a66:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002a68:	78fb      	ldrb	r3, [r7, #3]
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	005b      	lsls	r3, r3, #1
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002a72:	78fb      	ldrb	r3, [r7, #3]
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a7a:	2b80      	cmp	r3, #128	; 0x80
 8002a7c:	d0ef      	beq.n	8002a5e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002a7e:	4b20      	ldr	r3, [pc, #128]	; (8002b00 <xPortStartScheduler+0xd8>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f1c3 0307 	rsb	r3, r3, #7
 8002a86:	2b04      	cmp	r3, #4
 8002a88:	d00a      	beq.n	8002aa0 <xPortStartScheduler+0x78>
	__asm volatile
 8002a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a8e:	f383 8811 	msr	BASEPRI, r3
 8002a92:	f3bf 8f6f 	isb	sy
 8002a96:	f3bf 8f4f 	dsb	sy
 8002a9a:	60bb      	str	r3, [r7, #8]
}
 8002a9c:	bf00      	nop
 8002a9e:	e7fe      	b.n	8002a9e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002aa0:	4b17      	ldr	r3, [pc, #92]	; (8002b00 <xPortStartScheduler+0xd8>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	021b      	lsls	r3, r3, #8
 8002aa6:	4a16      	ldr	r2, [pc, #88]	; (8002b00 <xPortStartScheduler+0xd8>)
 8002aa8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002aaa:	4b15      	ldr	r3, [pc, #84]	; (8002b00 <xPortStartScheduler+0xd8>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002ab2:	4a13      	ldr	r2, [pc, #76]	; (8002b00 <xPortStartScheduler+0xd8>)
 8002ab4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	b2da      	uxtb	r2, r3
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002abe:	4b11      	ldr	r3, [pc, #68]	; (8002b04 <xPortStartScheduler+0xdc>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a10      	ldr	r2, [pc, #64]	; (8002b04 <xPortStartScheduler+0xdc>)
 8002ac4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ac8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002aca:	4b0e      	ldr	r3, [pc, #56]	; (8002b04 <xPortStartScheduler+0xdc>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a0d      	ldr	r2, [pc, #52]	; (8002b04 <xPortStartScheduler+0xdc>)
 8002ad0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002ad4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002ad6:	f000 f8b9 	bl	8002c4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002ada:	4b0b      	ldr	r3, [pc, #44]	; (8002b08 <xPortStartScheduler+0xe0>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002ae0:	f7ff ff92 	bl	8002a08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002ae4:	f7ff fd7c 	bl	80025e0 <vTaskSwitchContext>
	prvTaskExitError();
 8002ae8:	f7ff ff4c 	bl	8002984 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3710      	adds	r7, #16
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	e000e400 	.word	0xe000e400
 8002afc:	200004e0 	.word	0x200004e0
 8002b00:	200004e4 	.word	0x200004e4
 8002b04:	e000ed20 	.word	0xe000ed20
 8002b08:	2000000c 	.word	0x2000000c

08002b0c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
	__asm volatile
 8002b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b16:	f383 8811 	msr	BASEPRI, r3
 8002b1a:	f3bf 8f6f 	isb	sy
 8002b1e:	f3bf 8f4f 	dsb	sy
 8002b22:	607b      	str	r3, [r7, #4]
}
 8002b24:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002b26:	4b0f      	ldr	r3, [pc, #60]	; (8002b64 <vPortEnterCritical+0x58>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	4a0d      	ldr	r2, [pc, #52]	; (8002b64 <vPortEnterCritical+0x58>)
 8002b2e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002b30:	4b0c      	ldr	r3, [pc, #48]	; (8002b64 <vPortEnterCritical+0x58>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d10f      	bne.n	8002b58 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002b38:	4b0b      	ldr	r3, [pc, #44]	; (8002b68 <vPortEnterCritical+0x5c>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d00a      	beq.n	8002b58 <vPortEnterCritical+0x4c>
	__asm volatile
 8002b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b46:	f383 8811 	msr	BASEPRI, r3
 8002b4a:	f3bf 8f6f 	isb	sy
 8002b4e:	f3bf 8f4f 	dsb	sy
 8002b52:	603b      	str	r3, [r7, #0]
}
 8002b54:	bf00      	nop
 8002b56:	e7fe      	b.n	8002b56 <vPortEnterCritical+0x4a>
	}
}
 8002b58:	bf00      	nop
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bc80      	pop	{r7}
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	2000000c 	.word	0x2000000c
 8002b68:	e000ed04 	.word	0xe000ed04

08002b6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002b72:	4b11      	ldr	r3, [pc, #68]	; (8002bb8 <vPortExitCritical+0x4c>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d10a      	bne.n	8002b90 <vPortExitCritical+0x24>
	__asm volatile
 8002b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b7e:	f383 8811 	msr	BASEPRI, r3
 8002b82:	f3bf 8f6f 	isb	sy
 8002b86:	f3bf 8f4f 	dsb	sy
 8002b8a:	607b      	str	r3, [r7, #4]
}
 8002b8c:	bf00      	nop
 8002b8e:	e7fe      	b.n	8002b8e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8002b90:	4b09      	ldr	r3, [pc, #36]	; (8002bb8 <vPortExitCritical+0x4c>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	3b01      	subs	r3, #1
 8002b96:	4a08      	ldr	r2, [pc, #32]	; (8002bb8 <vPortExitCritical+0x4c>)
 8002b98:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002b9a:	4b07      	ldr	r3, [pc, #28]	; (8002bb8 <vPortExitCritical+0x4c>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d105      	bne.n	8002bae <vPortExitCritical+0x42>
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002bac:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8002bae:	bf00      	nop
 8002bb0:	370c      	adds	r7, #12
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bc80      	pop	{r7}
 8002bb6:	4770      	bx	lr
 8002bb8:	2000000c 	.word	0x2000000c
 8002bbc:	00000000 	.word	0x00000000

08002bc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002bc0:	f3ef 8009 	mrs	r0, PSP
 8002bc4:	f3bf 8f6f 	isb	sy
 8002bc8:	4b0d      	ldr	r3, [pc, #52]	; (8002c00 <pxCurrentTCBConst>)
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002bd0:	6010      	str	r0, [r2, #0]
 8002bd2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8002bd6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002bda:	f380 8811 	msr	BASEPRI, r0
 8002bde:	f7ff fcff 	bl	80025e0 <vTaskSwitchContext>
 8002be2:	f04f 0000 	mov.w	r0, #0
 8002be6:	f380 8811 	msr	BASEPRI, r0
 8002bea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8002bee:	6819      	ldr	r1, [r3, #0]
 8002bf0:	6808      	ldr	r0, [r1, #0]
 8002bf2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002bf6:	f380 8809 	msr	PSP, r0
 8002bfa:	f3bf 8f6f 	isb	sy
 8002bfe:	4770      	bx	lr

08002c00 <pxCurrentTCBConst>:
 8002c00:	200003b4 	.word	0x200003b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002c04:	bf00      	nop
 8002c06:	bf00      	nop

08002c08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
	__asm volatile
 8002c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c12:	f383 8811 	msr	BASEPRI, r3
 8002c16:	f3bf 8f6f 	isb	sy
 8002c1a:	f3bf 8f4f 	dsb	sy
 8002c1e:	607b      	str	r3, [r7, #4]
}
 8002c20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002c22:	f7ff fc1f 	bl	8002464 <xTaskIncrementTick>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d003      	beq.n	8002c34 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002c2c:	4b06      	ldr	r3, [pc, #24]	; (8002c48 <SysTick_Handler+0x40>)
 8002c2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c32:	601a      	str	r2, [r3, #0]
 8002c34:	2300      	movs	r3, #0
 8002c36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	f383 8811 	msr	BASEPRI, r3
}
 8002c3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8002c40:	bf00      	nop
 8002c42:	3708      	adds	r7, #8
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	e000ed04 	.word	0xe000ed04

08002c4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002c50:	4b0a      	ldr	r3, [pc, #40]	; (8002c7c <vPortSetupTimerInterrupt+0x30>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002c56:	4b0a      	ldr	r3, [pc, #40]	; (8002c80 <vPortSetupTimerInterrupt+0x34>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002c5c:	4b09      	ldr	r3, [pc, #36]	; (8002c84 <vPortSetupTimerInterrupt+0x38>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a09      	ldr	r2, [pc, #36]	; (8002c88 <vPortSetupTimerInterrupt+0x3c>)
 8002c62:	fba2 2303 	umull	r2, r3, r2, r3
 8002c66:	099b      	lsrs	r3, r3, #6
 8002c68:	4a08      	ldr	r2, [pc, #32]	; (8002c8c <vPortSetupTimerInterrupt+0x40>)
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002c6e:	4b03      	ldr	r3, [pc, #12]	; (8002c7c <vPortSetupTimerInterrupt+0x30>)
 8002c70:	2207      	movs	r2, #7
 8002c72:	601a      	str	r2, [r3, #0]
}
 8002c74:	bf00      	nop
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bc80      	pop	{r7}
 8002c7a:	4770      	bx	lr
 8002c7c:	e000e010 	.word	0xe000e010
 8002c80:	e000e018 	.word	0xe000e018
 8002c84:	20000000 	.word	0x20000000
 8002c88:	10624dd3 	.word	0x10624dd3
 8002c8c:	e000e014 	.word	0xe000e014

08002c90 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b08a      	sub	sp, #40	; 0x28
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002c9c:	f7ff fb38 	bl	8002310 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002ca0:	4b58      	ldr	r3, [pc, #352]	; (8002e04 <pvPortMalloc+0x174>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d101      	bne.n	8002cac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002ca8:	f000 f910 	bl	8002ecc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002cac:	4b56      	ldr	r3, [pc, #344]	; (8002e08 <pvPortMalloc+0x178>)
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	f040 808e 	bne.w	8002dd6 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d01d      	beq.n	8002cfc <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8002cc0:	2208      	movs	r2, #8
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4413      	add	r3, r2
 8002cc6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f003 0307 	and.w	r3, r3, #7
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d014      	beq.n	8002cfc <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f023 0307 	bic.w	r3, r3, #7
 8002cd8:	3308      	adds	r3, #8
 8002cda:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f003 0307 	and.w	r3, r3, #7
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d00a      	beq.n	8002cfc <pvPortMalloc+0x6c>
	__asm volatile
 8002ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cea:	f383 8811 	msr	BASEPRI, r3
 8002cee:	f3bf 8f6f 	isb	sy
 8002cf2:	f3bf 8f4f 	dsb	sy
 8002cf6:	617b      	str	r3, [r7, #20]
}
 8002cf8:	bf00      	nop
 8002cfa:	e7fe      	b.n	8002cfa <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d069      	beq.n	8002dd6 <pvPortMalloc+0x146>
 8002d02:	4b42      	ldr	r3, [pc, #264]	; (8002e0c <pvPortMalloc+0x17c>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d864      	bhi.n	8002dd6 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002d0c:	4b40      	ldr	r3, [pc, #256]	; (8002e10 <pvPortMalloc+0x180>)
 8002d0e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002d10:	4b3f      	ldr	r3, [pc, #252]	; (8002e10 <pvPortMalloc+0x180>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002d16:	e004      	b.n	8002d22 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8002d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d903      	bls.n	8002d34 <pvPortMalloc+0xa4>
 8002d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d1f1      	bne.n	8002d18 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002d34:	4b33      	ldr	r3, [pc, #204]	; (8002e04 <pvPortMalloc+0x174>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d04b      	beq.n	8002dd6 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002d3e:	6a3b      	ldr	r3, [r7, #32]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2208      	movs	r2, #8
 8002d44:	4413      	add	r3, r2
 8002d46:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	6a3b      	ldr	r3, [r7, #32]
 8002d4e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d52:	685a      	ldr	r2, [r3, #4]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	1ad2      	subs	r2, r2, r3
 8002d58:	2308      	movs	r3, #8
 8002d5a:	005b      	lsls	r3, r3, #1
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d91f      	bls.n	8002da0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002d60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4413      	add	r3, r2
 8002d66:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	f003 0307 	and.w	r3, r3, #7
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d00a      	beq.n	8002d88 <pvPortMalloc+0xf8>
	__asm volatile
 8002d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d76:	f383 8811 	msr	BASEPRI, r3
 8002d7a:	f3bf 8f6f 	isb	sy
 8002d7e:	f3bf 8f4f 	dsb	sy
 8002d82:	613b      	str	r3, [r7, #16]
}
 8002d84:	bf00      	nop
 8002d86:	e7fe      	b.n	8002d86 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8a:	685a      	ldr	r2, [r3, #4]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	1ad2      	subs	r2, r2, r3
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002d9a:	69b8      	ldr	r0, [r7, #24]
 8002d9c:	f000 f8f8 	bl	8002f90 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002da0:	4b1a      	ldr	r3, [pc, #104]	; (8002e0c <pvPortMalloc+0x17c>)
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	4a18      	ldr	r2, [pc, #96]	; (8002e0c <pvPortMalloc+0x17c>)
 8002dac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002dae:	4b17      	ldr	r3, [pc, #92]	; (8002e0c <pvPortMalloc+0x17c>)
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	4b18      	ldr	r3, [pc, #96]	; (8002e14 <pvPortMalloc+0x184>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d203      	bcs.n	8002dc2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002dba:	4b14      	ldr	r3, [pc, #80]	; (8002e0c <pvPortMalloc+0x17c>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a15      	ldr	r2, [pc, #84]	; (8002e14 <pvPortMalloc+0x184>)
 8002dc0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc4:	685a      	ldr	r2, [r3, #4]
 8002dc6:	4b10      	ldr	r3, [pc, #64]	; (8002e08 <pvPortMalloc+0x178>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	431a      	orrs	r2, r3
 8002dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002dd6:	f7ff faa9 	bl	800232c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	f003 0307 	and.w	r3, r3, #7
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d00a      	beq.n	8002dfa <pvPortMalloc+0x16a>
	__asm volatile
 8002de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002de8:	f383 8811 	msr	BASEPRI, r3
 8002dec:	f3bf 8f6f 	isb	sy
 8002df0:	f3bf 8f4f 	dsb	sy
 8002df4:	60fb      	str	r3, [r7, #12]
}
 8002df6:	bf00      	nop
 8002df8:	e7fe      	b.n	8002df8 <pvPortMalloc+0x168>
	return pvReturn;
 8002dfa:	69fb      	ldr	r3, [r7, #28]
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3728      	adds	r7, #40	; 0x28
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	200010f0 	.word	0x200010f0
 8002e08:	200010fc 	.word	0x200010fc
 8002e0c:	200010f4 	.word	0x200010f4
 8002e10:	200010e8 	.word	0x200010e8
 8002e14:	200010f8 	.word	0x200010f8

08002e18 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b086      	sub	sp, #24
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d048      	beq.n	8002ebc <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002e2a:	2308      	movs	r3, #8
 8002e2c:	425b      	negs	r3, r3
 8002e2e:	697a      	ldr	r2, [r7, #20]
 8002e30:	4413      	add	r3, r2
 8002e32:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	685a      	ldr	r2, [r3, #4]
 8002e3c:	4b21      	ldr	r3, [pc, #132]	; (8002ec4 <vPortFree+0xac>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4013      	ands	r3, r2
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d10a      	bne.n	8002e5c <vPortFree+0x44>
	__asm volatile
 8002e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e4a:	f383 8811 	msr	BASEPRI, r3
 8002e4e:	f3bf 8f6f 	isb	sy
 8002e52:	f3bf 8f4f 	dsb	sy
 8002e56:	60fb      	str	r3, [r7, #12]
}
 8002e58:	bf00      	nop
 8002e5a:	e7fe      	b.n	8002e5a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d00a      	beq.n	8002e7a <vPortFree+0x62>
	__asm volatile
 8002e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e68:	f383 8811 	msr	BASEPRI, r3
 8002e6c:	f3bf 8f6f 	isb	sy
 8002e70:	f3bf 8f4f 	dsb	sy
 8002e74:	60bb      	str	r3, [r7, #8]
}
 8002e76:	bf00      	nop
 8002e78:	e7fe      	b.n	8002e78 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	685a      	ldr	r2, [r3, #4]
 8002e7e:	4b11      	ldr	r3, [pc, #68]	; (8002ec4 <vPortFree+0xac>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4013      	ands	r3, r2
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d019      	beq.n	8002ebc <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d115      	bne.n	8002ebc <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	685a      	ldr	r2, [r3, #4]
 8002e94:	4b0b      	ldr	r3, [pc, #44]	; (8002ec4 <vPortFree+0xac>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	43db      	mvns	r3, r3
 8002e9a:	401a      	ands	r2, r3
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002ea0:	f7ff fa36 	bl	8002310 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	685a      	ldr	r2, [r3, #4]
 8002ea8:	4b07      	ldr	r3, [pc, #28]	; (8002ec8 <vPortFree+0xb0>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4413      	add	r3, r2
 8002eae:	4a06      	ldr	r2, [pc, #24]	; (8002ec8 <vPortFree+0xb0>)
 8002eb0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002eb2:	6938      	ldr	r0, [r7, #16]
 8002eb4:	f000 f86c 	bl	8002f90 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8002eb8:	f7ff fa38 	bl	800232c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002ebc:	bf00      	nop
 8002ebe:	3718      	adds	r7, #24
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	200010fc 	.word	0x200010fc
 8002ec8:	200010f4 	.word	0x200010f4

08002ecc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b085      	sub	sp, #20
 8002ed0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002ed2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002ed6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002ed8:	4b27      	ldr	r3, [pc, #156]	; (8002f78 <prvHeapInit+0xac>)
 8002eda:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f003 0307 	and.w	r3, r3, #7
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d00c      	beq.n	8002f00 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	3307      	adds	r3, #7
 8002eea:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f023 0307 	bic.w	r3, r3, #7
 8002ef2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002ef4:	68ba      	ldr	r2, [r7, #8]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	4a1f      	ldr	r2, [pc, #124]	; (8002f78 <prvHeapInit+0xac>)
 8002efc:	4413      	add	r3, r2
 8002efe:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002f04:	4a1d      	ldr	r2, [pc, #116]	; (8002f7c <prvHeapInit+0xb0>)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002f0a:	4b1c      	ldr	r3, [pc, #112]	; (8002f7c <prvHeapInit+0xb0>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	68ba      	ldr	r2, [r7, #8]
 8002f14:	4413      	add	r3, r2
 8002f16:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002f18:	2208      	movs	r2, #8
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	1a9b      	subs	r3, r3, r2
 8002f1e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f023 0307 	bic.w	r3, r3, #7
 8002f26:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	4a15      	ldr	r2, [pc, #84]	; (8002f80 <prvHeapInit+0xb4>)
 8002f2c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002f2e:	4b14      	ldr	r3, [pc, #80]	; (8002f80 <prvHeapInit+0xb4>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	2200      	movs	r2, #0
 8002f34:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002f36:	4b12      	ldr	r3, [pc, #72]	; (8002f80 <prvHeapInit+0xb4>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	68fa      	ldr	r2, [r7, #12]
 8002f46:	1ad2      	subs	r2, r2, r3
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002f4c:	4b0c      	ldr	r3, [pc, #48]	; (8002f80 <prvHeapInit+0xb4>)
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	4a0a      	ldr	r2, [pc, #40]	; (8002f84 <prvHeapInit+0xb8>)
 8002f5a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	4a09      	ldr	r2, [pc, #36]	; (8002f88 <prvHeapInit+0xbc>)
 8002f62:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002f64:	4b09      	ldr	r3, [pc, #36]	; (8002f8c <prvHeapInit+0xc0>)
 8002f66:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002f6a:	601a      	str	r2, [r3, #0]
}
 8002f6c:	bf00      	nop
 8002f6e:	3714      	adds	r7, #20
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bc80      	pop	{r7}
 8002f74:	4770      	bx	lr
 8002f76:	bf00      	nop
 8002f78:	200004e8 	.word	0x200004e8
 8002f7c:	200010e8 	.word	0x200010e8
 8002f80:	200010f0 	.word	0x200010f0
 8002f84:	200010f8 	.word	0x200010f8
 8002f88:	200010f4 	.word	0x200010f4
 8002f8c:	200010fc 	.word	0x200010fc

08002f90 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002f90:	b480      	push	{r7}
 8002f92:	b085      	sub	sp, #20
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002f98:	4b27      	ldr	r3, [pc, #156]	; (8003038 <prvInsertBlockIntoFreeList+0xa8>)
 8002f9a:	60fb      	str	r3, [r7, #12]
 8002f9c:	e002      	b.n	8002fa4 <prvInsertBlockIntoFreeList+0x14>
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	60fb      	str	r3, [r7, #12]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d8f7      	bhi.n	8002f9e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	68ba      	ldr	r2, [r7, #8]
 8002fb8:	4413      	add	r3, r2
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d108      	bne.n	8002fd2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	685a      	ldr	r2, [r3, #4]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	441a      	add	r2, r3
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	68ba      	ldr	r2, [r7, #8]
 8002fdc:	441a      	add	r2, r3
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d118      	bne.n	8003018 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	4b14      	ldr	r3, [pc, #80]	; (800303c <prvInsertBlockIntoFreeList+0xac>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d00d      	beq.n	800300e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685a      	ldr	r2, [r3, #4]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	441a      	add	r2, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	601a      	str	r2, [r3, #0]
 800300c:	e008      	b.n	8003020 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800300e:	4b0b      	ldr	r3, [pc, #44]	; (800303c <prvInsertBlockIntoFreeList+0xac>)
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	601a      	str	r2, [r3, #0]
 8003016:	e003      	b.n	8003020 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003020:	68fa      	ldr	r2, [r7, #12]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	429a      	cmp	r2, r3
 8003026:	d002      	beq.n	800302e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800302e:	bf00      	nop
 8003030:	3714      	adds	r7, #20
 8003032:	46bd      	mov	sp, r7
 8003034:	bc80      	pop	{r7}
 8003036:	4770      	bx	lr
 8003038:	200010e8 	.word	0x200010e8
 800303c:	200010f0 	.word	0x200010f0

08003040 <siprintf>:
 8003040:	b40e      	push	{r1, r2, r3}
 8003042:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003046:	b500      	push	{lr}
 8003048:	b09c      	sub	sp, #112	; 0x70
 800304a:	ab1d      	add	r3, sp, #116	; 0x74
 800304c:	9002      	str	r0, [sp, #8]
 800304e:	9006      	str	r0, [sp, #24]
 8003050:	9107      	str	r1, [sp, #28]
 8003052:	9104      	str	r1, [sp, #16]
 8003054:	4808      	ldr	r0, [pc, #32]	; (8003078 <siprintf+0x38>)
 8003056:	4909      	ldr	r1, [pc, #36]	; (800307c <siprintf+0x3c>)
 8003058:	f853 2b04 	ldr.w	r2, [r3], #4
 800305c:	9105      	str	r1, [sp, #20]
 800305e:	6800      	ldr	r0, [r0, #0]
 8003060:	a902      	add	r1, sp, #8
 8003062:	9301      	str	r3, [sp, #4]
 8003064:	f000 f9f2 	bl	800344c <_svfiprintf_r>
 8003068:	2200      	movs	r2, #0
 800306a:	9b02      	ldr	r3, [sp, #8]
 800306c:	701a      	strb	r2, [r3, #0]
 800306e:	b01c      	add	sp, #112	; 0x70
 8003070:	f85d eb04 	ldr.w	lr, [sp], #4
 8003074:	b003      	add	sp, #12
 8003076:	4770      	bx	lr
 8003078:	2000005c 	.word	0x2000005c
 800307c:	ffff0208 	.word	0xffff0208

08003080 <memset>:
 8003080:	4603      	mov	r3, r0
 8003082:	4402      	add	r2, r0
 8003084:	4293      	cmp	r3, r2
 8003086:	d100      	bne.n	800308a <memset+0xa>
 8003088:	4770      	bx	lr
 800308a:	f803 1b01 	strb.w	r1, [r3], #1
 800308e:	e7f9      	b.n	8003084 <memset+0x4>

08003090 <_reclaim_reent>:
 8003090:	4b29      	ldr	r3, [pc, #164]	; (8003138 <_reclaim_reent+0xa8>)
 8003092:	b570      	push	{r4, r5, r6, lr}
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4604      	mov	r4, r0
 8003098:	4283      	cmp	r3, r0
 800309a:	d04b      	beq.n	8003134 <_reclaim_reent+0xa4>
 800309c:	69c3      	ldr	r3, [r0, #28]
 800309e:	b143      	cbz	r3, 80030b2 <_reclaim_reent+0x22>
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d144      	bne.n	8003130 <_reclaim_reent+0xa0>
 80030a6:	69e3      	ldr	r3, [r4, #28]
 80030a8:	6819      	ldr	r1, [r3, #0]
 80030aa:	b111      	cbz	r1, 80030b2 <_reclaim_reent+0x22>
 80030ac:	4620      	mov	r0, r4
 80030ae:	f000 f87f 	bl	80031b0 <_free_r>
 80030b2:	6961      	ldr	r1, [r4, #20]
 80030b4:	b111      	cbz	r1, 80030bc <_reclaim_reent+0x2c>
 80030b6:	4620      	mov	r0, r4
 80030b8:	f000 f87a 	bl	80031b0 <_free_r>
 80030bc:	69e1      	ldr	r1, [r4, #28]
 80030be:	b111      	cbz	r1, 80030c6 <_reclaim_reent+0x36>
 80030c0:	4620      	mov	r0, r4
 80030c2:	f000 f875 	bl	80031b0 <_free_r>
 80030c6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80030c8:	b111      	cbz	r1, 80030d0 <_reclaim_reent+0x40>
 80030ca:	4620      	mov	r0, r4
 80030cc:	f000 f870 	bl	80031b0 <_free_r>
 80030d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80030d2:	b111      	cbz	r1, 80030da <_reclaim_reent+0x4a>
 80030d4:	4620      	mov	r0, r4
 80030d6:	f000 f86b 	bl	80031b0 <_free_r>
 80030da:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80030dc:	b111      	cbz	r1, 80030e4 <_reclaim_reent+0x54>
 80030de:	4620      	mov	r0, r4
 80030e0:	f000 f866 	bl	80031b0 <_free_r>
 80030e4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80030e6:	b111      	cbz	r1, 80030ee <_reclaim_reent+0x5e>
 80030e8:	4620      	mov	r0, r4
 80030ea:	f000 f861 	bl	80031b0 <_free_r>
 80030ee:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80030f0:	b111      	cbz	r1, 80030f8 <_reclaim_reent+0x68>
 80030f2:	4620      	mov	r0, r4
 80030f4:	f000 f85c 	bl	80031b0 <_free_r>
 80030f8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80030fa:	b111      	cbz	r1, 8003102 <_reclaim_reent+0x72>
 80030fc:	4620      	mov	r0, r4
 80030fe:	f000 f857 	bl	80031b0 <_free_r>
 8003102:	6a23      	ldr	r3, [r4, #32]
 8003104:	b1b3      	cbz	r3, 8003134 <_reclaim_reent+0xa4>
 8003106:	4620      	mov	r0, r4
 8003108:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800310c:	4718      	bx	r3
 800310e:	5949      	ldr	r1, [r1, r5]
 8003110:	b941      	cbnz	r1, 8003124 <_reclaim_reent+0x94>
 8003112:	3504      	adds	r5, #4
 8003114:	69e3      	ldr	r3, [r4, #28]
 8003116:	2d80      	cmp	r5, #128	; 0x80
 8003118:	68d9      	ldr	r1, [r3, #12]
 800311a:	d1f8      	bne.n	800310e <_reclaim_reent+0x7e>
 800311c:	4620      	mov	r0, r4
 800311e:	f000 f847 	bl	80031b0 <_free_r>
 8003122:	e7c0      	b.n	80030a6 <_reclaim_reent+0x16>
 8003124:	680e      	ldr	r6, [r1, #0]
 8003126:	4620      	mov	r0, r4
 8003128:	f000 f842 	bl	80031b0 <_free_r>
 800312c:	4631      	mov	r1, r6
 800312e:	e7ef      	b.n	8003110 <_reclaim_reent+0x80>
 8003130:	2500      	movs	r5, #0
 8003132:	e7ef      	b.n	8003114 <_reclaim_reent+0x84>
 8003134:	bd70      	pop	{r4, r5, r6, pc}
 8003136:	bf00      	nop
 8003138:	2000005c 	.word	0x2000005c

0800313c <__errno>:
 800313c:	4b01      	ldr	r3, [pc, #4]	; (8003144 <__errno+0x8>)
 800313e:	6818      	ldr	r0, [r3, #0]
 8003140:	4770      	bx	lr
 8003142:	bf00      	nop
 8003144:	2000005c 	.word	0x2000005c

08003148 <__libc_init_array>:
 8003148:	b570      	push	{r4, r5, r6, lr}
 800314a:	2600      	movs	r6, #0
 800314c:	4d0c      	ldr	r5, [pc, #48]	; (8003180 <__libc_init_array+0x38>)
 800314e:	4c0d      	ldr	r4, [pc, #52]	; (8003184 <__libc_init_array+0x3c>)
 8003150:	1b64      	subs	r4, r4, r5
 8003152:	10a4      	asrs	r4, r4, #2
 8003154:	42a6      	cmp	r6, r4
 8003156:	d109      	bne.n	800316c <__libc_init_array+0x24>
 8003158:	f000 fc7a 	bl	8003a50 <_init>
 800315c:	2600      	movs	r6, #0
 800315e:	4d0a      	ldr	r5, [pc, #40]	; (8003188 <__libc_init_array+0x40>)
 8003160:	4c0a      	ldr	r4, [pc, #40]	; (800318c <__libc_init_array+0x44>)
 8003162:	1b64      	subs	r4, r4, r5
 8003164:	10a4      	asrs	r4, r4, #2
 8003166:	42a6      	cmp	r6, r4
 8003168:	d105      	bne.n	8003176 <__libc_init_array+0x2e>
 800316a:	bd70      	pop	{r4, r5, r6, pc}
 800316c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003170:	4798      	blx	r3
 8003172:	3601      	adds	r6, #1
 8003174:	e7ee      	b.n	8003154 <__libc_init_array+0xc>
 8003176:	f855 3b04 	ldr.w	r3, [r5], #4
 800317a:	4798      	blx	r3
 800317c:	3601      	adds	r6, #1
 800317e:	e7f2      	b.n	8003166 <__libc_init_array+0x1e>
 8003180:	08003b08 	.word	0x08003b08
 8003184:	08003b08 	.word	0x08003b08
 8003188:	08003b08 	.word	0x08003b08
 800318c:	08003b0c 	.word	0x08003b0c

08003190 <__retarget_lock_acquire_recursive>:
 8003190:	4770      	bx	lr

08003192 <__retarget_lock_release_recursive>:
 8003192:	4770      	bx	lr

08003194 <memcpy>:
 8003194:	440a      	add	r2, r1
 8003196:	4291      	cmp	r1, r2
 8003198:	f100 33ff 	add.w	r3, r0, #4294967295
 800319c:	d100      	bne.n	80031a0 <memcpy+0xc>
 800319e:	4770      	bx	lr
 80031a0:	b510      	push	{r4, lr}
 80031a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80031a6:	4291      	cmp	r1, r2
 80031a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80031ac:	d1f9      	bne.n	80031a2 <memcpy+0xe>
 80031ae:	bd10      	pop	{r4, pc}

080031b0 <_free_r>:
 80031b0:	b538      	push	{r3, r4, r5, lr}
 80031b2:	4605      	mov	r5, r0
 80031b4:	2900      	cmp	r1, #0
 80031b6:	d040      	beq.n	800323a <_free_r+0x8a>
 80031b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80031bc:	1f0c      	subs	r4, r1, #4
 80031be:	2b00      	cmp	r3, #0
 80031c0:	bfb8      	it	lt
 80031c2:	18e4      	addlt	r4, r4, r3
 80031c4:	f000 f8dc 	bl	8003380 <__malloc_lock>
 80031c8:	4a1c      	ldr	r2, [pc, #112]	; (800323c <_free_r+0x8c>)
 80031ca:	6813      	ldr	r3, [r2, #0]
 80031cc:	b933      	cbnz	r3, 80031dc <_free_r+0x2c>
 80031ce:	6063      	str	r3, [r4, #4]
 80031d0:	6014      	str	r4, [r2, #0]
 80031d2:	4628      	mov	r0, r5
 80031d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80031d8:	f000 b8d8 	b.w	800338c <__malloc_unlock>
 80031dc:	42a3      	cmp	r3, r4
 80031de:	d908      	bls.n	80031f2 <_free_r+0x42>
 80031e0:	6820      	ldr	r0, [r4, #0]
 80031e2:	1821      	adds	r1, r4, r0
 80031e4:	428b      	cmp	r3, r1
 80031e6:	bf01      	itttt	eq
 80031e8:	6819      	ldreq	r1, [r3, #0]
 80031ea:	685b      	ldreq	r3, [r3, #4]
 80031ec:	1809      	addeq	r1, r1, r0
 80031ee:	6021      	streq	r1, [r4, #0]
 80031f0:	e7ed      	b.n	80031ce <_free_r+0x1e>
 80031f2:	461a      	mov	r2, r3
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	b10b      	cbz	r3, 80031fc <_free_r+0x4c>
 80031f8:	42a3      	cmp	r3, r4
 80031fa:	d9fa      	bls.n	80031f2 <_free_r+0x42>
 80031fc:	6811      	ldr	r1, [r2, #0]
 80031fe:	1850      	adds	r0, r2, r1
 8003200:	42a0      	cmp	r0, r4
 8003202:	d10b      	bne.n	800321c <_free_r+0x6c>
 8003204:	6820      	ldr	r0, [r4, #0]
 8003206:	4401      	add	r1, r0
 8003208:	1850      	adds	r0, r2, r1
 800320a:	4283      	cmp	r3, r0
 800320c:	6011      	str	r1, [r2, #0]
 800320e:	d1e0      	bne.n	80031d2 <_free_r+0x22>
 8003210:	6818      	ldr	r0, [r3, #0]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	4408      	add	r0, r1
 8003216:	6010      	str	r0, [r2, #0]
 8003218:	6053      	str	r3, [r2, #4]
 800321a:	e7da      	b.n	80031d2 <_free_r+0x22>
 800321c:	d902      	bls.n	8003224 <_free_r+0x74>
 800321e:	230c      	movs	r3, #12
 8003220:	602b      	str	r3, [r5, #0]
 8003222:	e7d6      	b.n	80031d2 <_free_r+0x22>
 8003224:	6820      	ldr	r0, [r4, #0]
 8003226:	1821      	adds	r1, r4, r0
 8003228:	428b      	cmp	r3, r1
 800322a:	bf01      	itttt	eq
 800322c:	6819      	ldreq	r1, [r3, #0]
 800322e:	685b      	ldreq	r3, [r3, #4]
 8003230:	1809      	addeq	r1, r1, r0
 8003232:	6021      	streq	r1, [r4, #0]
 8003234:	6063      	str	r3, [r4, #4]
 8003236:	6054      	str	r4, [r2, #4]
 8003238:	e7cb      	b.n	80031d2 <_free_r+0x22>
 800323a:	bd38      	pop	{r3, r4, r5, pc}
 800323c:	20001240 	.word	0x20001240

08003240 <sbrk_aligned>:
 8003240:	b570      	push	{r4, r5, r6, lr}
 8003242:	4e0e      	ldr	r6, [pc, #56]	; (800327c <sbrk_aligned+0x3c>)
 8003244:	460c      	mov	r4, r1
 8003246:	6831      	ldr	r1, [r6, #0]
 8003248:	4605      	mov	r5, r0
 800324a:	b911      	cbnz	r1, 8003252 <sbrk_aligned+0x12>
 800324c:	f000 fbaa 	bl	80039a4 <_sbrk_r>
 8003250:	6030      	str	r0, [r6, #0]
 8003252:	4621      	mov	r1, r4
 8003254:	4628      	mov	r0, r5
 8003256:	f000 fba5 	bl	80039a4 <_sbrk_r>
 800325a:	1c43      	adds	r3, r0, #1
 800325c:	d00a      	beq.n	8003274 <sbrk_aligned+0x34>
 800325e:	1cc4      	adds	r4, r0, #3
 8003260:	f024 0403 	bic.w	r4, r4, #3
 8003264:	42a0      	cmp	r0, r4
 8003266:	d007      	beq.n	8003278 <sbrk_aligned+0x38>
 8003268:	1a21      	subs	r1, r4, r0
 800326a:	4628      	mov	r0, r5
 800326c:	f000 fb9a 	bl	80039a4 <_sbrk_r>
 8003270:	3001      	adds	r0, #1
 8003272:	d101      	bne.n	8003278 <sbrk_aligned+0x38>
 8003274:	f04f 34ff 	mov.w	r4, #4294967295
 8003278:	4620      	mov	r0, r4
 800327a:	bd70      	pop	{r4, r5, r6, pc}
 800327c:	20001244 	.word	0x20001244

08003280 <_malloc_r>:
 8003280:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003284:	1ccd      	adds	r5, r1, #3
 8003286:	f025 0503 	bic.w	r5, r5, #3
 800328a:	3508      	adds	r5, #8
 800328c:	2d0c      	cmp	r5, #12
 800328e:	bf38      	it	cc
 8003290:	250c      	movcc	r5, #12
 8003292:	2d00      	cmp	r5, #0
 8003294:	4607      	mov	r7, r0
 8003296:	db01      	blt.n	800329c <_malloc_r+0x1c>
 8003298:	42a9      	cmp	r1, r5
 800329a:	d905      	bls.n	80032a8 <_malloc_r+0x28>
 800329c:	230c      	movs	r3, #12
 800329e:	2600      	movs	r6, #0
 80032a0:	603b      	str	r3, [r7, #0]
 80032a2:	4630      	mov	r0, r6
 80032a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80032a8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800337c <_malloc_r+0xfc>
 80032ac:	f000 f868 	bl	8003380 <__malloc_lock>
 80032b0:	f8d8 3000 	ldr.w	r3, [r8]
 80032b4:	461c      	mov	r4, r3
 80032b6:	bb5c      	cbnz	r4, 8003310 <_malloc_r+0x90>
 80032b8:	4629      	mov	r1, r5
 80032ba:	4638      	mov	r0, r7
 80032bc:	f7ff ffc0 	bl	8003240 <sbrk_aligned>
 80032c0:	1c43      	adds	r3, r0, #1
 80032c2:	4604      	mov	r4, r0
 80032c4:	d155      	bne.n	8003372 <_malloc_r+0xf2>
 80032c6:	f8d8 4000 	ldr.w	r4, [r8]
 80032ca:	4626      	mov	r6, r4
 80032cc:	2e00      	cmp	r6, #0
 80032ce:	d145      	bne.n	800335c <_malloc_r+0xdc>
 80032d0:	2c00      	cmp	r4, #0
 80032d2:	d048      	beq.n	8003366 <_malloc_r+0xe6>
 80032d4:	6823      	ldr	r3, [r4, #0]
 80032d6:	4631      	mov	r1, r6
 80032d8:	4638      	mov	r0, r7
 80032da:	eb04 0903 	add.w	r9, r4, r3
 80032de:	f000 fb61 	bl	80039a4 <_sbrk_r>
 80032e2:	4581      	cmp	r9, r0
 80032e4:	d13f      	bne.n	8003366 <_malloc_r+0xe6>
 80032e6:	6821      	ldr	r1, [r4, #0]
 80032e8:	4638      	mov	r0, r7
 80032ea:	1a6d      	subs	r5, r5, r1
 80032ec:	4629      	mov	r1, r5
 80032ee:	f7ff ffa7 	bl	8003240 <sbrk_aligned>
 80032f2:	3001      	adds	r0, #1
 80032f4:	d037      	beq.n	8003366 <_malloc_r+0xe6>
 80032f6:	6823      	ldr	r3, [r4, #0]
 80032f8:	442b      	add	r3, r5
 80032fa:	6023      	str	r3, [r4, #0]
 80032fc:	f8d8 3000 	ldr.w	r3, [r8]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d038      	beq.n	8003376 <_malloc_r+0xf6>
 8003304:	685a      	ldr	r2, [r3, #4]
 8003306:	42a2      	cmp	r2, r4
 8003308:	d12b      	bne.n	8003362 <_malloc_r+0xe2>
 800330a:	2200      	movs	r2, #0
 800330c:	605a      	str	r2, [r3, #4]
 800330e:	e00f      	b.n	8003330 <_malloc_r+0xb0>
 8003310:	6822      	ldr	r2, [r4, #0]
 8003312:	1b52      	subs	r2, r2, r5
 8003314:	d41f      	bmi.n	8003356 <_malloc_r+0xd6>
 8003316:	2a0b      	cmp	r2, #11
 8003318:	d917      	bls.n	800334a <_malloc_r+0xca>
 800331a:	1961      	adds	r1, r4, r5
 800331c:	42a3      	cmp	r3, r4
 800331e:	6025      	str	r5, [r4, #0]
 8003320:	bf18      	it	ne
 8003322:	6059      	strne	r1, [r3, #4]
 8003324:	6863      	ldr	r3, [r4, #4]
 8003326:	bf08      	it	eq
 8003328:	f8c8 1000 	streq.w	r1, [r8]
 800332c:	5162      	str	r2, [r4, r5]
 800332e:	604b      	str	r3, [r1, #4]
 8003330:	4638      	mov	r0, r7
 8003332:	f104 060b 	add.w	r6, r4, #11
 8003336:	f000 f829 	bl	800338c <__malloc_unlock>
 800333a:	f026 0607 	bic.w	r6, r6, #7
 800333e:	1d23      	adds	r3, r4, #4
 8003340:	1af2      	subs	r2, r6, r3
 8003342:	d0ae      	beq.n	80032a2 <_malloc_r+0x22>
 8003344:	1b9b      	subs	r3, r3, r6
 8003346:	50a3      	str	r3, [r4, r2]
 8003348:	e7ab      	b.n	80032a2 <_malloc_r+0x22>
 800334a:	42a3      	cmp	r3, r4
 800334c:	6862      	ldr	r2, [r4, #4]
 800334e:	d1dd      	bne.n	800330c <_malloc_r+0x8c>
 8003350:	f8c8 2000 	str.w	r2, [r8]
 8003354:	e7ec      	b.n	8003330 <_malloc_r+0xb0>
 8003356:	4623      	mov	r3, r4
 8003358:	6864      	ldr	r4, [r4, #4]
 800335a:	e7ac      	b.n	80032b6 <_malloc_r+0x36>
 800335c:	4634      	mov	r4, r6
 800335e:	6876      	ldr	r6, [r6, #4]
 8003360:	e7b4      	b.n	80032cc <_malloc_r+0x4c>
 8003362:	4613      	mov	r3, r2
 8003364:	e7cc      	b.n	8003300 <_malloc_r+0x80>
 8003366:	230c      	movs	r3, #12
 8003368:	4638      	mov	r0, r7
 800336a:	603b      	str	r3, [r7, #0]
 800336c:	f000 f80e 	bl	800338c <__malloc_unlock>
 8003370:	e797      	b.n	80032a2 <_malloc_r+0x22>
 8003372:	6025      	str	r5, [r4, #0]
 8003374:	e7dc      	b.n	8003330 <_malloc_r+0xb0>
 8003376:	605b      	str	r3, [r3, #4]
 8003378:	deff      	udf	#255	; 0xff
 800337a:	bf00      	nop
 800337c:	20001240 	.word	0x20001240

08003380 <__malloc_lock>:
 8003380:	4801      	ldr	r0, [pc, #4]	; (8003388 <__malloc_lock+0x8>)
 8003382:	f7ff bf05 	b.w	8003190 <__retarget_lock_acquire_recursive>
 8003386:	bf00      	nop
 8003388:	2000123c 	.word	0x2000123c

0800338c <__malloc_unlock>:
 800338c:	4801      	ldr	r0, [pc, #4]	; (8003394 <__malloc_unlock+0x8>)
 800338e:	f7ff bf00 	b.w	8003192 <__retarget_lock_release_recursive>
 8003392:	bf00      	nop
 8003394:	2000123c 	.word	0x2000123c

08003398 <__ssputs_r>:
 8003398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800339c:	461f      	mov	r7, r3
 800339e:	688e      	ldr	r6, [r1, #8]
 80033a0:	4682      	mov	sl, r0
 80033a2:	42be      	cmp	r6, r7
 80033a4:	460c      	mov	r4, r1
 80033a6:	4690      	mov	r8, r2
 80033a8:	680b      	ldr	r3, [r1, #0]
 80033aa:	d82c      	bhi.n	8003406 <__ssputs_r+0x6e>
 80033ac:	898a      	ldrh	r2, [r1, #12]
 80033ae:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80033b2:	d026      	beq.n	8003402 <__ssputs_r+0x6a>
 80033b4:	6965      	ldr	r5, [r4, #20]
 80033b6:	6909      	ldr	r1, [r1, #16]
 80033b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80033bc:	eba3 0901 	sub.w	r9, r3, r1
 80033c0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80033c4:	1c7b      	adds	r3, r7, #1
 80033c6:	444b      	add	r3, r9
 80033c8:	106d      	asrs	r5, r5, #1
 80033ca:	429d      	cmp	r5, r3
 80033cc:	bf38      	it	cc
 80033ce:	461d      	movcc	r5, r3
 80033d0:	0553      	lsls	r3, r2, #21
 80033d2:	d527      	bpl.n	8003424 <__ssputs_r+0x8c>
 80033d4:	4629      	mov	r1, r5
 80033d6:	f7ff ff53 	bl	8003280 <_malloc_r>
 80033da:	4606      	mov	r6, r0
 80033dc:	b360      	cbz	r0, 8003438 <__ssputs_r+0xa0>
 80033de:	464a      	mov	r2, r9
 80033e0:	6921      	ldr	r1, [r4, #16]
 80033e2:	f7ff fed7 	bl	8003194 <memcpy>
 80033e6:	89a3      	ldrh	r3, [r4, #12]
 80033e8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80033ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033f0:	81a3      	strh	r3, [r4, #12]
 80033f2:	6126      	str	r6, [r4, #16]
 80033f4:	444e      	add	r6, r9
 80033f6:	6026      	str	r6, [r4, #0]
 80033f8:	463e      	mov	r6, r7
 80033fa:	6165      	str	r5, [r4, #20]
 80033fc:	eba5 0509 	sub.w	r5, r5, r9
 8003400:	60a5      	str	r5, [r4, #8]
 8003402:	42be      	cmp	r6, r7
 8003404:	d900      	bls.n	8003408 <__ssputs_r+0x70>
 8003406:	463e      	mov	r6, r7
 8003408:	4632      	mov	r2, r6
 800340a:	4641      	mov	r1, r8
 800340c:	6820      	ldr	r0, [r4, #0]
 800340e:	f000 faaf 	bl	8003970 <memmove>
 8003412:	2000      	movs	r0, #0
 8003414:	68a3      	ldr	r3, [r4, #8]
 8003416:	1b9b      	subs	r3, r3, r6
 8003418:	60a3      	str	r3, [r4, #8]
 800341a:	6823      	ldr	r3, [r4, #0]
 800341c:	4433      	add	r3, r6
 800341e:	6023      	str	r3, [r4, #0]
 8003420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003424:	462a      	mov	r2, r5
 8003426:	f000 fadb 	bl	80039e0 <_realloc_r>
 800342a:	4606      	mov	r6, r0
 800342c:	2800      	cmp	r0, #0
 800342e:	d1e0      	bne.n	80033f2 <__ssputs_r+0x5a>
 8003430:	4650      	mov	r0, sl
 8003432:	6921      	ldr	r1, [r4, #16]
 8003434:	f7ff febc 	bl	80031b0 <_free_r>
 8003438:	230c      	movs	r3, #12
 800343a:	f8ca 3000 	str.w	r3, [sl]
 800343e:	89a3      	ldrh	r3, [r4, #12]
 8003440:	f04f 30ff 	mov.w	r0, #4294967295
 8003444:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003448:	81a3      	strh	r3, [r4, #12]
 800344a:	e7e9      	b.n	8003420 <__ssputs_r+0x88>

0800344c <_svfiprintf_r>:
 800344c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003450:	4698      	mov	r8, r3
 8003452:	898b      	ldrh	r3, [r1, #12]
 8003454:	4607      	mov	r7, r0
 8003456:	061b      	lsls	r3, r3, #24
 8003458:	460d      	mov	r5, r1
 800345a:	4614      	mov	r4, r2
 800345c:	b09d      	sub	sp, #116	; 0x74
 800345e:	d50e      	bpl.n	800347e <_svfiprintf_r+0x32>
 8003460:	690b      	ldr	r3, [r1, #16]
 8003462:	b963      	cbnz	r3, 800347e <_svfiprintf_r+0x32>
 8003464:	2140      	movs	r1, #64	; 0x40
 8003466:	f7ff ff0b 	bl	8003280 <_malloc_r>
 800346a:	6028      	str	r0, [r5, #0]
 800346c:	6128      	str	r0, [r5, #16]
 800346e:	b920      	cbnz	r0, 800347a <_svfiprintf_r+0x2e>
 8003470:	230c      	movs	r3, #12
 8003472:	603b      	str	r3, [r7, #0]
 8003474:	f04f 30ff 	mov.w	r0, #4294967295
 8003478:	e0d0      	b.n	800361c <_svfiprintf_r+0x1d0>
 800347a:	2340      	movs	r3, #64	; 0x40
 800347c:	616b      	str	r3, [r5, #20]
 800347e:	2300      	movs	r3, #0
 8003480:	9309      	str	r3, [sp, #36]	; 0x24
 8003482:	2320      	movs	r3, #32
 8003484:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003488:	2330      	movs	r3, #48	; 0x30
 800348a:	f04f 0901 	mov.w	r9, #1
 800348e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003492:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8003634 <_svfiprintf_r+0x1e8>
 8003496:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800349a:	4623      	mov	r3, r4
 800349c:	469a      	mov	sl, r3
 800349e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80034a2:	b10a      	cbz	r2, 80034a8 <_svfiprintf_r+0x5c>
 80034a4:	2a25      	cmp	r2, #37	; 0x25
 80034a6:	d1f9      	bne.n	800349c <_svfiprintf_r+0x50>
 80034a8:	ebba 0b04 	subs.w	fp, sl, r4
 80034ac:	d00b      	beq.n	80034c6 <_svfiprintf_r+0x7a>
 80034ae:	465b      	mov	r3, fp
 80034b0:	4622      	mov	r2, r4
 80034b2:	4629      	mov	r1, r5
 80034b4:	4638      	mov	r0, r7
 80034b6:	f7ff ff6f 	bl	8003398 <__ssputs_r>
 80034ba:	3001      	adds	r0, #1
 80034bc:	f000 80a9 	beq.w	8003612 <_svfiprintf_r+0x1c6>
 80034c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80034c2:	445a      	add	r2, fp
 80034c4:	9209      	str	r2, [sp, #36]	; 0x24
 80034c6:	f89a 3000 	ldrb.w	r3, [sl]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	f000 80a1 	beq.w	8003612 <_svfiprintf_r+0x1c6>
 80034d0:	2300      	movs	r3, #0
 80034d2:	f04f 32ff 	mov.w	r2, #4294967295
 80034d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80034da:	f10a 0a01 	add.w	sl, sl, #1
 80034de:	9304      	str	r3, [sp, #16]
 80034e0:	9307      	str	r3, [sp, #28]
 80034e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80034e6:	931a      	str	r3, [sp, #104]	; 0x68
 80034e8:	4654      	mov	r4, sl
 80034ea:	2205      	movs	r2, #5
 80034ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034f0:	4850      	ldr	r0, [pc, #320]	; (8003634 <_svfiprintf_r+0x1e8>)
 80034f2:	f000 fa67 	bl	80039c4 <memchr>
 80034f6:	9a04      	ldr	r2, [sp, #16]
 80034f8:	b9d8      	cbnz	r0, 8003532 <_svfiprintf_r+0xe6>
 80034fa:	06d0      	lsls	r0, r2, #27
 80034fc:	bf44      	itt	mi
 80034fe:	2320      	movmi	r3, #32
 8003500:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003504:	0711      	lsls	r1, r2, #28
 8003506:	bf44      	itt	mi
 8003508:	232b      	movmi	r3, #43	; 0x2b
 800350a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800350e:	f89a 3000 	ldrb.w	r3, [sl]
 8003512:	2b2a      	cmp	r3, #42	; 0x2a
 8003514:	d015      	beq.n	8003542 <_svfiprintf_r+0xf6>
 8003516:	4654      	mov	r4, sl
 8003518:	2000      	movs	r0, #0
 800351a:	f04f 0c0a 	mov.w	ip, #10
 800351e:	9a07      	ldr	r2, [sp, #28]
 8003520:	4621      	mov	r1, r4
 8003522:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003526:	3b30      	subs	r3, #48	; 0x30
 8003528:	2b09      	cmp	r3, #9
 800352a:	d94d      	bls.n	80035c8 <_svfiprintf_r+0x17c>
 800352c:	b1b0      	cbz	r0, 800355c <_svfiprintf_r+0x110>
 800352e:	9207      	str	r2, [sp, #28]
 8003530:	e014      	b.n	800355c <_svfiprintf_r+0x110>
 8003532:	eba0 0308 	sub.w	r3, r0, r8
 8003536:	fa09 f303 	lsl.w	r3, r9, r3
 800353a:	4313      	orrs	r3, r2
 800353c:	46a2      	mov	sl, r4
 800353e:	9304      	str	r3, [sp, #16]
 8003540:	e7d2      	b.n	80034e8 <_svfiprintf_r+0x9c>
 8003542:	9b03      	ldr	r3, [sp, #12]
 8003544:	1d19      	adds	r1, r3, #4
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	9103      	str	r1, [sp, #12]
 800354a:	2b00      	cmp	r3, #0
 800354c:	bfbb      	ittet	lt
 800354e:	425b      	neglt	r3, r3
 8003550:	f042 0202 	orrlt.w	r2, r2, #2
 8003554:	9307      	strge	r3, [sp, #28]
 8003556:	9307      	strlt	r3, [sp, #28]
 8003558:	bfb8      	it	lt
 800355a:	9204      	strlt	r2, [sp, #16]
 800355c:	7823      	ldrb	r3, [r4, #0]
 800355e:	2b2e      	cmp	r3, #46	; 0x2e
 8003560:	d10c      	bne.n	800357c <_svfiprintf_r+0x130>
 8003562:	7863      	ldrb	r3, [r4, #1]
 8003564:	2b2a      	cmp	r3, #42	; 0x2a
 8003566:	d134      	bne.n	80035d2 <_svfiprintf_r+0x186>
 8003568:	9b03      	ldr	r3, [sp, #12]
 800356a:	3402      	adds	r4, #2
 800356c:	1d1a      	adds	r2, r3, #4
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	9203      	str	r2, [sp, #12]
 8003572:	2b00      	cmp	r3, #0
 8003574:	bfb8      	it	lt
 8003576:	f04f 33ff 	movlt.w	r3, #4294967295
 800357a:	9305      	str	r3, [sp, #20]
 800357c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8003638 <_svfiprintf_r+0x1ec>
 8003580:	2203      	movs	r2, #3
 8003582:	4650      	mov	r0, sl
 8003584:	7821      	ldrb	r1, [r4, #0]
 8003586:	f000 fa1d 	bl	80039c4 <memchr>
 800358a:	b138      	cbz	r0, 800359c <_svfiprintf_r+0x150>
 800358c:	2240      	movs	r2, #64	; 0x40
 800358e:	9b04      	ldr	r3, [sp, #16]
 8003590:	eba0 000a 	sub.w	r0, r0, sl
 8003594:	4082      	lsls	r2, r0
 8003596:	4313      	orrs	r3, r2
 8003598:	3401      	adds	r4, #1
 800359a:	9304      	str	r3, [sp, #16]
 800359c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035a0:	2206      	movs	r2, #6
 80035a2:	4826      	ldr	r0, [pc, #152]	; (800363c <_svfiprintf_r+0x1f0>)
 80035a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80035a8:	f000 fa0c 	bl	80039c4 <memchr>
 80035ac:	2800      	cmp	r0, #0
 80035ae:	d038      	beq.n	8003622 <_svfiprintf_r+0x1d6>
 80035b0:	4b23      	ldr	r3, [pc, #140]	; (8003640 <_svfiprintf_r+0x1f4>)
 80035b2:	bb1b      	cbnz	r3, 80035fc <_svfiprintf_r+0x1b0>
 80035b4:	9b03      	ldr	r3, [sp, #12]
 80035b6:	3307      	adds	r3, #7
 80035b8:	f023 0307 	bic.w	r3, r3, #7
 80035bc:	3308      	adds	r3, #8
 80035be:	9303      	str	r3, [sp, #12]
 80035c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80035c2:	4433      	add	r3, r6
 80035c4:	9309      	str	r3, [sp, #36]	; 0x24
 80035c6:	e768      	b.n	800349a <_svfiprintf_r+0x4e>
 80035c8:	460c      	mov	r4, r1
 80035ca:	2001      	movs	r0, #1
 80035cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80035d0:	e7a6      	b.n	8003520 <_svfiprintf_r+0xd4>
 80035d2:	2300      	movs	r3, #0
 80035d4:	f04f 0c0a 	mov.w	ip, #10
 80035d8:	4619      	mov	r1, r3
 80035da:	3401      	adds	r4, #1
 80035dc:	9305      	str	r3, [sp, #20]
 80035de:	4620      	mov	r0, r4
 80035e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80035e4:	3a30      	subs	r2, #48	; 0x30
 80035e6:	2a09      	cmp	r2, #9
 80035e8:	d903      	bls.n	80035f2 <_svfiprintf_r+0x1a6>
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d0c6      	beq.n	800357c <_svfiprintf_r+0x130>
 80035ee:	9105      	str	r1, [sp, #20]
 80035f0:	e7c4      	b.n	800357c <_svfiprintf_r+0x130>
 80035f2:	4604      	mov	r4, r0
 80035f4:	2301      	movs	r3, #1
 80035f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80035fa:	e7f0      	b.n	80035de <_svfiprintf_r+0x192>
 80035fc:	ab03      	add	r3, sp, #12
 80035fe:	9300      	str	r3, [sp, #0]
 8003600:	462a      	mov	r2, r5
 8003602:	4638      	mov	r0, r7
 8003604:	4b0f      	ldr	r3, [pc, #60]	; (8003644 <_svfiprintf_r+0x1f8>)
 8003606:	a904      	add	r1, sp, #16
 8003608:	f3af 8000 	nop.w
 800360c:	1c42      	adds	r2, r0, #1
 800360e:	4606      	mov	r6, r0
 8003610:	d1d6      	bne.n	80035c0 <_svfiprintf_r+0x174>
 8003612:	89ab      	ldrh	r3, [r5, #12]
 8003614:	065b      	lsls	r3, r3, #25
 8003616:	f53f af2d 	bmi.w	8003474 <_svfiprintf_r+0x28>
 800361a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800361c:	b01d      	add	sp, #116	; 0x74
 800361e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003622:	ab03      	add	r3, sp, #12
 8003624:	9300      	str	r3, [sp, #0]
 8003626:	462a      	mov	r2, r5
 8003628:	4638      	mov	r0, r7
 800362a:	4b06      	ldr	r3, [pc, #24]	; (8003644 <_svfiprintf_r+0x1f8>)
 800362c:	a904      	add	r1, sp, #16
 800362e:	f000 f87d 	bl	800372c <_printf_i>
 8003632:	e7eb      	b.n	800360c <_svfiprintf_r+0x1c0>
 8003634:	08003ad2 	.word	0x08003ad2
 8003638:	08003ad8 	.word	0x08003ad8
 800363c:	08003adc 	.word	0x08003adc
 8003640:	00000000 	.word	0x00000000
 8003644:	08003399 	.word	0x08003399

08003648 <_printf_common>:
 8003648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800364c:	4616      	mov	r6, r2
 800364e:	4699      	mov	r9, r3
 8003650:	688a      	ldr	r2, [r1, #8]
 8003652:	690b      	ldr	r3, [r1, #16]
 8003654:	4607      	mov	r7, r0
 8003656:	4293      	cmp	r3, r2
 8003658:	bfb8      	it	lt
 800365a:	4613      	movlt	r3, r2
 800365c:	6033      	str	r3, [r6, #0]
 800365e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003662:	460c      	mov	r4, r1
 8003664:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003668:	b10a      	cbz	r2, 800366e <_printf_common+0x26>
 800366a:	3301      	adds	r3, #1
 800366c:	6033      	str	r3, [r6, #0]
 800366e:	6823      	ldr	r3, [r4, #0]
 8003670:	0699      	lsls	r1, r3, #26
 8003672:	bf42      	ittt	mi
 8003674:	6833      	ldrmi	r3, [r6, #0]
 8003676:	3302      	addmi	r3, #2
 8003678:	6033      	strmi	r3, [r6, #0]
 800367a:	6825      	ldr	r5, [r4, #0]
 800367c:	f015 0506 	ands.w	r5, r5, #6
 8003680:	d106      	bne.n	8003690 <_printf_common+0x48>
 8003682:	f104 0a19 	add.w	sl, r4, #25
 8003686:	68e3      	ldr	r3, [r4, #12]
 8003688:	6832      	ldr	r2, [r6, #0]
 800368a:	1a9b      	subs	r3, r3, r2
 800368c:	42ab      	cmp	r3, r5
 800368e:	dc2b      	bgt.n	80036e8 <_printf_common+0xa0>
 8003690:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003694:	1e13      	subs	r3, r2, #0
 8003696:	6822      	ldr	r2, [r4, #0]
 8003698:	bf18      	it	ne
 800369a:	2301      	movne	r3, #1
 800369c:	0692      	lsls	r2, r2, #26
 800369e:	d430      	bmi.n	8003702 <_printf_common+0xba>
 80036a0:	4649      	mov	r1, r9
 80036a2:	4638      	mov	r0, r7
 80036a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80036a8:	47c0      	blx	r8
 80036aa:	3001      	adds	r0, #1
 80036ac:	d023      	beq.n	80036f6 <_printf_common+0xae>
 80036ae:	6823      	ldr	r3, [r4, #0]
 80036b0:	6922      	ldr	r2, [r4, #16]
 80036b2:	f003 0306 	and.w	r3, r3, #6
 80036b6:	2b04      	cmp	r3, #4
 80036b8:	bf14      	ite	ne
 80036ba:	2500      	movne	r5, #0
 80036bc:	6833      	ldreq	r3, [r6, #0]
 80036be:	f04f 0600 	mov.w	r6, #0
 80036c2:	bf08      	it	eq
 80036c4:	68e5      	ldreq	r5, [r4, #12]
 80036c6:	f104 041a 	add.w	r4, r4, #26
 80036ca:	bf08      	it	eq
 80036cc:	1aed      	subeq	r5, r5, r3
 80036ce:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80036d2:	bf08      	it	eq
 80036d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80036d8:	4293      	cmp	r3, r2
 80036da:	bfc4      	itt	gt
 80036dc:	1a9b      	subgt	r3, r3, r2
 80036de:	18ed      	addgt	r5, r5, r3
 80036e0:	42b5      	cmp	r5, r6
 80036e2:	d11a      	bne.n	800371a <_printf_common+0xd2>
 80036e4:	2000      	movs	r0, #0
 80036e6:	e008      	b.n	80036fa <_printf_common+0xb2>
 80036e8:	2301      	movs	r3, #1
 80036ea:	4652      	mov	r2, sl
 80036ec:	4649      	mov	r1, r9
 80036ee:	4638      	mov	r0, r7
 80036f0:	47c0      	blx	r8
 80036f2:	3001      	adds	r0, #1
 80036f4:	d103      	bne.n	80036fe <_printf_common+0xb6>
 80036f6:	f04f 30ff 	mov.w	r0, #4294967295
 80036fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036fe:	3501      	adds	r5, #1
 8003700:	e7c1      	b.n	8003686 <_printf_common+0x3e>
 8003702:	2030      	movs	r0, #48	; 0x30
 8003704:	18e1      	adds	r1, r4, r3
 8003706:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800370a:	1c5a      	adds	r2, r3, #1
 800370c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003710:	4422      	add	r2, r4
 8003712:	3302      	adds	r3, #2
 8003714:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003718:	e7c2      	b.n	80036a0 <_printf_common+0x58>
 800371a:	2301      	movs	r3, #1
 800371c:	4622      	mov	r2, r4
 800371e:	4649      	mov	r1, r9
 8003720:	4638      	mov	r0, r7
 8003722:	47c0      	blx	r8
 8003724:	3001      	adds	r0, #1
 8003726:	d0e6      	beq.n	80036f6 <_printf_common+0xae>
 8003728:	3601      	adds	r6, #1
 800372a:	e7d9      	b.n	80036e0 <_printf_common+0x98>

0800372c <_printf_i>:
 800372c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003730:	7e0f      	ldrb	r7, [r1, #24]
 8003732:	4691      	mov	r9, r2
 8003734:	2f78      	cmp	r7, #120	; 0x78
 8003736:	4680      	mov	r8, r0
 8003738:	460c      	mov	r4, r1
 800373a:	469a      	mov	sl, r3
 800373c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800373e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003742:	d807      	bhi.n	8003754 <_printf_i+0x28>
 8003744:	2f62      	cmp	r7, #98	; 0x62
 8003746:	d80a      	bhi.n	800375e <_printf_i+0x32>
 8003748:	2f00      	cmp	r7, #0
 800374a:	f000 80d5 	beq.w	80038f8 <_printf_i+0x1cc>
 800374e:	2f58      	cmp	r7, #88	; 0x58
 8003750:	f000 80c1 	beq.w	80038d6 <_printf_i+0x1aa>
 8003754:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003758:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800375c:	e03a      	b.n	80037d4 <_printf_i+0xa8>
 800375e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003762:	2b15      	cmp	r3, #21
 8003764:	d8f6      	bhi.n	8003754 <_printf_i+0x28>
 8003766:	a101      	add	r1, pc, #4	; (adr r1, 800376c <_printf_i+0x40>)
 8003768:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800376c:	080037c5 	.word	0x080037c5
 8003770:	080037d9 	.word	0x080037d9
 8003774:	08003755 	.word	0x08003755
 8003778:	08003755 	.word	0x08003755
 800377c:	08003755 	.word	0x08003755
 8003780:	08003755 	.word	0x08003755
 8003784:	080037d9 	.word	0x080037d9
 8003788:	08003755 	.word	0x08003755
 800378c:	08003755 	.word	0x08003755
 8003790:	08003755 	.word	0x08003755
 8003794:	08003755 	.word	0x08003755
 8003798:	080038df 	.word	0x080038df
 800379c:	08003805 	.word	0x08003805
 80037a0:	08003899 	.word	0x08003899
 80037a4:	08003755 	.word	0x08003755
 80037a8:	08003755 	.word	0x08003755
 80037ac:	08003901 	.word	0x08003901
 80037b0:	08003755 	.word	0x08003755
 80037b4:	08003805 	.word	0x08003805
 80037b8:	08003755 	.word	0x08003755
 80037bc:	08003755 	.word	0x08003755
 80037c0:	080038a1 	.word	0x080038a1
 80037c4:	682b      	ldr	r3, [r5, #0]
 80037c6:	1d1a      	adds	r2, r3, #4
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	602a      	str	r2, [r5, #0]
 80037cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80037d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80037d4:	2301      	movs	r3, #1
 80037d6:	e0a0      	b.n	800391a <_printf_i+0x1ee>
 80037d8:	6820      	ldr	r0, [r4, #0]
 80037da:	682b      	ldr	r3, [r5, #0]
 80037dc:	0607      	lsls	r7, r0, #24
 80037de:	f103 0104 	add.w	r1, r3, #4
 80037e2:	6029      	str	r1, [r5, #0]
 80037e4:	d501      	bpl.n	80037ea <_printf_i+0xbe>
 80037e6:	681e      	ldr	r6, [r3, #0]
 80037e8:	e003      	b.n	80037f2 <_printf_i+0xc6>
 80037ea:	0646      	lsls	r6, r0, #25
 80037ec:	d5fb      	bpl.n	80037e6 <_printf_i+0xba>
 80037ee:	f9b3 6000 	ldrsh.w	r6, [r3]
 80037f2:	2e00      	cmp	r6, #0
 80037f4:	da03      	bge.n	80037fe <_printf_i+0xd2>
 80037f6:	232d      	movs	r3, #45	; 0x2d
 80037f8:	4276      	negs	r6, r6
 80037fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80037fe:	230a      	movs	r3, #10
 8003800:	4859      	ldr	r0, [pc, #356]	; (8003968 <_printf_i+0x23c>)
 8003802:	e012      	b.n	800382a <_printf_i+0xfe>
 8003804:	682b      	ldr	r3, [r5, #0]
 8003806:	6820      	ldr	r0, [r4, #0]
 8003808:	1d19      	adds	r1, r3, #4
 800380a:	6029      	str	r1, [r5, #0]
 800380c:	0605      	lsls	r5, r0, #24
 800380e:	d501      	bpl.n	8003814 <_printf_i+0xe8>
 8003810:	681e      	ldr	r6, [r3, #0]
 8003812:	e002      	b.n	800381a <_printf_i+0xee>
 8003814:	0641      	lsls	r1, r0, #25
 8003816:	d5fb      	bpl.n	8003810 <_printf_i+0xe4>
 8003818:	881e      	ldrh	r6, [r3, #0]
 800381a:	2f6f      	cmp	r7, #111	; 0x6f
 800381c:	bf0c      	ite	eq
 800381e:	2308      	moveq	r3, #8
 8003820:	230a      	movne	r3, #10
 8003822:	4851      	ldr	r0, [pc, #324]	; (8003968 <_printf_i+0x23c>)
 8003824:	2100      	movs	r1, #0
 8003826:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800382a:	6865      	ldr	r5, [r4, #4]
 800382c:	2d00      	cmp	r5, #0
 800382e:	bfa8      	it	ge
 8003830:	6821      	ldrge	r1, [r4, #0]
 8003832:	60a5      	str	r5, [r4, #8]
 8003834:	bfa4      	itt	ge
 8003836:	f021 0104 	bicge.w	r1, r1, #4
 800383a:	6021      	strge	r1, [r4, #0]
 800383c:	b90e      	cbnz	r6, 8003842 <_printf_i+0x116>
 800383e:	2d00      	cmp	r5, #0
 8003840:	d04b      	beq.n	80038da <_printf_i+0x1ae>
 8003842:	4615      	mov	r5, r2
 8003844:	fbb6 f1f3 	udiv	r1, r6, r3
 8003848:	fb03 6711 	mls	r7, r3, r1, r6
 800384c:	5dc7      	ldrb	r7, [r0, r7]
 800384e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003852:	4637      	mov	r7, r6
 8003854:	42bb      	cmp	r3, r7
 8003856:	460e      	mov	r6, r1
 8003858:	d9f4      	bls.n	8003844 <_printf_i+0x118>
 800385a:	2b08      	cmp	r3, #8
 800385c:	d10b      	bne.n	8003876 <_printf_i+0x14a>
 800385e:	6823      	ldr	r3, [r4, #0]
 8003860:	07de      	lsls	r6, r3, #31
 8003862:	d508      	bpl.n	8003876 <_printf_i+0x14a>
 8003864:	6923      	ldr	r3, [r4, #16]
 8003866:	6861      	ldr	r1, [r4, #4]
 8003868:	4299      	cmp	r1, r3
 800386a:	bfde      	ittt	le
 800386c:	2330      	movle	r3, #48	; 0x30
 800386e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003872:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003876:	1b52      	subs	r2, r2, r5
 8003878:	6122      	str	r2, [r4, #16]
 800387a:	464b      	mov	r3, r9
 800387c:	4621      	mov	r1, r4
 800387e:	4640      	mov	r0, r8
 8003880:	f8cd a000 	str.w	sl, [sp]
 8003884:	aa03      	add	r2, sp, #12
 8003886:	f7ff fedf 	bl	8003648 <_printf_common>
 800388a:	3001      	adds	r0, #1
 800388c:	d14a      	bne.n	8003924 <_printf_i+0x1f8>
 800388e:	f04f 30ff 	mov.w	r0, #4294967295
 8003892:	b004      	add	sp, #16
 8003894:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003898:	6823      	ldr	r3, [r4, #0]
 800389a:	f043 0320 	orr.w	r3, r3, #32
 800389e:	6023      	str	r3, [r4, #0]
 80038a0:	2778      	movs	r7, #120	; 0x78
 80038a2:	4832      	ldr	r0, [pc, #200]	; (800396c <_printf_i+0x240>)
 80038a4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80038a8:	6823      	ldr	r3, [r4, #0]
 80038aa:	6829      	ldr	r1, [r5, #0]
 80038ac:	061f      	lsls	r7, r3, #24
 80038ae:	f851 6b04 	ldr.w	r6, [r1], #4
 80038b2:	d402      	bmi.n	80038ba <_printf_i+0x18e>
 80038b4:	065f      	lsls	r7, r3, #25
 80038b6:	bf48      	it	mi
 80038b8:	b2b6      	uxthmi	r6, r6
 80038ba:	07df      	lsls	r7, r3, #31
 80038bc:	bf48      	it	mi
 80038be:	f043 0320 	orrmi.w	r3, r3, #32
 80038c2:	6029      	str	r1, [r5, #0]
 80038c4:	bf48      	it	mi
 80038c6:	6023      	strmi	r3, [r4, #0]
 80038c8:	b91e      	cbnz	r6, 80038d2 <_printf_i+0x1a6>
 80038ca:	6823      	ldr	r3, [r4, #0]
 80038cc:	f023 0320 	bic.w	r3, r3, #32
 80038d0:	6023      	str	r3, [r4, #0]
 80038d2:	2310      	movs	r3, #16
 80038d4:	e7a6      	b.n	8003824 <_printf_i+0xf8>
 80038d6:	4824      	ldr	r0, [pc, #144]	; (8003968 <_printf_i+0x23c>)
 80038d8:	e7e4      	b.n	80038a4 <_printf_i+0x178>
 80038da:	4615      	mov	r5, r2
 80038dc:	e7bd      	b.n	800385a <_printf_i+0x12e>
 80038de:	682b      	ldr	r3, [r5, #0]
 80038e0:	6826      	ldr	r6, [r4, #0]
 80038e2:	1d18      	adds	r0, r3, #4
 80038e4:	6961      	ldr	r1, [r4, #20]
 80038e6:	6028      	str	r0, [r5, #0]
 80038e8:	0635      	lsls	r5, r6, #24
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	d501      	bpl.n	80038f2 <_printf_i+0x1c6>
 80038ee:	6019      	str	r1, [r3, #0]
 80038f0:	e002      	b.n	80038f8 <_printf_i+0x1cc>
 80038f2:	0670      	lsls	r0, r6, #25
 80038f4:	d5fb      	bpl.n	80038ee <_printf_i+0x1c2>
 80038f6:	8019      	strh	r1, [r3, #0]
 80038f8:	2300      	movs	r3, #0
 80038fa:	4615      	mov	r5, r2
 80038fc:	6123      	str	r3, [r4, #16]
 80038fe:	e7bc      	b.n	800387a <_printf_i+0x14e>
 8003900:	682b      	ldr	r3, [r5, #0]
 8003902:	2100      	movs	r1, #0
 8003904:	1d1a      	adds	r2, r3, #4
 8003906:	602a      	str	r2, [r5, #0]
 8003908:	681d      	ldr	r5, [r3, #0]
 800390a:	6862      	ldr	r2, [r4, #4]
 800390c:	4628      	mov	r0, r5
 800390e:	f000 f859 	bl	80039c4 <memchr>
 8003912:	b108      	cbz	r0, 8003918 <_printf_i+0x1ec>
 8003914:	1b40      	subs	r0, r0, r5
 8003916:	6060      	str	r0, [r4, #4]
 8003918:	6863      	ldr	r3, [r4, #4]
 800391a:	6123      	str	r3, [r4, #16]
 800391c:	2300      	movs	r3, #0
 800391e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003922:	e7aa      	b.n	800387a <_printf_i+0x14e>
 8003924:	462a      	mov	r2, r5
 8003926:	4649      	mov	r1, r9
 8003928:	4640      	mov	r0, r8
 800392a:	6923      	ldr	r3, [r4, #16]
 800392c:	47d0      	blx	sl
 800392e:	3001      	adds	r0, #1
 8003930:	d0ad      	beq.n	800388e <_printf_i+0x162>
 8003932:	6823      	ldr	r3, [r4, #0]
 8003934:	079b      	lsls	r3, r3, #30
 8003936:	d413      	bmi.n	8003960 <_printf_i+0x234>
 8003938:	68e0      	ldr	r0, [r4, #12]
 800393a:	9b03      	ldr	r3, [sp, #12]
 800393c:	4298      	cmp	r0, r3
 800393e:	bfb8      	it	lt
 8003940:	4618      	movlt	r0, r3
 8003942:	e7a6      	b.n	8003892 <_printf_i+0x166>
 8003944:	2301      	movs	r3, #1
 8003946:	4632      	mov	r2, r6
 8003948:	4649      	mov	r1, r9
 800394a:	4640      	mov	r0, r8
 800394c:	47d0      	blx	sl
 800394e:	3001      	adds	r0, #1
 8003950:	d09d      	beq.n	800388e <_printf_i+0x162>
 8003952:	3501      	adds	r5, #1
 8003954:	68e3      	ldr	r3, [r4, #12]
 8003956:	9903      	ldr	r1, [sp, #12]
 8003958:	1a5b      	subs	r3, r3, r1
 800395a:	42ab      	cmp	r3, r5
 800395c:	dcf2      	bgt.n	8003944 <_printf_i+0x218>
 800395e:	e7eb      	b.n	8003938 <_printf_i+0x20c>
 8003960:	2500      	movs	r5, #0
 8003962:	f104 0619 	add.w	r6, r4, #25
 8003966:	e7f5      	b.n	8003954 <_printf_i+0x228>
 8003968:	08003ae3 	.word	0x08003ae3
 800396c:	08003af4 	.word	0x08003af4

08003970 <memmove>:
 8003970:	4288      	cmp	r0, r1
 8003972:	b510      	push	{r4, lr}
 8003974:	eb01 0402 	add.w	r4, r1, r2
 8003978:	d902      	bls.n	8003980 <memmove+0x10>
 800397a:	4284      	cmp	r4, r0
 800397c:	4623      	mov	r3, r4
 800397e:	d807      	bhi.n	8003990 <memmove+0x20>
 8003980:	1e43      	subs	r3, r0, #1
 8003982:	42a1      	cmp	r1, r4
 8003984:	d008      	beq.n	8003998 <memmove+0x28>
 8003986:	f811 2b01 	ldrb.w	r2, [r1], #1
 800398a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800398e:	e7f8      	b.n	8003982 <memmove+0x12>
 8003990:	4601      	mov	r1, r0
 8003992:	4402      	add	r2, r0
 8003994:	428a      	cmp	r2, r1
 8003996:	d100      	bne.n	800399a <memmove+0x2a>
 8003998:	bd10      	pop	{r4, pc}
 800399a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800399e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80039a2:	e7f7      	b.n	8003994 <memmove+0x24>

080039a4 <_sbrk_r>:
 80039a4:	b538      	push	{r3, r4, r5, lr}
 80039a6:	2300      	movs	r3, #0
 80039a8:	4d05      	ldr	r5, [pc, #20]	; (80039c0 <_sbrk_r+0x1c>)
 80039aa:	4604      	mov	r4, r0
 80039ac:	4608      	mov	r0, r1
 80039ae:	602b      	str	r3, [r5, #0]
 80039b0:	f7fc fe3c 	bl	800062c <_sbrk>
 80039b4:	1c43      	adds	r3, r0, #1
 80039b6:	d102      	bne.n	80039be <_sbrk_r+0x1a>
 80039b8:	682b      	ldr	r3, [r5, #0]
 80039ba:	b103      	cbz	r3, 80039be <_sbrk_r+0x1a>
 80039bc:	6023      	str	r3, [r4, #0]
 80039be:	bd38      	pop	{r3, r4, r5, pc}
 80039c0:	20001238 	.word	0x20001238

080039c4 <memchr>:
 80039c4:	4603      	mov	r3, r0
 80039c6:	b510      	push	{r4, lr}
 80039c8:	b2c9      	uxtb	r1, r1
 80039ca:	4402      	add	r2, r0
 80039cc:	4293      	cmp	r3, r2
 80039ce:	4618      	mov	r0, r3
 80039d0:	d101      	bne.n	80039d6 <memchr+0x12>
 80039d2:	2000      	movs	r0, #0
 80039d4:	e003      	b.n	80039de <memchr+0x1a>
 80039d6:	7804      	ldrb	r4, [r0, #0]
 80039d8:	3301      	adds	r3, #1
 80039da:	428c      	cmp	r4, r1
 80039dc:	d1f6      	bne.n	80039cc <memchr+0x8>
 80039de:	bd10      	pop	{r4, pc}

080039e0 <_realloc_r>:
 80039e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039e4:	4680      	mov	r8, r0
 80039e6:	4614      	mov	r4, r2
 80039e8:	460e      	mov	r6, r1
 80039ea:	b921      	cbnz	r1, 80039f6 <_realloc_r+0x16>
 80039ec:	4611      	mov	r1, r2
 80039ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80039f2:	f7ff bc45 	b.w	8003280 <_malloc_r>
 80039f6:	b92a      	cbnz	r2, 8003a04 <_realloc_r+0x24>
 80039f8:	f7ff fbda 	bl	80031b0 <_free_r>
 80039fc:	4625      	mov	r5, r4
 80039fe:	4628      	mov	r0, r5
 8003a00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a04:	f000 f81b 	bl	8003a3e <_malloc_usable_size_r>
 8003a08:	4284      	cmp	r4, r0
 8003a0a:	4607      	mov	r7, r0
 8003a0c:	d802      	bhi.n	8003a14 <_realloc_r+0x34>
 8003a0e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003a12:	d812      	bhi.n	8003a3a <_realloc_r+0x5a>
 8003a14:	4621      	mov	r1, r4
 8003a16:	4640      	mov	r0, r8
 8003a18:	f7ff fc32 	bl	8003280 <_malloc_r>
 8003a1c:	4605      	mov	r5, r0
 8003a1e:	2800      	cmp	r0, #0
 8003a20:	d0ed      	beq.n	80039fe <_realloc_r+0x1e>
 8003a22:	42bc      	cmp	r4, r7
 8003a24:	4622      	mov	r2, r4
 8003a26:	4631      	mov	r1, r6
 8003a28:	bf28      	it	cs
 8003a2a:	463a      	movcs	r2, r7
 8003a2c:	f7ff fbb2 	bl	8003194 <memcpy>
 8003a30:	4631      	mov	r1, r6
 8003a32:	4640      	mov	r0, r8
 8003a34:	f7ff fbbc 	bl	80031b0 <_free_r>
 8003a38:	e7e1      	b.n	80039fe <_realloc_r+0x1e>
 8003a3a:	4635      	mov	r5, r6
 8003a3c:	e7df      	b.n	80039fe <_realloc_r+0x1e>

08003a3e <_malloc_usable_size_r>:
 8003a3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a42:	1f18      	subs	r0, r3, #4
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	bfbc      	itt	lt
 8003a48:	580b      	ldrlt	r3, [r1, r0]
 8003a4a:	18c0      	addlt	r0, r0, r3
 8003a4c:	4770      	bx	lr
	...

08003a50 <_init>:
 8003a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a52:	bf00      	nop
 8003a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a56:	bc08      	pop	{r3}
 8003a58:	469e      	mov	lr, r3
 8003a5a:	4770      	bx	lr

08003a5c <_fini>:
 8003a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a5e:	bf00      	nop
 8003a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a62:	bc08      	pop	{r3}
 8003a64:	469e      	mov	lr, r3
 8003a66:	4770      	bx	lr
