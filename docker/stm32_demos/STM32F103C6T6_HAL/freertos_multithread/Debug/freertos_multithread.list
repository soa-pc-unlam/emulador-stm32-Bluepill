
freertos_multithread.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a68  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08003b78  08003b78  00013b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c50  08003c50  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08003c50  08003c50  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c50  08003c50  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c50  08003c50  00013c50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c54  08003c54  00013c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08003c58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011f0  20000060  08003cb8  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001250  08003cb8  00021250  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011a34  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a90  00000000  00000000  00031b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001028  00000000  00000000  00034590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c8b  00000000  00000000  000355b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018f54  00000000  00000000  00036243  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001216a  00000000  00000000  0004f197  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00092303  00000000  00000000  00061301  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000047e8  00000000  00000000  000f3604  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000098  00000000  00000000  000f7dec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	08003b60 	.word	0x08003b60

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	08003b60 	.word	0x08003b60

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	; (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	; (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	; 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	2000007c 	.word	0x2000007c
 800017c:	2000011c 	.word	0x2000011c

08000180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000180:	b5b0      	push	{r4, r5, r7, lr}
 8000182:	b08e      	sub	sp, #56	; 0x38
 8000184:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000186:	f000 fabb 	bl	8000700 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800018a:	f000 f833 	bl	80001f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800018e:	f000 f897 	bl	80002c0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000192:	f000 f86b 	bl	800026c <MX_USART1_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of ledFlash */
  osThreadDef(ledFlash, blinkLed, osPriorityNormal, 0, 128);
 8000196:	4b13      	ldr	r3, [pc, #76]	; (80001e4 <main+0x64>)
 8000198:	f107 041c 	add.w	r4, r7, #28
 800019c:	461d      	mov	r5, r3
 800019e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001a2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ledFlashHandle = osThreadCreate(osThread(ledFlash), NULL);
 80001aa:	f107 031c 	add.w	r3, r7, #28
 80001ae:	2100      	movs	r1, #0
 80001b0:	4618      	mov	r0, r3
 80001b2:	f001 fde5 	bl	8001d80 <osThreadCreate>
 80001b6:	4603      	mov	r3, r0
 80001b8:	4a0b      	ldr	r2, [pc, #44]	; (80001e8 <main+0x68>)
 80001ba:	6013      	str	r3, [r2, #0]

  /* definition and creation of sendText */
  osThreadDef(sendText, sendtext, osPriorityIdle, 0, 128);
 80001bc:	4b0b      	ldr	r3, [pc, #44]	; (80001ec <main+0x6c>)
 80001be:	463c      	mov	r4, r7
 80001c0:	461d      	mov	r5, r3
 80001c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001c6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  sendTextHandle = osThreadCreate(osThread(sendText), NULL);
 80001ce:	463b      	mov	r3, r7
 80001d0:	2100      	movs	r1, #0
 80001d2:	4618      	mov	r0, r3
 80001d4:	f001 fdd4 	bl	8001d80 <osThreadCreate>
 80001d8:	4603      	mov	r3, r0
 80001da:	4a05      	ldr	r2, [pc, #20]	; (80001f0 <main+0x70>)
 80001dc:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80001de:	f001 fdc8 	bl	8001d72 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001e2:	e7fe      	b.n	80001e2 <main+0x62>
 80001e4:	08003b84 	.word	0x08003b84
 80001e8:	20000364 	.word	0x20000364
 80001ec:	08003bac 	.word	0x08003bac
 80001f0:	20000368 	.word	0x20000368

080001f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b090      	sub	sp, #64	; 0x40
 80001f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001fa:	f107 0318 	add.w	r3, r7, #24
 80001fe:	2228      	movs	r2, #40	; 0x28
 8000200:	2100      	movs	r1, #0
 8000202:	4618      	mov	r0, r3
 8000204:	f002 ffc4 	bl	8003190 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000208:	1d3b      	adds	r3, r7, #4
 800020a:	2200      	movs	r2, #0
 800020c:	601a      	str	r2, [r3, #0]
 800020e:	605a      	str	r2, [r3, #4]
 8000210:	609a      	str	r2, [r3, #8]
 8000212:	60da      	str	r2, [r3, #12]
 8000214:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000216:	2302      	movs	r3, #2
 8000218:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800021a:	2301      	movs	r3, #1
 800021c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800021e:	2310      	movs	r3, #16
 8000220:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000222:	2300      	movs	r3, #0
 8000224:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000226:	f107 0318 	add.w	r3, r7, #24
 800022a:	4618      	mov	r0, r3
 800022c:	f000 fd30 	bl	8000c90 <HAL_RCC_OscConfig>
 8000230:	4603      	mov	r3, r0
 8000232:	2b00      	cmp	r3, #0
 8000234:	d001      	beq.n	800023a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000236:	f000 f8dc 	bl	80003f2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800023a:	230f      	movs	r3, #15
 800023c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800023e:	2300      	movs	r3, #0
 8000240:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000242:	2300      	movs	r3, #0
 8000244:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000246:	2300      	movs	r3, #0
 8000248:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800024a:	2300      	movs	r3, #0
 800024c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800024e:	1d3b      	adds	r3, r7, #4
 8000250:	2100      	movs	r1, #0
 8000252:	4618      	mov	r0, r3
 8000254:	f000 ff9e 	bl	8001194 <HAL_RCC_ClockConfig>
 8000258:	4603      	mov	r3, r0
 800025a:	2b00      	cmp	r3, #0
 800025c:	d001      	beq.n	8000262 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800025e:	f000 f8c8 	bl	80003f2 <Error_Handler>
  }
}
 8000262:	bf00      	nop
 8000264:	3740      	adds	r7, #64	; 0x40
 8000266:	46bd      	mov	sp, r7
 8000268:	bd80      	pop	{r7, pc}
	...

0800026c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000270:	4b11      	ldr	r3, [pc, #68]	; (80002b8 <MX_USART1_UART_Init+0x4c>)
 8000272:	4a12      	ldr	r2, [pc, #72]	; (80002bc <MX_USART1_UART_Init+0x50>)
 8000274:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000276:	4b10      	ldr	r3, [pc, #64]	; (80002b8 <MX_USART1_UART_Init+0x4c>)
 8000278:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800027c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800027e:	4b0e      	ldr	r3, [pc, #56]	; (80002b8 <MX_USART1_UART_Init+0x4c>)
 8000280:	2200      	movs	r2, #0
 8000282:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000284:	4b0c      	ldr	r3, [pc, #48]	; (80002b8 <MX_USART1_UART_Init+0x4c>)
 8000286:	2200      	movs	r2, #0
 8000288:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800028a:	4b0b      	ldr	r3, [pc, #44]	; (80002b8 <MX_USART1_UART_Init+0x4c>)
 800028c:	2200      	movs	r2, #0
 800028e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000290:	4b09      	ldr	r3, [pc, #36]	; (80002b8 <MX_USART1_UART_Init+0x4c>)
 8000292:	220c      	movs	r2, #12
 8000294:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000296:	4b08      	ldr	r3, [pc, #32]	; (80002b8 <MX_USART1_UART_Init+0x4c>)
 8000298:	2200      	movs	r2, #0
 800029a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800029c:	4b06      	ldr	r3, [pc, #24]	; (80002b8 <MX_USART1_UART_Init+0x4c>)
 800029e:	2200      	movs	r2, #0
 80002a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80002a2:	4805      	ldr	r0, [pc, #20]	; (80002b8 <MX_USART1_UART_Init+0x4c>)
 80002a4:	f001 fb7e 	bl	80019a4 <HAL_UART_Init>
 80002a8:	4603      	mov	r3, r0
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d001      	beq.n	80002b2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80002ae:	f000 f8a0 	bl	80003f2 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80002b2:	bf00      	nop
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	bf00      	nop
 80002b8:	2000031c 	.word	0x2000031c
 80002bc:	40013800 	.word	0x40013800

080002c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b088      	sub	sp, #32
 80002c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002c6:	f107 0310 	add.w	r3, r7, #16
 80002ca:	2200      	movs	r2, #0
 80002cc:	601a      	str	r2, [r3, #0]
 80002ce:	605a      	str	r2, [r3, #4]
 80002d0:	609a      	str	r2, [r3, #8]
 80002d2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002d4:	4b1e      	ldr	r3, [pc, #120]	; (8000350 <MX_GPIO_Init+0x90>)
 80002d6:	699b      	ldr	r3, [r3, #24]
 80002d8:	4a1d      	ldr	r2, [pc, #116]	; (8000350 <MX_GPIO_Init+0x90>)
 80002da:	f043 0310 	orr.w	r3, r3, #16
 80002de:	6193      	str	r3, [r2, #24]
 80002e0:	4b1b      	ldr	r3, [pc, #108]	; (8000350 <MX_GPIO_Init+0x90>)
 80002e2:	699b      	ldr	r3, [r3, #24]
 80002e4:	f003 0310 	and.w	r3, r3, #16
 80002e8:	60fb      	str	r3, [r7, #12]
 80002ea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002ec:	4b18      	ldr	r3, [pc, #96]	; (8000350 <MX_GPIO_Init+0x90>)
 80002ee:	699b      	ldr	r3, [r3, #24]
 80002f0:	4a17      	ldr	r2, [pc, #92]	; (8000350 <MX_GPIO_Init+0x90>)
 80002f2:	f043 0320 	orr.w	r3, r3, #32
 80002f6:	6193      	str	r3, [r2, #24]
 80002f8:	4b15      	ldr	r3, [pc, #84]	; (8000350 <MX_GPIO_Init+0x90>)
 80002fa:	699b      	ldr	r3, [r3, #24]
 80002fc:	f003 0320 	and.w	r3, r3, #32
 8000300:	60bb      	str	r3, [r7, #8]
 8000302:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000304:	4b12      	ldr	r3, [pc, #72]	; (8000350 <MX_GPIO_Init+0x90>)
 8000306:	699b      	ldr	r3, [r3, #24]
 8000308:	4a11      	ldr	r2, [pc, #68]	; (8000350 <MX_GPIO_Init+0x90>)
 800030a:	f043 0304 	orr.w	r3, r3, #4
 800030e:	6193      	str	r3, [r2, #24]
 8000310:	4b0f      	ldr	r3, [pc, #60]	; (8000350 <MX_GPIO_Init+0x90>)
 8000312:	699b      	ldr	r3, [r3, #24]
 8000314:	f003 0304 	and.w	r3, r3, #4
 8000318:	607b      	str	r3, [r7, #4]
 800031a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800031c:	2200      	movs	r2, #0
 800031e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000322:	480c      	ldr	r0, [pc, #48]	; (8000354 <MX_GPIO_Init+0x94>)
 8000324:	f000 fc82 	bl	8000c2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000328:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800032c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800032e:	2301      	movs	r3, #1
 8000330:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000332:	2300      	movs	r3, #0
 8000334:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000336:	2302      	movs	r3, #2
 8000338:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800033a:	f107 0310 	add.w	r3, r7, #16
 800033e:	4619      	mov	r1, r3
 8000340:	4804      	ldr	r0, [pc, #16]	; (8000354 <MX_GPIO_Init+0x94>)
 8000342:	f000 faef 	bl	8000924 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000346:	bf00      	nop
 8000348:	3720      	adds	r7, #32
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	40021000 	.word	0x40021000
 8000354:	40011000 	.word	0x40011000

08000358 <blinkLed>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_blinkLed */
void blinkLed(void const * argument)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b082      	sub	sp, #8
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000360:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000364:	4803      	ldr	r0, [pc, #12]	; (8000374 <blinkLed+0x1c>)
 8000366:	f000 fc79 	bl	8000c5c <HAL_GPIO_TogglePin>
	  osDelay(1000);
 800036a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800036e:	f001 fd53 	bl	8001e18 <osDelay>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000372:	e7f5      	b.n	8000360 <blinkLed+0x8>
 8000374:	40011000 	.word	0x40011000

08000378 <sendtext>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_sendtext */
void sendtext(void const * argument)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b08c      	sub	sp, #48	; 0x30
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN sendtext */
   uint8_t message[35] = {'\0'};
 8000380:	2300      	movs	r3, #0
 8000382:	60fb      	str	r3, [r7, #12]
 8000384:	f107 0310 	add.w	r3, r7, #16
 8000388:	221f      	movs	r2, #31
 800038a:	2100      	movs	r1, #0
 800038c:	4618      	mov	r0, r3
 800038e:	f002 feff 	bl	8003190 <memset>
   uint8_t num = 0;
 8000392:	2300      	movs	r3, #0
 8000394:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  /* Infinite loop */
  for(;;)
  {
	  /* USER CODE END WHILE */
	sprintf(message, "Welcome to lab! Counting = %d\r\n", num);
 8000398:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800039c:	f107 030c 	add.w	r3, r7, #12
 80003a0:	490a      	ldr	r1, [pc, #40]	; (80003cc <sendtext+0x54>)
 80003a2:	4618      	mov	r0, r3
 80003a4:	f002 fed4 	bl	8003150 <siprintf>
	HAL_UART_Transmit(&huart1, message, sizeof(message), 100);
 80003a8:	f107 010c 	add.w	r1, r7, #12
 80003ac:	2364      	movs	r3, #100	; 0x64
 80003ae:	2223      	movs	r2, #35	; 0x23
 80003b0:	4807      	ldr	r0, [pc, #28]	; (80003d0 <sendtext+0x58>)
 80003b2:	f001 fb47 	bl	8001a44 <HAL_UART_Transmit>
	num++;
 80003b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80003ba:	3301      	adds	r3, #1
 80003bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    osDelay(1000);
 80003c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003c4:	f001 fd28 	bl	8001e18 <osDelay>
  {
 80003c8:	e7e6      	b.n	8000398 <sendtext+0x20>
 80003ca:	bf00      	nop
 80003cc:	08003bc8 	.word	0x08003bc8
 80003d0:	2000031c 	.word	0x2000031c

080003d4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b082      	sub	sp, #8
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80003e4:	d101      	bne.n	80003ea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80003e6:	f000 f9a1 	bl	800072c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80003ea:	bf00      	nop
 80003ec:	3708      	adds	r7, #8
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bd80      	pop	{r7, pc}

080003f2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003f2:	b480      	push	{r7}
 80003f4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003f6:	b672      	cpsid	i
}
 80003f8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003fa:	e7fe      	b.n	80003fa <Error_Handler+0x8>

080003fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b084      	sub	sp, #16
 8000400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000402:	4b18      	ldr	r3, [pc, #96]	; (8000464 <HAL_MspInit+0x68>)
 8000404:	699b      	ldr	r3, [r3, #24]
 8000406:	4a17      	ldr	r2, [pc, #92]	; (8000464 <HAL_MspInit+0x68>)
 8000408:	f043 0301 	orr.w	r3, r3, #1
 800040c:	6193      	str	r3, [r2, #24]
 800040e:	4b15      	ldr	r3, [pc, #84]	; (8000464 <HAL_MspInit+0x68>)
 8000410:	699b      	ldr	r3, [r3, #24]
 8000412:	f003 0301 	and.w	r3, r3, #1
 8000416:	60bb      	str	r3, [r7, #8]
 8000418:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800041a:	4b12      	ldr	r3, [pc, #72]	; (8000464 <HAL_MspInit+0x68>)
 800041c:	69db      	ldr	r3, [r3, #28]
 800041e:	4a11      	ldr	r2, [pc, #68]	; (8000464 <HAL_MspInit+0x68>)
 8000420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000424:	61d3      	str	r3, [r2, #28]
 8000426:	4b0f      	ldr	r3, [pc, #60]	; (8000464 <HAL_MspInit+0x68>)
 8000428:	69db      	ldr	r3, [r3, #28]
 800042a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800042e:	607b      	str	r3, [r7, #4]
 8000430:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000432:	2200      	movs	r2, #0
 8000434:	210f      	movs	r1, #15
 8000436:	f06f 0001 	mvn.w	r0, #1
 800043a:	f000 fa48 	bl	80008ce <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800043e:	4b0a      	ldr	r3, [pc, #40]	; (8000468 <HAL_MspInit+0x6c>)
 8000440:	685b      	ldr	r3, [r3, #4]
 8000442:	60fb      	str	r3, [r7, #12]
 8000444:	68fb      	ldr	r3, [r7, #12]
 8000446:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800044a:	60fb      	str	r3, [r7, #12]
 800044c:	68fb      	ldr	r3, [r7, #12]
 800044e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000452:	60fb      	str	r3, [r7, #12]
 8000454:	4a04      	ldr	r2, [pc, #16]	; (8000468 <HAL_MspInit+0x6c>)
 8000456:	68fb      	ldr	r3, [r7, #12]
 8000458:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800045a:	bf00      	nop
 800045c:	3710      	adds	r7, #16
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
 8000462:	bf00      	nop
 8000464:	40021000 	.word	0x40021000
 8000468:	40010000 	.word	0x40010000

0800046c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b088      	sub	sp, #32
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000474:	f107 0310 	add.w	r3, r7, #16
 8000478:	2200      	movs	r2, #0
 800047a:	601a      	str	r2, [r3, #0]
 800047c:	605a      	str	r2, [r3, #4]
 800047e:	609a      	str	r2, [r3, #8]
 8000480:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	4a1c      	ldr	r2, [pc, #112]	; (80004f8 <HAL_UART_MspInit+0x8c>)
 8000488:	4293      	cmp	r3, r2
 800048a:	d131      	bne.n	80004f0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800048c:	4b1b      	ldr	r3, [pc, #108]	; (80004fc <HAL_UART_MspInit+0x90>)
 800048e:	699b      	ldr	r3, [r3, #24]
 8000490:	4a1a      	ldr	r2, [pc, #104]	; (80004fc <HAL_UART_MspInit+0x90>)
 8000492:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000496:	6193      	str	r3, [r2, #24]
 8000498:	4b18      	ldr	r3, [pc, #96]	; (80004fc <HAL_UART_MspInit+0x90>)
 800049a:	699b      	ldr	r3, [r3, #24]
 800049c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004a0:	60fb      	str	r3, [r7, #12]
 80004a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004a4:	4b15      	ldr	r3, [pc, #84]	; (80004fc <HAL_UART_MspInit+0x90>)
 80004a6:	699b      	ldr	r3, [r3, #24]
 80004a8:	4a14      	ldr	r2, [pc, #80]	; (80004fc <HAL_UART_MspInit+0x90>)
 80004aa:	f043 0304 	orr.w	r3, r3, #4
 80004ae:	6193      	str	r3, [r2, #24]
 80004b0:	4b12      	ldr	r3, [pc, #72]	; (80004fc <HAL_UART_MspInit+0x90>)
 80004b2:	699b      	ldr	r3, [r3, #24]
 80004b4:	f003 0304 	and.w	r3, r3, #4
 80004b8:	60bb      	str	r3, [r7, #8]
 80004ba:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80004bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80004c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004c2:	2302      	movs	r3, #2
 80004c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004c6:	2303      	movs	r3, #3
 80004c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ca:	f107 0310 	add.w	r3, r7, #16
 80004ce:	4619      	mov	r1, r3
 80004d0:	480b      	ldr	r0, [pc, #44]	; (8000500 <HAL_UART_MspInit+0x94>)
 80004d2:	f000 fa27 	bl	8000924 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80004d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004dc:	2300      	movs	r3, #0
 80004de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e0:	2300      	movs	r3, #0
 80004e2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004e4:	f107 0310 	add.w	r3, r7, #16
 80004e8:	4619      	mov	r1, r3
 80004ea:	4805      	ldr	r0, [pc, #20]	; (8000500 <HAL_UART_MspInit+0x94>)
 80004ec:	f000 fa1a 	bl	8000924 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80004f0:	bf00      	nop
 80004f2:	3720      	adds	r7, #32
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	40013800 	.word	0x40013800
 80004fc:	40021000 	.word	0x40021000
 8000500:	40010800 	.word	0x40010800

08000504 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b08e      	sub	sp, #56	; 0x38
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800050c:	2300      	movs	r3, #0
 800050e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000510:	2300      	movs	r3, #0
 8000512:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000514:	2300      	movs	r3, #0
 8000516:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800051a:	4b34      	ldr	r3, [pc, #208]	; (80005ec <HAL_InitTick+0xe8>)
 800051c:	69db      	ldr	r3, [r3, #28]
 800051e:	4a33      	ldr	r2, [pc, #204]	; (80005ec <HAL_InitTick+0xe8>)
 8000520:	f043 0301 	orr.w	r3, r3, #1
 8000524:	61d3      	str	r3, [r2, #28]
 8000526:	4b31      	ldr	r3, [pc, #196]	; (80005ec <HAL_InitTick+0xe8>)
 8000528:	69db      	ldr	r3, [r3, #28]
 800052a:	f003 0301 	and.w	r3, r3, #1
 800052e:	60fb      	str	r3, [r7, #12]
 8000530:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000532:	f107 0210 	add.w	r2, r7, #16
 8000536:	f107 0314 	add.w	r3, r7, #20
 800053a:	4611      	mov	r1, r2
 800053c:	4618      	mov	r0, r3
 800053e:	f000 ff99 	bl	8001474 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000542:	6a3b      	ldr	r3, [r7, #32]
 8000544:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000548:	2b00      	cmp	r3, #0
 800054a:	d103      	bne.n	8000554 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800054c:	f000 ff6a 	bl	8001424 <HAL_RCC_GetPCLK1Freq>
 8000550:	6378      	str	r0, [r7, #52]	; 0x34
 8000552:	e004      	b.n	800055e <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000554:	f000 ff66 	bl	8001424 <HAL_RCC_GetPCLK1Freq>
 8000558:	4603      	mov	r3, r0
 800055a:	005b      	lsls	r3, r3, #1
 800055c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800055e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000560:	4a23      	ldr	r2, [pc, #140]	; (80005f0 <HAL_InitTick+0xec>)
 8000562:	fba2 2303 	umull	r2, r3, r2, r3
 8000566:	0c9b      	lsrs	r3, r3, #18
 8000568:	3b01      	subs	r3, #1
 800056a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800056c:	4b21      	ldr	r3, [pc, #132]	; (80005f4 <HAL_InitTick+0xf0>)
 800056e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000572:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000574:	4b1f      	ldr	r3, [pc, #124]	; (80005f4 <HAL_InitTick+0xf0>)
 8000576:	f240 32e7 	movw	r2, #999	; 0x3e7
 800057a:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800057c:	4a1d      	ldr	r2, [pc, #116]	; (80005f4 <HAL_InitTick+0xf0>)
 800057e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000580:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000582:	4b1c      	ldr	r3, [pc, #112]	; (80005f4 <HAL_InitTick+0xf0>)
 8000584:	2200      	movs	r2, #0
 8000586:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000588:	4b1a      	ldr	r3, [pc, #104]	; (80005f4 <HAL_InitTick+0xf0>)
 800058a:	2200      	movs	r2, #0
 800058c:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800058e:	4b19      	ldr	r3, [pc, #100]	; (80005f4 <HAL_InitTick+0xf0>)
 8000590:	2200      	movs	r2, #0
 8000592:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8000594:	4817      	ldr	r0, [pc, #92]	; (80005f4 <HAL_InitTick+0xf0>)
 8000596:	f000 ffbb 	bl	8001510 <HAL_TIM_Base_Init>
 800059a:	4603      	mov	r3, r0
 800059c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80005a0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d11b      	bne.n	80005e0 <HAL_InitTick+0xdc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 80005a8:	4812      	ldr	r0, [pc, #72]	; (80005f4 <HAL_InitTick+0xf0>)
 80005aa:	f001 f809 	bl	80015c0 <HAL_TIM_Base_Start_IT>
 80005ae:	4603      	mov	r3, r0
 80005b0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80005b4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d111      	bne.n	80005e0 <HAL_InitTick+0xdc>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80005bc:	201c      	movs	r0, #28
 80005be:	f000 f9a2 	bl	8000906 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	2b0f      	cmp	r3, #15
 80005c6:	d808      	bhi.n	80005da <HAL_InitTick+0xd6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80005c8:	2200      	movs	r2, #0
 80005ca:	6879      	ldr	r1, [r7, #4]
 80005cc:	201c      	movs	r0, #28
 80005ce:	f000 f97e 	bl	80008ce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80005d2:	4a09      	ldr	r2, [pc, #36]	; (80005f8 <HAL_InitTick+0xf4>)
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	6013      	str	r3, [r2, #0]
 80005d8:	e002      	b.n	80005e0 <HAL_InitTick+0xdc>
      }
      else
      {
        status = HAL_ERROR;
 80005da:	2301      	movs	r3, #1
 80005dc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80005e0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	3738      	adds	r7, #56	; 0x38
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	40021000 	.word	0x40021000
 80005f0:	431bde83 	.word	0x431bde83
 80005f4:	2000036c 	.word	0x2000036c
 80005f8:	20000004 	.word	0x20000004

080005fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000600:	e7fe      	b.n	8000600 <NMI_Handler+0x4>

08000602 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000602:	b480      	push	{r7}
 8000604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000606:	e7fe      	b.n	8000606 <HardFault_Handler+0x4>

08000608 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800060c:	e7fe      	b.n	800060c <MemManage_Handler+0x4>

0800060e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800060e:	b480      	push	{r7}
 8000610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000612:	e7fe      	b.n	8000612 <BusFault_Handler+0x4>

08000614 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000618:	e7fe      	b.n	8000618 <UsageFault_Handler+0x4>

0800061a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800061a:	b480      	push	{r7}
 800061c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800061e:	bf00      	nop
 8000620:	46bd      	mov	sp, r7
 8000622:	bc80      	pop	{r7}
 8000624:	4770      	bx	lr
	...

08000628 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800062c:	4802      	ldr	r0, [pc, #8]	; (8000638 <TIM2_IRQHandler+0x10>)
 800062e:	f001 f819 	bl	8001664 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000632:	bf00      	nop
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	2000036c 	.word	0x2000036c

0800063c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b086      	sub	sp, #24
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000644:	4a14      	ldr	r2, [pc, #80]	; (8000698 <_sbrk+0x5c>)
 8000646:	4b15      	ldr	r3, [pc, #84]	; (800069c <_sbrk+0x60>)
 8000648:	1ad3      	subs	r3, r2, r3
 800064a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800064c:	697b      	ldr	r3, [r7, #20]
 800064e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000650:	4b13      	ldr	r3, [pc, #76]	; (80006a0 <_sbrk+0x64>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d102      	bne.n	800065e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000658:	4b11      	ldr	r3, [pc, #68]	; (80006a0 <_sbrk+0x64>)
 800065a:	4a12      	ldr	r2, [pc, #72]	; (80006a4 <_sbrk+0x68>)
 800065c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800065e:	4b10      	ldr	r3, [pc, #64]	; (80006a0 <_sbrk+0x64>)
 8000660:	681a      	ldr	r2, [r3, #0]
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	4413      	add	r3, r2
 8000666:	693a      	ldr	r2, [r7, #16]
 8000668:	429a      	cmp	r2, r3
 800066a:	d207      	bcs.n	800067c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800066c:	f002 fdee 	bl	800324c <__errno>
 8000670:	4603      	mov	r3, r0
 8000672:	220c      	movs	r2, #12
 8000674:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000676:	f04f 33ff 	mov.w	r3, #4294967295
 800067a:	e009      	b.n	8000690 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800067c:	4b08      	ldr	r3, [pc, #32]	; (80006a0 <_sbrk+0x64>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000682:	4b07      	ldr	r3, [pc, #28]	; (80006a0 <_sbrk+0x64>)
 8000684:	681a      	ldr	r2, [r3, #0]
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	4413      	add	r3, r2
 800068a:	4a05      	ldr	r2, [pc, #20]	; (80006a0 <_sbrk+0x64>)
 800068c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800068e:	68fb      	ldr	r3, [r7, #12]
}
 8000690:	4618      	mov	r0, r3
 8000692:	3718      	adds	r7, #24
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	20005000 	.word	0x20005000
 800069c:	00000400 	.word	0x00000400
 80006a0:	200003b4 	.word	0x200003b4
 80006a4:	20001250 	.word	0x20001250

080006a8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006ac:	bf00      	nop
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bc80      	pop	{r7}
 80006b2:	4770      	bx	lr

080006b4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80006b4:	f7ff fff8 	bl	80006a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006b8:	480b      	ldr	r0, [pc, #44]	; (80006e8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80006ba:	490c      	ldr	r1, [pc, #48]	; (80006ec <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80006bc:	4a0c      	ldr	r2, [pc, #48]	; (80006f0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80006be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006c0:	e002      	b.n	80006c8 <LoopCopyDataInit>

080006c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006c6:	3304      	adds	r3, #4

080006c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006cc:	d3f9      	bcc.n	80006c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ce:	4a09      	ldr	r2, [pc, #36]	; (80006f4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80006d0:	4c09      	ldr	r4, [pc, #36]	; (80006f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80006d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006d4:	e001      	b.n	80006da <LoopFillZerobss>

080006d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006d8:	3204      	adds	r2, #4

080006da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006dc:	d3fb      	bcc.n	80006d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006de:	f002 fdbb 	bl	8003258 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006e2:	f7ff fd4d 	bl	8000180 <main>
  bx lr
 80006e6:	4770      	bx	lr
  ldr r0, =_sdata
 80006e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006ec:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80006f0:	08003c58 	.word	0x08003c58
  ldr r2, =_sbss
 80006f4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80006f8:	20001250 	.word	0x20001250

080006fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006fc:	e7fe      	b.n	80006fc <ADC1_2_IRQHandler>
	...

08000700 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000704:	4b08      	ldr	r3, [pc, #32]	; (8000728 <HAL_Init+0x28>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a07      	ldr	r2, [pc, #28]	; (8000728 <HAL_Init+0x28>)
 800070a:	f043 0310 	orr.w	r3, r3, #16
 800070e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000710:	2003      	movs	r0, #3
 8000712:	f000 f8d1 	bl	80008b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000716:	200f      	movs	r0, #15
 8000718:	f7ff fef4 	bl	8000504 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800071c:	f7ff fe6e 	bl	80003fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000720:	2300      	movs	r3, #0
}
 8000722:	4618      	mov	r0, r3
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40022000 	.word	0x40022000

0800072c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000730:	4b05      	ldr	r3, [pc, #20]	; (8000748 <HAL_IncTick+0x1c>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	461a      	mov	r2, r3
 8000736:	4b05      	ldr	r3, [pc, #20]	; (800074c <HAL_IncTick+0x20>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	4413      	add	r3, r2
 800073c:	4a03      	ldr	r2, [pc, #12]	; (800074c <HAL_IncTick+0x20>)
 800073e:	6013      	str	r3, [r2, #0]
}
 8000740:	bf00      	nop
 8000742:	46bd      	mov	sp, r7
 8000744:	bc80      	pop	{r7}
 8000746:	4770      	bx	lr
 8000748:	20000008 	.word	0x20000008
 800074c:	200003b8 	.word	0x200003b8

08000750 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  return uwTick;
 8000754:	4b02      	ldr	r3, [pc, #8]	; (8000760 <HAL_GetTick+0x10>)
 8000756:	681b      	ldr	r3, [r3, #0]
}
 8000758:	4618      	mov	r0, r3
 800075a:	46bd      	mov	sp, r7
 800075c:	bc80      	pop	{r7}
 800075e:	4770      	bx	lr
 8000760:	200003b8 	.word	0x200003b8

08000764 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000764:	b480      	push	{r7}
 8000766:	b085      	sub	sp, #20
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	f003 0307 	and.w	r3, r3, #7
 8000772:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000774:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000776:	68db      	ldr	r3, [r3, #12]
 8000778:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800077a:	68ba      	ldr	r2, [r7, #8]
 800077c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000780:	4013      	ands	r3, r2
 8000782:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000788:	68bb      	ldr	r3, [r7, #8]
 800078a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800078c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000790:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000794:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000796:	4a04      	ldr	r2, [pc, #16]	; (80007a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000798:	68bb      	ldr	r3, [r7, #8]
 800079a:	60d3      	str	r3, [r2, #12]
}
 800079c:	bf00      	nop
 800079e:	3714      	adds	r7, #20
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bc80      	pop	{r7}
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	e000ed00 	.word	0xe000ed00

080007ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007b0:	4b04      	ldr	r3, [pc, #16]	; (80007c4 <__NVIC_GetPriorityGrouping+0x18>)
 80007b2:	68db      	ldr	r3, [r3, #12]
 80007b4:	0a1b      	lsrs	r3, r3, #8
 80007b6:	f003 0307 	and.w	r3, r3, #7
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	46bd      	mov	sp, r7
 80007be:	bc80      	pop	{r7}
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	e000ed00 	.word	0xe000ed00

080007c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	4603      	mov	r3, r0
 80007d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	db0b      	blt.n	80007f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007da:	79fb      	ldrb	r3, [r7, #7]
 80007dc:	f003 021f 	and.w	r2, r3, #31
 80007e0:	4906      	ldr	r1, [pc, #24]	; (80007fc <__NVIC_EnableIRQ+0x34>)
 80007e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e6:	095b      	lsrs	r3, r3, #5
 80007e8:	2001      	movs	r0, #1
 80007ea:	fa00 f202 	lsl.w	r2, r0, r2
 80007ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007f2:	bf00      	nop
 80007f4:	370c      	adds	r7, #12
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bc80      	pop	{r7}
 80007fa:	4770      	bx	lr
 80007fc:	e000e100 	.word	0xe000e100

08000800 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
 8000806:	4603      	mov	r3, r0
 8000808:	6039      	str	r1, [r7, #0]
 800080a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800080c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000810:	2b00      	cmp	r3, #0
 8000812:	db0a      	blt.n	800082a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	b2da      	uxtb	r2, r3
 8000818:	490c      	ldr	r1, [pc, #48]	; (800084c <__NVIC_SetPriority+0x4c>)
 800081a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800081e:	0112      	lsls	r2, r2, #4
 8000820:	b2d2      	uxtb	r2, r2
 8000822:	440b      	add	r3, r1
 8000824:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000828:	e00a      	b.n	8000840 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	b2da      	uxtb	r2, r3
 800082e:	4908      	ldr	r1, [pc, #32]	; (8000850 <__NVIC_SetPriority+0x50>)
 8000830:	79fb      	ldrb	r3, [r7, #7]
 8000832:	f003 030f 	and.w	r3, r3, #15
 8000836:	3b04      	subs	r3, #4
 8000838:	0112      	lsls	r2, r2, #4
 800083a:	b2d2      	uxtb	r2, r2
 800083c:	440b      	add	r3, r1
 800083e:	761a      	strb	r2, [r3, #24]
}
 8000840:	bf00      	nop
 8000842:	370c      	adds	r7, #12
 8000844:	46bd      	mov	sp, r7
 8000846:	bc80      	pop	{r7}
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	e000e100 	.word	0xe000e100
 8000850:	e000ed00 	.word	0xe000ed00

08000854 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000854:	b480      	push	{r7}
 8000856:	b089      	sub	sp, #36	; 0x24
 8000858:	af00      	add	r7, sp, #0
 800085a:	60f8      	str	r0, [r7, #12]
 800085c:	60b9      	str	r1, [r7, #8]
 800085e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	f003 0307 	and.w	r3, r3, #7
 8000866:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000868:	69fb      	ldr	r3, [r7, #28]
 800086a:	f1c3 0307 	rsb	r3, r3, #7
 800086e:	2b04      	cmp	r3, #4
 8000870:	bf28      	it	cs
 8000872:	2304      	movcs	r3, #4
 8000874:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000876:	69fb      	ldr	r3, [r7, #28]
 8000878:	3304      	adds	r3, #4
 800087a:	2b06      	cmp	r3, #6
 800087c:	d902      	bls.n	8000884 <NVIC_EncodePriority+0x30>
 800087e:	69fb      	ldr	r3, [r7, #28]
 8000880:	3b03      	subs	r3, #3
 8000882:	e000      	b.n	8000886 <NVIC_EncodePriority+0x32>
 8000884:	2300      	movs	r3, #0
 8000886:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000888:	f04f 32ff 	mov.w	r2, #4294967295
 800088c:	69bb      	ldr	r3, [r7, #24]
 800088e:	fa02 f303 	lsl.w	r3, r2, r3
 8000892:	43da      	mvns	r2, r3
 8000894:	68bb      	ldr	r3, [r7, #8]
 8000896:	401a      	ands	r2, r3
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800089c:	f04f 31ff 	mov.w	r1, #4294967295
 80008a0:	697b      	ldr	r3, [r7, #20]
 80008a2:	fa01 f303 	lsl.w	r3, r1, r3
 80008a6:	43d9      	mvns	r1, r3
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008ac:	4313      	orrs	r3, r2
         );
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	3724      	adds	r7, #36	; 0x24
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bc80      	pop	{r7}
 80008b6:	4770      	bx	lr

080008b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008c0:	6878      	ldr	r0, [r7, #4]
 80008c2:	f7ff ff4f 	bl	8000764 <__NVIC_SetPriorityGrouping>
}
 80008c6:	bf00      	nop
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}

080008ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008ce:	b580      	push	{r7, lr}
 80008d0:	b086      	sub	sp, #24
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	4603      	mov	r3, r0
 80008d6:	60b9      	str	r1, [r7, #8]
 80008d8:	607a      	str	r2, [r7, #4]
 80008da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008dc:	2300      	movs	r3, #0
 80008de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008e0:	f7ff ff64 	bl	80007ac <__NVIC_GetPriorityGrouping>
 80008e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008e6:	687a      	ldr	r2, [r7, #4]
 80008e8:	68b9      	ldr	r1, [r7, #8]
 80008ea:	6978      	ldr	r0, [r7, #20]
 80008ec:	f7ff ffb2 	bl	8000854 <NVIC_EncodePriority>
 80008f0:	4602      	mov	r2, r0
 80008f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008f6:	4611      	mov	r1, r2
 80008f8:	4618      	mov	r0, r3
 80008fa:	f7ff ff81 	bl	8000800 <__NVIC_SetPriority>
}
 80008fe:	bf00      	nop
 8000900:	3718      	adds	r7, #24
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}

08000906 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000906:	b580      	push	{r7, lr}
 8000908:	b082      	sub	sp, #8
 800090a:	af00      	add	r7, sp, #0
 800090c:	4603      	mov	r3, r0
 800090e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000910:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000914:	4618      	mov	r0, r3
 8000916:	f7ff ff57 	bl	80007c8 <__NVIC_EnableIRQ>
}
 800091a:	bf00      	nop
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
	...

08000924 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000924:	b480      	push	{r7}
 8000926:	b08b      	sub	sp, #44	; 0x2c
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
 800092c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800092e:	2300      	movs	r3, #0
 8000930:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000932:	2300      	movs	r3, #0
 8000934:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000936:	e169      	b.n	8000c0c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000938:	2201      	movs	r2, #1
 800093a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800093c:	fa02 f303 	lsl.w	r3, r2, r3
 8000940:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	69fa      	ldr	r2, [r7, #28]
 8000948:	4013      	ands	r3, r2
 800094a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800094c:	69ba      	ldr	r2, [r7, #24]
 800094e:	69fb      	ldr	r3, [r7, #28]
 8000950:	429a      	cmp	r2, r3
 8000952:	f040 8158 	bne.w	8000c06 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	685b      	ldr	r3, [r3, #4]
 800095a:	4a9a      	ldr	r2, [pc, #616]	; (8000bc4 <HAL_GPIO_Init+0x2a0>)
 800095c:	4293      	cmp	r3, r2
 800095e:	d05e      	beq.n	8000a1e <HAL_GPIO_Init+0xfa>
 8000960:	4a98      	ldr	r2, [pc, #608]	; (8000bc4 <HAL_GPIO_Init+0x2a0>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d875      	bhi.n	8000a52 <HAL_GPIO_Init+0x12e>
 8000966:	4a98      	ldr	r2, [pc, #608]	; (8000bc8 <HAL_GPIO_Init+0x2a4>)
 8000968:	4293      	cmp	r3, r2
 800096a:	d058      	beq.n	8000a1e <HAL_GPIO_Init+0xfa>
 800096c:	4a96      	ldr	r2, [pc, #600]	; (8000bc8 <HAL_GPIO_Init+0x2a4>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d86f      	bhi.n	8000a52 <HAL_GPIO_Init+0x12e>
 8000972:	4a96      	ldr	r2, [pc, #600]	; (8000bcc <HAL_GPIO_Init+0x2a8>)
 8000974:	4293      	cmp	r3, r2
 8000976:	d052      	beq.n	8000a1e <HAL_GPIO_Init+0xfa>
 8000978:	4a94      	ldr	r2, [pc, #592]	; (8000bcc <HAL_GPIO_Init+0x2a8>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d869      	bhi.n	8000a52 <HAL_GPIO_Init+0x12e>
 800097e:	4a94      	ldr	r2, [pc, #592]	; (8000bd0 <HAL_GPIO_Init+0x2ac>)
 8000980:	4293      	cmp	r3, r2
 8000982:	d04c      	beq.n	8000a1e <HAL_GPIO_Init+0xfa>
 8000984:	4a92      	ldr	r2, [pc, #584]	; (8000bd0 <HAL_GPIO_Init+0x2ac>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d863      	bhi.n	8000a52 <HAL_GPIO_Init+0x12e>
 800098a:	4a92      	ldr	r2, [pc, #584]	; (8000bd4 <HAL_GPIO_Init+0x2b0>)
 800098c:	4293      	cmp	r3, r2
 800098e:	d046      	beq.n	8000a1e <HAL_GPIO_Init+0xfa>
 8000990:	4a90      	ldr	r2, [pc, #576]	; (8000bd4 <HAL_GPIO_Init+0x2b0>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d85d      	bhi.n	8000a52 <HAL_GPIO_Init+0x12e>
 8000996:	2b12      	cmp	r3, #18
 8000998:	d82a      	bhi.n	80009f0 <HAL_GPIO_Init+0xcc>
 800099a:	2b12      	cmp	r3, #18
 800099c:	d859      	bhi.n	8000a52 <HAL_GPIO_Init+0x12e>
 800099e:	a201      	add	r2, pc, #4	; (adr r2, 80009a4 <HAL_GPIO_Init+0x80>)
 80009a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009a4:	08000a1f 	.word	0x08000a1f
 80009a8:	080009f9 	.word	0x080009f9
 80009ac:	08000a0b 	.word	0x08000a0b
 80009b0:	08000a4d 	.word	0x08000a4d
 80009b4:	08000a53 	.word	0x08000a53
 80009b8:	08000a53 	.word	0x08000a53
 80009bc:	08000a53 	.word	0x08000a53
 80009c0:	08000a53 	.word	0x08000a53
 80009c4:	08000a53 	.word	0x08000a53
 80009c8:	08000a53 	.word	0x08000a53
 80009cc:	08000a53 	.word	0x08000a53
 80009d0:	08000a53 	.word	0x08000a53
 80009d4:	08000a53 	.word	0x08000a53
 80009d8:	08000a53 	.word	0x08000a53
 80009dc:	08000a53 	.word	0x08000a53
 80009e0:	08000a53 	.word	0x08000a53
 80009e4:	08000a53 	.word	0x08000a53
 80009e8:	08000a01 	.word	0x08000a01
 80009ec:	08000a15 	.word	0x08000a15
 80009f0:	4a79      	ldr	r2, [pc, #484]	; (8000bd8 <HAL_GPIO_Init+0x2b4>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d013      	beq.n	8000a1e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80009f6:	e02c      	b.n	8000a52 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	68db      	ldr	r3, [r3, #12]
 80009fc:	623b      	str	r3, [r7, #32]
          break;
 80009fe:	e029      	b.n	8000a54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	68db      	ldr	r3, [r3, #12]
 8000a04:	3304      	adds	r3, #4
 8000a06:	623b      	str	r3, [r7, #32]
          break;
 8000a08:	e024      	b.n	8000a54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	68db      	ldr	r3, [r3, #12]
 8000a0e:	3308      	adds	r3, #8
 8000a10:	623b      	str	r3, [r7, #32]
          break;
 8000a12:	e01f      	b.n	8000a54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	68db      	ldr	r3, [r3, #12]
 8000a18:	330c      	adds	r3, #12
 8000a1a:	623b      	str	r3, [r7, #32]
          break;
 8000a1c:	e01a      	b.n	8000a54 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	689b      	ldr	r3, [r3, #8]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d102      	bne.n	8000a2c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a26:	2304      	movs	r3, #4
 8000a28:	623b      	str	r3, [r7, #32]
          break;
 8000a2a:	e013      	b.n	8000a54 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	689b      	ldr	r3, [r3, #8]
 8000a30:	2b01      	cmp	r3, #1
 8000a32:	d105      	bne.n	8000a40 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a34:	2308      	movs	r3, #8
 8000a36:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	69fa      	ldr	r2, [r7, #28]
 8000a3c:	611a      	str	r2, [r3, #16]
          break;
 8000a3e:	e009      	b.n	8000a54 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a40:	2308      	movs	r3, #8
 8000a42:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	69fa      	ldr	r2, [r7, #28]
 8000a48:	615a      	str	r2, [r3, #20]
          break;
 8000a4a:	e003      	b.n	8000a54 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	623b      	str	r3, [r7, #32]
          break;
 8000a50:	e000      	b.n	8000a54 <HAL_GPIO_Init+0x130>
          break;
 8000a52:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a54:	69bb      	ldr	r3, [r7, #24]
 8000a56:	2bff      	cmp	r3, #255	; 0xff
 8000a58:	d801      	bhi.n	8000a5e <HAL_GPIO_Init+0x13a>
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	e001      	b.n	8000a62 <HAL_GPIO_Init+0x13e>
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	3304      	adds	r3, #4
 8000a62:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a64:	69bb      	ldr	r3, [r7, #24]
 8000a66:	2bff      	cmp	r3, #255	; 0xff
 8000a68:	d802      	bhi.n	8000a70 <HAL_GPIO_Init+0x14c>
 8000a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a6c:	009b      	lsls	r3, r3, #2
 8000a6e:	e002      	b.n	8000a76 <HAL_GPIO_Init+0x152>
 8000a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a72:	3b08      	subs	r3, #8
 8000a74:	009b      	lsls	r3, r3, #2
 8000a76:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	681a      	ldr	r2, [r3, #0]
 8000a7c:	210f      	movs	r1, #15
 8000a7e:	693b      	ldr	r3, [r7, #16]
 8000a80:	fa01 f303 	lsl.w	r3, r1, r3
 8000a84:	43db      	mvns	r3, r3
 8000a86:	401a      	ands	r2, r3
 8000a88:	6a39      	ldr	r1, [r7, #32]
 8000a8a:	693b      	ldr	r3, [r7, #16]
 8000a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a90:	431a      	orrs	r2, r3
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	685b      	ldr	r3, [r3, #4]
 8000a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	f000 80b1 	beq.w	8000c06 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000aa4:	4b4d      	ldr	r3, [pc, #308]	; (8000bdc <HAL_GPIO_Init+0x2b8>)
 8000aa6:	699b      	ldr	r3, [r3, #24]
 8000aa8:	4a4c      	ldr	r2, [pc, #304]	; (8000bdc <HAL_GPIO_Init+0x2b8>)
 8000aaa:	f043 0301 	orr.w	r3, r3, #1
 8000aae:	6193      	str	r3, [r2, #24]
 8000ab0:	4b4a      	ldr	r3, [pc, #296]	; (8000bdc <HAL_GPIO_Init+0x2b8>)
 8000ab2:	699b      	ldr	r3, [r3, #24]
 8000ab4:	f003 0301 	and.w	r3, r3, #1
 8000ab8:	60bb      	str	r3, [r7, #8]
 8000aba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000abc:	4a48      	ldr	r2, [pc, #288]	; (8000be0 <HAL_GPIO_Init+0x2bc>)
 8000abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ac0:	089b      	lsrs	r3, r3, #2
 8000ac2:	3302      	adds	r3, #2
 8000ac4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ac8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000acc:	f003 0303 	and.w	r3, r3, #3
 8000ad0:	009b      	lsls	r3, r3, #2
 8000ad2:	220f      	movs	r2, #15
 8000ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad8:	43db      	mvns	r3, r3
 8000ada:	68fa      	ldr	r2, [r7, #12]
 8000adc:	4013      	ands	r3, r2
 8000ade:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	4a40      	ldr	r2, [pc, #256]	; (8000be4 <HAL_GPIO_Init+0x2c0>)
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	d013      	beq.n	8000b10 <HAL_GPIO_Init+0x1ec>
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	4a3f      	ldr	r2, [pc, #252]	; (8000be8 <HAL_GPIO_Init+0x2c4>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d00d      	beq.n	8000b0c <HAL_GPIO_Init+0x1e8>
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	4a3e      	ldr	r2, [pc, #248]	; (8000bec <HAL_GPIO_Init+0x2c8>)
 8000af4:	4293      	cmp	r3, r2
 8000af6:	d007      	beq.n	8000b08 <HAL_GPIO_Init+0x1e4>
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	4a3d      	ldr	r2, [pc, #244]	; (8000bf0 <HAL_GPIO_Init+0x2cc>)
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d101      	bne.n	8000b04 <HAL_GPIO_Init+0x1e0>
 8000b00:	2303      	movs	r3, #3
 8000b02:	e006      	b.n	8000b12 <HAL_GPIO_Init+0x1ee>
 8000b04:	2304      	movs	r3, #4
 8000b06:	e004      	b.n	8000b12 <HAL_GPIO_Init+0x1ee>
 8000b08:	2302      	movs	r3, #2
 8000b0a:	e002      	b.n	8000b12 <HAL_GPIO_Init+0x1ee>
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	e000      	b.n	8000b12 <HAL_GPIO_Init+0x1ee>
 8000b10:	2300      	movs	r3, #0
 8000b12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b14:	f002 0203 	and.w	r2, r2, #3
 8000b18:	0092      	lsls	r2, r2, #2
 8000b1a:	4093      	lsls	r3, r2
 8000b1c:	68fa      	ldr	r2, [r7, #12]
 8000b1e:	4313      	orrs	r3, r2
 8000b20:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b22:	492f      	ldr	r1, [pc, #188]	; (8000be0 <HAL_GPIO_Init+0x2bc>)
 8000b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b26:	089b      	lsrs	r3, r3, #2
 8000b28:	3302      	adds	r3, #2
 8000b2a:	68fa      	ldr	r2, [r7, #12]
 8000b2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d006      	beq.n	8000b4a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b3c:	4b2d      	ldr	r3, [pc, #180]	; (8000bf4 <HAL_GPIO_Init+0x2d0>)
 8000b3e:	689a      	ldr	r2, [r3, #8]
 8000b40:	492c      	ldr	r1, [pc, #176]	; (8000bf4 <HAL_GPIO_Init+0x2d0>)
 8000b42:	69bb      	ldr	r3, [r7, #24]
 8000b44:	4313      	orrs	r3, r2
 8000b46:	608b      	str	r3, [r1, #8]
 8000b48:	e006      	b.n	8000b58 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b4a:	4b2a      	ldr	r3, [pc, #168]	; (8000bf4 <HAL_GPIO_Init+0x2d0>)
 8000b4c:	689a      	ldr	r2, [r3, #8]
 8000b4e:	69bb      	ldr	r3, [r7, #24]
 8000b50:	43db      	mvns	r3, r3
 8000b52:	4928      	ldr	r1, [pc, #160]	; (8000bf4 <HAL_GPIO_Init+0x2d0>)
 8000b54:	4013      	ands	r3, r2
 8000b56:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	685b      	ldr	r3, [r3, #4]
 8000b5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d006      	beq.n	8000b72 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b64:	4b23      	ldr	r3, [pc, #140]	; (8000bf4 <HAL_GPIO_Init+0x2d0>)
 8000b66:	68da      	ldr	r2, [r3, #12]
 8000b68:	4922      	ldr	r1, [pc, #136]	; (8000bf4 <HAL_GPIO_Init+0x2d0>)
 8000b6a:	69bb      	ldr	r3, [r7, #24]
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	60cb      	str	r3, [r1, #12]
 8000b70:	e006      	b.n	8000b80 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b72:	4b20      	ldr	r3, [pc, #128]	; (8000bf4 <HAL_GPIO_Init+0x2d0>)
 8000b74:	68da      	ldr	r2, [r3, #12]
 8000b76:	69bb      	ldr	r3, [r7, #24]
 8000b78:	43db      	mvns	r3, r3
 8000b7a:	491e      	ldr	r1, [pc, #120]	; (8000bf4 <HAL_GPIO_Init+0x2d0>)
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d006      	beq.n	8000b9a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000b8c:	4b19      	ldr	r3, [pc, #100]	; (8000bf4 <HAL_GPIO_Init+0x2d0>)
 8000b8e:	685a      	ldr	r2, [r3, #4]
 8000b90:	4918      	ldr	r1, [pc, #96]	; (8000bf4 <HAL_GPIO_Init+0x2d0>)
 8000b92:	69bb      	ldr	r3, [r7, #24]
 8000b94:	4313      	orrs	r3, r2
 8000b96:	604b      	str	r3, [r1, #4]
 8000b98:	e006      	b.n	8000ba8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000b9a:	4b16      	ldr	r3, [pc, #88]	; (8000bf4 <HAL_GPIO_Init+0x2d0>)
 8000b9c:	685a      	ldr	r2, [r3, #4]
 8000b9e:	69bb      	ldr	r3, [r7, #24]
 8000ba0:	43db      	mvns	r3, r3
 8000ba2:	4914      	ldr	r1, [pc, #80]	; (8000bf4 <HAL_GPIO_Init+0x2d0>)
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d021      	beq.n	8000bf8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000bb4:	4b0f      	ldr	r3, [pc, #60]	; (8000bf4 <HAL_GPIO_Init+0x2d0>)
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	490e      	ldr	r1, [pc, #56]	; (8000bf4 <HAL_GPIO_Init+0x2d0>)
 8000bba:	69bb      	ldr	r3, [r7, #24]
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	600b      	str	r3, [r1, #0]
 8000bc0:	e021      	b.n	8000c06 <HAL_GPIO_Init+0x2e2>
 8000bc2:	bf00      	nop
 8000bc4:	10320000 	.word	0x10320000
 8000bc8:	10310000 	.word	0x10310000
 8000bcc:	10220000 	.word	0x10220000
 8000bd0:	10210000 	.word	0x10210000
 8000bd4:	10120000 	.word	0x10120000
 8000bd8:	10110000 	.word	0x10110000
 8000bdc:	40021000 	.word	0x40021000
 8000be0:	40010000 	.word	0x40010000
 8000be4:	40010800 	.word	0x40010800
 8000be8:	40010c00 	.word	0x40010c00
 8000bec:	40011000 	.word	0x40011000
 8000bf0:	40011400 	.word	0x40011400
 8000bf4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000bf8:	4b0b      	ldr	r3, [pc, #44]	; (8000c28 <HAL_GPIO_Init+0x304>)
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	69bb      	ldr	r3, [r7, #24]
 8000bfe:	43db      	mvns	r3, r3
 8000c00:	4909      	ldr	r1, [pc, #36]	; (8000c28 <HAL_GPIO_Init+0x304>)
 8000c02:	4013      	ands	r3, r2
 8000c04:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c08:	3301      	adds	r3, #1
 8000c0a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c12:	fa22 f303 	lsr.w	r3, r2, r3
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	f47f ae8e 	bne.w	8000938 <HAL_GPIO_Init+0x14>
  }
}
 8000c1c:	bf00      	nop
 8000c1e:	bf00      	nop
 8000c20:	372c      	adds	r7, #44	; 0x2c
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bc80      	pop	{r7}
 8000c26:	4770      	bx	lr
 8000c28:	40010400 	.word	0x40010400

08000c2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	460b      	mov	r3, r1
 8000c36:	807b      	strh	r3, [r7, #2]
 8000c38:	4613      	mov	r3, r2
 8000c3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c3c:	787b      	ldrb	r3, [r7, #1]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d003      	beq.n	8000c4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c42:	887a      	ldrh	r2, [r7, #2]
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000c48:	e003      	b.n	8000c52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c4a:	887b      	ldrh	r3, [r7, #2]
 8000c4c:	041a      	lsls	r2, r3, #16
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	611a      	str	r2, [r3, #16]
}
 8000c52:	bf00      	nop
 8000c54:	370c      	adds	r7, #12
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bc80      	pop	{r7}
 8000c5a:	4770      	bx	lr

08000c5c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b085      	sub	sp, #20
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
 8000c64:	460b      	mov	r3, r1
 8000c66:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	68db      	ldr	r3, [r3, #12]
 8000c6c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000c6e:	887a      	ldrh	r2, [r7, #2]
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	4013      	ands	r3, r2
 8000c74:	041a      	lsls	r2, r3, #16
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	43d9      	mvns	r1, r3
 8000c7a:	887b      	ldrh	r3, [r7, #2]
 8000c7c:	400b      	ands	r3, r1
 8000c7e:	431a      	orrs	r2, r3
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	611a      	str	r2, [r3, #16]
}
 8000c84:	bf00      	nop
 8000c86:	3714      	adds	r7, #20
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bc80      	pop	{r7}
 8000c8c:	4770      	bx	lr
	...

08000c90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b086      	sub	sp, #24
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d101      	bne.n	8000ca2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	e272      	b.n	8001188 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f003 0301 	and.w	r3, r3, #1
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	f000 8087 	beq.w	8000dbe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000cb0:	4b92      	ldr	r3, [pc, #584]	; (8000efc <HAL_RCC_OscConfig+0x26c>)
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	f003 030c 	and.w	r3, r3, #12
 8000cb8:	2b04      	cmp	r3, #4
 8000cba:	d00c      	beq.n	8000cd6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000cbc:	4b8f      	ldr	r3, [pc, #572]	; (8000efc <HAL_RCC_OscConfig+0x26c>)
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	f003 030c 	and.w	r3, r3, #12
 8000cc4:	2b08      	cmp	r3, #8
 8000cc6:	d112      	bne.n	8000cee <HAL_RCC_OscConfig+0x5e>
 8000cc8:	4b8c      	ldr	r3, [pc, #560]	; (8000efc <HAL_RCC_OscConfig+0x26c>)
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cd4:	d10b      	bne.n	8000cee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cd6:	4b89      	ldr	r3, [pc, #548]	; (8000efc <HAL_RCC_OscConfig+0x26c>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d06c      	beq.n	8000dbc <HAL_RCC_OscConfig+0x12c>
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d168      	bne.n	8000dbc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
 8000cec:	e24c      	b.n	8001188 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cf6:	d106      	bne.n	8000d06 <HAL_RCC_OscConfig+0x76>
 8000cf8:	4b80      	ldr	r3, [pc, #512]	; (8000efc <HAL_RCC_OscConfig+0x26c>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a7f      	ldr	r2, [pc, #508]	; (8000efc <HAL_RCC_OscConfig+0x26c>)
 8000cfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d02:	6013      	str	r3, [r2, #0]
 8000d04:	e02e      	b.n	8000d64 <HAL_RCC_OscConfig+0xd4>
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d10c      	bne.n	8000d28 <HAL_RCC_OscConfig+0x98>
 8000d0e:	4b7b      	ldr	r3, [pc, #492]	; (8000efc <HAL_RCC_OscConfig+0x26c>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4a7a      	ldr	r2, [pc, #488]	; (8000efc <HAL_RCC_OscConfig+0x26c>)
 8000d14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d18:	6013      	str	r3, [r2, #0]
 8000d1a:	4b78      	ldr	r3, [pc, #480]	; (8000efc <HAL_RCC_OscConfig+0x26c>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4a77      	ldr	r2, [pc, #476]	; (8000efc <HAL_RCC_OscConfig+0x26c>)
 8000d20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d24:	6013      	str	r3, [r2, #0]
 8000d26:	e01d      	b.n	8000d64 <HAL_RCC_OscConfig+0xd4>
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d30:	d10c      	bne.n	8000d4c <HAL_RCC_OscConfig+0xbc>
 8000d32:	4b72      	ldr	r3, [pc, #456]	; (8000efc <HAL_RCC_OscConfig+0x26c>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4a71      	ldr	r2, [pc, #452]	; (8000efc <HAL_RCC_OscConfig+0x26c>)
 8000d38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d3c:	6013      	str	r3, [r2, #0]
 8000d3e:	4b6f      	ldr	r3, [pc, #444]	; (8000efc <HAL_RCC_OscConfig+0x26c>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a6e      	ldr	r2, [pc, #440]	; (8000efc <HAL_RCC_OscConfig+0x26c>)
 8000d44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d48:	6013      	str	r3, [r2, #0]
 8000d4a:	e00b      	b.n	8000d64 <HAL_RCC_OscConfig+0xd4>
 8000d4c:	4b6b      	ldr	r3, [pc, #428]	; (8000efc <HAL_RCC_OscConfig+0x26c>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a6a      	ldr	r2, [pc, #424]	; (8000efc <HAL_RCC_OscConfig+0x26c>)
 8000d52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d56:	6013      	str	r3, [r2, #0]
 8000d58:	4b68      	ldr	r3, [pc, #416]	; (8000efc <HAL_RCC_OscConfig+0x26c>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a67      	ldr	r2, [pc, #412]	; (8000efc <HAL_RCC_OscConfig+0x26c>)
 8000d5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d62:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d013      	beq.n	8000d94 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d6c:	f7ff fcf0 	bl	8000750 <HAL_GetTick>
 8000d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d72:	e008      	b.n	8000d86 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d74:	f7ff fcec 	bl	8000750 <HAL_GetTick>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	693b      	ldr	r3, [r7, #16]
 8000d7c:	1ad3      	subs	r3, r2, r3
 8000d7e:	2b64      	cmp	r3, #100	; 0x64
 8000d80:	d901      	bls.n	8000d86 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000d82:	2303      	movs	r3, #3
 8000d84:	e200      	b.n	8001188 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d86:	4b5d      	ldr	r3, [pc, #372]	; (8000efc <HAL_RCC_OscConfig+0x26c>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d0f0      	beq.n	8000d74 <HAL_RCC_OscConfig+0xe4>
 8000d92:	e014      	b.n	8000dbe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d94:	f7ff fcdc 	bl	8000750 <HAL_GetTick>
 8000d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d9a:	e008      	b.n	8000dae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d9c:	f7ff fcd8 	bl	8000750 <HAL_GetTick>
 8000da0:	4602      	mov	r2, r0
 8000da2:	693b      	ldr	r3, [r7, #16]
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	2b64      	cmp	r3, #100	; 0x64
 8000da8:	d901      	bls.n	8000dae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000daa:	2303      	movs	r3, #3
 8000dac:	e1ec      	b.n	8001188 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dae:	4b53      	ldr	r3, [pc, #332]	; (8000efc <HAL_RCC_OscConfig+0x26c>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d1f0      	bne.n	8000d9c <HAL_RCC_OscConfig+0x10c>
 8000dba:	e000      	b.n	8000dbe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f003 0302 	and.w	r3, r3, #2
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d063      	beq.n	8000e92 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000dca:	4b4c      	ldr	r3, [pc, #304]	; (8000efc <HAL_RCC_OscConfig+0x26c>)
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	f003 030c 	and.w	r3, r3, #12
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d00b      	beq.n	8000dee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000dd6:	4b49      	ldr	r3, [pc, #292]	; (8000efc <HAL_RCC_OscConfig+0x26c>)
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	f003 030c 	and.w	r3, r3, #12
 8000dde:	2b08      	cmp	r3, #8
 8000de0:	d11c      	bne.n	8000e1c <HAL_RCC_OscConfig+0x18c>
 8000de2:	4b46      	ldr	r3, [pc, #280]	; (8000efc <HAL_RCC_OscConfig+0x26c>)
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d116      	bne.n	8000e1c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dee:	4b43      	ldr	r3, [pc, #268]	; (8000efc <HAL_RCC_OscConfig+0x26c>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f003 0302 	and.w	r3, r3, #2
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d005      	beq.n	8000e06 <HAL_RCC_OscConfig+0x176>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	691b      	ldr	r3, [r3, #16]
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d001      	beq.n	8000e06 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000e02:	2301      	movs	r3, #1
 8000e04:	e1c0      	b.n	8001188 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e06:	4b3d      	ldr	r3, [pc, #244]	; (8000efc <HAL_RCC_OscConfig+0x26c>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	695b      	ldr	r3, [r3, #20]
 8000e12:	00db      	lsls	r3, r3, #3
 8000e14:	4939      	ldr	r1, [pc, #228]	; (8000efc <HAL_RCC_OscConfig+0x26c>)
 8000e16:	4313      	orrs	r3, r2
 8000e18:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e1a:	e03a      	b.n	8000e92 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	691b      	ldr	r3, [r3, #16]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d020      	beq.n	8000e66 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e24:	4b36      	ldr	r3, [pc, #216]	; (8000f00 <HAL_RCC_OscConfig+0x270>)
 8000e26:	2201      	movs	r2, #1
 8000e28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e2a:	f7ff fc91 	bl	8000750 <HAL_GetTick>
 8000e2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e30:	e008      	b.n	8000e44 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e32:	f7ff fc8d 	bl	8000750 <HAL_GetTick>
 8000e36:	4602      	mov	r2, r0
 8000e38:	693b      	ldr	r3, [r7, #16]
 8000e3a:	1ad3      	subs	r3, r2, r3
 8000e3c:	2b02      	cmp	r3, #2
 8000e3e:	d901      	bls.n	8000e44 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000e40:	2303      	movs	r3, #3
 8000e42:	e1a1      	b.n	8001188 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e44:	4b2d      	ldr	r3, [pc, #180]	; (8000efc <HAL_RCC_OscConfig+0x26c>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f003 0302 	and.w	r3, r3, #2
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d0f0      	beq.n	8000e32 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e50:	4b2a      	ldr	r3, [pc, #168]	; (8000efc <HAL_RCC_OscConfig+0x26c>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	695b      	ldr	r3, [r3, #20]
 8000e5c:	00db      	lsls	r3, r3, #3
 8000e5e:	4927      	ldr	r1, [pc, #156]	; (8000efc <HAL_RCC_OscConfig+0x26c>)
 8000e60:	4313      	orrs	r3, r2
 8000e62:	600b      	str	r3, [r1, #0]
 8000e64:	e015      	b.n	8000e92 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e66:	4b26      	ldr	r3, [pc, #152]	; (8000f00 <HAL_RCC_OscConfig+0x270>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e6c:	f7ff fc70 	bl	8000750 <HAL_GetTick>
 8000e70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e72:	e008      	b.n	8000e86 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e74:	f7ff fc6c 	bl	8000750 <HAL_GetTick>
 8000e78:	4602      	mov	r2, r0
 8000e7a:	693b      	ldr	r3, [r7, #16]
 8000e7c:	1ad3      	subs	r3, r2, r3
 8000e7e:	2b02      	cmp	r3, #2
 8000e80:	d901      	bls.n	8000e86 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000e82:	2303      	movs	r3, #3
 8000e84:	e180      	b.n	8001188 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e86:	4b1d      	ldr	r3, [pc, #116]	; (8000efc <HAL_RCC_OscConfig+0x26c>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f003 0302 	and.w	r3, r3, #2
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d1f0      	bne.n	8000e74 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f003 0308 	and.w	r3, r3, #8
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d03a      	beq.n	8000f14 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	699b      	ldr	r3, [r3, #24]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d019      	beq.n	8000eda <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ea6:	4b17      	ldr	r3, [pc, #92]	; (8000f04 <HAL_RCC_OscConfig+0x274>)
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000eac:	f7ff fc50 	bl	8000750 <HAL_GetTick>
 8000eb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000eb2:	e008      	b.n	8000ec6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000eb4:	f7ff fc4c 	bl	8000750 <HAL_GetTick>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	693b      	ldr	r3, [r7, #16]
 8000ebc:	1ad3      	subs	r3, r2, r3
 8000ebe:	2b02      	cmp	r3, #2
 8000ec0:	d901      	bls.n	8000ec6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000ec2:	2303      	movs	r3, #3
 8000ec4:	e160      	b.n	8001188 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ec6:	4b0d      	ldr	r3, [pc, #52]	; (8000efc <HAL_RCC_OscConfig+0x26c>)
 8000ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eca:	f003 0302 	and.w	r3, r3, #2
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d0f0      	beq.n	8000eb4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000ed2:	2001      	movs	r0, #1
 8000ed4:	f000 fafe 	bl	80014d4 <RCC_Delay>
 8000ed8:	e01c      	b.n	8000f14 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000eda:	4b0a      	ldr	r3, [pc, #40]	; (8000f04 <HAL_RCC_OscConfig+0x274>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ee0:	f7ff fc36 	bl	8000750 <HAL_GetTick>
 8000ee4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ee6:	e00f      	b.n	8000f08 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ee8:	f7ff fc32 	bl	8000750 <HAL_GetTick>
 8000eec:	4602      	mov	r2, r0
 8000eee:	693b      	ldr	r3, [r7, #16]
 8000ef0:	1ad3      	subs	r3, r2, r3
 8000ef2:	2b02      	cmp	r3, #2
 8000ef4:	d908      	bls.n	8000f08 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000ef6:	2303      	movs	r3, #3
 8000ef8:	e146      	b.n	8001188 <HAL_RCC_OscConfig+0x4f8>
 8000efa:	bf00      	nop
 8000efc:	40021000 	.word	0x40021000
 8000f00:	42420000 	.word	0x42420000
 8000f04:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f08:	4b92      	ldr	r3, [pc, #584]	; (8001154 <HAL_RCC_OscConfig+0x4c4>)
 8000f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f0c:	f003 0302 	and.w	r3, r3, #2
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d1e9      	bne.n	8000ee8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f003 0304 	and.w	r3, r3, #4
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	f000 80a6 	beq.w	800106e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f22:	2300      	movs	r3, #0
 8000f24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f26:	4b8b      	ldr	r3, [pc, #556]	; (8001154 <HAL_RCC_OscConfig+0x4c4>)
 8000f28:	69db      	ldr	r3, [r3, #28]
 8000f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d10d      	bne.n	8000f4e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f32:	4b88      	ldr	r3, [pc, #544]	; (8001154 <HAL_RCC_OscConfig+0x4c4>)
 8000f34:	69db      	ldr	r3, [r3, #28]
 8000f36:	4a87      	ldr	r2, [pc, #540]	; (8001154 <HAL_RCC_OscConfig+0x4c4>)
 8000f38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f3c:	61d3      	str	r3, [r2, #28]
 8000f3e:	4b85      	ldr	r3, [pc, #532]	; (8001154 <HAL_RCC_OscConfig+0x4c4>)
 8000f40:	69db      	ldr	r3, [r3, #28]
 8000f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f46:	60bb      	str	r3, [r7, #8]
 8000f48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f4e:	4b82      	ldr	r3, [pc, #520]	; (8001158 <HAL_RCC_OscConfig+0x4c8>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d118      	bne.n	8000f8c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f5a:	4b7f      	ldr	r3, [pc, #508]	; (8001158 <HAL_RCC_OscConfig+0x4c8>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a7e      	ldr	r2, [pc, #504]	; (8001158 <HAL_RCC_OscConfig+0x4c8>)
 8000f60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f66:	f7ff fbf3 	bl	8000750 <HAL_GetTick>
 8000f6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f6c:	e008      	b.n	8000f80 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f6e:	f7ff fbef 	bl	8000750 <HAL_GetTick>
 8000f72:	4602      	mov	r2, r0
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	1ad3      	subs	r3, r2, r3
 8000f78:	2b64      	cmp	r3, #100	; 0x64
 8000f7a:	d901      	bls.n	8000f80 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000f7c:	2303      	movs	r3, #3
 8000f7e:	e103      	b.n	8001188 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f80:	4b75      	ldr	r3, [pc, #468]	; (8001158 <HAL_RCC_OscConfig+0x4c8>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d0f0      	beq.n	8000f6e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	68db      	ldr	r3, [r3, #12]
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d106      	bne.n	8000fa2 <HAL_RCC_OscConfig+0x312>
 8000f94:	4b6f      	ldr	r3, [pc, #444]	; (8001154 <HAL_RCC_OscConfig+0x4c4>)
 8000f96:	6a1b      	ldr	r3, [r3, #32]
 8000f98:	4a6e      	ldr	r2, [pc, #440]	; (8001154 <HAL_RCC_OscConfig+0x4c4>)
 8000f9a:	f043 0301 	orr.w	r3, r3, #1
 8000f9e:	6213      	str	r3, [r2, #32]
 8000fa0:	e02d      	b.n	8000ffe <HAL_RCC_OscConfig+0x36e>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	68db      	ldr	r3, [r3, #12]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d10c      	bne.n	8000fc4 <HAL_RCC_OscConfig+0x334>
 8000faa:	4b6a      	ldr	r3, [pc, #424]	; (8001154 <HAL_RCC_OscConfig+0x4c4>)
 8000fac:	6a1b      	ldr	r3, [r3, #32]
 8000fae:	4a69      	ldr	r2, [pc, #420]	; (8001154 <HAL_RCC_OscConfig+0x4c4>)
 8000fb0:	f023 0301 	bic.w	r3, r3, #1
 8000fb4:	6213      	str	r3, [r2, #32]
 8000fb6:	4b67      	ldr	r3, [pc, #412]	; (8001154 <HAL_RCC_OscConfig+0x4c4>)
 8000fb8:	6a1b      	ldr	r3, [r3, #32]
 8000fba:	4a66      	ldr	r2, [pc, #408]	; (8001154 <HAL_RCC_OscConfig+0x4c4>)
 8000fbc:	f023 0304 	bic.w	r3, r3, #4
 8000fc0:	6213      	str	r3, [r2, #32]
 8000fc2:	e01c      	b.n	8000ffe <HAL_RCC_OscConfig+0x36e>
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	2b05      	cmp	r3, #5
 8000fca:	d10c      	bne.n	8000fe6 <HAL_RCC_OscConfig+0x356>
 8000fcc:	4b61      	ldr	r3, [pc, #388]	; (8001154 <HAL_RCC_OscConfig+0x4c4>)
 8000fce:	6a1b      	ldr	r3, [r3, #32]
 8000fd0:	4a60      	ldr	r2, [pc, #384]	; (8001154 <HAL_RCC_OscConfig+0x4c4>)
 8000fd2:	f043 0304 	orr.w	r3, r3, #4
 8000fd6:	6213      	str	r3, [r2, #32]
 8000fd8:	4b5e      	ldr	r3, [pc, #376]	; (8001154 <HAL_RCC_OscConfig+0x4c4>)
 8000fda:	6a1b      	ldr	r3, [r3, #32]
 8000fdc:	4a5d      	ldr	r2, [pc, #372]	; (8001154 <HAL_RCC_OscConfig+0x4c4>)
 8000fde:	f043 0301 	orr.w	r3, r3, #1
 8000fe2:	6213      	str	r3, [r2, #32]
 8000fe4:	e00b      	b.n	8000ffe <HAL_RCC_OscConfig+0x36e>
 8000fe6:	4b5b      	ldr	r3, [pc, #364]	; (8001154 <HAL_RCC_OscConfig+0x4c4>)
 8000fe8:	6a1b      	ldr	r3, [r3, #32]
 8000fea:	4a5a      	ldr	r2, [pc, #360]	; (8001154 <HAL_RCC_OscConfig+0x4c4>)
 8000fec:	f023 0301 	bic.w	r3, r3, #1
 8000ff0:	6213      	str	r3, [r2, #32]
 8000ff2:	4b58      	ldr	r3, [pc, #352]	; (8001154 <HAL_RCC_OscConfig+0x4c4>)
 8000ff4:	6a1b      	ldr	r3, [r3, #32]
 8000ff6:	4a57      	ldr	r2, [pc, #348]	; (8001154 <HAL_RCC_OscConfig+0x4c4>)
 8000ff8:	f023 0304 	bic.w	r3, r3, #4
 8000ffc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	68db      	ldr	r3, [r3, #12]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d015      	beq.n	8001032 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001006:	f7ff fba3 	bl	8000750 <HAL_GetTick>
 800100a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800100c:	e00a      	b.n	8001024 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800100e:	f7ff fb9f 	bl	8000750 <HAL_GetTick>
 8001012:	4602      	mov	r2, r0
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	1ad3      	subs	r3, r2, r3
 8001018:	f241 3288 	movw	r2, #5000	; 0x1388
 800101c:	4293      	cmp	r3, r2
 800101e:	d901      	bls.n	8001024 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001020:	2303      	movs	r3, #3
 8001022:	e0b1      	b.n	8001188 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001024:	4b4b      	ldr	r3, [pc, #300]	; (8001154 <HAL_RCC_OscConfig+0x4c4>)
 8001026:	6a1b      	ldr	r3, [r3, #32]
 8001028:	f003 0302 	and.w	r3, r3, #2
 800102c:	2b00      	cmp	r3, #0
 800102e:	d0ee      	beq.n	800100e <HAL_RCC_OscConfig+0x37e>
 8001030:	e014      	b.n	800105c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001032:	f7ff fb8d 	bl	8000750 <HAL_GetTick>
 8001036:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001038:	e00a      	b.n	8001050 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800103a:	f7ff fb89 	bl	8000750 <HAL_GetTick>
 800103e:	4602      	mov	r2, r0
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	1ad3      	subs	r3, r2, r3
 8001044:	f241 3288 	movw	r2, #5000	; 0x1388
 8001048:	4293      	cmp	r3, r2
 800104a:	d901      	bls.n	8001050 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800104c:	2303      	movs	r3, #3
 800104e:	e09b      	b.n	8001188 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001050:	4b40      	ldr	r3, [pc, #256]	; (8001154 <HAL_RCC_OscConfig+0x4c4>)
 8001052:	6a1b      	ldr	r3, [r3, #32]
 8001054:	f003 0302 	and.w	r3, r3, #2
 8001058:	2b00      	cmp	r3, #0
 800105a:	d1ee      	bne.n	800103a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800105c:	7dfb      	ldrb	r3, [r7, #23]
 800105e:	2b01      	cmp	r3, #1
 8001060:	d105      	bne.n	800106e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001062:	4b3c      	ldr	r3, [pc, #240]	; (8001154 <HAL_RCC_OscConfig+0x4c4>)
 8001064:	69db      	ldr	r3, [r3, #28]
 8001066:	4a3b      	ldr	r2, [pc, #236]	; (8001154 <HAL_RCC_OscConfig+0x4c4>)
 8001068:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800106c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	69db      	ldr	r3, [r3, #28]
 8001072:	2b00      	cmp	r3, #0
 8001074:	f000 8087 	beq.w	8001186 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001078:	4b36      	ldr	r3, [pc, #216]	; (8001154 <HAL_RCC_OscConfig+0x4c4>)
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f003 030c 	and.w	r3, r3, #12
 8001080:	2b08      	cmp	r3, #8
 8001082:	d061      	beq.n	8001148 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	69db      	ldr	r3, [r3, #28]
 8001088:	2b02      	cmp	r3, #2
 800108a:	d146      	bne.n	800111a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800108c:	4b33      	ldr	r3, [pc, #204]	; (800115c <HAL_RCC_OscConfig+0x4cc>)
 800108e:	2200      	movs	r2, #0
 8001090:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001092:	f7ff fb5d 	bl	8000750 <HAL_GetTick>
 8001096:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001098:	e008      	b.n	80010ac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800109a:	f7ff fb59 	bl	8000750 <HAL_GetTick>
 800109e:	4602      	mov	r2, r0
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	1ad3      	subs	r3, r2, r3
 80010a4:	2b02      	cmp	r3, #2
 80010a6:	d901      	bls.n	80010ac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80010a8:	2303      	movs	r3, #3
 80010aa:	e06d      	b.n	8001188 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010ac:	4b29      	ldr	r3, [pc, #164]	; (8001154 <HAL_RCC_OscConfig+0x4c4>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d1f0      	bne.n	800109a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6a1b      	ldr	r3, [r3, #32]
 80010bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010c0:	d108      	bne.n	80010d4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80010c2:	4b24      	ldr	r3, [pc, #144]	; (8001154 <HAL_RCC_OscConfig+0x4c4>)
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	4921      	ldr	r1, [pc, #132]	; (8001154 <HAL_RCC_OscConfig+0x4c4>)
 80010d0:	4313      	orrs	r3, r2
 80010d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80010d4:	4b1f      	ldr	r3, [pc, #124]	; (8001154 <HAL_RCC_OscConfig+0x4c4>)
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6a19      	ldr	r1, [r3, #32]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e4:	430b      	orrs	r3, r1
 80010e6:	491b      	ldr	r1, [pc, #108]	; (8001154 <HAL_RCC_OscConfig+0x4c4>)
 80010e8:	4313      	orrs	r3, r2
 80010ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80010ec:	4b1b      	ldr	r3, [pc, #108]	; (800115c <HAL_RCC_OscConfig+0x4cc>)
 80010ee:	2201      	movs	r2, #1
 80010f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f2:	f7ff fb2d 	bl	8000750 <HAL_GetTick>
 80010f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010f8:	e008      	b.n	800110c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010fa:	f7ff fb29 	bl	8000750 <HAL_GetTick>
 80010fe:	4602      	mov	r2, r0
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	1ad3      	subs	r3, r2, r3
 8001104:	2b02      	cmp	r3, #2
 8001106:	d901      	bls.n	800110c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001108:	2303      	movs	r3, #3
 800110a:	e03d      	b.n	8001188 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800110c:	4b11      	ldr	r3, [pc, #68]	; (8001154 <HAL_RCC_OscConfig+0x4c4>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001114:	2b00      	cmp	r3, #0
 8001116:	d0f0      	beq.n	80010fa <HAL_RCC_OscConfig+0x46a>
 8001118:	e035      	b.n	8001186 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800111a:	4b10      	ldr	r3, [pc, #64]	; (800115c <HAL_RCC_OscConfig+0x4cc>)
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001120:	f7ff fb16 	bl	8000750 <HAL_GetTick>
 8001124:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001126:	e008      	b.n	800113a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001128:	f7ff fb12 	bl	8000750 <HAL_GetTick>
 800112c:	4602      	mov	r2, r0
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	2b02      	cmp	r3, #2
 8001134:	d901      	bls.n	800113a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001136:	2303      	movs	r3, #3
 8001138:	e026      	b.n	8001188 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800113a:	4b06      	ldr	r3, [pc, #24]	; (8001154 <HAL_RCC_OscConfig+0x4c4>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001142:	2b00      	cmp	r3, #0
 8001144:	d1f0      	bne.n	8001128 <HAL_RCC_OscConfig+0x498>
 8001146:	e01e      	b.n	8001186 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	69db      	ldr	r3, [r3, #28]
 800114c:	2b01      	cmp	r3, #1
 800114e:	d107      	bne.n	8001160 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001150:	2301      	movs	r3, #1
 8001152:	e019      	b.n	8001188 <HAL_RCC_OscConfig+0x4f8>
 8001154:	40021000 	.word	0x40021000
 8001158:	40007000 	.word	0x40007000
 800115c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001160:	4b0b      	ldr	r3, [pc, #44]	; (8001190 <HAL_RCC_OscConfig+0x500>)
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6a1b      	ldr	r3, [r3, #32]
 8001170:	429a      	cmp	r2, r3
 8001172:	d106      	bne.n	8001182 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800117e:	429a      	cmp	r2, r3
 8001180:	d001      	beq.n	8001186 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e000      	b.n	8001188 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001186:	2300      	movs	r3, #0
}
 8001188:	4618      	mov	r0, r3
 800118a:	3718      	adds	r7, #24
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	40021000 	.word	0x40021000

08001194 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d101      	bne.n	80011a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011a4:	2301      	movs	r3, #1
 80011a6:	e0d0      	b.n	800134a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80011a8:	4b6a      	ldr	r3, [pc, #424]	; (8001354 <HAL_RCC_ClockConfig+0x1c0>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f003 0307 	and.w	r3, r3, #7
 80011b0:	683a      	ldr	r2, [r7, #0]
 80011b2:	429a      	cmp	r2, r3
 80011b4:	d910      	bls.n	80011d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011b6:	4b67      	ldr	r3, [pc, #412]	; (8001354 <HAL_RCC_ClockConfig+0x1c0>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f023 0207 	bic.w	r2, r3, #7
 80011be:	4965      	ldr	r1, [pc, #404]	; (8001354 <HAL_RCC_ClockConfig+0x1c0>)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011c6:	4b63      	ldr	r3, [pc, #396]	; (8001354 <HAL_RCC_ClockConfig+0x1c0>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f003 0307 	and.w	r3, r3, #7
 80011ce:	683a      	ldr	r2, [r7, #0]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d001      	beq.n	80011d8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80011d4:	2301      	movs	r3, #1
 80011d6:	e0b8      	b.n	800134a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f003 0302 	and.w	r3, r3, #2
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d020      	beq.n	8001226 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f003 0304 	and.w	r3, r3, #4
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d005      	beq.n	80011fc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011f0:	4b59      	ldr	r3, [pc, #356]	; (8001358 <HAL_RCC_ClockConfig+0x1c4>)
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	4a58      	ldr	r2, [pc, #352]	; (8001358 <HAL_RCC_ClockConfig+0x1c4>)
 80011f6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80011fa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f003 0308 	and.w	r3, r3, #8
 8001204:	2b00      	cmp	r3, #0
 8001206:	d005      	beq.n	8001214 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001208:	4b53      	ldr	r3, [pc, #332]	; (8001358 <HAL_RCC_ClockConfig+0x1c4>)
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	4a52      	ldr	r2, [pc, #328]	; (8001358 <HAL_RCC_ClockConfig+0x1c4>)
 800120e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001212:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001214:	4b50      	ldr	r3, [pc, #320]	; (8001358 <HAL_RCC_ClockConfig+0x1c4>)
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	494d      	ldr	r1, [pc, #308]	; (8001358 <HAL_RCC_ClockConfig+0x1c4>)
 8001222:	4313      	orrs	r3, r2
 8001224:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f003 0301 	and.w	r3, r3, #1
 800122e:	2b00      	cmp	r3, #0
 8001230:	d040      	beq.n	80012b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	2b01      	cmp	r3, #1
 8001238:	d107      	bne.n	800124a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800123a:	4b47      	ldr	r3, [pc, #284]	; (8001358 <HAL_RCC_ClockConfig+0x1c4>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001242:	2b00      	cmp	r3, #0
 8001244:	d115      	bne.n	8001272 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	e07f      	b.n	800134a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	2b02      	cmp	r3, #2
 8001250:	d107      	bne.n	8001262 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001252:	4b41      	ldr	r3, [pc, #260]	; (8001358 <HAL_RCC_ClockConfig+0x1c4>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d109      	bne.n	8001272 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e073      	b.n	800134a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001262:	4b3d      	ldr	r3, [pc, #244]	; (8001358 <HAL_RCC_ClockConfig+0x1c4>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f003 0302 	and.w	r3, r3, #2
 800126a:	2b00      	cmp	r3, #0
 800126c:	d101      	bne.n	8001272 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e06b      	b.n	800134a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001272:	4b39      	ldr	r3, [pc, #228]	; (8001358 <HAL_RCC_ClockConfig+0x1c4>)
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f023 0203 	bic.w	r2, r3, #3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	4936      	ldr	r1, [pc, #216]	; (8001358 <HAL_RCC_ClockConfig+0x1c4>)
 8001280:	4313      	orrs	r3, r2
 8001282:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001284:	f7ff fa64 	bl	8000750 <HAL_GetTick>
 8001288:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800128a:	e00a      	b.n	80012a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800128c:	f7ff fa60 	bl	8000750 <HAL_GetTick>
 8001290:	4602      	mov	r2, r0
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	f241 3288 	movw	r2, #5000	; 0x1388
 800129a:	4293      	cmp	r3, r2
 800129c:	d901      	bls.n	80012a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800129e:	2303      	movs	r3, #3
 80012a0:	e053      	b.n	800134a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012a2:	4b2d      	ldr	r3, [pc, #180]	; (8001358 <HAL_RCC_ClockConfig+0x1c4>)
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f003 020c 	and.w	r2, r3, #12
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d1eb      	bne.n	800128c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80012b4:	4b27      	ldr	r3, [pc, #156]	; (8001354 <HAL_RCC_ClockConfig+0x1c0>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f003 0307 	and.w	r3, r3, #7
 80012bc:	683a      	ldr	r2, [r7, #0]
 80012be:	429a      	cmp	r2, r3
 80012c0:	d210      	bcs.n	80012e4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012c2:	4b24      	ldr	r3, [pc, #144]	; (8001354 <HAL_RCC_ClockConfig+0x1c0>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f023 0207 	bic.w	r2, r3, #7
 80012ca:	4922      	ldr	r1, [pc, #136]	; (8001354 <HAL_RCC_ClockConfig+0x1c0>)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012d2:	4b20      	ldr	r3, [pc, #128]	; (8001354 <HAL_RCC_ClockConfig+0x1c0>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f003 0307 	and.w	r3, r3, #7
 80012da:	683a      	ldr	r2, [r7, #0]
 80012dc:	429a      	cmp	r2, r3
 80012de:	d001      	beq.n	80012e4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80012e0:	2301      	movs	r3, #1
 80012e2:	e032      	b.n	800134a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f003 0304 	and.w	r3, r3, #4
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d008      	beq.n	8001302 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012f0:	4b19      	ldr	r3, [pc, #100]	; (8001358 <HAL_RCC_ClockConfig+0x1c4>)
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	4916      	ldr	r1, [pc, #88]	; (8001358 <HAL_RCC_ClockConfig+0x1c4>)
 80012fe:	4313      	orrs	r3, r2
 8001300:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 0308 	and.w	r3, r3, #8
 800130a:	2b00      	cmp	r3, #0
 800130c:	d009      	beq.n	8001322 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800130e:	4b12      	ldr	r3, [pc, #72]	; (8001358 <HAL_RCC_ClockConfig+0x1c4>)
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	691b      	ldr	r3, [r3, #16]
 800131a:	00db      	lsls	r3, r3, #3
 800131c:	490e      	ldr	r1, [pc, #56]	; (8001358 <HAL_RCC_ClockConfig+0x1c4>)
 800131e:	4313      	orrs	r3, r2
 8001320:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001322:	f000 f821 	bl	8001368 <HAL_RCC_GetSysClockFreq>
 8001326:	4602      	mov	r2, r0
 8001328:	4b0b      	ldr	r3, [pc, #44]	; (8001358 <HAL_RCC_ClockConfig+0x1c4>)
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	091b      	lsrs	r3, r3, #4
 800132e:	f003 030f 	and.w	r3, r3, #15
 8001332:	490a      	ldr	r1, [pc, #40]	; (800135c <HAL_RCC_ClockConfig+0x1c8>)
 8001334:	5ccb      	ldrb	r3, [r1, r3]
 8001336:	fa22 f303 	lsr.w	r3, r2, r3
 800133a:	4a09      	ldr	r2, [pc, #36]	; (8001360 <HAL_RCC_ClockConfig+0x1cc>)
 800133c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800133e:	4b09      	ldr	r3, [pc, #36]	; (8001364 <HAL_RCC_ClockConfig+0x1d0>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff f8de 	bl	8000504 <HAL_InitTick>

  return HAL_OK;
 8001348:	2300      	movs	r3, #0
}
 800134a:	4618      	mov	r0, r3
 800134c:	3710      	adds	r7, #16
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	40022000 	.word	0x40022000
 8001358:	40021000 	.word	0x40021000
 800135c:	08003bf0 	.word	0x08003bf0
 8001360:	20000000 	.word	0x20000000
 8001364:	20000004 	.word	0x20000004

08001368 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001368:	b480      	push	{r7}
 800136a:	b087      	sub	sp, #28
 800136c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800136e:	2300      	movs	r3, #0
 8001370:	60fb      	str	r3, [r7, #12]
 8001372:	2300      	movs	r3, #0
 8001374:	60bb      	str	r3, [r7, #8]
 8001376:	2300      	movs	r3, #0
 8001378:	617b      	str	r3, [r7, #20]
 800137a:	2300      	movs	r3, #0
 800137c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800137e:	2300      	movs	r3, #0
 8001380:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001382:	4b1e      	ldr	r3, [pc, #120]	; (80013fc <HAL_RCC_GetSysClockFreq+0x94>)
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	f003 030c 	and.w	r3, r3, #12
 800138e:	2b04      	cmp	r3, #4
 8001390:	d002      	beq.n	8001398 <HAL_RCC_GetSysClockFreq+0x30>
 8001392:	2b08      	cmp	r3, #8
 8001394:	d003      	beq.n	800139e <HAL_RCC_GetSysClockFreq+0x36>
 8001396:	e027      	b.n	80013e8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001398:	4b19      	ldr	r3, [pc, #100]	; (8001400 <HAL_RCC_GetSysClockFreq+0x98>)
 800139a:	613b      	str	r3, [r7, #16]
      break;
 800139c:	e027      	b.n	80013ee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	0c9b      	lsrs	r3, r3, #18
 80013a2:	f003 030f 	and.w	r3, r3, #15
 80013a6:	4a17      	ldr	r2, [pc, #92]	; (8001404 <HAL_RCC_GetSysClockFreq+0x9c>)
 80013a8:	5cd3      	ldrb	r3, [r2, r3]
 80013aa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d010      	beq.n	80013d8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80013b6:	4b11      	ldr	r3, [pc, #68]	; (80013fc <HAL_RCC_GetSysClockFreq+0x94>)
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	0c5b      	lsrs	r3, r3, #17
 80013bc:	f003 0301 	and.w	r3, r3, #1
 80013c0:	4a11      	ldr	r2, [pc, #68]	; (8001408 <HAL_RCC_GetSysClockFreq+0xa0>)
 80013c2:	5cd3      	ldrb	r3, [r2, r3]
 80013c4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a0d      	ldr	r2, [pc, #52]	; (8001400 <HAL_RCC_GetSysClockFreq+0x98>)
 80013ca:	fb03 f202 	mul.w	r2, r3, r2
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80013d4:	617b      	str	r3, [r7, #20]
 80013d6:	e004      	b.n	80013e2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	4a0c      	ldr	r2, [pc, #48]	; (800140c <HAL_RCC_GetSysClockFreq+0xa4>)
 80013dc:	fb02 f303 	mul.w	r3, r2, r3
 80013e0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	613b      	str	r3, [r7, #16]
      break;
 80013e6:	e002      	b.n	80013ee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80013e8:	4b05      	ldr	r3, [pc, #20]	; (8001400 <HAL_RCC_GetSysClockFreq+0x98>)
 80013ea:	613b      	str	r3, [r7, #16]
      break;
 80013ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80013ee:	693b      	ldr	r3, [r7, #16]
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	371c      	adds	r7, #28
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bc80      	pop	{r7}
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	40021000 	.word	0x40021000
 8001400:	007a1200 	.word	0x007a1200
 8001404:	08003c08 	.word	0x08003c08
 8001408:	08003c18 	.word	0x08003c18
 800140c:	003d0900 	.word	0x003d0900

08001410 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001414:	4b02      	ldr	r3, [pc, #8]	; (8001420 <HAL_RCC_GetHCLKFreq+0x10>)
 8001416:	681b      	ldr	r3, [r3, #0]
}
 8001418:	4618      	mov	r0, r3
 800141a:	46bd      	mov	sp, r7
 800141c:	bc80      	pop	{r7}
 800141e:	4770      	bx	lr
 8001420:	20000000 	.word	0x20000000

08001424 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001428:	f7ff fff2 	bl	8001410 <HAL_RCC_GetHCLKFreq>
 800142c:	4602      	mov	r2, r0
 800142e:	4b05      	ldr	r3, [pc, #20]	; (8001444 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	0a1b      	lsrs	r3, r3, #8
 8001434:	f003 0307 	and.w	r3, r3, #7
 8001438:	4903      	ldr	r1, [pc, #12]	; (8001448 <HAL_RCC_GetPCLK1Freq+0x24>)
 800143a:	5ccb      	ldrb	r3, [r1, r3]
 800143c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001440:	4618      	mov	r0, r3
 8001442:	bd80      	pop	{r7, pc}
 8001444:	40021000 	.word	0x40021000
 8001448:	08003c00 	.word	0x08003c00

0800144c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001450:	f7ff ffde 	bl	8001410 <HAL_RCC_GetHCLKFreq>
 8001454:	4602      	mov	r2, r0
 8001456:	4b05      	ldr	r3, [pc, #20]	; (800146c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	0adb      	lsrs	r3, r3, #11
 800145c:	f003 0307 	and.w	r3, r3, #7
 8001460:	4903      	ldr	r1, [pc, #12]	; (8001470 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001462:	5ccb      	ldrb	r3, [r1, r3]
 8001464:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001468:	4618      	mov	r0, r3
 800146a:	bd80      	pop	{r7, pc}
 800146c:	40021000 	.word	0x40021000
 8001470:	08003c00 	.word	0x08003c00

08001474 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	220f      	movs	r2, #15
 8001482:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001484:	4b11      	ldr	r3, [pc, #68]	; (80014cc <HAL_RCC_GetClockConfig+0x58>)
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f003 0203 	and.w	r2, r3, #3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001490:	4b0e      	ldr	r3, [pc, #56]	; (80014cc <HAL_RCC_GetClockConfig+0x58>)
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800149c:	4b0b      	ldr	r3, [pc, #44]	; (80014cc <HAL_RCC_GetClockConfig+0x58>)
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80014a8:	4b08      	ldr	r3, [pc, #32]	; (80014cc <HAL_RCC_GetClockConfig+0x58>)
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	08db      	lsrs	r3, r3, #3
 80014ae:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80014b6:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <HAL_RCC_GetClockConfig+0x5c>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 0207 	and.w	r2, r3, #7
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80014c2:	bf00      	nop
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bc80      	pop	{r7}
 80014ca:	4770      	bx	lr
 80014cc:	40021000 	.word	0x40021000
 80014d0:	40022000 	.word	0x40022000

080014d4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b085      	sub	sp, #20
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80014dc:	4b0a      	ldr	r3, [pc, #40]	; (8001508 <RCC_Delay+0x34>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a0a      	ldr	r2, [pc, #40]	; (800150c <RCC_Delay+0x38>)
 80014e2:	fba2 2303 	umull	r2, r3, r2, r3
 80014e6:	0a5b      	lsrs	r3, r3, #9
 80014e8:	687a      	ldr	r2, [r7, #4]
 80014ea:	fb02 f303 	mul.w	r3, r2, r3
 80014ee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80014f0:	bf00      	nop
  }
  while (Delay --);
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	1e5a      	subs	r2, r3, #1
 80014f6:	60fa      	str	r2, [r7, #12]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d1f9      	bne.n	80014f0 <RCC_Delay+0x1c>
}
 80014fc:	bf00      	nop
 80014fe:	bf00      	nop
 8001500:	3714      	adds	r7, #20
 8001502:	46bd      	mov	sp, r7
 8001504:	bc80      	pop	{r7}
 8001506:	4770      	bx	lr
 8001508:	20000000 	.word	0x20000000
 800150c:	10624dd3 	.word	0x10624dd3

08001510 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d101      	bne.n	8001522 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e041      	b.n	80015a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001528:	b2db      	uxtb	r3, r3
 800152a:	2b00      	cmp	r3, #0
 800152c:	d106      	bne.n	800153c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2200      	movs	r2, #0
 8001532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f000 f839 	bl	80015ae <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2202      	movs	r2, #2
 8001540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	3304      	adds	r3, #4
 800154c:	4619      	mov	r1, r3
 800154e:	4610      	mov	r0, r2
 8001550:	f000 f9b4 	bl	80018bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2201      	movs	r2, #1
 8001558:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2201      	movs	r2, #1
 8001560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2201      	movs	r2, #1
 8001568:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2201      	movs	r2, #1
 8001570:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2201      	movs	r2, #1
 8001578:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2201      	movs	r2, #1
 8001580:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2201      	movs	r2, #1
 8001588:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2201      	movs	r2, #1
 8001590:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2201      	movs	r2, #1
 8001598:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2201      	movs	r2, #1
 80015a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80015a4:	2300      	movs	r3, #0
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80015ae:	b480      	push	{r7}
 80015b0:	b083      	sub	sp, #12
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80015b6:	bf00      	nop
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bc80      	pop	{r7}
 80015be:	4770      	bx	lr

080015c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d001      	beq.n	80015d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	e03a      	b.n	800164e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2202      	movs	r2, #2
 80015dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	68da      	ldr	r2, [r3, #12]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f042 0201 	orr.w	r2, r2, #1
 80015ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a18      	ldr	r2, [pc, #96]	; (8001658 <HAL_TIM_Base_Start_IT+0x98>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d00e      	beq.n	8001618 <HAL_TIM_Base_Start_IT+0x58>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001602:	d009      	beq.n	8001618 <HAL_TIM_Base_Start_IT+0x58>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a14      	ldr	r2, [pc, #80]	; (800165c <HAL_TIM_Base_Start_IT+0x9c>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d004      	beq.n	8001618 <HAL_TIM_Base_Start_IT+0x58>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a13      	ldr	r2, [pc, #76]	; (8001660 <HAL_TIM_Base_Start_IT+0xa0>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d111      	bne.n	800163c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	f003 0307 	and.w	r3, r3, #7
 8001622:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	2b06      	cmp	r3, #6
 8001628:	d010      	beq.n	800164c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f042 0201 	orr.w	r2, r2, #1
 8001638:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800163a:	e007      	b.n	800164c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f042 0201 	orr.w	r2, r2, #1
 800164a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800164c:	2300      	movs	r3, #0
}
 800164e:	4618      	mov	r0, r3
 8001650:	3714      	adds	r7, #20
 8001652:	46bd      	mov	sp, r7
 8001654:	bc80      	pop	{r7}
 8001656:	4770      	bx	lr
 8001658:	40012c00 	.word	0x40012c00
 800165c:	40000400 	.word	0x40000400
 8001660:	40000800 	.word	0x40000800

08001664 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	691b      	ldr	r3, [r3, #16]
 8001672:	f003 0302 	and.w	r3, r3, #2
 8001676:	2b02      	cmp	r3, #2
 8001678:	d122      	bne.n	80016c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	f003 0302 	and.w	r3, r3, #2
 8001684:	2b02      	cmp	r3, #2
 8001686:	d11b      	bne.n	80016c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f06f 0202 	mvn.w	r2, #2
 8001690:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2201      	movs	r2, #1
 8001696:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	699b      	ldr	r3, [r3, #24]
 800169e:	f003 0303 	and.w	r3, r3, #3
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d003      	beq.n	80016ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f000 f8ed 	bl	8001886 <HAL_TIM_IC_CaptureCallback>
 80016ac:	e005      	b.n	80016ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f000 f8e0 	bl	8001874 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f000 f8ef 	bl	8001898 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2200      	movs	r2, #0
 80016be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	691b      	ldr	r3, [r3, #16]
 80016c6:	f003 0304 	and.w	r3, r3, #4
 80016ca:	2b04      	cmp	r3, #4
 80016cc:	d122      	bne.n	8001714 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	f003 0304 	and.w	r3, r3, #4
 80016d8:	2b04      	cmp	r3, #4
 80016da:	d11b      	bne.n	8001714 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f06f 0204 	mvn.w	r2, #4
 80016e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2202      	movs	r2, #2
 80016ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	699b      	ldr	r3, [r3, #24]
 80016f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d003      	beq.n	8001702 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f000 f8c3 	bl	8001886 <HAL_TIM_IC_CaptureCallback>
 8001700:	e005      	b.n	800170e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f000 f8b6 	bl	8001874 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f000 f8c5 	bl	8001898 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2200      	movs	r2, #0
 8001712:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	691b      	ldr	r3, [r3, #16]
 800171a:	f003 0308 	and.w	r3, r3, #8
 800171e:	2b08      	cmp	r3, #8
 8001720:	d122      	bne.n	8001768 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	f003 0308 	and.w	r3, r3, #8
 800172c:	2b08      	cmp	r3, #8
 800172e:	d11b      	bne.n	8001768 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f06f 0208 	mvn.w	r2, #8
 8001738:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2204      	movs	r2, #4
 800173e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	69db      	ldr	r3, [r3, #28]
 8001746:	f003 0303 	and.w	r3, r3, #3
 800174a:	2b00      	cmp	r3, #0
 800174c:	d003      	beq.n	8001756 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f000 f899 	bl	8001886 <HAL_TIM_IC_CaptureCallback>
 8001754:	e005      	b.n	8001762 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f000 f88c 	bl	8001874 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f000 f89b 	bl	8001898 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2200      	movs	r2, #0
 8001766:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	691b      	ldr	r3, [r3, #16]
 800176e:	f003 0310 	and.w	r3, r3, #16
 8001772:	2b10      	cmp	r3, #16
 8001774:	d122      	bne.n	80017bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	f003 0310 	and.w	r3, r3, #16
 8001780:	2b10      	cmp	r3, #16
 8001782:	d11b      	bne.n	80017bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f06f 0210 	mvn.w	r2, #16
 800178c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2208      	movs	r2, #8
 8001792:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	69db      	ldr	r3, [r3, #28]
 800179a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d003      	beq.n	80017aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f000 f86f 	bl	8001886 <HAL_TIM_IC_CaptureCallback>
 80017a8:	e005      	b.n	80017b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f000 f862 	bl	8001874 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f000 f871 	bl	8001898 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2200      	movs	r2, #0
 80017ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	691b      	ldr	r3, [r3, #16]
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d10e      	bne.n	80017e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	f003 0301 	and.w	r3, r3, #1
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d107      	bne.n	80017e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f06f 0201 	mvn.w	r2, #1
 80017e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f7fe fdf6 	bl	80003d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	691b      	ldr	r3, [r3, #16]
 80017ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017f2:	2b80      	cmp	r3, #128	; 0x80
 80017f4:	d10e      	bne.n	8001814 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001800:	2b80      	cmp	r3, #128	; 0x80
 8001802:	d107      	bne.n	8001814 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800180c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f000 f8bf 	bl	8001992 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	691b      	ldr	r3, [r3, #16]
 800181a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800181e:	2b40      	cmp	r3, #64	; 0x40
 8001820:	d10e      	bne.n	8001840 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800182c:	2b40      	cmp	r3, #64	; 0x40
 800182e:	d107      	bne.n	8001840 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001838:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	f000 f835 	bl	80018aa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	691b      	ldr	r3, [r3, #16]
 8001846:	f003 0320 	and.w	r3, r3, #32
 800184a:	2b20      	cmp	r3, #32
 800184c:	d10e      	bne.n	800186c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	f003 0320 	and.w	r3, r3, #32
 8001858:	2b20      	cmp	r3, #32
 800185a:	d107      	bne.n	800186c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f06f 0220 	mvn.w	r2, #32
 8001864:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f000 f88a 	bl	8001980 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800186c:	bf00      	nop
 800186e:	3708      	adds	r7, #8
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}

08001874 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800187c:	bf00      	nop
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	bc80      	pop	{r7}
 8001884:	4770      	bx	lr

08001886 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001886:	b480      	push	{r7}
 8001888:	b083      	sub	sp, #12
 800188a:	af00      	add	r7, sp, #0
 800188c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800188e:	bf00      	nop
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	bc80      	pop	{r7}
 8001896:	4770      	bx	lr

08001898 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80018a0:	bf00      	nop
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bc80      	pop	{r7}
 80018a8:	4770      	bx	lr

080018aa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80018aa:	b480      	push	{r7}
 80018ac:	b083      	sub	sp, #12
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80018b2:	bf00      	nop
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bc80      	pop	{r7}
 80018ba:	4770      	bx	lr

080018bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80018bc:	b480      	push	{r7}
 80018be:	b085      	sub	sp, #20
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	4a29      	ldr	r2, [pc, #164]	; (8001974 <TIM_Base_SetConfig+0xb8>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d00b      	beq.n	80018ec <TIM_Base_SetConfig+0x30>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018da:	d007      	beq.n	80018ec <TIM_Base_SetConfig+0x30>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	4a26      	ldr	r2, [pc, #152]	; (8001978 <TIM_Base_SetConfig+0xbc>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d003      	beq.n	80018ec <TIM_Base_SetConfig+0x30>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	4a25      	ldr	r2, [pc, #148]	; (800197c <TIM_Base_SetConfig+0xc0>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d108      	bne.n	80018fe <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	68fa      	ldr	r2, [r7, #12]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a1c      	ldr	r2, [pc, #112]	; (8001974 <TIM_Base_SetConfig+0xb8>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d00b      	beq.n	800191e <TIM_Base_SetConfig+0x62>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800190c:	d007      	beq.n	800191e <TIM_Base_SetConfig+0x62>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a19      	ldr	r2, [pc, #100]	; (8001978 <TIM_Base_SetConfig+0xbc>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d003      	beq.n	800191e <TIM_Base_SetConfig+0x62>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a18      	ldr	r2, [pc, #96]	; (800197c <TIM_Base_SetConfig+0xc0>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d108      	bne.n	8001930 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001924:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	68db      	ldr	r3, [r3, #12]
 800192a:	68fa      	ldr	r2, [r7, #12]
 800192c:	4313      	orrs	r3, r2
 800192e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	695b      	ldr	r3, [r3, #20]
 800193a:	4313      	orrs	r3, r2
 800193c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	68fa      	ldr	r2, [r7, #12]
 8001942:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	689a      	ldr	r2, [r3, #8]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	4a07      	ldr	r2, [pc, #28]	; (8001974 <TIM_Base_SetConfig+0xb8>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d103      	bne.n	8001964 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	691a      	ldr	r2, [r3, #16]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2201      	movs	r2, #1
 8001968:	615a      	str	r2, [r3, #20]
}
 800196a:	bf00      	nop
 800196c:	3714      	adds	r7, #20
 800196e:	46bd      	mov	sp, r7
 8001970:	bc80      	pop	{r7}
 8001972:	4770      	bx	lr
 8001974:	40012c00 	.word	0x40012c00
 8001978:	40000400 	.word	0x40000400
 800197c:	40000800 	.word	0x40000800

08001980 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001988:	bf00      	nop
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	bc80      	pop	{r7}
 8001990:	4770      	bx	lr

08001992 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001992:	b480      	push	{r7}
 8001994:	b083      	sub	sp, #12
 8001996:	af00      	add	r7, sp, #0
 8001998:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800199a:	bf00      	nop
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	bc80      	pop	{r7}
 80019a2:	4770      	bx	lr

080019a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d101      	bne.n	80019b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e042      	b.n	8001a3c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d106      	bne.n	80019d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2200      	movs	r2, #0
 80019c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f7fe fd4e 	bl	800046c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2224      	movs	r2, #36	; 0x24
 80019d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	68da      	ldr	r2, [r3, #12]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80019e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f000 f91d 	bl	8001c28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	691a      	ldr	r2, [r3, #16]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80019fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	695a      	ldr	r2, [r3, #20]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001a0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	68da      	ldr	r2, [r3, #12]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2200      	movs	r2, #0
 8001a22:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2220      	movs	r2, #32
 8001a28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2220      	movs	r2, #32
 8001a30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2200      	movs	r2, #0
 8001a38:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001a3a:	2300      	movs	r3, #0
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3708      	adds	r7, #8
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b08a      	sub	sp, #40	; 0x28
 8001a48:	af02      	add	r7, sp, #8
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	60b9      	str	r1, [r7, #8]
 8001a4e:	603b      	str	r3, [r7, #0]
 8001a50:	4613      	mov	r3, r2
 8001a52:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001a54:	2300      	movs	r3, #0
 8001a56:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	2b20      	cmp	r3, #32
 8001a62:	d16d      	bne.n	8001b40 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d002      	beq.n	8001a70 <HAL_UART_Transmit+0x2c>
 8001a6a:	88fb      	ldrh	r3, [r7, #6]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d101      	bne.n	8001a74 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e066      	b.n	8001b42 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2200      	movs	r2, #0
 8001a78:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	2221      	movs	r2, #33	; 0x21
 8001a7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001a82:	f7fe fe65 	bl	8000750 <HAL_GetTick>
 8001a86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	88fa      	ldrh	r2, [r7, #6]
 8001a8c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	88fa      	ldrh	r2, [r7, #6]
 8001a92:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a9c:	d108      	bne.n	8001ab0 <HAL_UART_Transmit+0x6c>
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	691b      	ldr	r3, [r3, #16]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d104      	bne.n	8001ab0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	61bb      	str	r3, [r7, #24]
 8001aae:	e003      	b.n	8001ab8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001ab8:	e02a      	b.n	8001b10 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	9300      	str	r3, [sp, #0]
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	2180      	movs	r1, #128	; 0x80
 8001ac4:	68f8      	ldr	r0, [r7, #12]
 8001ac6:	f000 f840 	bl	8001b4a <UART_WaitOnFlagUntilTimeout>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e036      	b.n	8001b42 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d10b      	bne.n	8001af2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	881b      	ldrh	r3, [r3, #0]
 8001ade:	461a      	mov	r2, r3
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ae8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	3302      	adds	r3, #2
 8001aee:	61bb      	str	r3, [r7, #24]
 8001af0:	e007      	b.n	8001b02 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	781a      	ldrb	r2, [r3, #0]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	3301      	adds	r3, #1
 8001b00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	3b01      	subs	r3, #1
 8001b0a:	b29a      	uxth	r2, r3
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001b14:	b29b      	uxth	r3, r3
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d1cf      	bne.n	8001aba <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	9300      	str	r3, [sp, #0]
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	2200      	movs	r2, #0
 8001b22:	2140      	movs	r1, #64	; 0x40
 8001b24:	68f8      	ldr	r0, [r7, #12]
 8001b26:	f000 f810 	bl	8001b4a <UART_WaitOnFlagUntilTimeout>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	e006      	b.n	8001b42 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2220      	movs	r2, #32
 8001b38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	e000      	b.n	8001b42 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001b40:	2302      	movs	r3, #2
  }
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3720      	adds	r7, #32
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b090      	sub	sp, #64	; 0x40
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	60f8      	str	r0, [r7, #12]
 8001b52:	60b9      	str	r1, [r7, #8]
 8001b54:	603b      	str	r3, [r7, #0]
 8001b56:	4613      	mov	r3, r2
 8001b58:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001b5a:	e050      	b.n	8001bfe <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b62:	d04c      	beq.n	8001bfe <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001b64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d007      	beq.n	8001b7a <UART_WaitOnFlagUntilTimeout+0x30>
 8001b6a:	f7fe fdf1 	bl	8000750 <HAL_GetTick>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d241      	bcs.n	8001bfe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	330c      	adds	r3, #12
 8001b80:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b84:	e853 3f00 	ldrex	r3, [r3]
 8001b88:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001b90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	330c      	adds	r3, #12
 8001b98:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001b9a:	637a      	str	r2, [r7, #52]	; 0x34
 8001b9c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b9e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001ba0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ba2:	e841 2300 	strex	r3, r2, [r1]
 8001ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d1e5      	bne.n	8001b7a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	3314      	adds	r3, #20
 8001bb4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	e853 3f00 	ldrex	r3, [r3]
 8001bbc:	613b      	str	r3, [r7, #16]
   return(result);
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	f023 0301 	bic.w	r3, r3, #1
 8001bc4:	63bb      	str	r3, [r7, #56]	; 0x38
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	3314      	adds	r3, #20
 8001bcc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001bce:	623a      	str	r2, [r7, #32]
 8001bd0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001bd2:	69f9      	ldr	r1, [r7, #28]
 8001bd4:	6a3a      	ldr	r2, [r7, #32]
 8001bd6:	e841 2300 	strex	r3, r2, [r1]
 8001bda:	61bb      	str	r3, [r7, #24]
   return(result);
 8001bdc:	69bb      	ldr	r3, [r7, #24]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d1e5      	bne.n	8001bae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2220      	movs	r2, #32
 8001be6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2220      	movs	r2, #32
 8001bee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e00f      	b.n	8001c1e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	4013      	ands	r3, r2
 8001c08:	68ba      	ldr	r2, [r7, #8]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	bf0c      	ite	eq
 8001c0e:	2301      	moveq	r3, #1
 8001c10:	2300      	movne	r3, #0
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	461a      	mov	r2, r3
 8001c16:	79fb      	ldrb	r3, [r7, #7]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d09f      	beq.n	8001b5c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3740      	adds	r7, #64	; 0x40
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
	...

08001c28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	691b      	ldr	r3, [r3, #16]
 8001c36:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	68da      	ldr	r2, [r3, #12]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	430a      	orrs	r2, r1
 8001c44:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	689a      	ldr	r2, [r3, #8]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	691b      	ldr	r3, [r3, #16]
 8001c4e:	431a      	orrs	r2, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	695b      	ldr	r3, [r3, #20]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	68db      	ldr	r3, [r3, #12]
 8001c5e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001c62:	f023 030c 	bic.w	r3, r3, #12
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	6812      	ldr	r2, [r2, #0]
 8001c6a:	68b9      	ldr	r1, [r7, #8]
 8001c6c:	430b      	orrs	r3, r1
 8001c6e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	695b      	ldr	r3, [r3, #20]
 8001c76:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	699a      	ldr	r2, [r3, #24]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	430a      	orrs	r2, r1
 8001c84:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a2c      	ldr	r2, [pc, #176]	; (8001d3c <UART_SetConfig+0x114>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d103      	bne.n	8001c98 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001c90:	f7ff fbdc 	bl	800144c <HAL_RCC_GetPCLK2Freq>
 8001c94:	60f8      	str	r0, [r7, #12]
 8001c96:	e002      	b.n	8001c9e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001c98:	f7ff fbc4 	bl	8001424 <HAL_RCC_GetPCLK1Freq>
 8001c9c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001c9e:	68fa      	ldr	r2, [r7, #12]
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	4413      	add	r3, r2
 8001ca6:	009a      	lsls	r2, r3, #2
 8001ca8:	441a      	add	r2, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cb4:	4a22      	ldr	r2, [pc, #136]	; (8001d40 <UART_SetConfig+0x118>)
 8001cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cba:	095b      	lsrs	r3, r3, #5
 8001cbc:	0119      	lsls	r1, r3, #4
 8001cbe:	68fa      	ldr	r2, [r7, #12]
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	4413      	add	r3, r2
 8001cc6:	009a      	lsls	r2, r3, #2
 8001cc8:	441a      	add	r2, r3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001cd4:	4b1a      	ldr	r3, [pc, #104]	; (8001d40 <UART_SetConfig+0x118>)
 8001cd6:	fba3 0302 	umull	r0, r3, r3, r2
 8001cda:	095b      	lsrs	r3, r3, #5
 8001cdc:	2064      	movs	r0, #100	; 0x64
 8001cde:	fb00 f303 	mul.w	r3, r0, r3
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	011b      	lsls	r3, r3, #4
 8001ce6:	3332      	adds	r3, #50	; 0x32
 8001ce8:	4a15      	ldr	r2, [pc, #84]	; (8001d40 <UART_SetConfig+0x118>)
 8001cea:	fba2 2303 	umull	r2, r3, r2, r3
 8001cee:	095b      	lsrs	r3, r3, #5
 8001cf0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cf4:	4419      	add	r1, r3
 8001cf6:	68fa      	ldr	r2, [r7, #12]
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	4413      	add	r3, r2
 8001cfe:	009a      	lsls	r2, r3, #2
 8001d00:	441a      	add	r2, r3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d0c:	4b0c      	ldr	r3, [pc, #48]	; (8001d40 <UART_SetConfig+0x118>)
 8001d0e:	fba3 0302 	umull	r0, r3, r3, r2
 8001d12:	095b      	lsrs	r3, r3, #5
 8001d14:	2064      	movs	r0, #100	; 0x64
 8001d16:	fb00 f303 	mul.w	r3, r0, r3
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	011b      	lsls	r3, r3, #4
 8001d1e:	3332      	adds	r3, #50	; 0x32
 8001d20:	4a07      	ldr	r2, [pc, #28]	; (8001d40 <UART_SetConfig+0x118>)
 8001d22:	fba2 2303 	umull	r2, r3, r2, r3
 8001d26:	095b      	lsrs	r3, r3, #5
 8001d28:	f003 020f 	and.w	r2, r3, #15
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	440a      	add	r2, r1
 8001d32:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001d34:	bf00      	nop
 8001d36:	3710      	adds	r7, #16
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	40013800 	.word	0x40013800
 8001d40:	51eb851f 	.word	0x51eb851f

08001d44 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b085      	sub	sp, #20
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8001d52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d56:	2b84      	cmp	r3, #132	; 0x84
 8001d58:	d005      	beq.n	8001d66 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8001d5a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	4413      	add	r3, r2
 8001d62:	3303      	adds	r3, #3
 8001d64:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8001d66:	68fb      	ldr	r3, [r7, #12]
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3714      	adds	r7, #20
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bc80      	pop	{r7}
 8001d70:	4770      	bx	lr

08001d72 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001d72:	b580      	push	{r7, lr}
 8001d74:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001d76:	f000 fae7 	bl	8002348 <vTaskStartScheduler>
  
  return osOK;
 8001d7a:	2300      	movs	r3, #0
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001d80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d82:	b089      	sub	sp, #36	; 0x24
 8001d84:	af04      	add	r7, sp, #16
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	695b      	ldr	r3, [r3, #20]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d020      	beq.n	8001dd4 <osThreadCreate+0x54>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	699b      	ldr	r3, [r3, #24]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d01c      	beq.n	8001dd4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	685c      	ldr	r4, [r3, #4]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	691e      	ldr	r6, [r3, #16]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7ff ffc9 	bl	8001d44 <makeFreeRtosPriority>
 8001db2:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	695b      	ldr	r3, [r3, #20]
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001dbc:	9202      	str	r2, [sp, #8]
 8001dbe:	9301      	str	r3, [sp, #4]
 8001dc0:	9100      	str	r1, [sp, #0]
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	4632      	mov	r2, r6
 8001dc6:	4629      	mov	r1, r5
 8001dc8:	4620      	mov	r0, r4
 8001dca:	f000 f8e8 	bl	8001f9e <xTaskCreateStatic>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	60fb      	str	r3, [r7, #12]
 8001dd2:	e01c      	b.n	8001e0e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	685c      	ldr	r4, [r3, #4]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001de0:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7ff ffab 	bl	8001d44 <makeFreeRtosPriority>
 8001dee:	4602      	mov	r2, r0
 8001df0:	f107 030c 	add.w	r3, r7, #12
 8001df4:	9301      	str	r3, [sp, #4]
 8001df6:	9200      	str	r2, [sp, #0]
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	4632      	mov	r2, r6
 8001dfc:	4629      	mov	r1, r5
 8001dfe:	4620      	mov	r0, r4
 8001e00:	f000 f929 	bl	8002056 <xTaskCreate>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d001      	beq.n	8001e0e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	e000      	b.n	8001e10 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3714      	adds	r7, #20
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e18 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <osDelay+0x16>
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	e000      	b.n	8001e30 <osDelay+0x18>
 8001e2e:	2301      	movs	r3, #1
 8001e30:	4618      	mov	r0, r3
 8001e32:	f000 fa55 	bl	80022e0 <vTaskDelay>
  
  return osOK;
 8001e36:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3710      	adds	r7, #16
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f103 0208 	add.w	r2, r3, #8
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f04f 32ff 	mov.w	r2, #4294967295
 8001e58:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f103 0208 	add.w	r2, r3, #8
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	f103 0208 	add.w	r2, r3, #8
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001e74:	bf00      	nop
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bc80      	pop	{r7}
 8001e7c:	4770      	bx	lr

08001e7e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001e7e:	b480      	push	{r7}
 8001e80:	b083      	sub	sp, #12
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001e8c:	bf00      	nop
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bc80      	pop	{r7}
 8001e94:	4770      	bx	lr

08001e96 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001e96:	b480      	push	{r7}
 8001e98:	b085      	sub	sp, #20
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
 8001e9e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	68fa      	ldr	r2, [r7, #12]
 8001eaa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	689a      	ldr	r2, [r3, #8]
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	683a      	ldr	r2, [r7, #0]
 8001eba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	683a      	ldr	r2, [r7, #0]
 8001ec0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	1c5a      	adds	r2, r3, #1
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	601a      	str	r2, [r3, #0]
}
 8001ed2:	bf00      	nop
 8001ed4:	3714      	adds	r7, #20
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bc80      	pop	{r7}
 8001eda:	4770      	bx	lr

08001edc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001edc:	b480      	push	{r7}
 8001ede:	b085      	sub	sp, #20
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ef2:	d103      	bne.n	8001efc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	691b      	ldr	r3, [r3, #16]
 8001ef8:	60fb      	str	r3, [r7, #12]
 8001efa:	e00c      	b.n	8001f16 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	3308      	adds	r3, #8
 8001f00:	60fb      	str	r3, [r7, #12]
 8001f02:	e002      	b.n	8001f0a <vListInsert+0x2e>
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	60fb      	str	r3, [r7, #12]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	68ba      	ldr	r2, [r7, #8]
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d2f6      	bcs.n	8001f04 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	685a      	ldr	r2, [r3, #4]
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	683a      	ldr	r2, [r7, #0]
 8001f24:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	68fa      	ldr	r2, [r7, #12]
 8001f2a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	683a      	ldr	r2, [r7, #0]
 8001f30:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	1c5a      	adds	r2, r3, #1
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	601a      	str	r2, [r3, #0]
}
 8001f42:	bf00      	nop
 8001f44:	3714      	adds	r7, #20
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bc80      	pop	{r7}
 8001f4a:	4770      	bx	lr

08001f4c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b085      	sub	sp, #20
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	691b      	ldr	r3, [r3, #16]
 8001f58:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	6892      	ldr	r2, [r2, #8]
 8001f62:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	6852      	ldr	r2, [r2, #4]
 8001f6c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d103      	bne.n	8001f80 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	689a      	ldr	r2, [r3, #8]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	1e5a      	subs	r2, r3, #1
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3714      	adds	r7, #20
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bc80      	pop	{r7}
 8001f9c:	4770      	bx	lr

08001f9e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8001f9e:	b580      	push	{r7, lr}
 8001fa0:	b08e      	sub	sp, #56	; 0x38
 8001fa2:	af04      	add	r7, sp, #16
 8001fa4:	60f8      	str	r0, [r7, #12]
 8001fa6:	60b9      	str	r1, [r7, #8]
 8001fa8:	607a      	str	r2, [r7, #4]
 8001faa:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8001fac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d10a      	bne.n	8001fc8 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fb6:	f383 8811 	msr	BASEPRI, r3
 8001fba:	f3bf 8f6f 	isb	sy
 8001fbe:	f3bf 8f4f 	dsb	sy
 8001fc2:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001fc4:	bf00      	nop
 8001fc6:	e7fe      	b.n	8001fc6 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8001fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d10a      	bne.n	8001fe4 <xTaskCreateStatic+0x46>
	__asm volatile
 8001fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fd2:	f383 8811 	msr	BASEPRI, r3
 8001fd6:	f3bf 8f6f 	isb	sy
 8001fda:	f3bf 8f4f 	dsb	sy
 8001fde:	61fb      	str	r3, [r7, #28]
}
 8001fe0:	bf00      	nop
 8001fe2:	e7fe      	b.n	8001fe2 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8001fe4:	23a0      	movs	r3, #160	; 0xa0
 8001fe6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	2ba0      	cmp	r3, #160	; 0xa0
 8001fec:	d00a      	beq.n	8002004 <xTaskCreateStatic+0x66>
	__asm volatile
 8001fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ff2:	f383 8811 	msr	BASEPRI, r3
 8001ff6:	f3bf 8f6f 	isb	sy
 8001ffa:	f3bf 8f4f 	dsb	sy
 8001ffe:	61bb      	str	r3, [r7, #24]
}
 8002000:	bf00      	nop
 8002002:	e7fe      	b.n	8002002 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002006:	2b00      	cmp	r3, #0
 8002008:	d01e      	beq.n	8002048 <xTaskCreateStatic+0xaa>
 800200a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800200c:	2b00      	cmp	r3, #0
 800200e:	d01b      	beq.n	8002048 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002012:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002016:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002018:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800201a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201c:	2202      	movs	r2, #2
 800201e:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002022:	2300      	movs	r3, #0
 8002024:	9303      	str	r3, [sp, #12]
 8002026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002028:	9302      	str	r3, [sp, #8]
 800202a:	f107 0314 	add.w	r3, r7, #20
 800202e:	9301      	str	r3, [sp, #4]
 8002030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002032:	9300      	str	r3, [sp, #0]
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	68b9      	ldr	r1, [r7, #8]
 800203a:	68f8      	ldr	r0, [r7, #12]
 800203c:	f000 f850 	bl	80020e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002040:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002042:	f000 f8e3 	bl	800220c <prvAddNewTaskToReadyList>
 8002046:	e001      	b.n	800204c <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8002048:	2300      	movs	r3, #0
 800204a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800204c:	697b      	ldr	r3, [r7, #20]
	}
 800204e:	4618      	mov	r0, r3
 8002050:	3728      	adds	r7, #40	; 0x28
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}

08002056 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002056:	b580      	push	{r7, lr}
 8002058:	b08c      	sub	sp, #48	; 0x30
 800205a:	af04      	add	r7, sp, #16
 800205c:	60f8      	str	r0, [r7, #12]
 800205e:	60b9      	str	r1, [r7, #8]
 8002060:	603b      	str	r3, [r7, #0]
 8002062:	4613      	mov	r3, r2
 8002064:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002066:	88fb      	ldrh	r3, [r7, #6]
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	4618      	mov	r0, r3
 800206c:	f000 fe98 	bl	8002da0 <pvPortMalloc>
 8002070:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d00e      	beq.n	8002096 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002078:	20a0      	movs	r0, #160	; 0xa0
 800207a:	f000 fe91 	bl	8002da0 <pvPortMalloc>
 800207e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d003      	beq.n	800208e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	697a      	ldr	r2, [r7, #20]
 800208a:	631a      	str	r2, [r3, #48]	; 0x30
 800208c:	e005      	b.n	800209a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800208e:	6978      	ldr	r0, [r7, #20]
 8002090:	f000 ff4a 	bl	8002f28 <vPortFree>
 8002094:	e001      	b.n	800209a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002096:	2300      	movs	r3, #0
 8002098:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d017      	beq.n	80020d0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	2200      	movs	r2, #0
 80020a4:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80020a8:	88fa      	ldrh	r2, [r7, #6]
 80020aa:	2300      	movs	r3, #0
 80020ac:	9303      	str	r3, [sp, #12]
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	9302      	str	r3, [sp, #8]
 80020b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020b4:	9301      	str	r3, [sp, #4]
 80020b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020b8:	9300      	str	r3, [sp, #0]
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	68b9      	ldr	r1, [r7, #8]
 80020be:	68f8      	ldr	r0, [r7, #12]
 80020c0:	f000 f80e 	bl	80020e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80020c4:	69f8      	ldr	r0, [r7, #28]
 80020c6:	f000 f8a1 	bl	800220c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80020ca:	2301      	movs	r3, #1
 80020cc:	61bb      	str	r3, [r7, #24]
 80020ce:	e002      	b.n	80020d6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80020d0:	f04f 33ff 	mov.w	r3, #4294967295
 80020d4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80020d6:	69bb      	ldr	r3, [r7, #24]
	}
 80020d8:	4618      	mov	r0, r3
 80020da:	3720      	adds	r7, #32
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b088      	sub	sp, #32
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	607a      	str	r2, [r7, #4]
 80020ec:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80020ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80020f8:	3b01      	subs	r3, #1
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	4413      	add	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002100:	69bb      	ldr	r3, [r7, #24]
 8002102:	f023 0307 	bic.w	r3, r3, #7
 8002106:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	f003 0307 	and.w	r3, r3, #7
 800210e:	2b00      	cmp	r3, #0
 8002110:	d00a      	beq.n	8002128 <prvInitialiseNewTask+0x48>
	__asm volatile
 8002112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002116:	f383 8811 	msr	BASEPRI, r3
 800211a:	f3bf 8f6f 	isb	sy
 800211e:	f3bf 8f4f 	dsb	sy
 8002122:	617b      	str	r3, [r7, #20]
}
 8002124:	bf00      	nop
 8002126:	e7fe      	b.n	8002126 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002128:	2300      	movs	r3, #0
 800212a:	61fb      	str	r3, [r7, #28]
 800212c:	e012      	b.n	8002154 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800212e:	68ba      	ldr	r2, [r7, #8]
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	4413      	add	r3, r2
 8002134:	7819      	ldrb	r1, [r3, #0]
 8002136:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	4413      	add	r3, r2
 800213c:	3334      	adds	r3, #52	; 0x34
 800213e:	460a      	mov	r2, r1
 8002140:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002142:	68ba      	ldr	r2, [r7, #8]
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	4413      	add	r3, r2
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d006      	beq.n	800215c <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	3301      	adds	r3, #1
 8002152:	61fb      	str	r3, [r7, #28]
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	2b0f      	cmp	r3, #15
 8002158:	d9e9      	bls.n	800212e <prvInitialiseNewTask+0x4e>
 800215a:	e000      	b.n	800215e <prvInitialiseNewTask+0x7e>
		{
			break;
 800215c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800215e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002160:	2200      	movs	r2, #0
 8002162:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002168:	2b06      	cmp	r3, #6
 800216a:	d901      	bls.n	8002170 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800216c:	2306      	movs	r3, #6
 800216e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002172:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002174:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002178:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800217a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800217c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800217e:	2200      	movs	r2, #0
 8002180:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002184:	3304      	adds	r3, #4
 8002186:	4618      	mov	r0, r3
 8002188:	f7ff fe79 	bl	8001e7e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800218c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800218e:	3318      	adds	r3, #24
 8002190:	4618      	mov	r0, r3
 8002192:	f7ff fe74 	bl	8001e7e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002198:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800219a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800219c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800219e:	f1c3 0207 	rsb	r2, r3, #7
 80021a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021a4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80021a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021aa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80021ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021ae:	2200      	movs	r2, #0
 80021b0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80021b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021b6:	2200      	movs	r2, #0
 80021b8:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80021bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021be:	334c      	adds	r3, #76	; 0x4c
 80021c0:	224c      	movs	r2, #76	; 0x4c
 80021c2:	2100      	movs	r1, #0
 80021c4:	4618      	mov	r0, r3
 80021c6:	f000 ffe3 	bl	8003190 <memset>
 80021ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021cc:	4a0c      	ldr	r2, [pc, #48]	; (8002200 <prvInitialiseNewTask+0x120>)
 80021ce:	651a      	str	r2, [r3, #80]	; 0x50
 80021d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021d2:	4a0c      	ldr	r2, [pc, #48]	; (8002204 <prvInitialiseNewTask+0x124>)
 80021d4:	655a      	str	r2, [r3, #84]	; 0x54
 80021d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021d8:	4a0b      	ldr	r2, [pc, #44]	; (8002208 <prvInitialiseNewTask+0x128>)
 80021da:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80021dc:	683a      	ldr	r2, [r7, #0]
 80021de:	68f9      	ldr	r1, [r7, #12]
 80021e0:	69b8      	ldr	r0, [r7, #24]
 80021e2:	f000 fc29 	bl	8002a38 <pxPortInitialiseStack>
 80021e6:	4602      	mov	r2, r0
 80021e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021ea:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80021ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d002      	beq.n	80021f8 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80021f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021f6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80021f8:	bf00      	nop
 80021fa:	3720      	adds	r7, #32
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	20001108 	.word	0x20001108
 8002204:	20001170 	.word	0x20001170
 8002208:	200011d8 	.word	0x200011d8

0800220c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002214:	f000 fd02 	bl	8002c1c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002218:	4b2a      	ldr	r3, [pc, #168]	; (80022c4 <prvAddNewTaskToReadyList+0xb8>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	3301      	adds	r3, #1
 800221e:	4a29      	ldr	r2, [pc, #164]	; (80022c4 <prvAddNewTaskToReadyList+0xb8>)
 8002220:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002222:	4b29      	ldr	r3, [pc, #164]	; (80022c8 <prvAddNewTaskToReadyList+0xbc>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d109      	bne.n	800223e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800222a:	4a27      	ldr	r2, [pc, #156]	; (80022c8 <prvAddNewTaskToReadyList+0xbc>)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002230:	4b24      	ldr	r3, [pc, #144]	; (80022c4 <prvAddNewTaskToReadyList+0xb8>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2b01      	cmp	r3, #1
 8002236:	d110      	bne.n	800225a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002238:	f000 fad2 	bl	80027e0 <prvInitialiseTaskLists>
 800223c:	e00d      	b.n	800225a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800223e:	4b23      	ldr	r3, [pc, #140]	; (80022cc <prvAddNewTaskToReadyList+0xc0>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d109      	bne.n	800225a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002246:	4b20      	ldr	r3, [pc, #128]	; (80022c8 <prvAddNewTaskToReadyList+0xbc>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002250:	429a      	cmp	r2, r3
 8002252:	d802      	bhi.n	800225a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002254:	4a1c      	ldr	r2, [pc, #112]	; (80022c8 <prvAddNewTaskToReadyList+0xbc>)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800225a:	4b1d      	ldr	r3, [pc, #116]	; (80022d0 <prvAddNewTaskToReadyList+0xc4>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	3301      	adds	r3, #1
 8002260:	4a1b      	ldr	r2, [pc, #108]	; (80022d0 <prvAddNewTaskToReadyList+0xc4>)
 8002262:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002268:	2201      	movs	r2, #1
 800226a:	409a      	lsls	r2, r3
 800226c:	4b19      	ldr	r3, [pc, #100]	; (80022d4 <prvAddNewTaskToReadyList+0xc8>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4313      	orrs	r3, r2
 8002272:	4a18      	ldr	r2, [pc, #96]	; (80022d4 <prvAddNewTaskToReadyList+0xc8>)
 8002274:	6013      	str	r3, [r2, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800227a:	4613      	mov	r3, r2
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	4413      	add	r3, r2
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	4a15      	ldr	r2, [pc, #84]	; (80022d8 <prvAddNewTaskToReadyList+0xcc>)
 8002284:	441a      	add	r2, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	3304      	adds	r3, #4
 800228a:	4619      	mov	r1, r3
 800228c:	4610      	mov	r0, r2
 800228e:	f7ff fe02 	bl	8001e96 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002292:	f000 fcf3 	bl	8002c7c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002296:	4b0d      	ldr	r3, [pc, #52]	; (80022cc <prvAddNewTaskToReadyList+0xc0>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d00e      	beq.n	80022bc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800229e:	4b0a      	ldr	r3, [pc, #40]	; (80022c8 <prvAddNewTaskToReadyList+0xbc>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d207      	bcs.n	80022bc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80022ac:	4b0b      	ldr	r3, [pc, #44]	; (80022dc <prvAddNewTaskToReadyList+0xd0>)
 80022ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022b2:	601a      	str	r2, [r3, #0]
 80022b4:	f3bf 8f4f 	dsb	sy
 80022b8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80022bc:	bf00      	nop
 80022be:	3708      	adds	r7, #8
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	200004bc 	.word	0x200004bc
 80022c8:	200003bc 	.word	0x200003bc
 80022cc:	200004c8 	.word	0x200004c8
 80022d0:	200004d8 	.word	0x200004d8
 80022d4:	200004c4 	.word	0x200004c4
 80022d8:	200003c0 	.word	0x200003c0
 80022dc:	e000ed04 	.word	0xe000ed04

080022e0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80022e8:	2300      	movs	r3, #0
 80022ea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d017      	beq.n	8002322 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80022f2:	4b13      	ldr	r3, [pc, #76]	; (8002340 <vTaskDelay+0x60>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d00a      	beq.n	8002310 <vTaskDelay+0x30>
	__asm volatile
 80022fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022fe:	f383 8811 	msr	BASEPRI, r3
 8002302:	f3bf 8f6f 	isb	sy
 8002306:	f3bf 8f4f 	dsb	sy
 800230a:	60bb      	str	r3, [r7, #8]
}
 800230c:	bf00      	nop
 800230e:	e7fe      	b.n	800230e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002310:	f000 f884 	bl	800241c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002314:	2100      	movs	r1, #0
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f000 fb28 	bl	800296c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800231c:	f000 f88c 	bl	8002438 <xTaskResumeAll>
 8002320:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d107      	bne.n	8002338 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002328:	4b06      	ldr	r3, [pc, #24]	; (8002344 <vTaskDelay+0x64>)
 800232a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800232e:	601a      	str	r2, [r3, #0]
 8002330:	f3bf 8f4f 	dsb	sy
 8002334:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002338:	bf00      	nop
 800233a:	3710      	adds	r7, #16
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	200004e4 	.word	0x200004e4
 8002344:	e000ed04 	.word	0xe000ed04

08002348 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b08a      	sub	sp, #40	; 0x28
 800234c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800234e:	2300      	movs	r3, #0
 8002350:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002352:	2300      	movs	r3, #0
 8002354:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002356:	463a      	mov	r2, r7
 8002358:	1d39      	adds	r1, r7, #4
 800235a:	f107 0308 	add.w	r3, r7, #8
 800235e:	4618      	mov	r0, r3
 8002360:	f7fd fef6 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002364:	6839      	ldr	r1, [r7, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	68ba      	ldr	r2, [r7, #8]
 800236a:	9202      	str	r2, [sp, #8]
 800236c:	9301      	str	r3, [sp, #4]
 800236e:	2300      	movs	r3, #0
 8002370:	9300      	str	r3, [sp, #0]
 8002372:	2300      	movs	r3, #0
 8002374:	460a      	mov	r2, r1
 8002376:	4921      	ldr	r1, [pc, #132]	; (80023fc <vTaskStartScheduler+0xb4>)
 8002378:	4821      	ldr	r0, [pc, #132]	; (8002400 <vTaskStartScheduler+0xb8>)
 800237a:	f7ff fe10 	bl	8001f9e <xTaskCreateStatic>
 800237e:	4603      	mov	r3, r0
 8002380:	4a20      	ldr	r2, [pc, #128]	; (8002404 <vTaskStartScheduler+0xbc>)
 8002382:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002384:	4b1f      	ldr	r3, [pc, #124]	; (8002404 <vTaskStartScheduler+0xbc>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d002      	beq.n	8002392 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800238c:	2301      	movs	r3, #1
 800238e:	617b      	str	r3, [r7, #20]
 8002390:	e001      	b.n	8002396 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002392:	2300      	movs	r3, #0
 8002394:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	2b01      	cmp	r3, #1
 800239a:	d11b      	bne.n	80023d4 <vTaskStartScheduler+0x8c>
	__asm volatile
 800239c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023a0:	f383 8811 	msr	BASEPRI, r3
 80023a4:	f3bf 8f6f 	isb	sy
 80023a8:	f3bf 8f4f 	dsb	sy
 80023ac:	613b      	str	r3, [r7, #16]
}
 80023ae:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80023b0:	4b15      	ldr	r3, [pc, #84]	; (8002408 <vTaskStartScheduler+0xc0>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	334c      	adds	r3, #76	; 0x4c
 80023b6:	4a15      	ldr	r2, [pc, #84]	; (800240c <vTaskStartScheduler+0xc4>)
 80023b8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80023ba:	4b15      	ldr	r3, [pc, #84]	; (8002410 <vTaskStartScheduler+0xc8>)
 80023bc:	f04f 32ff 	mov.w	r2, #4294967295
 80023c0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80023c2:	4b14      	ldr	r3, [pc, #80]	; (8002414 <vTaskStartScheduler+0xcc>)
 80023c4:	2201      	movs	r2, #1
 80023c6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80023c8:	4b13      	ldr	r3, [pc, #76]	; (8002418 <vTaskStartScheduler+0xd0>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80023ce:	f000 fbb3 	bl	8002b38 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80023d2:	e00e      	b.n	80023f2 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023da:	d10a      	bne.n	80023f2 <vTaskStartScheduler+0xaa>
	__asm volatile
 80023dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023e0:	f383 8811 	msr	BASEPRI, r3
 80023e4:	f3bf 8f6f 	isb	sy
 80023e8:	f3bf 8f4f 	dsb	sy
 80023ec:	60fb      	str	r3, [r7, #12]
}
 80023ee:	bf00      	nop
 80023f0:	e7fe      	b.n	80023f0 <vTaskStartScheduler+0xa8>
}
 80023f2:	bf00      	nop
 80023f4:	3718      	adds	r7, #24
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	08003be8 	.word	0x08003be8
 8002400:	080027b1 	.word	0x080027b1
 8002404:	200004e0 	.word	0x200004e0
 8002408:	200003bc 	.word	0x200003bc
 800240c:	2000005c 	.word	0x2000005c
 8002410:	200004dc 	.word	0x200004dc
 8002414:	200004c8 	.word	0x200004c8
 8002418:	200004c0 	.word	0x200004c0

0800241c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002420:	4b04      	ldr	r3, [pc, #16]	; (8002434 <vTaskSuspendAll+0x18>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	3301      	adds	r3, #1
 8002426:	4a03      	ldr	r2, [pc, #12]	; (8002434 <vTaskSuspendAll+0x18>)
 8002428:	6013      	str	r3, [r2, #0]
}
 800242a:	bf00      	nop
 800242c:	46bd      	mov	sp, r7
 800242e:	bc80      	pop	{r7}
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	200004e4 	.word	0x200004e4

08002438 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800243e:	2300      	movs	r3, #0
 8002440:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002442:	2300      	movs	r3, #0
 8002444:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002446:	4b41      	ldr	r3, [pc, #260]	; (800254c <xTaskResumeAll+0x114>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d10a      	bne.n	8002464 <xTaskResumeAll+0x2c>
	__asm volatile
 800244e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002452:	f383 8811 	msr	BASEPRI, r3
 8002456:	f3bf 8f6f 	isb	sy
 800245a:	f3bf 8f4f 	dsb	sy
 800245e:	603b      	str	r3, [r7, #0]
}
 8002460:	bf00      	nop
 8002462:	e7fe      	b.n	8002462 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002464:	f000 fbda 	bl	8002c1c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002468:	4b38      	ldr	r3, [pc, #224]	; (800254c <xTaskResumeAll+0x114>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	3b01      	subs	r3, #1
 800246e:	4a37      	ldr	r2, [pc, #220]	; (800254c <xTaskResumeAll+0x114>)
 8002470:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002472:	4b36      	ldr	r3, [pc, #216]	; (800254c <xTaskResumeAll+0x114>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d161      	bne.n	800253e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800247a:	4b35      	ldr	r3, [pc, #212]	; (8002550 <xTaskResumeAll+0x118>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d05d      	beq.n	800253e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002482:	e02e      	b.n	80024e2 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002484:	4b33      	ldr	r3, [pc, #204]	; (8002554 <xTaskResumeAll+0x11c>)
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	3318      	adds	r3, #24
 8002490:	4618      	mov	r0, r3
 8002492:	f7ff fd5b 	bl	8001f4c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	3304      	adds	r3, #4
 800249a:	4618      	mov	r0, r3
 800249c:	f7ff fd56 	bl	8001f4c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a4:	2201      	movs	r2, #1
 80024a6:	409a      	lsls	r2, r3
 80024a8:	4b2b      	ldr	r3, [pc, #172]	; (8002558 <xTaskResumeAll+0x120>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	4a2a      	ldr	r2, [pc, #168]	; (8002558 <xTaskResumeAll+0x120>)
 80024b0:	6013      	str	r3, [r2, #0]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024b6:	4613      	mov	r3, r2
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	4413      	add	r3, r2
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	4a27      	ldr	r2, [pc, #156]	; (800255c <xTaskResumeAll+0x124>)
 80024c0:	441a      	add	r2, r3
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	3304      	adds	r3, #4
 80024c6:	4619      	mov	r1, r3
 80024c8:	4610      	mov	r0, r2
 80024ca:	f7ff fce4 	bl	8001e96 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024d2:	4b23      	ldr	r3, [pc, #140]	; (8002560 <xTaskResumeAll+0x128>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d8:	429a      	cmp	r2, r3
 80024da:	d302      	bcc.n	80024e2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80024dc:	4b21      	ldr	r3, [pc, #132]	; (8002564 <xTaskResumeAll+0x12c>)
 80024de:	2201      	movs	r2, #1
 80024e0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80024e2:	4b1c      	ldr	r3, [pc, #112]	; (8002554 <xTaskResumeAll+0x11c>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d1cc      	bne.n	8002484 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d001      	beq.n	80024f4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80024f0:	f000 fa18 	bl	8002924 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80024f4:	4b1c      	ldr	r3, [pc, #112]	; (8002568 <xTaskResumeAll+0x130>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d010      	beq.n	8002522 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002500:	f000 f836 	bl	8002570 <xTaskIncrementTick>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d002      	beq.n	8002510 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800250a:	4b16      	ldr	r3, [pc, #88]	; (8002564 <xTaskResumeAll+0x12c>)
 800250c:	2201      	movs	r2, #1
 800250e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	3b01      	subs	r3, #1
 8002514:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d1f1      	bne.n	8002500 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800251c:	4b12      	ldr	r3, [pc, #72]	; (8002568 <xTaskResumeAll+0x130>)
 800251e:	2200      	movs	r2, #0
 8002520:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002522:	4b10      	ldr	r3, [pc, #64]	; (8002564 <xTaskResumeAll+0x12c>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d009      	beq.n	800253e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800252a:	2301      	movs	r3, #1
 800252c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800252e:	4b0f      	ldr	r3, [pc, #60]	; (800256c <xTaskResumeAll+0x134>)
 8002530:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002534:	601a      	str	r2, [r3, #0]
 8002536:	f3bf 8f4f 	dsb	sy
 800253a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800253e:	f000 fb9d 	bl	8002c7c <vPortExitCritical>

	return xAlreadyYielded;
 8002542:	68bb      	ldr	r3, [r7, #8]
}
 8002544:	4618      	mov	r0, r3
 8002546:	3710      	adds	r7, #16
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	200004e4 	.word	0x200004e4
 8002550:	200004bc 	.word	0x200004bc
 8002554:	2000047c 	.word	0x2000047c
 8002558:	200004c4 	.word	0x200004c4
 800255c:	200003c0 	.word	0x200003c0
 8002560:	200003bc 	.word	0x200003bc
 8002564:	200004d0 	.word	0x200004d0
 8002568:	200004cc 	.word	0x200004cc
 800256c:	e000ed04 	.word	0xe000ed04

08002570 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b086      	sub	sp, #24
 8002574:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002576:	2300      	movs	r3, #0
 8002578:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800257a:	4b51      	ldr	r3, [pc, #324]	; (80026c0 <xTaskIncrementTick+0x150>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	2b00      	cmp	r3, #0
 8002580:	f040 808d 	bne.w	800269e <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002584:	4b4f      	ldr	r3, [pc, #316]	; (80026c4 <xTaskIncrementTick+0x154>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	3301      	adds	r3, #1
 800258a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800258c:	4a4d      	ldr	r2, [pc, #308]	; (80026c4 <xTaskIncrementTick+0x154>)
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d120      	bne.n	80025da <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002598:	4b4b      	ldr	r3, [pc, #300]	; (80026c8 <xTaskIncrementTick+0x158>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d00a      	beq.n	80025b8 <xTaskIncrementTick+0x48>
	__asm volatile
 80025a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025a6:	f383 8811 	msr	BASEPRI, r3
 80025aa:	f3bf 8f6f 	isb	sy
 80025ae:	f3bf 8f4f 	dsb	sy
 80025b2:	603b      	str	r3, [r7, #0]
}
 80025b4:	bf00      	nop
 80025b6:	e7fe      	b.n	80025b6 <xTaskIncrementTick+0x46>
 80025b8:	4b43      	ldr	r3, [pc, #268]	; (80026c8 <xTaskIncrementTick+0x158>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	60fb      	str	r3, [r7, #12]
 80025be:	4b43      	ldr	r3, [pc, #268]	; (80026cc <xTaskIncrementTick+0x15c>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a41      	ldr	r2, [pc, #260]	; (80026c8 <xTaskIncrementTick+0x158>)
 80025c4:	6013      	str	r3, [r2, #0]
 80025c6:	4a41      	ldr	r2, [pc, #260]	; (80026cc <xTaskIncrementTick+0x15c>)
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	6013      	str	r3, [r2, #0]
 80025cc:	4b40      	ldr	r3, [pc, #256]	; (80026d0 <xTaskIncrementTick+0x160>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	3301      	adds	r3, #1
 80025d2:	4a3f      	ldr	r2, [pc, #252]	; (80026d0 <xTaskIncrementTick+0x160>)
 80025d4:	6013      	str	r3, [r2, #0]
 80025d6:	f000 f9a5 	bl	8002924 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80025da:	4b3e      	ldr	r3, [pc, #248]	; (80026d4 <xTaskIncrementTick+0x164>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	693a      	ldr	r2, [r7, #16]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d34d      	bcc.n	8002680 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80025e4:	4b38      	ldr	r3, [pc, #224]	; (80026c8 <xTaskIncrementTick+0x158>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d101      	bne.n	80025f2 <xTaskIncrementTick+0x82>
 80025ee:	2301      	movs	r3, #1
 80025f0:	e000      	b.n	80025f4 <xTaskIncrementTick+0x84>
 80025f2:	2300      	movs	r3, #0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d004      	beq.n	8002602 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80025f8:	4b36      	ldr	r3, [pc, #216]	; (80026d4 <xTaskIncrementTick+0x164>)
 80025fa:	f04f 32ff 	mov.w	r2, #4294967295
 80025fe:	601a      	str	r2, [r3, #0]
					break;
 8002600:	e03e      	b.n	8002680 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002602:	4b31      	ldr	r3, [pc, #196]	; (80026c8 <xTaskIncrementTick+0x158>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002612:	693a      	ldr	r2, [r7, #16]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	429a      	cmp	r2, r3
 8002618:	d203      	bcs.n	8002622 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800261a:	4a2e      	ldr	r2, [pc, #184]	; (80026d4 <xTaskIncrementTick+0x164>)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6013      	str	r3, [r2, #0]
						break;
 8002620:	e02e      	b.n	8002680 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	3304      	adds	r3, #4
 8002626:	4618      	mov	r0, r3
 8002628:	f7ff fc90 	bl	8001f4c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002630:	2b00      	cmp	r3, #0
 8002632:	d004      	beq.n	800263e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	3318      	adds	r3, #24
 8002638:	4618      	mov	r0, r3
 800263a:	f7ff fc87 	bl	8001f4c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002642:	2201      	movs	r2, #1
 8002644:	409a      	lsls	r2, r3
 8002646:	4b24      	ldr	r3, [pc, #144]	; (80026d8 <xTaskIncrementTick+0x168>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4313      	orrs	r3, r2
 800264c:	4a22      	ldr	r2, [pc, #136]	; (80026d8 <xTaskIncrementTick+0x168>)
 800264e:	6013      	str	r3, [r2, #0]
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002654:	4613      	mov	r3, r2
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	4413      	add	r3, r2
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	4a1f      	ldr	r2, [pc, #124]	; (80026dc <xTaskIncrementTick+0x16c>)
 800265e:	441a      	add	r2, r3
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	3304      	adds	r3, #4
 8002664:	4619      	mov	r1, r3
 8002666:	4610      	mov	r0, r2
 8002668:	f7ff fc15 	bl	8001e96 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002670:	4b1b      	ldr	r3, [pc, #108]	; (80026e0 <xTaskIncrementTick+0x170>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002676:	429a      	cmp	r2, r3
 8002678:	d3b4      	bcc.n	80025e4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800267a:	2301      	movs	r3, #1
 800267c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800267e:	e7b1      	b.n	80025e4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002680:	4b17      	ldr	r3, [pc, #92]	; (80026e0 <xTaskIncrementTick+0x170>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002686:	4915      	ldr	r1, [pc, #84]	; (80026dc <xTaskIncrementTick+0x16c>)
 8002688:	4613      	mov	r3, r2
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	4413      	add	r3, r2
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	440b      	add	r3, r1
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	2b01      	cmp	r3, #1
 8002696:	d907      	bls.n	80026a8 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8002698:	2301      	movs	r3, #1
 800269a:	617b      	str	r3, [r7, #20]
 800269c:	e004      	b.n	80026a8 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800269e:	4b11      	ldr	r3, [pc, #68]	; (80026e4 <xTaskIncrementTick+0x174>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	3301      	adds	r3, #1
 80026a4:	4a0f      	ldr	r2, [pc, #60]	; (80026e4 <xTaskIncrementTick+0x174>)
 80026a6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80026a8:	4b0f      	ldr	r3, [pc, #60]	; (80026e8 <xTaskIncrementTick+0x178>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d001      	beq.n	80026b4 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80026b0:	2301      	movs	r3, #1
 80026b2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80026b4:	697b      	ldr	r3, [r7, #20]
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3718      	adds	r7, #24
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	200004e4 	.word	0x200004e4
 80026c4:	200004c0 	.word	0x200004c0
 80026c8:	20000474 	.word	0x20000474
 80026cc:	20000478 	.word	0x20000478
 80026d0:	200004d4 	.word	0x200004d4
 80026d4:	200004dc 	.word	0x200004dc
 80026d8:	200004c4 	.word	0x200004c4
 80026dc:	200003c0 	.word	0x200003c0
 80026e0:	200003bc 	.word	0x200003bc
 80026e4:	200004cc 	.word	0x200004cc
 80026e8:	200004d0 	.word	0x200004d0

080026ec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80026ec:	b480      	push	{r7}
 80026ee:	b087      	sub	sp, #28
 80026f0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80026f2:	4b29      	ldr	r3, [pc, #164]	; (8002798 <vTaskSwitchContext+0xac>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d003      	beq.n	8002702 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80026fa:	4b28      	ldr	r3, [pc, #160]	; (800279c <vTaskSwitchContext+0xb0>)
 80026fc:	2201      	movs	r2, #1
 80026fe:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002700:	e044      	b.n	800278c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8002702:	4b26      	ldr	r3, [pc, #152]	; (800279c <vTaskSwitchContext+0xb0>)
 8002704:	2200      	movs	r2, #0
 8002706:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002708:	4b25      	ldr	r3, [pc, #148]	; (80027a0 <vTaskSwitchContext+0xb4>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	fab3 f383 	clz	r3, r3
 8002714:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002716:	7afb      	ldrb	r3, [r7, #11]
 8002718:	f1c3 031f 	rsb	r3, r3, #31
 800271c:	617b      	str	r3, [r7, #20]
 800271e:	4921      	ldr	r1, [pc, #132]	; (80027a4 <vTaskSwitchContext+0xb8>)
 8002720:	697a      	ldr	r2, [r7, #20]
 8002722:	4613      	mov	r3, r2
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	4413      	add	r3, r2
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	440b      	add	r3, r1
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d10a      	bne.n	8002748 <vTaskSwitchContext+0x5c>
	__asm volatile
 8002732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002736:	f383 8811 	msr	BASEPRI, r3
 800273a:	f3bf 8f6f 	isb	sy
 800273e:	f3bf 8f4f 	dsb	sy
 8002742:	607b      	str	r3, [r7, #4]
}
 8002744:	bf00      	nop
 8002746:	e7fe      	b.n	8002746 <vTaskSwitchContext+0x5a>
 8002748:	697a      	ldr	r2, [r7, #20]
 800274a:	4613      	mov	r3, r2
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	4413      	add	r3, r2
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	4a14      	ldr	r2, [pc, #80]	; (80027a4 <vTaskSwitchContext+0xb8>)
 8002754:	4413      	add	r3, r2
 8002756:	613b      	str	r3, [r7, #16]
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	685a      	ldr	r2, [r3, #4]
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	605a      	str	r2, [r3, #4]
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	685a      	ldr	r2, [r3, #4]
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	3308      	adds	r3, #8
 800276a:	429a      	cmp	r2, r3
 800276c:	d104      	bne.n	8002778 <vTaskSwitchContext+0x8c>
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	685a      	ldr	r2, [r3, #4]
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	605a      	str	r2, [r3, #4]
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	4a0a      	ldr	r2, [pc, #40]	; (80027a8 <vTaskSwitchContext+0xbc>)
 8002780:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002782:	4b09      	ldr	r3, [pc, #36]	; (80027a8 <vTaskSwitchContext+0xbc>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	334c      	adds	r3, #76	; 0x4c
 8002788:	4a08      	ldr	r2, [pc, #32]	; (80027ac <vTaskSwitchContext+0xc0>)
 800278a:	6013      	str	r3, [r2, #0]
}
 800278c:	bf00      	nop
 800278e:	371c      	adds	r7, #28
 8002790:	46bd      	mov	sp, r7
 8002792:	bc80      	pop	{r7}
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	200004e4 	.word	0x200004e4
 800279c:	200004d0 	.word	0x200004d0
 80027a0:	200004c4 	.word	0x200004c4
 80027a4:	200003c0 	.word	0x200003c0
 80027a8:	200003bc 	.word	0x200003bc
 80027ac:	2000005c 	.word	0x2000005c

080027b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80027b8:	f000 f852 	bl	8002860 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80027bc:	4b06      	ldr	r3, [pc, #24]	; (80027d8 <prvIdleTask+0x28>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d9f9      	bls.n	80027b8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80027c4:	4b05      	ldr	r3, [pc, #20]	; (80027dc <prvIdleTask+0x2c>)
 80027c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027ca:	601a      	str	r2, [r3, #0]
 80027cc:	f3bf 8f4f 	dsb	sy
 80027d0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80027d4:	e7f0      	b.n	80027b8 <prvIdleTask+0x8>
 80027d6:	bf00      	nop
 80027d8:	200003c0 	.word	0x200003c0
 80027dc:	e000ed04 	.word	0xe000ed04

080027e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80027e6:	2300      	movs	r3, #0
 80027e8:	607b      	str	r3, [r7, #4]
 80027ea:	e00c      	b.n	8002806 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	4613      	mov	r3, r2
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	4413      	add	r3, r2
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	4a12      	ldr	r2, [pc, #72]	; (8002840 <prvInitialiseTaskLists+0x60>)
 80027f8:	4413      	add	r3, r2
 80027fa:	4618      	mov	r0, r3
 80027fc:	f7ff fb20 	bl	8001e40 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	3301      	adds	r3, #1
 8002804:	607b      	str	r3, [r7, #4]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2b06      	cmp	r3, #6
 800280a:	d9ef      	bls.n	80027ec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800280c:	480d      	ldr	r0, [pc, #52]	; (8002844 <prvInitialiseTaskLists+0x64>)
 800280e:	f7ff fb17 	bl	8001e40 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002812:	480d      	ldr	r0, [pc, #52]	; (8002848 <prvInitialiseTaskLists+0x68>)
 8002814:	f7ff fb14 	bl	8001e40 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002818:	480c      	ldr	r0, [pc, #48]	; (800284c <prvInitialiseTaskLists+0x6c>)
 800281a:	f7ff fb11 	bl	8001e40 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800281e:	480c      	ldr	r0, [pc, #48]	; (8002850 <prvInitialiseTaskLists+0x70>)
 8002820:	f7ff fb0e 	bl	8001e40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002824:	480b      	ldr	r0, [pc, #44]	; (8002854 <prvInitialiseTaskLists+0x74>)
 8002826:	f7ff fb0b 	bl	8001e40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800282a:	4b0b      	ldr	r3, [pc, #44]	; (8002858 <prvInitialiseTaskLists+0x78>)
 800282c:	4a05      	ldr	r2, [pc, #20]	; (8002844 <prvInitialiseTaskLists+0x64>)
 800282e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002830:	4b0a      	ldr	r3, [pc, #40]	; (800285c <prvInitialiseTaskLists+0x7c>)
 8002832:	4a05      	ldr	r2, [pc, #20]	; (8002848 <prvInitialiseTaskLists+0x68>)
 8002834:	601a      	str	r2, [r3, #0]
}
 8002836:	bf00      	nop
 8002838:	3708      	adds	r7, #8
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	200003c0 	.word	0x200003c0
 8002844:	2000044c 	.word	0x2000044c
 8002848:	20000460 	.word	0x20000460
 800284c:	2000047c 	.word	0x2000047c
 8002850:	20000490 	.word	0x20000490
 8002854:	200004a8 	.word	0x200004a8
 8002858:	20000474 	.word	0x20000474
 800285c:	20000478 	.word	0x20000478

08002860 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002866:	e019      	b.n	800289c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002868:	f000 f9d8 	bl	8002c1c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800286c:	4b10      	ldr	r3, [pc, #64]	; (80028b0 <prvCheckTasksWaitingTermination+0x50>)
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	3304      	adds	r3, #4
 8002878:	4618      	mov	r0, r3
 800287a:	f7ff fb67 	bl	8001f4c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800287e:	4b0d      	ldr	r3, [pc, #52]	; (80028b4 <prvCheckTasksWaitingTermination+0x54>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	3b01      	subs	r3, #1
 8002884:	4a0b      	ldr	r2, [pc, #44]	; (80028b4 <prvCheckTasksWaitingTermination+0x54>)
 8002886:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002888:	4b0b      	ldr	r3, [pc, #44]	; (80028b8 <prvCheckTasksWaitingTermination+0x58>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	3b01      	subs	r3, #1
 800288e:	4a0a      	ldr	r2, [pc, #40]	; (80028b8 <prvCheckTasksWaitingTermination+0x58>)
 8002890:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002892:	f000 f9f3 	bl	8002c7c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f000 f810 	bl	80028bc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800289c:	4b06      	ldr	r3, [pc, #24]	; (80028b8 <prvCheckTasksWaitingTermination+0x58>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d1e1      	bne.n	8002868 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80028a4:	bf00      	nop
 80028a6:	bf00      	nop
 80028a8:	3708      	adds	r7, #8
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	20000490 	.word	0x20000490
 80028b4:	200004bc 	.word	0x200004bc
 80028b8:	200004a4 	.word	0x200004a4

080028bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	334c      	adds	r3, #76	; 0x4c
 80028c8:	4618      	mov	r0, r3
 80028ca:	f000 fc69 	bl	80031a0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d108      	bne.n	80028ea <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028dc:	4618      	mov	r0, r3
 80028de:	f000 fb23 	bl	8002f28 <vPortFree>
				vPortFree( pxTCB );
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f000 fb20 	bl	8002f28 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80028e8:	e018      	b.n	800291c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d103      	bne.n	80028fc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f000 fb17 	bl	8002f28 <vPortFree>
	}
 80028fa:	e00f      	b.n	800291c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8002902:	2b02      	cmp	r3, #2
 8002904:	d00a      	beq.n	800291c <prvDeleteTCB+0x60>
	__asm volatile
 8002906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800290a:	f383 8811 	msr	BASEPRI, r3
 800290e:	f3bf 8f6f 	isb	sy
 8002912:	f3bf 8f4f 	dsb	sy
 8002916:	60fb      	str	r3, [r7, #12]
}
 8002918:	bf00      	nop
 800291a:	e7fe      	b.n	800291a <prvDeleteTCB+0x5e>
	}
 800291c:	bf00      	nop
 800291e:	3710      	adds	r7, #16
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}

08002924 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800292a:	4b0e      	ldr	r3, [pc, #56]	; (8002964 <prvResetNextTaskUnblockTime+0x40>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d101      	bne.n	8002938 <prvResetNextTaskUnblockTime+0x14>
 8002934:	2301      	movs	r3, #1
 8002936:	e000      	b.n	800293a <prvResetNextTaskUnblockTime+0x16>
 8002938:	2300      	movs	r3, #0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d004      	beq.n	8002948 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800293e:	4b0a      	ldr	r3, [pc, #40]	; (8002968 <prvResetNextTaskUnblockTime+0x44>)
 8002940:	f04f 32ff 	mov.w	r2, #4294967295
 8002944:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002946:	e008      	b.n	800295a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002948:	4b06      	ldr	r3, [pc, #24]	; (8002964 <prvResetNextTaskUnblockTime+0x40>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	4a04      	ldr	r2, [pc, #16]	; (8002968 <prvResetNextTaskUnblockTime+0x44>)
 8002958:	6013      	str	r3, [r2, #0]
}
 800295a:	bf00      	nop
 800295c:	370c      	adds	r7, #12
 800295e:	46bd      	mov	sp, r7
 8002960:	bc80      	pop	{r7}
 8002962:	4770      	bx	lr
 8002964:	20000474 	.word	0x20000474
 8002968:	200004dc 	.word	0x200004dc

0800296c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002976:	4b29      	ldr	r3, [pc, #164]	; (8002a1c <prvAddCurrentTaskToDelayedList+0xb0>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800297c:	4b28      	ldr	r3, [pc, #160]	; (8002a20 <prvAddCurrentTaskToDelayedList+0xb4>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	3304      	adds	r3, #4
 8002982:	4618      	mov	r0, r3
 8002984:	f7ff fae2 	bl	8001f4c <uxListRemove>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d10b      	bne.n	80029a6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800298e:	4b24      	ldr	r3, [pc, #144]	; (8002a20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002994:	2201      	movs	r2, #1
 8002996:	fa02 f303 	lsl.w	r3, r2, r3
 800299a:	43da      	mvns	r2, r3
 800299c:	4b21      	ldr	r3, [pc, #132]	; (8002a24 <prvAddCurrentTaskToDelayedList+0xb8>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4013      	ands	r3, r2
 80029a2:	4a20      	ldr	r2, [pc, #128]	; (8002a24 <prvAddCurrentTaskToDelayedList+0xb8>)
 80029a4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ac:	d10a      	bne.n	80029c4 <prvAddCurrentTaskToDelayedList+0x58>
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d007      	beq.n	80029c4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80029b4:	4b1a      	ldr	r3, [pc, #104]	; (8002a20 <prvAddCurrentTaskToDelayedList+0xb4>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	3304      	adds	r3, #4
 80029ba:	4619      	mov	r1, r3
 80029bc:	481a      	ldr	r0, [pc, #104]	; (8002a28 <prvAddCurrentTaskToDelayedList+0xbc>)
 80029be:	f7ff fa6a 	bl	8001e96 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80029c2:	e026      	b.n	8002a12 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80029c4:	68fa      	ldr	r2, [r7, #12]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4413      	add	r3, r2
 80029ca:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80029cc:	4b14      	ldr	r3, [pc, #80]	; (8002a20 <prvAddCurrentTaskToDelayedList+0xb4>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	68ba      	ldr	r2, [r7, #8]
 80029d2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80029d4:	68ba      	ldr	r2, [r7, #8]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d209      	bcs.n	80029f0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80029dc:	4b13      	ldr	r3, [pc, #76]	; (8002a2c <prvAddCurrentTaskToDelayedList+0xc0>)
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	4b0f      	ldr	r3, [pc, #60]	; (8002a20 <prvAddCurrentTaskToDelayedList+0xb4>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	3304      	adds	r3, #4
 80029e6:	4619      	mov	r1, r3
 80029e8:	4610      	mov	r0, r2
 80029ea:	f7ff fa77 	bl	8001edc <vListInsert>
}
 80029ee:	e010      	b.n	8002a12 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80029f0:	4b0f      	ldr	r3, [pc, #60]	; (8002a30 <prvAddCurrentTaskToDelayedList+0xc4>)
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	4b0a      	ldr	r3, [pc, #40]	; (8002a20 <prvAddCurrentTaskToDelayedList+0xb4>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	3304      	adds	r3, #4
 80029fa:	4619      	mov	r1, r3
 80029fc:	4610      	mov	r0, r2
 80029fe:	f7ff fa6d 	bl	8001edc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002a02:	4b0c      	ldr	r3, [pc, #48]	; (8002a34 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	68ba      	ldr	r2, [r7, #8]
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d202      	bcs.n	8002a12 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002a0c:	4a09      	ldr	r2, [pc, #36]	; (8002a34 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	6013      	str	r3, [r2, #0]
}
 8002a12:	bf00      	nop
 8002a14:	3710      	adds	r7, #16
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	200004c0 	.word	0x200004c0
 8002a20:	200003bc 	.word	0x200003bc
 8002a24:	200004c4 	.word	0x200004c4
 8002a28:	200004a8 	.word	0x200004a8
 8002a2c:	20000478 	.word	0x20000478
 8002a30:	20000474 	.word	0x20000474
 8002a34:	200004dc 	.word	0x200004dc

08002a38 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b085      	sub	sp, #20
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	60b9      	str	r1, [r7, #8]
 8002a42:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	3b04      	subs	r3, #4
 8002a48:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002a50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	3b04      	subs	r3, #4
 8002a56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	f023 0201 	bic.w	r2, r3, #1
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	3b04      	subs	r3, #4
 8002a66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002a68:	4a08      	ldr	r2, [pc, #32]	; (8002a8c <pxPortInitialiseStack+0x54>)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	3b14      	subs	r3, #20
 8002a72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	3b20      	subs	r3, #32
 8002a7e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002a80:	68fb      	ldr	r3, [r7, #12]
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3714      	adds	r7, #20
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bc80      	pop	{r7}
 8002a8a:	4770      	bx	lr
 8002a8c:	08002a91 	.word	0x08002a91

08002a90 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002a90:	b480      	push	{r7}
 8002a92:	b085      	sub	sp, #20
 8002a94:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8002a96:	2300      	movs	r3, #0
 8002a98:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002a9a:	4b12      	ldr	r3, [pc, #72]	; (8002ae4 <prvTaskExitError+0x54>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aa2:	d00a      	beq.n	8002aba <prvTaskExitError+0x2a>
	__asm volatile
 8002aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aa8:	f383 8811 	msr	BASEPRI, r3
 8002aac:	f3bf 8f6f 	isb	sy
 8002ab0:	f3bf 8f4f 	dsb	sy
 8002ab4:	60fb      	str	r3, [r7, #12]
}
 8002ab6:	bf00      	nop
 8002ab8:	e7fe      	b.n	8002ab8 <prvTaskExitError+0x28>
	__asm volatile
 8002aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002abe:	f383 8811 	msr	BASEPRI, r3
 8002ac2:	f3bf 8f6f 	isb	sy
 8002ac6:	f3bf 8f4f 	dsb	sy
 8002aca:	60bb      	str	r3, [r7, #8]
}
 8002acc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002ace:	bf00      	nop
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d0fc      	beq.n	8002ad0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002ad6:	bf00      	nop
 8002ad8:	bf00      	nop
 8002ada:	3714      	adds	r7, #20
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bc80      	pop	{r7}
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	2000000c 	.word	0x2000000c
	...

08002af0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002af0:	4b07      	ldr	r3, [pc, #28]	; (8002b10 <pxCurrentTCBConst2>)
 8002af2:	6819      	ldr	r1, [r3, #0]
 8002af4:	6808      	ldr	r0, [r1, #0]
 8002af6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002afa:	f380 8809 	msr	PSP, r0
 8002afe:	f3bf 8f6f 	isb	sy
 8002b02:	f04f 0000 	mov.w	r0, #0
 8002b06:	f380 8811 	msr	BASEPRI, r0
 8002b0a:	f04e 0e0d 	orr.w	lr, lr, #13
 8002b0e:	4770      	bx	lr

08002b10 <pxCurrentTCBConst2>:
 8002b10:	200003bc 	.word	0x200003bc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002b14:	bf00      	nop
 8002b16:	bf00      	nop

08002b18 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8002b18:	4806      	ldr	r0, [pc, #24]	; (8002b34 <prvPortStartFirstTask+0x1c>)
 8002b1a:	6800      	ldr	r0, [r0, #0]
 8002b1c:	6800      	ldr	r0, [r0, #0]
 8002b1e:	f380 8808 	msr	MSP, r0
 8002b22:	b662      	cpsie	i
 8002b24:	b661      	cpsie	f
 8002b26:	f3bf 8f4f 	dsb	sy
 8002b2a:	f3bf 8f6f 	isb	sy
 8002b2e:	df00      	svc	0
 8002b30:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002b32:	bf00      	nop
 8002b34:	e000ed08 	.word	0xe000ed08

08002b38 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002b3e:	4b32      	ldr	r3, [pc, #200]	; (8002c08 <xPortStartScheduler+0xd0>)
 8002b40:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	22f0      	movs	r2, #240	; 0xf0
 8002b4e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002b58:	78fb      	ldrb	r3, [r7, #3]
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002b60:	b2da      	uxtb	r2, r3
 8002b62:	4b2a      	ldr	r3, [pc, #168]	; (8002c0c <xPortStartScheduler+0xd4>)
 8002b64:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002b66:	4b2a      	ldr	r3, [pc, #168]	; (8002c10 <xPortStartScheduler+0xd8>)
 8002b68:	2207      	movs	r2, #7
 8002b6a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002b6c:	e009      	b.n	8002b82 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8002b6e:	4b28      	ldr	r3, [pc, #160]	; (8002c10 <xPortStartScheduler+0xd8>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	3b01      	subs	r3, #1
 8002b74:	4a26      	ldr	r2, [pc, #152]	; (8002c10 <xPortStartScheduler+0xd8>)
 8002b76:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002b78:	78fb      	ldrb	r3, [r7, #3]
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	005b      	lsls	r3, r3, #1
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002b82:	78fb      	ldrb	r3, [r7, #3]
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b8a:	2b80      	cmp	r3, #128	; 0x80
 8002b8c:	d0ef      	beq.n	8002b6e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002b8e:	4b20      	ldr	r3, [pc, #128]	; (8002c10 <xPortStartScheduler+0xd8>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f1c3 0307 	rsb	r3, r3, #7
 8002b96:	2b04      	cmp	r3, #4
 8002b98:	d00a      	beq.n	8002bb0 <xPortStartScheduler+0x78>
	__asm volatile
 8002b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b9e:	f383 8811 	msr	BASEPRI, r3
 8002ba2:	f3bf 8f6f 	isb	sy
 8002ba6:	f3bf 8f4f 	dsb	sy
 8002baa:	60bb      	str	r3, [r7, #8]
}
 8002bac:	bf00      	nop
 8002bae:	e7fe      	b.n	8002bae <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002bb0:	4b17      	ldr	r3, [pc, #92]	; (8002c10 <xPortStartScheduler+0xd8>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	021b      	lsls	r3, r3, #8
 8002bb6:	4a16      	ldr	r2, [pc, #88]	; (8002c10 <xPortStartScheduler+0xd8>)
 8002bb8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002bba:	4b15      	ldr	r3, [pc, #84]	; (8002c10 <xPortStartScheduler+0xd8>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002bc2:	4a13      	ldr	r2, [pc, #76]	; (8002c10 <xPortStartScheduler+0xd8>)
 8002bc4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	b2da      	uxtb	r2, r3
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002bce:	4b11      	ldr	r3, [pc, #68]	; (8002c14 <xPortStartScheduler+0xdc>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a10      	ldr	r2, [pc, #64]	; (8002c14 <xPortStartScheduler+0xdc>)
 8002bd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002bd8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002bda:	4b0e      	ldr	r3, [pc, #56]	; (8002c14 <xPortStartScheduler+0xdc>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a0d      	ldr	r2, [pc, #52]	; (8002c14 <xPortStartScheduler+0xdc>)
 8002be0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002be4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002be6:	f000 f8b9 	bl	8002d5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002bea:	4b0b      	ldr	r3, [pc, #44]	; (8002c18 <xPortStartScheduler+0xe0>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002bf0:	f7ff ff92 	bl	8002b18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002bf4:	f7ff fd7a 	bl	80026ec <vTaskSwitchContext>
	prvTaskExitError();
 8002bf8:	f7ff ff4a 	bl	8002a90 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002bfc:	2300      	movs	r3, #0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3710      	adds	r7, #16
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	e000e400 	.word	0xe000e400
 8002c0c:	200004e8 	.word	0x200004e8
 8002c10:	200004ec 	.word	0x200004ec
 8002c14:	e000ed20 	.word	0xe000ed20
 8002c18:	2000000c 	.word	0x2000000c

08002c1c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
	__asm volatile
 8002c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c26:	f383 8811 	msr	BASEPRI, r3
 8002c2a:	f3bf 8f6f 	isb	sy
 8002c2e:	f3bf 8f4f 	dsb	sy
 8002c32:	607b      	str	r3, [r7, #4]
}
 8002c34:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002c36:	4b0f      	ldr	r3, [pc, #60]	; (8002c74 <vPortEnterCritical+0x58>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	4a0d      	ldr	r2, [pc, #52]	; (8002c74 <vPortEnterCritical+0x58>)
 8002c3e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002c40:	4b0c      	ldr	r3, [pc, #48]	; (8002c74 <vPortEnterCritical+0x58>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d10f      	bne.n	8002c68 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002c48:	4b0b      	ldr	r3, [pc, #44]	; (8002c78 <vPortEnterCritical+0x5c>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d00a      	beq.n	8002c68 <vPortEnterCritical+0x4c>
	__asm volatile
 8002c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c56:	f383 8811 	msr	BASEPRI, r3
 8002c5a:	f3bf 8f6f 	isb	sy
 8002c5e:	f3bf 8f4f 	dsb	sy
 8002c62:	603b      	str	r3, [r7, #0]
}
 8002c64:	bf00      	nop
 8002c66:	e7fe      	b.n	8002c66 <vPortEnterCritical+0x4a>
	}
}
 8002c68:	bf00      	nop
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bc80      	pop	{r7}
 8002c70:	4770      	bx	lr
 8002c72:	bf00      	nop
 8002c74:	2000000c 	.word	0x2000000c
 8002c78:	e000ed04 	.word	0xe000ed04

08002c7c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002c82:	4b11      	ldr	r3, [pc, #68]	; (8002cc8 <vPortExitCritical+0x4c>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d10a      	bne.n	8002ca0 <vPortExitCritical+0x24>
	__asm volatile
 8002c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c8e:	f383 8811 	msr	BASEPRI, r3
 8002c92:	f3bf 8f6f 	isb	sy
 8002c96:	f3bf 8f4f 	dsb	sy
 8002c9a:	607b      	str	r3, [r7, #4]
}
 8002c9c:	bf00      	nop
 8002c9e:	e7fe      	b.n	8002c9e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8002ca0:	4b09      	ldr	r3, [pc, #36]	; (8002cc8 <vPortExitCritical+0x4c>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	3b01      	subs	r3, #1
 8002ca6:	4a08      	ldr	r2, [pc, #32]	; (8002cc8 <vPortExitCritical+0x4c>)
 8002ca8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002caa:	4b07      	ldr	r3, [pc, #28]	; (8002cc8 <vPortExitCritical+0x4c>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d105      	bne.n	8002cbe <vPortExitCritical+0x42>
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002cbc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8002cbe:	bf00      	nop
 8002cc0:	370c      	adds	r7, #12
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bc80      	pop	{r7}
 8002cc6:	4770      	bx	lr
 8002cc8:	2000000c 	.word	0x2000000c
 8002ccc:	00000000 	.word	0x00000000

08002cd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002cd0:	f3ef 8009 	mrs	r0, PSP
 8002cd4:	f3bf 8f6f 	isb	sy
 8002cd8:	4b0d      	ldr	r3, [pc, #52]	; (8002d10 <pxCurrentTCBConst>)
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002ce0:	6010      	str	r0, [r2, #0]
 8002ce2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8002ce6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002cea:	f380 8811 	msr	BASEPRI, r0
 8002cee:	f7ff fcfd 	bl	80026ec <vTaskSwitchContext>
 8002cf2:	f04f 0000 	mov.w	r0, #0
 8002cf6:	f380 8811 	msr	BASEPRI, r0
 8002cfa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8002cfe:	6819      	ldr	r1, [r3, #0]
 8002d00:	6808      	ldr	r0, [r1, #0]
 8002d02:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002d06:	f380 8809 	msr	PSP, r0
 8002d0a:	f3bf 8f6f 	isb	sy
 8002d0e:	4770      	bx	lr

08002d10 <pxCurrentTCBConst>:
 8002d10:	200003bc 	.word	0x200003bc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002d14:	bf00      	nop
 8002d16:	bf00      	nop

08002d18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b082      	sub	sp, #8
 8002d1c:	af00      	add	r7, sp, #0
	__asm volatile
 8002d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d22:	f383 8811 	msr	BASEPRI, r3
 8002d26:	f3bf 8f6f 	isb	sy
 8002d2a:	f3bf 8f4f 	dsb	sy
 8002d2e:	607b      	str	r3, [r7, #4]
}
 8002d30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002d32:	f7ff fc1d 	bl	8002570 <xTaskIncrementTick>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d003      	beq.n	8002d44 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002d3c:	4b06      	ldr	r3, [pc, #24]	; (8002d58 <SysTick_Handler+0x40>)
 8002d3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d42:	601a      	str	r2, [r3, #0]
 8002d44:	2300      	movs	r3, #0
 8002d46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	f383 8811 	msr	BASEPRI, r3
}
 8002d4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8002d50:	bf00      	nop
 8002d52:	3708      	adds	r7, #8
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	e000ed04 	.word	0xe000ed04

08002d5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002d60:	4b0a      	ldr	r3, [pc, #40]	; (8002d8c <vPortSetupTimerInterrupt+0x30>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002d66:	4b0a      	ldr	r3, [pc, #40]	; (8002d90 <vPortSetupTimerInterrupt+0x34>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002d6c:	4b09      	ldr	r3, [pc, #36]	; (8002d94 <vPortSetupTimerInterrupt+0x38>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a09      	ldr	r2, [pc, #36]	; (8002d98 <vPortSetupTimerInterrupt+0x3c>)
 8002d72:	fba2 2303 	umull	r2, r3, r2, r3
 8002d76:	099b      	lsrs	r3, r3, #6
 8002d78:	4a08      	ldr	r2, [pc, #32]	; (8002d9c <vPortSetupTimerInterrupt+0x40>)
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002d7e:	4b03      	ldr	r3, [pc, #12]	; (8002d8c <vPortSetupTimerInterrupt+0x30>)
 8002d80:	2207      	movs	r2, #7
 8002d82:	601a      	str	r2, [r3, #0]
}
 8002d84:	bf00      	nop
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bc80      	pop	{r7}
 8002d8a:	4770      	bx	lr
 8002d8c:	e000e010 	.word	0xe000e010
 8002d90:	e000e018 	.word	0xe000e018
 8002d94:	20000000 	.word	0x20000000
 8002d98:	10624dd3 	.word	0x10624dd3
 8002d9c:	e000e014 	.word	0xe000e014

08002da0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b08a      	sub	sp, #40	; 0x28
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002da8:	2300      	movs	r3, #0
 8002daa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002dac:	f7ff fb36 	bl	800241c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002db0:	4b58      	ldr	r3, [pc, #352]	; (8002f14 <pvPortMalloc+0x174>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d101      	bne.n	8002dbc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002db8:	f000 f910 	bl	8002fdc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002dbc:	4b56      	ldr	r3, [pc, #344]	; (8002f18 <pvPortMalloc+0x178>)
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	f040 808e 	bne.w	8002ee6 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d01d      	beq.n	8002e0c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8002dd0:	2208      	movs	r2, #8
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4413      	add	r3, r2
 8002dd6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f003 0307 	and.w	r3, r3, #7
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d014      	beq.n	8002e0c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f023 0307 	bic.w	r3, r3, #7
 8002de8:	3308      	adds	r3, #8
 8002dea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f003 0307 	and.w	r3, r3, #7
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d00a      	beq.n	8002e0c <pvPortMalloc+0x6c>
	__asm volatile
 8002df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dfa:	f383 8811 	msr	BASEPRI, r3
 8002dfe:	f3bf 8f6f 	isb	sy
 8002e02:	f3bf 8f4f 	dsb	sy
 8002e06:	617b      	str	r3, [r7, #20]
}
 8002e08:	bf00      	nop
 8002e0a:	e7fe      	b.n	8002e0a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d069      	beq.n	8002ee6 <pvPortMalloc+0x146>
 8002e12:	4b42      	ldr	r3, [pc, #264]	; (8002f1c <pvPortMalloc+0x17c>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d864      	bhi.n	8002ee6 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002e1c:	4b40      	ldr	r3, [pc, #256]	; (8002f20 <pvPortMalloc+0x180>)
 8002e1e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002e20:	4b3f      	ldr	r3, [pc, #252]	; (8002f20 <pvPortMalloc+0x180>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002e26:	e004      	b.n	8002e32 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8002e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d903      	bls.n	8002e44 <pvPortMalloc+0xa4>
 8002e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d1f1      	bne.n	8002e28 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002e44:	4b33      	ldr	r3, [pc, #204]	; (8002f14 <pvPortMalloc+0x174>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d04b      	beq.n	8002ee6 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002e4e:	6a3b      	ldr	r3, [r7, #32]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	2208      	movs	r2, #8
 8002e54:	4413      	add	r3, r2
 8002e56:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	6a3b      	ldr	r3, [r7, #32]
 8002e5e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e62:	685a      	ldr	r2, [r3, #4]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	1ad2      	subs	r2, r2, r3
 8002e68:	2308      	movs	r3, #8
 8002e6a:	005b      	lsls	r3, r3, #1
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d91f      	bls.n	8002eb0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002e70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4413      	add	r3, r2
 8002e76:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	f003 0307 	and.w	r3, r3, #7
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d00a      	beq.n	8002e98 <pvPortMalloc+0xf8>
	__asm volatile
 8002e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e86:	f383 8811 	msr	BASEPRI, r3
 8002e8a:	f3bf 8f6f 	isb	sy
 8002e8e:	f3bf 8f4f 	dsb	sy
 8002e92:	613b      	str	r3, [r7, #16]
}
 8002e94:	bf00      	nop
 8002e96:	e7fe      	b.n	8002e96 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9a:	685a      	ldr	r2, [r3, #4]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	1ad2      	subs	r2, r2, r3
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002eaa:	69b8      	ldr	r0, [r7, #24]
 8002eac:	f000 f8f8 	bl	80030a0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002eb0:	4b1a      	ldr	r3, [pc, #104]	; (8002f1c <pvPortMalloc+0x17c>)
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	4a18      	ldr	r2, [pc, #96]	; (8002f1c <pvPortMalloc+0x17c>)
 8002ebc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002ebe:	4b17      	ldr	r3, [pc, #92]	; (8002f1c <pvPortMalloc+0x17c>)
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	4b18      	ldr	r3, [pc, #96]	; (8002f24 <pvPortMalloc+0x184>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d203      	bcs.n	8002ed2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002eca:	4b14      	ldr	r3, [pc, #80]	; (8002f1c <pvPortMalloc+0x17c>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a15      	ldr	r2, [pc, #84]	; (8002f24 <pvPortMalloc+0x184>)
 8002ed0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed4:	685a      	ldr	r2, [r3, #4]
 8002ed6:	4b10      	ldr	r3, [pc, #64]	; (8002f18 <pvPortMalloc+0x178>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	431a      	orrs	r2, r3
 8002edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ede:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002ee6:	f7ff faa7 	bl	8002438 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	f003 0307 	and.w	r3, r3, #7
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d00a      	beq.n	8002f0a <pvPortMalloc+0x16a>
	__asm volatile
 8002ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ef8:	f383 8811 	msr	BASEPRI, r3
 8002efc:	f3bf 8f6f 	isb	sy
 8002f00:	f3bf 8f4f 	dsb	sy
 8002f04:	60fb      	str	r3, [r7, #12]
}
 8002f06:	bf00      	nop
 8002f08:	e7fe      	b.n	8002f08 <pvPortMalloc+0x168>
	return pvReturn;
 8002f0a:	69fb      	ldr	r3, [r7, #28]
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3728      	adds	r7, #40	; 0x28
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	200010f8 	.word	0x200010f8
 8002f18:	20001104 	.word	0x20001104
 8002f1c:	200010fc 	.word	0x200010fc
 8002f20:	200010f0 	.word	0x200010f0
 8002f24:	20001100 	.word	0x20001100

08002f28 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b086      	sub	sp, #24
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d048      	beq.n	8002fcc <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002f3a:	2308      	movs	r3, #8
 8002f3c:	425b      	negs	r3, r3
 8002f3e:	697a      	ldr	r2, [r7, #20]
 8002f40:	4413      	add	r3, r2
 8002f42:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	685a      	ldr	r2, [r3, #4]
 8002f4c:	4b21      	ldr	r3, [pc, #132]	; (8002fd4 <vPortFree+0xac>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4013      	ands	r3, r2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d10a      	bne.n	8002f6c <vPortFree+0x44>
	__asm volatile
 8002f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f5a:	f383 8811 	msr	BASEPRI, r3
 8002f5e:	f3bf 8f6f 	isb	sy
 8002f62:	f3bf 8f4f 	dsb	sy
 8002f66:	60fb      	str	r3, [r7, #12]
}
 8002f68:	bf00      	nop
 8002f6a:	e7fe      	b.n	8002f6a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d00a      	beq.n	8002f8a <vPortFree+0x62>
	__asm volatile
 8002f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f78:	f383 8811 	msr	BASEPRI, r3
 8002f7c:	f3bf 8f6f 	isb	sy
 8002f80:	f3bf 8f4f 	dsb	sy
 8002f84:	60bb      	str	r3, [r7, #8]
}
 8002f86:	bf00      	nop
 8002f88:	e7fe      	b.n	8002f88 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	685a      	ldr	r2, [r3, #4]
 8002f8e:	4b11      	ldr	r3, [pc, #68]	; (8002fd4 <vPortFree+0xac>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4013      	ands	r3, r2
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d019      	beq.n	8002fcc <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d115      	bne.n	8002fcc <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	685a      	ldr	r2, [r3, #4]
 8002fa4:	4b0b      	ldr	r3, [pc, #44]	; (8002fd4 <vPortFree+0xac>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	43db      	mvns	r3, r3
 8002faa:	401a      	ands	r2, r3
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002fb0:	f7ff fa34 	bl	800241c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	685a      	ldr	r2, [r3, #4]
 8002fb8:	4b07      	ldr	r3, [pc, #28]	; (8002fd8 <vPortFree+0xb0>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	4a06      	ldr	r2, [pc, #24]	; (8002fd8 <vPortFree+0xb0>)
 8002fc0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002fc2:	6938      	ldr	r0, [r7, #16]
 8002fc4:	f000 f86c 	bl	80030a0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8002fc8:	f7ff fa36 	bl	8002438 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002fcc:	bf00      	nop
 8002fce:	3718      	adds	r7, #24
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	20001104 	.word	0x20001104
 8002fd8:	200010fc 	.word	0x200010fc

08002fdc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b085      	sub	sp, #20
 8002fe0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002fe2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002fe6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002fe8:	4b27      	ldr	r3, [pc, #156]	; (8003088 <prvHeapInit+0xac>)
 8002fea:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f003 0307 	and.w	r3, r3, #7
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d00c      	beq.n	8003010 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	3307      	adds	r3, #7
 8002ffa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f023 0307 	bic.w	r3, r3, #7
 8003002:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003004:	68ba      	ldr	r2, [r7, #8]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	4a1f      	ldr	r2, [pc, #124]	; (8003088 <prvHeapInit+0xac>)
 800300c:	4413      	add	r3, r2
 800300e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003014:	4a1d      	ldr	r2, [pc, #116]	; (800308c <prvHeapInit+0xb0>)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800301a:	4b1c      	ldr	r3, [pc, #112]	; (800308c <prvHeapInit+0xb0>)
 800301c:	2200      	movs	r2, #0
 800301e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	68ba      	ldr	r2, [r7, #8]
 8003024:	4413      	add	r3, r2
 8003026:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003028:	2208      	movs	r2, #8
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	1a9b      	subs	r3, r3, r2
 800302e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f023 0307 	bic.w	r3, r3, #7
 8003036:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	4a15      	ldr	r2, [pc, #84]	; (8003090 <prvHeapInit+0xb4>)
 800303c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800303e:	4b14      	ldr	r3, [pc, #80]	; (8003090 <prvHeapInit+0xb4>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2200      	movs	r2, #0
 8003044:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003046:	4b12      	ldr	r3, [pc, #72]	; (8003090 <prvHeapInit+0xb4>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	2200      	movs	r2, #0
 800304c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	68fa      	ldr	r2, [r7, #12]
 8003056:	1ad2      	subs	r2, r2, r3
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800305c:	4b0c      	ldr	r3, [pc, #48]	; (8003090 <prvHeapInit+0xb4>)
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	4a0a      	ldr	r2, [pc, #40]	; (8003094 <prvHeapInit+0xb8>)
 800306a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	4a09      	ldr	r2, [pc, #36]	; (8003098 <prvHeapInit+0xbc>)
 8003072:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003074:	4b09      	ldr	r3, [pc, #36]	; (800309c <prvHeapInit+0xc0>)
 8003076:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800307a:	601a      	str	r2, [r3, #0]
}
 800307c:	bf00      	nop
 800307e:	3714      	adds	r7, #20
 8003080:	46bd      	mov	sp, r7
 8003082:	bc80      	pop	{r7}
 8003084:	4770      	bx	lr
 8003086:	bf00      	nop
 8003088:	200004f0 	.word	0x200004f0
 800308c:	200010f0 	.word	0x200010f0
 8003090:	200010f8 	.word	0x200010f8
 8003094:	20001100 	.word	0x20001100
 8003098:	200010fc 	.word	0x200010fc
 800309c:	20001104 	.word	0x20001104

080030a0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80030a0:	b480      	push	{r7}
 80030a2:	b085      	sub	sp, #20
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80030a8:	4b27      	ldr	r3, [pc, #156]	; (8003148 <prvInsertBlockIntoFreeList+0xa8>)
 80030aa:	60fb      	str	r3, [r7, #12]
 80030ac:	e002      	b.n	80030b4 <prvInsertBlockIntoFreeList+0x14>
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	60fb      	str	r3, [r7, #12]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d8f7      	bhi.n	80030ae <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	68ba      	ldr	r2, [r7, #8]
 80030c8:	4413      	add	r3, r2
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d108      	bne.n	80030e2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	685a      	ldr	r2, [r3, #4]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	441a      	add	r2, r3
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	68ba      	ldr	r2, [r7, #8]
 80030ec:	441a      	add	r2, r3
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d118      	bne.n	8003128 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	4b14      	ldr	r3, [pc, #80]	; (800314c <prvInsertBlockIntoFreeList+0xac>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	429a      	cmp	r2, r3
 8003100:	d00d      	beq.n	800311e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685a      	ldr	r2, [r3, #4]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	441a      	add	r2, r3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	601a      	str	r2, [r3, #0]
 800311c:	e008      	b.n	8003130 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800311e:	4b0b      	ldr	r3, [pc, #44]	; (800314c <prvInsertBlockIntoFreeList+0xac>)
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	601a      	str	r2, [r3, #0]
 8003126:	e003      	b.n	8003130 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003130:	68fa      	ldr	r2, [r7, #12]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	429a      	cmp	r2, r3
 8003136:	d002      	beq.n	800313e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800313e:	bf00      	nop
 8003140:	3714      	adds	r7, #20
 8003142:	46bd      	mov	sp, r7
 8003144:	bc80      	pop	{r7}
 8003146:	4770      	bx	lr
 8003148:	200010f0 	.word	0x200010f0
 800314c:	200010f8 	.word	0x200010f8

08003150 <siprintf>:
 8003150:	b40e      	push	{r1, r2, r3}
 8003152:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003156:	b500      	push	{lr}
 8003158:	b09c      	sub	sp, #112	; 0x70
 800315a:	ab1d      	add	r3, sp, #116	; 0x74
 800315c:	9002      	str	r0, [sp, #8]
 800315e:	9006      	str	r0, [sp, #24]
 8003160:	9107      	str	r1, [sp, #28]
 8003162:	9104      	str	r1, [sp, #16]
 8003164:	4808      	ldr	r0, [pc, #32]	; (8003188 <siprintf+0x38>)
 8003166:	4909      	ldr	r1, [pc, #36]	; (800318c <siprintf+0x3c>)
 8003168:	f853 2b04 	ldr.w	r2, [r3], #4
 800316c:	9105      	str	r1, [sp, #20]
 800316e:	6800      	ldr	r0, [r0, #0]
 8003170:	a902      	add	r1, sp, #8
 8003172:	9301      	str	r3, [sp, #4]
 8003174:	f000 f9f2 	bl	800355c <_svfiprintf_r>
 8003178:	2200      	movs	r2, #0
 800317a:	9b02      	ldr	r3, [sp, #8]
 800317c:	701a      	strb	r2, [r3, #0]
 800317e:	b01c      	add	sp, #112	; 0x70
 8003180:	f85d eb04 	ldr.w	lr, [sp], #4
 8003184:	b003      	add	sp, #12
 8003186:	4770      	bx	lr
 8003188:	2000005c 	.word	0x2000005c
 800318c:	ffff0208 	.word	0xffff0208

08003190 <memset>:
 8003190:	4603      	mov	r3, r0
 8003192:	4402      	add	r2, r0
 8003194:	4293      	cmp	r3, r2
 8003196:	d100      	bne.n	800319a <memset+0xa>
 8003198:	4770      	bx	lr
 800319a:	f803 1b01 	strb.w	r1, [r3], #1
 800319e:	e7f9      	b.n	8003194 <memset+0x4>

080031a0 <_reclaim_reent>:
 80031a0:	4b29      	ldr	r3, [pc, #164]	; (8003248 <_reclaim_reent+0xa8>)
 80031a2:	b570      	push	{r4, r5, r6, lr}
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4604      	mov	r4, r0
 80031a8:	4283      	cmp	r3, r0
 80031aa:	d04b      	beq.n	8003244 <_reclaim_reent+0xa4>
 80031ac:	69c3      	ldr	r3, [r0, #28]
 80031ae:	b143      	cbz	r3, 80031c2 <_reclaim_reent+0x22>
 80031b0:	68db      	ldr	r3, [r3, #12]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d144      	bne.n	8003240 <_reclaim_reent+0xa0>
 80031b6:	69e3      	ldr	r3, [r4, #28]
 80031b8:	6819      	ldr	r1, [r3, #0]
 80031ba:	b111      	cbz	r1, 80031c2 <_reclaim_reent+0x22>
 80031bc:	4620      	mov	r0, r4
 80031be:	f000 f87f 	bl	80032c0 <_free_r>
 80031c2:	6961      	ldr	r1, [r4, #20]
 80031c4:	b111      	cbz	r1, 80031cc <_reclaim_reent+0x2c>
 80031c6:	4620      	mov	r0, r4
 80031c8:	f000 f87a 	bl	80032c0 <_free_r>
 80031cc:	69e1      	ldr	r1, [r4, #28]
 80031ce:	b111      	cbz	r1, 80031d6 <_reclaim_reent+0x36>
 80031d0:	4620      	mov	r0, r4
 80031d2:	f000 f875 	bl	80032c0 <_free_r>
 80031d6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80031d8:	b111      	cbz	r1, 80031e0 <_reclaim_reent+0x40>
 80031da:	4620      	mov	r0, r4
 80031dc:	f000 f870 	bl	80032c0 <_free_r>
 80031e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80031e2:	b111      	cbz	r1, 80031ea <_reclaim_reent+0x4a>
 80031e4:	4620      	mov	r0, r4
 80031e6:	f000 f86b 	bl	80032c0 <_free_r>
 80031ea:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80031ec:	b111      	cbz	r1, 80031f4 <_reclaim_reent+0x54>
 80031ee:	4620      	mov	r0, r4
 80031f0:	f000 f866 	bl	80032c0 <_free_r>
 80031f4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80031f6:	b111      	cbz	r1, 80031fe <_reclaim_reent+0x5e>
 80031f8:	4620      	mov	r0, r4
 80031fa:	f000 f861 	bl	80032c0 <_free_r>
 80031fe:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003200:	b111      	cbz	r1, 8003208 <_reclaim_reent+0x68>
 8003202:	4620      	mov	r0, r4
 8003204:	f000 f85c 	bl	80032c0 <_free_r>
 8003208:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800320a:	b111      	cbz	r1, 8003212 <_reclaim_reent+0x72>
 800320c:	4620      	mov	r0, r4
 800320e:	f000 f857 	bl	80032c0 <_free_r>
 8003212:	6a23      	ldr	r3, [r4, #32]
 8003214:	b1b3      	cbz	r3, 8003244 <_reclaim_reent+0xa4>
 8003216:	4620      	mov	r0, r4
 8003218:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800321c:	4718      	bx	r3
 800321e:	5949      	ldr	r1, [r1, r5]
 8003220:	b941      	cbnz	r1, 8003234 <_reclaim_reent+0x94>
 8003222:	3504      	adds	r5, #4
 8003224:	69e3      	ldr	r3, [r4, #28]
 8003226:	2d80      	cmp	r5, #128	; 0x80
 8003228:	68d9      	ldr	r1, [r3, #12]
 800322a:	d1f8      	bne.n	800321e <_reclaim_reent+0x7e>
 800322c:	4620      	mov	r0, r4
 800322e:	f000 f847 	bl	80032c0 <_free_r>
 8003232:	e7c0      	b.n	80031b6 <_reclaim_reent+0x16>
 8003234:	680e      	ldr	r6, [r1, #0]
 8003236:	4620      	mov	r0, r4
 8003238:	f000 f842 	bl	80032c0 <_free_r>
 800323c:	4631      	mov	r1, r6
 800323e:	e7ef      	b.n	8003220 <_reclaim_reent+0x80>
 8003240:	2500      	movs	r5, #0
 8003242:	e7ef      	b.n	8003224 <_reclaim_reent+0x84>
 8003244:	bd70      	pop	{r4, r5, r6, pc}
 8003246:	bf00      	nop
 8003248:	2000005c 	.word	0x2000005c

0800324c <__errno>:
 800324c:	4b01      	ldr	r3, [pc, #4]	; (8003254 <__errno+0x8>)
 800324e:	6818      	ldr	r0, [r3, #0]
 8003250:	4770      	bx	lr
 8003252:	bf00      	nop
 8003254:	2000005c 	.word	0x2000005c

08003258 <__libc_init_array>:
 8003258:	b570      	push	{r4, r5, r6, lr}
 800325a:	2600      	movs	r6, #0
 800325c:	4d0c      	ldr	r5, [pc, #48]	; (8003290 <__libc_init_array+0x38>)
 800325e:	4c0d      	ldr	r4, [pc, #52]	; (8003294 <__libc_init_array+0x3c>)
 8003260:	1b64      	subs	r4, r4, r5
 8003262:	10a4      	asrs	r4, r4, #2
 8003264:	42a6      	cmp	r6, r4
 8003266:	d109      	bne.n	800327c <__libc_init_array+0x24>
 8003268:	f000 fc7a 	bl	8003b60 <_init>
 800326c:	2600      	movs	r6, #0
 800326e:	4d0a      	ldr	r5, [pc, #40]	; (8003298 <__libc_init_array+0x40>)
 8003270:	4c0a      	ldr	r4, [pc, #40]	; (800329c <__libc_init_array+0x44>)
 8003272:	1b64      	subs	r4, r4, r5
 8003274:	10a4      	asrs	r4, r4, #2
 8003276:	42a6      	cmp	r6, r4
 8003278:	d105      	bne.n	8003286 <__libc_init_array+0x2e>
 800327a:	bd70      	pop	{r4, r5, r6, pc}
 800327c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003280:	4798      	blx	r3
 8003282:	3601      	adds	r6, #1
 8003284:	e7ee      	b.n	8003264 <__libc_init_array+0xc>
 8003286:	f855 3b04 	ldr.w	r3, [r5], #4
 800328a:	4798      	blx	r3
 800328c:	3601      	adds	r6, #1
 800328e:	e7f2      	b.n	8003276 <__libc_init_array+0x1e>
 8003290:	08003c50 	.word	0x08003c50
 8003294:	08003c50 	.word	0x08003c50
 8003298:	08003c50 	.word	0x08003c50
 800329c:	08003c54 	.word	0x08003c54

080032a0 <__retarget_lock_acquire_recursive>:
 80032a0:	4770      	bx	lr

080032a2 <__retarget_lock_release_recursive>:
 80032a2:	4770      	bx	lr

080032a4 <memcpy>:
 80032a4:	440a      	add	r2, r1
 80032a6:	4291      	cmp	r1, r2
 80032a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80032ac:	d100      	bne.n	80032b0 <memcpy+0xc>
 80032ae:	4770      	bx	lr
 80032b0:	b510      	push	{r4, lr}
 80032b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80032b6:	4291      	cmp	r1, r2
 80032b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80032bc:	d1f9      	bne.n	80032b2 <memcpy+0xe>
 80032be:	bd10      	pop	{r4, pc}

080032c0 <_free_r>:
 80032c0:	b538      	push	{r3, r4, r5, lr}
 80032c2:	4605      	mov	r5, r0
 80032c4:	2900      	cmp	r1, #0
 80032c6:	d040      	beq.n	800334a <_free_r+0x8a>
 80032c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80032cc:	1f0c      	subs	r4, r1, #4
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	bfb8      	it	lt
 80032d2:	18e4      	addlt	r4, r4, r3
 80032d4:	f000 f8dc 	bl	8003490 <__malloc_lock>
 80032d8:	4a1c      	ldr	r2, [pc, #112]	; (800334c <_free_r+0x8c>)
 80032da:	6813      	ldr	r3, [r2, #0]
 80032dc:	b933      	cbnz	r3, 80032ec <_free_r+0x2c>
 80032de:	6063      	str	r3, [r4, #4]
 80032e0:	6014      	str	r4, [r2, #0]
 80032e2:	4628      	mov	r0, r5
 80032e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80032e8:	f000 b8d8 	b.w	800349c <__malloc_unlock>
 80032ec:	42a3      	cmp	r3, r4
 80032ee:	d908      	bls.n	8003302 <_free_r+0x42>
 80032f0:	6820      	ldr	r0, [r4, #0]
 80032f2:	1821      	adds	r1, r4, r0
 80032f4:	428b      	cmp	r3, r1
 80032f6:	bf01      	itttt	eq
 80032f8:	6819      	ldreq	r1, [r3, #0]
 80032fa:	685b      	ldreq	r3, [r3, #4]
 80032fc:	1809      	addeq	r1, r1, r0
 80032fe:	6021      	streq	r1, [r4, #0]
 8003300:	e7ed      	b.n	80032de <_free_r+0x1e>
 8003302:	461a      	mov	r2, r3
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	b10b      	cbz	r3, 800330c <_free_r+0x4c>
 8003308:	42a3      	cmp	r3, r4
 800330a:	d9fa      	bls.n	8003302 <_free_r+0x42>
 800330c:	6811      	ldr	r1, [r2, #0]
 800330e:	1850      	adds	r0, r2, r1
 8003310:	42a0      	cmp	r0, r4
 8003312:	d10b      	bne.n	800332c <_free_r+0x6c>
 8003314:	6820      	ldr	r0, [r4, #0]
 8003316:	4401      	add	r1, r0
 8003318:	1850      	adds	r0, r2, r1
 800331a:	4283      	cmp	r3, r0
 800331c:	6011      	str	r1, [r2, #0]
 800331e:	d1e0      	bne.n	80032e2 <_free_r+0x22>
 8003320:	6818      	ldr	r0, [r3, #0]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	4408      	add	r0, r1
 8003326:	6010      	str	r0, [r2, #0]
 8003328:	6053      	str	r3, [r2, #4]
 800332a:	e7da      	b.n	80032e2 <_free_r+0x22>
 800332c:	d902      	bls.n	8003334 <_free_r+0x74>
 800332e:	230c      	movs	r3, #12
 8003330:	602b      	str	r3, [r5, #0]
 8003332:	e7d6      	b.n	80032e2 <_free_r+0x22>
 8003334:	6820      	ldr	r0, [r4, #0]
 8003336:	1821      	adds	r1, r4, r0
 8003338:	428b      	cmp	r3, r1
 800333a:	bf01      	itttt	eq
 800333c:	6819      	ldreq	r1, [r3, #0]
 800333e:	685b      	ldreq	r3, [r3, #4]
 8003340:	1809      	addeq	r1, r1, r0
 8003342:	6021      	streq	r1, [r4, #0]
 8003344:	6063      	str	r3, [r4, #4]
 8003346:	6054      	str	r4, [r2, #4]
 8003348:	e7cb      	b.n	80032e2 <_free_r+0x22>
 800334a:	bd38      	pop	{r3, r4, r5, pc}
 800334c:	20001248 	.word	0x20001248

08003350 <sbrk_aligned>:
 8003350:	b570      	push	{r4, r5, r6, lr}
 8003352:	4e0e      	ldr	r6, [pc, #56]	; (800338c <sbrk_aligned+0x3c>)
 8003354:	460c      	mov	r4, r1
 8003356:	6831      	ldr	r1, [r6, #0]
 8003358:	4605      	mov	r5, r0
 800335a:	b911      	cbnz	r1, 8003362 <sbrk_aligned+0x12>
 800335c:	f000 fbaa 	bl	8003ab4 <_sbrk_r>
 8003360:	6030      	str	r0, [r6, #0]
 8003362:	4621      	mov	r1, r4
 8003364:	4628      	mov	r0, r5
 8003366:	f000 fba5 	bl	8003ab4 <_sbrk_r>
 800336a:	1c43      	adds	r3, r0, #1
 800336c:	d00a      	beq.n	8003384 <sbrk_aligned+0x34>
 800336e:	1cc4      	adds	r4, r0, #3
 8003370:	f024 0403 	bic.w	r4, r4, #3
 8003374:	42a0      	cmp	r0, r4
 8003376:	d007      	beq.n	8003388 <sbrk_aligned+0x38>
 8003378:	1a21      	subs	r1, r4, r0
 800337a:	4628      	mov	r0, r5
 800337c:	f000 fb9a 	bl	8003ab4 <_sbrk_r>
 8003380:	3001      	adds	r0, #1
 8003382:	d101      	bne.n	8003388 <sbrk_aligned+0x38>
 8003384:	f04f 34ff 	mov.w	r4, #4294967295
 8003388:	4620      	mov	r0, r4
 800338a:	bd70      	pop	{r4, r5, r6, pc}
 800338c:	2000124c 	.word	0x2000124c

08003390 <_malloc_r>:
 8003390:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003394:	1ccd      	adds	r5, r1, #3
 8003396:	f025 0503 	bic.w	r5, r5, #3
 800339a:	3508      	adds	r5, #8
 800339c:	2d0c      	cmp	r5, #12
 800339e:	bf38      	it	cc
 80033a0:	250c      	movcc	r5, #12
 80033a2:	2d00      	cmp	r5, #0
 80033a4:	4607      	mov	r7, r0
 80033a6:	db01      	blt.n	80033ac <_malloc_r+0x1c>
 80033a8:	42a9      	cmp	r1, r5
 80033aa:	d905      	bls.n	80033b8 <_malloc_r+0x28>
 80033ac:	230c      	movs	r3, #12
 80033ae:	2600      	movs	r6, #0
 80033b0:	603b      	str	r3, [r7, #0]
 80033b2:	4630      	mov	r0, r6
 80033b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80033b8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800348c <_malloc_r+0xfc>
 80033bc:	f000 f868 	bl	8003490 <__malloc_lock>
 80033c0:	f8d8 3000 	ldr.w	r3, [r8]
 80033c4:	461c      	mov	r4, r3
 80033c6:	bb5c      	cbnz	r4, 8003420 <_malloc_r+0x90>
 80033c8:	4629      	mov	r1, r5
 80033ca:	4638      	mov	r0, r7
 80033cc:	f7ff ffc0 	bl	8003350 <sbrk_aligned>
 80033d0:	1c43      	adds	r3, r0, #1
 80033d2:	4604      	mov	r4, r0
 80033d4:	d155      	bne.n	8003482 <_malloc_r+0xf2>
 80033d6:	f8d8 4000 	ldr.w	r4, [r8]
 80033da:	4626      	mov	r6, r4
 80033dc:	2e00      	cmp	r6, #0
 80033de:	d145      	bne.n	800346c <_malloc_r+0xdc>
 80033e0:	2c00      	cmp	r4, #0
 80033e2:	d048      	beq.n	8003476 <_malloc_r+0xe6>
 80033e4:	6823      	ldr	r3, [r4, #0]
 80033e6:	4631      	mov	r1, r6
 80033e8:	4638      	mov	r0, r7
 80033ea:	eb04 0903 	add.w	r9, r4, r3
 80033ee:	f000 fb61 	bl	8003ab4 <_sbrk_r>
 80033f2:	4581      	cmp	r9, r0
 80033f4:	d13f      	bne.n	8003476 <_malloc_r+0xe6>
 80033f6:	6821      	ldr	r1, [r4, #0]
 80033f8:	4638      	mov	r0, r7
 80033fa:	1a6d      	subs	r5, r5, r1
 80033fc:	4629      	mov	r1, r5
 80033fe:	f7ff ffa7 	bl	8003350 <sbrk_aligned>
 8003402:	3001      	adds	r0, #1
 8003404:	d037      	beq.n	8003476 <_malloc_r+0xe6>
 8003406:	6823      	ldr	r3, [r4, #0]
 8003408:	442b      	add	r3, r5
 800340a:	6023      	str	r3, [r4, #0]
 800340c:	f8d8 3000 	ldr.w	r3, [r8]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d038      	beq.n	8003486 <_malloc_r+0xf6>
 8003414:	685a      	ldr	r2, [r3, #4]
 8003416:	42a2      	cmp	r2, r4
 8003418:	d12b      	bne.n	8003472 <_malloc_r+0xe2>
 800341a:	2200      	movs	r2, #0
 800341c:	605a      	str	r2, [r3, #4]
 800341e:	e00f      	b.n	8003440 <_malloc_r+0xb0>
 8003420:	6822      	ldr	r2, [r4, #0]
 8003422:	1b52      	subs	r2, r2, r5
 8003424:	d41f      	bmi.n	8003466 <_malloc_r+0xd6>
 8003426:	2a0b      	cmp	r2, #11
 8003428:	d917      	bls.n	800345a <_malloc_r+0xca>
 800342a:	1961      	adds	r1, r4, r5
 800342c:	42a3      	cmp	r3, r4
 800342e:	6025      	str	r5, [r4, #0]
 8003430:	bf18      	it	ne
 8003432:	6059      	strne	r1, [r3, #4]
 8003434:	6863      	ldr	r3, [r4, #4]
 8003436:	bf08      	it	eq
 8003438:	f8c8 1000 	streq.w	r1, [r8]
 800343c:	5162      	str	r2, [r4, r5]
 800343e:	604b      	str	r3, [r1, #4]
 8003440:	4638      	mov	r0, r7
 8003442:	f104 060b 	add.w	r6, r4, #11
 8003446:	f000 f829 	bl	800349c <__malloc_unlock>
 800344a:	f026 0607 	bic.w	r6, r6, #7
 800344e:	1d23      	adds	r3, r4, #4
 8003450:	1af2      	subs	r2, r6, r3
 8003452:	d0ae      	beq.n	80033b2 <_malloc_r+0x22>
 8003454:	1b9b      	subs	r3, r3, r6
 8003456:	50a3      	str	r3, [r4, r2]
 8003458:	e7ab      	b.n	80033b2 <_malloc_r+0x22>
 800345a:	42a3      	cmp	r3, r4
 800345c:	6862      	ldr	r2, [r4, #4]
 800345e:	d1dd      	bne.n	800341c <_malloc_r+0x8c>
 8003460:	f8c8 2000 	str.w	r2, [r8]
 8003464:	e7ec      	b.n	8003440 <_malloc_r+0xb0>
 8003466:	4623      	mov	r3, r4
 8003468:	6864      	ldr	r4, [r4, #4]
 800346a:	e7ac      	b.n	80033c6 <_malloc_r+0x36>
 800346c:	4634      	mov	r4, r6
 800346e:	6876      	ldr	r6, [r6, #4]
 8003470:	e7b4      	b.n	80033dc <_malloc_r+0x4c>
 8003472:	4613      	mov	r3, r2
 8003474:	e7cc      	b.n	8003410 <_malloc_r+0x80>
 8003476:	230c      	movs	r3, #12
 8003478:	4638      	mov	r0, r7
 800347a:	603b      	str	r3, [r7, #0]
 800347c:	f000 f80e 	bl	800349c <__malloc_unlock>
 8003480:	e797      	b.n	80033b2 <_malloc_r+0x22>
 8003482:	6025      	str	r5, [r4, #0]
 8003484:	e7dc      	b.n	8003440 <_malloc_r+0xb0>
 8003486:	605b      	str	r3, [r3, #4]
 8003488:	deff      	udf	#255	; 0xff
 800348a:	bf00      	nop
 800348c:	20001248 	.word	0x20001248

08003490 <__malloc_lock>:
 8003490:	4801      	ldr	r0, [pc, #4]	; (8003498 <__malloc_lock+0x8>)
 8003492:	f7ff bf05 	b.w	80032a0 <__retarget_lock_acquire_recursive>
 8003496:	bf00      	nop
 8003498:	20001244 	.word	0x20001244

0800349c <__malloc_unlock>:
 800349c:	4801      	ldr	r0, [pc, #4]	; (80034a4 <__malloc_unlock+0x8>)
 800349e:	f7ff bf00 	b.w	80032a2 <__retarget_lock_release_recursive>
 80034a2:	bf00      	nop
 80034a4:	20001244 	.word	0x20001244

080034a8 <__ssputs_r>:
 80034a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034ac:	461f      	mov	r7, r3
 80034ae:	688e      	ldr	r6, [r1, #8]
 80034b0:	4682      	mov	sl, r0
 80034b2:	42be      	cmp	r6, r7
 80034b4:	460c      	mov	r4, r1
 80034b6:	4690      	mov	r8, r2
 80034b8:	680b      	ldr	r3, [r1, #0]
 80034ba:	d82c      	bhi.n	8003516 <__ssputs_r+0x6e>
 80034bc:	898a      	ldrh	r2, [r1, #12]
 80034be:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80034c2:	d026      	beq.n	8003512 <__ssputs_r+0x6a>
 80034c4:	6965      	ldr	r5, [r4, #20]
 80034c6:	6909      	ldr	r1, [r1, #16]
 80034c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80034cc:	eba3 0901 	sub.w	r9, r3, r1
 80034d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80034d4:	1c7b      	adds	r3, r7, #1
 80034d6:	444b      	add	r3, r9
 80034d8:	106d      	asrs	r5, r5, #1
 80034da:	429d      	cmp	r5, r3
 80034dc:	bf38      	it	cc
 80034de:	461d      	movcc	r5, r3
 80034e0:	0553      	lsls	r3, r2, #21
 80034e2:	d527      	bpl.n	8003534 <__ssputs_r+0x8c>
 80034e4:	4629      	mov	r1, r5
 80034e6:	f7ff ff53 	bl	8003390 <_malloc_r>
 80034ea:	4606      	mov	r6, r0
 80034ec:	b360      	cbz	r0, 8003548 <__ssputs_r+0xa0>
 80034ee:	464a      	mov	r2, r9
 80034f0:	6921      	ldr	r1, [r4, #16]
 80034f2:	f7ff fed7 	bl	80032a4 <memcpy>
 80034f6:	89a3      	ldrh	r3, [r4, #12]
 80034f8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80034fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003500:	81a3      	strh	r3, [r4, #12]
 8003502:	6126      	str	r6, [r4, #16]
 8003504:	444e      	add	r6, r9
 8003506:	6026      	str	r6, [r4, #0]
 8003508:	463e      	mov	r6, r7
 800350a:	6165      	str	r5, [r4, #20]
 800350c:	eba5 0509 	sub.w	r5, r5, r9
 8003510:	60a5      	str	r5, [r4, #8]
 8003512:	42be      	cmp	r6, r7
 8003514:	d900      	bls.n	8003518 <__ssputs_r+0x70>
 8003516:	463e      	mov	r6, r7
 8003518:	4632      	mov	r2, r6
 800351a:	4641      	mov	r1, r8
 800351c:	6820      	ldr	r0, [r4, #0]
 800351e:	f000 faaf 	bl	8003a80 <memmove>
 8003522:	2000      	movs	r0, #0
 8003524:	68a3      	ldr	r3, [r4, #8]
 8003526:	1b9b      	subs	r3, r3, r6
 8003528:	60a3      	str	r3, [r4, #8]
 800352a:	6823      	ldr	r3, [r4, #0]
 800352c:	4433      	add	r3, r6
 800352e:	6023      	str	r3, [r4, #0]
 8003530:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003534:	462a      	mov	r2, r5
 8003536:	f000 fadb 	bl	8003af0 <_realloc_r>
 800353a:	4606      	mov	r6, r0
 800353c:	2800      	cmp	r0, #0
 800353e:	d1e0      	bne.n	8003502 <__ssputs_r+0x5a>
 8003540:	4650      	mov	r0, sl
 8003542:	6921      	ldr	r1, [r4, #16]
 8003544:	f7ff febc 	bl	80032c0 <_free_r>
 8003548:	230c      	movs	r3, #12
 800354a:	f8ca 3000 	str.w	r3, [sl]
 800354e:	89a3      	ldrh	r3, [r4, #12]
 8003550:	f04f 30ff 	mov.w	r0, #4294967295
 8003554:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003558:	81a3      	strh	r3, [r4, #12]
 800355a:	e7e9      	b.n	8003530 <__ssputs_r+0x88>

0800355c <_svfiprintf_r>:
 800355c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003560:	4698      	mov	r8, r3
 8003562:	898b      	ldrh	r3, [r1, #12]
 8003564:	4607      	mov	r7, r0
 8003566:	061b      	lsls	r3, r3, #24
 8003568:	460d      	mov	r5, r1
 800356a:	4614      	mov	r4, r2
 800356c:	b09d      	sub	sp, #116	; 0x74
 800356e:	d50e      	bpl.n	800358e <_svfiprintf_r+0x32>
 8003570:	690b      	ldr	r3, [r1, #16]
 8003572:	b963      	cbnz	r3, 800358e <_svfiprintf_r+0x32>
 8003574:	2140      	movs	r1, #64	; 0x40
 8003576:	f7ff ff0b 	bl	8003390 <_malloc_r>
 800357a:	6028      	str	r0, [r5, #0]
 800357c:	6128      	str	r0, [r5, #16]
 800357e:	b920      	cbnz	r0, 800358a <_svfiprintf_r+0x2e>
 8003580:	230c      	movs	r3, #12
 8003582:	603b      	str	r3, [r7, #0]
 8003584:	f04f 30ff 	mov.w	r0, #4294967295
 8003588:	e0d0      	b.n	800372c <_svfiprintf_r+0x1d0>
 800358a:	2340      	movs	r3, #64	; 0x40
 800358c:	616b      	str	r3, [r5, #20]
 800358e:	2300      	movs	r3, #0
 8003590:	9309      	str	r3, [sp, #36]	; 0x24
 8003592:	2320      	movs	r3, #32
 8003594:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003598:	2330      	movs	r3, #48	; 0x30
 800359a:	f04f 0901 	mov.w	r9, #1
 800359e:	f8cd 800c 	str.w	r8, [sp, #12]
 80035a2:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8003744 <_svfiprintf_r+0x1e8>
 80035a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80035aa:	4623      	mov	r3, r4
 80035ac:	469a      	mov	sl, r3
 80035ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80035b2:	b10a      	cbz	r2, 80035b8 <_svfiprintf_r+0x5c>
 80035b4:	2a25      	cmp	r2, #37	; 0x25
 80035b6:	d1f9      	bne.n	80035ac <_svfiprintf_r+0x50>
 80035b8:	ebba 0b04 	subs.w	fp, sl, r4
 80035bc:	d00b      	beq.n	80035d6 <_svfiprintf_r+0x7a>
 80035be:	465b      	mov	r3, fp
 80035c0:	4622      	mov	r2, r4
 80035c2:	4629      	mov	r1, r5
 80035c4:	4638      	mov	r0, r7
 80035c6:	f7ff ff6f 	bl	80034a8 <__ssputs_r>
 80035ca:	3001      	adds	r0, #1
 80035cc:	f000 80a9 	beq.w	8003722 <_svfiprintf_r+0x1c6>
 80035d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80035d2:	445a      	add	r2, fp
 80035d4:	9209      	str	r2, [sp, #36]	; 0x24
 80035d6:	f89a 3000 	ldrb.w	r3, [sl]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	f000 80a1 	beq.w	8003722 <_svfiprintf_r+0x1c6>
 80035e0:	2300      	movs	r3, #0
 80035e2:	f04f 32ff 	mov.w	r2, #4294967295
 80035e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80035ea:	f10a 0a01 	add.w	sl, sl, #1
 80035ee:	9304      	str	r3, [sp, #16]
 80035f0:	9307      	str	r3, [sp, #28]
 80035f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80035f6:	931a      	str	r3, [sp, #104]	; 0x68
 80035f8:	4654      	mov	r4, sl
 80035fa:	2205      	movs	r2, #5
 80035fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003600:	4850      	ldr	r0, [pc, #320]	; (8003744 <_svfiprintf_r+0x1e8>)
 8003602:	f000 fa67 	bl	8003ad4 <memchr>
 8003606:	9a04      	ldr	r2, [sp, #16]
 8003608:	b9d8      	cbnz	r0, 8003642 <_svfiprintf_r+0xe6>
 800360a:	06d0      	lsls	r0, r2, #27
 800360c:	bf44      	itt	mi
 800360e:	2320      	movmi	r3, #32
 8003610:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003614:	0711      	lsls	r1, r2, #28
 8003616:	bf44      	itt	mi
 8003618:	232b      	movmi	r3, #43	; 0x2b
 800361a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800361e:	f89a 3000 	ldrb.w	r3, [sl]
 8003622:	2b2a      	cmp	r3, #42	; 0x2a
 8003624:	d015      	beq.n	8003652 <_svfiprintf_r+0xf6>
 8003626:	4654      	mov	r4, sl
 8003628:	2000      	movs	r0, #0
 800362a:	f04f 0c0a 	mov.w	ip, #10
 800362e:	9a07      	ldr	r2, [sp, #28]
 8003630:	4621      	mov	r1, r4
 8003632:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003636:	3b30      	subs	r3, #48	; 0x30
 8003638:	2b09      	cmp	r3, #9
 800363a:	d94d      	bls.n	80036d8 <_svfiprintf_r+0x17c>
 800363c:	b1b0      	cbz	r0, 800366c <_svfiprintf_r+0x110>
 800363e:	9207      	str	r2, [sp, #28]
 8003640:	e014      	b.n	800366c <_svfiprintf_r+0x110>
 8003642:	eba0 0308 	sub.w	r3, r0, r8
 8003646:	fa09 f303 	lsl.w	r3, r9, r3
 800364a:	4313      	orrs	r3, r2
 800364c:	46a2      	mov	sl, r4
 800364e:	9304      	str	r3, [sp, #16]
 8003650:	e7d2      	b.n	80035f8 <_svfiprintf_r+0x9c>
 8003652:	9b03      	ldr	r3, [sp, #12]
 8003654:	1d19      	adds	r1, r3, #4
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	9103      	str	r1, [sp, #12]
 800365a:	2b00      	cmp	r3, #0
 800365c:	bfbb      	ittet	lt
 800365e:	425b      	neglt	r3, r3
 8003660:	f042 0202 	orrlt.w	r2, r2, #2
 8003664:	9307      	strge	r3, [sp, #28]
 8003666:	9307      	strlt	r3, [sp, #28]
 8003668:	bfb8      	it	lt
 800366a:	9204      	strlt	r2, [sp, #16]
 800366c:	7823      	ldrb	r3, [r4, #0]
 800366e:	2b2e      	cmp	r3, #46	; 0x2e
 8003670:	d10c      	bne.n	800368c <_svfiprintf_r+0x130>
 8003672:	7863      	ldrb	r3, [r4, #1]
 8003674:	2b2a      	cmp	r3, #42	; 0x2a
 8003676:	d134      	bne.n	80036e2 <_svfiprintf_r+0x186>
 8003678:	9b03      	ldr	r3, [sp, #12]
 800367a:	3402      	adds	r4, #2
 800367c:	1d1a      	adds	r2, r3, #4
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	9203      	str	r2, [sp, #12]
 8003682:	2b00      	cmp	r3, #0
 8003684:	bfb8      	it	lt
 8003686:	f04f 33ff 	movlt.w	r3, #4294967295
 800368a:	9305      	str	r3, [sp, #20]
 800368c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8003748 <_svfiprintf_r+0x1ec>
 8003690:	2203      	movs	r2, #3
 8003692:	4650      	mov	r0, sl
 8003694:	7821      	ldrb	r1, [r4, #0]
 8003696:	f000 fa1d 	bl	8003ad4 <memchr>
 800369a:	b138      	cbz	r0, 80036ac <_svfiprintf_r+0x150>
 800369c:	2240      	movs	r2, #64	; 0x40
 800369e:	9b04      	ldr	r3, [sp, #16]
 80036a0:	eba0 000a 	sub.w	r0, r0, sl
 80036a4:	4082      	lsls	r2, r0
 80036a6:	4313      	orrs	r3, r2
 80036a8:	3401      	adds	r4, #1
 80036aa:	9304      	str	r3, [sp, #16]
 80036ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036b0:	2206      	movs	r2, #6
 80036b2:	4826      	ldr	r0, [pc, #152]	; (800374c <_svfiprintf_r+0x1f0>)
 80036b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80036b8:	f000 fa0c 	bl	8003ad4 <memchr>
 80036bc:	2800      	cmp	r0, #0
 80036be:	d038      	beq.n	8003732 <_svfiprintf_r+0x1d6>
 80036c0:	4b23      	ldr	r3, [pc, #140]	; (8003750 <_svfiprintf_r+0x1f4>)
 80036c2:	bb1b      	cbnz	r3, 800370c <_svfiprintf_r+0x1b0>
 80036c4:	9b03      	ldr	r3, [sp, #12]
 80036c6:	3307      	adds	r3, #7
 80036c8:	f023 0307 	bic.w	r3, r3, #7
 80036cc:	3308      	adds	r3, #8
 80036ce:	9303      	str	r3, [sp, #12]
 80036d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80036d2:	4433      	add	r3, r6
 80036d4:	9309      	str	r3, [sp, #36]	; 0x24
 80036d6:	e768      	b.n	80035aa <_svfiprintf_r+0x4e>
 80036d8:	460c      	mov	r4, r1
 80036da:	2001      	movs	r0, #1
 80036dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80036e0:	e7a6      	b.n	8003630 <_svfiprintf_r+0xd4>
 80036e2:	2300      	movs	r3, #0
 80036e4:	f04f 0c0a 	mov.w	ip, #10
 80036e8:	4619      	mov	r1, r3
 80036ea:	3401      	adds	r4, #1
 80036ec:	9305      	str	r3, [sp, #20]
 80036ee:	4620      	mov	r0, r4
 80036f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80036f4:	3a30      	subs	r2, #48	; 0x30
 80036f6:	2a09      	cmp	r2, #9
 80036f8:	d903      	bls.n	8003702 <_svfiprintf_r+0x1a6>
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d0c6      	beq.n	800368c <_svfiprintf_r+0x130>
 80036fe:	9105      	str	r1, [sp, #20]
 8003700:	e7c4      	b.n	800368c <_svfiprintf_r+0x130>
 8003702:	4604      	mov	r4, r0
 8003704:	2301      	movs	r3, #1
 8003706:	fb0c 2101 	mla	r1, ip, r1, r2
 800370a:	e7f0      	b.n	80036ee <_svfiprintf_r+0x192>
 800370c:	ab03      	add	r3, sp, #12
 800370e:	9300      	str	r3, [sp, #0]
 8003710:	462a      	mov	r2, r5
 8003712:	4638      	mov	r0, r7
 8003714:	4b0f      	ldr	r3, [pc, #60]	; (8003754 <_svfiprintf_r+0x1f8>)
 8003716:	a904      	add	r1, sp, #16
 8003718:	f3af 8000 	nop.w
 800371c:	1c42      	adds	r2, r0, #1
 800371e:	4606      	mov	r6, r0
 8003720:	d1d6      	bne.n	80036d0 <_svfiprintf_r+0x174>
 8003722:	89ab      	ldrh	r3, [r5, #12]
 8003724:	065b      	lsls	r3, r3, #25
 8003726:	f53f af2d 	bmi.w	8003584 <_svfiprintf_r+0x28>
 800372a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800372c:	b01d      	add	sp, #116	; 0x74
 800372e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003732:	ab03      	add	r3, sp, #12
 8003734:	9300      	str	r3, [sp, #0]
 8003736:	462a      	mov	r2, r5
 8003738:	4638      	mov	r0, r7
 800373a:	4b06      	ldr	r3, [pc, #24]	; (8003754 <_svfiprintf_r+0x1f8>)
 800373c:	a904      	add	r1, sp, #16
 800373e:	f000 f87d 	bl	800383c <_printf_i>
 8003742:	e7eb      	b.n	800371c <_svfiprintf_r+0x1c0>
 8003744:	08003c1a 	.word	0x08003c1a
 8003748:	08003c20 	.word	0x08003c20
 800374c:	08003c24 	.word	0x08003c24
 8003750:	00000000 	.word	0x00000000
 8003754:	080034a9 	.word	0x080034a9

08003758 <_printf_common>:
 8003758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800375c:	4616      	mov	r6, r2
 800375e:	4699      	mov	r9, r3
 8003760:	688a      	ldr	r2, [r1, #8]
 8003762:	690b      	ldr	r3, [r1, #16]
 8003764:	4607      	mov	r7, r0
 8003766:	4293      	cmp	r3, r2
 8003768:	bfb8      	it	lt
 800376a:	4613      	movlt	r3, r2
 800376c:	6033      	str	r3, [r6, #0]
 800376e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003772:	460c      	mov	r4, r1
 8003774:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003778:	b10a      	cbz	r2, 800377e <_printf_common+0x26>
 800377a:	3301      	adds	r3, #1
 800377c:	6033      	str	r3, [r6, #0]
 800377e:	6823      	ldr	r3, [r4, #0]
 8003780:	0699      	lsls	r1, r3, #26
 8003782:	bf42      	ittt	mi
 8003784:	6833      	ldrmi	r3, [r6, #0]
 8003786:	3302      	addmi	r3, #2
 8003788:	6033      	strmi	r3, [r6, #0]
 800378a:	6825      	ldr	r5, [r4, #0]
 800378c:	f015 0506 	ands.w	r5, r5, #6
 8003790:	d106      	bne.n	80037a0 <_printf_common+0x48>
 8003792:	f104 0a19 	add.w	sl, r4, #25
 8003796:	68e3      	ldr	r3, [r4, #12]
 8003798:	6832      	ldr	r2, [r6, #0]
 800379a:	1a9b      	subs	r3, r3, r2
 800379c:	42ab      	cmp	r3, r5
 800379e:	dc2b      	bgt.n	80037f8 <_printf_common+0xa0>
 80037a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80037a4:	1e13      	subs	r3, r2, #0
 80037a6:	6822      	ldr	r2, [r4, #0]
 80037a8:	bf18      	it	ne
 80037aa:	2301      	movne	r3, #1
 80037ac:	0692      	lsls	r2, r2, #26
 80037ae:	d430      	bmi.n	8003812 <_printf_common+0xba>
 80037b0:	4649      	mov	r1, r9
 80037b2:	4638      	mov	r0, r7
 80037b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80037b8:	47c0      	blx	r8
 80037ba:	3001      	adds	r0, #1
 80037bc:	d023      	beq.n	8003806 <_printf_common+0xae>
 80037be:	6823      	ldr	r3, [r4, #0]
 80037c0:	6922      	ldr	r2, [r4, #16]
 80037c2:	f003 0306 	and.w	r3, r3, #6
 80037c6:	2b04      	cmp	r3, #4
 80037c8:	bf14      	ite	ne
 80037ca:	2500      	movne	r5, #0
 80037cc:	6833      	ldreq	r3, [r6, #0]
 80037ce:	f04f 0600 	mov.w	r6, #0
 80037d2:	bf08      	it	eq
 80037d4:	68e5      	ldreq	r5, [r4, #12]
 80037d6:	f104 041a 	add.w	r4, r4, #26
 80037da:	bf08      	it	eq
 80037dc:	1aed      	subeq	r5, r5, r3
 80037de:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80037e2:	bf08      	it	eq
 80037e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80037e8:	4293      	cmp	r3, r2
 80037ea:	bfc4      	itt	gt
 80037ec:	1a9b      	subgt	r3, r3, r2
 80037ee:	18ed      	addgt	r5, r5, r3
 80037f0:	42b5      	cmp	r5, r6
 80037f2:	d11a      	bne.n	800382a <_printf_common+0xd2>
 80037f4:	2000      	movs	r0, #0
 80037f6:	e008      	b.n	800380a <_printf_common+0xb2>
 80037f8:	2301      	movs	r3, #1
 80037fa:	4652      	mov	r2, sl
 80037fc:	4649      	mov	r1, r9
 80037fe:	4638      	mov	r0, r7
 8003800:	47c0      	blx	r8
 8003802:	3001      	adds	r0, #1
 8003804:	d103      	bne.n	800380e <_printf_common+0xb6>
 8003806:	f04f 30ff 	mov.w	r0, #4294967295
 800380a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800380e:	3501      	adds	r5, #1
 8003810:	e7c1      	b.n	8003796 <_printf_common+0x3e>
 8003812:	2030      	movs	r0, #48	; 0x30
 8003814:	18e1      	adds	r1, r4, r3
 8003816:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800381a:	1c5a      	adds	r2, r3, #1
 800381c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003820:	4422      	add	r2, r4
 8003822:	3302      	adds	r3, #2
 8003824:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003828:	e7c2      	b.n	80037b0 <_printf_common+0x58>
 800382a:	2301      	movs	r3, #1
 800382c:	4622      	mov	r2, r4
 800382e:	4649      	mov	r1, r9
 8003830:	4638      	mov	r0, r7
 8003832:	47c0      	blx	r8
 8003834:	3001      	adds	r0, #1
 8003836:	d0e6      	beq.n	8003806 <_printf_common+0xae>
 8003838:	3601      	adds	r6, #1
 800383a:	e7d9      	b.n	80037f0 <_printf_common+0x98>

0800383c <_printf_i>:
 800383c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003840:	7e0f      	ldrb	r7, [r1, #24]
 8003842:	4691      	mov	r9, r2
 8003844:	2f78      	cmp	r7, #120	; 0x78
 8003846:	4680      	mov	r8, r0
 8003848:	460c      	mov	r4, r1
 800384a:	469a      	mov	sl, r3
 800384c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800384e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003852:	d807      	bhi.n	8003864 <_printf_i+0x28>
 8003854:	2f62      	cmp	r7, #98	; 0x62
 8003856:	d80a      	bhi.n	800386e <_printf_i+0x32>
 8003858:	2f00      	cmp	r7, #0
 800385a:	f000 80d5 	beq.w	8003a08 <_printf_i+0x1cc>
 800385e:	2f58      	cmp	r7, #88	; 0x58
 8003860:	f000 80c1 	beq.w	80039e6 <_printf_i+0x1aa>
 8003864:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003868:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800386c:	e03a      	b.n	80038e4 <_printf_i+0xa8>
 800386e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003872:	2b15      	cmp	r3, #21
 8003874:	d8f6      	bhi.n	8003864 <_printf_i+0x28>
 8003876:	a101      	add	r1, pc, #4	; (adr r1, 800387c <_printf_i+0x40>)
 8003878:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800387c:	080038d5 	.word	0x080038d5
 8003880:	080038e9 	.word	0x080038e9
 8003884:	08003865 	.word	0x08003865
 8003888:	08003865 	.word	0x08003865
 800388c:	08003865 	.word	0x08003865
 8003890:	08003865 	.word	0x08003865
 8003894:	080038e9 	.word	0x080038e9
 8003898:	08003865 	.word	0x08003865
 800389c:	08003865 	.word	0x08003865
 80038a0:	08003865 	.word	0x08003865
 80038a4:	08003865 	.word	0x08003865
 80038a8:	080039ef 	.word	0x080039ef
 80038ac:	08003915 	.word	0x08003915
 80038b0:	080039a9 	.word	0x080039a9
 80038b4:	08003865 	.word	0x08003865
 80038b8:	08003865 	.word	0x08003865
 80038bc:	08003a11 	.word	0x08003a11
 80038c0:	08003865 	.word	0x08003865
 80038c4:	08003915 	.word	0x08003915
 80038c8:	08003865 	.word	0x08003865
 80038cc:	08003865 	.word	0x08003865
 80038d0:	080039b1 	.word	0x080039b1
 80038d4:	682b      	ldr	r3, [r5, #0]
 80038d6:	1d1a      	adds	r2, r3, #4
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	602a      	str	r2, [r5, #0]
 80038dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80038e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80038e4:	2301      	movs	r3, #1
 80038e6:	e0a0      	b.n	8003a2a <_printf_i+0x1ee>
 80038e8:	6820      	ldr	r0, [r4, #0]
 80038ea:	682b      	ldr	r3, [r5, #0]
 80038ec:	0607      	lsls	r7, r0, #24
 80038ee:	f103 0104 	add.w	r1, r3, #4
 80038f2:	6029      	str	r1, [r5, #0]
 80038f4:	d501      	bpl.n	80038fa <_printf_i+0xbe>
 80038f6:	681e      	ldr	r6, [r3, #0]
 80038f8:	e003      	b.n	8003902 <_printf_i+0xc6>
 80038fa:	0646      	lsls	r6, r0, #25
 80038fc:	d5fb      	bpl.n	80038f6 <_printf_i+0xba>
 80038fe:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003902:	2e00      	cmp	r6, #0
 8003904:	da03      	bge.n	800390e <_printf_i+0xd2>
 8003906:	232d      	movs	r3, #45	; 0x2d
 8003908:	4276      	negs	r6, r6
 800390a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800390e:	230a      	movs	r3, #10
 8003910:	4859      	ldr	r0, [pc, #356]	; (8003a78 <_printf_i+0x23c>)
 8003912:	e012      	b.n	800393a <_printf_i+0xfe>
 8003914:	682b      	ldr	r3, [r5, #0]
 8003916:	6820      	ldr	r0, [r4, #0]
 8003918:	1d19      	adds	r1, r3, #4
 800391a:	6029      	str	r1, [r5, #0]
 800391c:	0605      	lsls	r5, r0, #24
 800391e:	d501      	bpl.n	8003924 <_printf_i+0xe8>
 8003920:	681e      	ldr	r6, [r3, #0]
 8003922:	e002      	b.n	800392a <_printf_i+0xee>
 8003924:	0641      	lsls	r1, r0, #25
 8003926:	d5fb      	bpl.n	8003920 <_printf_i+0xe4>
 8003928:	881e      	ldrh	r6, [r3, #0]
 800392a:	2f6f      	cmp	r7, #111	; 0x6f
 800392c:	bf0c      	ite	eq
 800392e:	2308      	moveq	r3, #8
 8003930:	230a      	movne	r3, #10
 8003932:	4851      	ldr	r0, [pc, #324]	; (8003a78 <_printf_i+0x23c>)
 8003934:	2100      	movs	r1, #0
 8003936:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800393a:	6865      	ldr	r5, [r4, #4]
 800393c:	2d00      	cmp	r5, #0
 800393e:	bfa8      	it	ge
 8003940:	6821      	ldrge	r1, [r4, #0]
 8003942:	60a5      	str	r5, [r4, #8]
 8003944:	bfa4      	itt	ge
 8003946:	f021 0104 	bicge.w	r1, r1, #4
 800394a:	6021      	strge	r1, [r4, #0]
 800394c:	b90e      	cbnz	r6, 8003952 <_printf_i+0x116>
 800394e:	2d00      	cmp	r5, #0
 8003950:	d04b      	beq.n	80039ea <_printf_i+0x1ae>
 8003952:	4615      	mov	r5, r2
 8003954:	fbb6 f1f3 	udiv	r1, r6, r3
 8003958:	fb03 6711 	mls	r7, r3, r1, r6
 800395c:	5dc7      	ldrb	r7, [r0, r7]
 800395e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003962:	4637      	mov	r7, r6
 8003964:	42bb      	cmp	r3, r7
 8003966:	460e      	mov	r6, r1
 8003968:	d9f4      	bls.n	8003954 <_printf_i+0x118>
 800396a:	2b08      	cmp	r3, #8
 800396c:	d10b      	bne.n	8003986 <_printf_i+0x14a>
 800396e:	6823      	ldr	r3, [r4, #0]
 8003970:	07de      	lsls	r6, r3, #31
 8003972:	d508      	bpl.n	8003986 <_printf_i+0x14a>
 8003974:	6923      	ldr	r3, [r4, #16]
 8003976:	6861      	ldr	r1, [r4, #4]
 8003978:	4299      	cmp	r1, r3
 800397a:	bfde      	ittt	le
 800397c:	2330      	movle	r3, #48	; 0x30
 800397e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003982:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003986:	1b52      	subs	r2, r2, r5
 8003988:	6122      	str	r2, [r4, #16]
 800398a:	464b      	mov	r3, r9
 800398c:	4621      	mov	r1, r4
 800398e:	4640      	mov	r0, r8
 8003990:	f8cd a000 	str.w	sl, [sp]
 8003994:	aa03      	add	r2, sp, #12
 8003996:	f7ff fedf 	bl	8003758 <_printf_common>
 800399a:	3001      	adds	r0, #1
 800399c:	d14a      	bne.n	8003a34 <_printf_i+0x1f8>
 800399e:	f04f 30ff 	mov.w	r0, #4294967295
 80039a2:	b004      	add	sp, #16
 80039a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039a8:	6823      	ldr	r3, [r4, #0]
 80039aa:	f043 0320 	orr.w	r3, r3, #32
 80039ae:	6023      	str	r3, [r4, #0]
 80039b0:	2778      	movs	r7, #120	; 0x78
 80039b2:	4832      	ldr	r0, [pc, #200]	; (8003a7c <_printf_i+0x240>)
 80039b4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80039b8:	6823      	ldr	r3, [r4, #0]
 80039ba:	6829      	ldr	r1, [r5, #0]
 80039bc:	061f      	lsls	r7, r3, #24
 80039be:	f851 6b04 	ldr.w	r6, [r1], #4
 80039c2:	d402      	bmi.n	80039ca <_printf_i+0x18e>
 80039c4:	065f      	lsls	r7, r3, #25
 80039c6:	bf48      	it	mi
 80039c8:	b2b6      	uxthmi	r6, r6
 80039ca:	07df      	lsls	r7, r3, #31
 80039cc:	bf48      	it	mi
 80039ce:	f043 0320 	orrmi.w	r3, r3, #32
 80039d2:	6029      	str	r1, [r5, #0]
 80039d4:	bf48      	it	mi
 80039d6:	6023      	strmi	r3, [r4, #0]
 80039d8:	b91e      	cbnz	r6, 80039e2 <_printf_i+0x1a6>
 80039da:	6823      	ldr	r3, [r4, #0]
 80039dc:	f023 0320 	bic.w	r3, r3, #32
 80039e0:	6023      	str	r3, [r4, #0]
 80039e2:	2310      	movs	r3, #16
 80039e4:	e7a6      	b.n	8003934 <_printf_i+0xf8>
 80039e6:	4824      	ldr	r0, [pc, #144]	; (8003a78 <_printf_i+0x23c>)
 80039e8:	e7e4      	b.n	80039b4 <_printf_i+0x178>
 80039ea:	4615      	mov	r5, r2
 80039ec:	e7bd      	b.n	800396a <_printf_i+0x12e>
 80039ee:	682b      	ldr	r3, [r5, #0]
 80039f0:	6826      	ldr	r6, [r4, #0]
 80039f2:	1d18      	adds	r0, r3, #4
 80039f4:	6961      	ldr	r1, [r4, #20]
 80039f6:	6028      	str	r0, [r5, #0]
 80039f8:	0635      	lsls	r5, r6, #24
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	d501      	bpl.n	8003a02 <_printf_i+0x1c6>
 80039fe:	6019      	str	r1, [r3, #0]
 8003a00:	e002      	b.n	8003a08 <_printf_i+0x1cc>
 8003a02:	0670      	lsls	r0, r6, #25
 8003a04:	d5fb      	bpl.n	80039fe <_printf_i+0x1c2>
 8003a06:	8019      	strh	r1, [r3, #0]
 8003a08:	2300      	movs	r3, #0
 8003a0a:	4615      	mov	r5, r2
 8003a0c:	6123      	str	r3, [r4, #16]
 8003a0e:	e7bc      	b.n	800398a <_printf_i+0x14e>
 8003a10:	682b      	ldr	r3, [r5, #0]
 8003a12:	2100      	movs	r1, #0
 8003a14:	1d1a      	adds	r2, r3, #4
 8003a16:	602a      	str	r2, [r5, #0]
 8003a18:	681d      	ldr	r5, [r3, #0]
 8003a1a:	6862      	ldr	r2, [r4, #4]
 8003a1c:	4628      	mov	r0, r5
 8003a1e:	f000 f859 	bl	8003ad4 <memchr>
 8003a22:	b108      	cbz	r0, 8003a28 <_printf_i+0x1ec>
 8003a24:	1b40      	subs	r0, r0, r5
 8003a26:	6060      	str	r0, [r4, #4]
 8003a28:	6863      	ldr	r3, [r4, #4]
 8003a2a:	6123      	str	r3, [r4, #16]
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a32:	e7aa      	b.n	800398a <_printf_i+0x14e>
 8003a34:	462a      	mov	r2, r5
 8003a36:	4649      	mov	r1, r9
 8003a38:	4640      	mov	r0, r8
 8003a3a:	6923      	ldr	r3, [r4, #16]
 8003a3c:	47d0      	blx	sl
 8003a3e:	3001      	adds	r0, #1
 8003a40:	d0ad      	beq.n	800399e <_printf_i+0x162>
 8003a42:	6823      	ldr	r3, [r4, #0]
 8003a44:	079b      	lsls	r3, r3, #30
 8003a46:	d413      	bmi.n	8003a70 <_printf_i+0x234>
 8003a48:	68e0      	ldr	r0, [r4, #12]
 8003a4a:	9b03      	ldr	r3, [sp, #12]
 8003a4c:	4298      	cmp	r0, r3
 8003a4e:	bfb8      	it	lt
 8003a50:	4618      	movlt	r0, r3
 8003a52:	e7a6      	b.n	80039a2 <_printf_i+0x166>
 8003a54:	2301      	movs	r3, #1
 8003a56:	4632      	mov	r2, r6
 8003a58:	4649      	mov	r1, r9
 8003a5a:	4640      	mov	r0, r8
 8003a5c:	47d0      	blx	sl
 8003a5e:	3001      	adds	r0, #1
 8003a60:	d09d      	beq.n	800399e <_printf_i+0x162>
 8003a62:	3501      	adds	r5, #1
 8003a64:	68e3      	ldr	r3, [r4, #12]
 8003a66:	9903      	ldr	r1, [sp, #12]
 8003a68:	1a5b      	subs	r3, r3, r1
 8003a6a:	42ab      	cmp	r3, r5
 8003a6c:	dcf2      	bgt.n	8003a54 <_printf_i+0x218>
 8003a6e:	e7eb      	b.n	8003a48 <_printf_i+0x20c>
 8003a70:	2500      	movs	r5, #0
 8003a72:	f104 0619 	add.w	r6, r4, #25
 8003a76:	e7f5      	b.n	8003a64 <_printf_i+0x228>
 8003a78:	08003c2b 	.word	0x08003c2b
 8003a7c:	08003c3c 	.word	0x08003c3c

08003a80 <memmove>:
 8003a80:	4288      	cmp	r0, r1
 8003a82:	b510      	push	{r4, lr}
 8003a84:	eb01 0402 	add.w	r4, r1, r2
 8003a88:	d902      	bls.n	8003a90 <memmove+0x10>
 8003a8a:	4284      	cmp	r4, r0
 8003a8c:	4623      	mov	r3, r4
 8003a8e:	d807      	bhi.n	8003aa0 <memmove+0x20>
 8003a90:	1e43      	subs	r3, r0, #1
 8003a92:	42a1      	cmp	r1, r4
 8003a94:	d008      	beq.n	8003aa8 <memmove+0x28>
 8003a96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003a9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003a9e:	e7f8      	b.n	8003a92 <memmove+0x12>
 8003aa0:	4601      	mov	r1, r0
 8003aa2:	4402      	add	r2, r0
 8003aa4:	428a      	cmp	r2, r1
 8003aa6:	d100      	bne.n	8003aaa <memmove+0x2a>
 8003aa8:	bd10      	pop	{r4, pc}
 8003aaa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003aae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003ab2:	e7f7      	b.n	8003aa4 <memmove+0x24>

08003ab4 <_sbrk_r>:
 8003ab4:	b538      	push	{r3, r4, r5, lr}
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	4d05      	ldr	r5, [pc, #20]	; (8003ad0 <_sbrk_r+0x1c>)
 8003aba:	4604      	mov	r4, r0
 8003abc:	4608      	mov	r0, r1
 8003abe:	602b      	str	r3, [r5, #0]
 8003ac0:	f7fc fdbc 	bl	800063c <_sbrk>
 8003ac4:	1c43      	adds	r3, r0, #1
 8003ac6:	d102      	bne.n	8003ace <_sbrk_r+0x1a>
 8003ac8:	682b      	ldr	r3, [r5, #0]
 8003aca:	b103      	cbz	r3, 8003ace <_sbrk_r+0x1a>
 8003acc:	6023      	str	r3, [r4, #0]
 8003ace:	bd38      	pop	{r3, r4, r5, pc}
 8003ad0:	20001240 	.word	0x20001240

08003ad4 <memchr>:
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	b510      	push	{r4, lr}
 8003ad8:	b2c9      	uxtb	r1, r1
 8003ada:	4402      	add	r2, r0
 8003adc:	4293      	cmp	r3, r2
 8003ade:	4618      	mov	r0, r3
 8003ae0:	d101      	bne.n	8003ae6 <memchr+0x12>
 8003ae2:	2000      	movs	r0, #0
 8003ae4:	e003      	b.n	8003aee <memchr+0x1a>
 8003ae6:	7804      	ldrb	r4, [r0, #0]
 8003ae8:	3301      	adds	r3, #1
 8003aea:	428c      	cmp	r4, r1
 8003aec:	d1f6      	bne.n	8003adc <memchr+0x8>
 8003aee:	bd10      	pop	{r4, pc}

08003af0 <_realloc_r>:
 8003af0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003af4:	4680      	mov	r8, r0
 8003af6:	4614      	mov	r4, r2
 8003af8:	460e      	mov	r6, r1
 8003afa:	b921      	cbnz	r1, 8003b06 <_realloc_r+0x16>
 8003afc:	4611      	mov	r1, r2
 8003afe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b02:	f7ff bc45 	b.w	8003390 <_malloc_r>
 8003b06:	b92a      	cbnz	r2, 8003b14 <_realloc_r+0x24>
 8003b08:	f7ff fbda 	bl	80032c0 <_free_r>
 8003b0c:	4625      	mov	r5, r4
 8003b0e:	4628      	mov	r0, r5
 8003b10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b14:	f000 f81b 	bl	8003b4e <_malloc_usable_size_r>
 8003b18:	4284      	cmp	r4, r0
 8003b1a:	4607      	mov	r7, r0
 8003b1c:	d802      	bhi.n	8003b24 <_realloc_r+0x34>
 8003b1e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003b22:	d812      	bhi.n	8003b4a <_realloc_r+0x5a>
 8003b24:	4621      	mov	r1, r4
 8003b26:	4640      	mov	r0, r8
 8003b28:	f7ff fc32 	bl	8003390 <_malloc_r>
 8003b2c:	4605      	mov	r5, r0
 8003b2e:	2800      	cmp	r0, #0
 8003b30:	d0ed      	beq.n	8003b0e <_realloc_r+0x1e>
 8003b32:	42bc      	cmp	r4, r7
 8003b34:	4622      	mov	r2, r4
 8003b36:	4631      	mov	r1, r6
 8003b38:	bf28      	it	cs
 8003b3a:	463a      	movcs	r2, r7
 8003b3c:	f7ff fbb2 	bl	80032a4 <memcpy>
 8003b40:	4631      	mov	r1, r6
 8003b42:	4640      	mov	r0, r8
 8003b44:	f7ff fbbc 	bl	80032c0 <_free_r>
 8003b48:	e7e1      	b.n	8003b0e <_realloc_r+0x1e>
 8003b4a:	4635      	mov	r5, r6
 8003b4c:	e7df      	b.n	8003b0e <_realloc_r+0x1e>

08003b4e <_malloc_usable_size_r>:
 8003b4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b52:	1f18      	subs	r0, r3, #4
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	bfbc      	itt	lt
 8003b58:	580b      	ldrlt	r3, [r1, r0]
 8003b5a:	18c0      	addlt	r0, r0, r3
 8003b5c:	4770      	bx	lr
	...

08003b60 <_init>:
 8003b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b62:	bf00      	nop
 8003b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b66:	bc08      	pop	{r3}
 8003b68:	469e      	mov	lr, r3
 8003b6a:	4770      	bx	lr

08003b6c <_fini>:
 8003b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b6e:	bf00      	nop
 8003b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b72:	bc08      	pop	{r3}
 8003b74:	469e      	mov	lr, r3
 8003b76:	4770      	bx	lr
