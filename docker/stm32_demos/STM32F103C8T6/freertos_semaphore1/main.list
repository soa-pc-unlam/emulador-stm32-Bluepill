
freertos_semaphore1/main.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <g_pfnVectors>:
       0:	00 50 00 20 91 8e 00 00 d5 8e 00 00 d5 8e 00 00     .P. ............
      10:	d5 8e 00 00 d5 8e 00 00 d5 8e 00 00 00 00 00 00     ................
	...
      2c:	3b 8b 00 00 d5 8e 00 00 00 00 00 00 39 8c 00 00     ;...........9...
      3c:	87 8c 00 00 d5 8e 00 00 d5 8e 00 00 d5 8e 00 00     ................
      4c:	d5 8e 00 00 d5 8e 00 00 d5 8e 00 00 d5 8e 00 00     ................
      5c:	d5 8e 00 00 d5 8e 00 00 d5 8e 00 00 d5 8e 00 00     ................
      6c:	d5 8e 00 00 d5 8e 00 00 d5 8e 00 00 d5 8e 00 00     ................
      7c:	d5 8e 00 00 d5 8e 00 00 d5 8e 00 00 d5 8e 00 00     ................
      8c:	d5 8e 00 00 d5 8e 00 00 d5 8e 00 00 d5 8e 00 00     ................
      9c:	d5 8e 00 00 d5 8e 00 00 d5 8e 00 00 d5 8e 00 00     ................
      ac:	d5 8e 00 00 d5 8e 00 00 d5 8e 00 00 d5 8e 00 00     ................
      bc:	d5 8e 00 00 d5 8e 00 00 d5 8e 00 00 d5 8e 00 00     ................
      cc:	d5 8e 00 00 d5 8e 00 00 d5 8e 00 00 d5 8e 00 00     ................
      dc:	d5 8e 00 00 d5 8e 00 00 d5 8e 00 00 d5 8e 00 00     ................
	...
     108:	5f f8 08 f1                                         _...

0000010c <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     10c:	b580      	push	{r7, lr}
     10e:	b084      	sub	sp, #16
     110:	af00      	add	r7, sp, #0
     112:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
     114:	2300      	movs	r3, #0
     116:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
     118:	687b      	ldr	r3, [r7, #4]
     11a:	f003 0307 	and.w	r3, r3, #7
     11e:	2b00      	cmp	r3, #0
     120:	d004      	beq.n	12c <pvPortMalloc+0x20>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
     122:	687b      	ldr	r3, [r7, #4]
     124:	f023 0307 	bic.w	r3, r3, #7
     128:	3308      	adds	r3, #8
     12a:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
     12c:	f007 f844 	bl	71b8 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
     130:	4b16      	ldr	r3, [pc, #88]	; (18c <pvPortMalloc+0x80>)
     132:	681b      	ldr	r3, [r3, #0]
     134:	2b00      	cmp	r3, #0
     136:	d105      	bne.n	144 <pvPortMalloc+0x38>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
     138:	4b15      	ldr	r3, [pc, #84]	; (190 <pvPortMalloc+0x84>)
     13a:	f023 0307 	bic.w	r3, r3, #7
     13e:	461a      	mov	r2, r3
     140:	4b12      	ldr	r3, [pc, #72]	; (18c <pvPortMalloc+0x80>)
     142:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
     144:	4b13      	ldr	r3, [pc, #76]	; (194 <pvPortMalloc+0x88>)
     146:	681a      	ldr	r2, [r3, #0]
     148:	687b      	ldr	r3, [r7, #4]
     14a:	4413      	add	r3, r2
     14c:	f244 32f7 	movw	r2, #17399	; 0x43f7
     150:	4293      	cmp	r3, r2
     152:	d813      	bhi.n	17c <pvPortMalloc+0x70>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
     154:	4b0f      	ldr	r3, [pc, #60]	; (194 <pvPortMalloc+0x88>)
     156:	681a      	ldr	r2, [r3, #0]
     158:	687b      	ldr	r3, [r7, #4]
     15a:	441a      	add	r2, r3
     15c:	4b0d      	ldr	r3, [pc, #52]	; (194 <pvPortMalloc+0x88>)
     15e:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
     160:	429a      	cmp	r2, r3
     162:	d90b      	bls.n	17c <pvPortMalloc+0x70>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
     164:	4b09      	ldr	r3, [pc, #36]	; (18c <pvPortMalloc+0x80>)
     166:	681a      	ldr	r2, [r3, #0]
     168:	4b0a      	ldr	r3, [pc, #40]	; (194 <pvPortMalloc+0x88>)
     16a:	681b      	ldr	r3, [r3, #0]
     16c:	4413      	add	r3, r2
     16e:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
     170:	4b08      	ldr	r3, [pc, #32]	; (194 <pvPortMalloc+0x88>)
     172:	681a      	ldr	r2, [r3, #0]
     174:	687b      	ldr	r3, [r7, #4]
     176:	4413      	add	r3, r2
     178:	4a06      	ldr	r2, [pc, #24]	; (194 <pvPortMalloc+0x88>)
     17a:	6013      	str	r3, [r2, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     17c:	f007 f82a 	bl	71d4 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
     180:	68fb      	ldr	r3, [r7, #12]
}
     182:	4618      	mov	r0, r3
     184:	3710      	adds	r7, #16
     186:	46bd      	mov	sp, r7
     188:	bd80      	pop	{r7, pc}
     18a:	bf00      	nop
     18c:	20004430 	.word	0x20004430
     190:	20000034 	.word	0x20000034
     194:	2000442c 	.word	0x2000442c

00000198 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     198:	b480      	push	{r7}
     19a:	b083      	sub	sp, #12
     19c:	af00      	add	r7, sp, #0
     19e:	6078      	str	r0, [r7, #4]
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
}
     1a0:	bf00      	nop
     1a2:	370c      	adds	r7, #12
     1a4:	46bd      	mov	sp, r7
     1a6:	bc80      	pop	{r7}
     1a8:	4770      	bx	lr

000001aa <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
     1aa:	b480      	push	{r7}
     1ac:	af00      	add	r7, sp, #0
	/* Only required when static memory is not cleared. */
	xNextFreeByte = ( size_t ) 0;
     1ae:	4b03      	ldr	r3, [pc, #12]	; (1bc <vPortInitialiseBlocks+0x12>)
     1b0:	2200      	movs	r2, #0
     1b2:	601a      	str	r2, [r3, #0]
}
     1b4:	bf00      	nop
     1b6:	46bd      	mov	sp, r7
     1b8:	bc80      	pop	{r7}
     1ba:	4770      	bx	lr
     1bc:	2000442c 	.word	0x2000442c

000001c0 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
     1c0:	b480      	push	{r7}
     1c2:	af00      	add	r7, sp, #0
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
     1c4:	4b04      	ldr	r3, [pc, #16]	; (1d8 <xPortGetFreeHeapSize+0x18>)
     1c6:	681b      	ldr	r3, [r3, #0]
     1c8:	f5c3 4387 	rsb	r3, r3, #17280	; 0x4380
     1cc:	3378      	adds	r3, #120	; 0x78
}
     1ce:	4618      	mov	r0, r3
     1d0:	46bd      	mov	sp, r7
     1d2:	bc80      	pop	{r7}
     1d4:	4770      	bx	lr
     1d6:	bf00      	nop
     1d8:	2000442c 	.word	0x2000442c

000001dc <give_task>:


SemaphoreHandle_t bin_sem_1;

void give_task(void* param)
{
     1dc:	b580      	push	{r7, lr}
     1de:	b082      	sub	sp, #8
     1e0:	af00      	add	r7, sp, #0
     1e2:	6078      	str	r0, [r7, #4]
    while(1){
        xSemaphoreGive(bin_sem_1);
     1e4:	4b07      	ldr	r3, [pc, #28]	; (204 <give_task+0x28>)
     1e6:	6818      	ldr	r0, [r3, #0]
     1e8:	2300      	movs	r3, #0
     1ea:	2200      	movs	r2, #0
     1ec:	2100      	movs	r1, #0
     1ee:	f005 fdc2 	bl	5d76 <xQueueGenericSend>
        myprintf("TASK1 give \n");
     1f2:	4805      	ldr	r0, [pc, #20]	; (208 <give_task+0x2c>)
     1f4:	f001 f85a 	bl	12ac <myprintf>
        vTaskDelay(300);
     1f8:	f44f 7096 	mov.w	r0, #300	; 0x12c
     1fc:	f006 fd22 	bl	6c44 <vTaskDelay>
        xSemaphoreGive(bin_sem_1);
     200:	e7f0      	b.n	1e4 <give_task+0x8>
     202:	bf00      	nop
     204:	20004434 	.word	0x20004434
     208:	00008ed8 	.word	0x00008ed8

0000020c <take_task>:
    }
}

void take_task(void* param)
{
     20c:	b580      	push	{r7, lr}
     20e:	b082      	sub	sp, #8
     210:	af00      	add	r7, sp, #0
     212:	6078      	str	r0, [r7, #4]
    while(1){
        if ( xSemaphoreTake(bin_sem_1,20)){
     214:	4b09      	ldr	r3, [pc, #36]	; (23c <take_task+0x30>)
     216:	681b      	ldr	r3, [r3, #0]
     218:	2114      	movs	r1, #20
     21a:	4618      	mov	r0, r3
     21c:	f005 ffa6 	bl	616c <xQueueSemaphoreTake>
     220:	4603      	mov	r3, r0
     222:	2b00      	cmp	r3, #0
     224:	d003      	beq.n	22e <take_task+0x22>
            myprintf("TASK2 get bin_sem_1 \n");
     226:	4806      	ldr	r0, [pc, #24]	; (240 <take_task+0x34>)
     228:	f001 f840 	bl	12ac <myprintf>
     22c:	e002      	b.n	234 <take_task+0x28>
        }
        else{
            myprintf("TASK2 not get bin_sem_1\n");
     22e:	4805      	ldr	r0, [pc, #20]	; (244 <take_task+0x38>)
     230:	f001 f83c 	bl	12ac <myprintf>
        }
        vTaskDelay(100);
     234:	2064      	movs	r0, #100	; 0x64
     236:	f006 fd05 	bl	6c44 <vTaskDelay>
        if ( xSemaphoreTake(bin_sem_1,20)){
     23a:	e7eb      	b.n	214 <take_task+0x8>
     23c:	20004434 	.word	0x20004434
     240:	00008ee8 	.word	0x00008ee8
     244:	00008f00 	.word	0x00008f00

00000248 <main>:
    }
}

int main(void)
{
     248:	b580      	push	{r7, lr}
     24a:	b082      	sub	sp, #8
     24c:	af02      	add	r7, sp, #8
    myprintf_init();
     24e:	f000 fbfb 	bl	a48 <myprintf_init>

    bin_sem_1 = xSemaphoreCreateBinary();
     252:	2203      	movs	r2, #3
     254:	2100      	movs	r1, #0
     256:	2001      	movs	r0, #1
     258:	f005 fd10 	bl	5c7c <xQueueGenericCreate>
     25c:	4603      	mov	r3, r0
     25e:	4a12      	ldr	r2, [pc, #72]	; (2a8 <main+0x60>)
     260:	6013      	str	r3, [r2, #0]
    xSemaphoreGive(bin_sem_1);
     262:	4b11      	ldr	r3, [pc, #68]	; (2a8 <main+0x60>)
     264:	6818      	ldr	r0, [r3, #0]
     266:	2300      	movs	r3, #0
     268:	2200      	movs	r2, #0
     26a:	2100      	movs	r1, #0
     26c:	f005 fd83 	bl	5d76 <xQueueGenericSend>

    xTaskCreate(give_task, ( signed portCHAR * ) "V", 512/* stack size */, NULL, tskIDLE_PRIORITY + 10, NULL );
     270:	2300      	movs	r3, #0
     272:	9301      	str	r3, [sp, #4]
     274:	230a      	movs	r3, #10
     276:	9300      	str	r3, [sp, #0]
     278:	2300      	movs	r3, #0
     27a:	f44f 7200 	mov.w	r2, #512	; 0x200
     27e:	490b      	ldr	r1, [pc, #44]	; (2ac <main+0x64>)
     280:	480b      	ldr	r0, [pc, #44]	; (2b0 <main+0x68>)
     282:	f006 faf7 	bl	6874 <xTaskCreate>
    xTaskCreate(take_task, ( signed portCHAR * ) "P", 512/* stack size */, NULL, tskIDLE_PRIORITY + 10, NULL );
     286:	2300      	movs	r3, #0
     288:	9301      	str	r3, [sp, #4]
     28a:	230a      	movs	r3, #10
     28c:	9300      	str	r3, [sp, #0]
     28e:	2300      	movs	r3, #0
     290:	f44f 7200 	mov.w	r2, #512	; 0x200
     294:	4907      	ldr	r1, [pc, #28]	; (2b4 <main+0x6c>)
     296:	4808      	ldr	r0, [pc, #32]	; (2b8 <main+0x70>)
     298:	f006 faec 	bl	6874 <xTaskCreate>

    /* Start running the tasks. */
    vTaskStartScheduler();
     29c:	f006 ff3c 	bl	7118 <vTaskStartScheduler>

    return 0;
     2a0:	2300      	movs	r3, #0
}
     2a2:	4618      	mov	r0, r3
     2a4:	46bd      	mov	sp, r7
     2a6:	bd80      	pop	{r7, pc}
     2a8:	20004434 	.word	0x20004434
     2ac:	00008f1c 	.word	0x00008f1c
     2b0:	000001dd 	.word	0x000001dd
     2b4:	00008f20 	.word	0x00008f20
     2b8:	0000020d 	.word	0x0000020d

000002bc <vApplicationTickHook>:

void vApplicationTickHook( void )
{
     2bc:	b480      	push	{r7}
     2be:	af00      	add	r7, sp, #0
}
     2c0:	bf00      	nop
     2c2:	46bd      	mov	sp, r7
     2c4:	bc80      	pop	{r7}
     2c6:	4770      	bx	lr

000002c8 <__get_PSP>:
 * Return the actual process stack pointer
 */
uint32_t __get_PSP(void) __attribute__( ( naked ) );
uint32_t __get_PSP(void)
{
  uint32_t result=0;
     2c8:	2400      	movs	r4, #0

  __ASM volatile ("MRS %0, psp\n\t" 
     2ca:	f3ef 8309 	mrs	r3, PSP
     2ce:	4618      	mov	r0, r3
     2d0:	4770      	bx	lr
     2d2:	461c      	mov	r4, r3
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     2d4:	4623      	mov	r3, r4
}
     2d6:	4618      	mov	r0, r3

000002d8 <__set_PSP>:
 * Assign the value ProcessStackPointer to the MSP 
 * (process stack pointer) Cortex processor register
 */
void __set_PSP(uint32_t topOfProcStack) __attribute__( ( naked ) );
void __set_PSP(uint32_t topOfProcStack)
{
     2d8:	4603      	mov	r3, r0
  __ASM volatile ("MSR psp, %0\n\t"
     2da:	f383 8809 	msr	PSP, r3
     2de:	4770      	bx	lr
                  "BX  lr     \n\t" : : "r" (topOfProcStack) );
}
     2e0:	bf00      	nop

000002e2 <__get_MSP>:
 * Cortex processor register
 */
uint32_t __get_MSP(void) __attribute__( ( naked ) );
uint32_t __get_MSP(void)
{
  uint32_t result=0;
     2e2:	2400      	movs	r4, #0

  __ASM volatile ("MRS %0, msp\n\t" 
     2e4:	f3ef 8308 	mrs	r3, MSP
     2e8:	4618      	mov	r0, r3
     2ea:	4770      	bx	lr
     2ec:	461c      	mov	r4, r3
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     2ee:	4623      	mov	r3, r4
}
     2f0:	4618      	mov	r0, r3

000002f2 <__set_MSP>:
 * Assign the value mainStackPointer to the MSP 
 * (main stack pointer) Cortex processor register
 */
void __set_MSP(uint32_t topOfMainStack) __attribute__( ( naked ) );
void __set_MSP(uint32_t topOfMainStack)
{
     2f2:	4603      	mov	r3, r0
  __ASM volatile ("MSR msp, %0\n\t"
     2f4:	f383 8808 	msr	MSP, r3
     2f8:	4770      	bx	lr
                  "BX  lr     \n\t" : : "r" (topOfMainStack) );
}
     2fa:	bf00      	nop

000002fc <__get_BASEPRI>:
 * @return BasePriority
 *
 * Return the content of the base priority register
 */
uint32_t __get_BASEPRI(void)
{
     2fc:	b480      	push	{r7}
     2fe:	b083      	sub	sp, #12
     300:	af00      	add	r7, sp, #0
  uint32_t result=0;
     302:	2300      	movs	r3, #0
     304:	607b      	str	r3, [r7, #4]
  
  __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
     306:	f3ef 8312 	mrs	r3, BASEPRI_MAX
     30a:	607b      	str	r3, [r7, #4]
  return(result);
     30c:	687b      	ldr	r3, [r7, #4]
}
     30e:	4618      	mov	r0, r3
     310:	370c      	adds	r7, #12
     312:	46bd      	mov	sp, r7
     314:	bc80      	pop	{r7}
     316:	4770      	bx	lr

00000318 <__set_BASEPRI>:
 * @param  basePri  BasePriority
 *
 * Set the base priority register
 */
void __set_BASEPRI(uint32_t value)
{
     318:	b480      	push	{r7}
     31a:	b083      	sub	sp, #12
     31c:	af00      	add	r7, sp, #0
     31e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) );
     320:	687b      	ldr	r3, [r7, #4]
     322:	f383 8811 	msr	BASEPRI, r3
}
     326:	bf00      	nop
     328:	370c      	adds	r7, #12
     32a:	46bd      	mov	sp, r7
     32c:	bc80      	pop	{r7}
     32e:	4770      	bx	lr

00000330 <__get_PRIMASK>:
 * @return PriMask
 *
 * Return state of the priority mask bit from the priority mask register
 */
uint32_t __get_PRIMASK(void)
{
     330:	b480      	push	{r7}
     332:	b083      	sub	sp, #12
     334:	af00      	add	r7, sp, #0
  uint32_t result=0;
     336:	2300      	movs	r3, #0
     338:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     33a:	f3ef 8310 	mrs	r3, PRIMASK
     33e:	607b      	str	r3, [r7, #4]
  return(result);
     340:	687b      	ldr	r3, [r7, #4]
}
     342:	4618      	mov	r0, r3
     344:	370c      	adds	r7, #12
     346:	46bd      	mov	sp, r7
     348:	bc80      	pop	{r7}
     34a:	4770      	bx	lr

0000034c <__set_PRIMASK>:
 * @param  priMask  PriMask
 *
 * Set the priority mask bit in the priority mask register
 */
void __set_PRIMASK(uint32_t priMask)
{
     34c:	b480      	push	{r7}
     34e:	b083      	sub	sp, #12
     350:	af00      	add	r7, sp, #0
     352:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) );
     354:	687b      	ldr	r3, [r7, #4]
     356:	f383 8810 	msr	PRIMASK, r3
}
     35a:	bf00      	nop
     35c:	370c      	adds	r7, #12
     35e:	46bd      	mov	sp, r7
     360:	bc80      	pop	{r7}
     362:	4770      	bx	lr

00000364 <__get_FAULTMASK>:
 * @return FaultMask
 *
 * Return the content of the fault mask register
 */
uint32_t __get_FAULTMASK(void)
{
     364:	b480      	push	{r7}
     366:	b083      	sub	sp, #12
     368:	af00      	add	r7, sp, #0
  uint32_t result=0;
     36a:	2300      	movs	r3, #0
     36c:	607b      	str	r3, [r7, #4]
  
  __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
     36e:	f3ef 8313 	mrs	r3, FAULTMASK
     372:	607b      	str	r3, [r7, #4]
  return(result);
     374:	687b      	ldr	r3, [r7, #4]
}
     376:	4618      	mov	r0, r3
     378:	370c      	adds	r7, #12
     37a:	46bd      	mov	sp, r7
     37c:	bc80      	pop	{r7}
     37e:	4770      	bx	lr

00000380 <__set_FAULTMASK>:
 * @param  faultMask  faultMask value
 *
 * Set the fault mask register
 */
void __set_FAULTMASK(uint32_t faultMask)
{
     380:	b480      	push	{r7}
     382:	b083      	sub	sp, #12
     384:	af00      	add	r7, sp, #0
     386:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) );
     388:	687b      	ldr	r3, [r7, #4]
     38a:	f383 8813 	msr	FAULTMASK, r3
}
     38e:	bf00      	nop
     390:	370c      	adds	r7, #12
     392:	46bd      	mov	sp, r7
     394:	bc80      	pop	{r7}
     396:	4770      	bx	lr

00000398 <__get_CONTROL>:
*  @return Control value
 *
 * Return the content of the control register
 */
uint32_t __get_CONTROL(void)
{
     398:	b480      	push	{r7}
     39a:	b083      	sub	sp, #12
     39c:	af00      	add	r7, sp, #0
  uint32_t result=0;
     39e:	2300      	movs	r3, #0
     3a0:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, control" : "=r" (result) );
     3a2:	f3ef 8314 	mrs	r3, CONTROL
     3a6:	607b      	str	r3, [r7, #4]
  return(result);
     3a8:	687b      	ldr	r3, [r7, #4]
}
     3aa:	4618      	mov	r0, r3
     3ac:	370c      	adds	r7, #12
     3ae:	46bd      	mov	sp, r7
     3b0:	bc80      	pop	{r7}
     3b2:	4770      	bx	lr

000003b4 <__set_CONTROL>:
 * @param  control  Control value
 *
 * Set the control register
 */
void __set_CONTROL(uint32_t control)
{
     3b4:	b480      	push	{r7}
     3b6:	b083      	sub	sp, #12
     3b8:	af00      	add	r7, sp, #0
     3ba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR control, %0" : : "r" (control) );
     3bc:	687b      	ldr	r3, [r7, #4]
     3be:	f383 8814 	msr	CONTROL, r3
}
     3c2:	bf00      	nop
     3c4:	370c      	adds	r7, #12
     3c6:	46bd      	mov	sp, r7
     3c8:	bc80      	pop	{r7}
     3ca:	4770      	bx	lr

000003cc <__REV>:
 * @return        reversed value
 *
 * Reverse byte order in integer value
 */
uint32_t __REV(uint32_t value)
{
     3cc:	b480      	push	{r7}
     3ce:	b085      	sub	sp, #20
     3d0:	af00      	add	r7, sp, #0
     3d2:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     3d4:	2300      	movs	r3, #0
     3d6:	60fb      	str	r3, [r7, #12]
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
     3d8:	687b      	ldr	r3, [r7, #4]
     3da:	ba1b      	rev	r3, r3
     3dc:	60fb      	str	r3, [r7, #12]
  return(result);
     3de:	68fb      	ldr	r3, [r7, #12]
}
     3e0:	4618      	mov	r0, r3
     3e2:	3714      	adds	r7, #20
     3e4:	46bd      	mov	sp, r7
     3e6:	bc80      	pop	{r7}
     3e8:	4770      	bx	lr

000003ea <__REV16>:
 * @return        reversed value
 *
 * Reverse byte order in unsigned short value
 */
uint32_t __REV16(uint16_t value)
{
     3ea:	b480      	push	{r7}
     3ec:	b085      	sub	sp, #20
     3ee:	af00      	add	r7, sp, #0
     3f0:	4603      	mov	r3, r0
     3f2:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     3f4:	2300      	movs	r3, #0
     3f6:	60fb      	str	r3, [r7, #12]
  
  __ASM volatile ("rev16 %0, %1" : "=r" (result) : "r" (value) );
     3f8:	88fb      	ldrh	r3, [r7, #6]
     3fa:	ba5b      	rev16	r3, r3
     3fc:	60fb      	str	r3, [r7, #12]
  return(result);
     3fe:	68fb      	ldr	r3, [r7, #12]
}
     400:	4618      	mov	r0, r3
     402:	3714      	adds	r7, #20
     404:	46bd      	mov	sp, r7
     406:	bc80      	pop	{r7}
     408:	4770      	bx	lr

0000040a <__REVSH>:
 * @return        reversed value
 *
 * Reverse byte order in signed short value with sign extension to integer
 */
int32_t __REVSH(int16_t value)
{
     40a:	b480      	push	{r7}
     40c:	b085      	sub	sp, #20
     40e:	af00      	add	r7, sp, #0
     410:	4603      	mov	r3, r0
     412:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     414:	2300      	movs	r3, #0
     416:	60fb      	str	r3, [r7, #12]
  
  __ASM volatile ("revsh %0, %1" : "=r" (result) : "r" (value) );
     418:	88fb      	ldrh	r3, [r7, #6]
     41a:	badb      	revsh	r3, r3
     41c:	60fb      	str	r3, [r7, #12]
  return(result);
     41e:	68fb      	ldr	r3, [r7, #12]
}
     420:	4618      	mov	r0, r3
     422:	3714      	adds	r7, #20
     424:	46bd      	mov	sp, r7
     426:	bc80      	pop	{r7}
     428:	4770      	bx	lr

0000042a <__RBIT>:
 * @return        reversed value
 *
 * Reverse bit order of value
 */
uint32_t __RBIT(uint32_t value)
{
     42a:	b480      	push	{r7}
     42c:	b085      	sub	sp, #20
     42e:	af00      	add	r7, sp, #0
     430:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     432:	2300      	movs	r3, #0
     434:	60fb      	str	r3, [r7, #12]
  
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
     436:	687b      	ldr	r3, [r7, #4]
     438:	fa93 f3a3 	rbit	r3, r3
     43c:	60fb      	str	r3, [r7, #12]
   return(result);
     43e:	68fb      	ldr	r3, [r7, #12]
}
     440:	4618      	mov	r0, r3
     442:	3714      	adds	r7, #20
     444:	46bd      	mov	sp, r7
     446:	bc80      	pop	{r7}
     448:	4770      	bx	lr

0000044a <__LDREXB>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 8 bit value
 */
uint8_t __LDREXB(uint8_t *addr)
{
     44a:	b480      	push	{r7}
     44c:	b085      	sub	sp, #20
     44e:	af00      	add	r7, sp, #0
     450:	6078      	str	r0, [r7, #4]
    uint8_t result=0;
     452:	2300      	movs	r3, #0
     454:	73fb      	strb	r3, [r7, #15]
  
   __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) );
     456:	687b      	ldr	r3, [r7, #4]
     458:	e8d3 3f4f 	ldrexb	r3, [r3]
     45c:	73fb      	strb	r3, [r7, #15]
   return(result);
     45e:	7bfb      	ldrb	r3, [r7, #15]
}
     460:	4618      	mov	r0, r3
     462:	3714      	adds	r7, #20
     464:	46bd      	mov	sp, r7
     466:	bc80      	pop	{r7}
     468:	4770      	bx	lr

0000046a <__LDREXH>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 16 bit values
 */
uint16_t __LDREXH(uint16_t *addr)
{
     46a:	b480      	push	{r7}
     46c:	b085      	sub	sp, #20
     46e:	af00      	add	r7, sp, #0
     470:	6078      	str	r0, [r7, #4]
    uint16_t result=0;
     472:	2300      	movs	r3, #0
     474:	81fb      	strh	r3, [r7, #14]
  
   __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) );
     476:	687b      	ldr	r3, [r7, #4]
     478:	e8d3 3f5f 	ldrexh	r3, [r3]
     47c:	81fb      	strh	r3, [r7, #14]
   return(result);
     47e:	89fb      	ldrh	r3, [r7, #14]
}
     480:	4618      	mov	r0, r3
     482:	3714      	adds	r7, #20
     484:	46bd      	mov	sp, r7
     486:	bc80      	pop	{r7}
     488:	4770      	bx	lr

0000048a <__LDREXW>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 32 bit values
 */
uint32_t __LDREXW(uint32_t *addr)
{
     48a:	b480      	push	{r7}
     48c:	b085      	sub	sp, #20
     48e:	af00      	add	r7, sp, #0
     490:	6078      	str	r0, [r7, #4]
    uint32_t result=0;
     492:	2300      	movs	r3, #0
     494:	60fb      	str	r3, [r7, #12]
  
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     496:	687b      	ldr	r3, [r7, #4]
     498:	e853 3f00 	ldrex	r3, [r3]
     49c:	60fb      	str	r3, [r7, #12]
   return(result);
     49e:	68fb      	ldr	r3, [r7, #12]
}
     4a0:	4618      	mov	r0, r3
     4a2:	3714      	adds	r7, #20
     4a4:	46bd      	mov	sp, r7
     4a6:	bc80      	pop	{r7}
     4a8:	4770      	bx	lr

000004aa <__STREXB>:
 * @return        successful / failed
 *
 * Exclusive STR command for 8 bit values
 */
uint32_t __STREXB(uint8_t value, uint8_t *addr)
{
     4aa:	b480      	push	{r7}
     4ac:	b085      	sub	sp, #20
     4ae:	af00      	add	r7, sp, #0
     4b0:	4603      	mov	r3, r0
     4b2:	6039      	str	r1, [r7, #0]
     4b4:	71fb      	strb	r3, [r7, #7]
   uint32_t result=0;
     4b6:	2300      	movs	r3, #0
     4b8:	60fb      	str	r3, [r7, #12]
  
   __ASM volatile ("strexb %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
     4ba:	683a      	ldr	r2, [r7, #0]
     4bc:	79f9      	ldrb	r1, [r7, #7]
     4be:	e8c2 1f43 	strexb	r3, r1, [r2]
     4c2:	60fb      	str	r3, [r7, #12]
   return(result);
     4c4:	68fb      	ldr	r3, [r7, #12]
}
     4c6:	4618      	mov	r0, r3
     4c8:	3714      	adds	r7, #20
     4ca:	46bd      	mov	sp, r7
     4cc:	bc80      	pop	{r7}
     4ce:	4770      	bx	lr

000004d0 <__STREXH>:
 * @return        successful / failed
 *
 * Exclusive STR command for 16 bit values
 */
uint32_t __STREXH(uint16_t value, uint16_t *addr)
{
     4d0:	b480      	push	{r7}
     4d2:	b085      	sub	sp, #20
     4d4:	af00      	add	r7, sp, #0
     4d6:	4603      	mov	r3, r0
     4d8:	6039      	str	r1, [r7, #0]
     4da:	80fb      	strh	r3, [r7, #6]
   uint32_t result=0;
     4dc:	2300      	movs	r3, #0
     4de:	60fb      	str	r3, [r7, #12]
  
   __ASM volatile ("strexh %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
     4e0:	683a      	ldr	r2, [r7, #0]
     4e2:	88f9      	ldrh	r1, [r7, #6]
     4e4:	e8c2 1f53 	strexh	r3, r1, [r2]
     4e8:	60fb      	str	r3, [r7, #12]
   return(result);
     4ea:	68fb      	ldr	r3, [r7, #12]
}
     4ec:	4618      	mov	r0, r3
     4ee:	3714      	adds	r7, #20
     4f0:	46bd      	mov	sp, r7
     4f2:	bc80      	pop	{r7}
     4f4:	4770      	bx	lr

000004f6 <__STREXW>:
 * @return        successful / failed
 *
 * Exclusive STR command for 32 bit values
 */
uint32_t __STREXW(uint32_t value, uint32_t *addr)
{
     4f6:	b480      	push	{r7}
     4f8:	b085      	sub	sp, #20
     4fa:	af00      	add	r7, sp, #0
     4fc:	6078      	str	r0, [r7, #4]
     4fe:	6039      	str	r1, [r7, #0]
   uint32_t result=0;
     500:	2300      	movs	r3, #0
     502:	60fb      	str	r3, [r7, #12]
  
   __ASM volatile ("strex %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
     504:	683b      	ldr	r3, [r7, #0]
     506:	687a      	ldr	r2, [r7, #4]
     508:	e843 2300 	strex	r3, r2, [r3]
     50c:	60fb      	str	r3, [r7, #12]
   return(result);
     50e:	68fb      	ldr	r3, [r7, #12]
}
     510:	4618      	mov	r0, r3
     512:	3714      	adds	r7, #20
     514:	46bd      	mov	sp, r7
     516:	bc80      	pop	{r7}
     518:	4770      	bx	lr
	...

0000051c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
     51c:	b580      	push	{r7, lr}
     51e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
     520:	4b15      	ldr	r3, [pc, #84]	; (578 <SystemInit+0x5c>)
     522:	681b      	ldr	r3, [r3, #0]
     524:	4a14      	ldr	r2, [pc, #80]	; (578 <SystemInit+0x5c>)
     526:	f043 0301 	orr.w	r3, r3, #1
     52a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
     52c:	4b12      	ldr	r3, [pc, #72]	; (578 <SystemInit+0x5c>)
     52e:	685a      	ldr	r2, [r3, #4]
     530:	4911      	ldr	r1, [pc, #68]	; (578 <SystemInit+0x5c>)
     532:	4b12      	ldr	r3, [pc, #72]	; (57c <SystemInit+0x60>)
     534:	4013      	ands	r3, r2
     536:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
     538:	4b0f      	ldr	r3, [pc, #60]	; (578 <SystemInit+0x5c>)
     53a:	681b      	ldr	r3, [r3, #0]
     53c:	4a0e      	ldr	r2, [pc, #56]	; (578 <SystemInit+0x5c>)
     53e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
     542:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
     546:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
     548:	4b0b      	ldr	r3, [pc, #44]	; (578 <SystemInit+0x5c>)
     54a:	681b      	ldr	r3, [r3, #0]
     54c:	4a0a      	ldr	r2, [pc, #40]	; (578 <SystemInit+0x5c>)
     54e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
     552:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
     554:	4b08      	ldr	r3, [pc, #32]	; (578 <SystemInit+0x5c>)
     556:	685b      	ldr	r3, [r3, #4]
     558:	4a07      	ldr	r2, [pc, #28]	; (578 <SystemInit+0x5c>)
     55a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
     55e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
     560:	4b05      	ldr	r3, [pc, #20]	; (578 <SystemInit+0x5c>)
     562:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
     566:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
     568:	f000 f87e 	bl	668 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
     56c:	4b04      	ldr	r3, [pc, #16]	; (580 <SystemInit+0x64>)
     56e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
     572:	609a      	str	r2, [r3, #8]
#endif 
}
     574:	bf00      	nop
     576:	bd80      	pop	{r7, pc}
     578:	40021000 	.word	0x40021000
     57c:	f8ff0000 	.word	0xf8ff0000
     580:	e000ed00 	.word	0xe000ed00

00000584 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
     584:	b480      	push	{r7}
     586:	b085      	sub	sp, #20
     588:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0;
     58a:	2300      	movs	r3, #0
     58c:	60fb      	str	r3, [r7, #12]
     58e:	2300      	movs	r3, #0
     590:	60bb      	str	r3, [r7, #8]
     592:	2300      	movs	r3, #0
     594:	607b      	str	r3, [r7, #4]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
     596:	4b2f      	ldr	r3, [pc, #188]	; (654 <SystemCoreClockUpdate+0xd0>)
     598:	685b      	ldr	r3, [r3, #4]
     59a:	f003 030c 	and.w	r3, r3, #12
     59e:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
     5a0:	68fb      	ldr	r3, [r7, #12]
     5a2:	2b08      	cmp	r3, #8
     5a4:	d011      	beq.n	5ca <SystemCoreClockUpdate+0x46>
     5a6:	68fb      	ldr	r3, [r7, #12]
     5a8:	2b08      	cmp	r3, #8
     5aa:	d83a      	bhi.n	622 <SystemCoreClockUpdate+0x9e>
     5ac:	68fb      	ldr	r3, [r7, #12]
     5ae:	2b00      	cmp	r3, #0
     5b0:	d003      	beq.n	5ba <SystemCoreClockUpdate+0x36>
     5b2:	68fb      	ldr	r3, [r7, #12]
     5b4:	2b04      	cmp	r3, #4
     5b6:	d004      	beq.n	5c2 <SystemCoreClockUpdate+0x3e>
     5b8:	e033      	b.n	622 <SystemCoreClockUpdate+0x9e>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
     5ba:	4b27      	ldr	r3, [pc, #156]	; (658 <SystemCoreClockUpdate+0xd4>)
     5bc:	4a27      	ldr	r2, [pc, #156]	; (65c <SystemCoreClockUpdate+0xd8>)
     5be:	601a      	str	r2, [r3, #0]
      break;
     5c0:	e033      	b.n	62a <SystemCoreClockUpdate+0xa6>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
     5c2:	4b25      	ldr	r3, [pc, #148]	; (658 <SystemCoreClockUpdate+0xd4>)
     5c4:	4a25      	ldr	r2, [pc, #148]	; (65c <SystemCoreClockUpdate+0xd8>)
     5c6:	601a      	str	r2, [r3, #0]
      break;
     5c8:	e02f      	b.n	62a <SystemCoreClockUpdate+0xa6>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
     5ca:	4b22      	ldr	r3, [pc, #136]	; (654 <SystemCoreClockUpdate+0xd0>)
     5cc:	685b      	ldr	r3, [r3, #4]
     5ce:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
     5d2:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
     5d4:	4b1f      	ldr	r3, [pc, #124]	; (654 <SystemCoreClockUpdate+0xd0>)
     5d6:	685b      	ldr	r3, [r3, #4]
     5d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
     5dc:	607b      	str	r3, [r7, #4]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
     5de:	68bb      	ldr	r3, [r7, #8]
     5e0:	0c9b      	lsrs	r3, r3, #18
     5e2:	3302      	adds	r3, #2
     5e4:	60bb      	str	r3, [r7, #8]
      
      if (pllsource == 0x00)
     5e6:	687b      	ldr	r3, [r7, #4]
     5e8:	2b00      	cmp	r3, #0
     5ea:	d106      	bne.n	5fa <SystemCoreClockUpdate+0x76>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
     5ec:	68bb      	ldr	r3, [r7, #8]
     5ee:	4a1c      	ldr	r2, [pc, #112]	; (660 <SystemCoreClockUpdate+0xdc>)
     5f0:	fb02 f303 	mul.w	r3, r2, r3
     5f4:	4a18      	ldr	r2, [pc, #96]	; (658 <SystemCoreClockUpdate+0xd4>)
     5f6:	6013      	str	r3, [r2, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2; 
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
     5f8:	e017      	b.n	62a <SystemCoreClockUpdate+0xa6>
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
     5fa:	4b16      	ldr	r3, [pc, #88]	; (654 <SystemCoreClockUpdate+0xd0>)
     5fc:	685b      	ldr	r3, [r3, #4]
     5fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     602:	2b00      	cmp	r3, #0
     604:	d006      	beq.n	614 <SystemCoreClockUpdate+0x90>
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
     606:	68bb      	ldr	r3, [r7, #8]
     608:	4a15      	ldr	r2, [pc, #84]	; (660 <SystemCoreClockUpdate+0xdc>)
     60a:	fb02 f303 	mul.w	r3, r2, r3
     60e:	4a12      	ldr	r2, [pc, #72]	; (658 <SystemCoreClockUpdate+0xd4>)
     610:	6013      	str	r3, [r2, #0]
      break;
     612:	e00a      	b.n	62a <SystemCoreClockUpdate+0xa6>
          SystemCoreClock = HSE_VALUE * pllmull;
     614:	68bb      	ldr	r3, [r7, #8]
     616:	4a11      	ldr	r2, [pc, #68]	; (65c <SystemCoreClockUpdate+0xd8>)
     618:	fb02 f303 	mul.w	r3, r2, r3
     61c:	4a0e      	ldr	r2, [pc, #56]	; (658 <SystemCoreClockUpdate+0xd4>)
     61e:	6013      	str	r3, [r2, #0]
      break;
     620:	e003      	b.n	62a <SystemCoreClockUpdate+0xa6>

    default:
      SystemCoreClock = HSI_VALUE;
     622:	4b0d      	ldr	r3, [pc, #52]	; (658 <SystemCoreClockUpdate+0xd4>)
     624:	4a0d      	ldr	r2, [pc, #52]	; (65c <SystemCoreClockUpdate+0xd8>)
     626:	601a      	str	r2, [r3, #0]
      break;
     628:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
     62a:	4b0a      	ldr	r3, [pc, #40]	; (654 <SystemCoreClockUpdate+0xd0>)
     62c:	685b      	ldr	r3, [r3, #4]
     62e:	091b      	lsrs	r3, r3, #4
     630:	f003 030f 	and.w	r3, r3, #15
     634:	4a0b      	ldr	r2, [pc, #44]	; (664 <SystemCoreClockUpdate+0xe0>)
     636:	5cd3      	ldrb	r3, [r2, r3]
     638:	b2db      	uxtb	r3, r3
     63a:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
     63c:	4b06      	ldr	r3, [pc, #24]	; (658 <SystemCoreClockUpdate+0xd4>)
     63e:	681a      	ldr	r2, [r3, #0]
     640:	68fb      	ldr	r3, [r7, #12]
     642:	fa22 f303 	lsr.w	r3, r2, r3
     646:	4a04      	ldr	r2, [pc, #16]	; (658 <SystemCoreClockUpdate+0xd4>)
     648:	6013      	str	r3, [r2, #0]
}
     64a:	bf00      	nop
     64c:	3714      	adds	r7, #20
     64e:	46bd      	mov	sp, r7
     650:	bc80      	pop	{r7}
     652:	4770      	bx	lr
     654:	40021000 	.word	0x40021000
     658:	20000000 	.word	0x20000000
     65c:	007a1200 	.word	0x007a1200
     660:	003d0900 	.word	0x003d0900
     664:	20000004 	.word	0x20000004

00000668 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
     668:	b580      	push	{r7, lr}
     66a:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
     66c:	f000 f802 	bl	674 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
     670:	bf00      	nop
     672:	bd80      	pop	{r7, pc}

00000674 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
     674:	b480      	push	{r7}
     676:	b083      	sub	sp, #12
     678:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
     67a:	2300      	movs	r3, #0
     67c:	607b      	str	r3, [r7, #4]
     67e:	2300      	movs	r3, #0
     680:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
     682:	4b3a      	ldr	r3, [pc, #232]	; (76c <SetSysClockTo72+0xf8>)
     684:	681b      	ldr	r3, [r3, #0]
     686:	4a39      	ldr	r2, [pc, #228]	; (76c <SetSysClockTo72+0xf8>)
     688:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
     68c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
     68e:	4b37      	ldr	r3, [pc, #220]	; (76c <SetSysClockTo72+0xf8>)
     690:	681b      	ldr	r3, [r3, #0]
     692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     696:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
     698:	687b      	ldr	r3, [r7, #4]
     69a:	3301      	adds	r3, #1
     69c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
     69e:	683b      	ldr	r3, [r7, #0]
     6a0:	2b00      	cmp	r3, #0
     6a2:	d103      	bne.n	6ac <SetSysClockTo72+0x38>
     6a4:	687b      	ldr	r3, [r7, #4]
     6a6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     6aa:	d1f0      	bne.n	68e <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
     6ac:	4b2f      	ldr	r3, [pc, #188]	; (76c <SetSysClockTo72+0xf8>)
     6ae:	681b      	ldr	r3, [r3, #0]
     6b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     6b4:	2b00      	cmp	r3, #0
     6b6:	d002      	beq.n	6be <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
     6b8:	2301      	movs	r3, #1
     6ba:	603b      	str	r3, [r7, #0]
     6bc:	e001      	b.n	6c2 <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
     6be:	2300      	movs	r3, #0
     6c0:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
     6c2:	683b      	ldr	r3, [r7, #0]
     6c4:	2b01      	cmp	r3, #1
     6c6:	d14b      	bne.n	760 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
     6c8:	4b29      	ldr	r3, [pc, #164]	; (770 <SetSysClockTo72+0xfc>)
     6ca:	681b      	ldr	r3, [r3, #0]
     6cc:	4a28      	ldr	r2, [pc, #160]	; (770 <SetSysClockTo72+0xfc>)
     6ce:	f043 0310 	orr.w	r3, r3, #16
     6d2:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
     6d4:	4b26      	ldr	r3, [pc, #152]	; (770 <SetSysClockTo72+0xfc>)
     6d6:	681b      	ldr	r3, [r3, #0]
     6d8:	4a25      	ldr	r2, [pc, #148]	; (770 <SetSysClockTo72+0xfc>)
     6da:	f023 0303 	bic.w	r3, r3, #3
     6de:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
     6e0:	4b23      	ldr	r3, [pc, #140]	; (770 <SetSysClockTo72+0xfc>)
     6e2:	681b      	ldr	r3, [r3, #0]
     6e4:	4a22      	ldr	r2, [pc, #136]	; (770 <SetSysClockTo72+0xfc>)
     6e6:	f043 0302 	orr.w	r3, r3, #2
     6ea:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
     6ec:	4b1f      	ldr	r3, [pc, #124]	; (76c <SetSysClockTo72+0xf8>)
     6ee:	4a1f      	ldr	r2, [pc, #124]	; (76c <SetSysClockTo72+0xf8>)
     6f0:	685b      	ldr	r3, [r3, #4]
     6f2:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
     6f4:	4b1d      	ldr	r3, [pc, #116]	; (76c <SetSysClockTo72+0xf8>)
     6f6:	4a1d      	ldr	r2, [pc, #116]	; (76c <SetSysClockTo72+0xf8>)
     6f8:	685b      	ldr	r3, [r3, #4]
     6fa:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
     6fc:	4b1b      	ldr	r3, [pc, #108]	; (76c <SetSysClockTo72+0xf8>)
     6fe:	685b      	ldr	r3, [r3, #4]
     700:	4a1a      	ldr	r2, [pc, #104]	; (76c <SetSysClockTo72+0xf8>)
     702:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
     706:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
     708:	4b18      	ldr	r3, [pc, #96]	; (76c <SetSysClockTo72+0xf8>)
     70a:	685b      	ldr	r3, [r3, #4]
     70c:	4a17      	ldr	r2, [pc, #92]	; (76c <SetSysClockTo72+0xf8>)
     70e:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
     712:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
     714:	4b15      	ldr	r3, [pc, #84]	; (76c <SetSysClockTo72+0xf8>)
     716:	685b      	ldr	r3, [r3, #4]
     718:	4a14      	ldr	r2, [pc, #80]	; (76c <SetSysClockTo72+0xf8>)
     71a:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
     71e:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
     720:	4b12      	ldr	r3, [pc, #72]	; (76c <SetSysClockTo72+0xf8>)
     722:	681b      	ldr	r3, [r3, #0]
     724:	4a11      	ldr	r2, [pc, #68]	; (76c <SetSysClockTo72+0xf8>)
     726:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
     72a:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
     72c:	bf00      	nop
     72e:	4b0f      	ldr	r3, [pc, #60]	; (76c <SetSysClockTo72+0xf8>)
     730:	681b      	ldr	r3, [r3, #0]
     732:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
     736:	2b00      	cmp	r3, #0
     738:	d0f9      	beq.n	72e <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
     73a:	4b0c      	ldr	r3, [pc, #48]	; (76c <SetSysClockTo72+0xf8>)
     73c:	685b      	ldr	r3, [r3, #4]
     73e:	4a0b      	ldr	r2, [pc, #44]	; (76c <SetSysClockTo72+0xf8>)
     740:	f023 0303 	bic.w	r3, r3, #3
     744:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
     746:	4b09      	ldr	r3, [pc, #36]	; (76c <SetSysClockTo72+0xf8>)
     748:	685b      	ldr	r3, [r3, #4]
     74a:	4a08      	ldr	r2, [pc, #32]	; (76c <SetSysClockTo72+0xf8>)
     74c:	f043 0302 	orr.w	r3, r3, #2
     750:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
     752:	bf00      	nop
     754:	4b05      	ldr	r3, [pc, #20]	; (76c <SetSysClockTo72+0xf8>)
     756:	685b      	ldr	r3, [r3, #4]
     758:	f003 030c 	and.w	r3, r3, #12
     75c:	2b08      	cmp	r3, #8
     75e:	d1f9      	bne.n	754 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
     760:	bf00      	nop
     762:	370c      	adds	r7, #12
     764:	46bd      	mov	sp, r7
     766:	bc80      	pop	{r7}
     768:	4770      	bx	lr
     76a:	bf00      	nop
     76c:	40021000 	.word	0x40021000
     770:	40022000 	.word	0x40022000
     774:	00008f81 	.word	0x00008f81
     778:	20000000 	.word	0x20000000
     77c:	2000002c 	.word	0x2000002c
     780:	2000002c 	.word	0x2000002c
     784:	2000453c 	.word	0x2000453c

00000788 <init_led>:
#include "stm32f10x_exti.h"
#include "stm32f10x_adc.h"
#include "misc.h"

void init_led(void)
{
     788:	b580      	push	{r7, lr}
     78a:	b082      	sub	sp, #8
     78c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO C clock. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
     78e:	2101      	movs	r1, #1
     790:	2010      	movs	r0, #16
     792:	f001 f87b 	bl	188c <RCC_APB2PeriphClockCmd>

    /* Set the LED pin state such that the LED is off.  The LED is connected
     * between power and the microcontroller pin, which makes it turn on when
     * the pin is low.
     */
    GPIO_WriteBit(GPIOC,GPIO_Pin_13,Bit_SET);
     796:	2201      	movs	r2, #1
     798:	f44f 5100 	mov.w	r1, #8192	; 0x2000
     79c:	4809      	ldr	r0, [pc, #36]	; (7c4 <init_led+0x3c>)
     79e:	f001 fb42 	bl	1e26 <GPIO_WriteBit>

    /* Configure the LED pin as push-pull output. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_13;
     7a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     7a6:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
     7a8:	2310      	movs	r3, #16
     7aa:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
     7ac:	2303      	movs	r3, #3
     7ae:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
     7b0:	1d3b      	adds	r3, r7, #4
     7b2:	4619      	mov	r1, r3
     7b4:	4803      	ldr	r0, [pc, #12]	; (7c4 <init_led+0x3c>)
     7b6:	f001 fa01 	bl	1bbc <GPIO_Init>
}
     7ba:	bf00      	nop
     7bc:	3708      	adds	r7, #8
     7be:	46bd      	mov	sp, r7
     7c0:	bd80      	pop	{r7, pc}
     7c2:	bf00      	nop
     7c4:	40011000 	.word	0x40011000

000007c8 <init_button>:

void init_button(void)
{
     7c8:	b580      	push	{r7, lr}
     7ca:	b082      	sub	sp, #8
     7cc:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO A clock */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
     7ce:	2101      	movs	r1, #1
     7d0:	2004      	movs	r0, #4
     7d2:	f001 f85b 	bl	188c <RCC_APB2PeriphClockCmd>

    /* Configure the button pin as a floating input.*/
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_0;
     7d6:	2301      	movs	r3, #1
     7d8:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
     7da:	2304      	movs	r3, #4
     7dc:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
     7de:	2303      	movs	r3, #3
     7e0:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOA,  &GPIO_InitStructure);
     7e2:	1d3b      	adds	r3, r7, #4
     7e4:	4619      	mov	r1, r3
     7e6:	4803      	ldr	r0, [pc, #12]	; (7f4 <init_button+0x2c>)
     7e8:	f001 f9e8 	bl	1bbc <GPIO_Init>


}
     7ec:	bf00      	nop
     7ee:	3708      	adds	r7, #8
     7f0:	46bd      	mov	sp, r7
     7f2:	bd80      	pop	{r7, pc}
     7f4:	40010800 	.word	0x40010800

000007f8 <enable_button_interrupts>:


void enable_button_interrupts(void)
{
     7f8:	b580      	push	{r7, lr}
     7fa:	b084      	sub	sp, #16
     7fc:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable the AFIO clock.  GPIO_EXTILineConfig sets registers in
     * the AFIO.
     */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
     7fe:	2101      	movs	r1, #1
     800:	2001      	movs	r0, #1
     802:	f001 f843 	bl	188c <RCC_APB2PeriphClockCmd>

    /* Connect EXTI Line 0 to the button GPIO Pin */
    GPIO_EXTILineConfig(GPIO_PortSourceGPIOA, GPIO_PinSource0);
     806:	2100      	movs	r1, #0
     808:	2000      	movs	r0, #0
     80a:	f001 fbf7 	bl	1ffc <GPIO_EXTILineConfig>

    /* Configure the EXTI line to generate an interrupt when the button is
     * pressed.  The button pin is high when pressed, so it needs to trigger
     * when rising from low to high. */
    EXTI_InitStructure.EXTI_Line = EXTI_Line0;
     80e:	2301      	movs	r3, #1
     810:	60bb      	str	r3, [r7, #8]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
     812:	2300      	movs	r3, #0
     814:	733b      	strb	r3, [r7, #12]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
     816:	2308      	movs	r3, #8
     818:	737b      	strb	r3, [r7, #13]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
     81a:	2301      	movs	r3, #1
     81c:	73bb      	strb	r3, [r7, #14]
    EXTI_Init(&EXTI_InitStructure);
     81e:	f107 0308 	add.w	r3, r7, #8
     822:	4618      	mov	r0, r3
     824:	f002 f8c0 	bl	29a8 <EXTI_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;
     828:	2306      	movs	r3, #6
     82a:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
     82c:	230f      	movs	r3, #15
     82e:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
     830:	230f      	movs	r3, #15
     832:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
     834:	2301      	movs	r3, #1
     836:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
     838:	1d3b      	adds	r3, r7, #4
     83a:	4618      	mov	r0, r3
     83c:	f005 f860 	bl	5900 <NVIC_Init>
}
     840:	bf00      	nop
     842:	3710      	adds	r7, #16
     844:	46bd      	mov	sp, r7
     846:	bd80      	pop	{r7, pc}

00000848 <init_rs232>:


void init_rs232(void)
{
     848:	b580      	push	{r7, lr}
     84a:	b086      	sub	sp, #24
     84c:	af00      	add	r7, sp, #0
    USART_InitTypeDef USART_InitStructure;
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable peripheral clocks. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO|RCC_APB2Periph_USART1, ENABLE);
     84e:	2101      	movs	r1, #1
     850:	f244 0005 	movw	r0, #16389	; 0x4005
     854:	f001 f81a 	bl	188c <RCC_APB2PeriphClockCmd>
    //RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART1, ENABLE);

    /* Configure USART2 Rx pin as floating input. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
     858:	f44f 6380 	mov.w	r3, #1024	; 0x400
     85c:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
     85e:	2304      	movs	r3, #4
     860:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
     862:	1d3b      	adds	r3, r7, #4
     864:	4619      	mov	r1, r3
     866:	4815      	ldr	r0, [pc, #84]	; (8bc <init_rs232+0x74>)
     868:	f001 f9a8 	bl	1bbc <GPIO_Init>

    /* Configure USART2 Tx as alternate function push-pull. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
     86c:	f44f 7300 	mov.w	r3, #512	; 0x200
     870:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
     872:	2303      	movs	r3, #3
     874:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
     876:	2318      	movs	r3, #24
     878:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
     87a:	1d3b      	adds	r3, r7, #4
     87c:	4619      	mov	r1, r3
     87e:	480f      	ldr	r0, [pc, #60]	; (8bc <init_rs232+0x74>)
     880:	f001 f99c 	bl	1bbc <GPIO_Init>

    /* Configure the USART2 */
    USART_InitStructure.USART_BaudRate = 9600;
     884:	f44f 5316 	mov.w	r3, #9600	; 0x2580
     888:	60bb      	str	r3, [r7, #8]
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
     88a:	2300      	movs	r3, #0
     88c:	81bb      	strh	r3, [r7, #12]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
     88e:	2300      	movs	r3, #0
     890:	81fb      	strh	r3, [r7, #14]
    USART_InitStructure.USART_Parity = USART_Parity_No;
     892:	2300      	movs	r3, #0
     894:	823b      	strh	r3, [r7, #16]
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
     896:	2300      	movs	r3, #0
     898:	82bb      	strh	r3, [r7, #20]
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
     89a:	230c      	movs	r3, #12
     89c:	827b      	strh	r3, [r7, #18]
    USART_Init(USART1, &USART_InitStructure);
     89e:	f107 0308 	add.w	r3, r7, #8
     8a2:	4619      	mov	r1, r3
     8a4:	4806      	ldr	r0, [pc, #24]	; (8c0 <init_rs232+0x78>)
     8a6:	f001 fc53 	bl	2150 <USART_Init>
    USART_Cmd(USART1, ENABLE);
     8aa:	2101      	movs	r1, #1
     8ac:	4804      	ldr	r0, [pc, #16]	; (8c0 <init_rs232+0x78>)
     8ae:	f001 fd65 	bl	237c <USART_Cmd>
}
     8b2:	bf00      	nop
     8b4:	3718      	adds	r7, #24
     8b6:	46bd      	mov	sp, r7
     8b8:	bd80      	pop	{r7, pc}
     8ba:	bf00      	nop
     8bc:	40010800 	.word	0x40010800
     8c0:	40013800 	.word	0x40013800

000008c4 <enable_rs232_interrupts>:

void enable_rs232_interrupts(void)
{
     8c4:	b580      	push	{r7, lr}
     8c6:	b082      	sub	sp, #8
     8c8:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable transmit and receive interrupts for the USART2. */
    USART_ITConfig(USART1, USART_IT_TXE, DISABLE);
     8ca:	2200      	movs	r2, #0
     8cc:	f240 7127 	movw	r1, #1831	; 0x727
     8d0:	480b      	ldr	r0, [pc, #44]	; (900 <enable_rs232_interrupts+0x3c>)
     8d2:	f001 fd72 	bl	23ba <USART_ITConfig>
    USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
     8d6:	2201      	movs	r2, #1
     8d8:	f240 5125 	movw	r1, #1317	; 0x525
     8dc:	4808      	ldr	r0, [pc, #32]	; (900 <enable_rs232_interrupts+0x3c>)
     8de:	f001 fd6c 	bl	23ba <USART_ITConfig>

    /* Enable the USART2 IRQ in the NVIC module (so that the USART2 interrupt
     * handler is enabled). */
    NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
     8e2:	2325      	movs	r3, #37	; 0x25
     8e4:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
     8e6:	2300      	movs	r3, #0
     8e8:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
     8ea:	2301      	movs	r3, #1
     8ec:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
     8ee:	1d3b      	adds	r3, r7, #4
     8f0:	4618      	mov	r0, r3
     8f2:	f005 f805 	bl	5900 <NVIC_Init>
}
     8f6:	bf00      	nop
     8f8:	3708      	adds	r7, #8
     8fa:	46bd      	mov	sp, r7
     8fc:	bd80      	pop	{r7, pc}
     8fe:	bf00      	nop
     900:	40013800 	.word	0x40013800

00000904 <enable_rs232>:

void enable_rs232(void)
{
     904:	b580      	push	{r7, lr}
     906:	af00      	add	r7, sp, #0
    /* Enable the RS232 port. */
    USART_Cmd(USART1, ENABLE);
     908:	2101      	movs	r1, #1
     90a:	4802      	ldr	r0, [pc, #8]	; (914 <enable_rs232+0x10>)
     90c:	f001 fd36 	bl	237c <USART_Cmd>
}
     910:	bf00      	nop
     912:	bd80      	pop	{r7, pc}
     914:	40013800 	.word	0x40013800

00000918 <rs232_print_str>:

void rs232_print_str(const char *str)
{
     918:	b580      	push	{r7, lr}
     91a:	b084      	sub	sp, #16
     91c:	af00      	add	r7, sp, #0
     91e:	6078      	str	r0, [r7, #4]
    const char *curr_char = str;
     920:	687b      	ldr	r3, [r7, #4]
     922:	60fb      	str	r3, [r7, #12]

    while(*curr_char != '\0') {
     924:	e011      	b.n	94a <rs232_print_str+0x32>
        while(USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET);
     926:	bf00      	nop
     928:	2180      	movs	r1, #128	; 0x80
     92a:	480c      	ldr	r0, [pc, #48]	; (95c <rs232_print_str+0x44>)
     92c:	f001 ff80 	bl	2830 <USART_GetFlagStatus>
     930:	4603      	mov	r3, r0
     932:	2b00      	cmp	r3, #0
     934:	d0f8      	beq.n	928 <rs232_print_str+0x10>
        USART_SendData(USART1, *curr_char);
     936:	68fb      	ldr	r3, [r7, #12]
     938:	781b      	ldrb	r3, [r3, #0]
     93a:	b29b      	uxth	r3, r3
     93c:	4619      	mov	r1, r3
     93e:	4807      	ldr	r0, [pc, #28]	; (95c <rs232_print_str+0x44>)
     940:	f001 fe35 	bl	25ae <USART_SendData>
        curr_char++;
     944:	68fb      	ldr	r3, [r7, #12]
     946:	3301      	adds	r3, #1
     948:	60fb      	str	r3, [r7, #12]
    while(*curr_char != '\0') {
     94a:	68fb      	ldr	r3, [r7, #12]
     94c:	781b      	ldrb	r3, [r3, #0]
     94e:	2b00      	cmp	r3, #0
     950:	d1e9      	bne.n	926 <rs232_print_str+0xe>
    }
}
     952:	bf00      	nop
     954:	bf00      	nop
     956:	3710      	adds	r7, #16
     958:	46bd      	mov	sp, r7
     95a:	bd80      	pop	{r7, pc}
     95c:	40013800 	.word	0x40013800

00000960 <hex_to_char>:

/* Functions for sending numbers through the UART */
char hex_to_char(unsigned hex_number)
{
     960:	b480      	push	{r7}
     962:	b083      	sub	sp, #12
     964:	af00      	add	r7, sp, #0
     966:	6078      	str	r0, [r7, #4]
    if(hex_number < 0xA) {
     968:	687b      	ldr	r3, [r7, #4]
     96a:	2b09      	cmp	r3, #9
     96c:	d804      	bhi.n	978 <hex_to_char+0x18>
        return       hex_number + '0';
     96e:	687b      	ldr	r3, [r7, #4]
     970:	b2db      	uxtb	r3, r3
     972:	3330      	adds	r3, #48	; 0x30
     974:	b2db      	uxtb	r3, r3
     976:	e003      	b.n	980 <hex_to_char+0x20>
    } else {
        return hex_number - 0xA + 'A';
     978:	687b      	ldr	r3, [r7, #4]
     97a:	b2db      	uxtb	r3, r3
     97c:	3337      	adds	r3, #55	; 0x37
     97e:	b2db      	uxtb	r3, r3
    }
}
     980:	4618      	mov	r0, r3
     982:	370c      	adds	r7, #12
     984:	46bd      	mov	sp, r7
     986:	bc80      	pop	{r7}
     988:	4770      	bx	lr

0000098a <send_byte>:

void send_byte(uint8_t b)
{
     98a:	b580      	push	{r7, lr}
     98c:	b082      	sub	sp, #8
     98e:	af00      	add	r7, sp, #0
     990:	4603      	mov	r3, r0
     992:	71fb      	strb	r3, [r7, #7]
    /* Wait until the RS232 port can receive another byte. */
    while(USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET);
     994:	bf00      	nop
     996:	2180      	movs	r1, #128	; 0x80
     998:	4807      	ldr	r0, [pc, #28]	; (9b8 <send_byte+0x2e>)
     99a:	f001 ff49 	bl	2830 <USART_GetFlagStatus>
     99e:	4603      	mov	r3, r0
     9a0:	2b00      	cmp	r3, #0
     9a2:	d0f8      	beq.n	996 <send_byte+0xc>

    /* Toggle the LED just to show that progress is being made. */
    //GPIOC->ODR ^= 0x00001000;

    /* Send the byte */
    USART_SendData(USART1, b);
     9a4:	79fb      	ldrb	r3, [r7, #7]
     9a6:	b29b      	uxth	r3, r3
     9a8:	4619      	mov	r1, r3
     9aa:	4803      	ldr	r0, [pc, #12]	; (9b8 <send_byte+0x2e>)
     9ac:	f001 fdff 	bl	25ae <USART_SendData>
}
     9b0:	bf00      	nop
     9b2:	3708      	adds	r7, #8
     9b4:	46bd      	mov	sp, r7
     9b6:	bd80      	pop	{r7, pc}
     9b8:	40013800 	.word	0x40013800

000009bc <send_number>:

void send_number(unsigned long sample, int radix)
{
     9bc:	b580      	push	{r7, lr}
     9be:	b09e      	sub	sp, #120	; 0x78
     9c0:	af00      	add	r7, sp, #0
     9c2:	6078      	str	r0, [r7, #4]
     9c4:	6039      	str	r1, [r7, #0]
    int digit;
    unsigned long  mod;
    char str[100];

    digit = 0;
     9c6:	2300      	movs	r3, #0
     9c8:	677b      	str	r3, [r7, #116]	; 0x74
    do {
        mod = sample % radix;
     9ca:	683a      	ldr	r2, [r7, #0]
     9cc:	687b      	ldr	r3, [r7, #4]
     9ce:	fbb3 f1f2 	udiv	r1, r3, r2
     9d2:	fb02 f201 	mul.w	r2, r2, r1
     9d6:	1a9b      	subs	r3, r3, r2
     9d8:	673b      	str	r3, [r7, #112]	; 0x70
        str[digit] = hex_to_char(mod);
     9da:	6f38      	ldr	r0, [r7, #112]	; 0x70
     9dc:	f7ff ffc0 	bl	960 <hex_to_char>
     9e0:	4603      	mov	r3, r0
     9e2:	4619      	mov	r1, r3
     9e4:	f107 020c 	add.w	r2, r7, #12
     9e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
     9ea:	4413      	add	r3, r2
     9ec:	460a      	mov	r2, r1
     9ee:	701a      	strb	r2, [r3, #0]
        sample /= radix;
     9f0:	683b      	ldr	r3, [r7, #0]
     9f2:	687a      	ldr	r2, [r7, #4]
     9f4:	fbb2 f3f3 	udiv	r3, r2, r3
     9f8:	607b      	str	r3, [r7, #4]
        digit++;
     9fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
     9fc:	3301      	adds	r3, #1
     9fe:	677b      	str	r3, [r7, #116]	; 0x74
    } while(sample != 0);
     a00:	687b      	ldr	r3, [r7, #4]
     a02:	2b00      	cmp	r3, #0
     a04:	d1e1      	bne.n	9ca <send_number+0xe>

    while(digit != 0) {
     a06:	e014      	b.n	a32 <send_number+0x76>
        digit--;
     a08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
     a0a:	3b01      	subs	r3, #1
     a0c:	677b      	str	r3, [r7, #116]	; 0x74
        while(USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET);
     a0e:	bf00      	nop
     a10:	2180      	movs	r1, #128	; 0x80
     a12:	480c      	ldr	r0, [pc, #48]	; (a44 <send_number+0x88>)
     a14:	f001 ff0c 	bl	2830 <USART_GetFlagStatus>
     a18:	4603      	mov	r3, r0
     a1a:	2b00      	cmp	r3, #0
     a1c:	d0f8      	beq.n	a10 <send_number+0x54>
        USART_SendData(USART1, str[digit]);
     a1e:	f107 020c 	add.w	r2, r7, #12
     a22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
     a24:	4413      	add	r3, r2
     a26:	781b      	ldrb	r3, [r3, #0]
     a28:	b29b      	uxth	r3, r3
     a2a:	4619      	mov	r1, r3
     a2c:	4805      	ldr	r0, [pc, #20]	; (a44 <send_number+0x88>)
     a2e:	f001 fdbe 	bl	25ae <USART_SendData>
    while(digit != 0) {
     a32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
     a34:	2b00      	cmp	r3, #0
     a36:	d1e7      	bne.n	a08 <send_number+0x4c>
    }
}
     a38:	bf00      	nop
     a3a:	bf00      	nop
     a3c:	3778      	adds	r7, #120	; 0x78
     a3e:	46bd      	mov	sp, r7
     a40:	bd80      	pop	{r7, pc}
     a42:	bf00      	nop
     a44:	40013800 	.word	0x40013800

00000a48 <myprintf_init>:
#define LARGE  	64		/* use 'ABCDEF' instead of 'abcdef' */
#define SMALL  	64		/* use 'abcdef' instead of 'ABCDEF' */
#define PBSIZE 128 /* Print Buffer Size  */

void myprintf_init()
{
     a48:	b580      	push	{r7, lr}
     a4a:	af00      	add	r7, sp, #0
    init_rs232();
     a4c:	f7ff fefc 	bl	848 <init_rs232>
    enable_rs232_interrupts();
     a50:	f7ff ff38 	bl	8c4 <enable_rs232_interrupts>
    enable_rs232();
     a54:	f7ff ff56 	bl	904 <enable_rs232>
}
     a58:	bf00      	nop
     a5a:	bd80      	pop	{r7, pc}

00000a5c <usart_send_bytes>:

void usart_send_bytes(uint8_t data)
{
     a5c:	b580      	push	{r7, lr}
     a5e:	b082      	sub	sp, #8
     a60:	af00      	add	r7, sp, #0
     a62:	4603      	mov	r3, r0
     a64:	71fb      	strb	r3, [r7, #7]
    while(!USART_GetFlagStatus(USART1 ,USART_FLAG_TXE)) {
     a66:	bf00      	nop
     a68:	2180      	movs	r1, #128	; 0x80
     a6a:	4808      	ldr	r0, [pc, #32]	; (a8c <usart_send_bytes+0x30>)
     a6c:	f001 fee0 	bl	2830 <USART_GetFlagStatus>
     a70:	4603      	mov	r3, r0
     a72:	2b00      	cmp	r3, #0
     a74:	d0f8      	beq.n	a68 <usart_send_bytes+0xc>
    }
    USART_SendData( USART1, data);
     a76:	79fb      	ldrb	r3, [r7, #7]
     a78:	b29b      	uxth	r3, r3
     a7a:	4619      	mov	r1, r3
     a7c:	4803      	ldr	r0, [pc, #12]	; (a8c <usart_send_bytes+0x30>)
     a7e:	f001 fd96 	bl	25ae <USART_SendData>
}
     a82:	bf00      	nop
     a84:	3708      	adds	r7, #8
     a86:	46bd      	mov	sp, r7
     a88:	bd80      	pop	{r7, pc}
     a8a:	bf00      	nop
     a8c:	40013800 	.word	0x40013800

00000a90 <mystrnlen>:


signed int mystrnlen (const char * s, signed int count)
{
     a90:	b480      	push	{r7}
     a92:	b085      	sub	sp, #20
     a94:	af00      	add	r7, sp, #0
     a96:	6078      	str	r0, [r7, #4]
     a98:	6039      	str	r1, [r7, #0]
    const char *sc;

    for (sc = s; count-- && *sc != '\0'; ++sc) {
     a9a:	687b      	ldr	r3, [r7, #4]
     a9c:	60fb      	str	r3, [r7, #12]
     a9e:	e002      	b.n	aa6 <mystrnlen+0x16>
     aa0:	68fb      	ldr	r3, [r7, #12]
     aa2:	3301      	adds	r3, #1
     aa4:	60fb      	str	r3, [r7, #12]
     aa6:	683b      	ldr	r3, [r7, #0]
     aa8:	1e5a      	subs	r2, r3, #1
     aaa:	603a      	str	r2, [r7, #0]
     aac:	2b00      	cmp	r3, #0
     aae:	d003      	beq.n	ab8 <mystrnlen+0x28>
     ab0:	68fb      	ldr	r3, [r7, #12]
     ab2:	781b      	ldrb	r3, [r3, #0]
     ab4:	2b00      	cmp	r3, #0
     ab6:	d1f3      	bne.n	aa0 <mystrnlen+0x10>
        /* nothing */
    }
    return sc - s;
     ab8:	68fa      	ldr	r2, [r7, #12]
     aba:	687b      	ldr	r3, [r7, #4]
     abc:	1ad3      	subs	r3, r2, r3
}
     abe:	4618      	mov	r0, r3
     ac0:	3714      	adds	r7, #20
     ac2:	46bd      	mov	sp, r7
     ac4:	bc80      	pop	{r7}
     ac6:	4770      	bx	lr

00000ac8 <myskip_atoi>:

static int myskip_atoi (const char **s)
{
     ac8:	b480      	push	{r7}
     aca:	b085      	sub	sp, #20
     acc:	af00      	add	r7, sp, #0
     ace:	6078      	str	r0, [r7, #4]
    int i = 0;
     ad0:	2300      	movs	r3, #0
     ad2:	60fb      	str	r3, [r7, #12]

    while (isdigit(**s) != 0) {
     ad4:	e00e      	b.n	af4 <myskip_atoi+0x2c>
        i = i * 10 + *((*s)++) - '0';
     ad6:	68fa      	ldr	r2, [r7, #12]
     ad8:	4613      	mov	r3, r2
     ada:	009b      	lsls	r3, r3, #2
     adc:	4413      	add	r3, r2
     ade:	005b      	lsls	r3, r3, #1
     ae0:	4618      	mov	r0, r3
     ae2:	687b      	ldr	r3, [r7, #4]
     ae4:	681b      	ldr	r3, [r3, #0]
     ae6:	1c59      	adds	r1, r3, #1
     ae8:	687a      	ldr	r2, [r7, #4]
     aea:	6011      	str	r1, [r2, #0]
     aec:	781b      	ldrb	r3, [r3, #0]
     aee:	4403      	add	r3, r0
     af0:	3b30      	subs	r3, #48	; 0x30
     af2:	60fb      	str	r3, [r7, #12]
    while (isdigit(**s) != 0) {
     af4:	687b      	ldr	r3, [r7, #4]
     af6:	681b      	ldr	r3, [r3, #0]
     af8:	781b      	ldrb	r3, [r3, #0]
     afa:	3b30      	subs	r3, #48	; 0x30
     afc:	2b09      	cmp	r3, #9
     afe:	d9ea      	bls.n	ad6 <myskip_atoi+0xe>
    }
    return i;
     b00:	68fb      	ldr	r3, [r7, #12]
}
     b02:	4618      	mov	r0, r3
     b04:	3714      	adds	r7, #20
     b06:	46bd      	mov	sp, r7
     b08:	bc80      	pop	{r7}
     b0a:	4770      	bx	lr

00000b0c <mynumber>:

static char * mynumber (char * str, long num, int base, int size, int precision ,int type)
{
     b0c:	b580      	push	{r7, lr}
     b0e:	b09a      	sub	sp, #104	; 0x68
     b10:	af00      	add	r7, sp, #0
     b12:	60f8      	str	r0, [r7, #12]
     b14:	60b9      	str	r1, [r7, #8]
     b16:	607a      	str	r2, [r7, #4]
     b18:	603b      	str	r3, [r7, #0]
    char c = 0;
     b1a:	2300      	movs	r3, #0
     b1c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    char sign = 0;
     b20:	2300      	movs	r3, #0
     b22:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    char tmp[66] = {0};
     b26:	2300      	movs	r3, #0
     b28:	613b      	str	r3, [r7, #16]
     b2a:	f107 0314 	add.w	r3, r7, #20
     b2e:	223e      	movs	r2, #62	; 0x3e
     b30:	2100      	movs	r1, #0
     b32:	4618      	mov	r0, r3
     b34:	f008 f95c 	bl	8df0 <memset>
    int  i = 0;
     b38:	2300      	movs	r3, #0
     b3a:	663b      	str	r3, [r7, #96]	; 0x60
    const char *digits = "0123456789abcdefghijklmnopqrstuvwxyz";
     b3c:	4b85      	ldr	r3, [pc, #532]	; (d54 <mynumber+0x248>)
     b3e:	65fb      	str	r3, [r7, #92]	; 0x5c

    if ((type & LARGE) != 0) {
     b40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
     b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
     b46:	2b00      	cmp	r3, #0
     b48:	d001      	beq.n	b4e <mynumber+0x42>
        digits = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
     b4a:	4b83      	ldr	r3, [pc, #524]	; (d58 <mynumber+0x24c>)
     b4c:	65fb      	str	r3, [r7, #92]	; 0x5c
    }
    if ((type & LEFT) != 0) {
     b4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
     b50:	f003 0310 	and.w	r3, r3, #16
     b54:	2b00      	cmp	r3, #0
     b56:	d003      	beq.n	b60 <mynumber+0x54>
        type &= ~ZEROPAD;
     b58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
     b5a:	f023 0301 	bic.w	r3, r3, #1
     b5e:	677b      	str	r3, [r7, #116]	; 0x74
    }
    if ((base < 2) || (base > 36)) {
     b60:	687b      	ldr	r3, [r7, #4]
     b62:	2b01      	cmp	r3, #1
     b64:	dd02      	ble.n	b6c <mynumber+0x60>
     b66:	687b      	ldr	r3, [r7, #4]
     b68:	2b24      	cmp	r3, #36	; 0x24
     b6a:	dd01      	ble.n	b70 <mynumber+0x64>
        return 0;
     b6c:	2300      	movs	r3, #0
     b6e:	e0ec      	b.n	d4a <mynumber+0x23e>
    }

    c = (type & ZEROPAD) ? '0' : ' ';
     b70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
     b72:	f003 0301 	and.w	r3, r3, #1
     b76:	2b00      	cmp	r3, #0
     b78:	d001      	beq.n	b7e <mynumber+0x72>
     b7a:	2330      	movs	r3, #48	; 0x30
     b7c:	e000      	b.n	b80 <mynumber+0x74>
     b7e:	2320      	movs	r3, #32
     b80:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    sign = 0;
     b84:	2300      	movs	r3, #0
     b86:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

    if ((type & SIGN) != 0) {
     b8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
     b8c:	f003 0302 	and.w	r3, r3, #2
     b90:	2b00      	cmp	r3, #0
     b92:	d023      	beq.n	bdc <mynumber+0xd0>
        if (num < 0) {
     b94:	68bb      	ldr	r3, [r7, #8]
     b96:	2b00      	cmp	r3, #0
     b98:	da09      	bge.n	bae <mynumber+0xa2>
            sign = '-';
     b9a:	232d      	movs	r3, #45	; 0x2d
     b9c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
            num = -num;
     ba0:	68bb      	ldr	r3, [r7, #8]
     ba2:	425b      	negs	r3, r3
     ba4:	60bb      	str	r3, [r7, #8]
            size--;
     ba6:	683b      	ldr	r3, [r7, #0]
     ba8:	3b01      	subs	r3, #1
     baa:	603b      	str	r3, [r7, #0]
     bac:	e016      	b.n	bdc <mynumber+0xd0>
        } else if ((type & PLUS) != 0) {
     bae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
     bb0:	f003 0304 	and.w	r3, r3, #4
     bb4:	2b00      	cmp	r3, #0
     bb6:	d006      	beq.n	bc6 <mynumber+0xba>
            sign = '+';
     bb8:	232b      	movs	r3, #43	; 0x2b
     bba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
            size--;
     bbe:	683b      	ldr	r3, [r7, #0]
     bc0:	3b01      	subs	r3, #1
     bc2:	603b      	str	r3, [r7, #0]
     bc4:	e00a      	b.n	bdc <mynumber+0xd0>
        } else if ((type & SPACE) != 0) {
     bc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
     bc8:	f003 0308 	and.w	r3, r3, #8
     bcc:	2b00      	cmp	r3, #0
     bce:	d005      	beq.n	bdc <mynumber+0xd0>
            sign = ' ';
     bd0:	2320      	movs	r3, #32
     bd2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
            size--;
     bd6:	683b      	ldr	r3, [r7, #0]
     bd8:	3b01      	subs	r3, #1
     bda:	603b      	str	r3, [r7, #0]
        }
    }
    if ((type & SPECIAL) != 0) {
     bdc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
     bde:	f003 0320 	and.w	r3, r3, #32
     be2:	2b00      	cmp	r3, #0
     be4:	d00c      	beq.n	c00 <mynumber+0xf4>
        if (16 == base) {
     be6:	687b      	ldr	r3, [r7, #4]
     be8:	2b10      	cmp	r3, #16
     bea:	d103      	bne.n	bf4 <mynumber+0xe8>
            size -= 2;
     bec:	683b      	ldr	r3, [r7, #0]
     bee:	3b02      	subs	r3, #2
     bf0:	603b      	str	r3, [r7, #0]
     bf2:	e005      	b.n	c00 <mynumber+0xf4>
        } else if (8 == base) {
     bf4:	687b      	ldr	r3, [r7, #4]
     bf6:	2b08      	cmp	r3, #8
     bf8:	d102      	bne.n	c00 <mynumber+0xf4>
            size--;
     bfa:	683b      	ldr	r3, [r7, #0]
     bfc:	3b01      	subs	r3, #1
     bfe:	603b      	str	r3, [r7, #0]
        }
    }
    i = 0;
     c00:	2300      	movs	r3, #0
     c02:	663b      	str	r3, [r7, #96]	; 0x60
    if (0 == num) {
     c04:	68bb      	ldr	r3, [r7, #8]
     c06:	2b00      	cmp	r3, #0
     c08:	d123      	bne.n	c52 <mynumber+0x146>
        tmp[i++] = '0';
     c0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
     c0c:	1c5a      	adds	r2, r3, #1
     c0e:	663a      	str	r2, [r7, #96]	; 0x60
     c10:	f107 0268 	add.w	r2, r7, #104	; 0x68
     c14:	4413      	add	r3, r2
     c16:	2230      	movs	r2, #48	; 0x30
     c18:	f803 2c58 	strb.w	r2, [r3, #-88]
     c1c:	e01c      	b.n	c58 <mynumber+0x14c>
    } else {
        while (num != 0) {
            tmp[i++] = digits[mydo_div(num,base)];
     c1e:	68bb      	ldr	r3, [r7, #8]
     c20:	687a      	ldr	r2, [r7, #4]
     c22:	fbb3 f1f2 	udiv	r1, r3, r2
     c26:	fb02 f201 	mul.w	r2, r2, r1
     c2a:	1a9b      	subs	r3, r3, r2
     c2c:	657b      	str	r3, [r7, #84]	; 0x54
     c2e:	68ba      	ldr	r2, [r7, #8]
     c30:	687b      	ldr	r3, [r7, #4]
     c32:	fbb2 f3f3 	udiv	r3, r2, r3
     c36:	60bb      	str	r3, [r7, #8]
     c38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
     c3a:	461a      	mov	r2, r3
     c3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
     c3e:	441a      	add	r2, r3
     c40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
     c42:	1c59      	adds	r1, r3, #1
     c44:	6639      	str	r1, [r7, #96]	; 0x60
     c46:	7812      	ldrb	r2, [r2, #0]
     c48:	f107 0168 	add.w	r1, r7, #104	; 0x68
     c4c:	440b      	add	r3, r1
     c4e:	f803 2c58 	strb.w	r2, [r3, #-88]
        while (num != 0) {
     c52:	68bb      	ldr	r3, [r7, #8]
     c54:	2b00      	cmp	r3, #0
     c56:	d1e2      	bne.n	c1e <mynumber+0x112>
        }
    }
    if (i > precision) {
     c58:	6e3a      	ldr	r2, [r7, #96]	; 0x60
     c5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
     c5c:	429a      	cmp	r2, r3
     c5e:	dd01      	ble.n	c64 <mynumber+0x158>
        precision = i;
     c60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
     c62:	673b      	str	r3, [r7, #112]	; 0x70
    }
    size -= precision;
     c64:	683a      	ldr	r2, [r7, #0]
     c66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
     c68:	1ad3      	subs	r3, r2, r3
     c6a:	603b      	str	r3, [r7, #0]
    if (0 == (type & (ZEROPAD + LEFT))) {
     c6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
     c6e:	f003 0311 	and.w	r3, r3, #17
     c72:	2b00      	cmp	r3, #0
     c74:	d10a      	bne.n	c8c <mynumber+0x180>
        while (size-- > 0) {
     c76:	e004      	b.n	c82 <mynumber+0x176>
            *str++ = ' ';
     c78:	68fb      	ldr	r3, [r7, #12]
     c7a:	1c5a      	adds	r2, r3, #1
     c7c:	60fa      	str	r2, [r7, #12]
     c7e:	2220      	movs	r2, #32
     c80:	701a      	strb	r2, [r3, #0]
        while (size-- > 0) {
     c82:	683b      	ldr	r3, [r7, #0]
     c84:	1e5a      	subs	r2, r3, #1
     c86:	603a      	str	r2, [r7, #0]
     c88:	2b00      	cmp	r3, #0
     c8a:	dcf5      	bgt.n	c78 <mynumber+0x16c>
        }
    }
    if (sign != 0) {
     c8c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
     c90:	2b00      	cmp	r3, #0
     c92:	d005      	beq.n	ca0 <mynumber+0x194>
        *str++ = sign;
     c94:	68fb      	ldr	r3, [r7, #12]
     c96:	1c5a      	adds	r2, r3, #1
     c98:	60fa      	str	r2, [r7, #12]
     c9a:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
     c9e:	701a      	strb	r2, [r3, #0]
    }
    if ((type & SPECIAL) != 0) {
     ca0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
     ca2:	f003 0320 	and.w	r3, r3, #32
     ca6:	2b00      	cmp	r3, #0
     ca8:	d017      	beq.n	cda <mynumber+0x1ce>
        if (8 == base) {
     caa:	687b      	ldr	r3, [r7, #4]
     cac:	2b08      	cmp	r3, #8
     cae:	d105      	bne.n	cbc <mynumber+0x1b0>
            *str++ = '0';
     cb0:	68fb      	ldr	r3, [r7, #12]
     cb2:	1c5a      	adds	r2, r3, #1
     cb4:	60fa      	str	r2, [r7, #12]
     cb6:	2230      	movs	r2, #48	; 0x30
     cb8:	701a      	strb	r2, [r3, #0]
     cba:	e00e      	b.n	cda <mynumber+0x1ce>
        } else if (16 == base) {
     cbc:	687b      	ldr	r3, [r7, #4]
     cbe:	2b10      	cmp	r3, #16
     cc0:	d10b      	bne.n	cda <mynumber+0x1ce>
            *str++ = '0';
     cc2:	68fb      	ldr	r3, [r7, #12]
     cc4:	1c5a      	adds	r2, r3, #1
     cc6:	60fa      	str	r2, [r7, #12]
     cc8:	2230      	movs	r2, #48	; 0x30
     cca:	701a      	strb	r2, [r3, #0]
            *str++ = digits[33];
     ccc:	68fb      	ldr	r3, [r7, #12]
     cce:	1c5a      	adds	r2, r3, #1
     cd0:	60fa      	str	r2, [r7, #12]
     cd2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
     cd4:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
     cd8:	701a      	strb	r2, [r3, #0]
        }
    }
    if (0 == (type & LEFT)) {
     cda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
     cdc:	f003 0310 	and.w	r3, r3, #16
     ce0:	2b00      	cmp	r3, #0
     ce2:	d111      	bne.n	d08 <mynumber+0x1fc>
        while (size-- > 0) {
     ce4:	e005      	b.n	cf2 <mynumber+0x1e6>
            *str++ = c;
     ce6:	68fb      	ldr	r3, [r7, #12]
     ce8:	1c5a      	adds	r2, r3, #1
     cea:	60fa      	str	r2, [r7, #12]
     cec:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
     cf0:	701a      	strb	r2, [r3, #0]
        while (size-- > 0) {
     cf2:	683b      	ldr	r3, [r7, #0]
     cf4:	1e5a      	subs	r2, r3, #1
     cf6:	603a      	str	r2, [r7, #0]
     cf8:	2b00      	cmp	r3, #0
     cfa:	dcf4      	bgt.n	ce6 <mynumber+0x1da>
        }
    }
    while (i < precision--) {
     cfc:	e004      	b.n	d08 <mynumber+0x1fc>
        *str++ = '0';
     cfe:	68fb      	ldr	r3, [r7, #12]
     d00:	1c5a      	adds	r2, r3, #1
     d02:	60fa      	str	r2, [r7, #12]
     d04:	2230      	movs	r2, #48	; 0x30
     d06:	701a      	strb	r2, [r3, #0]
    while (i < precision--) {
     d08:	6f3b      	ldr	r3, [r7, #112]	; 0x70
     d0a:	1e5a      	subs	r2, r3, #1
     d0c:	673a      	str	r2, [r7, #112]	; 0x70
     d0e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
     d10:	429a      	cmp	r2, r3
     d12:	dbf4      	blt.n	cfe <mynumber+0x1f2>
    }
    while (i-- > 0) {
     d14:	e008      	b.n	d28 <mynumber+0x21c>
        *str++ = tmp[i];
     d16:	68fb      	ldr	r3, [r7, #12]
     d18:	1c5a      	adds	r2, r3, #1
     d1a:	60fa      	str	r2, [r7, #12]
     d1c:	f107 0110 	add.w	r1, r7, #16
     d20:	6e3a      	ldr	r2, [r7, #96]	; 0x60
     d22:	440a      	add	r2, r1
     d24:	7812      	ldrb	r2, [r2, #0]
     d26:	701a      	strb	r2, [r3, #0]
    while (i-- > 0) {
     d28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
     d2a:	1e5a      	subs	r2, r3, #1
     d2c:	663a      	str	r2, [r7, #96]	; 0x60
     d2e:	2b00      	cmp	r3, #0
     d30:	dcf1      	bgt.n	d16 <mynumber+0x20a>
    }
    while (size-- > 0) {
     d32:	e004      	b.n	d3e <mynumber+0x232>
        *str++ = ' ';
     d34:	68fb      	ldr	r3, [r7, #12]
     d36:	1c5a      	adds	r2, r3, #1
     d38:	60fa      	str	r2, [r7, #12]
     d3a:	2220      	movs	r2, #32
     d3c:	701a      	strb	r2, [r3, #0]
    while (size-- > 0) {
     d3e:	683b      	ldr	r3, [r7, #0]
     d40:	1e5a      	subs	r2, r3, #1
     d42:	603a      	str	r2, [r7, #0]
     d44:	2b00      	cmp	r3, #0
     d46:	dcf5      	bgt.n	d34 <mynumber+0x228>
    }

    return str;
     d48:	68fb      	ldr	r3, [r7, #12]
}
     d4a:	4618      	mov	r0, r3
     d4c:	3768      	adds	r7, #104	; 0x68
     d4e:	46bd      	mov	sp, r7
     d50:	bd80      	pop	{r7, pc}
     d52:	bf00      	nop
     d54:	00008f24 	.word	0x00008f24
     d58:	00008f4c 	.word	0x00008f4c

00000d5c <myvsprintf>:
 *
 * If you're not already dealing with a va_list consider using sprintf().
 */

int myvsprintf (char *buf, const char *fmt, va_list args)
{
     d5c:	b580      	push	{r7, lr}
     d5e:	b092      	sub	sp, #72	; 0x48
     d60:	af02      	add	r7, sp, #8
     d62:	60f8      	str	r0, [r7, #12]
     d64:	60b9      	str	r1, [r7, #8]
     d66:	607a      	str	r2, [r7, #4]
    int qualifier;		//'h', 'l', or 'q' for integer fields
    char * str;
    const char *s;
    unsigned long num;

    for (str = buf; *fmt; ++fmt) {
     d68:	68fb      	ldr	r3, [r7, #12]
     d6a:	627b      	str	r3, [r7, #36]	; 0x24
     d6c:	e264      	b.n	1238 <myvsprintf+0x4dc>
        if (*fmt != '%') {
     d6e:	68bb      	ldr	r3, [r7, #8]
     d70:	781b      	ldrb	r3, [r3, #0]
     d72:	2b25      	cmp	r3, #37	; 0x25
     d74:	d006      	beq.n	d84 <myvsprintf+0x28>
            *str++ = *fmt;
     d76:	68ba      	ldr	r2, [r7, #8]
     d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     d7a:	1c59      	adds	r1, r3, #1
     d7c:	6279      	str	r1, [r7, #36]	; 0x24
     d7e:	7812      	ldrb	r2, [r2, #0]
     d80:	701a      	strb	r2, [r3, #0]
            continue;
     d82:	e256      	b.n	1232 <myvsprintf+0x4d6>
        }

        flags = 0;     //process flags
     d84:	2300      	movs	r3, #0
     d86:	63bb      	str	r3, [r7, #56]	; 0x38

repeat:
        ++fmt;		   //this also skips first '%'
     d88:	68bb      	ldr	r3, [r7, #8]
     d8a:	3301      	adds	r3, #1
     d8c:	60bb      	str	r3, [r7, #8]
        switch (*fmt) {
     d8e:	68bb      	ldr	r3, [r7, #8]
     d90:	781b      	ldrb	r3, [r3, #0]
     d92:	3b20      	subs	r3, #32
     d94:	2b10      	cmp	r3, #16
     d96:	d83e      	bhi.n	e16 <myvsprintf+0xba>
     d98:	a201      	add	r2, pc, #4	; (adr r2, da0 <myvsprintf+0x44>)
     d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     d9e:	bf00      	nop
     da0:	00000df9 	.word	0x00000df9
     da4:	00000e17 	.word	0x00000e17
     da8:	00000e17 	.word	0x00000e17
     dac:	00000e03 	.word	0x00000e03
     db0:	00000e17 	.word	0x00000e17
     db4:	00000e17 	.word	0x00000e17
     db8:	00000e17 	.word	0x00000e17
     dbc:	00000e17 	.word	0x00000e17
     dc0:	00000e17 	.word	0x00000e17
     dc4:	00000e17 	.word	0x00000e17
     dc8:	00000e17 	.word	0x00000e17
     dcc:	00000def 	.word	0x00000def
     dd0:	00000e17 	.word	0x00000e17
     dd4:	00000de5 	.word	0x00000de5
     dd8:	00000e17 	.word	0x00000e17
     ddc:	00000e17 	.word	0x00000e17
     de0:	00000e0d 	.word	0x00000e0d
        case '-':
            flags |= LEFT;
     de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     de6:	f043 0310 	orr.w	r3, r3, #16
     dea:	63bb      	str	r3, [r7, #56]	; 0x38
            goto repeat;
     dec:	e7cc      	b.n	d88 <myvsprintf+0x2c>
        case '+':
            flags |= PLUS;
     dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     df0:	f043 0304 	orr.w	r3, r3, #4
     df4:	63bb      	str	r3, [r7, #56]	; 0x38
            goto repeat;
     df6:	e7c7      	b.n	d88 <myvsprintf+0x2c>
        case ' ':
            flags |= SPACE;
     df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     dfa:	f043 0308 	orr.w	r3, r3, #8
     dfe:	63bb      	str	r3, [r7, #56]	; 0x38
            goto repeat;
     e00:	e7c2      	b.n	d88 <myvsprintf+0x2c>
        case '#':
            flags |= SPECIAL;
     e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     e04:	f043 0320 	orr.w	r3, r3, #32
     e08:	63bb      	str	r3, [r7, #56]	; 0x38
            goto repeat;
     e0a:	e7bd      	b.n	d88 <myvsprintf+0x2c>
        case '0':
            flags |= ZEROPAD;
     e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     e0e:	f043 0301 	orr.w	r3, r3, #1
     e12:	63bb      	str	r3, [r7, #56]	; 0x38
            goto repeat;
     e14:	e7b8      	b.n	d88 <myvsprintf+0x2c>
        }

        field_width = -1;  //get field width
     e16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     e1a:	633b      	str	r3, [r7, #48]	; 0x30
        if (isdigit(*fmt) != 0) {
     e1c:	68bb      	ldr	r3, [r7, #8]
     e1e:	781b      	ldrb	r3, [r3, #0]
     e20:	3b30      	subs	r3, #48	; 0x30
     e22:	2b09      	cmp	r3, #9
     e24:	d806      	bhi.n	e34 <myvsprintf+0xd8>

            field_width = myskip_atoi(&fmt);
     e26:	f107 0308 	add.w	r3, r7, #8
     e2a:	4618      	mov	r0, r3
     e2c:	f7ff fe4c 	bl	ac8 <myskip_atoi>
     e30:	6338      	str	r0, [r7, #48]	; 0x30
     e32:	e015      	b.n	e60 <myvsprintf+0x104>
        } else if ('*' == *fmt) {
     e34:	68bb      	ldr	r3, [r7, #8]
     e36:	781b      	ldrb	r3, [r3, #0]
     e38:	2b2a      	cmp	r3, #42	; 0x2a
     e3a:	d111      	bne.n	e60 <myvsprintf+0x104>
            ++fmt;
     e3c:	68bb      	ldr	r3, [r7, #8]
     e3e:	3301      	adds	r3, #1
     e40:	60bb      	str	r3, [r7, #8]
            field_width = va_arg(args, int); //it's the next argument
     e42:	687b      	ldr	r3, [r7, #4]
     e44:	1d1a      	adds	r2, r3, #4
     e46:	607a      	str	r2, [r7, #4]
     e48:	681b      	ldr	r3, [r3, #0]
     e4a:	633b      	str	r3, [r7, #48]	; 0x30
            if (field_width < 0) {
     e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     e4e:	2b00      	cmp	r3, #0
     e50:	da06      	bge.n	e60 <myvsprintf+0x104>
                field_width = -field_width;
     e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     e54:	425b      	negs	r3, r3
     e56:	633b      	str	r3, [r7, #48]	; 0x30
                flags |= LEFT;
     e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     e5a:	f043 0310 	orr.w	r3, r3, #16
     e5e:	63bb      	str	r3, [r7, #56]	; 0x38
            }
        }

        precision = -1;      //get the precision
     e60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     e64:	62fb      	str	r3, [r7, #44]	; 0x2c
        if ('.' == *fmt) {
     e66:	68bb      	ldr	r3, [r7, #8]
     e68:	781b      	ldrb	r3, [r3, #0]
     e6a:	2b2e      	cmp	r3, #46	; 0x2e
     e6c:	d11f      	bne.n	eae <myvsprintf+0x152>
            ++fmt;
     e6e:	68bb      	ldr	r3, [r7, #8]
     e70:	3301      	adds	r3, #1
     e72:	60bb      	str	r3, [r7, #8]
            if (isdigit(*fmt)) {
     e74:	68bb      	ldr	r3, [r7, #8]
     e76:	781b      	ldrb	r3, [r3, #0]
     e78:	3b30      	subs	r3, #48	; 0x30
     e7a:	2b09      	cmp	r3, #9
     e7c:	d806      	bhi.n	e8c <myvsprintf+0x130>
                precision = myskip_atoi(&fmt);
     e7e:	f107 0308 	add.w	r3, r7, #8
     e82:	4618      	mov	r0, r3
     e84:	f7ff fe20 	bl	ac8 <myskip_atoi>
     e88:	62f8      	str	r0, [r7, #44]	; 0x2c
     e8a:	e00b      	b.n	ea4 <myvsprintf+0x148>
            } else if ('*' == *fmt) {
     e8c:	68bb      	ldr	r3, [r7, #8]
     e8e:	781b      	ldrb	r3, [r3, #0]
     e90:	2b2a      	cmp	r3, #42	; 0x2a
     e92:	d107      	bne.n	ea4 <myvsprintf+0x148>
                ++fmt;
     e94:	68bb      	ldr	r3, [r7, #8]
     e96:	3301      	adds	r3, #1
     e98:	60bb      	str	r3, [r7, #8]
                precision = va_arg(args, int); //it's the next argument
     e9a:	687b      	ldr	r3, [r7, #4]
     e9c:	1d1a      	adds	r2, r3, #4
     e9e:	607a      	str	r2, [r7, #4]
     ea0:	681b      	ldr	r3, [r3, #0]
     ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
            if (precision < 0) {
     ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     ea6:	2b00      	cmp	r3, #0
     ea8:	da01      	bge.n	eae <myvsprintf+0x152>
                precision = 0;
     eaa:	2300      	movs	r3, #0
     eac:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
        }

        qualifier = -1;         //get the conversion qualifier
     eae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     eb2:	62bb      	str	r3, [r7, #40]	; 0x28
        if (('h' == *fmt) || ('l' == *fmt) || ('q' == *fmt)) {
     eb4:	68bb      	ldr	r3, [r7, #8]
     eb6:	781b      	ldrb	r3, [r3, #0]
     eb8:	2b68      	cmp	r3, #104	; 0x68
     eba:	d007      	beq.n	ecc <myvsprintf+0x170>
     ebc:	68bb      	ldr	r3, [r7, #8]
     ebe:	781b      	ldrb	r3, [r3, #0]
     ec0:	2b6c      	cmp	r3, #108	; 0x6c
     ec2:	d003      	beq.n	ecc <myvsprintf+0x170>
     ec4:	68bb      	ldr	r3, [r7, #8]
     ec6:	781b      	ldrb	r3, [r3, #0]
     ec8:	2b71      	cmp	r3, #113	; 0x71
     eca:	d105      	bne.n	ed8 <myvsprintf+0x17c>
            qualifier = *fmt;
     ecc:	68bb      	ldr	r3, [r7, #8]
     ece:	781b      	ldrb	r3, [r3, #0]
     ed0:	62bb      	str	r3, [r7, #40]	; 0x28
            ++fmt;
     ed2:	68bb      	ldr	r3, [r7, #8]
     ed4:	3301      	adds	r3, #1
     ed6:	60bb      	str	r3, [r7, #8]
        }

        base = 10;          //default base
     ed8:	230a      	movs	r3, #10
     eda:	637b      	str	r3, [r7, #52]	; 0x34
        switch (*fmt) {
     edc:	68bb      	ldr	r3, [r7, #8]
     ede:	781b      	ldrb	r3, [r3, #0]
     ee0:	3b25      	subs	r3, #37	; 0x25
     ee2:	2b53      	cmp	r3, #83	; 0x53
     ee4:	f200 815a 	bhi.w	119c <myvsprintf+0x440>
     ee8:	a201      	add	r2, pc, #4	; (adr r2, ef0 <myvsprintf+0x194>)
     eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     eee:	bf00      	nop
     ef0:	00001173 	.word	0x00001173
     ef4:	0000119d 	.word	0x0000119d
     ef8:	0000119d 	.word	0x0000119d
     efc:	0000119d 	.word	0x0000119d
     f00:	0000119d 	.word	0x0000119d
     f04:	0000119d 	.word	0x0000119d
     f08:	0000119d 	.word	0x0000119d
     f0c:	0000119d 	.word	0x0000119d
     f10:	0000119d 	.word	0x0000119d
     f14:	0000119d 	.word	0x0000119d
     f18:	0000119d 	.word	0x0000119d
     f1c:	0000119d 	.word	0x0000119d
     f20:	0000119d 	.word	0x0000119d
     f24:	0000119d 	.word	0x0000119d
     f28:	0000119d 	.word	0x0000119d
     f2c:	0000119d 	.word	0x0000119d
     f30:	0000119d 	.word	0x0000119d
     f34:	0000119d 	.word	0x0000119d
     f38:	0000119d 	.word	0x0000119d
     f3c:	0000119d 	.word	0x0000119d
     f40:	0000119d 	.word	0x0000119d
     f44:	0000119d 	.word	0x0000119d
     f48:	0000119d 	.word	0x0000119d
     f4c:	0000119d 	.word	0x0000119d
     f50:	0000119d 	.word	0x0000119d
     f54:	0000119d 	.word	0x0000119d
     f58:	0000119d 	.word	0x0000119d
     f5c:	0000119d 	.word	0x0000119d
     f60:	0000119d 	.word	0x0000119d
     f64:	0000119d 	.word	0x0000119d
     f68:	0000119d 	.word	0x0000119d
     f6c:	0000119d 	.word	0x0000119d
     f70:	0000119d 	.word	0x0000119d
     f74:	0000119d 	.word	0x0000119d
     f78:	0000119d 	.word	0x0000119d
     f7c:	0000119d 	.word	0x0000119d
     f80:	0000119d 	.word	0x0000119d
     f84:	0000119d 	.word	0x0000119d
     f88:	0000119d 	.word	0x0000119d
     f8c:	0000119d 	.word	0x0000119d
     f90:	0000119d 	.word	0x0000119d
     f94:	0000119d 	.word	0x0000119d
     f98:	0000119d 	.word	0x0000119d
     f9c:	0000119d 	.word	0x0000119d
     fa0:	0000119d 	.word	0x0000119d
     fa4:	0000119d 	.word	0x0000119d
     fa8:	0000119d 	.word	0x0000119d
     fac:	0000119d 	.word	0x0000119d
     fb0:	0000119d 	.word	0x0000119d
     fb4:	0000119d 	.word	0x0000119d
     fb8:	0000119d 	.word	0x0000119d
     fbc:	00001185 	.word	0x00001185
     fc0:	0000119d 	.word	0x0000119d
     fc4:	0000119d 	.word	0x0000119d
     fc8:	0000119d 	.word	0x0000119d
     fcc:	0000119d 	.word	0x0000119d
     fd0:	0000119d 	.word	0x0000119d
     fd4:	0000119d 	.word	0x0000119d
     fd8:	0000119d 	.word	0x0000119d
     fdc:	0000119d 	.word	0x0000119d
     fe0:	0000119d 	.word	0x0000119d
     fe4:	0000119d 	.word	0x0000119d
     fe8:	00001041 	.word	0x00001041
     fec:	00001193 	.word	0x00001193
     ff0:	0000119d 	.word	0x0000119d
     ff4:	0000119d 	.word	0x0000119d
     ff8:	0000119d 	.word	0x0000119d
     ffc:	0000119d 	.word	0x0000119d
    1000:	00001193 	.word	0x00001193
    1004:	0000119d 	.word	0x0000119d
    1008:	0000119d 	.word	0x0000119d
    100c:	0000119d 	.word	0x0000119d
    1010:	0000119d 	.word	0x0000119d
    1014:	00001141 	.word	0x00001141
    1018:	0000117f 	.word	0x0000117f
    101c:	0000110d 	.word	0x0000110d
    1020:	0000119d 	.word	0x0000119d
    1024:	0000119d 	.word	0x0000119d
    1028:	0000108f 	.word	0x0000108f
    102c:	0000119d 	.word	0x0000119d
    1030:	000011c5 	.word	0x000011c5
    1034:	0000119d 	.word	0x0000119d
    1038:	0000119d 	.word	0x0000119d
    103c:	0000118d 	.word	0x0000118d
        case 'c': {
            if (0 == (flags & LEFT)) {
    1040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1042:	f003 0310 	and.w	r3, r3, #16
    1046:	2b00      	cmp	r3, #0
    1048:	d10b      	bne.n	1062 <myvsprintf+0x306>
                while (--field_width > 0) {
    104a:	e004      	b.n	1056 <myvsprintf+0x2fa>
                    *str++ = ' ';
    104c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    104e:	1c5a      	adds	r2, r3, #1
    1050:	627a      	str	r2, [r7, #36]	; 0x24
    1052:	2220      	movs	r2, #32
    1054:	701a      	strb	r2, [r3, #0]
                while (--field_width > 0) {
    1056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1058:	3b01      	subs	r3, #1
    105a:	633b      	str	r3, [r7, #48]	; 0x30
    105c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    105e:	2b00      	cmp	r3, #0
    1060:	dcf4      	bgt.n	104c <myvsprintf+0x2f0>
                }
            }
            *str++ = (unsigned char) va_arg(args, int);
    1062:	687b      	ldr	r3, [r7, #4]
    1064:	1d1a      	adds	r2, r3, #4
    1066:	607a      	str	r2, [r7, #4]
    1068:	6819      	ldr	r1, [r3, #0]
    106a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    106c:	1c5a      	adds	r2, r3, #1
    106e:	627a      	str	r2, [r7, #36]	; 0x24
    1070:	b2ca      	uxtb	r2, r1
    1072:	701a      	strb	r2, [r3, #0]
            while (--field_width > 0) {
    1074:	e004      	b.n	1080 <myvsprintf+0x324>
                *str++ = ' ';
    1076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1078:	1c5a      	adds	r2, r3, #1
    107a:	627a      	str	r2, [r7, #36]	; 0x24
    107c:	2220      	movs	r2, #32
    107e:	701a      	strb	r2, [r3, #0]
            while (--field_width > 0) {
    1080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1082:	3b01      	subs	r3, #1
    1084:	633b      	str	r3, [r7, #48]	; 0x30
    1086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1088:	2b00      	cmp	r3, #0
    108a:	dcf4      	bgt.n	1076 <myvsprintf+0x31a>
            }
            continue;
    108c:	e0d1      	b.n	1232 <myvsprintf+0x4d6>
        }
        case 's': {
            s = va_arg(args, char *);
    108e:	687b      	ldr	r3, [r7, #4]
    1090:	1d1a      	adds	r2, r3, #4
    1092:	607a      	str	r2, [r7, #4]
    1094:	681b      	ldr	r3, [r3, #0]
    1096:	623b      	str	r3, [r7, #32]
            if (!s) {
    1098:	6a3b      	ldr	r3, [r7, #32]
    109a:	2b00      	cmp	r3, #0
    109c:	d101      	bne.n	10a2 <myvsprintf+0x346>
                s = "<NULL>";
    109e:	4b6e      	ldr	r3, [pc, #440]	; (1258 <myvsprintf+0x4fc>)
    10a0:	623b      	str	r3, [r7, #32]
            }
            len = mystrnlen(s, precision);
    10a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    10a4:	6a38      	ldr	r0, [r7, #32]
    10a6:	f7ff fcf3 	bl	a90 <mystrnlen>
    10aa:	61b8      	str	r0, [r7, #24]
            if (0 == (flags & LEFT)) {
    10ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    10ae:	f003 0310 	and.w	r3, r3, #16
    10b2:	2b00      	cmp	r3, #0
    10b4:	d10b      	bne.n	10ce <myvsprintf+0x372>
                while (len < field_width--) {
    10b6:	e004      	b.n	10c2 <myvsprintf+0x366>
                    *str++ = ' ';
    10b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    10ba:	1c5a      	adds	r2, r3, #1
    10bc:	627a      	str	r2, [r7, #36]	; 0x24
    10be:	2220      	movs	r2, #32
    10c0:	701a      	strb	r2, [r3, #0]
                while (len < field_width--) {
    10c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    10c4:	1e5a      	subs	r2, r3, #1
    10c6:	633a      	str	r2, [r7, #48]	; 0x30
    10c8:	69ba      	ldr	r2, [r7, #24]
    10ca:	429a      	cmp	r2, r3
    10cc:	dbf4      	blt.n	10b8 <myvsprintf+0x35c>
                }
            }
            for (i = 0; i < len; ++i) {
    10ce:	2300      	movs	r3, #0
    10d0:	63fb      	str	r3, [r7, #60]	; 0x3c
    10d2:	e00a      	b.n	10ea <myvsprintf+0x38e>
                *str++ = *s++;
    10d4:	6a3a      	ldr	r2, [r7, #32]
    10d6:	1c53      	adds	r3, r2, #1
    10d8:	623b      	str	r3, [r7, #32]
    10da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    10dc:	1c59      	adds	r1, r3, #1
    10de:	6279      	str	r1, [r7, #36]	; 0x24
    10e0:	7812      	ldrb	r2, [r2, #0]
    10e2:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < len; ++i) {
    10e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    10e6:	3301      	adds	r3, #1
    10e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    10ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    10ec:	69bb      	ldr	r3, [r7, #24]
    10ee:	429a      	cmp	r2, r3
    10f0:	dbf0      	blt.n	10d4 <myvsprintf+0x378>
            }
            while (len < field_width--) {
    10f2:	e004      	b.n	10fe <myvsprintf+0x3a2>
                *str++ = ' ';
    10f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    10f6:	1c5a      	adds	r2, r3, #1
    10f8:	627a      	str	r2, [r7, #36]	; 0x24
    10fa:	2220      	movs	r2, #32
    10fc:	701a      	strb	r2, [r3, #0]
            while (len < field_width--) {
    10fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1100:	1e5a      	subs	r2, r3, #1
    1102:	633a      	str	r2, [r7, #48]	; 0x30
    1104:	69ba      	ldr	r2, [r7, #24]
    1106:	429a      	cmp	r2, r3
    1108:	dbf4      	blt.n	10f4 <myvsprintf+0x398>
            }
            continue;
    110a:	e092      	b.n	1232 <myvsprintf+0x4d6>
        }
        case 'p': {
            if (-1 == field_width) {
    110c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    110e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    1112:	d105      	bne.n	1120 <myvsprintf+0x3c4>
                field_width = 2 * sizeof(void *);
    1114:	2308      	movs	r3, #8
    1116:	633b      	str	r3, [r7, #48]	; 0x30
                flags |= ZEROPAD;
    1118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    111a:	f043 0301 	orr.w	r3, r3, #1
    111e:	63bb      	str	r3, [r7, #56]	; 0x38
            }
            str = mynumber(str, (unsigned long)va_arg(args, void *), 16, field_width, precision, flags);
    1120:	687b      	ldr	r3, [r7, #4]
    1122:	1d1a      	adds	r2, r3, #4
    1124:	607a      	str	r2, [r7, #4]
    1126:	681b      	ldr	r3, [r3, #0]
    1128:	4619      	mov	r1, r3
    112a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    112c:	9301      	str	r3, [sp, #4]
    112e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1130:	9300      	str	r3, [sp, #0]
    1132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1134:	2210      	movs	r2, #16
    1136:	6a78      	ldr	r0, [r7, #36]	; 0x24
    1138:	f7ff fce8 	bl	b0c <mynumber>
    113c:	6278      	str	r0, [r7, #36]	; 0x24
            continue;
    113e:	e078      	b.n	1232 <myvsprintf+0x4d6>
        }
        case 'n': {
            if ('l' == qualifier) {
    1140:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1142:	2b6c      	cmp	r3, #108	; 0x6c
    1144:	d10a      	bne.n	115c <myvsprintf+0x400>
                long * ip = va_arg(args, long *);
    1146:	687b      	ldr	r3, [r7, #4]
    1148:	1d1a      	adds	r2, r3, #4
    114a:	607a      	str	r2, [r7, #4]
    114c:	681b      	ldr	r3, [r3, #0]
    114e:	613b      	str	r3, [r7, #16]
                *ip = (str - buf);
    1150:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1152:	68fb      	ldr	r3, [r7, #12]
    1154:	1ad2      	subs	r2, r2, r3
    1156:	693b      	ldr	r3, [r7, #16]
    1158:	601a      	str	r2, [r3, #0]
            } else {
                int * ip = va_arg(args, int *);
                *ip = (str - buf);
            }
            continue;
    115a:	e06a      	b.n	1232 <myvsprintf+0x4d6>
                int * ip = va_arg(args, int *);
    115c:	687b      	ldr	r3, [r7, #4]
    115e:	1d1a      	adds	r2, r3, #4
    1160:	607a      	str	r2, [r7, #4]
    1162:	681b      	ldr	r3, [r3, #0]
    1164:	617b      	str	r3, [r7, #20]
                *ip = (str - buf);
    1166:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1168:	68fb      	ldr	r3, [r7, #12]
    116a:	1ad2      	subs	r2, r2, r3
    116c:	697b      	ldr	r3, [r7, #20]
    116e:	601a      	str	r2, [r3, #0]
            continue;
    1170:	e05f      	b.n	1232 <myvsprintf+0x4d6>
        }
        case '%': {
            *str++ = '%';
    1172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1174:	1c5a      	adds	r2, r3, #1
    1176:	627a      	str	r2, [r7, #36]	; 0x24
    1178:	2225      	movs	r2, #37	; 0x25
    117a:	701a      	strb	r2, [r3, #0]
            continue;
    117c:	e059      	b.n	1232 <myvsprintf+0x4d6>
        }

        case 'o': { //integer number formats - set up the flags and "break"
            base = 8;
    117e:	2308      	movs	r3, #8
    1180:	637b      	str	r3, [r7, #52]	; 0x34
            break;
    1182:	e020      	b.n	11c6 <myvsprintf+0x46a>
        }

        case 'X': {
            flags |= LARGE;
    1184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1186:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    118a:	63bb      	str	r3, [r7, #56]	; 0x38
        }
        case 'x': {
            base = 16;
    118c:	2310      	movs	r3, #16
    118e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
    1190:	e019      	b.n	11c6 <myvsprintf+0x46a>
        }
        case 'd':
        case 'i': {
            flags |= SIGN;
    1192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1194:	f043 0302 	orr.w	r3, r3, #2
    1198:	63bb      	str	r3, [r7, #56]	; 0x38
        }
        case 'u': {
            break;
    119a:	e013      	b.n	11c4 <myvsprintf+0x468>
        }
        default: {
            *str++ = '%';
    119c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    119e:	1c5a      	adds	r2, r3, #1
    11a0:	627a      	str	r2, [r7, #36]	; 0x24
    11a2:	2225      	movs	r2, #37	; 0x25
    11a4:	701a      	strb	r2, [r3, #0]
            if (0 == *fmt) {
    11a6:	68bb      	ldr	r3, [r7, #8]
    11a8:	781b      	ldrb	r3, [r3, #0]
    11aa:	2b00      	cmp	r3, #0
    11ac:	d106      	bne.n	11bc <myvsprintf+0x460>
                *str++ = *fmt;
    11ae:	68ba      	ldr	r2, [r7, #8]
    11b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    11b2:	1c59      	adds	r1, r3, #1
    11b4:	6279      	str	r1, [r7, #36]	; 0x24
    11b6:	7812      	ldrb	r2, [r2, #0]
    11b8:	701a      	strb	r2, [r3, #0]
            } else {
                --fmt;
            }
            continue;
    11ba:	e03a      	b.n	1232 <myvsprintf+0x4d6>
                --fmt;
    11bc:	68bb      	ldr	r3, [r7, #8]
    11be:	3b01      	subs	r3, #1
    11c0:	60bb      	str	r3, [r7, #8]
            continue;
    11c2:	e036      	b.n	1232 <myvsprintf+0x4d6>
            break;
    11c4:	bf00      	nop
        }
        }

        if ('l' == qualifier) {
    11c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    11c8:	2b6c      	cmp	r3, #108	; 0x6c
    11ca:	d105      	bne.n	11d8 <myvsprintf+0x47c>
            num = va_arg(args, unsigned long);
    11cc:	687b      	ldr	r3, [r7, #4]
    11ce:	1d1a      	adds	r2, r3, #4
    11d0:	607a      	str	r2, [r7, #4]
    11d2:	681b      	ldr	r3, [r3, #0]
    11d4:	61fb      	str	r3, [r7, #28]
    11d6:	e021      	b.n	121c <myvsprintf+0x4c0>
        } else if ('h' == qualifier) {
    11d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    11da:	2b68      	cmp	r3, #104	; 0x68
    11dc:	d10e      	bne.n	11fc <myvsprintf+0x4a0>
            num = (unsigned short) va_arg(args, int);
    11de:	687b      	ldr	r3, [r7, #4]
    11e0:	1d1a      	adds	r2, r3, #4
    11e2:	607a      	str	r2, [r7, #4]
    11e4:	681b      	ldr	r3, [r3, #0]
    11e6:	b29b      	uxth	r3, r3
    11e8:	61fb      	str	r3, [r7, #28]
            if (0 == (flags & SIGN)) {
    11ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    11ec:	f003 0302 	and.w	r3, r3, #2
    11f0:	2b00      	cmp	r3, #0
    11f2:	d113      	bne.n	121c <myvsprintf+0x4c0>
                num = (short) num;
    11f4:	69fb      	ldr	r3, [r7, #28]
    11f6:	b21b      	sxth	r3, r3
    11f8:	61fb      	str	r3, [r7, #28]
    11fa:	e00f      	b.n	121c <myvsprintf+0x4c0>
            }
        } else if (0 == (flags & SIGN)) {
    11fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    11fe:	f003 0302 	and.w	r3, r3, #2
    1202:	2b00      	cmp	r3, #0
    1204:	d105      	bne.n	1212 <myvsprintf+0x4b6>
            num = va_arg(args, int);
    1206:	687b      	ldr	r3, [r7, #4]
    1208:	1d1a      	adds	r2, r3, #4
    120a:	607a      	str	r2, [r7, #4]
    120c:	681b      	ldr	r3, [r3, #0]
    120e:	61fb      	str	r3, [r7, #28]
    1210:	e004      	b.n	121c <myvsprintf+0x4c0>
        } else {
            num = va_arg(args, unsigned int);
    1212:	687b      	ldr	r3, [r7, #4]
    1214:	1d1a      	adds	r2, r3, #4
    1216:	607a      	str	r2, [r7, #4]
    1218:	681b      	ldr	r3, [r3, #0]
    121a:	61fb      	str	r3, [r7, #28]
        }

        str = mynumber(str, num, base, field_width, precision, flags);
    121c:	69f9      	ldr	r1, [r7, #28]
    121e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1220:	9301      	str	r3, [sp, #4]
    1222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1224:	9300      	str	r3, [sp, #0]
    1226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1228:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    122a:	6a78      	ldr	r0, [r7, #36]	; 0x24
    122c:	f7ff fc6e 	bl	b0c <mynumber>
    1230:	6278      	str	r0, [r7, #36]	; 0x24
    for (str = buf; *fmt; ++fmt) {
    1232:	68bb      	ldr	r3, [r7, #8]
    1234:	3301      	adds	r3, #1
    1236:	60bb      	str	r3, [r7, #8]
    1238:	68bb      	ldr	r3, [r7, #8]
    123a:	781b      	ldrb	r3, [r3, #0]
    123c:	2b00      	cmp	r3, #0
    123e:	f47f ad96 	bne.w	d6e <myvsprintf+0x12>

    }
    *str = '\0';
    1242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1244:	2200      	movs	r2, #0
    1246:	701a      	strb	r2, [r3, #0]

    return str-buf;
    1248:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    124a:	68fb      	ldr	r3, [r7, #12]
    124c:	1ad3      	subs	r3, r2, r3
}
    124e:	4618      	mov	r0, r3
    1250:	3740      	adds	r7, #64	; 0x40
    1252:	46bd      	mov	sp, r7
    1254:	bd80      	pop	{r7, pc}
    1256:	bf00      	nop
    1258:	00008f74 	.word	0x00008f74

0000125c <myputc>:

void myputc (const char c)
{
    125c:	b580      	push	{r7, lr}
    125e:	b082      	sub	sp, #8
    1260:	af00      	add	r7, sp, #0
    1262:	4603      	mov	r3, r0
    1264:	71fb      	strb	r3, [r7, #7]
    if (c == '\n')
    1266:	79fb      	ldrb	r3, [r7, #7]
    1268:	2b0a      	cmp	r3, #10
    126a:	d102      	bne.n	1272 <myputc+0x16>
        usart_send_bytes('\r');
    126c:	200d      	movs	r0, #13
    126e:	f7ff fbf5 	bl	a5c <usart_send_bytes>
    usart_send_bytes(c);
    1272:	79fb      	ldrb	r3, [r7, #7]
    1274:	4618      	mov	r0, r3
    1276:	f7ff fbf1 	bl	a5c <usart_send_bytes>
}
    127a:	bf00      	nop
    127c:	3708      	adds	r7, #8
    127e:	46bd      	mov	sp, r7
    1280:	bd80      	pop	{r7, pc}

00001282 <myputs>:

void myputs (const unsigned char *s)
{
    1282:	b580      	push	{r7, lr}
    1284:	b082      	sub	sp, #8
    1286:	af00      	add	r7, sp, #0
    1288:	6078      	str	r0, [r7, #4]
    while (*s) {
    128a:	e006      	b.n	129a <myputs+0x18>
        myputc (*s++);
    128c:	687b      	ldr	r3, [r7, #4]
    128e:	1c5a      	adds	r2, r3, #1
    1290:	607a      	str	r2, [r7, #4]
    1292:	781b      	ldrb	r3, [r3, #0]
    1294:	4618      	mov	r0, r3
    1296:	f7ff ffe1 	bl	125c <myputc>
    while (*s) {
    129a:	687b      	ldr	r3, [r7, #4]
    129c:	781b      	ldrb	r3, [r3, #0]
    129e:	2b00      	cmp	r3, #0
    12a0:	d1f4      	bne.n	128c <myputs+0xa>
    }
}
    12a2:	bf00      	nop
    12a4:	bf00      	nop
    12a6:	3708      	adds	r7, #8
    12a8:	46bd      	mov	sp, r7
    12aa:	bd80      	pop	{r7, pc}

000012ac <myprintf>:

void myprintf (const char *fmt,...)
{
    12ac:	b40f      	push	{r0, r1, r2, r3}
    12ae:	b580      	push	{r7, lr}
    12b0:	b0a2      	sub	sp, #136	; 0x88
    12b2:	af00      	add	r7, sp, #0
    va_list args;
    char printbuffer[PBSIZE];

    va_start(args, fmt);
    12b4:	f107 0394 	add.w	r3, r7, #148	; 0x94
    12b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    myvsprintf(printbuffer, fmt, args);
    12bc:	1d3b      	adds	r3, r7, #4
    12be:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
    12c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
    12c6:	4618      	mov	r0, r3
    12c8:	f7ff fd48 	bl	d5c <myvsprintf>
    va_end(args);

    myputs((const unsigned char *)printbuffer);  // Print the string
    12cc:	1d3b      	adds	r3, r7, #4
    12ce:	4618      	mov	r0, r3
    12d0:	f7ff ffd7 	bl	1282 <myputs>
}
    12d4:	bf00      	nop
    12d6:	3788      	adds	r7, #136	; 0x88
    12d8:	46bd      	mov	sp, r7
    12da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    12de:	b004      	add	sp, #16
    12e0:	4770      	bx	lr
    12e2:	bf00      	nop

000012e4 <RCC_DeInit>:
  * @brief  Resets the RCC clock configuration to the default reset state.
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
    12e4:	b480      	push	{r7}
    12e6:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
    12e8:	4b13      	ldr	r3, [pc, #76]	; (1338 <RCC_DeInit+0x54>)
    12ea:	681b      	ldr	r3, [r3, #0]
    12ec:	4a12      	ldr	r2, [pc, #72]	; (1338 <RCC_DeInit+0x54>)
    12ee:	f043 0301 	orr.w	r3, r3, #1
    12f2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
    12f4:	4b10      	ldr	r3, [pc, #64]	; (1338 <RCC_DeInit+0x54>)
    12f6:	685a      	ldr	r2, [r3, #4]
    12f8:	490f      	ldr	r1, [pc, #60]	; (1338 <RCC_DeInit+0x54>)
    12fa:	4b10      	ldr	r3, [pc, #64]	; (133c <RCC_DeInit+0x58>)
    12fc:	4013      	ands	r3, r2
    12fe:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
    1300:	4b0d      	ldr	r3, [pc, #52]	; (1338 <RCC_DeInit+0x54>)
    1302:	681b      	ldr	r3, [r3, #0]
    1304:	4a0c      	ldr	r2, [pc, #48]	; (1338 <RCC_DeInit+0x54>)
    1306:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
    130a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    130e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
    1310:	4b09      	ldr	r3, [pc, #36]	; (1338 <RCC_DeInit+0x54>)
    1312:	681b      	ldr	r3, [r3, #0]
    1314:	4a08      	ldr	r2, [pc, #32]	; (1338 <RCC_DeInit+0x54>)
    1316:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    131a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
    131c:	4b06      	ldr	r3, [pc, #24]	; (1338 <RCC_DeInit+0x54>)
    131e:	685b      	ldr	r3, [r3, #4]
    1320:	4a05      	ldr	r2, [pc, #20]	; (1338 <RCC_DeInit+0x54>)
    1322:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
    1326:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
    1328:	4b03      	ldr	r3, [pc, #12]	; (1338 <RCC_DeInit+0x54>)
    132a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
    132e:	609a      	str	r2, [r3, #8]
#endif /* STM32F10X_CL */

}
    1330:	bf00      	nop
    1332:	46bd      	mov	sp, r7
    1334:	bc80      	pop	{r7}
    1336:	4770      	bx	lr
    1338:	40021000 	.word	0x40021000
    133c:	f8ff0000 	.word	0xf8ff0000

00001340 <RCC_HSEConfig>:
  *     @arg RCC_HSE_ON: HSE oscillator ON
  *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint32_t RCC_HSE)
{
    1340:	b480      	push	{r7}
    1342:	b083      	sub	sp, #12
    1344:	af00      	add	r7, sp, #0
    1346:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
    1348:	4b13      	ldr	r3, [pc, #76]	; (1398 <RCC_HSEConfig+0x58>)
    134a:	681b      	ldr	r3, [r3, #0]
    134c:	4a12      	ldr	r2, [pc, #72]	; (1398 <RCC_HSEConfig+0x58>)
    134e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    1352:	6013      	str	r3, [r2, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
    1354:	4b10      	ldr	r3, [pc, #64]	; (1398 <RCC_HSEConfig+0x58>)
    1356:	681b      	ldr	r3, [r3, #0]
    1358:	4a0f      	ldr	r2, [pc, #60]	; (1398 <RCC_HSEConfig+0x58>)
    135a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    135e:	6013      	str	r3, [r2, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
    1360:	687b      	ldr	r3, [r7, #4]
    1362:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    1366:	d004      	beq.n	1372 <RCC_HSEConfig+0x32>
    1368:	687b      	ldr	r3, [r7, #4]
    136a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
    136e:	d007      	beq.n	1380 <RCC_HSEConfig+0x40>
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
      break;
      
    default:
      break;
    1370:	e00d      	b.n	138e <RCC_HSEConfig+0x4e>
      RCC->CR |= CR_HSEON_Set;
    1372:	4b09      	ldr	r3, [pc, #36]	; (1398 <RCC_HSEConfig+0x58>)
    1374:	681b      	ldr	r3, [r3, #0]
    1376:	4a08      	ldr	r2, [pc, #32]	; (1398 <RCC_HSEConfig+0x58>)
    1378:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    137c:	6013      	str	r3, [r2, #0]
      break;
    137e:	e006      	b.n	138e <RCC_HSEConfig+0x4e>
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
    1380:	4b05      	ldr	r3, [pc, #20]	; (1398 <RCC_HSEConfig+0x58>)
    1382:	681b      	ldr	r3, [r3, #0]
    1384:	4a04      	ldr	r2, [pc, #16]	; (1398 <RCC_HSEConfig+0x58>)
    1386:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
    138a:	6013      	str	r3, [r2, #0]
      break;
    138c:	bf00      	nop
  }
}
    138e:	bf00      	nop
    1390:	370c      	adds	r7, #12
    1392:	46bd      	mov	sp, r7
    1394:	bc80      	pop	{r7}
    1396:	4770      	bx	lr
    1398:	40021000 	.word	0x40021000

0000139c <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumuration value:
  * - SUCCESS: HSE oscillator is stable and ready to use
  * - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
    139c:	b580      	push	{r7, lr}
    139e:	b082      	sub	sp, #8
    13a0:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0;
    13a2:	2300      	movs	r3, #0
    13a4:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
    13a6:	2300      	movs	r3, #0
    13a8:	71fb      	strb	r3, [r7, #7]
  FlagStatus HSEStatus = RESET;
    13aa:	2300      	movs	r3, #0
    13ac:	71bb      	strb	r3, [r7, #6]
  
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
    13ae:	2031      	movs	r0, #49	; 0x31
    13b0:	f000 fb14 	bl	19dc <RCC_GetFlagStatus>
    13b4:	4603      	mov	r3, r0
    13b6:	71bb      	strb	r3, [r7, #6]
    StartUpCounter++;  
    13b8:	683b      	ldr	r3, [r7, #0]
    13ba:	3301      	adds	r3, #1
    13bc:	603b      	str	r3, [r7, #0]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
    13be:	683b      	ldr	r3, [r7, #0]
    13c0:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    13c4:	d002      	beq.n	13cc <RCC_WaitForHSEStartUp+0x30>
    13c6:	79bb      	ldrb	r3, [r7, #6]
    13c8:	2b00      	cmp	r3, #0
    13ca:	d0f0      	beq.n	13ae <RCC_WaitForHSEStartUp+0x12>
  
  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
    13cc:	2031      	movs	r0, #49	; 0x31
    13ce:	f000 fb05 	bl	19dc <RCC_GetFlagStatus>
    13d2:	4603      	mov	r3, r0
    13d4:	2b00      	cmp	r3, #0
    13d6:	d002      	beq.n	13de <RCC_WaitForHSEStartUp+0x42>
  {
    status = SUCCESS;
    13d8:	2301      	movs	r3, #1
    13da:	71fb      	strb	r3, [r7, #7]
    13dc:	e001      	b.n	13e2 <RCC_WaitForHSEStartUp+0x46>
  }
  else
  {
    status = ERROR;
    13de:	2300      	movs	r3, #0
    13e0:	71fb      	strb	r3, [r7, #7]
  }  
  return (status);
    13e2:	79fb      	ldrb	r3, [r7, #7]
}
    13e4:	4618      	mov	r0, r3
    13e6:	3708      	adds	r7, #8
    13e8:	46bd      	mov	sp, r7
    13ea:	bd80      	pop	{r7, pc}

000013ec <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *   This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
    13ec:	b480      	push	{r7}
    13ee:	b085      	sub	sp, #20
    13f0:	af00      	add	r7, sp, #0
    13f2:	4603      	mov	r3, r0
    13f4:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
    13f6:	2300      	movs	r3, #0
    13f8:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
  tmpreg = RCC->CR;
    13fa:	4b0a      	ldr	r3, [pc, #40]	; (1424 <RCC_AdjustHSICalibrationValue+0x38>)
    13fc:	681b      	ldr	r3, [r3, #0]
    13fe:	60fb      	str	r3, [r7, #12]
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= CR_HSITRIM_Mask;
    1400:	68fb      	ldr	r3, [r7, #12]
    1402:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
    1406:	60fb      	str	r3, [r7, #12]
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
    1408:	79fb      	ldrb	r3, [r7, #7]
    140a:	00db      	lsls	r3, r3, #3
    140c:	68fa      	ldr	r2, [r7, #12]
    140e:	4313      	orrs	r3, r2
    1410:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CR = tmpreg;
    1412:	4a04      	ldr	r2, [pc, #16]	; (1424 <RCC_AdjustHSICalibrationValue+0x38>)
    1414:	68fb      	ldr	r3, [r7, #12]
    1416:	6013      	str	r3, [r2, #0]
}
    1418:	bf00      	nop
    141a:	3714      	adds	r7, #20
    141c:	46bd      	mov	sp, r7
    141e:	bc80      	pop	{r7}
    1420:	4770      	bx	lr
    1422:	bf00      	nop
    1424:	40021000 	.word	0x40021000

00001428 <RCC_HSICmd>:
  * @note   HSI can not be stopped if it is used directly or through the PLL as system clock.
  * @param  NewState: new state of the HSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
    1428:	b480      	push	{r7}
    142a:	b083      	sub	sp, #12
    142c:	af00      	add	r7, sp, #0
    142e:	4603      	mov	r3, r0
    1430:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
    1432:	4a04      	ldr	r2, [pc, #16]	; (1444 <RCC_HSICmd+0x1c>)
    1434:	79fb      	ldrb	r3, [r7, #7]
    1436:	6013      	str	r3, [r2, #0]
}
    1438:	bf00      	nop
    143a:	370c      	adds	r7, #12
    143c:	46bd      	mov	sp, r7
    143e:	bc80      	pop	{r7}
    1440:	4770      	bx	lr
    1442:	bf00      	nop
    1444:	42420000 	.word	0x42420000

00001448 <RCC_PLLConfig>:
  *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_5}
  *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]  
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
    1448:	b480      	push	{r7}
    144a:	b085      	sub	sp, #20
    144c:	af00      	add	r7, sp, #0
    144e:	6078      	str	r0, [r7, #4]
    1450:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
    1452:	2300      	movs	r3, #0
    1454:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
    1456:	4b0a      	ldr	r3, [pc, #40]	; (1480 <RCC_PLLConfig+0x38>)
    1458:	685b      	ldr	r3, [r3, #4]
    145a:	60fb      	str	r3, [r7, #12]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
    145c:	68fb      	ldr	r3, [r7, #12]
    145e:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
    1462:	60fb      	str	r3, [r7, #12]
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
    1464:	687a      	ldr	r2, [r7, #4]
    1466:	683b      	ldr	r3, [r7, #0]
    1468:	4313      	orrs	r3, r2
    146a:	68fa      	ldr	r2, [r7, #12]
    146c:	4313      	orrs	r3, r2
    146e:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
    1470:	4a03      	ldr	r2, [pc, #12]	; (1480 <RCC_PLLConfig+0x38>)
    1472:	68fb      	ldr	r3, [r7, #12]
    1474:	6053      	str	r3, [r2, #4]
}
    1476:	bf00      	nop
    1478:	3714      	adds	r7, #20
    147a:	46bd      	mov	sp, r7
    147c:	bc80      	pop	{r7}
    147e:	4770      	bx	lr
    1480:	40021000 	.word	0x40021000

00001484 <RCC_PLLCmd>:
  * @note   The PLL can not be disabled if it is used as system clock.
  * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
    1484:	b480      	push	{r7}
    1486:	b083      	sub	sp, #12
    1488:	af00      	add	r7, sp, #0
    148a:	4603      	mov	r3, r0
    148c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
    148e:	4a04      	ldr	r2, [pc, #16]	; (14a0 <RCC_PLLCmd+0x1c>)
    1490:	79fb      	ldrb	r3, [r7, #7]
    1492:	6013      	str	r3, [r2, #0]
}
    1494:	bf00      	nop
    1496:	370c      	adds	r7, #12
    1498:	46bd      	mov	sp, r7
    149a:	bc80      	pop	{r7}
    149c:	4770      	bx	lr
    149e:	bf00      	nop
    14a0:	42420060 	.word	0x42420060

000014a4 <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
    14a4:	b480      	push	{r7}
    14a6:	b085      	sub	sp, #20
    14a8:	af00      	add	r7, sp, #0
    14aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
    14ac:	2300      	movs	r3, #0
    14ae:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
    14b0:	4b09      	ldr	r3, [pc, #36]	; (14d8 <RCC_SYSCLKConfig+0x34>)
    14b2:	685b      	ldr	r3, [r3, #4]
    14b4:	60fb      	str	r3, [r7, #12]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
    14b6:	68fb      	ldr	r3, [r7, #12]
    14b8:	f023 0303 	bic.w	r3, r3, #3
    14bc:	60fb      	str	r3, [r7, #12]
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
    14be:	68fa      	ldr	r2, [r7, #12]
    14c0:	687b      	ldr	r3, [r7, #4]
    14c2:	4313      	orrs	r3, r2
    14c4:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
    14c6:	4a04      	ldr	r2, [pc, #16]	; (14d8 <RCC_SYSCLKConfig+0x34>)
    14c8:	68fb      	ldr	r3, [r7, #12]
    14ca:	6053      	str	r3, [r2, #4]
}
    14cc:	bf00      	nop
    14ce:	3714      	adds	r7, #20
    14d0:	46bd      	mov	sp, r7
    14d2:	bc80      	pop	{r7}
    14d4:	4770      	bx	lr
    14d6:	bf00      	nop
    14d8:	40021000 	.word	0x40021000

000014dc <RCC_GetSYSCLKSource>:
  *     - 0x00: HSI used as system clock
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
    14dc:	b480      	push	{r7}
    14de:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
    14e0:	4b04      	ldr	r3, [pc, #16]	; (14f4 <RCC_GetSYSCLKSource+0x18>)
    14e2:	685b      	ldr	r3, [r3, #4]
    14e4:	b2db      	uxtb	r3, r3
    14e6:	f003 030c 	and.w	r3, r3, #12
    14ea:	b2db      	uxtb	r3, r3
}
    14ec:	4618      	mov	r0, r3
    14ee:	46bd      	mov	sp, r7
    14f0:	bc80      	pop	{r7}
    14f2:	4770      	bx	lr
    14f4:	40021000 	.word	0x40021000

000014f8 <RCC_HCLKConfig>:
  *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
    14f8:	b480      	push	{r7}
    14fa:	b085      	sub	sp, #20
    14fc:	af00      	add	r7, sp, #0
    14fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
    1500:	2300      	movs	r3, #0
    1502:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
    1504:	4b09      	ldr	r3, [pc, #36]	; (152c <RCC_HCLKConfig+0x34>)
    1506:	685b      	ldr	r3, [r3, #4]
    1508:	60fb      	str	r3, [r7, #12]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
    150a:	68fb      	ldr	r3, [r7, #12]
    150c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    1510:	60fb      	str	r3, [r7, #12]
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
    1512:	68fa      	ldr	r2, [r7, #12]
    1514:	687b      	ldr	r3, [r7, #4]
    1516:	4313      	orrs	r3, r2
    1518:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
    151a:	4a04      	ldr	r2, [pc, #16]	; (152c <RCC_HCLKConfig+0x34>)
    151c:	68fb      	ldr	r3, [r7, #12]
    151e:	6053      	str	r3, [r2, #4]
}
    1520:	bf00      	nop
    1522:	3714      	adds	r7, #20
    1524:	46bd      	mov	sp, r7
    1526:	bc80      	pop	{r7}
    1528:	4770      	bx	lr
    152a:	bf00      	nop
    152c:	40021000 	.word	0x40021000

00001530 <RCC_PCLK1Config>:
  *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
    1530:	b480      	push	{r7}
    1532:	b085      	sub	sp, #20
    1534:	af00      	add	r7, sp, #0
    1536:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
    1538:	2300      	movs	r3, #0
    153a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
    153c:	4b09      	ldr	r3, [pc, #36]	; (1564 <RCC_PCLK1Config+0x34>)
    153e:	685b      	ldr	r3, [r3, #4]
    1540:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
    1542:	68fb      	ldr	r3, [r7, #12]
    1544:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    1548:	60fb      	str	r3, [r7, #12]
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
    154a:	68fa      	ldr	r2, [r7, #12]
    154c:	687b      	ldr	r3, [r7, #4]
    154e:	4313      	orrs	r3, r2
    1550:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
    1552:	4a04      	ldr	r2, [pc, #16]	; (1564 <RCC_PCLK1Config+0x34>)
    1554:	68fb      	ldr	r3, [r7, #12]
    1556:	6053      	str	r3, [r2, #4]
}
    1558:	bf00      	nop
    155a:	3714      	adds	r7, #20
    155c:	46bd      	mov	sp, r7
    155e:	bc80      	pop	{r7}
    1560:	4770      	bx	lr
    1562:	bf00      	nop
    1564:	40021000 	.word	0x40021000

00001568 <RCC_PCLK2Config>:
  *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
    1568:	b480      	push	{r7}
    156a:	b085      	sub	sp, #20
    156c:	af00      	add	r7, sp, #0
    156e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
    1570:	2300      	movs	r3, #0
    1572:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
    1574:	4b09      	ldr	r3, [pc, #36]	; (159c <RCC_PCLK2Config+0x34>)
    1576:	685b      	ldr	r3, [r3, #4]
    1578:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
    157a:	68fb      	ldr	r3, [r7, #12]
    157c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
    1580:	60fb      	str	r3, [r7, #12]
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
    1582:	687b      	ldr	r3, [r7, #4]
    1584:	00db      	lsls	r3, r3, #3
    1586:	68fa      	ldr	r2, [r7, #12]
    1588:	4313      	orrs	r3, r2
    158a:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
    158c:	4a03      	ldr	r2, [pc, #12]	; (159c <RCC_PCLK2Config+0x34>)
    158e:	68fb      	ldr	r3, [r7, #12]
    1590:	6053      	str	r3, [r2, #4]
}
    1592:	bf00      	nop
    1594:	3714      	adds	r7, #20
    1596:	46bd      	mov	sp, r7
    1598:	bc80      	pop	{r7}
    159a:	4770      	bx	lr
    159c:	40021000 	.word	0x40021000

000015a0 <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
    15a0:	b480      	push	{r7}
    15a2:	b083      	sub	sp, #12
    15a4:	af00      	add	r7, sp, #0
    15a6:	4603      	mov	r3, r0
    15a8:	460a      	mov	r2, r1
    15aa:	71fb      	strb	r3, [r7, #7]
    15ac:	4613      	mov	r3, r2
    15ae:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    15b0:	79bb      	ldrb	r3, [r7, #6]
    15b2:	2b00      	cmp	r3, #0
    15b4:	d008      	beq.n	15c8 <RCC_ITConfig+0x28>
  {
    /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
    15b6:	4b0c      	ldr	r3, [pc, #48]	; (15e8 <RCC_ITConfig+0x48>)
    15b8:	781b      	ldrb	r3, [r3, #0]
    15ba:	b2da      	uxtb	r2, r3
    15bc:	490a      	ldr	r1, [pc, #40]	; (15e8 <RCC_ITConfig+0x48>)
    15be:	79fb      	ldrb	r3, [r7, #7]
    15c0:	4313      	orrs	r3, r2
    15c2:	b2db      	uxtb	r3, r3
    15c4:	700b      	strb	r3, [r1, #0]
  else
  {
    /* Perform Byte access to RCC_CIR bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
  }
}
    15c6:	e009      	b.n	15dc <RCC_ITConfig+0x3c>
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
    15c8:	4b07      	ldr	r3, [pc, #28]	; (15e8 <RCC_ITConfig+0x48>)
    15ca:	781b      	ldrb	r3, [r3, #0]
    15cc:	b2da      	uxtb	r2, r3
    15ce:	79fb      	ldrb	r3, [r7, #7]
    15d0:	43db      	mvns	r3, r3
    15d2:	b2db      	uxtb	r3, r3
    15d4:	4904      	ldr	r1, [pc, #16]	; (15e8 <RCC_ITConfig+0x48>)
    15d6:	4013      	ands	r3, r2
    15d8:	b2db      	uxtb	r3, r3
    15da:	700b      	strb	r3, [r1, #0]
}
    15dc:	bf00      	nop
    15de:	370c      	adds	r7, #12
    15e0:	46bd      	mov	sp, r7
    15e2:	bc80      	pop	{r7}
    15e4:	4770      	bx	lr
    15e6:	bf00      	nop
    15e8:	40021009 	.word	0x40021009

000015ec <RCC_USBCLKConfig>:
  *                                     clock source
  *     @arg RCC_USBCLKSource_PLLCLK_Div1: PLL clock selected as USB clock source
  * @retval None
  */
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
    15ec:	b480      	push	{r7}
    15ee:	b083      	sub	sp, #12
    15f0:	af00      	add	r7, sp, #0
    15f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
    15f4:	4a03      	ldr	r2, [pc, #12]	; (1604 <RCC_USBCLKConfig+0x18>)
    15f6:	687b      	ldr	r3, [r7, #4]
    15f8:	6013      	str	r3, [r2, #0]
}
    15fa:	bf00      	nop
    15fc:	370c      	adds	r7, #12
    15fe:	46bd      	mov	sp, r7
    1600:	bc80      	pop	{r7}
    1602:	4770      	bx	lr
    1604:	424200d8 	.word	0x424200d8

00001608 <RCC_ADCCLKConfig>:
  *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
  *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
    1608:	b480      	push	{r7}
    160a:	b085      	sub	sp, #20
    160c:	af00      	add	r7, sp, #0
    160e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
    1610:	2300      	movs	r3, #0
    1612:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
    1614:	4b09      	ldr	r3, [pc, #36]	; (163c <RCC_ADCCLKConfig+0x34>)
    1616:	685b      	ldr	r3, [r3, #4]
    1618:	60fb      	str	r3, [r7, #12]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
    161a:	68fb      	ldr	r3, [r7, #12]
    161c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
    1620:	60fb      	str	r3, [r7, #12]
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
    1622:	68fa      	ldr	r2, [r7, #12]
    1624:	687b      	ldr	r3, [r7, #4]
    1626:	4313      	orrs	r3, r2
    1628:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
    162a:	4a04      	ldr	r2, [pc, #16]	; (163c <RCC_ADCCLKConfig+0x34>)
    162c:	68fb      	ldr	r3, [r7, #12]
    162e:	6053      	str	r3, [r2, #4]
}
    1630:	bf00      	nop
    1632:	3714      	adds	r7, #20
    1634:	46bd      	mov	sp, r7
    1636:	bc80      	pop	{r7}
    1638:	4770      	bx	lr
    163a:	bf00      	nop
    163c:	40021000 	.word	0x40021000

00001640 <RCC_LSEConfig>:
  *     @arg RCC_LSE_ON: LSE oscillator ON
  *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
    1640:	b480      	push	{r7}
    1642:	b083      	sub	sp, #12
    1644:	af00      	add	r7, sp, #0
    1646:	4603      	mov	r3, r0
    1648:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
    164a:	4b0c      	ldr	r3, [pc, #48]	; (167c <RCC_LSEConfig+0x3c>)
    164c:	2200      	movs	r2, #0
    164e:	701a      	strb	r2, [r3, #0]
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
    1650:	4b0a      	ldr	r3, [pc, #40]	; (167c <RCC_LSEConfig+0x3c>)
    1652:	2200      	movs	r2, #0
    1654:	701a      	strb	r2, [r3, #0]
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
    1656:	79fb      	ldrb	r3, [r7, #7]
    1658:	2b01      	cmp	r3, #1
    165a:	d002      	beq.n	1662 <RCC_LSEConfig+0x22>
    165c:	2b04      	cmp	r3, #4
    165e:	d004      	beq.n	166a <RCC_LSEConfig+0x2a>
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;            
      
    default:
      break;      
    1660:	e007      	b.n	1672 <RCC_LSEConfig+0x32>
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
    1662:	4b06      	ldr	r3, [pc, #24]	; (167c <RCC_LSEConfig+0x3c>)
    1664:	2201      	movs	r2, #1
    1666:	701a      	strb	r2, [r3, #0]
      break;
    1668:	e003      	b.n	1672 <RCC_LSEConfig+0x32>
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
    166a:	4b04      	ldr	r3, [pc, #16]	; (167c <RCC_LSEConfig+0x3c>)
    166c:	2205      	movs	r2, #5
    166e:	701a      	strb	r2, [r3, #0]
      break;            
    1670:	bf00      	nop
  }
}
    1672:	bf00      	nop
    1674:	370c      	adds	r7, #12
    1676:	46bd      	mov	sp, r7
    1678:	bc80      	pop	{r7}
    167a:	4770      	bx	lr
    167c:	40021020 	.word	0x40021020

00001680 <RCC_LSICmd>:
  * @note   LSI can not be disabled if the IWDG is running.
  * @param  NewState: new state of the LSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
    1680:	b480      	push	{r7}
    1682:	b083      	sub	sp, #12
    1684:	af00      	add	r7, sp, #0
    1686:	4603      	mov	r3, r0
    1688:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
    168a:	4a04      	ldr	r2, [pc, #16]	; (169c <RCC_LSICmd+0x1c>)
    168c:	79fb      	ldrb	r3, [r7, #7]
    168e:	6013      	str	r3, [r2, #0]
}
    1690:	bf00      	nop
    1692:	370c      	adds	r7, #12
    1694:	46bd      	mov	sp, r7
    1696:	bc80      	pop	{r7}
    1698:	4770      	bx	lr
    169a:	bf00      	nop
    169c:	42420480 	.word	0x42420480

000016a0 <RCC_RTCCLKConfig>:
  *     @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
  *     @arg RCC_RTCCLKSource_HSE_Div128: HSE clock divided by 128 selected as RTC clock
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
    16a0:	b480      	push	{r7}
    16a2:	b083      	sub	sp, #12
    16a4:	af00      	add	r7, sp, #0
    16a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
    16a8:	4b05      	ldr	r3, [pc, #20]	; (16c0 <RCC_RTCCLKConfig+0x20>)
    16aa:	6a1a      	ldr	r2, [r3, #32]
    16ac:	4904      	ldr	r1, [pc, #16]	; (16c0 <RCC_RTCCLKConfig+0x20>)
    16ae:	687b      	ldr	r3, [r7, #4]
    16b0:	4313      	orrs	r3, r2
    16b2:	620b      	str	r3, [r1, #32]
}
    16b4:	bf00      	nop
    16b6:	370c      	adds	r7, #12
    16b8:	46bd      	mov	sp, r7
    16ba:	bc80      	pop	{r7}
    16bc:	4770      	bx	lr
    16be:	bf00      	nop
    16c0:	40021000 	.word	0x40021000

000016c4 <RCC_RTCCLKCmd>:
  * @note   This function must be used only after the RTC clock was selected using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
    16c4:	b480      	push	{r7}
    16c6:	b083      	sub	sp, #12
    16c8:	af00      	add	r7, sp, #0
    16ca:	4603      	mov	r3, r0
    16cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
    16ce:	4a04      	ldr	r2, [pc, #16]	; (16e0 <RCC_RTCCLKCmd+0x1c>)
    16d0:	79fb      	ldrb	r3, [r7, #7]
    16d2:	6013      	str	r3, [r2, #0]
}
    16d4:	bf00      	nop
    16d6:	370c      	adds	r7, #12
    16d8:	46bd      	mov	sp, r7
    16da:	bc80      	pop	{r7}
    16dc:	4770      	bx	lr
    16de:	bf00      	nop
    16e0:	4242043c 	.word	0x4242043c

000016e4 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
    16e4:	b480      	push	{r7}
    16e6:	b087      	sub	sp, #28
    16e8:	af00      	add	r7, sp, #0
    16ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
    16ec:	2300      	movs	r3, #0
    16ee:	617b      	str	r3, [r7, #20]
    16f0:	2300      	movs	r3, #0
    16f2:	613b      	str	r3, [r7, #16]
    16f4:	2300      	movs	r3, #0
    16f6:	60fb      	str	r3, [r7, #12]
    16f8:	2300      	movs	r3, #0
    16fa:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
    16fc:	4b4f      	ldr	r3, [pc, #316]	; (183c <RCC_GetClocksFreq+0x158>)
    16fe:	685b      	ldr	r3, [r3, #4]
    1700:	f003 030c 	and.w	r3, r3, #12
    1704:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
    1706:	697b      	ldr	r3, [r7, #20]
    1708:	2b08      	cmp	r3, #8
    170a:	d011      	beq.n	1730 <RCC_GetClocksFreq+0x4c>
    170c:	697b      	ldr	r3, [r7, #20]
    170e:	2b08      	cmp	r3, #8
    1710:	d83a      	bhi.n	1788 <RCC_GetClocksFreq+0xa4>
    1712:	697b      	ldr	r3, [r7, #20]
    1714:	2b00      	cmp	r3, #0
    1716:	d003      	beq.n	1720 <RCC_GetClocksFreq+0x3c>
    1718:	697b      	ldr	r3, [r7, #20]
    171a:	2b04      	cmp	r3, #4
    171c:	d004      	beq.n	1728 <RCC_GetClocksFreq+0x44>
    171e:	e033      	b.n	1788 <RCC_GetClocksFreq+0xa4>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
    1720:	687b      	ldr	r3, [r7, #4]
    1722:	4a47      	ldr	r2, [pc, #284]	; (1840 <RCC_GetClocksFreq+0x15c>)
    1724:	601a      	str	r2, [r3, #0]
      break;
    1726:	e033      	b.n	1790 <RCC_GetClocksFreq+0xac>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
    1728:	687b      	ldr	r3, [r7, #4]
    172a:	4a45      	ldr	r2, [pc, #276]	; (1840 <RCC_GetClocksFreq+0x15c>)
    172c:	601a      	str	r2, [r3, #0]
      break;
    172e:	e02f      	b.n	1790 <RCC_GetClocksFreq+0xac>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
    1730:	4b42      	ldr	r3, [pc, #264]	; (183c <RCC_GetClocksFreq+0x158>)
    1732:	685b      	ldr	r3, [r3, #4]
    1734:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
    1738:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
    173a:	4b40      	ldr	r3, [pc, #256]	; (183c <RCC_GetClocksFreq+0x158>)
    173c:	685b      	ldr	r3, [r3, #4]
    173e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    1742:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
    1744:	693b      	ldr	r3, [r7, #16]
    1746:	0c9b      	lsrs	r3, r3, #18
    1748:	3302      	adds	r3, #2
    174a:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
    174c:	68fb      	ldr	r3, [r7, #12]
    174e:	2b00      	cmp	r3, #0
    1750:	d106      	bne.n	1760 <RCC_GetClocksFreq+0x7c>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
    1752:	693b      	ldr	r3, [r7, #16]
    1754:	4a3b      	ldr	r2, [pc, #236]	; (1844 <RCC_GetClocksFreq+0x160>)
    1756:	fb02 f203 	mul.w	r2, r2, r3
    175a:	687b      	ldr	r3, [r7, #4]
    175c:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
    175e:	e017      	b.n	1790 <RCC_GetClocksFreq+0xac>
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
    1760:	4b36      	ldr	r3, [pc, #216]	; (183c <RCC_GetClocksFreq+0x158>)
    1762:	685b      	ldr	r3, [r3, #4]
    1764:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    1768:	2b00      	cmp	r3, #0
    176a:	d006      	beq.n	177a <RCC_GetClocksFreq+0x96>
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
    176c:	693b      	ldr	r3, [r7, #16]
    176e:	4a35      	ldr	r2, [pc, #212]	; (1844 <RCC_GetClocksFreq+0x160>)
    1770:	fb02 f203 	mul.w	r2, r2, r3
    1774:	687b      	ldr	r3, [r7, #4]
    1776:	601a      	str	r2, [r3, #0]
      break;
    1778:	e00a      	b.n	1790 <RCC_GetClocksFreq+0xac>
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
    177a:	693b      	ldr	r3, [r7, #16]
    177c:	4a30      	ldr	r2, [pc, #192]	; (1840 <RCC_GetClocksFreq+0x15c>)
    177e:	fb02 f203 	mul.w	r2, r2, r3
    1782:	687b      	ldr	r3, [r7, #4]
    1784:	601a      	str	r2, [r3, #0]
      break;
    1786:	e003      	b.n	1790 <RCC_GetClocksFreq+0xac>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
    1788:	687b      	ldr	r3, [r7, #4]
    178a:	4a2d      	ldr	r2, [pc, #180]	; (1840 <RCC_GetClocksFreq+0x15c>)
    178c:	601a      	str	r2, [r3, #0]
      break;
    178e:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
    1790:	4b2a      	ldr	r3, [pc, #168]	; (183c <RCC_GetClocksFreq+0x158>)
    1792:	685b      	ldr	r3, [r3, #4]
    1794:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    1798:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
    179a:	697b      	ldr	r3, [r7, #20]
    179c:	091b      	lsrs	r3, r3, #4
    179e:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
    17a0:	4a29      	ldr	r2, [pc, #164]	; (1848 <RCC_GetClocksFreq+0x164>)
    17a2:	697b      	ldr	r3, [r7, #20]
    17a4:	4413      	add	r3, r2
    17a6:	781b      	ldrb	r3, [r3, #0]
    17a8:	b2db      	uxtb	r3, r3
    17aa:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
    17ac:	687b      	ldr	r3, [r7, #4]
    17ae:	681a      	ldr	r2, [r3, #0]
    17b0:	68bb      	ldr	r3, [r7, #8]
    17b2:	40da      	lsrs	r2, r3
    17b4:	687b      	ldr	r3, [r7, #4]
    17b6:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
    17b8:	4b20      	ldr	r3, [pc, #128]	; (183c <RCC_GetClocksFreq+0x158>)
    17ba:	685b      	ldr	r3, [r3, #4]
    17bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    17c0:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
    17c2:	697b      	ldr	r3, [r7, #20]
    17c4:	0a1b      	lsrs	r3, r3, #8
    17c6:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
    17c8:	4a1f      	ldr	r2, [pc, #124]	; (1848 <RCC_GetClocksFreq+0x164>)
    17ca:	697b      	ldr	r3, [r7, #20]
    17cc:	4413      	add	r3, r2
    17ce:	781b      	ldrb	r3, [r3, #0]
    17d0:	b2db      	uxtb	r3, r3
    17d2:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
    17d4:	687b      	ldr	r3, [r7, #4]
    17d6:	685a      	ldr	r2, [r3, #4]
    17d8:	68bb      	ldr	r3, [r7, #8]
    17da:	40da      	lsrs	r2, r3
    17dc:	687b      	ldr	r3, [r7, #4]
    17de:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
    17e0:	4b16      	ldr	r3, [pc, #88]	; (183c <RCC_GetClocksFreq+0x158>)
    17e2:	685b      	ldr	r3, [r3, #4]
    17e4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
    17e8:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
    17ea:	697b      	ldr	r3, [r7, #20]
    17ec:	0adb      	lsrs	r3, r3, #11
    17ee:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
    17f0:	4a15      	ldr	r2, [pc, #84]	; (1848 <RCC_GetClocksFreq+0x164>)
    17f2:	697b      	ldr	r3, [r7, #20]
    17f4:	4413      	add	r3, r2
    17f6:	781b      	ldrb	r3, [r3, #0]
    17f8:	b2db      	uxtb	r3, r3
    17fa:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
    17fc:	687b      	ldr	r3, [r7, #4]
    17fe:	685a      	ldr	r2, [r3, #4]
    1800:	68bb      	ldr	r3, [r7, #8]
    1802:	40da      	lsrs	r2, r3
    1804:	687b      	ldr	r3, [r7, #4]
    1806:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
    1808:	4b0c      	ldr	r3, [pc, #48]	; (183c <RCC_GetClocksFreq+0x158>)
    180a:	685b      	ldr	r3, [r3, #4]
    180c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
    1810:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
    1812:	697b      	ldr	r3, [r7, #20]
    1814:	0b9b      	lsrs	r3, r3, #14
    1816:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
    1818:	4a0c      	ldr	r2, [pc, #48]	; (184c <RCC_GetClocksFreq+0x168>)
    181a:	697b      	ldr	r3, [r7, #20]
    181c:	4413      	add	r3, r2
    181e:	781b      	ldrb	r3, [r3, #0]
    1820:	b2db      	uxtb	r3, r3
    1822:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
    1824:	687b      	ldr	r3, [r7, #4]
    1826:	68da      	ldr	r2, [r3, #12]
    1828:	68bb      	ldr	r3, [r7, #8]
    182a:	fbb2 f2f3 	udiv	r2, r2, r3
    182e:	687b      	ldr	r3, [r7, #4]
    1830:	611a      	str	r2, [r3, #16]
}
    1832:	bf00      	nop
    1834:	371c      	adds	r7, #28
    1836:	46bd      	mov	sp, r7
    1838:	bc80      	pop	{r7}
    183a:	4770      	bx	lr
    183c:	40021000 	.word	0x40021000
    1840:	007a1200 	.word	0x007a1200
    1844:	003d0900 	.word	0x003d0900
    1848:	20000014 	.word	0x20000014
    184c:	20000024 	.word	0x20000024

00001850 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
    1850:	b480      	push	{r7}
    1852:	b083      	sub	sp, #12
    1854:	af00      	add	r7, sp, #0
    1856:	6078      	str	r0, [r7, #4]
    1858:	460b      	mov	r3, r1
    185a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    185c:	78fb      	ldrb	r3, [r7, #3]
    185e:	2b00      	cmp	r3, #0
    1860:	d006      	beq.n	1870 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
    1862:	4b09      	ldr	r3, [pc, #36]	; (1888 <RCC_AHBPeriphClockCmd+0x38>)
    1864:	695a      	ldr	r2, [r3, #20]
    1866:	4908      	ldr	r1, [pc, #32]	; (1888 <RCC_AHBPeriphClockCmd+0x38>)
    1868:	687b      	ldr	r3, [r7, #4]
    186a:	4313      	orrs	r3, r2
    186c:	614b      	str	r3, [r1, #20]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
    186e:	e006      	b.n	187e <RCC_AHBPeriphClockCmd+0x2e>
    RCC->AHBENR &= ~RCC_AHBPeriph;
    1870:	4b05      	ldr	r3, [pc, #20]	; (1888 <RCC_AHBPeriphClockCmd+0x38>)
    1872:	695a      	ldr	r2, [r3, #20]
    1874:	687b      	ldr	r3, [r7, #4]
    1876:	43db      	mvns	r3, r3
    1878:	4903      	ldr	r1, [pc, #12]	; (1888 <RCC_AHBPeriphClockCmd+0x38>)
    187a:	4013      	ands	r3, r2
    187c:	614b      	str	r3, [r1, #20]
}
    187e:	bf00      	nop
    1880:	370c      	adds	r7, #12
    1882:	46bd      	mov	sp, r7
    1884:	bc80      	pop	{r7}
    1886:	4770      	bx	lr
    1888:	40021000 	.word	0x40021000

0000188c <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
    188c:	b480      	push	{r7}
    188e:	b083      	sub	sp, #12
    1890:	af00      	add	r7, sp, #0
    1892:	6078      	str	r0, [r7, #4]
    1894:	460b      	mov	r3, r1
    1896:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1898:	78fb      	ldrb	r3, [r7, #3]
    189a:	2b00      	cmp	r3, #0
    189c:	d006      	beq.n	18ac <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
    189e:	4b09      	ldr	r3, [pc, #36]	; (18c4 <RCC_APB2PeriphClockCmd+0x38>)
    18a0:	699a      	ldr	r2, [r3, #24]
    18a2:	4908      	ldr	r1, [pc, #32]	; (18c4 <RCC_APB2PeriphClockCmd+0x38>)
    18a4:	687b      	ldr	r3, [r7, #4]
    18a6:	4313      	orrs	r3, r2
    18a8:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
    18aa:	e006      	b.n	18ba <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
    18ac:	4b05      	ldr	r3, [pc, #20]	; (18c4 <RCC_APB2PeriphClockCmd+0x38>)
    18ae:	699a      	ldr	r2, [r3, #24]
    18b0:	687b      	ldr	r3, [r7, #4]
    18b2:	43db      	mvns	r3, r3
    18b4:	4903      	ldr	r1, [pc, #12]	; (18c4 <RCC_APB2PeriphClockCmd+0x38>)
    18b6:	4013      	ands	r3, r2
    18b8:	618b      	str	r3, [r1, #24]
}
    18ba:	bf00      	nop
    18bc:	370c      	adds	r7, #12
    18be:	46bd      	mov	sp, r7
    18c0:	bc80      	pop	{r7}
    18c2:	4770      	bx	lr
    18c4:	40021000 	.word	0x40021000

000018c8 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
    18c8:	b480      	push	{r7}
    18ca:	b083      	sub	sp, #12
    18cc:	af00      	add	r7, sp, #0
    18ce:	6078      	str	r0, [r7, #4]
    18d0:	460b      	mov	r3, r1
    18d2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    18d4:	78fb      	ldrb	r3, [r7, #3]
    18d6:	2b00      	cmp	r3, #0
    18d8:	d006      	beq.n	18e8 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
    18da:	4b09      	ldr	r3, [pc, #36]	; (1900 <RCC_APB1PeriphClockCmd+0x38>)
    18dc:	69da      	ldr	r2, [r3, #28]
    18de:	4908      	ldr	r1, [pc, #32]	; (1900 <RCC_APB1PeriphClockCmd+0x38>)
    18e0:	687b      	ldr	r3, [r7, #4]
    18e2:	4313      	orrs	r3, r2
    18e4:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
    18e6:	e006      	b.n	18f6 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
    18e8:	4b05      	ldr	r3, [pc, #20]	; (1900 <RCC_APB1PeriphClockCmd+0x38>)
    18ea:	69da      	ldr	r2, [r3, #28]
    18ec:	687b      	ldr	r3, [r7, #4]
    18ee:	43db      	mvns	r3, r3
    18f0:	4903      	ldr	r1, [pc, #12]	; (1900 <RCC_APB1PeriphClockCmd+0x38>)
    18f2:	4013      	ands	r3, r2
    18f4:	61cb      	str	r3, [r1, #28]
}
    18f6:	bf00      	nop
    18f8:	370c      	adds	r7, #12
    18fa:	46bd      	mov	sp, r7
    18fc:	bc80      	pop	{r7}
    18fe:	4770      	bx	lr
    1900:	40021000 	.word	0x40021000

00001904 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
    1904:	b480      	push	{r7}
    1906:	b083      	sub	sp, #12
    1908:	af00      	add	r7, sp, #0
    190a:	6078      	str	r0, [r7, #4]
    190c:	460b      	mov	r3, r1
    190e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1910:	78fb      	ldrb	r3, [r7, #3]
    1912:	2b00      	cmp	r3, #0
    1914:	d006      	beq.n	1924 <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
    1916:	4b09      	ldr	r3, [pc, #36]	; (193c <RCC_APB2PeriphResetCmd+0x38>)
    1918:	68da      	ldr	r2, [r3, #12]
    191a:	4908      	ldr	r1, [pc, #32]	; (193c <RCC_APB2PeriphResetCmd+0x38>)
    191c:	687b      	ldr	r3, [r7, #4]
    191e:	4313      	orrs	r3, r2
    1920:	60cb      	str	r3, [r1, #12]
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
    1922:	e006      	b.n	1932 <RCC_APB2PeriphResetCmd+0x2e>
    RCC->APB2RSTR &= ~RCC_APB2Periph;
    1924:	4b05      	ldr	r3, [pc, #20]	; (193c <RCC_APB2PeriphResetCmd+0x38>)
    1926:	68da      	ldr	r2, [r3, #12]
    1928:	687b      	ldr	r3, [r7, #4]
    192a:	43db      	mvns	r3, r3
    192c:	4903      	ldr	r1, [pc, #12]	; (193c <RCC_APB2PeriphResetCmd+0x38>)
    192e:	4013      	ands	r3, r2
    1930:	60cb      	str	r3, [r1, #12]
}
    1932:	bf00      	nop
    1934:	370c      	adds	r7, #12
    1936:	46bd      	mov	sp, r7
    1938:	bc80      	pop	{r7}
    193a:	4770      	bx	lr
    193c:	40021000 	.word	0x40021000

00001940 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
    1940:	b480      	push	{r7}
    1942:	b083      	sub	sp, #12
    1944:	af00      	add	r7, sp, #0
    1946:	6078      	str	r0, [r7, #4]
    1948:	460b      	mov	r3, r1
    194a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    194c:	78fb      	ldrb	r3, [r7, #3]
    194e:	2b00      	cmp	r3, #0
    1950:	d006      	beq.n	1960 <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
    1952:	4b09      	ldr	r3, [pc, #36]	; (1978 <RCC_APB1PeriphResetCmd+0x38>)
    1954:	691a      	ldr	r2, [r3, #16]
    1956:	4908      	ldr	r1, [pc, #32]	; (1978 <RCC_APB1PeriphResetCmd+0x38>)
    1958:	687b      	ldr	r3, [r7, #4]
    195a:	4313      	orrs	r3, r2
    195c:	610b      	str	r3, [r1, #16]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
    195e:	e006      	b.n	196e <RCC_APB1PeriphResetCmd+0x2e>
    RCC->APB1RSTR &= ~RCC_APB1Periph;
    1960:	4b05      	ldr	r3, [pc, #20]	; (1978 <RCC_APB1PeriphResetCmd+0x38>)
    1962:	691a      	ldr	r2, [r3, #16]
    1964:	687b      	ldr	r3, [r7, #4]
    1966:	43db      	mvns	r3, r3
    1968:	4903      	ldr	r1, [pc, #12]	; (1978 <RCC_APB1PeriphResetCmd+0x38>)
    196a:	4013      	ands	r3, r2
    196c:	610b      	str	r3, [r1, #16]
}
    196e:	bf00      	nop
    1970:	370c      	adds	r7, #12
    1972:	46bd      	mov	sp, r7
    1974:	bc80      	pop	{r7}
    1976:	4770      	bx	lr
    1978:	40021000 	.word	0x40021000

0000197c <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
    197c:	b480      	push	{r7}
    197e:	b083      	sub	sp, #12
    1980:	af00      	add	r7, sp, #0
    1982:	4603      	mov	r3, r0
    1984:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
    1986:	4a04      	ldr	r2, [pc, #16]	; (1998 <RCC_BackupResetCmd+0x1c>)
    1988:	79fb      	ldrb	r3, [r7, #7]
    198a:	6013      	str	r3, [r2, #0]
}
    198c:	bf00      	nop
    198e:	370c      	adds	r7, #12
    1990:	46bd      	mov	sp, r7
    1992:	bc80      	pop	{r7}
    1994:	4770      	bx	lr
    1996:	bf00      	nop
    1998:	42420440 	.word	0x42420440

0000199c <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System..
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
    199c:	b480      	push	{r7}
    199e:	b083      	sub	sp, #12
    19a0:	af00      	add	r7, sp, #0
    19a2:	4603      	mov	r3, r0
    19a4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
    19a6:	4a04      	ldr	r2, [pc, #16]	; (19b8 <RCC_ClockSecuritySystemCmd+0x1c>)
    19a8:	79fb      	ldrb	r3, [r7, #7]
    19aa:	6013      	str	r3, [r2, #0]
}
    19ac:	bf00      	nop
    19ae:	370c      	adds	r7, #12
    19b0:	46bd      	mov	sp, r7
    19b2:	bc80      	pop	{r7}
    19b4:	4770      	bx	lr
    19b6:	bf00      	nop
    19b8:	4242004c 	.word	0x4242004c

000019bc <RCC_MCOConfig>:
  *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
  *   
  * @retval None
  */
void RCC_MCOConfig(uint8_t RCC_MCO)
{
    19bc:	b480      	push	{r7}
    19be:	b083      	sub	sp, #12
    19c0:	af00      	add	r7, sp, #0
    19c2:	4603      	mov	r3, r0
    19c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO bits to select the MCO source */
  *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
    19c6:	4a04      	ldr	r2, [pc, #16]	; (19d8 <RCC_MCOConfig+0x1c>)
    19c8:	79fb      	ldrb	r3, [r7, #7]
    19ca:	7013      	strb	r3, [r2, #0]
}
    19cc:	bf00      	nop
    19ce:	370c      	adds	r7, #12
    19d0:	46bd      	mov	sp, r7
    19d2:	bc80      	pop	{r7}
    19d4:	4770      	bx	lr
    19d6:	bf00      	nop
    19d8:	40021007 	.word	0x40021007

000019dc <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  *   
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
    19dc:	b480      	push	{r7}
    19de:	b087      	sub	sp, #28
    19e0:	af00      	add	r7, sp, #0
    19e2:	4603      	mov	r3, r0
    19e4:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
    19e6:	2300      	movs	r3, #0
    19e8:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
    19ea:	2300      	movs	r3, #0
    19ec:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
    19ee:	2300      	movs	r3, #0
    19f0:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
    19f2:	79fb      	ldrb	r3, [r7, #7]
    19f4:	095b      	lsrs	r3, r3, #5
    19f6:	b2db      	uxtb	r3, r3
    19f8:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
    19fa:	68fb      	ldr	r3, [r7, #12]
    19fc:	2b01      	cmp	r3, #1
    19fe:	d103      	bne.n	1a08 <RCC_GetFlagStatus+0x2c>
  {
    statusreg = RCC->CR;
    1a00:	4b12      	ldr	r3, [pc, #72]	; (1a4c <RCC_GetFlagStatus+0x70>)
    1a02:	681b      	ldr	r3, [r3, #0]
    1a04:	617b      	str	r3, [r7, #20]
    1a06:	e009      	b.n	1a1c <RCC_GetFlagStatus+0x40>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
    1a08:	68fb      	ldr	r3, [r7, #12]
    1a0a:	2b02      	cmp	r3, #2
    1a0c:	d103      	bne.n	1a16 <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->BDCR;
    1a0e:	4b0f      	ldr	r3, [pc, #60]	; (1a4c <RCC_GetFlagStatus+0x70>)
    1a10:	6a1b      	ldr	r3, [r3, #32]
    1a12:	617b      	str	r3, [r7, #20]
    1a14:	e002      	b.n	1a1c <RCC_GetFlagStatus+0x40>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
    1a16:	4b0d      	ldr	r3, [pc, #52]	; (1a4c <RCC_GetFlagStatus+0x70>)
    1a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1a1a:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
    1a1c:	79fb      	ldrb	r3, [r7, #7]
    1a1e:	f003 031f 	and.w	r3, r3, #31
    1a22:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
    1a24:	697a      	ldr	r2, [r7, #20]
    1a26:	68fb      	ldr	r3, [r7, #12]
    1a28:	fa22 f303 	lsr.w	r3, r2, r3
    1a2c:	f003 0301 	and.w	r3, r3, #1
    1a30:	2b00      	cmp	r3, #0
    1a32:	d002      	beq.n	1a3a <RCC_GetFlagStatus+0x5e>
  {
    bitstatus = SET;
    1a34:	2301      	movs	r3, #1
    1a36:	74fb      	strb	r3, [r7, #19]
    1a38:	e001      	b.n	1a3e <RCC_GetFlagStatus+0x62>
  }
  else
  {
    bitstatus = RESET;
    1a3a:	2300      	movs	r3, #0
    1a3c:	74fb      	strb	r3, [r7, #19]
  }

  /* Return the flag status */
  return bitstatus;
    1a3e:	7cfb      	ldrb	r3, [r7, #19]
}
    1a40:	4618      	mov	r0, r3
    1a42:	371c      	adds	r7, #28
    1a44:	46bd      	mov	sp, r7
    1a46:	bc80      	pop	{r7}
    1a48:	4770      	bx	lr
    1a4a:	bf00      	nop
    1a4c:	40021000 	.word	0x40021000

00001a50 <RCC_ClearFlag>:
  *   RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
    1a50:	b480      	push	{r7}
    1a52:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= CSR_RMVF_Set;
    1a54:	4b04      	ldr	r3, [pc, #16]	; (1a68 <RCC_ClearFlag+0x18>)
    1a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1a58:	4a03      	ldr	r2, [pc, #12]	; (1a68 <RCC_ClearFlag+0x18>)
    1a5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    1a5e:	6253      	str	r3, [r2, #36]	; 0x24
}
    1a60:	bf00      	nop
    1a62:	46bd      	mov	sp, r7
    1a64:	bc80      	pop	{r7}
    1a66:	4770      	bx	lr
    1a68:	40021000 	.word	0x40021000

00001a6c <RCC_GetITStatus>:
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  *   
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
    1a6c:	b480      	push	{r7}
    1a6e:	b085      	sub	sp, #20
    1a70:	af00      	add	r7, sp, #0
    1a72:	4603      	mov	r3, r0
    1a74:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
    1a76:	2300      	movs	r3, #0
    1a78:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
    1a7a:	4b08      	ldr	r3, [pc, #32]	; (1a9c <RCC_GetITStatus+0x30>)
    1a7c:	689a      	ldr	r2, [r3, #8]
    1a7e:	79fb      	ldrb	r3, [r7, #7]
    1a80:	4013      	ands	r3, r2
    1a82:	2b00      	cmp	r3, #0
    1a84:	d002      	beq.n	1a8c <RCC_GetITStatus+0x20>
  {
    bitstatus = SET;
    1a86:	2301      	movs	r3, #1
    1a88:	73fb      	strb	r3, [r7, #15]
    1a8a:	e001      	b.n	1a90 <RCC_GetITStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
    1a8c:	2300      	movs	r3, #0
    1a8e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the RCC_IT status */
  return  bitstatus;
    1a90:	7bfb      	ldrb	r3, [r7, #15]
}
    1a92:	4618      	mov	r0, r3
    1a94:	3714      	adds	r7, #20
    1a96:	46bd      	mov	sp, r7
    1a98:	bc80      	pop	{r7}
    1a9a:	4770      	bx	lr
    1a9c:	40021000 	.word	0x40021000

00001aa0 <RCC_ClearITPendingBit>:
  *   
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
    1aa0:	b480      	push	{r7}
    1aa2:	b083      	sub	sp, #12
    1aa4:	af00      	add	r7, sp, #0
    1aa6:	4603      	mov	r3, r0
    1aa8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
    1aaa:	4a04      	ldr	r2, [pc, #16]	; (1abc <RCC_ClearITPendingBit+0x1c>)
    1aac:	79fb      	ldrb	r3, [r7, #7]
    1aae:	7013      	strb	r3, [r2, #0]
}
    1ab0:	bf00      	nop
    1ab2:	370c      	adds	r7, #12
    1ab4:	46bd      	mov	sp, r7
    1ab6:	bc80      	pop	{r7}
    1ab8:	4770      	bx	lr
    1aba:	bf00      	nop
    1abc:	4002100a 	.word	0x4002100a

00001ac0 <GPIO_DeInit>:
  * @brief  Deinitializes the GPIOx peripheral registers to their default reset values.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
    1ac0:	b580      	push	{r7, lr}
    1ac2:	b082      	sub	sp, #8
    1ac4:	af00      	add	r7, sp, #0
    1ac6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  if (GPIOx == GPIOA)
    1ac8:	687b      	ldr	r3, [r7, #4]
    1aca:	4a2f      	ldr	r2, [pc, #188]	; (1b88 <GPIO_DeInit+0xc8>)
    1acc:	4293      	cmp	r3, r2
    1ace:	d108      	bne.n	1ae2 <GPIO_DeInit+0x22>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
    1ad0:	2101      	movs	r1, #1
    1ad2:	2004      	movs	r0, #4
    1ad4:	f7ff ff16 	bl	1904 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
    1ad8:	2100      	movs	r1, #0
    1ada:	2004      	movs	r0, #4
    1adc:	f7ff ff12 	bl	1904 <RCC_APB2PeriphResetCmd>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
    }
  }
}
    1ae0:	e04e      	b.n	1b80 <GPIO_DeInit+0xc0>
  else if (GPIOx == GPIOB)
    1ae2:	687b      	ldr	r3, [r7, #4]
    1ae4:	4a29      	ldr	r2, [pc, #164]	; (1b8c <GPIO_DeInit+0xcc>)
    1ae6:	4293      	cmp	r3, r2
    1ae8:	d108      	bne.n	1afc <GPIO_DeInit+0x3c>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
    1aea:	2101      	movs	r1, #1
    1aec:	2008      	movs	r0, #8
    1aee:	f7ff ff09 	bl	1904 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
    1af2:	2100      	movs	r1, #0
    1af4:	2008      	movs	r0, #8
    1af6:	f7ff ff05 	bl	1904 <RCC_APB2PeriphResetCmd>
}
    1afa:	e041      	b.n	1b80 <GPIO_DeInit+0xc0>
  else if (GPIOx == GPIOC)
    1afc:	687b      	ldr	r3, [r7, #4]
    1afe:	4a24      	ldr	r2, [pc, #144]	; (1b90 <GPIO_DeInit+0xd0>)
    1b00:	4293      	cmp	r3, r2
    1b02:	d108      	bne.n	1b16 <GPIO_DeInit+0x56>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
    1b04:	2101      	movs	r1, #1
    1b06:	2010      	movs	r0, #16
    1b08:	f7ff fefc 	bl	1904 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
    1b0c:	2100      	movs	r1, #0
    1b0e:	2010      	movs	r0, #16
    1b10:	f7ff fef8 	bl	1904 <RCC_APB2PeriphResetCmd>
}
    1b14:	e034      	b.n	1b80 <GPIO_DeInit+0xc0>
  else if (GPIOx == GPIOD)
    1b16:	687b      	ldr	r3, [r7, #4]
    1b18:	4a1e      	ldr	r2, [pc, #120]	; (1b94 <GPIO_DeInit+0xd4>)
    1b1a:	4293      	cmp	r3, r2
    1b1c:	d108      	bne.n	1b30 <GPIO_DeInit+0x70>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
    1b1e:	2101      	movs	r1, #1
    1b20:	2020      	movs	r0, #32
    1b22:	f7ff feef 	bl	1904 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
    1b26:	2100      	movs	r1, #0
    1b28:	2020      	movs	r0, #32
    1b2a:	f7ff feeb 	bl	1904 <RCC_APB2PeriphResetCmd>
}
    1b2e:	e027      	b.n	1b80 <GPIO_DeInit+0xc0>
  else if (GPIOx == GPIOE)
    1b30:	687b      	ldr	r3, [r7, #4]
    1b32:	4a19      	ldr	r2, [pc, #100]	; (1b98 <GPIO_DeInit+0xd8>)
    1b34:	4293      	cmp	r3, r2
    1b36:	d108      	bne.n	1b4a <GPIO_DeInit+0x8a>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
    1b38:	2101      	movs	r1, #1
    1b3a:	2040      	movs	r0, #64	; 0x40
    1b3c:	f7ff fee2 	bl	1904 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
    1b40:	2100      	movs	r1, #0
    1b42:	2040      	movs	r0, #64	; 0x40
    1b44:	f7ff fede 	bl	1904 <RCC_APB2PeriphResetCmd>
}
    1b48:	e01a      	b.n	1b80 <GPIO_DeInit+0xc0>
  else if (GPIOx == GPIOF)
    1b4a:	687b      	ldr	r3, [r7, #4]
    1b4c:	4a13      	ldr	r2, [pc, #76]	; (1b9c <GPIO_DeInit+0xdc>)
    1b4e:	4293      	cmp	r3, r2
    1b50:	d108      	bne.n	1b64 <GPIO_DeInit+0xa4>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
    1b52:	2101      	movs	r1, #1
    1b54:	2080      	movs	r0, #128	; 0x80
    1b56:	f7ff fed5 	bl	1904 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
    1b5a:	2100      	movs	r1, #0
    1b5c:	2080      	movs	r0, #128	; 0x80
    1b5e:	f7ff fed1 	bl	1904 <RCC_APB2PeriphResetCmd>
}
    1b62:	e00d      	b.n	1b80 <GPIO_DeInit+0xc0>
    if (GPIOx == GPIOG)
    1b64:	687b      	ldr	r3, [r7, #4]
    1b66:	4a0e      	ldr	r2, [pc, #56]	; (1ba0 <GPIO_DeInit+0xe0>)
    1b68:	4293      	cmp	r3, r2
    1b6a:	d109      	bne.n	1b80 <GPIO_DeInit+0xc0>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
    1b6c:	2101      	movs	r1, #1
    1b6e:	f44f 7080 	mov.w	r0, #256	; 0x100
    1b72:	f7ff fec7 	bl	1904 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
    1b76:	2100      	movs	r1, #0
    1b78:	f44f 7080 	mov.w	r0, #256	; 0x100
    1b7c:	f7ff fec2 	bl	1904 <RCC_APB2PeriphResetCmd>
}
    1b80:	bf00      	nop
    1b82:	3708      	adds	r7, #8
    1b84:	46bd      	mov	sp, r7
    1b86:	bd80      	pop	{r7, pc}
    1b88:	40010800 	.word	0x40010800
    1b8c:	40010c00 	.word	0x40010c00
    1b90:	40011000 	.word	0x40011000
    1b94:	40011400 	.word	0x40011400
    1b98:	40011800 	.word	0x40011800
    1b9c:	40011c00 	.word	0x40011c00
    1ba0:	40012000 	.word	0x40012000

00001ba4 <GPIO_AFIODeInit>:
  *   and EXTI configuration) registers to their default reset values.
  * @param  None
  * @retval None
  */
void GPIO_AFIODeInit(void)
{
    1ba4:	b580      	push	{r7, lr}
    1ba6:	af00      	add	r7, sp, #0
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
    1ba8:	2101      	movs	r1, #1
    1baa:	2001      	movs	r0, #1
    1bac:	f7ff feaa 	bl	1904 <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
    1bb0:	2100      	movs	r1, #0
    1bb2:	2001      	movs	r0, #1
    1bb4:	f7ff fea6 	bl	1904 <RCC_APB2PeriphResetCmd>
}
    1bb8:	bf00      	nop
    1bba:	bd80      	pop	{r7, pc}

00001bbc <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
    1bbc:	b480      	push	{r7}
    1bbe:	b089      	sub	sp, #36	; 0x24
    1bc0:	af00      	add	r7, sp, #0
    1bc2:	6078      	str	r0, [r7, #4]
    1bc4:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
    1bc6:	2300      	movs	r3, #0
    1bc8:	61fb      	str	r3, [r7, #28]
    1bca:	2300      	movs	r3, #0
    1bcc:	613b      	str	r3, [r7, #16]
    1bce:	2300      	movs	r3, #0
    1bd0:	61bb      	str	r3, [r7, #24]
    1bd2:	2300      	movs	r3, #0
    1bd4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
    1bd6:	2300      	movs	r3, #0
    1bd8:	617b      	str	r3, [r7, #20]
    1bda:	2300      	movs	r3, #0
    1bdc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
    1bde:	683b      	ldr	r3, [r7, #0]
    1be0:	78db      	ldrb	r3, [r3, #3]
    1be2:	f003 030f 	and.w	r3, r3, #15
    1be6:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
    1be8:	683b      	ldr	r3, [r7, #0]
    1bea:	78db      	ldrb	r3, [r3, #3]
    1bec:	f003 0310 	and.w	r3, r3, #16
    1bf0:	2b00      	cmp	r3, #0
    1bf2:	d005      	beq.n	1c00 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
    1bf4:	683b      	ldr	r3, [r7, #0]
    1bf6:	789b      	ldrb	r3, [r3, #2]
    1bf8:	461a      	mov	r2, r3
    1bfa:	69fb      	ldr	r3, [r7, #28]
    1bfc:	4313      	orrs	r3, r2
    1bfe:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
    1c00:	683b      	ldr	r3, [r7, #0]
    1c02:	881b      	ldrh	r3, [r3, #0]
    1c04:	b2db      	uxtb	r3, r3
    1c06:	2b00      	cmp	r3, #0
    1c08:	d044      	beq.n	1c94 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
    1c0a:	687b      	ldr	r3, [r7, #4]
    1c0c:	681b      	ldr	r3, [r3, #0]
    1c0e:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    1c10:	2300      	movs	r3, #0
    1c12:	61bb      	str	r3, [r7, #24]
    1c14:	e038      	b.n	1c88 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
    1c16:	2201      	movs	r2, #1
    1c18:	69bb      	ldr	r3, [r7, #24]
    1c1a:	fa02 f303 	lsl.w	r3, r2, r3
    1c1e:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
    1c20:	683b      	ldr	r3, [r7, #0]
    1c22:	881b      	ldrh	r3, [r3, #0]
    1c24:	461a      	mov	r2, r3
    1c26:	68fb      	ldr	r3, [r7, #12]
    1c28:	4013      	ands	r3, r2
    1c2a:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    1c2c:	693a      	ldr	r2, [r7, #16]
    1c2e:	68fb      	ldr	r3, [r7, #12]
    1c30:	429a      	cmp	r2, r3
    1c32:	d126      	bne.n	1c82 <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
    1c34:	69bb      	ldr	r3, [r7, #24]
    1c36:	009b      	lsls	r3, r3, #2
    1c38:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    1c3a:	220f      	movs	r2, #15
    1c3c:	68fb      	ldr	r3, [r7, #12]
    1c3e:	fa02 f303 	lsl.w	r3, r2, r3
    1c42:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    1c44:	68bb      	ldr	r3, [r7, #8]
    1c46:	43db      	mvns	r3, r3
    1c48:	697a      	ldr	r2, [r7, #20]
    1c4a:	4013      	ands	r3, r2
    1c4c:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    1c4e:	69fa      	ldr	r2, [r7, #28]
    1c50:	68fb      	ldr	r3, [r7, #12]
    1c52:	fa02 f303 	lsl.w	r3, r2, r3
    1c56:	697a      	ldr	r2, [r7, #20]
    1c58:	4313      	orrs	r3, r2
    1c5a:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    1c5c:	683b      	ldr	r3, [r7, #0]
    1c5e:	78db      	ldrb	r3, [r3, #3]
    1c60:	2b28      	cmp	r3, #40	; 0x28
    1c62:	d105      	bne.n	1c70 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
    1c64:	2201      	movs	r2, #1
    1c66:	69bb      	ldr	r3, [r7, #24]
    1c68:	409a      	lsls	r2, r3
    1c6a:	687b      	ldr	r3, [r7, #4]
    1c6c:	615a      	str	r2, [r3, #20]
    1c6e:	e008      	b.n	1c82 <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    1c70:	683b      	ldr	r3, [r7, #0]
    1c72:	78db      	ldrb	r3, [r3, #3]
    1c74:	2b48      	cmp	r3, #72	; 0x48
    1c76:	d104      	bne.n	1c82 <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
    1c78:	2201      	movs	r2, #1
    1c7a:	69bb      	ldr	r3, [r7, #24]
    1c7c:	409a      	lsls	r2, r3
    1c7e:	687b      	ldr	r3, [r7, #4]
    1c80:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    1c82:	69bb      	ldr	r3, [r7, #24]
    1c84:	3301      	adds	r3, #1
    1c86:	61bb      	str	r3, [r7, #24]
    1c88:	69bb      	ldr	r3, [r7, #24]
    1c8a:	2b07      	cmp	r3, #7
    1c8c:	d9c3      	bls.n	1c16 <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
    1c8e:	687b      	ldr	r3, [r7, #4]
    1c90:	697a      	ldr	r2, [r7, #20]
    1c92:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
    1c94:	683b      	ldr	r3, [r7, #0]
    1c96:	881b      	ldrh	r3, [r3, #0]
    1c98:	2bff      	cmp	r3, #255	; 0xff
    1c9a:	d946      	bls.n	1d2a <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
    1c9c:	687b      	ldr	r3, [r7, #4]
    1c9e:	685b      	ldr	r3, [r3, #4]
    1ca0:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    1ca2:	2300      	movs	r3, #0
    1ca4:	61bb      	str	r3, [r7, #24]
    1ca6:	e03a      	b.n	1d1e <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
    1ca8:	69bb      	ldr	r3, [r7, #24]
    1caa:	3308      	adds	r3, #8
    1cac:	2201      	movs	r2, #1
    1cae:	fa02 f303 	lsl.w	r3, r2, r3
    1cb2:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
    1cb4:	683b      	ldr	r3, [r7, #0]
    1cb6:	881b      	ldrh	r3, [r3, #0]
    1cb8:	461a      	mov	r2, r3
    1cba:	68fb      	ldr	r3, [r7, #12]
    1cbc:	4013      	ands	r3, r2
    1cbe:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    1cc0:	693a      	ldr	r2, [r7, #16]
    1cc2:	68fb      	ldr	r3, [r7, #12]
    1cc4:	429a      	cmp	r2, r3
    1cc6:	d127      	bne.n	1d18 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
    1cc8:	69bb      	ldr	r3, [r7, #24]
    1cca:	009b      	lsls	r3, r3, #2
    1ccc:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    1cce:	220f      	movs	r2, #15
    1cd0:	68fb      	ldr	r3, [r7, #12]
    1cd2:	fa02 f303 	lsl.w	r3, r2, r3
    1cd6:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    1cd8:	68bb      	ldr	r3, [r7, #8]
    1cda:	43db      	mvns	r3, r3
    1cdc:	697a      	ldr	r2, [r7, #20]
    1cde:	4013      	ands	r3, r2
    1ce0:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    1ce2:	69fa      	ldr	r2, [r7, #28]
    1ce4:	68fb      	ldr	r3, [r7, #12]
    1ce6:	fa02 f303 	lsl.w	r3, r2, r3
    1cea:	697a      	ldr	r2, [r7, #20]
    1cec:	4313      	orrs	r3, r2
    1cee:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    1cf0:	683b      	ldr	r3, [r7, #0]
    1cf2:	78db      	ldrb	r3, [r3, #3]
    1cf4:	2b28      	cmp	r3, #40	; 0x28
    1cf6:	d105      	bne.n	1d04 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
    1cf8:	69bb      	ldr	r3, [r7, #24]
    1cfa:	3308      	adds	r3, #8
    1cfc:	2201      	movs	r2, #1
    1cfe:	409a      	lsls	r2, r3
    1d00:	687b      	ldr	r3, [r7, #4]
    1d02:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    1d04:	683b      	ldr	r3, [r7, #0]
    1d06:	78db      	ldrb	r3, [r3, #3]
    1d08:	2b48      	cmp	r3, #72	; 0x48
    1d0a:	d105      	bne.n	1d18 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
    1d0c:	69bb      	ldr	r3, [r7, #24]
    1d0e:	3308      	adds	r3, #8
    1d10:	2201      	movs	r2, #1
    1d12:	409a      	lsls	r2, r3
    1d14:	687b      	ldr	r3, [r7, #4]
    1d16:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    1d18:	69bb      	ldr	r3, [r7, #24]
    1d1a:	3301      	adds	r3, #1
    1d1c:	61bb      	str	r3, [r7, #24]
    1d1e:	69bb      	ldr	r3, [r7, #24]
    1d20:	2b07      	cmp	r3, #7
    1d22:	d9c1      	bls.n	1ca8 <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
    1d24:	687b      	ldr	r3, [r7, #4]
    1d26:	697a      	ldr	r2, [r7, #20]
    1d28:	605a      	str	r2, [r3, #4]
  }
}
    1d2a:	bf00      	nop
    1d2c:	3724      	adds	r7, #36	; 0x24
    1d2e:	46bd      	mov	sp, r7
    1d30:	bc80      	pop	{r7}
    1d32:	4770      	bx	lr

00001d34 <GPIO_StructInit>:
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
    1d34:	b480      	push	{r7}
    1d36:	b083      	sub	sp, #12
    1d38:	af00      	add	r7, sp, #0
    1d3a:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
    1d3c:	687b      	ldr	r3, [r7, #4]
    1d3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1d42:	801a      	strh	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
    1d44:	687b      	ldr	r3, [r7, #4]
    1d46:	2202      	movs	r2, #2
    1d48:	709a      	strb	r2, [r3, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
    1d4a:	687b      	ldr	r3, [r7, #4]
    1d4c:	2204      	movs	r2, #4
    1d4e:	70da      	strb	r2, [r3, #3]
}
    1d50:	bf00      	nop
    1d52:	370c      	adds	r7, #12
    1d54:	46bd      	mov	sp, r7
    1d56:	bc80      	pop	{r7}
    1d58:	4770      	bx	lr

00001d5a <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1d5a:	b480      	push	{r7}
    1d5c:	b085      	sub	sp, #20
    1d5e:	af00      	add	r7, sp, #0
    1d60:	6078      	str	r0, [r7, #4]
    1d62:	460b      	mov	r3, r1
    1d64:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    1d66:	2300      	movs	r3, #0
    1d68:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
    1d6a:	687b      	ldr	r3, [r7, #4]
    1d6c:	689a      	ldr	r2, [r3, #8]
    1d6e:	887b      	ldrh	r3, [r7, #2]
    1d70:	4013      	ands	r3, r2
    1d72:	2b00      	cmp	r3, #0
    1d74:	d002      	beq.n	1d7c <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
    1d76:	2301      	movs	r3, #1
    1d78:	73fb      	strb	r3, [r7, #15]
    1d7a:	e001      	b.n	1d80 <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    1d7c:	2300      	movs	r3, #0
    1d7e:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    1d80:	7bfb      	ldrb	r3, [r7, #15]
}
    1d82:	4618      	mov	r0, r3
    1d84:	3714      	adds	r7, #20
    1d86:	46bd      	mov	sp, r7
    1d88:	bc80      	pop	{r7}
    1d8a:	4770      	bx	lr

00001d8c <GPIO_ReadInputData>:
  * @brief  Reads the specified GPIO input data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
    1d8c:	b480      	push	{r7}
    1d8e:	b083      	sub	sp, #12
    1d90:	af00      	add	r7, sp, #0
    1d92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  return ((uint16_t)GPIOx->IDR);
    1d94:	687b      	ldr	r3, [r7, #4]
    1d96:	689b      	ldr	r3, [r3, #8]
    1d98:	b29b      	uxth	r3, r3
}
    1d9a:	4618      	mov	r0, r3
    1d9c:	370c      	adds	r7, #12
    1d9e:	46bd      	mov	sp, r7
    1da0:	bc80      	pop	{r7}
    1da2:	4770      	bx	lr

00001da4 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1da4:	b480      	push	{r7}
    1da6:	b085      	sub	sp, #20
    1da8:	af00      	add	r7, sp, #0
    1daa:	6078      	str	r0, [r7, #4]
    1dac:	460b      	mov	r3, r1
    1dae:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    1db0:	2300      	movs	r3, #0
    1db2:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
    1db4:	687b      	ldr	r3, [r7, #4]
    1db6:	68da      	ldr	r2, [r3, #12]
    1db8:	887b      	ldrh	r3, [r7, #2]
    1dba:	4013      	ands	r3, r2
    1dbc:	2b00      	cmp	r3, #0
    1dbe:	d002      	beq.n	1dc6 <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
    1dc0:	2301      	movs	r3, #1
    1dc2:	73fb      	strb	r3, [r7, #15]
    1dc4:	e001      	b.n	1dca <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    1dc6:	2300      	movs	r3, #0
    1dc8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    1dca:	7bfb      	ldrb	r3, [r7, #15]
}
    1dcc:	4618      	mov	r0, r3
    1dce:	3714      	adds	r7, #20
    1dd0:	46bd      	mov	sp, r7
    1dd2:	bc80      	pop	{r7}
    1dd4:	4770      	bx	lr

00001dd6 <GPIO_ReadOutputData>:
  * @brief  Reads the specified GPIO output data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
    1dd6:	b480      	push	{r7}
    1dd8:	b083      	sub	sp, #12
    1dda:	af00      	add	r7, sp, #0
    1ddc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    
  return ((uint16_t)GPIOx->ODR);
    1dde:	687b      	ldr	r3, [r7, #4]
    1de0:	68db      	ldr	r3, [r3, #12]
    1de2:	b29b      	uxth	r3, r3
}
    1de4:	4618      	mov	r0, r3
    1de6:	370c      	adds	r7, #12
    1de8:	46bd      	mov	sp, r7
    1dea:	bc80      	pop	{r7}
    1dec:	4770      	bx	lr

00001dee <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1dee:	b480      	push	{r7}
    1df0:	b083      	sub	sp, #12
    1df2:	af00      	add	r7, sp, #0
    1df4:	6078      	str	r0, [r7, #4]
    1df6:	460b      	mov	r3, r1
    1df8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
    1dfa:	887a      	ldrh	r2, [r7, #2]
    1dfc:	687b      	ldr	r3, [r7, #4]
    1dfe:	611a      	str	r2, [r3, #16]
}
    1e00:	bf00      	nop
    1e02:	370c      	adds	r7, #12
    1e04:	46bd      	mov	sp, r7
    1e06:	bc80      	pop	{r7}
    1e08:	4770      	bx	lr

00001e0a <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1e0a:	b480      	push	{r7}
    1e0c:	b083      	sub	sp, #12
    1e0e:	af00      	add	r7, sp, #0
    1e10:	6078      	str	r0, [r7, #4]
    1e12:	460b      	mov	r3, r1
    1e14:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
    1e16:	887a      	ldrh	r2, [r7, #2]
    1e18:	687b      	ldr	r3, [r7, #4]
    1e1a:	615a      	str	r2, [r3, #20]
}
    1e1c:	bf00      	nop
    1e1e:	370c      	adds	r7, #12
    1e20:	46bd      	mov	sp, r7
    1e22:	bc80      	pop	{r7}
    1e24:	4770      	bx	lr

00001e26 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
    1e26:	b480      	push	{r7}
    1e28:	b083      	sub	sp, #12
    1e2a:	af00      	add	r7, sp, #0
    1e2c:	6078      	str	r0, [r7, #4]
    1e2e:	460b      	mov	r3, r1
    1e30:	807b      	strh	r3, [r7, #2]
    1e32:	4613      	mov	r3, r2
    1e34:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
  
  if (BitVal != Bit_RESET)
    1e36:	787b      	ldrb	r3, [r7, #1]
    1e38:	2b00      	cmp	r3, #0
    1e3a:	d003      	beq.n	1e44 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
    1e3c:	887a      	ldrh	r2, [r7, #2]
    1e3e:	687b      	ldr	r3, [r7, #4]
    1e40:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
  }
}
    1e42:	e002      	b.n	1e4a <GPIO_WriteBit+0x24>
    GPIOx->BRR = GPIO_Pin;
    1e44:	887a      	ldrh	r2, [r7, #2]
    1e46:	687b      	ldr	r3, [r7, #4]
    1e48:	615a      	str	r2, [r3, #20]
}
    1e4a:	bf00      	nop
    1e4c:	370c      	adds	r7, #12
    1e4e:	46bd      	mov	sp, r7
    1e50:	bc80      	pop	{r7}
    1e52:	4770      	bx	lr

00001e54 <GPIO_Write>:
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
    1e54:	b480      	push	{r7}
    1e56:	b083      	sub	sp, #12
    1e58:	af00      	add	r7, sp, #0
    1e5a:	6078      	str	r0, [r7, #4]
    1e5c:	460b      	mov	r3, r1
    1e5e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  GPIOx->ODR = PortVal;
    1e60:	887a      	ldrh	r2, [r7, #2]
    1e62:	687b      	ldr	r3, [r7, #4]
    1e64:	60da      	str	r2, [r3, #12]
}
    1e66:	bf00      	nop
    1e68:	370c      	adds	r7, #12
    1e6a:	46bd      	mov	sp, r7
    1e6c:	bc80      	pop	{r7}
    1e6e:	4770      	bx	lr

00001e70 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1e70:	b480      	push	{r7}
    1e72:	b085      	sub	sp, #20
    1e74:	af00      	add	r7, sp, #0
    1e76:	6078      	str	r0, [r7, #4]
    1e78:	460b      	mov	r3, r1
    1e7a:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0x00010000;
    1e7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    1e80:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  tmp |= GPIO_Pin;
    1e82:	887b      	ldrh	r3, [r7, #2]
    1e84:	68fa      	ldr	r2, [r7, #12]
    1e86:	4313      	orrs	r3, r2
    1e88:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    1e8a:	687b      	ldr	r3, [r7, #4]
    1e8c:	68fa      	ldr	r2, [r7, #12]
    1e8e:	619a      	str	r2, [r3, #24]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
    1e90:	887a      	ldrh	r2, [r7, #2]
    1e92:	687b      	ldr	r3, [r7, #4]
    1e94:	619a      	str	r2, [r3, #24]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    1e96:	687b      	ldr	r3, [r7, #4]
    1e98:	68fa      	ldr	r2, [r7, #12]
    1e9a:	619a      	str	r2, [r3, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    1e9c:	687b      	ldr	r3, [r7, #4]
    1e9e:	699b      	ldr	r3, [r3, #24]
    1ea0:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    1ea2:	687b      	ldr	r3, [r7, #4]
    1ea4:	699b      	ldr	r3, [r3, #24]
    1ea6:	60fb      	str	r3, [r7, #12]
}
    1ea8:	bf00      	nop
    1eaa:	3714      	adds	r7, #20
    1eac:	46bd      	mov	sp, r7
    1eae:	bc80      	pop	{r7}
    1eb0:	4770      	bx	lr

00001eb2 <GPIO_EventOutputConfig>:
  * @param  GPIO_PinSource: specifies the pin for the Event output.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EventOutputConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    1eb2:	b480      	push	{r7}
    1eb4:	b085      	sub	sp, #20
    1eb6:	af00      	add	r7, sp, #0
    1eb8:	4603      	mov	r3, r0
    1eba:	460a      	mov	r2, r1
    1ebc:	71fb      	strb	r3, [r7, #7]
    1ebe:	4613      	mov	r3, r2
    1ec0:	71bb      	strb	r3, [r7, #6]
  uint32_t tmpreg = 0x00;
    1ec2:	2300      	movs	r3, #0
    1ec4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
    
  tmpreg = AFIO->EVCR;
    1ec6:	4b0c      	ldr	r3, [pc, #48]	; (1ef8 <GPIO_EventOutputConfig+0x46>)
    1ec8:	681b      	ldr	r3, [r3, #0]
    1eca:	60fb      	str	r3, [r7, #12]
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
    1ecc:	68fa      	ldr	r2, [r7, #12]
    1ece:	f64f 7380 	movw	r3, #65408	; 0xff80
    1ed2:	4013      	ands	r3, r2
    1ed4:	60fb      	str	r3, [r7, #12]
  tmpreg |= (uint32_t)GPIO_PortSource << 0x04;
    1ed6:	79fb      	ldrb	r3, [r7, #7]
    1ed8:	011b      	lsls	r3, r3, #4
    1eda:	68fa      	ldr	r2, [r7, #12]
    1edc:	4313      	orrs	r3, r2
    1ede:	60fb      	str	r3, [r7, #12]
  tmpreg |= GPIO_PinSource;
    1ee0:	79bb      	ldrb	r3, [r7, #6]
    1ee2:	68fa      	ldr	r2, [r7, #12]
    1ee4:	4313      	orrs	r3, r2
    1ee6:	60fb      	str	r3, [r7, #12]
  AFIO->EVCR = tmpreg;
    1ee8:	4a03      	ldr	r2, [pc, #12]	; (1ef8 <GPIO_EventOutputConfig+0x46>)
    1eea:	68fb      	ldr	r3, [r7, #12]
    1eec:	6013      	str	r3, [r2, #0]
}
    1eee:	bf00      	nop
    1ef0:	3714      	adds	r7, #20
    1ef2:	46bd      	mov	sp, r7
    1ef4:	bc80      	pop	{r7}
    1ef6:	4770      	bx	lr
    1ef8:	40010000 	.word	0x40010000

00001efc <GPIO_EventOutputCmd>:
  * @param  NewState: new state of the Event output.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_EventOutputCmd(FunctionalState NewState)
{
    1efc:	b480      	push	{r7}
    1efe:	b083      	sub	sp, #12
    1f00:	af00      	add	r7, sp, #0
    1f02:	4603      	mov	r3, r0
    1f04:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) EVCR_EVOE_BB = (uint32_t)NewState;
    1f06:	4a04      	ldr	r2, [pc, #16]	; (1f18 <GPIO_EventOutputCmd+0x1c>)
    1f08:	79fb      	ldrb	r3, [r7, #7]
    1f0a:	6013      	str	r3, [r2, #0]
}
    1f0c:	bf00      	nop
    1f0e:	370c      	adds	r7, #12
    1f10:	46bd      	mov	sp, r7
    1f12:	bc80      	pop	{r7}
    1f14:	4770      	bx	lr
    1f16:	bf00      	nop
    1f18:	4220001c 	.word	0x4220001c

00001f1c <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
    1f1c:	b480      	push	{r7}
    1f1e:	b087      	sub	sp, #28
    1f20:	af00      	add	r7, sp, #0
    1f22:	6078      	str	r0, [r7, #4]
    1f24:	460b      	mov	r3, r1
    1f26:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
    1f28:	2300      	movs	r3, #0
    1f2a:	613b      	str	r3, [r7, #16]
    1f2c:	2300      	movs	r3, #0
    1f2e:	60fb      	str	r3, [r7, #12]
    1f30:	2300      	movs	r3, #0
    1f32:	617b      	str	r3, [r7, #20]
    1f34:	2300      	movs	r3, #0
    1f36:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if((GPIO_Remap & 0x80000000) == 0x80000000)
    1f38:	687b      	ldr	r3, [r7, #4]
    1f3a:	2b00      	cmp	r3, #0
    1f3c:	da03      	bge.n	1f46 <GPIO_PinRemapConfig+0x2a>
  {
    tmpreg = AFIO->MAPR2;
    1f3e:	4b2e      	ldr	r3, [pc, #184]	; (1ff8 <GPIO_PinRemapConfig+0xdc>)
    1f40:	69db      	ldr	r3, [r3, #28]
    1f42:	617b      	str	r3, [r7, #20]
    1f44:	e002      	b.n	1f4c <GPIO_PinRemapConfig+0x30>
  }
  else
  {
    tmpreg = AFIO->MAPR;
    1f46:	4b2c      	ldr	r3, [pc, #176]	; (1ff8 <GPIO_PinRemapConfig+0xdc>)
    1f48:	685b      	ldr	r3, [r3, #4]
    1f4a:	617b      	str	r3, [r7, #20]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
    1f4c:	687b      	ldr	r3, [r7, #4]
    1f4e:	0c1b      	lsrs	r3, r3, #16
    1f50:	f003 030f 	and.w	r3, r3, #15
    1f54:	60bb      	str	r3, [r7, #8]
  tmp = GPIO_Remap & LSB_MASK;
    1f56:	687b      	ldr	r3, [r7, #4]
    1f58:	b29b      	uxth	r3, r3
    1f5a:	613b      	str	r3, [r7, #16]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
    1f5c:	687b      	ldr	r3, [r7, #4]
    1f5e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    1f62:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
    1f66:	d10a      	bne.n	1f7e <GPIO_PinRemapConfig+0x62>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
    1f68:	697b      	ldr	r3, [r7, #20]
    1f6a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    1f6e:	617b      	str	r3, [r7, #20]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
    1f70:	4b21      	ldr	r3, [pc, #132]	; (1ff8 <GPIO_PinRemapConfig+0xdc>)
    1f72:	685b      	ldr	r3, [r3, #4]
    1f74:	4a20      	ldr	r2, [pc, #128]	; (1ff8 <GPIO_PinRemapConfig+0xdc>)
    1f76:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    1f7a:	6053      	str	r3, [r2, #4]
    1f7c:	e021      	b.n	1fc2 <GPIO_PinRemapConfig+0xa6>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
    1f7e:	687b      	ldr	r3, [r7, #4]
    1f80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    1f84:	2b00      	cmp	r3, #0
    1f86:	d00e      	beq.n	1fa6 <GPIO_PinRemapConfig+0x8a>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
    1f88:	2203      	movs	r2, #3
    1f8a:	68bb      	ldr	r3, [r7, #8]
    1f8c:	fa02 f303 	lsl.w	r3, r2, r3
    1f90:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
    1f92:	68fb      	ldr	r3, [r7, #12]
    1f94:	43db      	mvns	r3, r3
    1f96:	697a      	ldr	r2, [r7, #20]
    1f98:	4013      	ands	r3, r2
    1f9a:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    1f9c:	697b      	ldr	r3, [r7, #20]
    1f9e:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    1fa2:	617b      	str	r3, [r7, #20]
    1fa4:	e00d      	b.n	1fc2 <GPIO_PinRemapConfig+0xa6>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
    1fa6:	687b      	ldr	r3, [r7, #4]
    1fa8:	0d5b      	lsrs	r3, r3, #21
    1faa:	011b      	lsls	r3, r3, #4
    1fac:	693a      	ldr	r2, [r7, #16]
    1fae:	fa02 f303 	lsl.w	r3, r2, r3
    1fb2:	43db      	mvns	r3, r3
    1fb4:	697a      	ldr	r2, [r7, #20]
    1fb6:	4013      	ands	r3, r2
    1fb8:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    1fba:	697b      	ldr	r3, [r7, #20]
    1fbc:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    1fc0:	617b      	str	r3, [r7, #20]
  }

  if (NewState != DISABLE)
    1fc2:	78fb      	ldrb	r3, [r7, #3]
    1fc4:	2b00      	cmp	r3, #0
    1fc6:	d008      	beq.n	1fda <GPIO_PinRemapConfig+0xbe>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
    1fc8:	687b      	ldr	r3, [r7, #4]
    1fca:	0d5b      	lsrs	r3, r3, #21
    1fcc:	011b      	lsls	r3, r3, #4
    1fce:	693a      	ldr	r2, [r7, #16]
    1fd0:	fa02 f303 	lsl.w	r3, r2, r3
    1fd4:	697a      	ldr	r2, [r7, #20]
    1fd6:	4313      	orrs	r3, r2
    1fd8:	617b      	str	r3, [r7, #20]
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
    1fda:	687b      	ldr	r3, [r7, #4]
    1fdc:	2b00      	cmp	r3, #0
    1fde:	da03      	bge.n	1fe8 <GPIO_PinRemapConfig+0xcc>
  {
    AFIO->MAPR2 = tmpreg;
    1fe0:	4a05      	ldr	r2, [pc, #20]	; (1ff8 <GPIO_PinRemapConfig+0xdc>)
    1fe2:	697b      	ldr	r3, [r7, #20]
    1fe4:	61d3      	str	r3, [r2, #28]
  }
  else
  {
    AFIO->MAPR = tmpreg;
  }  
}
    1fe6:	e002      	b.n	1fee <GPIO_PinRemapConfig+0xd2>
    AFIO->MAPR = tmpreg;
    1fe8:	4a03      	ldr	r2, [pc, #12]	; (1ff8 <GPIO_PinRemapConfig+0xdc>)
    1fea:	697b      	ldr	r3, [r7, #20]
    1fec:	6053      	str	r3, [r2, #4]
}
    1fee:	bf00      	nop
    1ff0:	371c      	adds	r7, #28
    1ff2:	46bd      	mov	sp, r7
    1ff4:	bc80      	pop	{r7}
    1ff6:	4770      	bx	lr
    1ff8:	40010000 	.word	0x40010000

00001ffc <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    1ffc:	b480      	push	{r7}
    1ffe:	b085      	sub	sp, #20
    2000:	af00      	add	r7, sp, #0
    2002:	4603      	mov	r3, r0
    2004:	460a      	mov	r2, r1
    2006:	71fb      	strb	r3, [r7, #7]
    2008:	4613      	mov	r3, r2
    200a:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
    200c:	2300      	movs	r3, #0
    200e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
    2010:	79bb      	ldrb	r3, [r7, #6]
    2012:	f003 0303 	and.w	r3, r3, #3
    2016:	009b      	lsls	r3, r3, #2
    2018:	220f      	movs	r2, #15
    201a:	fa02 f303 	lsl.w	r3, r2, r3
    201e:	60fb      	str	r3, [r7, #12]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
    2020:	4a15      	ldr	r2, [pc, #84]	; (2078 <GPIO_EXTILineConfig+0x7c>)
    2022:	79bb      	ldrb	r3, [r7, #6]
    2024:	089b      	lsrs	r3, r3, #2
    2026:	b2db      	uxtb	r3, r3
    2028:	3302      	adds	r3, #2
    202a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    202e:	68fb      	ldr	r3, [r7, #12]
    2030:	43db      	mvns	r3, r3
    2032:	4811      	ldr	r0, [pc, #68]	; (2078 <GPIO_EXTILineConfig+0x7c>)
    2034:	79b9      	ldrb	r1, [r7, #6]
    2036:	0889      	lsrs	r1, r1, #2
    2038:	b2c9      	uxtb	r1, r1
    203a:	401a      	ands	r2, r3
    203c:	1c8b      	adds	r3, r1, #2
    203e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
    2042:	4a0d      	ldr	r2, [pc, #52]	; (2078 <GPIO_EXTILineConfig+0x7c>)
    2044:	79bb      	ldrb	r3, [r7, #6]
    2046:	089b      	lsrs	r3, r3, #2
    2048:	b2db      	uxtb	r3, r3
    204a:	3302      	adds	r3, #2
    204c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    2050:	79f9      	ldrb	r1, [r7, #7]
    2052:	79bb      	ldrb	r3, [r7, #6]
    2054:	f003 0303 	and.w	r3, r3, #3
    2058:	009b      	lsls	r3, r3, #2
    205a:	fa01 f303 	lsl.w	r3, r1, r3
    205e:	4806      	ldr	r0, [pc, #24]	; (2078 <GPIO_EXTILineConfig+0x7c>)
    2060:	79b9      	ldrb	r1, [r7, #6]
    2062:	0889      	lsrs	r1, r1, #2
    2064:	b2c9      	uxtb	r1, r1
    2066:	431a      	orrs	r2, r3
    2068:	1c8b      	adds	r3, r1, #2
    206a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
    206e:	bf00      	nop
    2070:	3714      	adds	r7, #20
    2072:	46bd      	mov	sp, r7
    2074:	bc80      	pop	{r7}
    2076:	4770      	bx	lr
    2078:	40010000 	.word	0x40010000

0000207c <GPIO_ETH_MediaInterfaceConfig>:
  *     @arg GPIO_ETH_MediaInterface_MII: MII mode
  *     @arg GPIO_ETH_MediaInterface_RMII: RMII mode    
  * @retval None
  */
void GPIO_ETH_MediaInterfaceConfig(uint32_t GPIO_ETH_MediaInterface) 
{ 
    207c:	b480      	push	{r7}
    207e:	b083      	sub	sp, #12
    2080:	af00      	add	r7, sp, #0
    2082:	6078      	str	r0, [r7, #4]
  assert_param(IS_GPIO_ETH_MEDIA_INTERFACE(GPIO_ETH_MediaInterface)); 

  /* Configure MII_RMII selection bit */ 
  *(__IO uint32_t *) MAPR_MII_RMII_SEL_BB = GPIO_ETH_MediaInterface; 
    2084:	4a03      	ldr	r2, [pc, #12]	; (2094 <GPIO_ETH_MediaInterfaceConfig+0x18>)
    2086:	687b      	ldr	r3, [r7, #4]
    2088:	6013      	str	r3, [r2, #0]
}
    208a:	bf00      	nop
    208c:	370c      	adds	r7, #12
    208e:	46bd      	mov	sp, r7
    2090:	bc80      	pop	{r7}
    2092:	4770      	bx	lr
    2094:	422000dc 	.word	0x422000dc

00002098 <USART_DeInit>:
  *   This parameter can be one of the following values: 
  *      USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
    2098:	b580      	push	{r7, lr}
    209a:	b082      	sub	sp, #8
    209c:	af00      	add	r7, sp, #0
    209e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
    20a0:	687b      	ldr	r3, [r7, #4]
    20a2:	4a26      	ldr	r2, [pc, #152]	; (213c <USART_DeInit+0xa4>)
    20a4:	4293      	cmp	r3, r2
    20a6:	d10a      	bne.n	20be <USART_DeInit+0x26>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    20a8:	2101      	movs	r1, #1
    20aa:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    20ae:	f7ff fc29 	bl	1904 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
    20b2:	2100      	movs	r1, #0
    20b4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    20b8:	f7ff fc24 	bl	1904 <RCC_APB2PeriphResetCmd>
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
    }
  }
}
    20bc:	e03a      	b.n	2134 <USART_DeInit+0x9c>
  else if (USARTx == USART2)
    20be:	687b      	ldr	r3, [r7, #4]
    20c0:	4a1f      	ldr	r2, [pc, #124]	; (2140 <USART_DeInit+0xa8>)
    20c2:	4293      	cmp	r3, r2
    20c4:	d10a      	bne.n	20dc <USART_DeInit+0x44>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    20c6:	2101      	movs	r1, #1
    20c8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    20cc:	f7ff fc38 	bl	1940 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
    20d0:	2100      	movs	r1, #0
    20d2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    20d6:	f7ff fc33 	bl	1940 <RCC_APB1PeriphResetCmd>
}
    20da:	e02b      	b.n	2134 <USART_DeInit+0x9c>
  else if (USARTx == USART3)
    20dc:	687b      	ldr	r3, [r7, #4]
    20de:	4a19      	ldr	r2, [pc, #100]	; (2144 <USART_DeInit+0xac>)
    20e0:	4293      	cmp	r3, r2
    20e2:	d10a      	bne.n	20fa <USART_DeInit+0x62>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    20e4:	2101      	movs	r1, #1
    20e6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    20ea:	f7ff fc29 	bl	1940 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
    20ee:	2100      	movs	r1, #0
    20f0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    20f4:	f7ff fc24 	bl	1940 <RCC_APB1PeriphResetCmd>
}
    20f8:	e01c      	b.n	2134 <USART_DeInit+0x9c>
  else if (USARTx == UART4)
    20fa:	687b      	ldr	r3, [r7, #4]
    20fc:	4a12      	ldr	r2, [pc, #72]	; (2148 <USART_DeInit+0xb0>)
    20fe:	4293      	cmp	r3, r2
    2100:	d10a      	bne.n	2118 <USART_DeInit+0x80>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    2102:	2101      	movs	r1, #1
    2104:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    2108:	f7ff fc1a 	bl	1940 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
    210c:	2100      	movs	r1, #0
    210e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    2112:	f7ff fc15 	bl	1940 <RCC_APB1PeriphResetCmd>
}
    2116:	e00d      	b.n	2134 <USART_DeInit+0x9c>
    if (USARTx == UART5)
    2118:	687b      	ldr	r3, [r7, #4]
    211a:	4a0c      	ldr	r2, [pc, #48]	; (214c <USART_DeInit+0xb4>)
    211c:	4293      	cmp	r3, r2
    211e:	d109      	bne.n	2134 <USART_DeInit+0x9c>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    2120:	2101      	movs	r1, #1
    2122:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    2126:	f7ff fc0b 	bl	1940 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
    212a:	2100      	movs	r1, #0
    212c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    2130:	f7ff fc06 	bl	1940 <RCC_APB1PeriphResetCmd>
}
    2134:	bf00      	nop
    2136:	3708      	adds	r7, #8
    2138:	46bd      	mov	sp, r7
    213a:	bd80      	pop	{r7, pc}
    213c:	40013800 	.word	0x40013800
    2140:	40004400 	.word	0x40004400
    2144:	40004800 	.word	0x40004800
    2148:	40004c00 	.word	0x40004c00
    214c:	40005000 	.word	0x40005000

00002150 <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
    2150:	b580      	push	{r7, lr}
    2152:	b08c      	sub	sp, #48	; 0x30
    2154:	af00      	add	r7, sp, #0
    2156:	6078      	str	r0, [r7, #4]
    2158:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
    215a:	2300      	movs	r3, #0
    215c:	62fb      	str	r3, [r7, #44]	; 0x2c
    215e:	2300      	movs	r3, #0
    2160:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
    2162:	2300      	movs	r3, #0
    2164:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
    2166:	2300      	movs	r3, #0
    2168:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
    216a:	2300      	movs	r3, #0
    216c:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    216e:	687b      	ldr	r3, [r7, #4]
    2170:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    2172:	687b      	ldr	r3, [r7, #4]
    2174:	8a1b      	ldrh	r3, [r3, #16]
    2176:	b29b      	uxth	r3, r3
    2178:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
    217a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    217c:	f64c 73ff 	movw	r3, #53247	; 0xcfff
    2180:	4013      	ands	r3, r2
    2182:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
    2184:	683b      	ldr	r3, [r7, #0]
    2186:	88db      	ldrh	r3, [r3, #6]
    2188:	461a      	mov	r2, r3
    218a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    218c:	4313      	orrs	r3, r2
    218e:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    2190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2192:	b29a      	uxth	r2, r3
    2194:	687b      	ldr	r3, [r7, #4]
    2196:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
    2198:	687b      	ldr	r3, [r7, #4]
    219a:	899b      	ldrh	r3, [r3, #12]
    219c:	b29b      	uxth	r3, r3
    219e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
    21a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    21a2:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
    21a6:	4013      	ands	r3, r2
    21a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    21aa:	683b      	ldr	r3, [r7, #0]
    21ac:	889a      	ldrh	r2, [r3, #4]
    21ae:	683b      	ldr	r3, [r7, #0]
    21b0:	891b      	ldrh	r3, [r3, #8]
    21b2:	4313      	orrs	r3, r2
    21b4:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
    21b6:	683b      	ldr	r3, [r7, #0]
    21b8:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    21ba:	4313      	orrs	r3, r2
    21bc:	b29b      	uxth	r3, r3
    21be:	461a      	mov	r2, r3
    21c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    21c2:	4313      	orrs	r3, r2
    21c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
    21c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    21c8:	b29a      	uxth	r2, r3
    21ca:	687b      	ldr	r3, [r7, #4]
    21cc:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
    21ce:	687b      	ldr	r3, [r7, #4]
    21d0:	8a9b      	ldrh	r3, [r3, #20]
    21d2:	b29b      	uxth	r3, r3
    21d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
    21d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    21d8:	f64f 43ff 	movw	r3, #64767	; 0xfcff
    21dc:	4013      	ands	r3, r2
    21de:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
    21e0:	683b      	ldr	r3, [r7, #0]
    21e2:	899b      	ldrh	r3, [r3, #12]
    21e4:	461a      	mov	r2, r3
    21e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    21e8:	4313      	orrs	r3, r2
    21ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
    21ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    21ee:	b29a      	uxth	r2, r3
    21f0:	687b      	ldr	r3, [r7, #4]
    21f2:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
    21f4:	f107 0308 	add.w	r3, r7, #8
    21f8:	4618      	mov	r0, r3
    21fa:	f7ff fa73 	bl	16e4 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
    21fe:	69fb      	ldr	r3, [r7, #28]
    2200:	4a2e      	ldr	r2, [pc, #184]	; (22bc <USART_Init+0x16c>)
    2202:	4293      	cmp	r3, r2
    2204:	d102      	bne.n	220c <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
    2206:	697b      	ldr	r3, [r7, #20]
    2208:	62bb      	str	r3, [r7, #40]	; 0x28
    220a:	e001      	b.n	2210 <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
    220c:	693b      	ldr	r3, [r7, #16]
    220e:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    2210:	687b      	ldr	r3, [r7, #4]
    2212:	899b      	ldrh	r3, [r3, #12]
    2214:	b29b      	uxth	r3, r3
    2216:	b21b      	sxth	r3, r3
    2218:	2b00      	cmp	r3, #0
    221a:	da0c      	bge.n	2236 <USART_Init+0xe6>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
    221c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    221e:	4613      	mov	r3, r2
    2220:	009b      	lsls	r3, r3, #2
    2222:	4413      	add	r3, r2
    2224:	009a      	lsls	r2, r3, #2
    2226:	441a      	add	r2, r3
    2228:	683b      	ldr	r3, [r7, #0]
    222a:	681b      	ldr	r3, [r3, #0]
    222c:	005b      	lsls	r3, r3, #1
    222e:	fbb2 f3f3 	udiv	r3, r2, r3
    2232:	627b      	str	r3, [r7, #36]	; 0x24
    2234:	e00b      	b.n	224e <USART_Init+0xfe>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
    2236:	6aba      	ldr	r2, [r7, #40]	; 0x28
    2238:	4613      	mov	r3, r2
    223a:	009b      	lsls	r3, r3, #2
    223c:	4413      	add	r3, r2
    223e:	009a      	lsls	r2, r3, #2
    2240:	441a      	add	r2, r3
    2242:	683b      	ldr	r3, [r7, #0]
    2244:	681b      	ldr	r3, [r3, #0]
    2246:	009b      	lsls	r3, r3, #2
    2248:	fbb2 f3f3 	udiv	r3, r2, r3
    224c:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
    224e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2250:	4a1b      	ldr	r2, [pc, #108]	; (22c0 <USART_Init+0x170>)
    2252:	fba2 2303 	umull	r2, r3, r2, r3
    2256:	095b      	lsrs	r3, r3, #5
    2258:	011b      	lsls	r3, r3, #4
    225a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
    225c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    225e:	091b      	lsrs	r3, r3, #4
    2260:	2264      	movs	r2, #100	; 0x64
    2262:	fb02 f303 	mul.w	r3, r2, r3
    2266:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    2268:	1ad3      	subs	r3, r2, r3
    226a:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    226c:	687b      	ldr	r3, [r7, #4]
    226e:	899b      	ldrh	r3, [r3, #12]
    2270:	b29b      	uxth	r3, r3
    2272:	b21b      	sxth	r3, r3
    2274:	2b00      	cmp	r3, #0
    2276:	da0c      	bge.n	2292 <USART_Init+0x142>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
    2278:	6a3b      	ldr	r3, [r7, #32]
    227a:	00db      	lsls	r3, r3, #3
    227c:	3332      	adds	r3, #50	; 0x32
    227e:	4a10      	ldr	r2, [pc, #64]	; (22c0 <USART_Init+0x170>)
    2280:	fba2 2303 	umull	r2, r3, r2, r3
    2284:	095b      	lsrs	r3, r3, #5
    2286:	f003 0307 	and.w	r3, r3, #7
    228a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    228c:	4313      	orrs	r3, r2
    228e:	62fb      	str	r3, [r7, #44]	; 0x2c
    2290:	e00b      	b.n	22aa <USART_Init+0x15a>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
    2292:	6a3b      	ldr	r3, [r7, #32]
    2294:	011b      	lsls	r3, r3, #4
    2296:	3332      	adds	r3, #50	; 0x32
    2298:	4a09      	ldr	r2, [pc, #36]	; (22c0 <USART_Init+0x170>)
    229a:	fba2 2303 	umull	r2, r3, r2, r3
    229e:	095b      	lsrs	r3, r3, #5
    22a0:	f003 030f 	and.w	r3, r3, #15
    22a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    22a6:	4313      	orrs	r3, r2
    22a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
    22aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    22ac:	b29a      	uxth	r2, r3
    22ae:	687b      	ldr	r3, [r7, #4]
    22b0:	811a      	strh	r2, [r3, #8]
}
    22b2:	bf00      	nop
    22b4:	3730      	adds	r7, #48	; 0x30
    22b6:	46bd      	mov	sp, r7
    22b8:	bd80      	pop	{r7, pc}
    22ba:	bf00      	nop
    22bc:	40013800 	.word	0x40013800
    22c0:	51eb851f 	.word	0x51eb851f

000022c4 <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
    22c4:	b480      	push	{r7}
    22c6:	b083      	sub	sp, #12
    22c8:	af00      	add	r7, sp, #0
    22ca:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
    22cc:	687b      	ldr	r3, [r7, #4]
    22ce:	f44f 5216 	mov.w	r2, #9600	; 0x2580
    22d2:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
    22d4:	687b      	ldr	r3, [r7, #4]
    22d6:	2200      	movs	r2, #0
    22d8:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
    22da:	687b      	ldr	r3, [r7, #4]
    22dc:	2200      	movs	r2, #0
    22de:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
    22e0:	687b      	ldr	r3, [r7, #4]
    22e2:	2200      	movs	r2, #0
    22e4:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    22e6:	687b      	ldr	r3, [r7, #4]
    22e8:	220c      	movs	r2, #12
    22ea:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
    22ec:	687b      	ldr	r3, [r7, #4]
    22ee:	2200      	movs	r2, #0
    22f0:	819a      	strh	r2, [r3, #12]
}
    22f2:	bf00      	nop
    22f4:	370c      	adds	r7, #12
    22f6:	46bd      	mov	sp, r7
    22f8:	bc80      	pop	{r7}
    22fa:	4770      	bx	lr

000022fc <USART_ClockInit>:
  *         USART peripheral.  
  * @note The Smart Card and Synchronous modes are not available for UART4 and UART5.
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    22fc:	b480      	push	{r7}
    22fe:	b085      	sub	sp, #20
    2300:	af00      	add	r7, sp, #0
    2302:	6078      	str	r0, [r7, #4]
    2304:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
    2306:	2300      	movs	r3, #0
    2308:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    230a:	687b      	ldr	r3, [r7, #4]
    230c:	8a1b      	ldrh	r3, [r3, #16]
    230e:	b29b      	uxth	r3, r3
    2310:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= CR2_CLOCK_CLEAR_Mask;
    2312:	68fa      	ldr	r2, [r7, #12]
    2314:	f24f 03ff 	movw	r3, #61695	; 0xf0ff
    2318:	4013      	ands	r3, r2
    231a:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
    231c:	683b      	ldr	r3, [r7, #0]
    231e:	881a      	ldrh	r2, [r3, #0]
    2320:	683b      	ldr	r3, [r7, #0]
    2322:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
    2324:	4313      	orrs	r3, r2
    2326:	b29a      	uxth	r2, r3
    2328:	683b      	ldr	r3, [r7, #0]
    232a:	889b      	ldrh	r3, [r3, #4]
    232c:	4313      	orrs	r3, r2
    232e:	b29a      	uxth	r2, r3
    2330:	683b      	ldr	r3, [r7, #0]
    2332:	88db      	ldrh	r3, [r3, #6]
    2334:	4313      	orrs	r3, r2
    2336:	b29b      	uxth	r3, r3
    2338:	461a      	mov	r2, r3
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
    233a:	68fb      	ldr	r3, [r7, #12]
    233c:	4313      	orrs	r3, r2
    233e:	60fb      	str	r3, [r7, #12]
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    2340:	68fb      	ldr	r3, [r7, #12]
    2342:	b29a      	uxth	r2, r3
    2344:	687b      	ldr	r3, [r7, #4]
    2346:	821a      	strh	r2, [r3, #16]
}
    2348:	bf00      	nop
    234a:	3714      	adds	r7, #20
    234c:	46bd      	mov	sp, r7
    234e:	bc80      	pop	{r7}
    2350:	4770      	bx	lr

00002352 <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    2352:	b480      	push	{r7}
    2354:	b083      	sub	sp, #12
    2356:	af00      	add	r7, sp, #0
    2358:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
    235a:	687b      	ldr	r3, [r7, #4]
    235c:	2200      	movs	r2, #0
    235e:	801a      	strh	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
    2360:	687b      	ldr	r3, [r7, #4]
    2362:	2200      	movs	r2, #0
    2364:	805a      	strh	r2, [r3, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
    2366:	687b      	ldr	r3, [r7, #4]
    2368:	2200      	movs	r2, #0
    236a:	809a      	strh	r2, [r3, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
    236c:	687b      	ldr	r3, [r7, #4]
    236e:	2200      	movs	r2, #0
    2370:	80da      	strh	r2, [r3, #6]
}
    2372:	bf00      	nop
    2374:	370c      	adds	r7, #12
    2376:	46bd      	mov	sp, r7
    2378:	bc80      	pop	{r7}
    237a:	4770      	bx	lr

0000237c <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    237c:	b480      	push	{r7}
    237e:	b083      	sub	sp, #12
    2380:	af00      	add	r7, sp, #0
    2382:	6078      	str	r0, [r7, #4]
    2384:	460b      	mov	r3, r1
    2386:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    2388:	78fb      	ldrb	r3, [r7, #3]
    238a:	2b00      	cmp	r3, #0
    238c:	d008      	beq.n	23a0 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
    238e:	687b      	ldr	r3, [r7, #4]
    2390:	899b      	ldrh	r3, [r3, #12]
    2392:	b29b      	uxth	r3, r3
    2394:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    2398:	b29a      	uxth	r2, r3
    239a:	687b      	ldr	r3, [r7, #4]
    239c:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
  }
}
    239e:	e007      	b.n	23b0 <USART_Cmd+0x34>
    USARTx->CR1 &= CR1_UE_Reset;
    23a0:	687b      	ldr	r3, [r7, #4]
    23a2:	899b      	ldrh	r3, [r3, #12]
    23a4:	b29b      	uxth	r3, r3
    23a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    23aa:	b29a      	uxth	r2, r3
    23ac:	687b      	ldr	r3, [r7, #4]
    23ae:	819a      	strh	r2, [r3, #12]
}
    23b0:	bf00      	nop
    23b2:	370c      	adds	r7, #12
    23b4:	46bd      	mov	sp, r7
    23b6:	bc80      	pop	{r7}
    23b8:	4770      	bx	lr

000023ba <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
    23ba:	b480      	push	{r7}
    23bc:	b087      	sub	sp, #28
    23be:	af00      	add	r7, sp, #0
    23c0:	6078      	str	r0, [r7, #4]
    23c2:	460b      	mov	r3, r1
    23c4:	807b      	strh	r3, [r7, #2]
    23c6:	4613      	mov	r3, r2
    23c8:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
    23ca:	2300      	movs	r3, #0
    23cc:	613b      	str	r3, [r7, #16]
    23ce:	2300      	movs	r3, #0
    23d0:	60fb      	str	r3, [r7, #12]
    23d2:	2300      	movs	r3, #0
    23d4:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
    23d6:	2300      	movs	r3, #0
    23d8:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  usartxbase = (uint32_t)USARTx;
    23da:	687b      	ldr	r3, [r7, #4]
    23dc:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    23de:	887b      	ldrh	r3, [r7, #2]
    23e0:	b2db      	uxtb	r3, r3
    23e2:	095b      	lsrs	r3, r3, #5
    23e4:	b2db      	uxtb	r3, r3
    23e6:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
    23e8:	887b      	ldrh	r3, [r7, #2]
    23ea:	f003 031f 	and.w	r3, r3, #31
    23ee:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
    23f0:	2201      	movs	r2, #1
    23f2:	68fb      	ldr	r3, [r7, #12]
    23f4:	fa02 f303 	lsl.w	r3, r2, r3
    23f8:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
    23fa:	693b      	ldr	r3, [r7, #16]
    23fc:	2b01      	cmp	r3, #1
    23fe:	d103      	bne.n	2408 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
    2400:	697b      	ldr	r3, [r7, #20]
    2402:	330c      	adds	r3, #12
    2404:	617b      	str	r3, [r7, #20]
    2406:	e009      	b.n	241c <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
    2408:	693b      	ldr	r3, [r7, #16]
    240a:	2b02      	cmp	r3, #2
    240c:	d103      	bne.n	2416 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
    240e:	697b      	ldr	r3, [r7, #20]
    2410:	3310      	adds	r3, #16
    2412:	617b      	str	r3, [r7, #20]
    2414:	e002      	b.n	241c <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
    2416:	697b      	ldr	r3, [r7, #20]
    2418:	3314      	adds	r3, #20
    241a:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
    241c:	787b      	ldrb	r3, [r7, #1]
    241e:	2b00      	cmp	r3, #0
    2420:	d006      	beq.n	2430 <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
    2422:	697b      	ldr	r3, [r7, #20]
    2424:	6819      	ldr	r1, [r3, #0]
    2426:	697b      	ldr	r3, [r7, #20]
    2428:	68ba      	ldr	r2, [r7, #8]
    242a:	430a      	orrs	r2, r1
    242c:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
    242e:	e006      	b.n	243e <USART_ITConfig+0x84>
    *(__IO uint32_t*)usartxbase &= ~itmask;
    2430:	697b      	ldr	r3, [r7, #20]
    2432:	6819      	ldr	r1, [r3, #0]
    2434:	68bb      	ldr	r3, [r7, #8]
    2436:	43da      	mvns	r2, r3
    2438:	697b      	ldr	r3, [r7, #20]
    243a:	400a      	ands	r2, r1
    243c:	601a      	str	r2, [r3, #0]
}
    243e:	bf00      	nop
    2440:	371c      	adds	r7, #28
    2442:	46bd      	mov	sp, r7
    2444:	bc80      	pop	{r7}
    2446:	4770      	bx	lr

00002448 <USART_DMACmd>:
  * @note The DMA mode is not available for UART5 except in the STM32
  *       High density value line devices(STM32F10X_HD_VL).  
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
    2448:	b480      	push	{r7}
    244a:	b083      	sub	sp, #12
    244c:	af00      	add	r7, sp, #0
    244e:	6078      	str	r0, [r7, #4]
    2450:	460b      	mov	r3, r1
    2452:	807b      	strh	r3, [r7, #2]
    2454:	4613      	mov	r3, r2
    2456:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  if (NewState != DISABLE)
    2458:	787b      	ldrb	r3, [r7, #1]
    245a:	2b00      	cmp	r3, #0
    245c:	d008      	beq.n	2470 <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
    245e:	687b      	ldr	r3, [r7, #4]
    2460:	8a9b      	ldrh	r3, [r3, #20]
    2462:	b29a      	uxth	r2, r3
    2464:	887b      	ldrh	r3, [r7, #2]
    2466:	4313      	orrs	r3, r2
    2468:	b29a      	uxth	r2, r3
    246a:	687b      	ldr	r3, [r7, #4]
    246c:	829a      	strh	r2, [r3, #20]
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
  }
}
    246e:	e009      	b.n	2484 <USART_DMACmd+0x3c>
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
    2470:	687b      	ldr	r3, [r7, #4]
    2472:	8a9b      	ldrh	r3, [r3, #20]
    2474:	b29a      	uxth	r2, r3
    2476:	887b      	ldrh	r3, [r7, #2]
    2478:	43db      	mvns	r3, r3
    247a:	b29b      	uxth	r3, r3
    247c:	4013      	ands	r3, r2
    247e:	b29a      	uxth	r2, r3
    2480:	687b      	ldr	r3, [r7, #4]
    2482:	829a      	strh	r2, [r3, #20]
}
    2484:	bf00      	nop
    2486:	370c      	adds	r7, #12
    2488:	46bd      	mov	sp, r7
    248a:	bc80      	pop	{r7}
    248c:	4770      	bx	lr

0000248e <USART_SetAddress>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
    248e:	b480      	push	{r7}
    2490:	b083      	sub	sp, #12
    2492:	af00      	add	r7, sp, #0
    2494:	6078      	str	r0, [r7, #4]
    2496:	460b      	mov	r3, r1
    2498:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= CR2_Address_Mask;
    249a:	687b      	ldr	r3, [r7, #4]
    249c:	8a1b      	ldrh	r3, [r3, #16]
    249e:	b29b      	uxth	r3, r3
    24a0:	f023 030f 	bic.w	r3, r3, #15
    24a4:	b29a      	uxth	r2, r3
    24a6:	687b      	ldr	r3, [r7, #4]
    24a8:	821a      	strh	r2, [r3, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
    24aa:	687b      	ldr	r3, [r7, #4]
    24ac:	8a1b      	ldrh	r3, [r3, #16]
    24ae:	b29a      	uxth	r2, r3
    24b0:	78fb      	ldrb	r3, [r7, #3]
    24b2:	b29b      	uxth	r3, r3
    24b4:	4313      	orrs	r3, r2
    24b6:	b29a      	uxth	r2, r3
    24b8:	687b      	ldr	r3, [r7, #4]
    24ba:	821a      	strh	r2, [r3, #16]
}
    24bc:	bf00      	nop
    24be:	370c      	adds	r7, #12
    24c0:	46bd      	mov	sp, r7
    24c2:	bc80      	pop	{r7}
    24c4:	4770      	bx	lr

000024c6 <USART_WakeUpConfig>:
  *     @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *     @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
    24c6:	b480      	push	{r7}
    24c8:	b083      	sub	sp, #12
    24ca:	af00      	add	r7, sp, #0
    24cc:	6078      	str	r0, [r7, #4]
    24ce:	460b      	mov	r3, r1
    24d0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= CR1_WAKE_Mask;
    24d2:	687b      	ldr	r3, [r7, #4]
    24d4:	899b      	ldrh	r3, [r3, #12]
    24d6:	b29b      	uxth	r3, r3
    24d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    24dc:	b29a      	uxth	r2, r3
    24de:	687b      	ldr	r3, [r7, #4]
    24e0:	819a      	strh	r2, [r3, #12]
  USARTx->CR1 |= USART_WakeUp;
    24e2:	687b      	ldr	r3, [r7, #4]
    24e4:	899b      	ldrh	r3, [r3, #12]
    24e6:	b29a      	uxth	r2, r3
    24e8:	887b      	ldrh	r3, [r7, #2]
    24ea:	4313      	orrs	r3, r2
    24ec:	b29a      	uxth	r2, r3
    24ee:	687b      	ldr	r3, [r7, #4]
    24f0:	819a      	strh	r2, [r3, #12]
}
    24f2:	bf00      	nop
    24f4:	370c      	adds	r7, #12
    24f6:	46bd      	mov	sp, r7
    24f8:	bc80      	pop	{r7}
    24fa:	4770      	bx	lr

000024fc <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    24fc:	b480      	push	{r7}
    24fe:	b083      	sub	sp, #12
    2500:	af00      	add	r7, sp, #0
    2502:	6078      	str	r0, [r7, #4]
    2504:	460b      	mov	r3, r1
    2506:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
    2508:	78fb      	ldrb	r3, [r7, #3]
    250a:	2b00      	cmp	r3, #0
    250c:	d008      	beq.n	2520 <USART_ReceiverWakeUpCmd+0x24>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= CR1_RWU_Set;
    250e:	687b      	ldr	r3, [r7, #4]
    2510:	899b      	ldrh	r3, [r3, #12]
    2512:	b29b      	uxth	r3, r3
    2514:	f043 0302 	orr.w	r3, r3, #2
    2518:	b29a      	uxth	r2, r3
    251a:	687b      	ldr	r3, [r7, #4]
    251c:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= CR1_RWU_Reset;
  }
}
    251e:	e007      	b.n	2530 <USART_ReceiverWakeUpCmd+0x34>
    USARTx->CR1 &= CR1_RWU_Reset;
    2520:	687b      	ldr	r3, [r7, #4]
    2522:	899b      	ldrh	r3, [r3, #12]
    2524:	b29b      	uxth	r3, r3
    2526:	f023 0302 	bic.w	r3, r3, #2
    252a:	b29a      	uxth	r2, r3
    252c:	687b      	ldr	r3, [r7, #4]
    252e:	819a      	strh	r2, [r3, #12]
}
    2530:	bf00      	nop
    2532:	370c      	adds	r7, #12
    2534:	46bd      	mov	sp, r7
    2536:	bc80      	pop	{r7}
    2538:	4770      	bx	lr

0000253a <USART_LINBreakDetectLengthConfig>:
  *     @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *     @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
    253a:	b480      	push	{r7}
    253c:	b083      	sub	sp, #12
    253e:	af00      	add	r7, sp, #0
    2540:	6078      	str	r0, [r7, #4]
    2542:	460b      	mov	r3, r1
    2544:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= CR2_LBDL_Mask;
    2546:	687b      	ldr	r3, [r7, #4]
    2548:	8a1b      	ldrh	r3, [r3, #16]
    254a:	b29b      	uxth	r3, r3
    254c:	f023 0320 	bic.w	r3, r3, #32
    2550:	b29a      	uxth	r2, r3
    2552:	687b      	ldr	r3, [r7, #4]
    2554:	821a      	strh	r2, [r3, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
    2556:	687b      	ldr	r3, [r7, #4]
    2558:	8a1b      	ldrh	r3, [r3, #16]
    255a:	b29a      	uxth	r2, r3
    255c:	887b      	ldrh	r3, [r7, #2]
    255e:	4313      	orrs	r3, r2
    2560:	b29a      	uxth	r2, r3
    2562:	687b      	ldr	r3, [r7, #4]
    2564:	821a      	strh	r2, [r3, #16]
}
    2566:	bf00      	nop
    2568:	370c      	adds	r7, #12
    256a:	46bd      	mov	sp, r7
    256c:	bc80      	pop	{r7}
    256e:	4770      	bx	lr

00002570 <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    2570:	b480      	push	{r7}
    2572:	b083      	sub	sp, #12
    2574:	af00      	add	r7, sp, #0
    2576:	6078      	str	r0, [r7, #4]
    2578:	460b      	mov	r3, r1
    257a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    257c:	78fb      	ldrb	r3, [r7, #3]
    257e:	2b00      	cmp	r3, #0
    2580:	d008      	beq.n	2594 <USART_LINCmd+0x24>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= CR2_LINEN_Set;
    2582:	687b      	ldr	r3, [r7, #4]
    2584:	8a1b      	ldrh	r3, [r3, #16]
    2586:	b29b      	uxth	r3, r3
    2588:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    258c:	b29a      	uxth	r2, r3
    258e:	687b      	ldr	r3, [r7, #4]
    2590:	821a      	strh	r2, [r3, #16]
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= CR2_LINEN_Reset;
  }
}
    2592:	e007      	b.n	25a4 <USART_LINCmd+0x34>
    USARTx->CR2 &= CR2_LINEN_Reset;
    2594:	687b      	ldr	r3, [r7, #4]
    2596:	8a1b      	ldrh	r3, [r3, #16]
    2598:	b29b      	uxth	r3, r3
    259a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    259e:	b29a      	uxth	r2, r3
    25a0:	687b      	ldr	r3, [r7, #4]
    25a2:	821a      	strh	r2, [r3, #16]
}
    25a4:	bf00      	nop
    25a6:	370c      	adds	r7, #12
    25a8:	46bd      	mov	sp, r7
    25aa:	bc80      	pop	{r7}
    25ac:	4770      	bx	lr

000025ae <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
    25ae:	b480      	push	{r7}
    25b0:	b083      	sub	sp, #12
    25b2:	af00      	add	r7, sp, #0
    25b4:	6078      	str	r0, [r7, #4]
    25b6:	460b      	mov	r3, r1
    25b8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
    25ba:	887b      	ldrh	r3, [r7, #2]
    25bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
    25c0:	b29a      	uxth	r2, r3
    25c2:	687b      	ldr	r3, [r7, #4]
    25c4:	809a      	strh	r2, [r3, #4]
}
    25c6:	bf00      	nop
    25c8:	370c      	adds	r7, #12
    25ca:	46bd      	mov	sp, r7
    25cc:	bc80      	pop	{r7}
    25ce:	4770      	bx	lr

000025d0 <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
    25d0:	b480      	push	{r7}
    25d2:	b083      	sub	sp, #12
    25d4:	af00      	add	r7, sp, #0
    25d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
    25d8:	687b      	ldr	r3, [r7, #4]
    25da:	889b      	ldrh	r3, [r3, #4]
    25dc:	b29b      	uxth	r3, r3
    25de:	f3c3 0308 	ubfx	r3, r3, #0, #9
    25e2:	b29b      	uxth	r3, r3
}
    25e4:	4618      	mov	r0, r3
    25e6:	370c      	adds	r7, #12
    25e8:	46bd      	mov	sp, r7
    25ea:	bc80      	pop	{r7}
    25ec:	4770      	bx	lr

000025ee <USART_SendBreak>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
    25ee:	b480      	push	{r7}
    25f0:	b083      	sub	sp, #12
    25f2:	af00      	add	r7, sp, #0
    25f4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= CR1_SBK_Set;
    25f6:	687b      	ldr	r3, [r7, #4]
    25f8:	899b      	ldrh	r3, [r3, #12]
    25fa:	b29b      	uxth	r3, r3
    25fc:	f043 0301 	orr.w	r3, r3, #1
    2600:	b29a      	uxth	r2, r3
    2602:	687b      	ldr	r3, [r7, #4]
    2604:	819a      	strh	r2, [r3, #12]
}
    2606:	bf00      	nop
    2608:	370c      	adds	r7, #12
    260a:	46bd      	mov	sp, r7
    260c:	bc80      	pop	{r7}
    260e:	4770      	bx	lr

00002610 <USART_SetGuardTime>:
  * @param  USART_GuardTime: specifies the guard time.
  * @note The guard time bits are not available for UART4 and UART5.   
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{    
    2610:	b480      	push	{r7}
    2612:	b083      	sub	sp, #12
    2614:	af00      	add	r7, sp, #0
    2616:	6078      	str	r0, [r7, #4]
    2618:	460b      	mov	r3, r1
    261a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= GTPR_LSB_Mask;
    261c:	687b      	ldr	r3, [r7, #4]
    261e:	8b1b      	ldrh	r3, [r3, #24]
    2620:	b29b      	uxth	r3, r3
    2622:	b2db      	uxtb	r3, r3
    2624:	b29a      	uxth	r2, r3
    2626:	687b      	ldr	r3, [r7, #4]
    2628:	831a      	strh	r2, [r3, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
    262a:	687b      	ldr	r3, [r7, #4]
    262c:	8b1b      	ldrh	r3, [r3, #24]
    262e:	b29a      	uxth	r2, r3
    2630:	78fb      	ldrb	r3, [r7, #3]
    2632:	b29b      	uxth	r3, r3
    2634:	021b      	lsls	r3, r3, #8
    2636:	b29b      	uxth	r3, r3
    2638:	4313      	orrs	r3, r2
    263a:	b29a      	uxth	r2, r3
    263c:	687b      	ldr	r3, [r7, #4]
    263e:	831a      	strh	r2, [r3, #24]
}
    2640:	bf00      	nop
    2642:	370c      	adds	r7, #12
    2644:	46bd      	mov	sp, r7
    2646:	bc80      	pop	{r7}
    2648:	4770      	bx	lr

0000264a <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock.  
  * @note   The function is used for IrDA mode with UART4 and UART5.
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{ 
    264a:	b480      	push	{r7}
    264c:	b083      	sub	sp, #12
    264e:	af00      	add	r7, sp, #0
    2650:	6078      	str	r0, [r7, #4]
    2652:	460b      	mov	r3, r1
    2654:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= GTPR_MSB_Mask;
    2656:	687b      	ldr	r3, [r7, #4]
    2658:	8b1b      	ldrh	r3, [r3, #24]
    265a:	b29b      	uxth	r3, r3
    265c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    2660:	b29a      	uxth	r2, r3
    2662:	687b      	ldr	r3, [r7, #4]
    2664:	831a      	strh	r2, [r3, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
    2666:	687b      	ldr	r3, [r7, #4]
    2668:	8b1b      	ldrh	r3, [r3, #24]
    266a:	b29a      	uxth	r2, r3
    266c:	78fb      	ldrb	r3, [r7, #3]
    266e:	b29b      	uxth	r3, r3
    2670:	4313      	orrs	r3, r2
    2672:	b29a      	uxth	r2, r3
    2674:	687b      	ldr	r3, [r7, #4]
    2676:	831a      	strh	r2, [r3, #24]
}
    2678:	bf00      	nop
    267a:	370c      	adds	r7, #12
    267c:	46bd      	mov	sp, r7
    267e:	bc80      	pop	{r7}
    2680:	4770      	bx	lr

00002682 <USART_SmartCardCmd>:
  *   This parameter can be: ENABLE or DISABLE.     
  * @note The Smart Card mode is not available for UART4 and UART5. 
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    2682:	b480      	push	{r7}
    2684:	b083      	sub	sp, #12
    2686:	af00      	add	r7, sp, #0
    2688:	6078      	str	r0, [r7, #4]
    268a:	460b      	mov	r3, r1
    268c:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    268e:	78fb      	ldrb	r3, [r7, #3]
    2690:	2b00      	cmp	r3, #0
    2692:	d008      	beq.n	26a6 <USART_SmartCardCmd+0x24>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= CR3_SCEN_Set;
    2694:	687b      	ldr	r3, [r7, #4]
    2696:	8a9b      	ldrh	r3, [r3, #20]
    2698:	b29b      	uxth	r3, r3
    269a:	f043 0320 	orr.w	r3, r3, #32
    269e:	b29a      	uxth	r2, r3
    26a0:	687b      	ldr	r3, [r7, #4]
    26a2:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= CR3_SCEN_Reset;
  }
}
    26a4:	e007      	b.n	26b6 <USART_SmartCardCmd+0x34>
    USARTx->CR3 &= CR3_SCEN_Reset;
    26a6:	687b      	ldr	r3, [r7, #4]
    26a8:	8a9b      	ldrh	r3, [r3, #20]
    26aa:	b29b      	uxth	r3, r3
    26ac:	f023 0320 	bic.w	r3, r3, #32
    26b0:	b29a      	uxth	r2, r3
    26b2:	687b      	ldr	r3, [r7, #4]
    26b4:	829a      	strh	r2, [r3, #20]
}
    26b6:	bf00      	nop
    26b8:	370c      	adds	r7, #12
    26ba:	46bd      	mov	sp, r7
    26bc:	bc80      	pop	{r7}
    26be:	4770      	bx	lr

000026c0 <USART_SmartCardNACKCmd>:
  *   This parameter can be: ENABLE or DISABLE.  
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    26c0:	b480      	push	{r7}
    26c2:	b083      	sub	sp, #12
    26c4:	af00      	add	r7, sp, #0
    26c6:	6078      	str	r0, [r7, #4]
    26c8:	460b      	mov	r3, r1
    26ca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    26cc:	78fb      	ldrb	r3, [r7, #3]
    26ce:	2b00      	cmp	r3, #0
    26d0:	d008      	beq.n	26e4 <USART_SmartCardNACKCmd+0x24>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= CR3_NACK_Set;
    26d2:	687b      	ldr	r3, [r7, #4]
    26d4:	8a9b      	ldrh	r3, [r3, #20]
    26d6:	b29b      	uxth	r3, r3
    26d8:	f043 0310 	orr.w	r3, r3, #16
    26dc:	b29a      	uxth	r2, r3
    26de:	687b      	ldr	r3, [r7, #4]
    26e0:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= CR3_NACK_Reset;
  }
}
    26e2:	e007      	b.n	26f4 <USART_SmartCardNACKCmd+0x34>
    USARTx->CR3 &= CR3_NACK_Reset;
    26e4:	687b      	ldr	r3, [r7, #4]
    26e6:	8a9b      	ldrh	r3, [r3, #20]
    26e8:	b29b      	uxth	r3, r3
    26ea:	f023 0310 	bic.w	r3, r3, #16
    26ee:	b29a      	uxth	r2, r3
    26f0:	687b      	ldr	r3, [r7, #4]
    26f2:	829a      	strh	r2, [r3, #20]
}
    26f4:	bf00      	nop
    26f6:	370c      	adds	r7, #12
    26f8:	46bd      	mov	sp, r7
    26fa:	bc80      	pop	{r7}
    26fc:	4770      	bx	lr

000026fe <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    26fe:	b480      	push	{r7}
    2700:	b083      	sub	sp, #12
    2702:	af00      	add	r7, sp, #0
    2704:	6078      	str	r0, [r7, #4]
    2706:	460b      	mov	r3, r1
    2708:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    270a:	78fb      	ldrb	r3, [r7, #3]
    270c:	2b00      	cmp	r3, #0
    270e:	d008      	beq.n	2722 <USART_HalfDuplexCmd+0x24>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= CR3_HDSEL_Set;
    2710:	687b      	ldr	r3, [r7, #4]
    2712:	8a9b      	ldrh	r3, [r3, #20]
    2714:	b29b      	uxth	r3, r3
    2716:	f043 0308 	orr.w	r3, r3, #8
    271a:	b29a      	uxth	r2, r3
    271c:	687b      	ldr	r3, [r7, #4]
    271e:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= CR3_HDSEL_Reset;
  }
}
    2720:	e007      	b.n	2732 <USART_HalfDuplexCmd+0x34>
    USARTx->CR3 &= CR3_HDSEL_Reset;
    2722:	687b      	ldr	r3, [r7, #4]
    2724:	8a9b      	ldrh	r3, [r3, #20]
    2726:	b29b      	uxth	r3, r3
    2728:	f023 0308 	bic.w	r3, r3, #8
    272c:	b29a      	uxth	r2, r3
    272e:	687b      	ldr	r3, [r7, #4]
    2730:	829a      	strh	r2, [r3, #20]
}
    2732:	bf00      	nop
    2734:	370c      	adds	r7, #12
    2736:	46bd      	mov	sp, r7
    2738:	bc80      	pop	{r7}
    273a:	4770      	bx	lr

0000273c <USART_OverSampling8Cmd>:
  *     This function has to be called before calling USART_Init()
  *     function in order to have correct baudrate Divider value.   
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    273c:	b480      	push	{r7}
    273e:	b083      	sub	sp, #12
    2740:	af00      	add	r7, sp, #0
    2742:	6078      	str	r0, [r7, #4]
    2744:	460b      	mov	r3, r1
    2746:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    2748:	78fb      	ldrb	r3, [r7, #3]
    274a:	2b00      	cmp	r3, #0
    274c:	d00a      	beq.n	2764 <USART_OverSampling8Cmd+0x28>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= CR1_OVER8_Set;
    274e:	687b      	ldr	r3, [r7, #4]
    2750:	899b      	ldrh	r3, [r3, #12]
    2752:	b29b      	uxth	r3, r3
    2754:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    2758:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    275c:	b29a      	uxth	r2, r3
    275e:	687b      	ldr	r3, [r7, #4]
    2760:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= CR1_OVER8_Reset;
  }
}
    2762:	e007      	b.n	2774 <USART_OverSampling8Cmd+0x38>
    USARTx->CR1 &= CR1_OVER8_Reset;
    2764:	687b      	ldr	r3, [r7, #4]
    2766:	899b      	ldrh	r3, [r3, #12]
    2768:	b29b      	uxth	r3, r3
    276a:	f3c3 030e 	ubfx	r3, r3, #0, #15
    276e:	b29a      	uxth	r2, r3
    2770:	687b      	ldr	r3, [r7, #4]
    2772:	819a      	strh	r2, [r3, #12]
}
    2774:	bf00      	nop
    2776:	370c      	adds	r7, #12
    2778:	46bd      	mov	sp, r7
    277a:	bc80      	pop	{r7}
    277c:	4770      	bx	lr

0000277e <USART_OneBitMethodCmd>:
  * @param  NewState: new state of the USART one bit sampling method.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    277e:	b480      	push	{r7}
    2780:	b083      	sub	sp, #12
    2782:	af00      	add	r7, sp, #0
    2784:	6078      	str	r0, [r7, #4]
    2786:	460b      	mov	r3, r1
    2788:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    278a:	78fb      	ldrb	r3, [r7, #3]
    278c:	2b00      	cmp	r3, #0
    278e:	d008      	beq.n	27a2 <USART_OneBitMethodCmd+0x24>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= CR3_ONEBITE_Set;
    2790:	687b      	ldr	r3, [r7, #4]
    2792:	8a9b      	ldrh	r3, [r3, #20]
    2794:	b29b      	uxth	r3, r3
    2796:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    279a:	b29a      	uxth	r2, r3
    279c:	687b      	ldr	r3, [r7, #4]
    279e:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable tthe one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= CR3_ONEBITE_Reset;
  }
}
    27a0:	e007      	b.n	27b2 <USART_OneBitMethodCmd+0x34>
    USARTx->CR3 &= CR3_ONEBITE_Reset;
    27a2:	687b      	ldr	r3, [r7, #4]
    27a4:	8a9b      	ldrh	r3, [r3, #20]
    27a6:	b29b      	uxth	r3, r3
    27a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    27ac:	b29a      	uxth	r2, r3
    27ae:	687b      	ldr	r3, [r7, #4]
    27b0:	829a      	strh	r2, [r3, #20]
}
    27b2:	bf00      	nop
    27b4:	370c      	adds	r7, #12
    27b6:	46bd      	mov	sp, r7
    27b8:	bc80      	pop	{r7}
    27ba:	4770      	bx	lr

000027bc <USART_IrDAConfig>:
  *     @arg USART_IrDAMode_LowPower
  *     @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
    27bc:	b480      	push	{r7}
    27be:	b083      	sub	sp, #12
    27c0:	af00      	add	r7, sp, #0
    27c2:	6078      	str	r0, [r7, #4]
    27c4:	460b      	mov	r3, r1
    27c6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= CR3_IRLP_Mask;
    27c8:	687b      	ldr	r3, [r7, #4]
    27ca:	8a9b      	ldrh	r3, [r3, #20]
    27cc:	b29b      	uxth	r3, r3
    27ce:	f023 0304 	bic.w	r3, r3, #4
    27d2:	b29a      	uxth	r2, r3
    27d4:	687b      	ldr	r3, [r7, #4]
    27d6:	829a      	strh	r2, [r3, #20]
  USARTx->CR3 |= USART_IrDAMode;
    27d8:	687b      	ldr	r3, [r7, #4]
    27da:	8a9b      	ldrh	r3, [r3, #20]
    27dc:	b29a      	uxth	r2, r3
    27de:	887b      	ldrh	r3, [r7, #2]
    27e0:	4313      	orrs	r3, r2
    27e2:	b29a      	uxth	r2, r3
    27e4:	687b      	ldr	r3, [r7, #4]
    27e6:	829a      	strh	r2, [r3, #20]
}
    27e8:	bf00      	nop
    27ea:	370c      	adds	r7, #12
    27ec:	46bd      	mov	sp, r7
    27ee:	bc80      	pop	{r7}
    27f0:	4770      	bx	lr

000027f2 <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    27f2:	b480      	push	{r7}
    27f4:	b083      	sub	sp, #12
    27f6:	af00      	add	r7, sp, #0
    27f8:	6078      	str	r0, [r7, #4]
    27fa:	460b      	mov	r3, r1
    27fc:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
    27fe:	78fb      	ldrb	r3, [r7, #3]
    2800:	2b00      	cmp	r3, #0
    2802:	d008      	beq.n	2816 <USART_IrDACmd+0x24>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= CR3_IREN_Set;
    2804:	687b      	ldr	r3, [r7, #4]
    2806:	8a9b      	ldrh	r3, [r3, #20]
    2808:	b29b      	uxth	r3, r3
    280a:	f043 0302 	orr.w	r3, r3, #2
    280e:	b29a      	uxth	r2, r3
    2810:	687b      	ldr	r3, [r7, #4]
    2812:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= CR3_IREN_Reset;
  }
}
    2814:	e007      	b.n	2826 <USART_IrDACmd+0x34>
    USARTx->CR3 &= CR3_IREN_Reset;
    2816:	687b      	ldr	r3, [r7, #4]
    2818:	8a9b      	ldrh	r3, [r3, #20]
    281a:	b29b      	uxth	r3, r3
    281c:	f023 0302 	bic.w	r3, r3, #2
    2820:	b29a      	uxth	r2, r3
    2822:	687b      	ldr	r3, [r7, #4]
    2824:	829a      	strh	r2, [r3, #20]
}
    2826:	bf00      	nop
    2828:	370c      	adds	r7, #12
    282a:	46bd      	mov	sp, r7
    282c:	bc80      	pop	{r7}
    282e:	4770      	bx	lr

00002830 <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    2830:	b480      	push	{r7}
    2832:	b085      	sub	sp, #20
    2834:	af00      	add	r7, sp, #0
    2836:	6078      	str	r0, [r7, #4]
    2838:	460b      	mov	r3, r1
    283a:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
    283c:	2300      	movs	r3, #0
    283e:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }  
  
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
    2840:	687b      	ldr	r3, [r7, #4]
    2842:	881b      	ldrh	r3, [r3, #0]
    2844:	b29a      	uxth	r2, r3
    2846:	887b      	ldrh	r3, [r7, #2]
    2848:	4013      	ands	r3, r2
    284a:	b29b      	uxth	r3, r3
    284c:	2b00      	cmp	r3, #0
    284e:	d002      	beq.n	2856 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
    2850:	2301      	movs	r3, #1
    2852:	73fb      	strb	r3, [r7, #15]
    2854:	e001      	b.n	285a <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
    2856:	2300      	movs	r3, #0
    2858:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    285a:	7bfb      	ldrb	r3, [r7, #15]
}
    285c:	4618      	mov	r0, r3
    285e:	3714      	adds	r7, #20
    2860:	46bd      	mov	sp, r7
    2862:	bc80      	pop	{r7}
    2864:	4770      	bx	lr

00002866 <USART_ClearFlag>:
  *   - TXE flag is cleared only by a write to the USART_DR register 
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    2866:	b480      	push	{r7}
    2868:	b083      	sub	sp, #12
    286a:	af00      	add	r7, sp, #0
    286c:	6078      	str	r0, [r7, #4]
    286e:	460b      	mov	r3, r1
    2870:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
   
  USARTx->SR = (uint16_t)~USART_FLAG;
    2872:	887b      	ldrh	r3, [r7, #2]
    2874:	43db      	mvns	r3, r3
    2876:	b29a      	uxth	r2, r3
    2878:	687b      	ldr	r3, [r7, #4]
    287a:	801a      	strh	r2, [r3, #0]
}
    287c:	bf00      	nop
    287e:	370c      	adds	r7, #12
    2880:	46bd      	mov	sp, r7
    2882:	bc80      	pop	{r7}
    2884:	4770      	bx	lr

00002886 <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    2886:	b480      	push	{r7}
    2888:	b087      	sub	sp, #28
    288a:	af00      	add	r7, sp, #0
    288c:	6078      	str	r0, [r7, #4]
    288e:	460b      	mov	r3, r1
    2890:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
    2892:	2300      	movs	r3, #0
    2894:	60fb      	str	r3, [r7, #12]
    2896:	2300      	movs	r3, #0
    2898:	617b      	str	r3, [r7, #20]
    289a:	2300      	movs	r3, #0
    289c:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
    289e:	2300      	movs	r3, #0
    28a0:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    28a2:	887b      	ldrh	r3, [r7, #2]
    28a4:	b2db      	uxtb	r3, r3
    28a6:	095b      	lsrs	r3, r3, #5
    28a8:	b2db      	uxtb	r3, r3
    28aa:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
    28ac:	887b      	ldrh	r3, [r7, #2]
    28ae:	f003 031f 	and.w	r3, r3, #31
    28b2:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
    28b4:	2201      	movs	r2, #1
    28b6:	697b      	ldr	r3, [r7, #20]
    28b8:	fa02 f303 	lsl.w	r3, r2, r3
    28bc:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
    28be:	68bb      	ldr	r3, [r7, #8]
    28c0:	2b01      	cmp	r3, #1
    28c2:	d107      	bne.n	28d4 <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
    28c4:	687b      	ldr	r3, [r7, #4]
    28c6:	899b      	ldrh	r3, [r3, #12]
    28c8:	b29b      	uxth	r3, r3
    28ca:	461a      	mov	r2, r3
    28cc:	697b      	ldr	r3, [r7, #20]
    28ce:	4013      	ands	r3, r2
    28d0:	617b      	str	r3, [r7, #20]
    28d2:	e011      	b.n	28f8 <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
    28d4:	68bb      	ldr	r3, [r7, #8]
    28d6:	2b02      	cmp	r3, #2
    28d8:	d107      	bne.n	28ea <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
    28da:	687b      	ldr	r3, [r7, #4]
    28dc:	8a1b      	ldrh	r3, [r3, #16]
    28de:	b29b      	uxth	r3, r3
    28e0:	461a      	mov	r2, r3
    28e2:	697b      	ldr	r3, [r7, #20]
    28e4:	4013      	ands	r3, r2
    28e6:	617b      	str	r3, [r7, #20]
    28e8:	e006      	b.n	28f8 <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
    28ea:	687b      	ldr	r3, [r7, #4]
    28ec:	8a9b      	ldrh	r3, [r3, #20]
    28ee:	b29b      	uxth	r3, r3
    28f0:	461a      	mov	r2, r3
    28f2:	697b      	ldr	r3, [r7, #20]
    28f4:	4013      	ands	r3, r2
    28f6:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
    28f8:	887b      	ldrh	r3, [r7, #2]
    28fa:	0a1b      	lsrs	r3, r3, #8
    28fc:	b29b      	uxth	r3, r3
    28fe:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
    2900:	2201      	movs	r2, #1
    2902:	68fb      	ldr	r3, [r7, #12]
    2904:	fa02 f303 	lsl.w	r3, r2, r3
    2908:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
    290a:	687b      	ldr	r3, [r7, #4]
    290c:	881b      	ldrh	r3, [r3, #0]
    290e:	b29b      	uxth	r3, r3
    2910:	461a      	mov	r2, r3
    2912:	68fb      	ldr	r3, [r7, #12]
    2914:	4013      	ands	r3, r2
    2916:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
    2918:	697b      	ldr	r3, [r7, #20]
    291a:	2b00      	cmp	r3, #0
    291c:	d005      	beq.n	292a <USART_GetITStatus+0xa4>
    291e:	68fb      	ldr	r3, [r7, #12]
    2920:	2b00      	cmp	r3, #0
    2922:	d002      	beq.n	292a <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
    2924:	2301      	movs	r3, #1
    2926:	74fb      	strb	r3, [r7, #19]
    2928:	e001      	b.n	292e <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
    292a:	2300      	movs	r3, #0
    292c:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
    292e:	7cfb      	ldrb	r3, [r7, #19]
}
    2930:	4618      	mov	r0, r3
    2932:	371c      	adds	r7, #28
    2934:	46bd      	mov	sp, r7
    2936:	bc80      	pop	{r7}
    2938:	4770      	bx	lr

0000293a <USART_ClearITPendingBit>:
  *   - TXE pending bit is cleared only by a write to the USART_DR register 
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    293a:	b480      	push	{r7}
    293c:	b085      	sub	sp, #20
    293e:	af00      	add	r7, sp, #0
    2940:	6078      	str	r0, [r7, #4]
    2942:	460b      	mov	r3, r1
    2944:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
    2946:	2300      	movs	r3, #0
    2948:	81fb      	strh	r3, [r7, #14]
    294a:	2300      	movs	r3, #0
    294c:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  bitpos = USART_IT >> 0x08;
    294e:	887b      	ldrh	r3, [r7, #2]
    2950:	0a1b      	lsrs	r3, r3, #8
    2952:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
    2954:	89fb      	ldrh	r3, [r7, #14]
    2956:	2201      	movs	r2, #1
    2958:	fa02 f303 	lsl.w	r3, r2, r3
    295c:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
    295e:	89bb      	ldrh	r3, [r7, #12]
    2960:	43db      	mvns	r3, r3
    2962:	b29a      	uxth	r2, r3
    2964:	687b      	ldr	r3, [r7, #4]
    2966:	801a      	strh	r2, [r3, #0]
}
    2968:	bf00      	nop
    296a:	3714      	adds	r7, #20
    296c:	46bd      	mov	sp, r7
    296e:	bc80      	pop	{r7}
    2970:	4770      	bx	lr
    2972:	bf00      	nop

00002974 <EXTI_DeInit>:
  * @brief  Deinitializes the EXTI peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
    2974:	b480      	push	{r7}
    2976:	af00      	add	r7, sp, #0
  EXTI->IMR = 0x00000000;
    2978:	4b09      	ldr	r3, [pc, #36]	; (29a0 <EXTI_DeInit+0x2c>)
    297a:	2200      	movs	r2, #0
    297c:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
    297e:	4b08      	ldr	r3, [pc, #32]	; (29a0 <EXTI_DeInit+0x2c>)
    2980:	2200      	movs	r2, #0
    2982:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000; 
    2984:	4b06      	ldr	r3, [pc, #24]	; (29a0 <EXTI_DeInit+0x2c>)
    2986:	2200      	movs	r2, #0
    2988:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000; 
    298a:	4b05      	ldr	r3, [pc, #20]	; (29a0 <EXTI_DeInit+0x2c>)
    298c:	2200      	movs	r2, #0
    298e:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x000FFFFF;
    2990:	4b03      	ldr	r3, [pc, #12]	; (29a0 <EXTI_DeInit+0x2c>)
    2992:	4a04      	ldr	r2, [pc, #16]	; (29a4 <EXTI_DeInit+0x30>)
    2994:	615a      	str	r2, [r3, #20]
}
    2996:	bf00      	nop
    2998:	46bd      	mov	sp, r7
    299a:	bc80      	pop	{r7}
    299c:	4770      	bx	lr
    299e:	bf00      	nop
    29a0:	40010400 	.word	0x40010400
    29a4:	000fffff 	.word	0x000fffff

000029a8 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
    29a8:	b480      	push	{r7}
    29aa:	b085      	sub	sp, #20
    29ac:	af00      	add	r7, sp, #0
    29ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
    29b0:	2300      	movs	r3, #0
    29b2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
    29b4:	4b34      	ldr	r3, [pc, #208]	; (2a88 <EXTI_Init+0xe0>)
    29b6:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
    29b8:	687b      	ldr	r3, [r7, #4]
    29ba:	799b      	ldrb	r3, [r3, #6]
    29bc:	2b00      	cmp	r3, #0
    29be:	d04f      	beq.n	2a60 <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
    29c0:	4b31      	ldr	r3, [pc, #196]	; (2a88 <EXTI_Init+0xe0>)
    29c2:	681a      	ldr	r2, [r3, #0]
    29c4:	687b      	ldr	r3, [r7, #4]
    29c6:	681b      	ldr	r3, [r3, #0]
    29c8:	43db      	mvns	r3, r3
    29ca:	492f      	ldr	r1, [pc, #188]	; (2a88 <EXTI_Init+0xe0>)
    29cc:	4013      	ands	r3, r2
    29ce:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
    29d0:	4b2d      	ldr	r3, [pc, #180]	; (2a88 <EXTI_Init+0xe0>)
    29d2:	685a      	ldr	r2, [r3, #4]
    29d4:	687b      	ldr	r3, [r7, #4]
    29d6:	681b      	ldr	r3, [r3, #0]
    29d8:	43db      	mvns	r3, r3
    29da:	492b      	ldr	r1, [pc, #172]	; (2a88 <EXTI_Init+0xe0>)
    29dc:	4013      	ands	r3, r2
    29de:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
    29e0:	687b      	ldr	r3, [r7, #4]
    29e2:	791b      	ldrb	r3, [r3, #4]
    29e4:	461a      	mov	r2, r3
    29e6:	68fb      	ldr	r3, [r7, #12]
    29e8:	4413      	add	r3, r2
    29ea:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    29ec:	68fb      	ldr	r3, [r7, #12]
    29ee:	6819      	ldr	r1, [r3, #0]
    29f0:	687b      	ldr	r3, [r7, #4]
    29f2:	681a      	ldr	r2, [r3, #0]
    29f4:	68fb      	ldr	r3, [r7, #12]
    29f6:	430a      	orrs	r2, r1
    29f8:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
    29fa:	4b23      	ldr	r3, [pc, #140]	; (2a88 <EXTI_Init+0xe0>)
    29fc:	689a      	ldr	r2, [r3, #8]
    29fe:	687b      	ldr	r3, [r7, #4]
    2a00:	681b      	ldr	r3, [r3, #0]
    2a02:	43db      	mvns	r3, r3
    2a04:	4920      	ldr	r1, [pc, #128]	; (2a88 <EXTI_Init+0xe0>)
    2a06:	4013      	ands	r3, r2
    2a08:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
    2a0a:	4b1f      	ldr	r3, [pc, #124]	; (2a88 <EXTI_Init+0xe0>)
    2a0c:	68da      	ldr	r2, [r3, #12]
    2a0e:	687b      	ldr	r3, [r7, #4]
    2a10:	681b      	ldr	r3, [r3, #0]
    2a12:	43db      	mvns	r3, r3
    2a14:	491c      	ldr	r1, [pc, #112]	; (2a88 <EXTI_Init+0xe0>)
    2a16:	4013      	ands	r3, r2
    2a18:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
    2a1a:	687b      	ldr	r3, [r7, #4]
    2a1c:	795b      	ldrb	r3, [r3, #5]
    2a1e:	2b10      	cmp	r3, #16
    2a20:	d10e      	bne.n	2a40 <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
    2a22:	4b19      	ldr	r3, [pc, #100]	; (2a88 <EXTI_Init+0xe0>)
    2a24:	689a      	ldr	r2, [r3, #8]
    2a26:	687b      	ldr	r3, [r7, #4]
    2a28:	681b      	ldr	r3, [r3, #0]
    2a2a:	4917      	ldr	r1, [pc, #92]	; (2a88 <EXTI_Init+0xe0>)
    2a2c:	4313      	orrs	r3, r2
    2a2e:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    2a30:	4b15      	ldr	r3, [pc, #84]	; (2a88 <EXTI_Init+0xe0>)
    2a32:	68da      	ldr	r2, [r3, #12]
    2a34:	687b      	ldr	r3, [r7, #4]
    2a36:	681b      	ldr	r3, [r3, #0]
    2a38:	4913      	ldr	r1, [pc, #76]	; (2a88 <EXTI_Init+0xe0>)
    2a3a:	4313      	orrs	r3, r2
    2a3c:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
    2a3e:	e01d      	b.n	2a7c <EXTI_Init+0xd4>
      tmp = (uint32_t)EXTI_BASE;
    2a40:	4b11      	ldr	r3, [pc, #68]	; (2a88 <EXTI_Init+0xe0>)
    2a42:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
    2a44:	687b      	ldr	r3, [r7, #4]
    2a46:	795b      	ldrb	r3, [r3, #5]
    2a48:	461a      	mov	r2, r3
    2a4a:	68fb      	ldr	r3, [r7, #12]
    2a4c:	4413      	add	r3, r2
    2a4e:	60fb      	str	r3, [r7, #12]
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    2a50:	68fb      	ldr	r3, [r7, #12]
    2a52:	6819      	ldr	r1, [r3, #0]
    2a54:	687b      	ldr	r3, [r7, #4]
    2a56:	681a      	ldr	r2, [r3, #0]
    2a58:	68fb      	ldr	r3, [r7, #12]
    2a5a:	430a      	orrs	r2, r1
    2a5c:	601a      	str	r2, [r3, #0]
}
    2a5e:	e00d      	b.n	2a7c <EXTI_Init+0xd4>
    tmp += EXTI_InitStruct->EXTI_Mode;
    2a60:	687b      	ldr	r3, [r7, #4]
    2a62:	791b      	ldrb	r3, [r3, #4]
    2a64:	461a      	mov	r2, r3
    2a66:	68fb      	ldr	r3, [r7, #12]
    2a68:	4413      	add	r3, r2
    2a6a:	60fb      	str	r3, [r7, #12]
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
    2a6c:	68fb      	ldr	r3, [r7, #12]
    2a6e:	6819      	ldr	r1, [r3, #0]
    2a70:	687b      	ldr	r3, [r7, #4]
    2a72:	681b      	ldr	r3, [r3, #0]
    2a74:	43da      	mvns	r2, r3
    2a76:	68fb      	ldr	r3, [r7, #12]
    2a78:	400a      	ands	r2, r1
    2a7a:	601a      	str	r2, [r3, #0]
}
    2a7c:	bf00      	nop
    2a7e:	3714      	adds	r7, #20
    2a80:	46bd      	mov	sp, r7
    2a82:	bc80      	pop	{r7}
    2a84:	4770      	bx	lr
    2a86:	bf00      	nop
    2a88:	40010400 	.word	0x40010400

00002a8c <EXTI_StructInit>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
    2a8c:	b480      	push	{r7}
    2a8e:	b083      	sub	sp, #12
    2a90:	af00      	add	r7, sp, #0
    2a92:	6078      	str	r0, [r7, #4]
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
    2a94:	687b      	ldr	r3, [r7, #4]
    2a96:	2200      	movs	r2, #0
    2a98:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
    2a9a:	687b      	ldr	r3, [r7, #4]
    2a9c:	2200      	movs	r2, #0
    2a9e:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
    2aa0:	687b      	ldr	r3, [r7, #4]
    2aa2:	220c      	movs	r2, #12
    2aa4:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
    2aa6:	687b      	ldr	r3, [r7, #4]
    2aa8:	2200      	movs	r2, #0
    2aaa:	719a      	strb	r2, [r3, #6]
}
    2aac:	bf00      	nop
    2aae:	370c      	adds	r7, #12
    2ab0:	46bd      	mov	sp, r7
    2ab2:	bc80      	pop	{r7}
    2ab4:	4770      	bx	lr

00002ab6 <EXTI_GenerateSWInterrupt>:
  * @param  EXTI_Line: specifies the EXTI lines to be enabled or disabled.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
    2ab6:	b480      	push	{r7}
    2ab8:	b083      	sub	sp, #12
    2aba:	af00      	add	r7, sp, #0
    2abc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->SWIER |= EXTI_Line;
    2abe:	4b05      	ldr	r3, [pc, #20]	; (2ad4 <EXTI_GenerateSWInterrupt+0x1e>)
    2ac0:	691a      	ldr	r2, [r3, #16]
    2ac2:	4904      	ldr	r1, [pc, #16]	; (2ad4 <EXTI_GenerateSWInterrupt+0x1e>)
    2ac4:	687b      	ldr	r3, [r7, #4]
    2ac6:	4313      	orrs	r3, r2
    2ac8:	610b      	str	r3, [r1, #16]
}
    2aca:	bf00      	nop
    2acc:	370c      	adds	r7, #12
    2ace:	46bd      	mov	sp, r7
    2ad0:	bc80      	pop	{r7}
    2ad2:	4770      	bx	lr
    2ad4:	40010400 	.word	0x40010400

00002ad8 <EXTI_GetFlagStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
    2ad8:	b480      	push	{r7}
    2ada:	b085      	sub	sp, #20
    2adc:	af00      	add	r7, sp, #0
    2ade:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
    2ae0:	2300      	movs	r3, #0
    2ae2:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
    2ae4:	4b08      	ldr	r3, [pc, #32]	; (2b08 <EXTI_GetFlagStatus+0x30>)
    2ae6:	695a      	ldr	r2, [r3, #20]
    2ae8:	687b      	ldr	r3, [r7, #4]
    2aea:	4013      	ands	r3, r2
    2aec:	2b00      	cmp	r3, #0
    2aee:	d002      	beq.n	2af6 <EXTI_GetFlagStatus+0x1e>
  {
    bitstatus = SET;
    2af0:	2301      	movs	r3, #1
    2af2:	73fb      	strb	r3, [r7, #15]
    2af4:	e001      	b.n	2afa <EXTI_GetFlagStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
    2af6:	2300      	movs	r3, #0
    2af8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    2afa:	7bfb      	ldrb	r3, [r7, #15]
}
    2afc:	4618      	mov	r0, r3
    2afe:	3714      	adds	r7, #20
    2b00:	46bd      	mov	sp, r7
    2b02:	bc80      	pop	{r7}
    2b04:	4770      	bx	lr
    2b06:	bf00      	nop
    2b08:	40010400 	.word	0x40010400

00002b0c <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
    2b0c:	b480      	push	{r7}
    2b0e:	b083      	sub	sp, #12
    2b10:	af00      	add	r7, sp, #0
    2b12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
    2b14:	4a03      	ldr	r2, [pc, #12]	; (2b24 <EXTI_ClearFlag+0x18>)
    2b16:	687b      	ldr	r3, [r7, #4]
    2b18:	6153      	str	r3, [r2, #20]
}
    2b1a:	bf00      	nop
    2b1c:	370c      	adds	r7, #12
    2b1e:	46bd      	mov	sp, r7
    2b20:	bc80      	pop	{r7}
    2b22:	4770      	bx	lr
    2b24:	40010400 	.word	0x40010400

00002b28 <EXTI_GetITStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
    2b28:	b480      	push	{r7}
    2b2a:	b085      	sub	sp, #20
    2b2c:	af00      	add	r7, sp, #0
    2b2e:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
    2b30:	2300      	movs	r3, #0
    2b32:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
    2b34:	2300      	movs	r3, #0
    2b36:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
    2b38:	4b0c      	ldr	r3, [pc, #48]	; (2b6c <EXTI_GetITStatus+0x44>)
    2b3a:	681b      	ldr	r3, [r3, #0]
    2b3c:	687a      	ldr	r2, [r7, #4]
    2b3e:	4013      	ands	r3, r2
    2b40:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
    2b42:	4b0a      	ldr	r3, [pc, #40]	; (2b6c <EXTI_GetITStatus+0x44>)
    2b44:	695a      	ldr	r2, [r3, #20]
    2b46:	687b      	ldr	r3, [r7, #4]
    2b48:	4013      	ands	r3, r2
    2b4a:	2b00      	cmp	r3, #0
    2b4c:	d005      	beq.n	2b5a <EXTI_GetITStatus+0x32>
    2b4e:	68bb      	ldr	r3, [r7, #8]
    2b50:	2b00      	cmp	r3, #0
    2b52:	d002      	beq.n	2b5a <EXTI_GetITStatus+0x32>
  {
    bitstatus = SET;
    2b54:	2301      	movs	r3, #1
    2b56:	73fb      	strb	r3, [r7, #15]
    2b58:	e001      	b.n	2b5e <EXTI_GetITStatus+0x36>
  }
  else
  {
    bitstatus = RESET;
    2b5a:	2300      	movs	r3, #0
    2b5c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    2b5e:	7bfb      	ldrb	r3, [r7, #15]
}
    2b60:	4618      	mov	r0, r3
    2b62:	3714      	adds	r7, #20
    2b64:	46bd      	mov	sp, r7
    2b66:	bc80      	pop	{r7}
    2b68:	4770      	bx	lr
    2b6a:	bf00      	nop
    2b6c:	40010400 	.word	0x40010400

00002b70 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
    2b70:	b480      	push	{r7}
    2b72:	b083      	sub	sp, #12
    2b74:	af00      	add	r7, sp, #0
    2b76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
    2b78:	4a03      	ldr	r2, [pc, #12]	; (2b88 <EXTI_ClearITPendingBit+0x18>)
    2b7a:	687b      	ldr	r3, [r7, #4]
    2b7c:	6153      	str	r3, [r2, #20]
}
    2b7e:	bf00      	nop
    2b80:	370c      	adds	r7, #12
    2b82:	46bd      	mov	sp, r7
    2b84:	bc80      	pop	{r7}
    2b86:	4770      	bx	lr
    2b88:	40010400 	.word	0x40010400

00002b8c <ADC_DeInit>:
  * @brief  Deinitializes the ADCx peripheral registers to their default reset values.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_DeInit(ADC_TypeDef* ADCx)
{
    2b8c:	b580      	push	{r7, lr}
    2b8e:	b082      	sub	sp, #8
    2b90:	af00      	add	r7, sp, #0
    2b92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  if (ADCx == ADC1)
    2b94:	687b      	ldr	r3, [r7, #4]
    2b96:	4a17      	ldr	r2, [pc, #92]	; (2bf4 <ADC_DeInit+0x68>)
    2b98:	4293      	cmp	r3, r2
    2b9a:	d10a      	bne.n	2bb2 <ADC_DeInit+0x26>
  {
    /* Enable ADC1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC1, ENABLE);
    2b9c:	2101      	movs	r1, #1
    2b9e:	f44f 7000 	mov.w	r0, #512	; 0x200
    2ba2:	f7fe feaf 	bl	1904 <RCC_APB2PeriphResetCmd>
    /* Release ADC1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC1, DISABLE);
    2ba6:	2100      	movs	r1, #0
    2ba8:	f44f 7000 	mov.w	r0, #512	; 0x200
    2bac:	f7fe feaa 	bl	1904 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC3, ENABLE);
      /* Release ADC3 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC3, DISABLE);
    }
  }
}
    2bb0:	e01c      	b.n	2bec <ADC_DeInit+0x60>
  else if (ADCx == ADC2)
    2bb2:	687b      	ldr	r3, [r7, #4]
    2bb4:	4a10      	ldr	r2, [pc, #64]	; (2bf8 <ADC_DeInit+0x6c>)
    2bb6:	4293      	cmp	r3, r2
    2bb8:	d10a      	bne.n	2bd0 <ADC_DeInit+0x44>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC2, ENABLE);
    2bba:	2101      	movs	r1, #1
    2bbc:	f44f 6080 	mov.w	r0, #1024	; 0x400
    2bc0:	f7fe fea0 	bl	1904 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC2, DISABLE);
    2bc4:	2100      	movs	r1, #0
    2bc6:	f44f 6080 	mov.w	r0, #1024	; 0x400
    2bca:	f7fe fe9b 	bl	1904 <RCC_APB2PeriphResetCmd>
}
    2bce:	e00d      	b.n	2bec <ADC_DeInit+0x60>
    if (ADCx == ADC3)
    2bd0:	687b      	ldr	r3, [r7, #4]
    2bd2:	4a0a      	ldr	r2, [pc, #40]	; (2bfc <ADC_DeInit+0x70>)
    2bd4:	4293      	cmp	r3, r2
    2bd6:	d109      	bne.n	2bec <ADC_DeInit+0x60>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC3, ENABLE);
    2bd8:	2101      	movs	r1, #1
    2bda:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    2bde:	f7fe fe91 	bl	1904 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC3, DISABLE);
    2be2:	2100      	movs	r1, #0
    2be4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    2be8:	f7fe fe8c 	bl	1904 <RCC_APB2PeriphResetCmd>
}
    2bec:	bf00      	nop
    2bee:	3708      	adds	r7, #8
    2bf0:	46bd      	mov	sp, r7
    2bf2:	bd80      	pop	{r7, pc}
    2bf4:	40012400 	.word	0x40012400
    2bf8:	40012800 	.word	0x40012800
    2bfc:	40013c00 	.word	0x40013c00

00002c00 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
    2c00:	b480      	push	{r7}
    2c02:	b085      	sub	sp, #20
    2c04:	af00      	add	r7, sp, #0
    2c06:	6078      	str	r0, [r7, #4]
    2c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
    2c0a:	2300      	movs	r3, #0
    2c0c:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
    2c0e:	2300      	movs	r3, #0
    2c10:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfChannel));

  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
    2c12:	687b      	ldr	r3, [r7, #4]
    2c14:	685b      	ldr	r3, [r3, #4]
    2c16:	60fb      	str	r3, [r7, #12]
  /* Clear DUALMOD and SCAN bits */
  tmpreg1 &= CR1_CLEAR_Mask;
    2c18:	68fb      	ldr	r3, [r7, #12]
    2c1a:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    2c1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    2c22:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: Dual mode and scan conversion mode */
  /* Set DUALMOD bits according to ADC_Mode value */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_Mode | ((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8));
    2c24:	683b      	ldr	r3, [r7, #0]
    2c26:	681a      	ldr	r2, [r3, #0]
    2c28:	683b      	ldr	r3, [r7, #0]
    2c2a:	791b      	ldrb	r3, [r3, #4]
    2c2c:	021b      	lsls	r3, r3, #8
    2c2e:	4313      	orrs	r3, r2
    2c30:	68fa      	ldr	r2, [r7, #12]
    2c32:	4313      	orrs	r3, r2
    2c34:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
    2c36:	687b      	ldr	r3, [r7, #4]
    2c38:	68fa      	ldr	r2, [r7, #12]
    2c3a:	605a      	str	r2, [r3, #4]

  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
    2c3c:	687b      	ldr	r3, [r7, #4]
    2c3e:	689b      	ldr	r3, [r3, #8]
    2c40:	60fb      	str	r3, [r7, #12]
  /* Clear CONT, ALIGN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_Mask;
    2c42:	68fa      	ldr	r2, [r7, #12]
    2c44:	4b16      	ldr	r3, [pc, #88]	; (2ca0 <ADC_Init+0xa0>)
    2c46:	4013      	ands	r3, r2
    2c48:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: external trigger event and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv |
    2c4a:	683b      	ldr	r3, [r7, #0]
    2c4c:	68da      	ldr	r2, [r3, #12]
    2c4e:	683b      	ldr	r3, [r7, #0]
    2c50:	689b      	ldr	r3, [r3, #8]
    2c52:	431a      	orrs	r2, r3
            ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
    2c54:	683b      	ldr	r3, [r7, #0]
    2c56:	795b      	ldrb	r3, [r3, #5]
    2c58:	005b      	lsls	r3, r3, #1
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv |
    2c5a:	4313      	orrs	r3, r2
    2c5c:	68fa      	ldr	r2, [r7, #12]
    2c5e:	4313      	orrs	r3, r2
    2c60:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
    2c62:	687b      	ldr	r3, [r7, #4]
    2c64:	68fa      	ldr	r2, [r7, #12]
    2c66:	609a      	str	r2, [r3, #8]

  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
    2c68:	687b      	ldr	r3, [r7, #4]
    2c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2c6c:	60fb      	str	r3, [r7, #12]
  /* Clear L bits */
  tmpreg1 &= SQR1_CLEAR_Mask;
    2c6e:	68fb      	ldr	r3, [r7, #12]
    2c70:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    2c74:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfChannel value */
  tmpreg2 |= (uint8_t) (ADC_InitStruct->ADC_NbrOfChannel - (uint8_t)1);
    2c76:	683b      	ldr	r3, [r7, #0]
    2c78:	7c1b      	ldrb	r3, [r3, #16]
    2c7a:	3b01      	subs	r3, #1
    2c7c:	b2da      	uxtb	r2, r3
    2c7e:	7afb      	ldrb	r3, [r7, #11]
    2c80:	4313      	orrs	r3, r2
    2c82:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= (uint32_t)tmpreg2 << 20;
    2c84:	7afb      	ldrb	r3, [r7, #11]
    2c86:	051b      	lsls	r3, r3, #20
    2c88:	68fa      	ldr	r2, [r7, #12]
    2c8a:	4313      	orrs	r3, r2
    2c8c:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
    2c8e:	687b      	ldr	r3, [r7, #4]
    2c90:	68fa      	ldr	r2, [r7, #12]
    2c92:	62da      	str	r2, [r3, #44]	; 0x2c
}
    2c94:	bf00      	nop
    2c96:	3714      	adds	r7, #20
    2c98:	46bd      	mov	sp, r7
    2c9a:	bc80      	pop	{r7}
    2c9c:	4770      	bx	lr
    2c9e:	bf00      	nop
    2ca0:	fff1f7fd 	.word	0xfff1f7fd

00002ca4 <ADC_StructInit>:
  * @brief  Fills each ADC_InitStruct member with its default value.
  * @param  ADC_InitStruct : pointer to an ADC_InitTypeDef structure which will be initialized.
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
{
    2ca4:	b480      	push	{r7}
    2ca6:	b083      	sub	sp, #12
    2ca8:	af00      	add	r7, sp, #0
    2caa:	6078      	str	r0, [r7, #4]
  /* Reset ADC init structure parameters values */
  /* Initialize the ADC_Mode member */
  ADC_InitStruct->ADC_Mode = ADC_Mode_Independent;
    2cac:	687b      	ldr	r3, [r7, #4]
    2cae:	2200      	movs	r2, #0
    2cb0:	601a      	str	r2, [r3, #0]
  /* initialize the ADC_ScanConvMode member */
  ADC_InitStruct->ADC_ScanConvMode = DISABLE;
    2cb2:	687b      	ldr	r3, [r7, #4]
    2cb4:	2200      	movs	r2, #0
    2cb6:	711a      	strb	r2, [r3, #4]
  /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
    2cb8:	687b      	ldr	r3, [r7, #4]
    2cba:	2200      	movs	r2, #0
    2cbc:	715a      	strb	r2, [r3, #5]
  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
    2cbe:	687b      	ldr	r3, [r7, #4]
    2cc0:	2200      	movs	r2, #0
    2cc2:	609a      	str	r2, [r3, #8]
  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
    2cc4:	687b      	ldr	r3, [r7, #4]
    2cc6:	2200      	movs	r2, #0
    2cc8:	60da      	str	r2, [r3, #12]
  /* Initialize the ADC_NbrOfChannel member */
  ADC_InitStruct->ADC_NbrOfChannel = 1;
    2cca:	687b      	ldr	r3, [r7, #4]
    2ccc:	2201      	movs	r2, #1
    2cce:	741a      	strb	r2, [r3, #16]
}
    2cd0:	bf00      	nop
    2cd2:	370c      	adds	r7, #12
    2cd4:	46bd      	mov	sp, r7
    2cd6:	bc80      	pop	{r7}
    2cd8:	4770      	bx	lr

00002cda <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
    2cda:	b480      	push	{r7}
    2cdc:	b083      	sub	sp, #12
    2cde:	af00      	add	r7, sp, #0
    2ce0:	6078      	str	r0, [r7, #4]
    2ce2:	460b      	mov	r3, r1
    2ce4:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    2ce6:	78fb      	ldrb	r3, [r7, #3]
    2ce8:	2b00      	cmp	r3, #0
    2cea:	d006      	beq.n	2cfa <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= CR2_ADON_Set;
    2cec:	687b      	ldr	r3, [r7, #4]
    2cee:	689b      	ldr	r3, [r3, #8]
    2cf0:	f043 0201 	orr.w	r2, r3, #1
    2cf4:	687b      	ldr	r3, [r7, #4]
    2cf6:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= CR2_ADON_Reset;
  }
}
    2cf8:	e005      	b.n	2d06 <ADC_Cmd+0x2c>
    ADCx->CR2 &= CR2_ADON_Reset;
    2cfa:	687b      	ldr	r3, [r7, #4]
    2cfc:	689b      	ldr	r3, [r3, #8]
    2cfe:	f023 0201 	bic.w	r2, r3, #1
    2d02:	687b      	ldr	r3, [r7, #4]
    2d04:	609a      	str	r2, [r3, #8]
}
    2d06:	bf00      	nop
    2d08:	370c      	adds	r7, #12
    2d0a:	46bd      	mov	sp, r7
    2d0c:	bc80      	pop	{r7}
    2d0e:	4770      	bx	lr

00002d10 <ADC_DMACmd>:
  * @param  NewState: new state of the selected ADC DMA transfer.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
    2d10:	b480      	push	{r7}
    2d12:	b083      	sub	sp, #12
    2d14:	af00      	add	r7, sp, #0
    2d16:	6078      	str	r0, [r7, #4]
    2d18:	460b      	mov	r3, r1
    2d1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_DMA_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    2d1c:	78fb      	ldrb	r3, [r7, #3]
    2d1e:	2b00      	cmp	r3, #0
    2d20:	d006      	beq.n	2d30 <ADC_DMACmd+0x20>
  {
    /* Enable the selected ADC DMA request */
    ADCx->CR2 |= CR2_DMA_Set;
    2d22:	687b      	ldr	r3, [r7, #4]
    2d24:	689b      	ldr	r3, [r3, #8]
    2d26:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    2d2a:	687b      	ldr	r3, [r7, #4]
    2d2c:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= CR2_DMA_Reset;
  }
}
    2d2e:	e005      	b.n	2d3c <ADC_DMACmd+0x2c>
    ADCx->CR2 &= CR2_DMA_Reset;
    2d30:	687b      	ldr	r3, [r7, #4]
    2d32:	689b      	ldr	r3, [r3, #8]
    2d34:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    2d38:	687b      	ldr	r3, [r7, #4]
    2d3a:	609a      	str	r2, [r3, #8]
}
    2d3c:	bf00      	nop
    2d3e:	370c      	adds	r7, #12
    2d40:	46bd      	mov	sp, r7
    2d42:	bc80      	pop	{r7}
    2d44:	4770      	bx	lr

00002d46 <ADC_ITConfig>:
  * @param  NewState: new state of the specified ADC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ITConfig(ADC_TypeDef* ADCx, uint16_t ADC_IT, FunctionalState NewState)
{
    2d46:	b480      	push	{r7}
    2d48:	b085      	sub	sp, #20
    2d4a:	af00      	add	r7, sp, #0
    2d4c:	6078      	str	r0, [r7, #4]
    2d4e:	460b      	mov	r3, r1
    2d50:	807b      	strh	r3, [r7, #2]
    2d52:	4613      	mov	r3, r2
    2d54:	707b      	strb	r3, [r7, #1]
  uint8_t itmask = 0;
    2d56:	2300      	movs	r3, #0
    2d58:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_ADC_IT(ADC_IT));
  /* Get the ADC IT index */
  itmask = (uint8_t)ADC_IT;
    2d5a:	887b      	ldrh	r3, [r7, #2]
    2d5c:	73fb      	strb	r3, [r7, #15]
  if (NewState != DISABLE)
    2d5e:	787b      	ldrb	r3, [r7, #1]
    2d60:	2b00      	cmp	r3, #0
    2d62:	d006      	beq.n	2d72 <ADC_ITConfig+0x2c>
  {
    /* Enable the selected ADC interrupts */
    ADCx->CR1 |= itmask;
    2d64:	687b      	ldr	r3, [r7, #4]
    2d66:	685a      	ldr	r2, [r3, #4]
    2d68:	7bfb      	ldrb	r3, [r7, #15]
    2d6a:	431a      	orrs	r2, r3
    2d6c:	687b      	ldr	r3, [r7, #4]
    2d6e:	605a      	str	r2, [r3, #4]
  else
  {
    /* Disable the selected ADC interrupts */
    ADCx->CR1 &= (~(uint32_t)itmask);
  }
}
    2d70:	e006      	b.n	2d80 <ADC_ITConfig+0x3a>
    ADCx->CR1 &= (~(uint32_t)itmask);
    2d72:	687b      	ldr	r3, [r7, #4]
    2d74:	685a      	ldr	r2, [r3, #4]
    2d76:	7bfb      	ldrb	r3, [r7, #15]
    2d78:	43db      	mvns	r3, r3
    2d7a:	401a      	ands	r2, r3
    2d7c:	687b      	ldr	r3, [r7, #4]
    2d7e:	605a      	str	r2, [r3, #4]
}
    2d80:	bf00      	nop
    2d82:	3714      	adds	r7, #20
    2d84:	46bd      	mov	sp, r7
    2d86:	bc80      	pop	{r7}
    2d88:	4770      	bx	lr

00002d8a <ADC_ResetCalibration>:
  * @brief  Resets the selected ADC calibration registers.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_ResetCalibration(ADC_TypeDef* ADCx)
{
    2d8a:	b480      	push	{r7}
    2d8c:	b083      	sub	sp, #12
    2d8e:	af00      	add	r7, sp, #0
    2d90:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Resets the selected ADC calibration registers */  
  ADCx->CR2 |= CR2_RSTCAL_Set;
    2d92:	687b      	ldr	r3, [r7, #4]
    2d94:	689b      	ldr	r3, [r3, #8]
    2d96:	f043 0208 	orr.w	r2, r3, #8
    2d9a:	687b      	ldr	r3, [r7, #4]
    2d9c:	609a      	str	r2, [r3, #8]
}
    2d9e:	bf00      	nop
    2da0:	370c      	adds	r7, #12
    2da2:	46bd      	mov	sp, r7
    2da4:	bc80      	pop	{r7}
    2da6:	4770      	bx	lr

00002da8 <ADC_GetResetCalibrationStatus>:
  * @brief  Gets the selected ADC reset calibration registers status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC reset calibration registers (SET or RESET).
  */
FlagStatus ADC_GetResetCalibrationStatus(ADC_TypeDef* ADCx)
{
    2da8:	b480      	push	{r7}
    2daa:	b085      	sub	sp, #20
    2dac:	af00      	add	r7, sp, #0
    2dae:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
    2db0:	2300      	movs	r3, #0
    2db2:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of RSTCAL bit */
  if ((ADCx->CR2 & CR2_RSTCAL_Set) != (uint32_t)RESET)
    2db4:	687b      	ldr	r3, [r7, #4]
    2db6:	689b      	ldr	r3, [r3, #8]
    2db8:	f003 0308 	and.w	r3, r3, #8
    2dbc:	2b00      	cmp	r3, #0
    2dbe:	d002      	beq.n	2dc6 <ADC_GetResetCalibrationStatus+0x1e>
  {
    /* RSTCAL bit is set */
    bitstatus = SET;
    2dc0:	2301      	movs	r3, #1
    2dc2:	73fb      	strb	r3, [r7, #15]
    2dc4:	e001      	b.n	2dca <ADC_GetResetCalibrationStatus+0x22>
  }
  else
  {
    /* RSTCAL bit is reset */
    bitstatus = RESET;
    2dc6:	2300      	movs	r3, #0
    2dc8:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RSTCAL bit status */
  return  bitstatus;
    2dca:	7bfb      	ldrb	r3, [r7, #15]
}
    2dcc:	4618      	mov	r0, r3
    2dce:	3714      	adds	r7, #20
    2dd0:	46bd      	mov	sp, r7
    2dd2:	bc80      	pop	{r7}
    2dd4:	4770      	bx	lr

00002dd6 <ADC_StartCalibration>:
  * @brief  Starts the selected ADC calibration process.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_StartCalibration(ADC_TypeDef* ADCx)
{
    2dd6:	b480      	push	{r7}
    2dd8:	b083      	sub	sp, #12
    2dda:	af00      	add	r7, sp, #0
    2ddc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Enable the selected ADC calibration process */  
  ADCx->CR2 |= CR2_CAL_Set;
    2dde:	687b      	ldr	r3, [r7, #4]
    2de0:	689b      	ldr	r3, [r3, #8]
    2de2:	f043 0204 	orr.w	r2, r3, #4
    2de6:	687b      	ldr	r3, [r7, #4]
    2de8:	609a      	str	r2, [r3, #8]
}
    2dea:	bf00      	nop
    2dec:	370c      	adds	r7, #12
    2dee:	46bd      	mov	sp, r7
    2df0:	bc80      	pop	{r7}
    2df2:	4770      	bx	lr

00002df4 <ADC_GetCalibrationStatus>:
  * @brief  Gets the selected ADC calibration status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC calibration (SET or RESET).
  */
FlagStatus ADC_GetCalibrationStatus(ADC_TypeDef* ADCx)
{
    2df4:	b480      	push	{r7}
    2df6:	b085      	sub	sp, #20
    2df8:	af00      	add	r7, sp, #0
    2dfa:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
    2dfc:	2300      	movs	r3, #0
    2dfe:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of CAL bit */
  if ((ADCx->CR2 & CR2_CAL_Set) != (uint32_t)RESET)
    2e00:	687b      	ldr	r3, [r7, #4]
    2e02:	689b      	ldr	r3, [r3, #8]
    2e04:	f003 0304 	and.w	r3, r3, #4
    2e08:	2b00      	cmp	r3, #0
    2e0a:	d002      	beq.n	2e12 <ADC_GetCalibrationStatus+0x1e>
  {
    /* CAL bit is set: calibration on going */
    bitstatus = SET;
    2e0c:	2301      	movs	r3, #1
    2e0e:	73fb      	strb	r3, [r7, #15]
    2e10:	e001      	b.n	2e16 <ADC_GetCalibrationStatus+0x22>
  }
  else
  {
    /* CAL bit is reset: end of calibration */
    bitstatus = RESET;
    2e12:	2300      	movs	r3, #0
    2e14:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the CAL bit status */
  return  bitstatus;
    2e16:	7bfb      	ldrb	r3, [r7, #15]
}
    2e18:	4618      	mov	r0, r3
    2e1a:	3714      	adds	r7, #20
    2e1c:	46bd      	mov	sp, r7
    2e1e:	bc80      	pop	{r7}
    2e20:	4770      	bx	lr

00002e22 <ADC_SoftwareStartConvCmd>:
  * @param  NewState: new state of the selected ADC software start conversion.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_SoftwareStartConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
    2e22:	b480      	push	{r7}
    2e24:	b083      	sub	sp, #12
    2e26:	af00      	add	r7, sp, #0
    2e28:	6078      	str	r0, [r7, #4]
    2e2a:	460b      	mov	r3, r1
    2e2c:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    2e2e:	78fb      	ldrb	r3, [r7, #3]
    2e30:	2b00      	cmp	r3, #0
    2e32:	d006      	beq.n	2e42 <ADC_SoftwareStartConvCmd+0x20>
  {
    /* Enable the selected ADC conversion on external event and start the selected
       ADC conversion */
    ADCx->CR2 |= CR2_EXTTRIG_SWSTART_Set;
    2e34:	687b      	ldr	r3, [r7, #4]
    2e36:	689b      	ldr	r3, [r3, #8]
    2e38:	f443 02a0 	orr.w	r2, r3, #5242880	; 0x500000
    2e3c:	687b      	ldr	r3, [r7, #4]
    2e3e:	609a      	str	r2, [r3, #8]
  {
    /* Disable the selected ADC conversion on external event and stop the selected
       ADC conversion */
    ADCx->CR2 &= CR2_EXTTRIG_SWSTART_Reset;
  }
}
    2e40:	e005      	b.n	2e4e <ADC_SoftwareStartConvCmd+0x2c>
    ADCx->CR2 &= CR2_EXTTRIG_SWSTART_Reset;
    2e42:	687b      	ldr	r3, [r7, #4]
    2e44:	689b      	ldr	r3, [r3, #8]
    2e46:	f423 02a0 	bic.w	r2, r3, #5242880	; 0x500000
    2e4a:	687b      	ldr	r3, [r7, #4]
    2e4c:	609a      	str	r2, [r3, #8]
}
    2e4e:	bf00      	nop
    2e50:	370c      	adds	r7, #12
    2e52:	46bd      	mov	sp, r7
    2e54:	bc80      	pop	{r7}
    2e56:	4770      	bx	lr

00002e58 <ADC_GetSoftwareStartConvStatus>:
  * @brief  Gets the selected ADC Software start conversion Status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC software start conversion (SET or RESET).
  */
FlagStatus ADC_GetSoftwareStartConvStatus(ADC_TypeDef* ADCx)
{
    2e58:	b480      	push	{r7}
    2e5a:	b085      	sub	sp, #20
    2e5c:	af00      	add	r7, sp, #0
    2e5e:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
    2e60:	2300      	movs	r3, #0
    2e62:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of SWSTART bit */
  if ((ADCx->CR2 & CR2_SWSTART_Set) != (uint32_t)RESET)
    2e64:	687b      	ldr	r3, [r7, #4]
    2e66:	689b      	ldr	r3, [r3, #8]
    2e68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
    2e6c:	2b00      	cmp	r3, #0
    2e6e:	d002      	beq.n	2e76 <ADC_GetSoftwareStartConvStatus+0x1e>
  {
    /* SWSTART bit is set */
    bitstatus = SET;
    2e70:	2301      	movs	r3, #1
    2e72:	73fb      	strb	r3, [r7, #15]
    2e74:	e001      	b.n	2e7a <ADC_GetSoftwareStartConvStatus+0x22>
  }
  else
  {
    /* SWSTART bit is reset */
    bitstatus = RESET;
    2e76:	2300      	movs	r3, #0
    2e78:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SWSTART bit status */
  return  bitstatus;
    2e7a:	7bfb      	ldrb	r3, [r7, #15]
}
    2e7c:	4618      	mov	r0, r3
    2e7e:	3714      	adds	r7, #20
    2e80:	46bd      	mov	sp, r7
    2e82:	bc80      	pop	{r7}
    2e84:	4770      	bx	lr

00002e86 <ADC_DiscModeChannelCountConfig>:
  * @param  Number: specifies the discontinuous mode regular channel
  *         count value. This number must be between 1 and 8.
  * @retval None
  */
void ADC_DiscModeChannelCountConfig(ADC_TypeDef* ADCx, uint8_t Number)
{
    2e86:	b480      	push	{r7}
    2e88:	b085      	sub	sp, #20
    2e8a:	af00      	add	r7, sp, #0
    2e8c:	6078      	str	r0, [r7, #4]
    2e8e:	460b      	mov	r3, r1
    2e90:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg1 = 0;
    2e92:	2300      	movs	r3, #0
    2e94:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg2 = 0;
    2e96:	2300      	movs	r3, #0
    2e98:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_REGULAR_DISC_NUMBER(Number));
  /* Get the old register value */
  tmpreg1 = ADCx->CR1;
    2e9a:	687b      	ldr	r3, [r7, #4]
    2e9c:	685b      	ldr	r3, [r3, #4]
    2e9e:	60fb      	str	r3, [r7, #12]
  /* Clear the old discontinuous mode channel count */
  tmpreg1 &= CR1_DISCNUM_Reset;
    2ea0:	68fb      	ldr	r3, [r7, #12]
    2ea2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
    2ea6:	60fb      	str	r3, [r7, #12]
  /* Set the discontinuous mode channel count */
  tmpreg2 = Number - 1;
    2ea8:	78fb      	ldrb	r3, [r7, #3]
    2eaa:	3b01      	subs	r3, #1
    2eac:	60bb      	str	r3, [r7, #8]
  tmpreg1 |= tmpreg2 << 13;
    2eae:	68bb      	ldr	r3, [r7, #8]
    2eb0:	035b      	lsls	r3, r3, #13
    2eb2:	68fa      	ldr	r2, [r7, #12]
    2eb4:	4313      	orrs	r3, r2
    2eb6:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->CR1 = tmpreg1;
    2eb8:	687b      	ldr	r3, [r7, #4]
    2eba:	68fa      	ldr	r2, [r7, #12]
    2ebc:	605a      	str	r2, [r3, #4]
}
    2ebe:	bf00      	nop
    2ec0:	3714      	adds	r7, #20
    2ec2:	46bd      	mov	sp, r7
    2ec4:	bc80      	pop	{r7}
    2ec6:	4770      	bx	lr

00002ec8 <ADC_DiscModeCmd>:
  *         on regular group channel.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
    2ec8:	b480      	push	{r7}
    2eca:	b083      	sub	sp, #12
    2ecc:	af00      	add	r7, sp, #0
    2ece:	6078      	str	r0, [r7, #4]
    2ed0:	460b      	mov	r3, r1
    2ed2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    2ed4:	78fb      	ldrb	r3, [r7, #3]
    2ed6:	2b00      	cmp	r3, #0
    2ed8:	d006      	beq.n	2ee8 <ADC_DiscModeCmd+0x20>
  {
    /* Enable the selected ADC regular discontinuous mode */
    ADCx->CR1 |= CR1_DISCEN_Set;
    2eda:	687b      	ldr	r3, [r7, #4]
    2edc:	685b      	ldr	r3, [r3, #4]
    2ede:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
    2ee2:	687b      	ldr	r3, [r7, #4]
    2ee4:	605a      	str	r2, [r3, #4]
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    ADCx->CR1 &= CR1_DISCEN_Reset;
  }
}
    2ee6:	e005      	b.n	2ef4 <ADC_DiscModeCmd+0x2c>
    ADCx->CR1 &= CR1_DISCEN_Reset;
    2ee8:	687b      	ldr	r3, [r7, #4]
    2eea:	685b      	ldr	r3, [r3, #4]
    2eec:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
    2ef0:	687b      	ldr	r3, [r7, #4]
    2ef2:	605a      	str	r2, [r3, #4]
}
    2ef4:	bf00      	nop
    2ef6:	370c      	adds	r7, #12
    2ef8:	46bd      	mov	sp, r7
    2efa:	bc80      	pop	{r7}
    2efc:	4770      	bx	lr

00002efe <ADC_RegularChannelConfig>:
  *     @arg ADC_SampleTime_71Cycles5: Sample time equal to 71.5 cycles	
  *     @arg ADC_SampleTime_239Cycles5: Sample time equal to 239.5 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
    2efe:	b480      	push	{r7}
    2f00:	b085      	sub	sp, #20
    2f02:	af00      	add	r7, sp, #0
    2f04:	6078      	str	r0, [r7, #4]
    2f06:	4608      	mov	r0, r1
    2f08:	4611      	mov	r1, r2
    2f0a:	461a      	mov	r2, r3
    2f0c:	4603      	mov	r3, r0
    2f0e:	70fb      	strb	r3, [r7, #3]
    2f10:	460b      	mov	r3, r1
    2f12:	70bb      	strb	r3, [r7, #2]
    2f14:	4613      	mov	r3, r2
    2f16:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
    2f18:	2300      	movs	r3, #0
    2f1a:	60fb      	str	r3, [r7, #12]
    2f1c:	2300      	movs	r3, #0
    2f1e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_17 is selected */
  if (ADC_Channel > ADC_Channel_9)
    2f20:	78fb      	ldrb	r3, [r7, #3]
    2f22:	2b09      	cmp	r3, #9
    2f24:	d923      	bls.n	2f6e <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
    2f26:	687b      	ldr	r3, [r7, #4]
    2f28:	68db      	ldr	r3, [r3, #12]
    2f2a:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_Set << (3 * (ADC_Channel - 10));
    2f2c:	78fb      	ldrb	r3, [r7, #3]
    2f2e:	f1a3 020a 	sub.w	r2, r3, #10
    2f32:	4613      	mov	r3, r2
    2f34:	005b      	lsls	r3, r3, #1
    2f36:	4413      	add	r3, r2
    2f38:	2207      	movs	r2, #7
    2f3a:	fa02 f303 	lsl.w	r3, r2, r3
    2f3e:	60bb      	str	r3, [r7, #8]
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
    2f40:	68bb      	ldr	r3, [r7, #8]
    2f42:	43db      	mvns	r3, r3
    2f44:	68fa      	ldr	r2, [r7, #12]
    2f46:	4013      	ands	r3, r2
    2f48:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
    2f4a:	7879      	ldrb	r1, [r7, #1]
    2f4c:	78fb      	ldrb	r3, [r7, #3]
    2f4e:	f1a3 020a 	sub.w	r2, r3, #10
    2f52:	4613      	mov	r3, r2
    2f54:	005b      	lsls	r3, r3, #1
    2f56:	4413      	add	r3, r2
    2f58:	fa01 f303 	lsl.w	r3, r1, r3
    2f5c:	60bb      	str	r3, [r7, #8]
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
    2f5e:	68fa      	ldr	r2, [r7, #12]
    2f60:	68bb      	ldr	r3, [r7, #8]
    2f62:	4313      	orrs	r3, r2
    2f64:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
    2f66:	687b      	ldr	r3, [r7, #4]
    2f68:	68fa      	ldr	r2, [r7, #12]
    2f6a:	60da      	str	r2, [r3, #12]
    2f6c:	e01e      	b.n	2fac <ADC_RegularChannelConfig+0xae>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
    2f6e:	687b      	ldr	r3, [r7, #4]
    2f70:	691b      	ldr	r3, [r3, #16]
    2f72:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_Set << (3 * ADC_Channel);
    2f74:	78fa      	ldrb	r2, [r7, #3]
    2f76:	4613      	mov	r3, r2
    2f78:	005b      	lsls	r3, r3, #1
    2f7a:	4413      	add	r3, r2
    2f7c:	2207      	movs	r2, #7
    2f7e:	fa02 f303 	lsl.w	r3, r2, r3
    2f82:	60bb      	str	r3, [r7, #8]
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
    2f84:	68bb      	ldr	r3, [r7, #8]
    2f86:	43db      	mvns	r3, r3
    2f88:	68fa      	ldr	r2, [r7, #12]
    2f8a:	4013      	ands	r3, r2
    2f8c:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
    2f8e:	7879      	ldrb	r1, [r7, #1]
    2f90:	78fa      	ldrb	r2, [r7, #3]
    2f92:	4613      	mov	r3, r2
    2f94:	005b      	lsls	r3, r3, #1
    2f96:	4413      	add	r3, r2
    2f98:	fa01 f303 	lsl.w	r3, r1, r3
    2f9c:	60bb      	str	r3, [r7, #8]
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
    2f9e:	68fa      	ldr	r2, [r7, #12]
    2fa0:	68bb      	ldr	r3, [r7, #8]
    2fa2:	4313      	orrs	r3, r2
    2fa4:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
    2fa6:	687b      	ldr	r3, [r7, #4]
    2fa8:	68fa      	ldr	r2, [r7, #12]
    2faa:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
    2fac:	78bb      	ldrb	r3, [r7, #2]
    2fae:	2b06      	cmp	r3, #6
    2fb0:	d821      	bhi.n	2ff6 <ADC_RegularChannelConfig+0xf8>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
    2fb2:	687b      	ldr	r3, [r7, #4]
    2fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    2fb6:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_Set << (5 * (Rank - 1));
    2fb8:	78bb      	ldrb	r3, [r7, #2]
    2fba:	1e5a      	subs	r2, r3, #1
    2fbc:	4613      	mov	r3, r2
    2fbe:	009b      	lsls	r3, r3, #2
    2fc0:	4413      	add	r3, r2
    2fc2:	221f      	movs	r2, #31
    2fc4:	fa02 f303 	lsl.w	r3, r2, r3
    2fc8:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
    2fca:	68bb      	ldr	r3, [r7, #8]
    2fcc:	43db      	mvns	r3, r3
    2fce:	68fa      	ldr	r2, [r7, #12]
    2fd0:	4013      	ands	r3, r2
    2fd2:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
    2fd4:	78f9      	ldrb	r1, [r7, #3]
    2fd6:	78bb      	ldrb	r3, [r7, #2]
    2fd8:	1e5a      	subs	r2, r3, #1
    2fda:	4613      	mov	r3, r2
    2fdc:	009b      	lsls	r3, r3, #2
    2fde:	4413      	add	r3, r2
    2fe0:	fa01 f303 	lsl.w	r3, r1, r3
    2fe4:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    2fe6:	68fa      	ldr	r2, [r7, #12]
    2fe8:	68bb      	ldr	r3, [r7, #8]
    2fea:	4313      	orrs	r3, r2
    2fec:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
    2fee:	687b      	ldr	r3, [r7, #4]
    2ff0:	68fa      	ldr	r2, [r7, #12]
    2ff2:	635a      	str	r2, [r3, #52]	; 0x34
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
    2ff4:	e047      	b.n	3086 <ADC_RegularChannelConfig+0x188>
  else if (Rank < 13)
    2ff6:	78bb      	ldrb	r3, [r7, #2]
    2ff8:	2b0c      	cmp	r3, #12
    2ffa:	d821      	bhi.n	3040 <ADC_RegularChannelConfig+0x142>
    tmpreg1 = ADCx->SQR2;
    2ffc:	687b      	ldr	r3, [r7, #4]
    2ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    3000:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR2_SQ_Set << (5 * (Rank - 7));
    3002:	78bb      	ldrb	r3, [r7, #2]
    3004:	1fda      	subs	r2, r3, #7
    3006:	4613      	mov	r3, r2
    3008:	009b      	lsls	r3, r3, #2
    300a:	4413      	add	r3, r2
    300c:	221f      	movs	r2, #31
    300e:	fa02 f303 	lsl.w	r3, r2, r3
    3012:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
    3014:	68bb      	ldr	r3, [r7, #8]
    3016:	43db      	mvns	r3, r3
    3018:	68fa      	ldr	r2, [r7, #12]
    301a:	4013      	ands	r3, r2
    301c:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
    301e:	78f9      	ldrb	r1, [r7, #3]
    3020:	78bb      	ldrb	r3, [r7, #2]
    3022:	1fda      	subs	r2, r3, #7
    3024:	4613      	mov	r3, r2
    3026:	009b      	lsls	r3, r3, #2
    3028:	4413      	add	r3, r2
    302a:	fa01 f303 	lsl.w	r3, r1, r3
    302e:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
    3030:	68fa      	ldr	r2, [r7, #12]
    3032:	68bb      	ldr	r3, [r7, #8]
    3034:	4313      	orrs	r3, r2
    3036:	60fb      	str	r3, [r7, #12]
    ADCx->SQR2 = tmpreg1;
    3038:	687b      	ldr	r3, [r7, #4]
    303a:	68fa      	ldr	r2, [r7, #12]
    303c:	631a      	str	r2, [r3, #48]	; 0x30
}
    303e:	e022      	b.n	3086 <ADC_RegularChannelConfig+0x188>
    tmpreg1 = ADCx->SQR1;
    3040:	687b      	ldr	r3, [r7, #4]
    3042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3044:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR1_SQ_Set << (5 * (Rank - 13));
    3046:	78bb      	ldrb	r3, [r7, #2]
    3048:	f1a3 020d 	sub.w	r2, r3, #13
    304c:	4613      	mov	r3, r2
    304e:	009b      	lsls	r3, r3, #2
    3050:	4413      	add	r3, r2
    3052:	221f      	movs	r2, #31
    3054:	fa02 f303 	lsl.w	r3, r2, r3
    3058:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
    305a:	68bb      	ldr	r3, [r7, #8]
    305c:	43db      	mvns	r3, r3
    305e:	68fa      	ldr	r2, [r7, #12]
    3060:	4013      	ands	r3, r2
    3062:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
    3064:	78f9      	ldrb	r1, [r7, #3]
    3066:	78bb      	ldrb	r3, [r7, #2]
    3068:	f1a3 020d 	sub.w	r2, r3, #13
    306c:	4613      	mov	r3, r2
    306e:	009b      	lsls	r3, r3, #2
    3070:	4413      	add	r3, r2
    3072:	fa01 f303 	lsl.w	r3, r1, r3
    3076:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
    3078:	68fa      	ldr	r2, [r7, #12]
    307a:	68bb      	ldr	r3, [r7, #8]
    307c:	4313      	orrs	r3, r2
    307e:	60fb      	str	r3, [r7, #12]
    ADCx->SQR1 = tmpreg1;
    3080:	687b      	ldr	r3, [r7, #4]
    3082:	68fa      	ldr	r2, [r7, #12]
    3084:	62da      	str	r2, [r3, #44]	; 0x2c
}
    3086:	bf00      	nop
    3088:	3714      	adds	r7, #20
    308a:	46bd      	mov	sp, r7
    308c:	bc80      	pop	{r7}
    308e:	4770      	bx	lr

00003090 <ADC_ExternalTrigConvCmd>:
  * @param  NewState: new state of the selected ADC external trigger start of conversion.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ExternalTrigConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
    3090:	b480      	push	{r7}
    3092:	b083      	sub	sp, #12
    3094:	af00      	add	r7, sp, #0
    3096:	6078      	str	r0, [r7, #4]
    3098:	460b      	mov	r3, r1
    309a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    309c:	78fb      	ldrb	r3, [r7, #3]
    309e:	2b00      	cmp	r3, #0
    30a0:	d006      	beq.n	30b0 <ADC_ExternalTrigConvCmd+0x20>
  {
    /* Enable the selected ADC conversion on external event */
    ADCx->CR2 |= CR2_EXTTRIG_Set;
    30a2:	687b      	ldr	r3, [r7, #4]
    30a4:	689b      	ldr	r3, [r3, #8]
    30a6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
    30aa:	687b      	ldr	r3, [r7, #4]
    30ac:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC conversion on external event */
    ADCx->CR2 &= CR2_EXTTRIG_Reset;
  }
}
    30ae:	e005      	b.n	30bc <ADC_ExternalTrigConvCmd+0x2c>
    ADCx->CR2 &= CR2_EXTTRIG_Reset;
    30b0:	687b      	ldr	r3, [r7, #4]
    30b2:	689b      	ldr	r3, [r3, #8]
    30b4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
    30b8:	687b      	ldr	r3, [r7, #4]
    30ba:	609a      	str	r2, [r3, #8]
}
    30bc:	bf00      	nop
    30be:	370c      	adds	r7, #12
    30c0:	46bd      	mov	sp, r7
    30c2:	bc80      	pop	{r7}
    30c4:	4770      	bx	lr

000030c6 <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
    30c6:	b480      	push	{r7}
    30c8:	b083      	sub	sp, #12
    30ca:	af00      	add	r7, sp, #0
    30cc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
    30ce:	687b      	ldr	r3, [r7, #4]
    30d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    30d2:	b29b      	uxth	r3, r3
}
    30d4:	4618      	mov	r0, r3
    30d6:	370c      	adds	r7, #12
    30d8:	46bd      	mov	sp, r7
    30da:	bc80      	pop	{r7}
    30dc:	4770      	bx	lr

000030de <ADC_GetDualModeConversionValue>:
/**
  * @brief  Returns the last ADC1 and ADC2 conversion result data in dual mode.
  * @retval The Data conversion value.
  */
uint32_t ADC_GetDualModeConversionValue(void)
{
    30de:	b480      	push	{r7}
    30e0:	af00      	add	r7, sp, #0
  /* Return the dual mode conversion value */
  return (*(__IO uint32_t *) DR_ADDRESS);
    30e2:	4b03      	ldr	r3, [pc, #12]	; (30f0 <ADC_GetDualModeConversionValue+0x12>)
    30e4:	681b      	ldr	r3, [r3, #0]
}
    30e6:	4618      	mov	r0, r3
    30e8:	46bd      	mov	sp, r7
    30ea:	bc80      	pop	{r7}
    30ec:	4770      	bx	lr
    30ee:	bf00      	nop
    30f0:	4001244c 	.word	0x4001244c

000030f4 <ADC_AutoInjectedConvCmd>:
  * @param  NewState: new state of the selected ADC auto injected conversion
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_AutoInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
    30f4:	b480      	push	{r7}
    30f6:	b083      	sub	sp, #12
    30f8:	af00      	add	r7, sp, #0
    30fa:	6078      	str	r0, [r7, #4]
    30fc:	460b      	mov	r3, r1
    30fe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    3100:	78fb      	ldrb	r3, [r7, #3]
    3102:	2b00      	cmp	r3, #0
    3104:	d006      	beq.n	3114 <ADC_AutoInjectedConvCmd+0x20>
  {
    /* Enable the selected ADC automatic injected group conversion */
    ADCx->CR1 |= CR1_JAUTO_Set;
    3106:	687b      	ldr	r3, [r7, #4]
    3108:	685b      	ldr	r3, [r3, #4]
    310a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    310e:	687b      	ldr	r3, [r7, #4]
    3110:	605a      	str	r2, [r3, #4]
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    ADCx->CR1 &= CR1_JAUTO_Reset;
  }
}
    3112:	e005      	b.n	3120 <ADC_AutoInjectedConvCmd+0x2c>
    ADCx->CR1 &= CR1_JAUTO_Reset;
    3114:	687b      	ldr	r3, [r7, #4]
    3116:	685b      	ldr	r3, [r3, #4]
    3118:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
    311c:	687b      	ldr	r3, [r7, #4]
    311e:	605a      	str	r2, [r3, #4]
}
    3120:	bf00      	nop
    3122:	370c      	adds	r7, #12
    3124:	46bd      	mov	sp, r7
    3126:	bc80      	pop	{r7}
    3128:	4770      	bx	lr

0000312a <ADC_InjectedDiscModeCmd>:
  *         on injected group channel.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_InjectedDiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
    312a:	b480      	push	{r7}
    312c:	b083      	sub	sp, #12
    312e:	af00      	add	r7, sp, #0
    3130:	6078      	str	r0, [r7, #4]
    3132:	460b      	mov	r3, r1
    3134:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    3136:	78fb      	ldrb	r3, [r7, #3]
    3138:	2b00      	cmp	r3, #0
    313a:	d006      	beq.n	314a <ADC_InjectedDiscModeCmd+0x20>
  {
    /* Enable the selected ADC injected discontinuous mode */
    ADCx->CR1 |= CR1_JDISCEN_Set;
    313c:	687b      	ldr	r3, [r7, #4]
    313e:	685b      	ldr	r3, [r3, #4]
    3140:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
    3144:	687b      	ldr	r3, [r7, #4]
    3146:	605a      	str	r2, [r3, #4]
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    ADCx->CR1 &= CR1_JDISCEN_Reset;
  }
}
    3148:	e005      	b.n	3156 <ADC_InjectedDiscModeCmd+0x2c>
    ADCx->CR1 &= CR1_JDISCEN_Reset;
    314a:	687b      	ldr	r3, [r7, #4]
    314c:	685b      	ldr	r3, [r3, #4]
    314e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
    3152:	687b      	ldr	r3, [r7, #4]
    3154:	605a      	str	r2, [r3, #4]
}
    3156:	bf00      	nop
    3158:	370c      	adds	r7, #12
    315a:	46bd      	mov	sp, r7
    315c:	bc80      	pop	{r7}
    315e:	4770      	bx	lr

00003160 <ADC_ExternalTrigInjectedConvConfig>:
  *     @arg ADC_ExternalTrigInjecConv_None: Injected conversion started by software and not
  *                                          by external trigger (for ADC1, ADC2 and ADC3)
  * @retval None
  */
void ADC_ExternalTrigInjectedConvConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConv)
{
    3160:	b480      	push	{r7}
    3162:	b085      	sub	sp, #20
    3164:	af00      	add	r7, sp, #0
    3166:	6078      	str	r0, [r7, #4]
    3168:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
    316a:	2300      	movs	r3, #0
    316c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_EXT_INJEC_TRIG(ADC_ExternalTrigInjecConv));
  /* Get the old register value */
  tmpreg = ADCx->CR2;
    316e:	687b      	ldr	r3, [r7, #4]
    3170:	689b      	ldr	r3, [r3, #8]
    3172:	60fb      	str	r3, [r7, #12]
  /* Clear the old external event selection for injected group */
  tmpreg &= CR2_JEXTSEL_Reset;
    3174:	68fb      	ldr	r3, [r7, #12]
    3176:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
    317a:	60fb      	str	r3, [r7, #12]
  /* Set the external event selection for injected group */
  tmpreg |= ADC_ExternalTrigInjecConv;
    317c:	68fa      	ldr	r2, [r7, #12]
    317e:	683b      	ldr	r3, [r7, #0]
    3180:	4313      	orrs	r3, r2
    3182:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->CR2 = tmpreg;
    3184:	687b      	ldr	r3, [r7, #4]
    3186:	68fa      	ldr	r2, [r7, #12]
    3188:	609a      	str	r2, [r3, #8]
}
    318a:	bf00      	nop
    318c:	3714      	adds	r7, #20
    318e:	46bd      	mov	sp, r7
    3190:	bc80      	pop	{r7}
    3192:	4770      	bx	lr

00003194 <ADC_ExternalTrigInjectedConvCmd>:
  *         injected conversion.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ExternalTrigInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
    3194:	b480      	push	{r7}
    3196:	b083      	sub	sp, #12
    3198:	af00      	add	r7, sp, #0
    319a:	6078      	str	r0, [r7, #4]
    319c:	460b      	mov	r3, r1
    319e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    31a0:	78fb      	ldrb	r3, [r7, #3]
    31a2:	2b00      	cmp	r3, #0
    31a4:	d006      	beq.n	31b4 <ADC_ExternalTrigInjectedConvCmd+0x20>
  {
    /* Enable the selected ADC external event selection for injected group */
    ADCx->CR2 |= CR2_JEXTTRIG_Set;
    31a6:	687b      	ldr	r3, [r7, #4]
    31a8:	689b      	ldr	r3, [r3, #8]
    31aa:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
    31ae:	687b      	ldr	r3, [r7, #4]
    31b0:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC external event selection for injected group */
    ADCx->CR2 &= CR2_JEXTTRIG_Reset;
  }
}
    31b2:	e005      	b.n	31c0 <ADC_ExternalTrigInjectedConvCmd+0x2c>
    ADCx->CR2 &= CR2_JEXTTRIG_Reset;
    31b4:	687b      	ldr	r3, [r7, #4]
    31b6:	689b      	ldr	r3, [r3, #8]
    31b8:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
    31bc:	687b      	ldr	r3, [r7, #4]
    31be:	609a      	str	r2, [r3, #8]
}
    31c0:	bf00      	nop
    31c2:	370c      	adds	r7, #12
    31c4:	46bd      	mov	sp, r7
    31c6:	bc80      	pop	{r7}
    31c8:	4770      	bx	lr

000031ca <ADC_SoftwareStartInjectedConvCmd>:
  * @param  NewState: new state of the selected ADC software start injected conversion.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_SoftwareStartInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
    31ca:	b480      	push	{r7}
    31cc:	b083      	sub	sp, #12
    31ce:	af00      	add	r7, sp, #0
    31d0:	6078      	str	r0, [r7, #4]
    31d2:	460b      	mov	r3, r1
    31d4:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    31d6:	78fb      	ldrb	r3, [r7, #3]
    31d8:	2b00      	cmp	r3, #0
    31da:	d006      	beq.n	31ea <ADC_SoftwareStartInjectedConvCmd+0x20>
  {
    /* Enable the selected ADC conversion for injected group on external event and start the selected
       ADC injected conversion */
    ADCx->CR2 |= CR2_JEXTTRIG_JSWSTART_Set;
    31dc:	687b      	ldr	r3, [r7, #4]
    31de:	689b      	ldr	r3, [r3, #8]
    31e0:	f443 1202 	orr.w	r2, r3, #2129920	; 0x208000
    31e4:	687b      	ldr	r3, [r7, #4]
    31e6:	609a      	str	r2, [r3, #8]
  {
    /* Disable the selected ADC conversion on external event for injected group and stop the selected
       ADC injected conversion */
    ADCx->CR2 &= CR2_JEXTTRIG_JSWSTART_Reset;
  }
}
    31e8:	e005      	b.n	31f6 <ADC_SoftwareStartInjectedConvCmd+0x2c>
    ADCx->CR2 &= CR2_JEXTTRIG_JSWSTART_Reset;
    31ea:	687b      	ldr	r3, [r7, #4]
    31ec:	689b      	ldr	r3, [r3, #8]
    31ee:	f423 1202 	bic.w	r2, r3, #2129920	; 0x208000
    31f2:	687b      	ldr	r3, [r7, #4]
    31f4:	609a      	str	r2, [r3, #8]
}
    31f6:	bf00      	nop
    31f8:	370c      	adds	r7, #12
    31fa:	46bd      	mov	sp, r7
    31fc:	bc80      	pop	{r7}
    31fe:	4770      	bx	lr

00003200 <ADC_GetSoftwareStartInjectedConvCmdStatus>:
  * @brief  Gets the selected ADC Software start injected conversion Status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC software start injected conversion (SET or RESET).
  */
FlagStatus ADC_GetSoftwareStartInjectedConvCmdStatus(ADC_TypeDef* ADCx)
{
    3200:	b480      	push	{r7}
    3202:	b085      	sub	sp, #20
    3204:	af00      	add	r7, sp, #0
    3206:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
    3208:	2300      	movs	r3, #0
    320a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of JSWSTART bit */
  if ((ADCx->CR2 & CR2_JSWSTART_Set) != (uint32_t)RESET)
    320c:	687b      	ldr	r3, [r7, #4]
    320e:	689b      	ldr	r3, [r3, #8]
    3210:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    3214:	2b00      	cmp	r3, #0
    3216:	d002      	beq.n	321e <ADC_GetSoftwareStartInjectedConvCmdStatus+0x1e>
  {
    /* JSWSTART bit is set */
    bitstatus = SET;
    3218:	2301      	movs	r3, #1
    321a:	73fb      	strb	r3, [r7, #15]
    321c:	e001      	b.n	3222 <ADC_GetSoftwareStartInjectedConvCmdStatus+0x22>
  }
  else
  {
    /* JSWSTART bit is reset */
    bitstatus = RESET;
    321e:	2300      	movs	r3, #0
    3220:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the JSWSTART bit status */
  return  bitstatus;
    3222:	7bfb      	ldrb	r3, [r7, #15]
}
    3224:	4618      	mov	r0, r3
    3226:	3714      	adds	r7, #20
    3228:	46bd      	mov	sp, r7
    322a:	bc80      	pop	{r7}
    322c:	4770      	bx	lr

0000322e <ADC_InjectedChannelConfig>:
  *     @arg ADC_SampleTime_71Cycles5: Sample time equal to 71.5 cycles	
  *     @arg ADC_SampleTime_239Cycles5: Sample time equal to 239.5 cycles	
  * @retval None
  */
void ADC_InjectedChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
    322e:	b480      	push	{r7}
    3230:	b087      	sub	sp, #28
    3232:	af00      	add	r7, sp, #0
    3234:	6078      	str	r0, [r7, #4]
    3236:	4608      	mov	r0, r1
    3238:	4611      	mov	r1, r2
    323a:	461a      	mov	r2, r3
    323c:	4603      	mov	r3, r0
    323e:	70fb      	strb	r3, [r7, #3]
    3240:	460b      	mov	r3, r1
    3242:	70bb      	strb	r3, [r7, #2]
    3244:	4613      	mov	r3, r2
    3246:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0, tmpreg3 = 0;
    3248:	2300      	movs	r3, #0
    324a:	617b      	str	r3, [r7, #20]
    324c:	2300      	movs	r3, #0
    324e:	613b      	str	r3, [r7, #16]
    3250:	2300      	movs	r3, #0
    3252:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_INJECTED_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_17 is selected */
  if (ADC_Channel > ADC_Channel_9)
    3254:	78fb      	ldrb	r3, [r7, #3]
    3256:	2b09      	cmp	r3, #9
    3258:	d923      	bls.n	32a2 <ADC_InjectedChannelConfig+0x74>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
    325a:	687b      	ldr	r3, [r7, #4]
    325c:	68db      	ldr	r3, [r3, #12]
    325e:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_Set << (3*(ADC_Channel - 10));
    3260:	78fb      	ldrb	r3, [r7, #3]
    3262:	f1a3 020a 	sub.w	r2, r3, #10
    3266:	4613      	mov	r3, r2
    3268:	005b      	lsls	r3, r3, #1
    326a:	4413      	add	r3, r2
    326c:	2207      	movs	r2, #7
    326e:	fa02 f303 	lsl.w	r3, r2, r3
    3272:	613b      	str	r3, [r7, #16]
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
    3274:	693b      	ldr	r3, [r7, #16]
    3276:	43db      	mvns	r3, r3
    3278:	697a      	ldr	r2, [r7, #20]
    327a:	4013      	ands	r3, r2
    327c:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3*(ADC_Channel - 10));
    327e:	7879      	ldrb	r1, [r7, #1]
    3280:	78fb      	ldrb	r3, [r7, #3]
    3282:	f1a3 020a 	sub.w	r2, r3, #10
    3286:	4613      	mov	r3, r2
    3288:	005b      	lsls	r3, r3, #1
    328a:	4413      	add	r3, r2
    328c:	fa01 f303 	lsl.w	r3, r1, r3
    3290:	613b      	str	r3, [r7, #16]
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
    3292:	697a      	ldr	r2, [r7, #20]
    3294:	693b      	ldr	r3, [r7, #16]
    3296:	4313      	orrs	r3, r2
    3298:	617b      	str	r3, [r7, #20]
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
    329a:	687b      	ldr	r3, [r7, #4]
    329c:	697a      	ldr	r2, [r7, #20]
    329e:	60da      	str	r2, [r3, #12]
    32a0:	e01e      	b.n	32e0 <ADC_InjectedChannelConfig+0xb2>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
    32a2:	687b      	ldr	r3, [r7, #4]
    32a4:	691b      	ldr	r3, [r3, #16]
    32a6:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_Set << (3 * ADC_Channel);
    32a8:	78fa      	ldrb	r2, [r7, #3]
    32aa:	4613      	mov	r3, r2
    32ac:	005b      	lsls	r3, r3, #1
    32ae:	4413      	add	r3, r2
    32b0:	2207      	movs	r2, #7
    32b2:	fa02 f303 	lsl.w	r3, r2, r3
    32b6:	613b      	str	r3, [r7, #16]
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
    32b8:	693b      	ldr	r3, [r7, #16]
    32ba:	43db      	mvns	r3, r3
    32bc:	697a      	ldr	r2, [r7, #20]
    32be:	4013      	ands	r3, r2
    32c0:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
    32c2:	7879      	ldrb	r1, [r7, #1]
    32c4:	78fa      	ldrb	r2, [r7, #3]
    32c6:	4613      	mov	r3, r2
    32c8:	005b      	lsls	r3, r3, #1
    32ca:	4413      	add	r3, r2
    32cc:	fa01 f303 	lsl.w	r3, r1, r3
    32d0:	613b      	str	r3, [r7, #16]
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
    32d2:	697a      	ldr	r2, [r7, #20]
    32d4:	693b      	ldr	r3, [r7, #16]
    32d6:	4313      	orrs	r3, r2
    32d8:	617b      	str	r3, [r7, #20]
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
    32da:	687b      	ldr	r3, [r7, #4]
    32dc:	697a      	ldr	r2, [r7, #20]
    32de:	611a      	str	r2, [r3, #16]
  }
  /* Rank configuration */
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
    32e0:	687b      	ldr	r3, [r7, #4]
    32e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    32e4:	617b      	str	r3, [r7, #20]
  /* Get JL value: Number = JL+1 */
  tmpreg3 =  (tmpreg1 & JSQR_JL_Set)>> 20;
    32e6:	697b      	ldr	r3, [r7, #20]
    32e8:	0d1b      	lsrs	r3, r3, #20
    32ea:	f003 0303 	and.w	r3, r3, #3
    32ee:	60fb      	str	r3, [r7, #12]
  /* Calculate the mask to clear: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = JSQR_JSQ_Set << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
    32f0:	68fb      	ldr	r3, [r7, #12]
    32f2:	b2db      	uxtb	r3, r3
    32f4:	78ba      	ldrb	r2, [r7, #2]
    32f6:	1ad3      	subs	r3, r2, r3
    32f8:	b2db      	uxtb	r3, r3
    32fa:	3302      	adds	r3, #2
    32fc:	b2db      	uxtb	r3, r3
    32fe:	461a      	mov	r2, r3
    3300:	4613      	mov	r3, r2
    3302:	009b      	lsls	r3, r3, #2
    3304:	4413      	add	r3, r2
    3306:	221f      	movs	r2, #31
    3308:	fa02 f303 	lsl.w	r3, r2, r3
    330c:	613b      	str	r3, [r7, #16]
  /* Clear the old JSQx bits for the selected rank */
  tmpreg1 &= ~tmpreg2;
    330e:	693b      	ldr	r3, [r7, #16]
    3310:	43db      	mvns	r3, r3
    3312:	697a      	ldr	r2, [r7, #20]
    3314:	4013      	ands	r3, r2
    3316:	617b      	str	r3, [r7, #20]
  /* Calculate the mask to set: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = (uint32_t)ADC_Channel << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
    3318:	78fa      	ldrb	r2, [r7, #3]
    331a:	68fb      	ldr	r3, [r7, #12]
    331c:	b2db      	uxtb	r3, r3
    331e:	78b9      	ldrb	r1, [r7, #2]
    3320:	1acb      	subs	r3, r1, r3
    3322:	b2db      	uxtb	r3, r3
    3324:	3302      	adds	r3, #2
    3326:	b2db      	uxtb	r3, r3
    3328:	4619      	mov	r1, r3
    332a:	460b      	mov	r3, r1
    332c:	009b      	lsls	r3, r3, #2
    332e:	440b      	add	r3, r1
    3330:	fa02 f303 	lsl.w	r3, r2, r3
    3334:	613b      	str	r3, [r7, #16]
  /* Set the JSQx bits for the selected rank */
  tmpreg1 |= tmpreg2;
    3336:	697a      	ldr	r2, [r7, #20]
    3338:	693b      	ldr	r3, [r7, #16]
    333a:	4313      	orrs	r3, r2
    333c:	617b      	str	r3, [r7, #20]
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
    333e:	687b      	ldr	r3, [r7, #4]
    3340:	697a      	ldr	r2, [r7, #20]
    3342:	639a      	str	r2, [r3, #56]	; 0x38
}
    3344:	bf00      	nop
    3346:	371c      	adds	r7, #28
    3348:	46bd      	mov	sp, r7
    334a:	bc80      	pop	{r7}
    334c:	4770      	bx	lr

0000334e <ADC_InjectedSequencerLengthConfig>:
  * @param  Length: The sequencer length. 
  *   This parameter must be a number between 1 to 4.
  * @retval None
  */
void ADC_InjectedSequencerLengthConfig(ADC_TypeDef* ADCx, uint8_t Length)
{
    334e:	b480      	push	{r7}
    3350:	b085      	sub	sp, #20
    3352:	af00      	add	r7, sp, #0
    3354:	6078      	str	r0, [r7, #4]
    3356:	460b      	mov	r3, r1
    3358:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg1 = 0;
    335a:	2300      	movs	r3, #0
    335c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg2 = 0;
    335e:	2300      	movs	r3, #0
    3360:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_LENGTH(Length));
  
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
    3362:	687b      	ldr	r3, [r7, #4]
    3364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3366:	60fb      	str	r3, [r7, #12]
  /* Clear the old injected sequnence lenght JL bits */
  tmpreg1 &= JSQR_JL_Reset;
    3368:	68fb      	ldr	r3, [r7, #12]
    336a:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
    336e:	60fb      	str	r3, [r7, #12]
  /* Set the injected sequnence lenght JL bits */
  tmpreg2 = Length - 1; 
    3370:	78fb      	ldrb	r3, [r7, #3]
    3372:	3b01      	subs	r3, #1
    3374:	60bb      	str	r3, [r7, #8]
  tmpreg1 |= tmpreg2 << 20;
    3376:	68bb      	ldr	r3, [r7, #8]
    3378:	051b      	lsls	r3, r3, #20
    337a:	68fa      	ldr	r2, [r7, #12]
    337c:	4313      	orrs	r3, r2
    337e:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
    3380:	687b      	ldr	r3, [r7, #4]
    3382:	68fa      	ldr	r2, [r7, #12]
    3384:	639a      	str	r2, [r3, #56]	; 0x38
}
    3386:	bf00      	nop
    3388:	3714      	adds	r7, #20
    338a:	46bd      	mov	sp, r7
    338c:	bc80      	pop	{r7}
    338e:	4770      	bx	lr

00003390 <ADC_SetInjectedOffset>:
  * @param  Offset: the offset value for the selected ADC injected channel
  *   This parameter must be a 12bit value.
  * @retval None
  */
void ADC_SetInjectedOffset(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel, uint16_t Offset)
{
    3390:	b480      	push	{r7}
    3392:	b085      	sub	sp, #20
    3394:	af00      	add	r7, sp, #0
    3396:	6078      	str	r0, [r7, #4]
    3398:	460b      	mov	r3, r1
    339a:	70fb      	strb	r3, [r7, #3]
    339c:	4613      	mov	r3, r2
    339e:	803b      	strh	r3, [r7, #0]
  __IO uint32_t tmp = 0;
    33a0:	2300      	movs	r3, #0
    33a2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
  assert_param(IS_ADC_OFFSET(Offset));  
  
  tmp = (uint32_t)ADCx;
    33a4:	687b      	ldr	r3, [r7, #4]
    33a6:	60fb      	str	r3, [r7, #12]
  tmp += ADC_InjectedChannel;
    33a8:	78fa      	ldrb	r2, [r7, #3]
    33aa:	68fb      	ldr	r3, [r7, #12]
    33ac:	4413      	add	r3, r2
    33ae:	60fb      	str	r3, [r7, #12]
  
  /* Set the selected injected channel data offset */
  *(__IO uint32_t *) tmp = (uint32_t)Offset;
    33b0:	68fb      	ldr	r3, [r7, #12]
    33b2:	461a      	mov	r2, r3
    33b4:	883b      	ldrh	r3, [r7, #0]
    33b6:	6013      	str	r3, [r2, #0]
}
    33b8:	bf00      	nop
    33ba:	3714      	adds	r7, #20
    33bc:	46bd      	mov	sp, r7
    33be:	bc80      	pop	{r7}
    33c0:	4770      	bx	lr

000033c2 <ADC_GetInjectedConversionValue>:
  *     @arg ADC_InjectedChannel_3: Injected Channel3 selected
  *     @arg ADC_InjectedChannel_4: Injected Channel4 selected
  * @retval The Data conversion value.
  */
uint16_t ADC_GetInjectedConversionValue(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel)
{
    33c2:	b480      	push	{r7}
    33c4:	b085      	sub	sp, #20
    33c6:	af00      	add	r7, sp, #0
    33c8:	6078      	str	r0, [r7, #4]
    33ca:	460b      	mov	r3, r1
    33cc:	70fb      	strb	r3, [r7, #3]
  __IO uint32_t tmp = 0;
    33ce:	2300      	movs	r3, #0
    33d0:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));

  tmp = (uint32_t)ADCx;
    33d2:	687b      	ldr	r3, [r7, #4]
    33d4:	60fb      	str	r3, [r7, #12]
  tmp += ADC_InjectedChannel + JDR_Offset;
    33d6:	78fa      	ldrb	r2, [r7, #3]
    33d8:	68fb      	ldr	r3, [r7, #12]
    33da:	4413      	add	r3, r2
    33dc:	3328      	adds	r3, #40	; 0x28
    33de:	60fb      	str	r3, [r7, #12]
  
  /* Returns the selected injected channel conversion data value */
  return (uint16_t) (*(__IO uint32_t*)  tmp);   
    33e0:	68fb      	ldr	r3, [r7, #12]
    33e2:	681b      	ldr	r3, [r3, #0]
    33e4:	b29b      	uxth	r3, r3
}
    33e6:	4618      	mov	r0, r3
    33e8:	3714      	adds	r7, #20
    33ea:	46bd      	mov	sp, r7
    33ec:	bc80      	pop	{r7}
    33ee:	4770      	bx	lr

000033f0 <ADC_AnalogWatchdogCmd>:
  *     @arg ADC_AnalogWatchdog_AllRegAllInjecEnable: Analog watchdog on all regular and injected channels
  *     @arg ADC_AnalogWatchdog_None: No channel guarded by the analog watchdog
  * @retval None	  
  */
void ADC_AnalogWatchdogCmd(ADC_TypeDef* ADCx, uint32_t ADC_AnalogWatchdog)
{
    33f0:	b480      	push	{r7}
    33f2:	b085      	sub	sp, #20
    33f4:	af00      	add	r7, sp, #0
    33f6:	6078      	str	r0, [r7, #4]
    33f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
    33fa:	2300      	movs	r3, #0
    33fc:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_ANALOG_WATCHDOG(ADC_AnalogWatchdog));
  /* Get the old register value */
  tmpreg = ADCx->CR1;
    33fe:	687b      	ldr	r3, [r7, #4]
    3400:	685b      	ldr	r3, [r3, #4]
    3402:	60fb      	str	r3, [r7, #12]
  /* Clear AWDEN, AWDENJ and AWDSGL bits */
  tmpreg &= CR1_AWDMode_Reset;
    3404:	68fb      	ldr	r3, [r7, #12]
    3406:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
    340a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    340e:	60fb      	str	r3, [r7, #12]
  /* Set the analog watchdog enable mode */
  tmpreg |= ADC_AnalogWatchdog;
    3410:	68fa      	ldr	r2, [r7, #12]
    3412:	683b      	ldr	r3, [r7, #0]
    3414:	4313      	orrs	r3, r2
    3416:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->CR1 = tmpreg;
    3418:	687b      	ldr	r3, [r7, #4]
    341a:	68fa      	ldr	r2, [r7, #12]
    341c:	605a      	str	r2, [r3, #4]
}
    341e:	bf00      	nop
    3420:	3714      	adds	r7, #20
    3422:	46bd      	mov	sp, r7
    3424:	bc80      	pop	{r7}
    3426:	4770      	bx	lr

00003428 <ADC_AnalogWatchdogThresholdsConfig>:
  *   This parameter must be a 12bit value.
  * @retval None
  */
void ADC_AnalogWatchdogThresholdsConfig(ADC_TypeDef* ADCx, uint16_t HighThreshold,
                                        uint16_t LowThreshold)
{
    3428:	b480      	push	{r7}
    342a:	b083      	sub	sp, #12
    342c:	af00      	add	r7, sp, #0
    342e:	6078      	str	r0, [r7, #4]
    3430:	460b      	mov	r3, r1
    3432:	807b      	strh	r3, [r7, #2]
    3434:	4613      	mov	r3, r2
    3436:	803b      	strh	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_THRESHOLD(HighThreshold));
  assert_param(IS_ADC_THRESHOLD(LowThreshold));
  /* Set the ADCx high threshold */
  ADCx->HTR = HighThreshold;
    3438:	887a      	ldrh	r2, [r7, #2]
    343a:	687b      	ldr	r3, [r7, #4]
    343c:	625a      	str	r2, [r3, #36]	; 0x24
  /* Set the ADCx low threshold */
  ADCx->LTR = LowThreshold;
    343e:	883a      	ldrh	r2, [r7, #0]
    3440:	687b      	ldr	r3, [r7, #4]
    3442:	629a      	str	r2, [r3, #40]	; 0x28
}
    3444:	bf00      	nop
    3446:	370c      	adds	r7, #12
    3448:	46bd      	mov	sp, r7
    344a:	bc80      	pop	{r7}
    344c:	4770      	bx	lr

0000344e <ADC_AnalogWatchdogSingleChannelConfig>:
  *     @arg ADC_Channel_16: ADC Channel16 selected
  *     @arg ADC_Channel_17: ADC Channel17 selected
  * @retval None
  */
void ADC_AnalogWatchdogSingleChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel)
{
    344e:	b480      	push	{r7}
    3450:	b085      	sub	sp, #20
    3452:	af00      	add	r7, sp, #0
    3454:	6078      	str	r0, [r7, #4]
    3456:	460b      	mov	r3, r1
    3458:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg = 0;
    345a:	2300      	movs	r3, #0
    345c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  /* Get the old register value */
  tmpreg = ADCx->CR1;
    345e:	687b      	ldr	r3, [r7, #4]
    3460:	685b      	ldr	r3, [r3, #4]
    3462:	60fb      	str	r3, [r7, #12]
  /* Clear the Analog watchdog channel select bits */
  tmpreg &= CR1_AWDCH_Reset;
    3464:	68fb      	ldr	r3, [r7, #12]
    3466:	f023 031f 	bic.w	r3, r3, #31
    346a:	60fb      	str	r3, [r7, #12]
  /* Set the Analog watchdog channel */
  tmpreg |= ADC_Channel;
    346c:	78fb      	ldrb	r3, [r7, #3]
    346e:	68fa      	ldr	r2, [r7, #12]
    3470:	4313      	orrs	r3, r2
    3472:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->CR1 = tmpreg;
    3474:	687b      	ldr	r3, [r7, #4]
    3476:	68fa      	ldr	r2, [r7, #12]
    3478:	605a      	str	r2, [r3, #4]
}
    347a:	bf00      	nop
    347c:	3714      	adds	r7, #20
    347e:	46bd      	mov	sp, r7
    3480:	bc80      	pop	{r7}
    3482:	4770      	bx	lr

00003484 <ADC_TempSensorVrefintCmd>:
  * @param  NewState: new state of the temperature sensor.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_TempSensorVrefintCmd(FunctionalState NewState)
{
    3484:	b480      	push	{r7}
    3486:	b083      	sub	sp, #12
    3488:	af00      	add	r7, sp, #0
    348a:	4603      	mov	r3, r0
    348c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    348e:	79fb      	ldrb	r3, [r7, #7]
    3490:	2b00      	cmp	r3, #0
    3492:	d006      	beq.n	34a2 <ADC_TempSensorVrefintCmd+0x1e>
  {
    /* Enable the temperature sensor and Vrefint channel*/
    ADC1->CR2 |= CR2_TSVREFE_Set;
    3494:	4b08      	ldr	r3, [pc, #32]	; (34b8 <ADC_TempSensorVrefintCmd+0x34>)
    3496:	689b      	ldr	r3, [r3, #8]
    3498:	4a07      	ldr	r2, [pc, #28]	; (34b8 <ADC_TempSensorVrefintCmd+0x34>)
    349a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    349e:	6093      	str	r3, [r2, #8]
  else
  {
    /* Disable the temperature sensor and Vrefint channel*/
    ADC1->CR2 &= CR2_TSVREFE_Reset;
  }
}
    34a0:	e005      	b.n	34ae <ADC_TempSensorVrefintCmd+0x2a>
    ADC1->CR2 &= CR2_TSVREFE_Reset;
    34a2:	4b05      	ldr	r3, [pc, #20]	; (34b8 <ADC_TempSensorVrefintCmd+0x34>)
    34a4:	689b      	ldr	r3, [r3, #8]
    34a6:	4a04      	ldr	r2, [pc, #16]	; (34b8 <ADC_TempSensorVrefintCmd+0x34>)
    34a8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    34ac:	6093      	str	r3, [r2, #8]
}
    34ae:	bf00      	nop
    34b0:	370c      	adds	r7, #12
    34b2:	46bd      	mov	sp, r7
    34b4:	bc80      	pop	{r7}
    34b6:	4770      	bx	lr
    34b8:	40012400 	.word	0x40012400

000034bc <ADC_GetFlagStatus>:
  *     @arg ADC_FLAG_JSTRT: Start of injected group conversion flag
  *     @arg ADC_FLAG_STRT: Start of regular group conversion flag
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
{
    34bc:	b480      	push	{r7}
    34be:	b085      	sub	sp, #20
    34c0:	af00      	add	r7, sp, #0
    34c2:	6078      	str	r0, [r7, #4]
    34c4:	460b      	mov	r3, r1
    34c6:	70fb      	strb	r3, [r7, #3]
  FlagStatus bitstatus = RESET;
    34c8:	2300      	movs	r3, #0
    34ca:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));
  /* Check the status of the specified ADC flag */
  if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
    34cc:	687b      	ldr	r3, [r7, #4]
    34ce:	681a      	ldr	r2, [r3, #0]
    34d0:	78fb      	ldrb	r3, [r7, #3]
    34d2:	4013      	ands	r3, r2
    34d4:	2b00      	cmp	r3, #0
    34d6:	d002      	beq.n	34de <ADC_GetFlagStatus+0x22>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
    34d8:	2301      	movs	r3, #1
    34da:	73fb      	strb	r3, [r7, #15]
    34dc:	e001      	b.n	34e2 <ADC_GetFlagStatus+0x26>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
    34de:	2300      	movs	r3, #0
    34e0:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
    34e2:	7bfb      	ldrb	r3, [r7, #15]
}
    34e4:	4618      	mov	r0, r3
    34e6:	3714      	adds	r7, #20
    34e8:	46bd      	mov	sp, r7
    34ea:	bc80      	pop	{r7}
    34ec:	4770      	bx	lr

000034ee <ADC_ClearFlag>:
  *     @arg ADC_FLAG_JSTRT: Start of injected group conversion flag
  *     @arg ADC_FLAG_STRT: Start of regular group conversion flag
  * @retval None
  */
void ADC_ClearFlag(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
{
    34ee:	b480      	push	{r7}
    34f0:	b083      	sub	sp, #12
    34f2:	af00      	add	r7, sp, #0
    34f4:	6078      	str	r0, [r7, #4]
    34f6:	460b      	mov	r3, r1
    34f8:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CLEAR_FLAG(ADC_FLAG));
  /* Clear the selected ADC flags */
  ADCx->SR = ~(uint32_t)ADC_FLAG;
    34fa:	78fb      	ldrb	r3, [r7, #3]
    34fc:	43da      	mvns	r2, r3
    34fe:	687b      	ldr	r3, [r7, #4]
    3500:	601a      	str	r2, [r3, #0]
}
    3502:	bf00      	nop
    3504:	370c      	adds	r7, #12
    3506:	46bd      	mov	sp, r7
    3508:	bc80      	pop	{r7}
    350a:	4770      	bx	lr

0000350c <ADC_GetITStatus>:
  *     @arg ADC_IT_AWD: Analog watchdog interrupt mask
  *     @arg ADC_IT_JEOC: End of injected conversion interrupt mask
  * @retval The new state of ADC_IT (SET or RESET).
  */
ITStatus ADC_GetITStatus(ADC_TypeDef* ADCx, uint16_t ADC_IT)
{
    350c:	b480      	push	{r7}
    350e:	b087      	sub	sp, #28
    3510:	af00      	add	r7, sp, #0
    3512:	6078      	str	r0, [r7, #4]
    3514:	460b      	mov	r3, r1
    3516:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;
    3518:	2300      	movs	r3, #0
    351a:	75fb      	strb	r3, [r7, #23]
  uint32_t itmask = 0, enablestatus = 0;
    351c:	2300      	movs	r3, #0
    351e:	613b      	str	r3, [r7, #16]
    3520:	2300      	movs	r3, #0
    3522:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_IT(ADC_IT));
  /* Get the ADC IT index */
  itmask = ADC_IT >> 8;
    3524:	887b      	ldrh	r3, [r7, #2]
    3526:	0a1b      	lsrs	r3, r3, #8
    3528:	b29b      	uxth	r3, r3
    352a:	613b      	str	r3, [r7, #16]
  /* Get the ADC_IT enable bit status */
  enablestatus = (ADCx->CR1 & (uint8_t)ADC_IT) ;
    352c:	687b      	ldr	r3, [r7, #4]
    352e:	685b      	ldr	r3, [r3, #4]
    3530:	887a      	ldrh	r2, [r7, #2]
    3532:	b2d2      	uxtb	r2, r2
    3534:	4013      	ands	r3, r2
    3536:	60fb      	str	r3, [r7, #12]
  /* Check the status of the specified ADC interrupt */
  if (((ADCx->SR & itmask) != (uint32_t)RESET) && enablestatus)
    3538:	687b      	ldr	r3, [r7, #4]
    353a:	681a      	ldr	r2, [r3, #0]
    353c:	693b      	ldr	r3, [r7, #16]
    353e:	4013      	ands	r3, r2
    3540:	2b00      	cmp	r3, #0
    3542:	d005      	beq.n	3550 <ADC_GetITStatus+0x44>
    3544:	68fb      	ldr	r3, [r7, #12]
    3546:	2b00      	cmp	r3, #0
    3548:	d002      	beq.n	3550 <ADC_GetITStatus+0x44>
  {
    /* ADC_IT is set */
    bitstatus = SET;
    354a:	2301      	movs	r3, #1
    354c:	75fb      	strb	r3, [r7, #23]
    354e:	e001      	b.n	3554 <ADC_GetITStatus+0x48>
  }
  else
  {
    /* ADC_IT is reset */
    bitstatus = RESET;
    3550:	2300      	movs	r3, #0
    3552:	75fb      	strb	r3, [r7, #23]
  }
  /* Return the ADC_IT status */
  return  bitstatus;
    3554:	7dfb      	ldrb	r3, [r7, #23]
}
    3556:	4618      	mov	r0, r3
    3558:	371c      	adds	r7, #28
    355a:	46bd      	mov	sp, r7
    355c:	bc80      	pop	{r7}
    355e:	4770      	bx	lr

00003560 <ADC_ClearITPendingBit>:
  *     @arg ADC_IT_AWD: Analog watchdog interrupt mask
  *     @arg ADC_IT_JEOC: End of injected conversion interrupt mask
  * @retval None
  */
void ADC_ClearITPendingBit(ADC_TypeDef* ADCx, uint16_t ADC_IT)
{
    3560:	b480      	push	{r7}
    3562:	b085      	sub	sp, #20
    3564:	af00      	add	r7, sp, #0
    3566:	6078      	str	r0, [r7, #4]
    3568:	460b      	mov	r3, r1
    356a:	807b      	strh	r3, [r7, #2]
  uint8_t itmask = 0;
    356c:	2300      	movs	r3, #0
    356e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_IT(ADC_IT));
  /* Get the ADC IT index */
  itmask = (uint8_t)(ADC_IT >> 8);
    3570:	887b      	ldrh	r3, [r7, #2]
    3572:	0a1b      	lsrs	r3, r3, #8
    3574:	b29b      	uxth	r3, r3
    3576:	73fb      	strb	r3, [r7, #15]
  /* Clear the selected ADC interrupt pending bits */
  ADCx->SR = ~(uint32_t)itmask;
    3578:	7bfb      	ldrb	r3, [r7, #15]
    357a:	43da      	mvns	r2, r3
    357c:	687b      	ldr	r3, [r7, #4]
    357e:	601a      	str	r2, [r3, #0]
}
    3580:	bf00      	nop
    3582:	3714      	adds	r7, #20
    3584:	46bd      	mov	sp, r7
    3586:	bc80      	pop	{r7}
    3588:	4770      	bx	lr
    358a:	bf00      	nop

0000358c <TIM_DeInit>:
  * @brief  Deinitializes the TIMx peripheral registers to their default reset values.
  * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
  * @retval None
  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
    358c:	b580      	push	{r7, lr}
    358e:	b082      	sub	sp, #8
    3590:	af00      	add	r7, sp, #0
    3592:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
    3594:	687b      	ldr	r3, [r7, #4]
    3596:	4a78      	ldr	r2, [pc, #480]	; (3778 <TIM_DeInit+0x1ec>)
    3598:	4293      	cmp	r3, r2
    359a:	d10a      	bne.n	35b2 <TIM_DeInit+0x26>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
    359c:	2101      	movs	r1, #1
    359e:	f44f 6000 	mov.w	r0, #2048	; 0x800
    35a2:	f7fe f9af 	bl	1904 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
    35a6:	2100      	movs	r1, #0
    35a8:	f44f 6000 	mov.w	r0, #2048	; 0x800
    35ac:	f7fe f9aa 	bl	1904 <RCC_APB2PeriphResetCmd>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, DISABLE);
    }  
  }
}
    35b0:	e0de      	b.n	3770 <TIM_DeInit+0x1e4>
  else if (TIMx == TIM2)
    35b2:	687b      	ldr	r3, [r7, #4]
    35b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    35b8:	d108      	bne.n	35cc <TIM_DeInit+0x40>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
    35ba:	2101      	movs	r1, #1
    35bc:	2001      	movs	r0, #1
    35be:	f7fe f9bf 	bl	1940 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
    35c2:	2100      	movs	r1, #0
    35c4:	2001      	movs	r0, #1
    35c6:	f7fe f9bb 	bl	1940 <RCC_APB1PeriphResetCmd>
}
    35ca:	e0d1      	b.n	3770 <TIM_DeInit+0x1e4>
  else if (TIMx == TIM3)
    35cc:	687b      	ldr	r3, [r7, #4]
    35ce:	4a6b      	ldr	r2, [pc, #428]	; (377c <TIM_DeInit+0x1f0>)
    35d0:	4293      	cmp	r3, r2
    35d2:	d108      	bne.n	35e6 <TIM_DeInit+0x5a>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
    35d4:	2101      	movs	r1, #1
    35d6:	2002      	movs	r0, #2
    35d8:	f7fe f9b2 	bl	1940 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
    35dc:	2100      	movs	r1, #0
    35de:	2002      	movs	r0, #2
    35e0:	f7fe f9ae 	bl	1940 <RCC_APB1PeriphResetCmd>
}
    35e4:	e0c4      	b.n	3770 <TIM_DeInit+0x1e4>
  else if (TIMx == TIM4)
    35e6:	687b      	ldr	r3, [r7, #4]
    35e8:	4a65      	ldr	r2, [pc, #404]	; (3780 <TIM_DeInit+0x1f4>)
    35ea:	4293      	cmp	r3, r2
    35ec:	d108      	bne.n	3600 <TIM_DeInit+0x74>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
    35ee:	2101      	movs	r1, #1
    35f0:	2004      	movs	r0, #4
    35f2:	f7fe f9a5 	bl	1940 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
    35f6:	2100      	movs	r1, #0
    35f8:	2004      	movs	r0, #4
    35fa:	f7fe f9a1 	bl	1940 <RCC_APB1PeriphResetCmd>
}
    35fe:	e0b7      	b.n	3770 <TIM_DeInit+0x1e4>
  else if (TIMx == TIM5)
    3600:	687b      	ldr	r3, [r7, #4]
    3602:	4a60      	ldr	r2, [pc, #384]	; (3784 <TIM_DeInit+0x1f8>)
    3604:	4293      	cmp	r3, r2
    3606:	d108      	bne.n	361a <TIM_DeInit+0x8e>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
    3608:	2101      	movs	r1, #1
    360a:	2008      	movs	r0, #8
    360c:	f7fe f998 	bl	1940 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
    3610:	2100      	movs	r1, #0
    3612:	2008      	movs	r0, #8
    3614:	f7fe f994 	bl	1940 <RCC_APB1PeriphResetCmd>
}
    3618:	e0aa      	b.n	3770 <TIM_DeInit+0x1e4>
  else if (TIMx == TIM6)
    361a:	687b      	ldr	r3, [r7, #4]
    361c:	4a5a      	ldr	r2, [pc, #360]	; (3788 <TIM_DeInit+0x1fc>)
    361e:	4293      	cmp	r3, r2
    3620:	d108      	bne.n	3634 <TIM_DeInit+0xa8>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
    3622:	2101      	movs	r1, #1
    3624:	2010      	movs	r0, #16
    3626:	f7fe f98b 	bl	1940 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
    362a:	2100      	movs	r1, #0
    362c:	2010      	movs	r0, #16
    362e:	f7fe f987 	bl	1940 <RCC_APB1PeriphResetCmd>
}
    3632:	e09d      	b.n	3770 <TIM_DeInit+0x1e4>
  else if (TIMx == TIM7)
    3634:	687b      	ldr	r3, [r7, #4]
    3636:	4a55      	ldr	r2, [pc, #340]	; (378c <TIM_DeInit+0x200>)
    3638:	4293      	cmp	r3, r2
    363a:	d108      	bne.n	364e <TIM_DeInit+0xc2>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
    363c:	2101      	movs	r1, #1
    363e:	2020      	movs	r0, #32
    3640:	f7fe f97e 	bl	1940 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
    3644:	2100      	movs	r1, #0
    3646:	2020      	movs	r0, #32
    3648:	f7fe f97a 	bl	1940 <RCC_APB1PeriphResetCmd>
}
    364c:	e090      	b.n	3770 <TIM_DeInit+0x1e4>
  else if (TIMx == TIM8)
    364e:	687b      	ldr	r3, [r7, #4]
    3650:	4a4f      	ldr	r2, [pc, #316]	; (3790 <TIM_DeInit+0x204>)
    3652:	4293      	cmp	r3, r2
    3654:	d10a      	bne.n	366c <TIM_DeInit+0xe0>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
    3656:	2101      	movs	r1, #1
    3658:	f44f 5000 	mov.w	r0, #8192	; 0x2000
    365c:	f7fe f952 	bl	1904 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);
    3660:	2100      	movs	r1, #0
    3662:	f44f 5000 	mov.w	r0, #8192	; 0x2000
    3666:	f7fe f94d 	bl	1904 <RCC_APB2PeriphResetCmd>
}
    366a:	e081      	b.n	3770 <TIM_DeInit+0x1e4>
  else if (TIMx == TIM9)
    366c:	687b      	ldr	r3, [r7, #4]
    366e:	4a49      	ldr	r2, [pc, #292]	; (3794 <TIM_DeInit+0x208>)
    3670:	4293      	cmp	r3, r2
    3672:	d10a      	bne.n	368a <TIM_DeInit+0xfe>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
    3674:	2101      	movs	r1, #1
    3676:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    367a:	f7fe f943 	bl	1904 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
    367e:	2100      	movs	r1, #0
    3680:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    3684:	f7fe f93e 	bl	1904 <RCC_APB2PeriphResetCmd>
}
    3688:	e072      	b.n	3770 <TIM_DeInit+0x1e4>
  else if (TIMx == TIM10)
    368a:	687b      	ldr	r3, [r7, #4]
    368c:	4a42      	ldr	r2, [pc, #264]	; (3798 <TIM_DeInit+0x20c>)
    368e:	4293      	cmp	r3, r2
    3690:	d10a      	bne.n	36a8 <TIM_DeInit+0x11c>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
    3692:	2101      	movs	r1, #1
    3694:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    3698:	f7fe f934 	bl	1904 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
    369c:	2100      	movs	r1, #0
    369e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    36a2:	f7fe f92f 	bl	1904 <RCC_APB2PeriphResetCmd>
}
    36a6:	e063      	b.n	3770 <TIM_DeInit+0x1e4>
  else if (TIMx == TIM11) 
    36a8:	687b      	ldr	r3, [r7, #4]
    36aa:	4a3c      	ldr	r2, [pc, #240]	; (379c <TIM_DeInit+0x210>)
    36ac:	4293      	cmp	r3, r2
    36ae:	d10a      	bne.n	36c6 <TIM_DeInit+0x13a>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
    36b0:	2101      	movs	r1, #1
    36b2:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    36b6:	f7fe f925 	bl	1904 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
    36ba:	2100      	movs	r1, #0
    36bc:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    36c0:	f7fe f920 	bl	1904 <RCC_APB2PeriphResetCmd>
}
    36c4:	e054      	b.n	3770 <TIM_DeInit+0x1e4>
  else if (TIMx == TIM12)
    36c6:	687b      	ldr	r3, [r7, #4]
    36c8:	4a35      	ldr	r2, [pc, #212]	; (37a0 <TIM_DeInit+0x214>)
    36ca:	4293      	cmp	r3, r2
    36cc:	d108      	bne.n	36e0 <TIM_DeInit+0x154>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
    36ce:	2101      	movs	r1, #1
    36d0:	2040      	movs	r0, #64	; 0x40
    36d2:	f7fe f935 	bl	1940 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
    36d6:	2100      	movs	r1, #0
    36d8:	2040      	movs	r0, #64	; 0x40
    36da:	f7fe f931 	bl	1940 <RCC_APB1PeriphResetCmd>
}
    36de:	e047      	b.n	3770 <TIM_DeInit+0x1e4>
  else if (TIMx == TIM13) 
    36e0:	687b      	ldr	r3, [r7, #4]
    36e2:	4a30      	ldr	r2, [pc, #192]	; (37a4 <TIM_DeInit+0x218>)
    36e4:	4293      	cmp	r3, r2
    36e6:	d108      	bne.n	36fa <TIM_DeInit+0x16e>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
    36e8:	2101      	movs	r1, #1
    36ea:	2080      	movs	r0, #128	; 0x80
    36ec:	f7fe f928 	bl	1940 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
    36f0:	2100      	movs	r1, #0
    36f2:	2080      	movs	r0, #128	; 0x80
    36f4:	f7fe f924 	bl	1940 <RCC_APB1PeriphResetCmd>
}
    36f8:	e03a      	b.n	3770 <TIM_DeInit+0x1e4>
  else if (TIMx == TIM14) 
    36fa:	687b      	ldr	r3, [r7, #4]
    36fc:	4a2a      	ldr	r2, [pc, #168]	; (37a8 <TIM_DeInit+0x21c>)
    36fe:	4293      	cmp	r3, r2
    3700:	d10a      	bne.n	3718 <TIM_DeInit+0x18c>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
    3702:	2101      	movs	r1, #1
    3704:	f44f 7080 	mov.w	r0, #256	; 0x100
    3708:	f7fe f91a 	bl	1940 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE);  
    370c:	2100      	movs	r1, #0
    370e:	f44f 7080 	mov.w	r0, #256	; 0x100
    3712:	f7fe f915 	bl	1940 <RCC_APB1PeriphResetCmd>
}
    3716:	e02b      	b.n	3770 <TIM_DeInit+0x1e4>
  else if (TIMx == TIM15)
    3718:	687b      	ldr	r3, [r7, #4]
    371a:	4a24      	ldr	r2, [pc, #144]	; (37ac <TIM_DeInit+0x220>)
    371c:	4293      	cmp	r3, r2
    371e:	d10a      	bne.n	3736 <TIM_DeInit+0x1aa>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, ENABLE);
    3720:	2101      	movs	r1, #1
    3722:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    3726:	f7fe f8ed 	bl	1904 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, DISABLE);
    372a:	2100      	movs	r1, #0
    372c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    3730:	f7fe f8e8 	bl	1904 <RCC_APB2PeriphResetCmd>
}
    3734:	e01c      	b.n	3770 <TIM_DeInit+0x1e4>
  else if (TIMx == TIM16)
    3736:	687b      	ldr	r3, [r7, #4]
    3738:	4a1d      	ldr	r2, [pc, #116]	; (37b0 <TIM_DeInit+0x224>)
    373a:	4293      	cmp	r3, r2
    373c:	d10a      	bne.n	3754 <TIM_DeInit+0x1c8>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, ENABLE);
    373e:	2101      	movs	r1, #1
    3740:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    3744:	f7fe f8de 	bl	1904 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, DISABLE);
    3748:	2100      	movs	r1, #0
    374a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    374e:	f7fe f8d9 	bl	1904 <RCC_APB2PeriphResetCmd>
}
    3752:	e00d      	b.n	3770 <TIM_DeInit+0x1e4>
    if (TIMx == TIM17)
    3754:	687b      	ldr	r3, [r7, #4]
    3756:	4a17      	ldr	r2, [pc, #92]	; (37b4 <TIM_DeInit+0x228>)
    3758:	4293      	cmp	r3, r2
    375a:	d109      	bne.n	3770 <TIM_DeInit+0x1e4>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, ENABLE);
    375c:	2101      	movs	r1, #1
    375e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    3762:	f7fe f8cf 	bl	1904 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, DISABLE);
    3766:	2100      	movs	r1, #0
    3768:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    376c:	f7fe f8ca 	bl	1904 <RCC_APB2PeriphResetCmd>
}
    3770:	bf00      	nop
    3772:	3708      	adds	r7, #8
    3774:	46bd      	mov	sp, r7
    3776:	bd80      	pop	{r7, pc}
    3778:	40012c00 	.word	0x40012c00
    377c:	40000400 	.word	0x40000400
    3780:	40000800 	.word	0x40000800
    3784:	40000c00 	.word	0x40000c00
    3788:	40001000 	.word	0x40001000
    378c:	40001400 	.word	0x40001400
    3790:	40013400 	.word	0x40013400
    3794:	40014c00 	.word	0x40014c00
    3798:	40015000 	.word	0x40015000
    379c:	40015400 	.word	0x40015400
    37a0:	40001800 	.word	0x40001800
    37a4:	40001c00 	.word	0x40001c00
    37a8:	40002000 	.word	0x40002000
    37ac:	40014000 	.word	0x40014000
    37b0:	40014400 	.word	0x40014400
    37b4:	40014800 	.word	0x40014800

000037b8 <TIM_TimeBaseInit>:
  *         structure that contains the configuration information for the 
  *         specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
    37b8:	b480      	push	{r7}
    37ba:	b085      	sub	sp, #20
    37bc:	af00      	add	r7, sp, #0
    37be:	6078      	str	r0, [r7, #4]
    37c0:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
    37c2:	2300      	movs	r3, #0
    37c4:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
    37c6:	687b      	ldr	r3, [r7, #4]
    37c8:	881b      	ldrh	r3, [r3, #0]
    37ca:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
    37cc:	687b      	ldr	r3, [r7, #4]
    37ce:	4a2e      	ldr	r2, [pc, #184]	; (3888 <TIM_TimeBaseInit+0xd0>)
    37d0:	4293      	cmp	r3, r2
    37d2:	d013      	beq.n	37fc <TIM_TimeBaseInit+0x44>
    37d4:	687b      	ldr	r3, [r7, #4]
    37d6:	4a2d      	ldr	r2, [pc, #180]	; (388c <TIM_TimeBaseInit+0xd4>)
    37d8:	4293      	cmp	r3, r2
    37da:	d00f      	beq.n	37fc <TIM_TimeBaseInit+0x44>
    37dc:	687b      	ldr	r3, [r7, #4]
    37de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    37e2:	d00b      	beq.n	37fc <TIM_TimeBaseInit+0x44>
    37e4:	687b      	ldr	r3, [r7, #4]
    37e6:	4a2a      	ldr	r2, [pc, #168]	; (3890 <TIM_TimeBaseInit+0xd8>)
    37e8:	4293      	cmp	r3, r2
    37ea:	d007      	beq.n	37fc <TIM_TimeBaseInit+0x44>
    37ec:	687b      	ldr	r3, [r7, #4]
    37ee:	4a29      	ldr	r2, [pc, #164]	; (3894 <TIM_TimeBaseInit+0xdc>)
    37f0:	4293      	cmp	r3, r2
    37f2:	d003      	beq.n	37fc <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
    37f4:	687b      	ldr	r3, [r7, #4]
    37f6:	4a28      	ldr	r2, [pc, #160]	; (3898 <TIM_TimeBaseInit+0xe0>)
    37f8:	4293      	cmp	r3, r2
    37fa:	d108      	bne.n	380e <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
    37fc:	89fb      	ldrh	r3, [r7, #14]
    37fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    3802:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
    3804:	683b      	ldr	r3, [r7, #0]
    3806:	885a      	ldrh	r2, [r3, #2]
    3808:	89fb      	ldrh	r3, [r7, #14]
    380a:	4313      	orrs	r3, r2
    380c:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
    380e:	687b      	ldr	r3, [r7, #4]
    3810:	4a22      	ldr	r2, [pc, #136]	; (389c <TIM_TimeBaseInit+0xe4>)
    3812:	4293      	cmp	r3, r2
    3814:	d00c      	beq.n	3830 <TIM_TimeBaseInit+0x78>
    3816:	687b      	ldr	r3, [r7, #4]
    3818:	4a21      	ldr	r2, [pc, #132]	; (38a0 <TIM_TimeBaseInit+0xe8>)
    381a:	4293      	cmp	r3, r2
    381c:	d008      	beq.n	3830 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
    381e:	89fb      	ldrh	r3, [r7, #14]
    3820:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    3824:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
    3826:	683b      	ldr	r3, [r7, #0]
    3828:	88da      	ldrh	r2, [r3, #6]
    382a:	89fb      	ldrh	r3, [r7, #14]
    382c:	4313      	orrs	r3, r2
    382e:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
    3830:	687b      	ldr	r3, [r7, #4]
    3832:	89fa      	ldrh	r2, [r7, #14]
    3834:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
    3836:	683b      	ldr	r3, [r7, #0]
    3838:	889a      	ldrh	r2, [r3, #4]
    383a:	687b      	ldr	r3, [r7, #4]
    383c:	859a      	strh	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
    383e:	683b      	ldr	r3, [r7, #0]
    3840:	881a      	ldrh	r2, [r3, #0]
    3842:	687b      	ldr	r3, [r7, #4]
    3844:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
    3846:	687b      	ldr	r3, [r7, #4]
    3848:	4a0f      	ldr	r2, [pc, #60]	; (3888 <TIM_TimeBaseInit+0xd0>)
    384a:	4293      	cmp	r3, r2
    384c:	d00f      	beq.n	386e <TIM_TimeBaseInit+0xb6>
    384e:	687b      	ldr	r3, [r7, #4]
    3850:	4a0e      	ldr	r2, [pc, #56]	; (388c <TIM_TimeBaseInit+0xd4>)
    3852:	4293      	cmp	r3, r2
    3854:	d00b      	beq.n	386e <TIM_TimeBaseInit+0xb6>
    3856:	687b      	ldr	r3, [r7, #4]
    3858:	4a12      	ldr	r2, [pc, #72]	; (38a4 <TIM_TimeBaseInit+0xec>)
    385a:	4293      	cmp	r3, r2
    385c:	d007      	beq.n	386e <TIM_TimeBaseInit+0xb6>
    385e:	687b      	ldr	r3, [r7, #4]
    3860:	4a11      	ldr	r2, [pc, #68]	; (38a8 <TIM_TimeBaseInit+0xf0>)
    3862:	4293      	cmp	r3, r2
    3864:	d003      	beq.n	386e <TIM_TimeBaseInit+0xb6>
    3866:	687b      	ldr	r3, [r7, #4]
    3868:	4a10      	ldr	r2, [pc, #64]	; (38ac <TIM_TimeBaseInit+0xf4>)
    386a:	4293      	cmp	r3, r2
    386c:	d104      	bne.n	3878 <TIM_TimeBaseInit+0xc0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
    386e:	683b      	ldr	r3, [r7, #0]
    3870:	7a1b      	ldrb	r3, [r3, #8]
    3872:	b29a      	uxth	r2, r3
    3874:	687b      	ldr	r3, [r7, #4]
    3876:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
    3878:	687b      	ldr	r3, [r7, #4]
    387a:	2201      	movs	r2, #1
    387c:	829a      	strh	r2, [r3, #20]
}
    387e:	bf00      	nop
    3880:	3714      	adds	r7, #20
    3882:	46bd      	mov	sp, r7
    3884:	bc80      	pop	{r7}
    3886:	4770      	bx	lr
    3888:	40012c00 	.word	0x40012c00
    388c:	40013400 	.word	0x40013400
    3890:	40000400 	.word	0x40000400
    3894:	40000800 	.word	0x40000800
    3898:	40000c00 	.word	0x40000c00
    389c:	40001000 	.word	0x40001000
    38a0:	40001400 	.word	0x40001400
    38a4:	40014000 	.word	0x40014000
    38a8:	40014400 	.word	0x40014400
    38ac:	40014800 	.word	0x40014800

000038b0 <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
    38b0:	b480      	push	{r7}
    38b2:	b085      	sub	sp, #20
    38b4:	af00      	add	r7, sp, #0
    38b6:	6078      	str	r0, [r7, #4]
    38b8:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
    38ba:	2300      	movs	r3, #0
    38bc:	817b      	strh	r3, [r7, #10]
    38be:	2300      	movs	r3, #0
    38c0:	81fb      	strh	r3, [r7, #14]
    38c2:	2300      	movs	r3, #0
    38c4:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
 /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
    38c6:	687b      	ldr	r3, [r7, #4]
    38c8:	8c1b      	ldrh	r3, [r3, #32]
    38ca:	b29b      	uxth	r3, r3
    38cc:	f023 0301 	bic.w	r3, r3, #1
    38d0:	b29a      	uxth	r2, r3
    38d2:	687b      	ldr	r3, [r7, #4]
    38d4:	841a      	strh	r2, [r3, #32]
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
    38d6:	687b      	ldr	r3, [r7, #4]
    38d8:	8c1b      	ldrh	r3, [r3, #32]
    38da:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
    38dc:	687b      	ldr	r3, [r7, #4]
    38de:	889b      	ldrh	r3, [r3, #4]
    38e0:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    38e2:	687b      	ldr	r3, [r7, #4]
    38e4:	8b1b      	ldrh	r3, [r3, #24]
    38e6:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC1M));
    38e8:	897b      	ldrh	r3, [r7, #10]
    38ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    38ee:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
    38f0:	897b      	ldrh	r3, [r7, #10]
    38f2:	f023 0303 	bic.w	r3, r3, #3
    38f6:	817b      	strh	r3, [r7, #10]

  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
    38f8:	683b      	ldr	r3, [r7, #0]
    38fa:	881a      	ldrh	r2, [r3, #0]
    38fc:	897b      	ldrh	r3, [r7, #10]
    38fe:	4313      	orrs	r3, r2
    3900:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
    3902:	89fb      	ldrh	r3, [r7, #14]
    3904:	f023 0302 	bic.w	r3, r3, #2
    3908:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
    390a:	683b      	ldr	r3, [r7, #0]
    390c:	891a      	ldrh	r2, [r3, #8]
    390e:	89fb      	ldrh	r3, [r7, #14]
    3910:	4313      	orrs	r3, r2
    3912:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
    3914:	683b      	ldr	r3, [r7, #0]
    3916:	885a      	ldrh	r2, [r3, #2]
    3918:	89fb      	ldrh	r3, [r7, #14]
    391a:	4313      	orrs	r3, r2
    391c:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)||
    391e:	687b      	ldr	r3, [r7, #4]
    3920:	4a24      	ldr	r2, [pc, #144]	; (39b4 <TIM_OC1Init+0x104>)
    3922:	4293      	cmp	r3, r2
    3924:	d00f      	beq.n	3946 <TIM_OC1Init+0x96>
    3926:	687b      	ldr	r3, [r7, #4]
    3928:	4a23      	ldr	r2, [pc, #140]	; (39b8 <TIM_OC1Init+0x108>)
    392a:	4293      	cmp	r3, r2
    392c:	d00b      	beq.n	3946 <TIM_OC1Init+0x96>
    392e:	687b      	ldr	r3, [r7, #4]
    3930:	4a22      	ldr	r2, [pc, #136]	; (39bc <TIM_OC1Init+0x10c>)
    3932:	4293      	cmp	r3, r2
    3934:	d007      	beq.n	3946 <TIM_OC1Init+0x96>
    3936:	687b      	ldr	r3, [r7, #4]
    3938:	4a21      	ldr	r2, [pc, #132]	; (39c0 <TIM_OC1Init+0x110>)
    393a:	4293      	cmp	r3, r2
    393c:	d003      	beq.n	3946 <TIM_OC1Init+0x96>
     (TIMx == TIM16)|| (TIMx == TIM17))
    393e:	687b      	ldr	r3, [r7, #4]
    3940:	4a20      	ldr	r2, [pc, #128]	; (39c4 <TIM_OC1Init+0x114>)
    3942:	4293      	cmp	r3, r2
    3944:	d123      	bne.n	398e <TIM_OC1Init+0xde>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NP));
    3946:	89fb      	ldrh	r3, [r7, #14]
    3948:	f023 0308 	bic.w	r3, r3, #8
    394c:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
    394e:	683b      	ldr	r3, [r7, #0]
    3950:	895a      	ldrh	r2, [r3, #10]
    3952:	89fb      	ldrh	r3, [r7, #14]
    3954:	4313      	orrs	r3, r2
    3956:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NE));    
    3958:	89fb      	ldrh	r3, [r7, #14]
    395a:	f023 0304 	bic.w	r3, r3, #4
    395e:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    3960:	683b      	ldr	r3, [r7, #0]
    3962:	889a      	ldrh	r2, [r3, #4]
    3964:	89fb      	ldrh	r3, [r7, #14]
    3966:	4313      	orrs	r3, r2
    3968:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1));
    396a:	89bb      	ldrh	r3, [r7, #12]
    396c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    3970:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1N));
    3972:	89bb      	ldrh	r3, [r7, #12]
    3974:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    3978:	81bb      	strh	r3, [r7, #12]
    
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
    397a:	683b      	ldr	r3, [r7, #0]
    397c:	899a      	ldrh	r2, [r3, #12]
    397e:	89bb      	ldrh	r3, [r7, #12]
    3980:	4313      	orrs	r3, r2
    3982:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
    3984:	683b      	ldr	r3, [r7, #0]
    3986:	89da      	ldrh	r2, [r3, #14]
    3988:	89bb      	ldrh	r3, [r7, #12]
    398a:	4313      	orrs	r3, r2
    398c:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
    398e:	687b      	ldr	r3, [r7, #4]
    3990:	89ba      	ldrh	r2, [r7, #12]
    3992:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
    3994:	687b      	ldr	r3, [r7, #4]
    3996:	897a      	ldrh	r2, [r7, #10]
    3998:	831a      	strh	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse; 
    399a:	683b      	ldr	r3, [r7, #0]
    399c:	88da      	ldrh	r2, [r3, #6]
    399e:	687b      	ldr	r3, [r7, #4]
    39a0:	869a      	strh	r2, [r3, #52]	; 0x34
 
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
    39a2:	687b      	ldr	r3, [r7, #4]
    39a4:	89fa      	ldrh	r2, [r7, #14]
    39a6:	841a      	strh	r2, [r3, #32]
}
    39a8:	bf00      	nop
    39aa:	3714      	adds	r7, #20
    39ac:	46bd      	mov	sp, r7
    39ae:	bc80      	pop	{r7}
    39b0:	4770      	bx	lr
    39b2:	bf00      	nop
    39b4:	40012c00 	.word	0x40012c00
    39b8:	40013400 	.word	0x40013400
    39bc:	40014000 	.word	0x40014000
    39c0:	40014400 	.word	0x40014400
    39c4:	40014800 	.word	0x40014800

000039c8 <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
    39c8:	b480      	push	{r7}
    39ca:	b085      	sub	sp, #20
    39cc:	af00      	add	r7, sp, #0
    39ce:	6078      	str	r0, [r7, #4]
    39d0:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
    39d2:	2300      	movs	r3, #0
    39d4:	817b      	strh	r3, [r7, #10]
    39d6:	2300      	movs	r3, #0
    39d8:	81fb      	strh	r3, [r7, #14]
    39da:	2300      	movs	r3, #0
    39dc:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_LIST6_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
   /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC2E));
    39de:	687b      	ldr	r3, [r7, #4]
    39e0:	8c1b      	ldrh	r3, [r3, #32]
    39e2:	b29b      	uxth	r3, r3
    39e4:	f023 0310 	bic.w	r3, r3, #16
    39e8:	b29a      	uxth	r2, r3
    39ea:	687b      	ldr	r3, [r7, #4]
    39ec:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
    39ee:	687b      	ldr	r3, [r7, #4]
    39f0:	8c1b      	ldrh	r3, [r3, #32]
    39f2:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
    39f4:	687b      	ldr	r3, [r7, #4]
    39f6:	889b      	ldrh	r3, [r3, #4]
    39f8:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    39fa:	687b      	ldr	r3, [r7, #4]
    39fc:	8b1b      	ldrh	r3, [r3, #24]
    39fe:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC2M));
    3a00:	897b      	ldrh	r3, [r7, #10]
    3a02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
    3a06:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S));
    3a08:	897b      	ldrh	r3, [r7, #10]
    3a0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    3a0e:	817b      	strh	r3, [r7, #10]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
    3a10:	683b      	ldr	r3, [r7, #0]
    3a12:	881b      	ldrh	r3, [r3, #0]
    3a14:	021b      	lsls	r3, r3, #8
    3a16:	b29a      	uxth	r2, r3
    3a18:	897b      	ldrh	r3, [r7, #10]
    3a1a:	4313      	orrs	r3, r2
    3a1c:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2P));
    3a1e:	89fb      	ldrh	r3, [r7, #14]
    3a20:	f023 0320 	bic.w	r3, r3, #32
    3a24:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
    3a26:	683b      	ldr	r3, [r7, #0]
    3a28:	891b      	ldrh	r3, [r3, #8]
    3a2a:	011b      	lsls	r3, r3, #4
    3a2c:	b29a      	uxth	r2, r3
    3a2e:	89fb      	ldrh	r3, [r7, #14]
    3a30:	4313      	orrs	r3, r2
    3a32:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
    3a34:	683b      	ldr	r3, [r7, #0]
    3a36:	885b      	ldrh	r3, [r3, #2]
    3a38:	011b      	lsls	r3, r3, #4
    3a3a:	b29a      	uxth	r2, r3
    3a3c:	89fb      	ldrh	r3, [r7, #14]
    3a3e:	4313      	orrs	r3, r2
    3a40:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
    3a42:	687b      	ldr	r3, [r7, #4]
    3a44:	4a22      	ldr	r2, [pc, #136]	; (3ad0 <TIM_OC2Init+0x108>)
    3a46:	4293      	cmp	r3, r2
    3a48:	d003      	beq.n	3a52 <TIM_OC2Init+0x8a>
    3a4a:	687b      	ldr	r3, [r7, #4]
    3a4c:	4a21      	ldr	r2, [pc, #132]	; (3ad4 <TIM_OC2Init+0x10c>)
    3a4e:	4293      	cmp	r3, r2
    3a50:	d12b      	bne.n	3aaa <TIM_OC2Init+0xe2>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NP));
    3a52:	89fb      	ldrh	r3, [r7, #14]
    3a54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    3a58:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
    3a5a:	683b      	ldr	r3, [r7, #0]
    3a5c:	895b      	ldrh	r3, [r3, #10]
    3a5e:	011b      	lsls	r3, r3, #4
    3a60:	b29a      	uxth	r2, r3
    3a62:	89fb      	ldrh	r3, [r7, #14]
    3a64:	4313      	orrs	r3, r2
    3a66:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NE));    
    3a68:	89fb      	ldrh	r3, [r7, #14]
    3a6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    3a6e:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
    3a70:	683b      	ldr	r3, [r7, #0]
    3a72:	889b      	ldrh	r3, [r3, #4]
    3a74:	011b      	lsls	r3, r3, #4
    3a76:	b29a      	uxth	r2, r3
    3a78:	89fb      	ldrh	r3, [r7, #14]
    3a7a:	4313      	orrs	r3, r2
    3a7c:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2));
    3a7e:	89bb      	ldrh	r3, [r7, #12]
    3a80:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    3a84:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2N));
    3a86:	89bb      	ldrh	r3, [r7, #12]
    3a88:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    3a8c:	81bb      	strh	r3, [r7, #12]
    
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
    3a8e:	683b      	ldr	r3, [r7, #0]
    3a90:	899b      	ldrh	r3, [r3, #12]
    3a92:	009b      	lsls	r3, r3, #2
    3a94:	b29a      	uxth	r2, r3
    3a96:	89bb      	ldrh	r3, [r7, #12]
    3a98:	4313      	orrs	r3, r2
    3a9a:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
    3a9c:	683b      	ldr	r3, [r7, #0]
    3a9e:	89db      	ldrh	r3, [r3, #14]
    3aa0:	009b      	lsls	r3, r3, #2
    3aa2:	b29a      	uxth	r2, r3
    3aa4:	89bb      	ldrh	r3, [r7, #12]
    3aa6:	4313      	orrs	r3, r2
    3aa8:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
    3aaa:	687b      	ldr	r3, [r7, #4]
    3aac:	89ba      	ldrh	r2, [r7, #12]
    3aae:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
    3ab0:	687b      	ldr	r3, [r7, #4]
    3ab2:	897a      	ldrh	r2, [r7, #10]
    3ab4:	831a      	strh	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
    3ab6:	683b      	ldr	r3, [r7, #0]
    3ab8:	88da      	ldrh	r2, [r3, #6]
    3aba:	687b      	ldr	r3, [r7, #4]
    3abc:	871a      	strh	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
    3abe:	687b      	ldr	r3, [r7, #4]
    3ac0:	89fa      	ldrh	r2, [r7, #14]
    3ac2:	841a      	strh	r2, [r3, #32]
}
    3ac4:	bf00      	nop
    3ac6:	3714      	adds	r7, #20
    3ac8:	46bd      	mov	sp, r7
    3aca:	bc80      	pop	{r7}
    3acc:	4770      	bx	lr
    3ace:	bf00      	nop
    3ad0:	40012c00 	.word	0x40012c00
    3ad4:	40013400 	.word	0x40013400

00003ad8 <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
    3ad8:	b480      	push	{r7}
    3ada:	b085      	sub	sp, #20
    3adc:	af00      	add	r7, sp, #0
    3ade:	6078      	str	r0, [r7, #4]
    3ae0:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
    3ae2:	2300      	movs	r3, #0
    3ae4:	817b      	strh	r3, [r7, #10]
    3ae6:	2300      	movs	r3, #0
    3ae8:	81fb      	strh	r3, [r7, #14]
    3aea:	2300      	movs	r3, #0
    3aec:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC3E));
    3aee:	687b      	ldr	r3, [r7, #4]
    3af0:	8c1b      	ldrh	r3, [r3, #32]
    3af2:	b29b      	uxth	r3, r3
    3af4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    3af8:	b29a      	uxth	r2, r3
    3afa:	687b      	ldr	r3, [r7, #4]
    3afc:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
    3afe:	687b      	ldr	r3, [r7, #4]
    3b00:	8c1b      	ldrh	r3, [r3, #32]
    3b02:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
    3b04:	687b      	ldr	r3, [r7, #4]
    3b06:	889b      	ldrh	r3, [r3, #4]
    3b08:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    3b0a:	687b      	ldr	r3, [r7, #4]
    3b0c:	8b9b      	ldrh	r3, [r3, #28]
    3b0e:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC3M));
    3b10:	897b      	ldrh	r3, [r7, #10]
    3b12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    3b16:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC3S));  
    3b18:	897b      	ldrh	r3, [r7, #10]
    3b1a:	f023 0303 	bic.w	r3, r3, #3
    3b1e:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
    3b20:	683b      	ldr	r3, [r7, #0]
    3b22:	881a      	ldrh	r2, [r3, #0]
    3b24:	897b      	ldrh	r3, [r7, #10]
    3b26:	4313      	orrs	r3, r2
    3b28:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
    3b2a:	89fb      	ldrh	r3, [r7, #14]
    3b2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    3b30:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
    3b32:	683b      	ldr	r3, [r7, #0]
    3b34:	891b      	ldrh	r3, [r3, #8]
    3b36:	021b      	lsls	r3, r3, #8
    3b38:	b29a      	uxth	r2, r3
    3b3a:	89fb      	ldrh	r3, [r7, #14]
    3b3c:	4313      	orrs	r3, r2
    3b3e:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
    3b40:	683b      	ldr	r3, [r7, #0]
    3b42:	885b      	ldrh	r3, [r3, #2]
    3b44:	021b      	lsls	r3, r3, #8
    3b46:	b29a      	uxth	r2, r3
    3b48:	89fb      	ldrh	r3, [r7, #14]
    3b4a:	4313      	orrs	r3, r2
    3b4c:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
    3b4e:	687b      	ldr	r3, [r7, #4]
    3b50:	4a22      	ldr	r2, [pc, #136]	; (3bdc <TIM_OC3Init+0x104>)
    3b52:	4293      	cmp	r3, r2
    3b54:	d003      	beq.n	3b5e <TIM_OC3Init+0x86>
    3b56:	687b      	ldr	r3, [r7, #4]
    3b58:	4a21      	ldr	r2, [pc, #132]	; (3be0 <TIM_OC3Init+0x108>)
    3b5a:	4293      	cmp	r3, r2
    3b5c:	d12b      	bne.n	3bb6 <TIM_OC3Init+0xde>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NP));
    3b5e:	89fb      	ldrh	r3, [r7, #14]
    3b60:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    3b64:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
    3b66:	683b      	ldr	r3, [r7, #0]
    3b68:	895b      	ldrh	r3, [r3, #10]
    3b6a:	021b      	lsls	r3, r3, #8
    3b6c:	b29a      	uxth	r2, r3
    3b6e:	89fb      	ldrh	r3, [r7, #14]
    3b70:	4313      	orrs	r3, r2
    3b72:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NE));
    3b74:	89fb      	ldrh	r3, [r7, #14]
    3b76:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    3b7a:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
    3b7c:	683b      	ldr	r3, [r7, #0]
    3b7e:	889b      	ldrh	r3, [r3, #4]
    3b80:	021b      	lsls	r3, r3, #8
    3b82:	b29a      	uxth	r2, r3
    3b84:	89fb      	ldrh	r3, [r7, #14]
    3b86:	4313      	orrs	r3, r2
    3b88:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3));
    3b8a:	89bb      	ldrh	r3, [r7, #12]
    3b8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    3b90:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3N));
    3b92:	89bb      	ldrh	r3, [r7, #12]
    3b94:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    3b98:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    3b9a:	683b      	ldr	r3, [r7, #0]
    3b9c:	899b      	ldrh	r3, [r3, #12]
    3b9e:	011b      	lsls	r3, r3, #4
    3ba0:	b29a      	uxth	r2, r3
    3ba2:	89bb      	ldrh	r3, [r7, #12]
    3ba4:	4313      	orrs	r3, r2
    3ba6:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
    3ba8:	683b      	ldr	r3, [r7, #0]
    3baa:	89db      	ldrh	r3, [r3, #14]
    3bac:	011b      	lsls	r3, r3, #4
    3bae:	b29a      	uxth	r2, r3
    3bb0:	89bb      	ldrh	r3, [r7, #12]
    3bb2:	4313      	orrs	r3, r2
    3bb4:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
    3bb6:	687b      	ldr	r3, [r7, #4]
    3bb8:	89ba      	ldrh	r2, [r7, #12]
    3bba:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
    3bbc:	687b      	ldr	r3, [r7, #4]
    3bbe:	897a      	ldrh	r2, [r7, #10]
    3bc0:	839a      	strh	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
    3bc2:	683b      	ldr	r3, [r7, #0]
    3bc4:	88da      	ldrh	r2, [r3, #6]
    3bc6:	687b      	ldr	r3, [r7, #4]
    3bc8:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
    3bca:	687b      	ldr	r3, [r7, #4]
    3bcc:	89fa      	ldrh	r2, [r7, #14]
    3bce:	841a      	strh	r2, [r3, #32]
}
    3bd0:	bf00      	nop
    3bd2:	3714      	adds	r7, #20
    3bd4:	46bd      	mov	sp, r7
    3bd6:	bc80      	pop	{r7}
    3bd8:	4770      	bx	lr
    3bda:	bf00      	nop
    3bdc:	40012c00 	.word	0x40012c00
    3be0:	40013400 	.word	0x40013400

00003be4 <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
    3be4:	b480      	push	{r7}
    3be6:	b085      	sub	sp, #20
    3be8:	af00      	add	r7, sp, #0
    3bea:	6078      	str	r0, [r7, #4]
    3bec:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
    3bee:	2300      	movs	r3, #0
    3bf0:	81bb      	strh	r3, [r7, #12]
    3bf2:	2300      	movs	r3, #0
    3bf4:	817b      	strh	r3, [r7, #10]
    3bf6:	2300      	movs	r3, #0
    3bf8:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC4E));
    3bfa:	687b      	ldr	r3, [r7, #4]
    3bfc:	8c1b      	ldrh	r3, [r3, #32]
    3bfe:	b29b      	uxth	r3, r3
    3c00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    3c04:	b29a      	uxth	r2, r3
    3c06:	687b      	ldr	r3, [r7, #4]
    3c08:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
    3c0a:	687b      	ldr	r3, [r7, #4]
    3c0c:	8c1b      	ldrh	r3, [r3, #32]
    3c0e:	817b      	strh	r3, [r7, #10]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
    3c10:	687b      	ldr	r3, [r7, #4]
    3c12:	889b      	ldrh	r3, [r3, #4]
    3c14:	81fb      	strh	r3, [r7, #14]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    3c16:	687b      	ldr	r3, [r7, #4]
    3c18:	8b9b      	ldrh	r3, [r3, #28]
    3c1a:	81bb      	strh	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC4M));
    3c1c:	89bb      	ldrh	r3, [r7, #12]
    3c1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
    3c22:	81bb      	strh	r3, [r7, #12]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC4S));
    3c24:	89bb      	ldrh	r3, [r7, #12]
    3c26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    3c2a:	81bb      	strh	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
    3c2c:	683b      	ldr	r3, [r7, #0]
    3c2e:	881b      	ldrh	r3, [r3, #0]
    3c30:	021b      	lsls	r3, r3, #8
    3c32:	b29a      	uxth	r2, r3
    3c34:	89bb      	ldrh	r3, [r7, #12]
    3c36:	4313      	orrs	r3, r2
    3c38:	81bb      	strh	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
    3c3a:	897b      	ldrh	r3, [r7, #10]
    3c3c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    3c40:	817b      	strh	r3, [r7, #10]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
    3c42:	683b      	ldr	r3, [r7, #0]
    3c44:	891b      	ldrh	r3, [r3, #8]
    3c46:	031b      	lsls	r3, r3, #12
    3c48:	b29a      	uxth	r2, r3
    3c4a:	897b      	ldrh	r3, [r7, #10]
    3c4c:	4313      	orrs	r3, r2
    3c4e:	817b      	strh	r3, [r7, #10]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
    3c50:	683b      	ldr	r3, [r7, #0]
    3c52:	885b      	ldrh	r3, [r3, #2]
    3c54:	031b      	lsls	r3, r3, #12
    3c56:	b29a      	uxth	r2, r3
    3c58:	897b      	ldrh	r3, [r7, #10]
    3c5a:	4313      	orrs	r3, r2
    3c5c:	817b      	strh	r3, [r7, #10]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
    3c5e:	687b      	ldr	r3, [r7, #4]
    3c60:	4a12      	ldr	r2, [pc, #72]	; (3cac <TIM_OC4Init+0xc8>)
    3c62:	4293      	cmp	r3, r2
    3c64:	d003      	beq.n	3c6e <TIM_OC4Init+0x8a>
    3c66:	687b      	ldr	r3, [r7, #4]
    3c68:	4a11      	ldr	r2, [pc, #68]	; (3cb0 <TIM_OC4Init+0xcc>)
    3c6a:	4293      	cmp	r3, r2
    3c6c:	d10a      	bne.n	3c84 <TIM_OC4Init+0xa0>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS4));
    3c6e:	89fb      	ldrh	r3, [r7, #14]
    3c70:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    3c74:	81fb      	strh	r3, [r7, #14]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
    3c76:	683b      	ldr	r3, [r7, #0]
    3c78:	899b      	ldrh	r3, [r3, #12]
    3c7a:	019b      	lsls	r3, r3, #6
    3c7c:	b29a      	uxth	r2, r3
    3c7e:	89fb      	ldrh	r3, [r7, #14]
    3c80:	4313      	orrs	r3, r2
    3c82:	81fb      	strh	r3, [r7, #14]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
    3c84:	687b      	ldr	r3, [r7, #4]
    3c86:	89fa      	ldrh	r2, [r7, #14]
    3c88:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
    3c8a:	687b      	ldr	r3, [r7, #4]
    3c8c:	89ba      	ldrh	r2, [r7, #12]
    3c8e:	839a      	strh	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
    3c90:	683b      	ldr	r3, [r7, #0]
    3c92:	88da      	ldrh	r2, [r3, #6]
    3c94:	687b      	ldr	r3, [r7, #4]
    3c96:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
    3c9a:	687b      	ldr	r3, [r7, #4]
    3c9c:	897a      	ldrh	r2, [r7, #10]
    3c9e:	841a      	strh	r2, [r3, #32]
}
    3ca0:	bf00      	nop
    3ca2:	3714      	adds	r7, #20
    3ca4:	46bd      	mov	sp, r7
    3ca6:	bc80      	pop	{r7}
    3ca8:	4770      	bx	lr
    3caa:	bf00      	nop
    3cac:	40012c00 	.word	0x40012c00
    3cb0:	40013400 	.word	0x40013400

00003cb4 <TIM_ICInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
    3cb4:	b580      	push	{r7, lr}
    3cb6:	b082      	sub	sp, #8
    3cb8:	af00      	add	r7, sp, #0
    3cba:	6078      	str	r0, [r7, #4]
    3cbc:	6039      	str	r1, [r7, #0]
  }
  else
  {
    assert_param(IS_TIM_IC_POLARITY_LITE(TIM_ICInitStruct->TIM_ICPolarity));
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
    3cbe:	683b      	ldr	r3, [r7, #0]
    3cc0:	881b      	ldrh	r3, [r3, #0]
    3cc2:	2b00      	cmp	r3, #0
    3cc4:	d10f      	bne.n	3ce6 <TIM_ICInit+0x32>
  {
    assert_param(IS_TIM_LIST8_PERIPH(TIMx));
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
    3cc6:	683b      	ldr	r3, [r7, #0]
    3cc8:	8859      	ldrh	r1, [r3, #2]
    3cca:	683b      	ldr	r3, [r7, #0]
    3ccc:	889a      	ldrh	r2, [r3, #4]
    3cce:	683b      	ldr	r3, [r7, #0]
    3cd0:	891b      	ldrh	r3, [r3, #8]
    3cd2:	6878      	ldr	r0, [r7, #4]
    3cd4:	f001 f947 	bl	4f66 <TI1_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    3cd8:	683b      	ldr	r3, [r7, #0]
    3cda:	88db      	ldrh	r3, [r3, #6]
    3cdc:	4619      	mov	r1, r3
    3cde:	6878      	ldr	r0, [r7, #4]
    3ce0:	f001 f809 	bl	4cf6 <TIM_SetIC1Prescaler>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
    3ce4:	e036      	b.n	3d54 <TIM_ICInit+0xa0>
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
    3ce6:	683b      	ldr	r3, [r7, #0]
    3ce8:	881b      	ldrh	r3, [r3, #0]
    3cea:	2b04      	cmp	r3, #4
    3cec:	d10f      	bne.n	3d0e <TIM_ICInit+0x5a>
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
    3cee:	683b      	ldr	r3, [r7, #0]
    3cf0:	8859      	ldrh	r1, [r3, #2]
    3cf2:	683b      	ldr	r3, [r7, #0]
    3cf4:	889a      	ldrh	r2, [r3, #4]
    3cf6:	683b      	ldr	r3, [r7, #0]
    3cf8:	891b      	ldrh	r3, [r3, #8]
    3cfa:	6878      	ldr	r0, [r7, #4]
    3cfc:	f001 f9a4 	bl	5048 <TI2_Config>
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    3d00:	683b      	ldr	r3, [r7, #0]
    3d02:	88db      	ldrh	r3, [r3, #6]
    3d04:	4619      	mov	r1, r3
    3d06:	6878      	ldr	r0, [r7, #4]
    3d08:	f001 f810 	bl	4d2c <TIM_SetIC2Prescaler>
}
    3d0c:	e022      	b.n	3d54 <TIM_ICInit+0xa0>
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
    3d0e:	683b      	ldr	r3, [r7, #0]
    3d10:	881b      	ldrh	r3, [r3, #0]
    3d12:	2b08      	cmp	r3, #8
    3d14:	d10f      	bne.n	3d36 <TIM_ICInit+0x82>
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
    3d16:	683b      	ldr	r3, [r7, #0]
    3d18:	8859      	ldrh	r1, [r3, #2]
    3d1a:	683b      	ldr	r3, [r7, #0]
    3d1c:	889a      	ldrh	r2, [r3, #4]
    3d1e:	683b      	ldr	r3, [r7, #0]
    3d20:	891b      	ldrh	r3, [r3, #8]
    3d22:	6878      	ldr	r0, [r7, #4]
    3d24:	f001 fa0a 	bl	513c <TI3_Config>
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    3d28:	683b      	ldr	r3, [r7, #0]
    3d2a:	88db      	ldrh	r3, [r3, #6]
    3d2c:	4619      	mov	r1, r3
    3d2e:	6878      	ldr	r0, [r7, #4]
    3d30:	f001 f819 	bl	4d66 <TIM_SetIC3Prescaler>
}
    3d34:	e00e      	b.n	3d54 <TIM_ICInit+0xa0>
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
    3d36:	683b      	ldr	r3, [r7, #0]
    3d38:	8859      	ldrh	r1, [r3, #2]
    3d3a:	683b      	ldr	r3, [r7, #0]
    3d3c:	889a      	ldrh	r2, [r3, #4]
    3d3e:	683b      	ldr	r3, [r7, #0]
    3d40:	891b      	ldrh	r3, [r3, #8]
    3d42:	6878      	ldr	r0, [r7, #4]
    3d44:	f001 fa70 	bl	5228 <TI4_Config>
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    3d48:	683b      	ldr	r3, [r7, #0]
    3d4a:	88db      	ldrh	r3, [r3, #6]
    3d4c:	4619      	mov	r1, r3
    3d4e:	6878      	ldr	r0, [r7, #4]
    3d50:	f001 f824 	bl	4d9c <TIM_SetIC4Prescaler>
}
    3d54:	bf00      	nop
    3d56:	3708      	adds	r7, #8
    3d58:	46bd      	mov	sp, r7
    3d5a:	bd80      	pop	{r7, pc}

00003d5c <TIM_PWMIConfig>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
    3d5c:	b580      	push	{r7, lr}
    3d5e:	b084      	sub	sp, #16
    3d60:	af00      	add	r7, sp, #0
    3d62:	6078      	str	r0, [r7, #4]
    3d64:	6039      	str	r1, [r7, #0]
  uint16_t icoppositepolarity = TIM_ICPolarity_Rising;
    3d66:	2300      	movs	r3, #0
    3d68:	81fb      	strh	r3, [r7, #14]
  uint16_t icoppositeselection = TIM_ICSelection_DirectTI;
    3d6a:	2301      	movs	r3, #1
    3d6c:	81bb      	strh	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
    3d6e:	683b      	ldr	r3, [r7, #0]
    3d70:	885b      	ldrh	r3, [r3, #2]
    3d72:	2b00      	cmp	r3, #0
    3d74:	d102      	bne.n	3d7c <TIM_PWMIConfig+0x20>
  {
    icoppositepolarity = TIM_ICPolarity_Falling;
    3d76:	2302      	movs	r3, #2
    3d78:	81fb      	strh	r3, [r7, #14]
    3d7a:	e001      	b.n	3d80 <TIM_PWMIConfig+0x24>
  }
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
    3d7c:	2300      	movs	r3, #0
    3d7e:	81fb      	strh	r3, [r7, #14]
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
    3d80:	683b      	ldr	r3, [r7, #0]
    3d82:	889b      	ldrh	r3, [r3, #4]
    3d84:	2b01      	cmp	r3, #1
    3d86:	d102      	bne.n	3d8e <TIM_PWMIConfig+0x32>
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
    3d88:	2302      	movs	r3, #2
    3d8a:	81bb      	strh	r3, [r7, #12]
    3d8c:	e001      	b.n	3d92 <TIM_PWMIConfig+0x36>
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
    3d8e:	2301      	movs	r3, #1
    3d90:	81bb      	strh	r3, [r7, #12]
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
    3d92:	683b      	ldr	r3, [r7, #0]
    3d94:	881b      	ldrh	r3, [r3, #0]
    3d96:	2b00      	cmp	r3, #0
    3d98:	d11c      	bne.n	3dd4 <TIM_PWMIConfig+0x78>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
    3d9a:	683b      	ldr	r3, [r7, #0]
    3d9c:	8859      	ldrh	r1, [r3, #2]
    3d9e:	683b      	ldr	r3, [r7, #0]
    3da0:	889a      	ldrh	r2, [r3, #4]
    3da2:	683b      	ldr	r3, [r7, #0]
    3da4:	891b      	ldrh	r3, [r3, #8]
    3da6:	6878      	ldr	r0, [r7, #4]
    3da8:	f001 f8dd 	bl	4f66 <TI1_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    3dac:	683b      	ldr	r3, [r7, #0]
    3dae:	88db      	ldrh	r3, [r3, #6]
    3db0:	4619      	mov	r1, r3
    3db2:	6878      	ldr	r0, [r7, #4]
    3db4:	f000 ff9f 	bl	4cf6 <TIM_SetIC1Prescaler>
    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    3db8:	683b      	ldr	r3, [r7, #0]
    3dba:	891b      	ldrh	r3, [r3, #8]
    3dbc:	89ba      	ldrh	r2, [r7, #12]
    3dbe:	89f9      	ldrh	r1, [r7, #14]
    3dc0:	6878      	ldr	r0, [r7, #4]
    3dc2:	f001 f941 	bl	5048 <TI2_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    3dc6:	683b      	ldr	r3, [r7, #0]
    3dc8:	88db      	ldrh	r3, [r3, #6]
    3dca:	4619      	mov	r1, r3
    3dcc:	6878      	ldr	r0, [r7, #4]
    3dce:	f000 ffad 	bl	4d2c <TIM_SetIC2Prescaler>
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
    3dd2:	e01b      	b.n	3e0c <TIM_PWMIConfig+0xb0>
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
    3dd4:	683b      	ldr	r3, [r7, #0]
    3dd6:	8859      	ldrh	r1, [r3, #2]
    3dd8:	683b      	ldr	r3, [r7, #0]
    3dda:	889a      	ldrh	r2, [r3, #4]
    3ddc:	683b      	ldr	r3, [r7, #0]
    3dde:	891b      	ldrh	r3, [r3, #8]
    3de0:	6878      	ldr	r0, [r7, #4]
    3de2:	f001 f931 	bl	5048 <TI2_Config>
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    3de6:	683b      	ldr	r3, [r7, #0]
    3de8:	88db      	ldrh	r3, [r3, #6]
    3dea:	4619      	mov	r1, r3
    3dec:	6878      	ldr	r0, [r7, #4]
    3dee:	f000 ff9d 	bl	4d2c <TIM_SetIC2Prescaler>
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    3df2:	683b      	ldr	r3, [r7, #0]
    3df4:	891b      	ldrh	r3, [r3, #8]
    3df6:	89ba      	ldrh	r2, [r7, #12]
    3df8:	89f9      	ldrh	r1, [r7, #14]
    3dfa:	6878      	ldr	r0, [r7, #4]
    3dfc:	f001 f8b3 	bl	4f66 <TI1_Config>
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    3e00:	683b      	ldr	r3, [r7, #0]
    3e02:	88db      	ldrh	r3, [r3, #6]
    3e04:	4619      	mov	r1, r3
    3e06:	6878      	ldr	r0, [r7, #4]
    3e08:	f000 ff75 	bl	4cf6 <TIM_SetIC1Prescaler>
}
    3e0c:	bf00      	nop
    3e0e:	3710      	adds	r7, #16
    3e10:	46bd      	mov	sp, r7
    3e12:	bd80      	pop	{r7, pc}

00003e14 <TIM_BDTRConfig>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure that
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval None
  */
void TIM_BDTRConfig(TIM_TypeDef* TIMx, TIM_BDTRInitTypeDef *TIM_BDTRInitStruct)
{
    3e14:	b480      	push	{r7}
    3e16:	b083      	sub	sp, #12
    3e18:	af00      	add	r7, sp, #0
    3e1a:	6078      	str	r0, [r7, #4]
    3e1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
  /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
    3e1e:	683b      	ldr	r3, [r7, #0]
    3e20:	881a      	ldrh	r2, [r3, #0]
    3e22:	683b      	ldr	r3, [r7, #0]
    3e24:	885b      	ldrh	r3, [r3, #2]
    3e26:	4313      	orrs	r3, r2
    3e28:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
    3e2a:	683b      	ldr	r3, [r7, #0]
    3e2c:	889b      	ldrh	r3, [r3, #4]
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
    3e2e:	4313      	orrs	r3, r2
    3e30:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
    3e32:	683b      	ldr	r3, [r7, #0]
    3e34:	88db      	ldrh	r3, [r3, #6]
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
    3e36:	4313      	orrs	r3, r2
    3e38:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
    3e3a:	683b      	ldr	r3, [r7, #0]
    3e3c:	891b      	ldrh	r3, [r3, #8]
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
    3e3e:	4313      	orrs	r3, r2
    3e40:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
    3e42:	683b      	ldr	r3, [r7, #0]
    3e44:	895b      	ldrh	r3, [r3, #10]
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
    3e46:	4313      	orrs	r3, r2
    3e48:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
    3e4a:	683b      	ldr	r3, [r7, #0]
    3e4c:	899b      	ldrh	r3, [r3, #12]
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
    3e4e:	4313      	orrs	r3, r2
    3e50:	b29a      	uxth	r2, r3
    3e52:	687b      	ldr	r3, [r7, #4]
    3e54:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
}
    3e58:	bf00      	nop
    3e5a:	370c      	adds	r7, #12
    3e5c:	46bd      	mov	sp, r7
    3e5e:	bc80      	pop	{r7}
    3e60:	4770      	bx	lr

00003e62 <TIM_TimeBaseStructInit>:
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
    3e62:	b480      	push	{r7}
    3e64:	b083      	sub	sp, #12
    3e66:	af00      	add	r7, sp, #0
    3e68:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFF;
    3e6a:	687b      	ldr	r3, [r7, #4]
    3e6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
    3e70:	809a      	strh	r2, [r3, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
    3e72:	687b      	ldr	r3, [r7, #4]
    3e74:	2200      	movs	r2, #0
    3e76:	801a      	strh	r2, [r3, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
    3e78:	687b      	ldr	r3, [r7, #4]
    3e7a:	2200      	movs	r2, #0
    3e7c:	80da      	strh	r2, [r3, #6]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
    3e7e:	687b      	ldr	r3, [r7, #4]
    3e80:	2200      	movs	r2, #0
    3e82:	805a      	strh	r2, [r3, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
    3e84:	687b      	ldr	r3, [r7, #4]
    3e86:	2200      	movs	r2, #0
    3e88:	721a      	strb	r2, [r3, #8]
}
    3e8a:	bf00      	nop
    3e8c:	370c      	adds	r7, #12
    3e8e:	46bd      	mov	sp, r7
    3e90:	bc80      	pop	{r7}
    3e92:	4770      	bx	lr

00003e94 <TIM_OCStructInit>:
  * @param  TIM_OCInitStruct : pointer to a TIM_OCInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
    3e94:	b480      	push	{r7}
    3e96:	b083      	sub	sp, #12
    3e98:	af00      	add	r7, sp, #0
    3e9a:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
    3e9c:	687b      	ldr	r3, [r7, #4]
    3e9e:	2200      	movs	r2, #0
    3ea0:	801a      	strh	r2, [r3, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
    3ea2:	687b      	ldr	r3, [r7, #4]
    3ea4:	2200      	movs	r2, #0
    3ea6:	805a      	strh	r2, [r3, #2]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
    3ea8:	687b      	ldr	r3, [r7, #4]
    3eaa:	2200      	movs	r2, #0
    3eac:	809a      	strh	r2, [r3, #4]
  TIM_OCInitStruct->TIM_Pulse = 0x0000;
    3eae:	687b      	ldr	r3, [r7, #4]
    3eb0:	2200      	movs	r2, #0
    3eb2:	80da      	strh	r2, [r3, #6]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
    3eb4:	687b      	ldr	r3, [r7, #4]
    3eb6:	2200      	movs	r2, #0
    3eb8:	811a      	strh	r2, [r3, #8]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
    3eba:	687b      	ldr	r3, [r7, #4]
    3ebc:	2200      	movs	r2, #0
    3ebe:	815a      	strh	r2, [r3, #10]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
    3ec0:	687b      	ldr	r3, [r7, #4]
    3ec2:	2200      	movs	r2, #0
    3ec4:	819a      	strh	r2, [r3, #12]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
    3ec6:	687b      	ldr	r3, [r7, #4]
    3ec8:	2200      	movs	r2, #0
    3eca:	81da      	strh	r2, [r3, #14]
}
    3ecc:	bf00      	nop
    3ece:	370c      	adds	r7, #12
    3ed0:	46bd      	mov	sp, r7
    3ed2:	bc80      	pop	{r7}
    3ed4:	4770      	bx	lr

00003ed6 <TIM_ICStructInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
    3ed6:	b480      	push	{r7}
    3ed8:	b083      	sub	sp, #12
    3eda:	af00      	add	r7, sp, #0
    3edc:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
    3ede:	687b      	ldr	r3, [r7, #4]
    3ee0:	2200      	movs	r2, #0
    3ee2:	801a      	strh	r2, [r3, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
    3ee4:	687b      	ldr	r3, [r7, #4]
    3ee6:	2200      	movs	r2, #0
    3ee8:	805a      	strh	r2, [r3, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
    3eea:	687b      	ldr	r3, [r7, #4]
    3eec:	2201      	movs	r2, #1
    3eee:	809a      	strh	r2, [r3, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
    3ef0:	687b      	ldr	r3, [r7, #4]
    3ef2:	2200      	movs	r2, #0
    3ef4:	80da      	strh	r2, [r3, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
    3ef6:	687b      	ldr	r3, [r7, #4]
    3ef8:	2200      	movs	r2, #0
    3efa:	811a      	strh	r2, [r3, #8]
}
    3efc:	bf00      	nop
    3efe:	370c      	adds	r7, #12
    3f00:	46bd      	mov	sp, r7
    3f02:	bc80      	pop	{r7}
    3f04:	4770      	bx	lr

00003f06 <TIM_BDTRStructInit>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure which
  *         will be initialized.
  * @retval None
  */
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
{
    3f06:	b480      	push	{r7}
    3f08:	b083      	sub	sp, #12
    3f0a:	af00      	add	r7, sp, #0
    3f0c:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
    3f0e:	687b      	ldr	r3, [r7, #4]
    3f10:	2200      	movs	r2, #0
    3f12:	801a      	strh	r2, [r3, #0]
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
    3f14:	687b      	ldr	r3, [r7, #4]
    3f16:	2200      	movs	r2, #0
    3f18:	805a      	strh	r2, [r3, #2]
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
    3f1a:	687b      	ldr	r3, [r7, #4]
    3f1c:	2200      	movs	r2, #0
    3f1e:	809a      	strh	r2, [r3, #4]
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
    3f20:	687b      	ldr	r3, [r7, #4]
    3f22:	2200      	movs	r2, #0
    3f24:	80da      	strh	r2, [r3, #6]
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
    3f26:	687b      	ldr	r3, [r7, #4]
    3f28:	2200      	movs	r2, #0
    3f2a:	811a      	strh	r2, [r3, #8]
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
    3f2c:	687b      	ldr	r3, [r7, #4]
    3f2e:	2200      	movs	r2, #0
    3f30:	815a      	strh	r2, [r3, #10]
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
    3f32:	687b      	ldr	r3, [r7, #4]
    3f34:	2200      	movs	r2, #0
    3f36:	819a      	strh	r2, [r3, #12]
}
    3f38:	bf00      	nop
    3f3a:	370c      	adds	r7, #12
    3f3c:	46bd      	mov	sp, r7
    3f3e:	bc80      	pop	{r7}
    3f40:	4770      	bx	lr

00003f42 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
    3f42:	b480      	push	{r7}
    3f44:	b083      	sub	sp, #12
    3f46:	af00      	add	r7, sp, #0
    3f48:	6078      	str	r0, [r7, #4]
    3f4a:	460b      	mov	r3, r1
    3f4c:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    3f4e:	78fb      	ldrb	r3, [r7, #3]
    3f50:	2b00      	cmp	r3, #0
    3f52:	d008      	beq.n	3f66 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
    3f54:	687b      	ldr	r3, [r7, #4]
    3f56:	881b      	ldrh	r3, [r3, #0]
    3f58:	b29b      	uxth	r3, r3
    3f5a:	f043 0301 	orr.w	r3, r3, #1
    3f5e:	b29a      	uxth	r2, r3
    3f60:	687b      	ldr	r3, [r7, #4]
    3f62:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
  }
}
    3f64:	e007      	b.n	3f76 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
    3f66:	687b      	ldr	r3, [r7, #4]
    3f68:	881b      	ldrh	r3, [r3, #0]
    3f6a:	b29b      	uxth	r3, r3
    3f6c:	f023 0301 	bic.w	r3, r3, #1
    3f70:	b29a      	uxth	r2, r3
    3f72:	687b      	ldr	r3, [r7, #4]
    3f74:	801a      	strh	r2, [r3, #0]
}
    3f76:	bf00      	nop
    3f78:	370c      	adds	r7, #12
    3f7a:	46bd      	mov	sp, r7
    3f7c:	bc80      	pop	{r7}
    3f7e:	4770      	bx	lr

00003f80 <TIM_CtrlPWMOutputs>:
  * @param  NewState: new state of the TIM peripheral Main Outputs.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
    3f80:	b480      	push	{r7}
    3f82:	b083      	sub	sp, #12
    3f84:	af00      	add	r7, sp, #0
    3f86:	6078      	str	r0, [r7, #4]
    3f88:	460b      	mov	r3, r1
    3f8a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    3f8c:	78fb      	ldrb	r3, [r7, #3]
    3f8e:	2b00      	cmp	r3, #0
    3f90:	d00c      	beq.n	3fac <TIM_CtrlPWMOutputs+0x2c>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
    3f92:	687b      	ldr	r3, [r7, #4]
    3f94:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
    3f98:	b29b      	uxth	r3, r3
    3f9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    3f9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    3fa2:	b29a      	uxth	r2, r3
    3fa4:	687b      	ldr	r3, [r7, #4]
    3fa6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)(~((uint16_t)TIM_BDTR_MOE));
  }  
}
    3faa:	e009      	b.n	3fc0 <TIM_CtrlPWMOutputs+0x40>
    TIMx->BDTR &= (uint16_t)(~((uint16_t)TIM_BDTR_MOE));
    3fac:	687b      	ldr	r3, [r7, #4]
    3fae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
    3fb2:	b29b      	uxth	r3, r3
    3fb4:	f3c3 030e 	ubfx	r3, r3, #0, #15
    3fb8:	b29a      	uxth	r2, r3
    3fba:	687b      	ldr	r3, [r7, #4]
    3fbc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
}
    3fc0:	bf00      	nop
    3fc2:	370c      	adds	r7, #12
    3fc4:	46bd      	mov	sp, r7
    3fc6:	bc80      	pop	{r7}
    3fc8:	4770      	bx	lr

00003fca <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
    3fca:	b480      	push	{r7}
    3fcc:	b083      	sub	sp, #12
    3fce:	af00      	add	r7, sp, #0
    3fd0:	6078      	str	r0, [r7, #4]
    3fd2:	460b      	mov	r3, r1
    3fd4:	807b      	strh	r3, [r7, #2]
    3fd6:	4613      	mov	r3, r2
    3fd8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    3fda:	787b      	ldrb	r3, [r7, #1]
    3fdc:	2b00      	cmp	r3, #0
    3fde:	d008      	beq.n	3ff2 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
    3fe0:	687b      	ldr	r3, [r7, #4]
    3fe2:	899b      	ldrh	r3, [r3, #12]
    3fe4:	b29a      	uxth	r2, r3
    3fe6:	887b      	ldrh	r3, [r7, #2]
    3fe8:	4313      	orrs	r3, r2
    3fea:	b29a      	uxth	r2, r3
    3fec:	687b      	ldr	r3, [r7, #4]
    3fee:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
    3ff0:	e009      	b.n	4006 <TIM_ITConfig+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_IT;
    3ff2:	687b      	ldr	r3, [r7, #4]
    3ff4:	899b      	ldrh	r3, [r3, #12]
    3ff6:	b29a      	uxth	r2, r3
    3ff8:	887b      	ldrh	r3, [r7, #2]
    3ffa:	43db      	mvns	r3, r3
    3ffc:	b29b      	uxth	r3, r3
    3ffe:	4013      	ands	r3, r2
    4000:	b29a      	uxth	r2, r3
    4002:	687b      	ldr	r3, [r7, #4]
    4004:	819a      	strh	r2, [r3, #12]
}
    4006:	bf00      	nop
    4008:	370c      	adds	r7, #12
    400a:	46bd      	mov	sp, r7
    400c:	bc80      	pop	{r7}
    400e:	4770      	bx	lr

00004010 <TIM_GenerateEvent>:
  *   - TIM6 and TIM7 can only generate an update event. 
  *   - TIM_EventSource_COM and TIM_EventSource_Break are used only with TIM1 and TIM8.      
  * @retval None
  */
void TIM_GenerateEvent(TIM_TypeDef* TIMx, uint16_t TIM_EventSource)
{ 
    4010:	b480      	push	{r7}
    4012:	b083      	sub	sp, #12
    4014:	af00      	add	r7, sp, #0
    4016:	6078      	str	r0, [r7, #4]
    4018:	460b      	mov	r3, r1
    401a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
  
  /* Set the event sources */
  TIMx->EGR = TIM_EventSource;
    401c:	687b      	ldr	r3, [r7, #4]
    401e:	887a      	ldrh	r2, [r7, #2]
    4020:	829a      	strh	r2, [r3, #20]
}
    4022:	bf00      	nop
    4024:	370c      	adds	r7, #12
    4026:	46bd      	mov	sp, r7
    4028:	bc80      	pop	{r7}
    402a:	4770      	bx	lr

0000402c <TIM_DMAConfig>:
  *   This parameter can be one value between:
  *   TIM_DMABurstLength_1Transfer and TIM_DMABurstLength_18Transfers.
  * @retval None
  */
void TIM_DMAConfig(TIM_TypeDef* TIMx, uint16_t TIM_DMABase, uint16_t TIM_DMABurstLength)
{
    402c:	b480      	push	{r7}
    402e:	b083      	sub	sp, #12
    4030:	af00      	add	r7, sp, #0
    4032:	6078      	str	r0, [r7, #4]
    4034:	460b      	mov	r3, r1
    4036:	807b      	strh	r3, [r7, #2]
    4038:	4613      	mov	r3, r2
    403a:	803b      	strh	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_BASE(TIM_DMABase));
  assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));
  /* Set the DMA Base and the DMA Burst Length */
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
    403c:	887a      	ldrh	r2, [r7, #2]
    403e:	883b      	ldrh	r3, [r7, #0]
    4040:	4313      	orrs	r3, r2
    4042:	b29a      	uxth	r2, r3
    4044:	687b      	ldr	r3, [r7, #4]
    4046:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
}
    404a:	bf00      	nop
    404c:	370c      	adds	r7, #12
    404e:	46bd      	mov	sp, r7
    4050:	bc80      	pop	{r7}
    4052:	4770      	bx	lr

00004054 <TIM_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_DMACmd(TIM_TypeDef* TIMx, uint16_t TIM_DMASource, FunctionalState NewState)
{ 
    4054:	b480      	push	{r7}
    4056:	b083      	sub	sp, #12
    4058:	af00      	add	r7, sp, #0
    405a:	6078      	str	r0, [r7, #4]
    405c:	460b      	mov	r3, r1
    405e:	807b      	strh	r3, [r7, #2]
    4060:	4613      	mov	r3, r2
    4062:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_LIST9_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    4064:	787b      	ldrb	r3, [r7, #1]
    4066:	2b00      	cmp	r3, #0
    4068:	d008      	beq.n	407c <TIM_DMACmd+0x28>
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
    406a:	687b      	ldr	r3, [r7, #4]
    406c:	899b      	ldrh	r3, [r3, #12]
    406e:	b29a      	uxth	r2, r3
    4070:	887b      	ldrh	r3, [r7, #2]
    4072:	4313      	orrs	r3, r2
    4074:	b29a      	uxth	r2, r3
    4076:	687b      	ldr	r3, [r7, #4]
    4078:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
  }
}
    407a:	e009      	b.n	4090 <TIM_DMACmd+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
    407c:	687b      	ldr	r3, [r7, #4]
    407e:	899b      	ldrh	r3, [r3, #12]
    4080:	b29a      	uxth	r2, r3
    4082:	887b      	ldrh	r3, [r7, #2]
    4084:	43db      	mvns	r3, r3
    4086:	b29b      	uxth	r3, r3
    4088:	4013      	ands	r3, r2
    408a:	b29a      	uxth	r2, r3
    408c:	687b      	ldr	r3, [r7, #4]
    408e:	819a      	strh	r2, [r3, #12]
}
    4090:	bf00      	nop
    4092:	370c      	adds	r7, #12
    4094:	46bd      	mov	sp, r7
    4096:	bc80      	pop	{r7}
    4098:	4770      	bx	lr

0000409a <TIM_InternalClockConfig>:
  * @param  TIMx: where x can be  1, 2, 3, 4, 5, 8, 9, 12 or 15
  *         to select the TIM peripheral.
  * @retval None
  */
void TIM_InternalClockConfig(TIM_TypeDef* TIMx)
{
    409a:	b480      	push	{r7}
    409c:	b083      	sub	sp, #12
    409e:	af00      	add	r7, sp, #0
    40a0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
    40a2:	687b      	ldr	r3, [r7, #4]
    40a4:	891b      	ldrh	r3, [r3, #8]
    40a6:	b29b      	uxth	r3, r3
    40a8:	f023 0307 	bic.w	r3, r3, #7
    40ac:	b29a      	uxth	r2, r3
    40ae:	687b      	ldr	r3, [r7, #4]
    40b0:	811a      	strh	r2, [r3, #8]
}
    40b2:	bf00      	nop
    40b4:	370c      	adds	r7, #12
    40b6:	46bd      	mov	sp, r7
    40b8:	bc80      	pop	{r7}
    40ba:	4770      	bx	lr

000040bc <TIM_ITRxExternalClockConfig>:
  * @param  TIM_TS_ITR2: Internal Trigger 2
  * @param  TIM_TS_ITR3: Internal Trigger 3
  * @retval None
  */
void TIM_ITRxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
    40bc:	b580      	push	{r7, lr}
    40be:	b082      	sub	sp, #8
    40c0:	af00      	add	r7, sp, #0
    40c2:	6078      	str	r0, [r7, #4]
    40c4:	460b      	mov	r3, r1
    40c6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_INTERNAL_TRIGGER_SELECTION(TIM_InputTriggerSource));
  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);
    40c8:	887b      	ldrh	r3, [r7, #2]
    40ca:	4619      	mov	r1, r3
    40cc:	6878      	ldr	r0, [r7, #4]
    40ce:	f000 f8df 	bl	4290 <TIM_SelectInputTrigger>
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
    40d2:	687b      	ldr	r3, [r7, #4]
    40d4:	891b      	ldrh	r3, [r3, #8]
    40d6:	b29b      	uxth	r3, r3
    40d8:	f043 0307 	orr.w	r3, r3, #7
    40dc:	b29a      	uxth	r2, r3
    40de:	687b      	ldr	r3, [r7, #4]
    40e0:	811a      	strh	r2, [r3, #8]
}
    40e2:	bf00      	nop
    40e4:	3708      	adds	r7, #8
    40e6:	46bd      	mov	sp, r7
    40e8:	bd80      	pop	{r7, pc}

000040ea <TIM_TIxExternalClockConfig>:
  *   This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
    40ea:	b580      	push	{r7, lr}
    40ec:	b084      	sub	sp, #16
    40ee:	af00      	add	r7, sp, #0
    40f0:	60f8      	str	r0, [r7, #12]
    40f2:	4608      	mov	r0, r1
    40f4:	4611      	mov	r1, r2
    40f6:	461a      	mov	r2, r3
    40f8:	4603      	mov	r3, r0
    40fa:	817b      	strh	r3, [r7, #10]
    40fc:	460b      	mov	r3, r1
    40fe:	813b      	strh	r3, [r7, #8]
    4100:	4613      	mov	r3, r2
    4102:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_TIXCLK_SOURCE(TIM_TIxExternalCLKSource));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));
  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
    4104:	897b      	ldrh	r3, [r7, #10]
    4106:	2b60      	cmp	r3, #96	; 0x60
    4108:	d106      	bne.n	4118 <TIM_TIxExternalClockConfig+0x2e>
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
    410a:	88fb      	ldrh	r3, [r7, #6]
    410c:	8939      	ldrh	r1, [r7, #8]
    410e:	2201      	movs	r2, #1
    4110:	68f8      	ldr	r0, [r7, #12]
    4112:	f000 ff99 	bl	5048 <TI2_Config>
    4116:	e005      	b.n	4124 <TIM_TIxExternalClockConfig+0x3a>
  }
  else
  {
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
    4118:	88fb      	ldrh	r3, [r7, #6]
    411a:	8939      	ldrh	r1, [r7, #8]
    411c:	2201      	movs	r2, #1
    411e:	68f8      	ldr	r0, [r7, #12]
    4120:	f000 ff21 	bl	4f66 <TI1_Config>
  }
  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
    4124:	897b      	ldrh	r3, [r7, #10]
    4126:	4619      	mov	r1, r3
    4128:	68f8      	ldr	r0, [r7, #12]
    412a:	f000 f8b1 	bl	4290 <TIM_SelectInputTrigger>
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
    412e:	68fb      	ldr	r3, [r7, #12]
    4130:	891b      	ldrh	r3, [r3, #8]
    4132:	b29b      	uxth	r3, r3
    4134:	f043 0307 	orr.w	r3, r3, #7
    4138:	b29a      	uxth	r2, r3
    413a:	68fb      	ldr	r3, [r7, #12]
    413c:	811a      	strh	r2, [r3, #8]
}
    413e:	bf00      	nop
    4140:	3710      	adds	r7, #16
    4142:	46bd      	mov	sp, r7
    4144:	bd80      	pop	{r7, pc}

00004146 <TIM_ETRClockMode1Config>:
  *   This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPolarity,
                             uint16_t ExtTRGFilter)
{
    4146:	b580      	push	{r7, lr}
    4148:	b086      	sub	sp, #24
    414a:	af00      	add	r7, sp, #0
    414c:	60f8      	str	r0, [r7, #12]
    414e:	4608      	mov	r0, r1
    4150:	4611      	mov	r1, r2
    4152:	461a      	mov	r2, r3
    4154:	4603      	mov	r3, r0
    4156:	817b      	strh	r3, [r7, #10]
    4158:	460b      	mov	r3, r1
    415a:	813b      	strh	r3, [r7, #8]
    415c:	4613      	mov	r3, r2
    415e:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
    4160:	2300      	movs	r3, #0
    4162:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
    4164:	88fb      	ldrh	r3, [r7, #6]
    4166:	893a      	ldrh	r2, [r7, #8]
    4168:	8979      	ldrh	r1, [r7, #10]
    416a:	68f8      	ldr	r0, [r7, #12]
    416c:	f000 f839 	bl	41e2 <TIM_ETRConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
    4170:	68fb      	ldr	r3, [r7, #12]
    4172:	891b      	ldrh	r3, [r3, #8]
    4174:	82fb      	strh	r3, [r7, #22]
  /* Reset the SMS Bits */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
    4176:	8afb      	ldrh	r3, [r7, #22]
    4178:	f023 0307 	bic.w	r3, r3, #7
    417c:	82fb      	strh	r3, [r7, #22]
  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;
    417e:	8afb      	ldrh	r3, [r7, #22]
    4180:	f043 0307 	orr.w	r3, r3, #7
    4184:	82fb      	strh	r3, [r7, #22]
  /* Select the Trigger selection : ETRF */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
    4186:	8afb      	ldrh	r3, [r7, #22]
    4188:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    418c:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_TS_ETRF;
    418e:	8afb      	ldrh	r3, [r7, #22]
    4190:	f043 0370 	orr.w	r3, r3, #112	; 0x70
    4194:	82fb      	strh	r3, [r7, #22]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
    4196:	68fb      	ldr	r3, [r7, #12]
    4198:	8afa      	ldrh	r2, [r7, #22]
    419a:	811a      	strh	r2, [r3, #8]
}
    419c:	bf00      	nop
    419e:	3718      	adds	r7, #24
    41a0:	46bd      	mov	sp, r7
    41a2:	bd80      	pop	{r7, pc}

000041a4 <TIM_ETRClockMode2Config>:
  *   This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
    41a4:	b580      	push	{r7, lr}
    41a6:	b084      	sub	sp, #16
    41a8:	af00      	add	r7, sp, #0
    41aa:	60f8      	str	r0, [r7, #12]
    41ac:	4608      	mov	r0, r1
    41ae:	4611      	mov	r1, r2
    41b0:	461a      	mov	r2, r3
    41b2:	4603      	mov	r3, r0
    41b4:	817b      	strh	r3, [r7, #10]
    41b6:	460b      	mov	r3, r1
    41b8:	813b      	strh	r3, [r7, #8]
    41ba:	4613      	mov	r3, r2
    41bc:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
    41be:	88fb      	ldrh	r3, [r7, #6]
    41c0:	893a      	ldrh	r2, [r7, #8]
    41c2:	8979      	ldrh	r1, [r7, #10]
    41c4:	68f8      	ldr	r0, [r7, #12]
    41c6:	f000 f80c 	bl	41e2 <TIM_ETRConfig>
  /* Enable the External clock mode2 */
  TIMx->SMCR |= TIM_SMCR_ECE;
    41ca:	68fb      	ldr	r3, [r7, #12]
    41cc:	891b      	ldrh	r3, [r3, #8]
    41ce:	b29b      	uxth	r3, r3
    41d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    41d4:	b29a      	uxth	r2, r3
    41d6:	68fb      	ldr	r3, [r7, #12]
    41d8:	811a      	strh	r2, [r3, #8]
}
    41da:	bf00      	nop
    41dc:	3710      	adds	r7, #16
    41de:	46bd      	mov	sp, r7
    41e0:	bd80      	pop	{r7, pc}

000041e2 <TIM_ETRConfig>:
  *   This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPolarity,
                   uint16_t ExtTRGFilter)
{
    41e2:	b480      	push	{r7}
    41e4:	b087      	sub	sp, #28
    41e6:	af00      	add	r7, sp, #0
    41e8:	60f8      	str	r0, [r7, #12]
    41ea:	4608      	mov	r0, r1
    41ec:	4611      	mov	r1, r2
    41ee:	461a      	mov	r2, r3
    41f0:	4603      	mov	r3, r0
    41f2:	817b      	strh	r3, [r7, #10]
    41f4:	460b      	mov	r3, r1
    41f6:	813b      	strh	r3, [r7, #8]
    41f8:	4613      	mov	r3, r2
    41fa:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
    41fc:	2300      	movs	r3, #0
    41fe:	82fb      	strh	r3, [r7, #22]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  tmpsmcr = TIMx->SMCR;
    4200:	68fb      	ldr	r3, [r7, #12]
    4202:	891b      	ldrh	r3, [r3, #8]
    4204:	82fb      	strh	r3, [r7, #22]
  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_Mask;
    4206:	8afb      	ldrh	r3, [r7, #22]
    4208:	b2db      	uxtb	r3, r3
    420a:	82fb      	strh	r3, [r7, #22]
  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
    420c:	88fb      	ldrh	r3, [r7, #6]
    420e:	021b      	lsls	r3, r3, #8
    4210:	b29a      	uxth	r2, r3
    4212:	893b      	ldrh	r3, [r7, #8]
    4214:	4313      	orrs	r3, r2
    4216:	b29a      	uxth	r2, r3
    4218:	897b      	ldrh	r3, [r7, #10]
    421a:	4313      	orrs	r3, r2
    421c:	b29a      	uxth	r2, r3
    421e:	8afb      	ldrh	r3, [r7, #22]
    4220:	4313      	orrs	r3, r2
    4222:	82fb      	strh	r3, [r7, #22]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
    4224:	68fb      	ldr	r3, [r7, #12]
    4226:	8afa      	ldrh	r2, [r7, #22]
    4228:	811a      	strh	r2, [r3, #8]
}
    422a:	bf00      	nop
    422c:	371c      	adds	r7, #28
    422e:	46bd      	mov	sp, r7
    4230:	bc80      	pop	{r7}
    4232:	4770      	bx	lr

00004234 <TIM_PrescalerConfig>:
  *     @arg TIM_PSCReloadMode_Update: The Prescaler is loaded at the update event.
  *     @arg TIM_PSCReloadMode_Immediate: The Prescaler is loaded immediately.
  * @retval None
  */
void TIM_PrescalerConfig(TIM_TypeDef* TIMx, uint16_t Prescaler, uint16_t TIM_PSCReloadMode)
{
    4234:	b480      	push	{r7}
    4236:	b083      	sub	sp, #12
    4238:	af00      	add	r7, sp, #0
    423a:	6078      	str	r0, [r7, #4]
    423c:	460b      	mov	r3, r1
    423e:	807b      	strh	r3, [r7, #2]
    4240:	4613      	mov	r3, r2
    4242:	803b      	strh	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
    4244:	687b      	ldr	r3, [r7, #4]
    4246:	887a      	ldrh	r2, [r7, #2]
    4248:	851a      	strh	r2, [r3, #40]	; 0x28
  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
    424a:	687b      	ldr	r3, [r7, #4]
    424c:	883a      	ldrh	r2, [r7, #0]
    424e:	829a      	strh	r2, [r3, #20]
}
    4250:	bf00      	nop
    4252:	370c      	adds	r7, #12
    4254:	46bd      	mov	sp, r7
    4256:	bc80      	pop	{r7}
    4258:	4770      	bx	lr

0000425a <TIM_CounterModeConfig>:
  *     @arg TIM_CounterMode_CenterAligned2: TIM Center Aligned Mode2
  *     @arg TIM_CounterMode_CenterAligned3: TIM Center Aligned Mode3
  * @retval None
  */
void TIM_CounterModeConfig(TIM_TypeDef* TIMx, uint16_t TIM_CounterMode)
{
    425a:	b480      	push	{r7}
    425c:	b085      	sub	sp, #20
    425e:	af00      	add	r7, sp, #0
    4260:	6078      	str	r0, [r7, #4]
    4262:	460b      	mov	r3, r1
    4264:	807b      	strh	r3, [r7, #2]
  uint16_t tmpcr1 = 0;
    4266:	2300      	movs	r3, #0
    4268:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));
  tmpcr1 = TIMx->CR1;
    426a:	687b      	ldr	r3, [r7, #4]
    426c:	881b      	ldrh	r3, [r3, #0]
    426e:	81fb      	strh	r3, [r7, #14]
  /* Reset the CMS and DIR Bits */
  tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
    4270:	89fb      	ldrh	r3, [r7, #14]
    4272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    4276:	81fb      	strh	r3, [r7, #14]
  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
    4278:	89fa      	ldrh	r2, [r7, #14]
    427a:	887b      	ldrh	r3, [r7, #2]
    427c:	4313      	orrs	r3, r2
    427e:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
    4280:	687b      	ldr	r3, [r7, #4]
    4282:	89fa      	ldrh	r2, [r7, #14]
    4284:	801a      	strh	r2, [r3, #0]
}
    4286:	bf00      	nop
    4288:	3714      	adds	r7, #20
    428a:	46bd      	mov	sp, r7
    428c:	bc80      	pop	{r7}
    428e:	4770      	bx	lr

00004290 <TIM_SelectInputTrigger>:
  *     @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *     @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
void TIM_SelectInputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
    4290:	b480      	push	{r7}
    4292:	b085      	sub	sp, #20
    4294:	af00      	add	r7, sp, #0
    4296:	6078      	str	r0, [r7, #4]
    4298:	460b      	mov	r3, r1
    429a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpsmcr = 0;
    429c:	2300      	movs	r3, #0
    429e:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
    42a0:	687b      	ldr	r3, [r7, #4]
    42a2:	891b      	ldrh	r3, [r3, #8]
    42a4:	81fb      	strh	r3, [r7, #14]
  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
    42a6:	89fb      	ldrh	r3, [r7, #14]
    42a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    42ac:	81fb      	strh	r3, [r7, #14]
  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
    42ae:	89fa      	ldrh	r2, [r7, #14]
    42b0:	887b      	ldrh	r3, [r7, #2]
    42b2:	4313      	orrs	r3, r2
    42b4:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
    42b6:	687b      	ldr	r3, [r7, #4]
    42b8:	89fa      	ldrh	r2, [r7, #14]
    42ba:	811a      	strh	r2, [r3, #8]
}
    42bc:	bf00      	nop
    42be:	3714      	adds	r7, #20
    42c0:	46bd      	mov	sp, r7
    42c2:	bc80      	pop	{r7}
    42c4:	4770      	bx	lr

000042c6 <TIM_EncoderInterfaceConfig>:
  *     @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
    42c6:	b480      	push	{r7}
    42c8:	b087      	sub	sp, #28
    42ca:	af00      	add	r7, sp, #0
    42cc:	60f8      	str	r0, [r7, #12]
    42ce:	4608      	mov	r0, r1
    42d0:	4611      	mov	r1, r2
    42d2:	461a      	mov	r2, r3
    42d4:	4603      	mov	r3, r0
    42d6:	817b      	strh	r3, [r7, #10]
    42d8:	460b      	mov	r3, r1
    42da:	813b      	strh	r3, [r7, #8]
    42dc:	4613      	mov	r3, r2
    42de:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
    42e0:	2300      	movs	r3, #0
    42e2:	82fb      	strh	r3, [r7, #22]
  uint16_t tmpccmr1 = 0;
    42e4:	2300      	movs	r3, #0
    42e6:	82bb      	strh	r3, [r7, #20]
  uint16_t tmpccer = 0;
    42e8:	2300      	movs	r3, #0
    42ea:	827b      	strh	r3, [r7, #18]
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
    42ec:	68fb      	ldr	r3, [r7, #12]
    42ee:	891b      	ldrh	r3, [r3, #8]
    42f0:	82fb      	strh	r3, [r7, #22]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
    42f2:	68fb      	ldr	r3, [r7, #12]
    42f4:	8b1b      	ldrh	r3, [r3, #24]
    42f6:	82bb      	strh	r3, [r7, #20]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
    42f8:	68fb      	ldr	r3, [r7, #12]
    42fa:	8c1b      	ldrh	r3, [r3, #32]
    42fc:	827b      	strh	r3, [r7, #18]
  
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
    42fe:	8afb      	ldrh	r3, [r7, #22]
    4300:	f023 0307 	bic.w	r3, r3, #7
    4304:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_EncoderMode;
    4306:	8afa      	ldrh	r2, [r7, #22]
    4308:	897b      	ldrh	r3, [r7, #10]
    430a:	4313      	orrs	r3, r2
    430c:	82fb      	strh	r3, [r7, #22]
  
  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S)));
    430e:	8abb      	ldrh	r3, [r7, #20]
    4310:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    4314:	f023 0303 	bic.w	r3, r3, #3
    4318:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
    431a:	8abb      	ldrh	r3, [r7, #20]
    431c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    4320:	f043 0301 	orr.w	r3, r3, #1
    4324:	82bb      	strh	r3, [r7, #20]
  
  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCER_CC1P)) & ((uint16_t)~((uint16_t)TIM_CCER_CC2P)));
    4326:	8a7b      	ldrh	r3, [r7, #18]
    4328:	f023 0322 	bic.w	r3, r3, #34	; 0x22
    432c:	827b      	strh	r3, [r7, #18]
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
    432e:	88fb      	ldrh	r3, [r7, #6]
    4330:	011b      	lsls	r3, r3, #4
    4332:	b29a      	uxth	r2, r3
    4334:	893b      	ldrh	r3, [r7, #8]
    4336:	4313      	orrs	r3, r2
    4338:	b29a      	uxth	r2, r3
    433a:	8a7b      	ldrh	r3, [r7, #18]
    433c:	4313      	orrs	r3, r2
    433e:	827b      	strh	r3, [r7, #18]
  
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
    4340:	68fb      	ldr	r3, [r7, #12]
    4342:	8afa      	ldrh	r2, [r7, #22]
    4344:	811a      	strh	r2, [r3, #8]
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
    4346:	68fb      	ldr	r3, [r7, #12]
    4348:	8aba      	ldrh	r2, [r7, #20]
    434a:	831a      	strh	r2, [r3, #24]
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
    434c:	68fb      	ldr	r3, [r7, #12]
    434e:	8a7a      	ldrh	r2, [r7, #18]
    4350:	841a      	strh	r2, [r3, #32]
}
    4352:	bf00      	nop
    4354:	371c      	adds	r7, #28
    4356:	46bd      	mov	sp, r7
    4358:	bc80      	pop	{r7}
    435a:	4770      	bx	lr

0000435c <TIM_ForcedOC1Config>:
  *     @arg TIM_ForcedAction_Active: Force active level on OC1REF
  *     @arg TIM_ForcedAction_InActive: Force inactive level on OC1REF.
  * @retval None
  */
void TIM_ForcedOC1Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
    435c:	b480      	push	{r7}
    435e:	b085      	sub	sp, #20
    4360:	af00      	add	r7, sp, #0
    4362:	6078      	str	r0, [r7, #4]
    4364:	460b      	mov	r3, r1
    4366:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    4368:	2300      	movs	r3, #0
    436a:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
    436c:	687b      	ldr	r3, [r7, #4]
    436e:	8b1b      	ldrh	r3, [r3, #24]
    4370:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1M Bits */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1M);
    4372:	89fb      	ldrh	r3, [r7, #14]
    4374:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    4378:	81fb      	strh	r3, [r7, #14]
  /* Configure The Forced output Mode */
  tmpccmr1 |= TIM_ForcedAction;
    437a:	89fa      	ldrh	r2, [r7, #14]
    437c:	887b      	ldrh	r3, [r7, #2]
    437e:	4313      	orrs	r3, r2
    4380:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
    4382:	687b      	ldr	r3, [r7, #4]
    4384:	89fa      	ldrh	r2, [r7, #14]
    4386:	831a      	strh	r2, [r3, #24]
}
    4388:	bf00      	nop
    438a:	3714      	adds	r7, #20
    438c:	46bd      	mov	sp, r7
    438e:	bc80      	pop	{r7}
    4390:	4770      	bx	lr

00004392 <TIM_ForcedOC2Config>:
  *     @arg TIM_ForcedAction_Active: Force active level on OC2REF
  *     @arg TIM_ForcedAction_InActive: Force inactive level on OC2REF.
  * @retval None
  */
void TIM_ForcedOC2Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
    4392:	b480      	push	{r7}
    4394:	b085      	sub	sp, #20
    4396:	af00      	add	r7, sp, #0
    4398:	6078      	str	r0, [r7, #4]
    439a:	460b      	mov	r3, r1
    439c:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    439e:	2300      	movs	r3, #0
    43a0:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
    43a2:	687b      	ldr	r3, [r7, #4]
    43a4:	8b1b      	ldrh	r3, [r3, #24]
    43a6:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2M Bits */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2M);
    43a8:	89fb      	ldrh	r3, [r7, #14]
    43aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
    43ae:	81fb      	strh	r3, [r7, #14]
  /* Configure The Forced output Mode */
  tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
    43b0:	887b      	ldrh	r3, [r7, #2]
    43b2:	021b      	lsls	r3, r3, #8
    43b4:	b29a      	uxth	r2, r3
    43b6:	89fb      	ldrh	r3, [r7, #14]
    43b8:	4313      	orrs	r3, r2
    43ba:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
    43bc:	687b      	ldr	r3, [r7, #4]
    43be:	89fa      	ldrh	r2, [r7, #14]
    43c0:	831a      	strh	r2, [r3, #24]
}
    43c2:	bf00      	nop
    43c4:	3714      	adds	r7, #20
    43c6:	46bd      	mov	sp, r7
    43c8:	bc80      	pop	{r7}
    43ca:	4770      	bx	lr

000043cc <TIM_ForcedOC3Config>:
  *     @arg TIM_ForcedAction_Active: Force active level on OC3REF
  *     @arg TIM_ForcedAction_InActive: Force inactive level on OC3REF.
  * @retval None
  */
void TIM_ForcedOC3Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
    43cc:	b480      	push	{r7}
    43ce:	b085      	sub	sp, #20
    43d0:	af00      	add	r7, sp, #0
    43d2:	6078      	str	r0, [r7, #4]
    43d4:	460b      	mov	r3, r1
    43d6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    43d8:	2300      	movs	r3, #0
    43da:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
    43dc:	687b      	ldr	r3, [r7, #4]
    43de:	8b9b      	ldrh	r3, [r3, #28]
    43e0:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1M Bits */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3M);
    43e2:	89fb      	ldrh	r3, [r7, #14]
    43e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    43e8:	81fb      	strh	r3, [r7, #14]
  /* Configure The Forced output Mode */
  tmpccmr2 |= TIM_ForcedAction;
    43ea:	89fa      	ldrh	r2, [r7, #14]
    43ec:	887b      	ldrh	r3, [r7, #2]
    43ee:	4313      	orrs	r3, r2
    43f0:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
    43f2:	687b      	ldr	r3, [r7, #4]
    43f4:	89fa      	ldrh	r2, [r7, #14]
    43f6:	839a      	strh	r2, [r3, #28]
}
    43f8:	bf00      	nop
    43fa:	3714      	adds	r7, #20
    43fc:	46bd      	mov	sp, r7
    43fe:	bc80      	pop	{r7}
    4400:	4770      	bx	lr

00004402 <TIM_ForcedOC4Config>:
  *     @arg TIM_ForcedAction_Active: Force active level on OC4REF
  *     @arg TIM_ForcedAction_InActive: Force inactive level on OC4REF.
  * @retval None
  */
void TIM_ForcedOC4Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
    4402:	b480      	push	{r7}
    4404:	b085      	sub	sp, #20
    4406:	af00      	add	r7, sp, #0
    4408:	6078      	str	r0, [r7, #4]
    440a:	460b      	mov	r3, r1
    440c:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    440e:	2300      	movs	r3, #0
    4410:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
    4412:	687b      	ldr	r3, [r7, #4]
    4414:	8b9b      	ldrh	r3, [r3, #28]
    4416:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2M Bits */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4M);
    4418:	89fb      	ldrh	r3, [r7, #14]
    441a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
    441e:	81fb      	strh	r3, [r7, #14]
  /* Configure The Forced output Mode */
  tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
    4420:	887b      	ldrh	r3, [r7, #2]
    4422:	021b      	lsls	r3, r3, #8
    4424:	b29a      	uxth	r2, r3
    4426:	89fb      	ldrh	r3, [r7, #14]
    4428:	4313      	orrs	r3, r2
    442a:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
    442c:	687b      	ldr	r3, [r7, #4]
    442e:	89fa      	ldrh	r2, [r7, #14]
    4430:	839a      	strh	r2, [r3, #28]
}
    4432:	bf00      	nop
    4434:	3714      	adds	r7, #20
    4436:	46bd      	mov	sp, r7
    4438:	bc80      	pop	{r7}
    443a:	4770      	bx	lr

0000443c <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
    443c:	b480      	push	{r7}
    443e:	b083      	sub	sp, #12
    4440:	af00      	add	r7, sp, #0
    4442:	6078      	str	r0, [r7, #4]
    4444:	460b      	mov	r3, r1
    4446:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    4448:	78fb      	ldrb	r3, [r7, #3]
    444a:	2b00      	cmp	r3, #0
    444c:	d008      	beq.n	4460 <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
    444e:	687b      	ldr	r3, [r7, #4]
    4450:	881b      	ldrh	r3, [r3, #0]
    4452:	b29b      	uxth	r3, r3
    4454:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    4458:	b29a      	uxth	r2, r3
    445a:	687b      	ldr	r3, [r7, #4]
    445c:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_ARPE);
  }
}
    445e:	e007      	b.n	4470 <TIM_ARRPreloadConfig+0x34>
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_ARPE);
    4460:	687b      	ldr	r3, [r7, #4]
    4462:	881b      	ldrh	r3, [r3, #0]
    4464:	b29b      	uxth	r3, r3
    4466:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    446a:	b29a      	uxth	r2, r3
    446c:	687b      	ldr	r3, [r7, #4]
    446e:	801a      	strh	r2, [r3, #0]
}
    4470:	bf00      	nop
    4472:	370c      	adds	r7, #12
    4474:	46bd      	mov	sp, r7
    4476:	bc80      	pop	{r7}
    4478:	4770      	bx	lr

0000447a <TIM_SelectCOM>:
  * @param  NewState: new state of the Commutation event.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCOM(TIM_TypeDef* TIMx, FunctionalState NewState)
{
    447a:	b480      	push	{r7}
    447c:	b083      	sub	sp, #12
    447e:	af00      	add	r7, sp, #0
    4480:	6078      	str	r0, [r7, #4]
    4482:	460b      	mov	r3, r1
    4484:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    4486:	78fb      	ldrb	r3, [r7, #3]
    4488:	2b00      	cmp	r3, #0
    448a:	d008      	beq.n	449e <TIM_SelectCOM+0x24>
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
    448c:	687b      	ldr	r3, [r7, #4]
    448e:	889b      	ldrh	r3, [r3, #4]
    4490:	b29b      	uxth	r3, r3
    4492:	f043 0304 	orr.w	r3, r3, #4
    4496:	b29a      	uxth	r2, r3
    4498:	687b      	ldr	r3, [r7, #4]
    449a:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Reset the COM Bit */
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCUS);
  }
}
    449c:	e007      	b.n	44ae <TIM_SelectCOM+0x34>
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCUS);
    449e:	687b      	ldr	r3, [r7, #4]
    44a0:	889b      	ldrh	r3, [r3, #4]
    44a2:	b29b      	uxth	r3, r3
    44a4:	f023 0304 	bic.w	r3, r3, #4
    44a8:	b29a      	uxth	r2, r3
    44aa:	687b      	ldr	r3, [r7, #4]
    44ac:	809a      	strh	r2, [r3, #4]
}
    44ae:	bf00      	nop
    44b0:	370c      	adds	r7, #12
    44b2:	46bd      	mov	sp, r7
    44b4:	bc80      	pop	{r7}
    44b6:	4770      	bx	lr

000044b8 <TIM_SelectCCDMA>:
  * @param  NewState: new state of the Capture Compare DMA source
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCCDMA(TIM_TypeDef* TIMx, FunctionalState NewState)
{
    44b8:	b480      	push	{r7}
    44ba:	b083      	sub	sp, #12
    44bc:	af00      	add	r7, sp, #0
    44be:	6078      	str	r0, [r7, #4]
    44c0:	460b      	mov	r3, r1
    44c2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    44c4:	78fb      	ldrb	r3, [r7, #3]
    44c6:	2b00      	cmp	r3, #0
    44c8:	d008      	beq.n	44dc <TIM_SelectCCDMA+0x24>
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
    44ca:	687b      	ldr	r3, [r7, #4]
    44cc:	889b      	ldrh	r3, [r3, #4]
    44ce:	b29b      	uxth	r3, r3
    44d0:	f043 0308 	orr.w	r3, r3, #8
    44d4:	b29a      	uxth	r2, r3
    44d6:	687b      	ldr	r3, [r7, #4]
    44d8:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Reset the CCDS Bit */
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCDS);
  }
}
    44da:	e007      	b.n	44ec <TIM_SelectCCDMA+0x34>
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCDS);
    44dc:	687b      	ldr	r3, [r7, #4]
    44de:	889b      	ldrh	r3, [r3, #4]
    44e0:	b29b      	uxth	r3, r3
    44e2:	f023 0308 	bic.w	r3, r3, #8
    44e6:	b29a      	uxth	r2, r3
    44e8:	687b      	ldr	r3, [r7, #4]
    44ea:	809a      	strh	r2, [r3, #4]
}
    44ec:	bf00      	nop
    44ee:	370c      	adds	r7, #12
    44f0:	46bd      	mov	sp, r7
    44f2:	bc80      	pop	{r7}
    44f4:	4770      	bx	lr

000044f6 <TIM_CCPreloadControl>:
  * @param  NewState: new state of the Capture Compare Preload Control bit
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
{ 
    44f6:	b480      	push	{r7}
    44f8:	b083      	sub	sp, #12
    44fa:	af00      	add	r7, sp, #0
    44fc:	6078      	str	r0, [r7, #4]
    44fe:	460b      	mov	r3, r1
    4500:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    4502:	78fb      	ldrb	r3, [r7, #3]
    4504:	2b00      	cmp	r3, #0
    4506:	d008      	beq.n	451a <TIM_CCPreloadControl+0x24>
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
    4508:	687b      	ldr	r3, [r7, #4]
    450a:	889b      	ldrh	r3, [r3, #4]
    450c:	b29b      	uxth	r3, r3
    450e:	f043 0301 	orr.w	r3, r3, #1
    4512:	b29a      	uxth	r2, r3
    4514:	687b      	ldr	r3, [r7, #4]
    4516:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCPC);
  }
}
    4518:	e007      	b.n	452a <TIM_CCPreloadControl+0x34>
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCPC);
    451a:	687b      	ldr	r3, [r7, #4]
    451c:	889b      	ldrh	r3, [r3, #4]
    451e:	b29b      	uxth	r3, r3
    4520:	f023 0301 	bic.w	r3, r3, #1
    4524:	b29a      	uxth	r2, r3
    4526:	687b      	ldr	r3, [r7, #4]
    4528:	809a      	strh	r2, [r3, #4]
}
    452a:	bf00      	nop
    452c:	370c      	adds	r7, #12
    452e:	46bd      	mov	sp, r7
    4530:	bc80      	pop	{r7}
    4532:	4770      	bx	lr

00004534 <TIM_OC1PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
    4534:	b480      	push	{r7}
    4536:	b085      	sub	sp, #20
    4538:	af00      	add	r7, sp, #0
    453a:	6078      	str	r0, [r7, #4]
    453c:	460b      	mov	r3, r1
    453e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    4540:	2300      	movs	r3, #0
    4542:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr1 = TIMx->CCMR1;
    4544:	687b      	ldr	r3, [r7, #4]
    4546:	8b1b      	ldrh	r3, [r3, #24]
    4548:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1PE);
    454a:	89fb      	ldrh	r3, [r7, #14]
    454c:	f023 0308 	bic.w	r3, r3, #8
    4550:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
    4552:	89fa      	ldrh	r2, [r7, #14]
    4554:	887b      	ldrh	r3, [r7, #2]
    4556:	4313      	orrs	r3, r2
    4558:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
    455a:	687b      	ldr	r3, [r7, #4]
    455c:	89fa      	ldrh	r2, [r7, #14]
    455e:	831a      	strh	r2, [r3, #24]
}
    4560:	bf00      	nop
    4562:	3714      	adds	r7, #20
    4564:	46bd      	mov	sp, r7
    4566:	bc80      	pop	{r7}
    4568:	4770      	bx	lr

0000456a <TIM_OC2PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
    456a:	b480      	push	{r7}
    456c:	b085      	sub	sp, #20
    456e:	af00      	add	r7, sp, #0
    4570:	6078      	str	r0, [r7, #4]
    4572:	460b      	mov	r3, r1
    4574:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    4576:	2300      	movs	r3, #0
    4578:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr1 = TIMx->CCMR1;
    457a:	687b      	ldr	r3, [r7, #4]
    457c:	8b1b      	ldrh	r3, [r3, #24]
    457e:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2PE);
    4580:	89fb      	ldrh	r3, [r7, #14]
    4582:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    4586:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
    4588:	887b      	ldrh	r3, [r7, #2]
    458a:	021b      	lsls	r3, r3, #8
    458c:	b29a      	uxth	r2, r3
    458e:	89fb      	ldrh	r3, [r7, #14]
    4590:	4313      	orrs	r3, r2
    4592:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
    4594:	687b      	ldr	r3, [r7, #4]
    4596:	89fa      	ldrh	r2, [r7, #14]
    4598:	831a      	strh	r2, [r3, #24]
}
    459a:	bf00      	nop
    459c:	3714      	adds	r7, #20
    459e:	46bd      	mov	sp, r7
    45a0:	bc80      	pop	{r7}
    45a2:	4770      	bx	lr

000045a4 <TIM_OC3PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
    45a4:	b480      	push	{r7}
    45a6:	b085      	sub	sp, #20
    45a8:	af00      	add	r7, sp, #0
    45aa:	6078      	str	r0, [r7, #4]
    45ac:	460b      	mov	r3, r1
    45ae:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    45b0:	2300      	movs	r3, #0
    45b2:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr2 = TIMx->CCMR2;
    45b4:	687b      	ldr	r3, [r7, #4]
    45b6:	8b9b      	ldrh	r3, [r3, #28]
    45b8:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3PE);
    45ba:	89fb      	ldrh	r3, [r7, #14]
    45bc:	f023 0308 	bic.w	r3, r3, #8
    45c0:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
    45c2:	89fa      	ldrh	r2, [r7, #14]
    45c4:	887b      	ldrh	r3, [r7, #2]
    45c6:	4313      	orrs	r3, r2
    45c8:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
    45ca:	687b      	ldr	r3, [r7, #4]
    45cc:	89fa      	ldrh	r2, [r7, #14]
    45ce:	839a      	strh	r2, [r3, #28]
}
    45d0:	bf00      	nop
    45d2:	3714      	adds	r7, #20
    45d4:	46bd      	mov	sp, r7
    45d6:	bc80      	pop	{r7}
    45d8:	4770      	bx	lr

000045da <TIM_OC4PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
    45da:	b480      	push	{r7}
    45dc:	b085      	sub	sp, #20
    45de:	af00      	add	r7, sp, #0
    45e0:	6078      	str	r0, [r7, #4]
    45e2:	460b      	mov	r3, r1
    45e4:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    45e6:	2300      	movs	r3, #0
    45e8:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr2 = TIMx->CCMR2;
    45ea:	687b      	ldr	r3, [r7, #4]
    45ec:	8b9b      	ldrh	r3, [r3, #28]
    45ee:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4PE);
    45f0:	89fb      	ldrh	r3, [r7, #14]
    45f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    45f6:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
    45f8:	887b      	ldrh	r3, [r7, #2]
    45fa:	021b      	lsls	r3, r3, #8
    45fc:	b29a      	uxth	r2, r3
    45fe:	89fb      	ldrh	r3, [r7, #14]
    4600:	4313      	orrs	r3, r2
    4602:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
    4604:	687b      	ldr	r3, [r7, #4]
    4606:	89fa      	ldrh	r2, [r7, #14]
    4608:	839a      	strh	r2, [r3, #28]
}
    460a:	bf00      	nop
    460c:	3714      	adds	r7, #20
    460e:	46bd      	mov	sp, r7
    4610:	bc80      	pop	{r7}
    4612:	4770      	bx	lr

00004614 <TIM_OC1FastConfig>:
  *     @arg TIM_OCFast_Enable: TIM output compare fast enable
  *     @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC1FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
    4614:	b480      	push	{r7}
    4616:	b085      	sub	sp, #20
    4618:	af00      	add	r7, sp, #0
    461a:	6078      	str	r0, [r7, #4]
    461c:	460b      	mov	r3, r1
    461e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    4620:	2300      	movs	r3, #0
    4622:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
    4624:	687b      	ldr	r3, [r7, #4]
    4626:	8b1b      	ldrh	r3, [r3, #24]
    4628:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1FE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1FE);
    462a:	89fb      	ldrh	r3, [r7, #14]
    462c:	f023 0304 	bic.w	r3, r3, #4
    4630:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= TIM_OCFast;
    4632:	89fa      	ldrh	r2, [r7, #14]
    4634:	887b      	ldrh	r3, [r7, #2]
    4636:	4313      	orrs	r3, r2
    4638:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
    463a:	687b      	ldr	r3, [r7, #4]
    463c:	89fa      	ldrh	r2, [r7, #14]
    463e:	831a      	strh	r2, [r3, #24]
}
    4640:	bf00      	nop
    4642:	3714      	adds	r7, #20
    4644:	46bd      	mov	sp, r7
    4646:	bc80      	pop	{r7}
    4648:	4770      	bx	lr

0000464a <TIM_OC2FastConfig>:
  *     @arg TIM_OCFast_Enable: TIM output compare fast enable
  *     @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC2FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
    464a:	b480      	push	{r7}
    464c:	b085      	sub	sp, #20
    464e:	af00      	add	r7, sp, #0
    4650:	6078      	str	r0, [r7, #4]
    4652:	460b      	mov	r3, r1
    4654:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    4656:	2300      	movs	r3, #0
    4658:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
    465a:	687b      	ldr	r3, [r7, #4]
    465c:	8b1b      	ldrh	r3, [r3, #24]
    465e:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2FE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2FE);
    4660:	89fb      	ldrh	r3, [r7, #14]
    4662:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    4666:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
    4668:	887b      	ldrh	r3, [r7, #2]
    466a:	021b      	lsls	r3, r3, #8
    466c:	b29a      	uxth	r2, r3
    466e:	89fb      	ldrh	r3, [r7, #14]
    4670:	4313      	orrs	r3, r2
    4672:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
    4674:	687b      	ldr	r3, [r7, #4]
    4676:	89fa      	ldrh	r2, [r7, #14]
    4678:	831a      	strh	r2, [r3, #24]
}
    467a:	bf00      	nop
    467c:	3714      	adds	r7, #20
    467e:	46bd      	mov	sp, r7
    4680:	bc80      	pop	{r7}
    4682:	4770      	bx	lr

00004684 <TIM_OC3FastConfig>:
  *     @arg TIM_OCFast_Enable: TIM output compare fast enable
  *     @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC3FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
    4684:	b480      	push	{r7}
    4686:	b085      	sub	sp, #20
    4688:	af00      	add	r7, sp, #0
    468a:	6078      	str	r0, [r7, #4]
    468c:	460b      	mov	r3, r1
    468e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    4690:	2300      	movs	r3, #0
    4692:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
    4694:	687b      	ldr	r3, [r7, #4]
    4696:	8b9b      	ldrh	r3, [r3, #28]
    4698:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC3FE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3FE);
    469a:	89fb      	ldrh	r3, [r7, #14]
    469c:	f023 0304 	bic.w	r3, r3, #4
    46a0:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= TIM_OCFast;
    46a2:	89fa      	ldrh	r2, [r7, #14]
    46a4:	887b      	ldrh	r3, [r7, #2]
    46a6:	4313      	orrs	r3, r2
    46a8:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
    46aa:	687b      	ldr	r3, [r7, #4]
    46ac:	89fa      	ldrh	r2, [r7, #14]
    46ae:	839a      	strh	r2, [r3, #28]
}
    46b0:	bf00      	nop
    46b2:	3714      	adds	r7, #20
    46b4:	46bd      	mov	sp, r7
    46b6:	bc80      	pop	{r7}
    46b8:	4770      	bx	lr

000046ba <TIM_OC4FastConfig>:
  *     @arg TIM_OCFast_Enable: TIM output compare fast enable
  *     @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC4FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
    46ba:	b480      	push	{r7}
    46bc:	b085      	sub	sp, #20
    46be:	af00      	add	r7, sp, #0
    46c0:	6078      	str	r0, [r7, #4]
    46c2:	460b      	mov	r3, r1
    46c4:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    46c6:	2300      	movs	r3, #0
    46c8:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
    46ca:	687b      	ldr	r3, [r7, #4]
    46cc:	8b9b      	ldrh	r3, [r3, #28]
    46ce:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC4FE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4FE);
    46d0:	89fb      	ldrh	r3, [r7, #14]
    46d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    46d6:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
    46d8:	887b      	ldrh	r3, [r7, #2]
    46da:	021b      	lsls	r3, r3, #8
    46dc:	b29a      	uxth	r2, r3
    46de:	89fb      	ldrh	r3, [r7, #14]
    46e0:	4313      	orrs	r3, r2
    46e2:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
    46e4:	687b      	ldr	r3, [r7, #4]
    46e6:	89fa      	ldrh	r2, [r7, #14]
    46e8:	839a      	strh	r2, [r3, #28]
}
    46ea:	bf00      	nop
    46ec:	3714      	adds	r7, #20
    46ee:	46bd      	mov	sp, r7
    46f0:	bc80      	pop	{r7}
    46f2:	4770      	bx	lr

000046f4 <TIM_ClearOC1Ref>:
  *     @arg TIM_OCClear_Enable: TIM Output clear enable
  *     @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC1Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
    46f4:	b480      	push	{r7}
    46f6:	b085      	sub	sp, #20
    46f8:	af00      	add	r7, sp, #0
    46fa:	6078      	str	r0, [r7, #4]
    46fc:	460b      	mov	r3, r1
    46fe:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    4700:	2300      	movs	r3, #0
    4702:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
    4704:	687b      	ldr	r3, [r7, #4]
    4706:	8b1b      	ldrh	r3, [r3, #24]
    4708:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1CE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1CE);
    470a:	89fb      	ldrh	r3, [r7, #14]
    470c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    4710:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= TIM_OCClear;
    4712:	89fa      	ldrh	r2, [r7, #14]
    4714:	887b      	ldrh	r3, [r7, #2]
    4716:	4313      	orrs	r3, r2
    4718:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
    471a:	687b      	ldr	r3, [r7, #4]
    471c:	89fa      	ldrh	r2, [r7, #14]
    471e:	831a      	strh	r2, [r3, #24]
}
    4720:	bf00      	nop
    4722:	3714      	adds	r7, #20
    4724:	46bd      	mov	sp, r7
    4726:	bc80      	pop	{r7}
    4728:	4770      	bx	lr

0000472a <TIM_ClearOC2Ref>:
  *     @arg TIM_OCClear_Enable: TIM Output clear enable
  *     @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC2Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
    472a:	b480      	push	{r7}
    472c:	b085      	sub	sp, #20
    472e:	af00      	add	r7, sp, #0
    4730:	6078      	str	r0, [r7, #4]
    4732:	460b      	mov	r3, r1
    4734:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    4736:	2300      	movs	r3, #0
    4738:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  tmpccmr1 = TIMx->CCMR1;
    473a:	687b      	ldr	r3, [r7, #4]
    473c:	8b1b      	ldrh	r3, [r3, #24]
    473e:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2CE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2CE);
    4740:	89fb      	ldrh	r3, [r7, #14]
    4742:	f3c3 030e 	ubfx	r3, r3, #0, #15
    4746:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
    4748:	887b      	ldrh	r3, [r7, #2]
    474a:	021b      	lsls	r3, r3, #8
    474c:	b29a      	uxth	r2, r3
    474e:	89fb      	ldrh	r3, [r7, #14]
    4750:	4313      	orrs	r3, r2
    4752:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
    4754:	687b      	ldr	r3, [r7, #4]
    4756:	89fa      	ldrh	r2, [r7, #14]
    4758:	831a      	strh	r2, [r3, #24]
}
    475a:	bf00      	nop
    475c:	3714      	adds	r7, #20
    475e:	46bd      	mov	sp, r7
    4760:	bc80      	pop	{r7}
    4762:	4770      	bx	lr

00004764 <TIM_ClearOC3Ref>:
  *     @arg TIM_OCClear_Enable: TIM Output clear enable
  *     @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC3Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
    4764:	b480      	push	{r7}
    4766:	b085      	sub	sp, #20
    4768:	af00      	add	r7, sp, #0
    476a:	6078      	str	r0, [r7, #4]
    476c:	460b      	mov	r3, r1
    476e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    4770:	2300      	movs	r3, #0
    4772:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  tmpccmr2 = TIMx->CCMR2;
    4774:	687b      	ldr	r3, [r7, #4]
    4776:	8b9b      	ldrh	r3, [r3, #28]
    4778:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC3CE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3CE);
    477a:	89fb      	ldrh	r3, [r7, #14]
    477c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    4780:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= TIM_OCClear;
    4782:	89fa      	ldrh	r2, [r7, #14]
    4784:	887b      	ldrh	r3, [r7, #2]
    4786:	4313      	orrs	r3, r2
    4788:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
    478a:	687b      	ldr	r3, [r7, #4]
    478c:	89fa      	ldrh	r2, [r7, #14]
    478e:	839a      	strh	r2, [r3, #28]
}
    4790:	bf00      	nop
    4792:	3714      	adds	r7, #20
    4794:	46bd      	mov	sp, r7
    4796:	bc80      	pop	{r7}
    4798:	4770      	bx	lr

0000479a <TIM_ClearOC4Ref>:
  *     @arg TIM_OCClear_Enable: TIM Output clear enable
  *     @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC4Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
    479a:	b480      	push	{r7}
    479c:	b085      	sub	sp, #20
    479e:	af00      	add	r7, sp, #0
    47a0:	6078      	str	r0, [r7, #4]
    47a2:	460b      	mov	r3, r1
    47a4:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    47a6:	2300      	movs	r3, #0
    47a8:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  tmpccmr2 = TIMx->CCMR2;
    47aa:	687b      	ldr	r3, [r7, #4]
    47ac:	8b9b      	ldrh	r3, [r3, #28]
    47ae:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC4CE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4CE);
    47b0:	89fb      	ldrh	r3, [r7, #14]
    47b2:	f3c3 030e 	ubfx	r3, r3, #0, #15
    47b6:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
    47b8:	887b      	ldrh	r3, [r7, #2]
    47ba:	021b      	lsls	r3, r3, #8
    47bc:	b29a      	uxth	r2, r3
    47be:	89fb      	ldrh	r3, [r7, #14]
    47c0:	4313      	orrs	r3, r2
    47c2:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
    47c4:	687b      	ldr	r3, [r7, #4]
    47c6:	89fa      	ldrh	r2, [r7, #14]
    47c8:	839a      	strh	r2, [r3, #28]
}
    47ca:	bf00      	nop
    47cc:	3714      	adds	r7, #20
    47ce:	46bd      	mov	sp, r7
    47d0:	bc80      	pop	{r7}
    47d2:	4770      	bx	lr

000047d4 <TIM_OC1PolarityConfig>:
  *     @arg TIM_OCPolarity_High: Output Compare active high
  *     @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
    47d4:	b480      	push	{r7}
    47d6:	b085      	sub	sp, #20
    47d8:	af00      	add	r7, sp, #0
    47da:	6078      	str	r0, [r7, #4]
    47dc:	460b      	mov	r3, r1
    47de:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
    47e0:	2300      	movs	r3, #0
    47e2:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
    47e4:	687b      	ldr	r3, [r7, #4]
    47e6:	8c1b      	ldrh	r3, [r3, #32]
    47e8:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC1P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC1P);
    47ea:	89fb      	ldrh	r3, [r7, #14]
    47ec:	f023 0302 	bic.w	r3, r3, #2
    47f0:	81fb      	strh	r3, [r7, #14]
  tmpccer |= TIM_OCPolarity;
    47f2:	89fa      	ldrh	r2, [r7, #14]
    47f4:	887b      	ldrh	r3, [r7, #2]
    47f6:	4313      	orrs	r3, r2
    47f8:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
    47fa:	687b      	ldr	r3, [r7, #4]
    47fc:	89fa      	ldrh	r2, [r7, #14]
    47fe:	841a      	strh	r2, [r3, #32]
}
    4800:	bf00      	nop
    4802:	3714      	adds	r7, #20
    4804:	46bd      	mov	sp, r7
    4806:	bc80      	pop	{r7}
    4808:	4770      	bx	lr

0000480a <TIM_OC1NPolarityConfig>:
  *     @arg TIM_OCNPolarity_High: Output Compare active high
  *     @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
    480a:	b480      	push	{r7}
    480c:	b085      	sub	sp, #20
    480e:	af00      	add	r7, sp, #0
    4810:	6078      	str	r0, [r7, #4]
    4812:	460b      	mov	r3, r1
    4814:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
    4816:	2300      	movs	r3, #0
    4818:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
    481a:	687b      	ldr	r3, [r7, #4]
    481c:	8c1b      	ldrh	r3, [r3, #32]
    481e:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC1NP Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC1NP);
    4820:	89fb      	ldrh	r3, [r7, #14]
    4822:	f023 0308 	bic.w	r3, r3, #8
    4826:	81fb      	strh	r3, [r7, #14]
  tmpccer |= TIM_OCNPolarity;
    4828:	89fa      	ldrh	r2, [r7, #14]
    482a:	887b      	ldrh	r3, [r7, #2]
    482c:	4313      	orrs	r3, r2
    482e:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
    4830:	687b      	ldr	r3, [r7, #4]
    4832:	89fa      	ldrh	r2, [r7, #14]
    4834:	841a      	strh	r2, [r3, #32]
}
    4836:	bf00      	nop
    4838:	3714      	adds	r7, #20
    483a:	46bd      	mov	sp, r7
    483c:	bc80      	pop	{r7}
    483e:	4770      	bx	lr

00004840 <TIM_OC2PolarityConfig>:
  *     @arg TIM_OCPolarity_High: Output Compare active high
  *     @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
    4840:	b480      	push	{r7}
    4842:	b085      	sub	sp, #20
    4844:	af00      	add	r7, sp, #0
    4846:	6078      	str	r0, [r7, #4]
    4848:	460b      	mov	r3, r1
    484a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
    484c:	2300      	movs	r3, #0
    484e:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
    4850:	687b      	ldr	r3, [r7, #4]
    4852:	8c1b      	ldrh	r3, [r3, #32]
    4854:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC2P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC2P);
    4856:	89fb      	ldrh	r3, [r7, #14]
    4858:	f023 0320 	bic.w	r3, r3, #32
    485c:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
    485e:	887b      	ldrh	r3, [r7, #2]
    4860:	011b      	lsls	r3, r3, #4
    4862:	b29a      	uxth	r2, r3
    4864:	89fb      	ldrh	r3, [r7, #14]
    4866:	4313      	orrs	r3, r2
    4868:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
    486a:	687b      	ldr	r3, [r7, #4]
    486c:	89fa      	ldrh	r2, [r7, #14]
    486e:	841a      	strh	r2, [r3, #32]
}
    4870:	bf00      	nop
    4872:	3714      	adds	r7, #20
    4874:	46bd      	mov	sp, r7
    4876:	bc80      	pop	{r7}
    4878:	4770      	bx	lr

0000487a <TIM_OC2NPolarityConfig>:
  *     @arg TIM_OCNPolarity_High: Output Compare active high
  *     @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
    487a:	b480      	push	{r7}
    487c:	b085      	sub	sp, #20
    487e:	af00      	add	r7, sp, #0
    4880:	6078      	str	r0, [r7, #4]
    4882:	460b      	mov	r3, r1
    4884:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
    4886:	2300      	movs	r3, #0
    4888:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
    488a:	687b      	ldr	r3, [r7, #4]
    488c:	8c1b      	ldrh	r3, [r3, #32]
    488e:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC2NP Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC2NP);
    4890:	89fb      	ldrh	r3, [r7, #14]
    4892:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    4896:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
    4898:	887b      	ldrh	r3, [r7, #2]
    489a:	011b      	lsls	r3, r3, #4
    489c:	b29a      	uxth	r2, r3
    489e:	89fb      	ldrh	r3, [r7, #14]
    48a0:	4313      	orrs	r3, r2
    48a2:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
    48a4:	687b      	ldr	r3, [r7, #4]
    48a6:	89fa      	ldrh	r2, [r7, #14]
    48a8:	841a      	strh	r2, [r3, #32]
}
    48aa:	bf00      	nop
    48ac:	3714      	adds	r7, #20
    48ae:	46bd      	mov	sp, r7
    48b0:	bc80      	pop	{r7}
    48b2:	4770      	bx	lr

000048b4 <TIM_OC3PolarityConfig>:
  *     @arg TIM_OCPolarity_High: Output Compare active high
  *     @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
    48b4:	b480      	push	{r7}
    48b6:	b085      	sub	sp, #20
    48b8:	af00      	add	r7, sp, #0
    48ba:	6078      	str	r0, [r7, #4]
    48bc:	460b      	mov	r3, r1
    48be:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
    48c0:	2300      	movs	r3, #0
    48c2:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
    48c4:	687b      	ldr	r3, [r7, #4]
    48c6:	8c1b      	ldrh	r3, [r3, #32]
    48c8:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC3P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC3P);
    48ca:	89fb      	ldrh	r3, [r7, #14]
    48cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    48d0:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
    48d2:	887b      	ldrh	r3, [r7, #2]
    48d4:	021b      	lsls	r3, r3, #8
    48d6:	b29a      	uxth	r2, r3
    48d8:	89fb      	ldrh	r3, [r7, #14]
    48da:	4313      	orrs	r3, r2
    48dc:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
    48de:	687b      	ldr	r3, [r7, #4]
    48e0:	89fa      	ldrh	r2, [r7, #14]
    48e2:	841a      	strh	r2, [r3, #32]
}
    48e4:	bf00      	nop
    48e6:	3714      	adds	r7, #20
    48e8:	46bd      	mov	sp, r7
    48ea:	bc80      	pop	{r7}
    48ec:	4770      	bx	lr

000048ee <TIM_OC3NPolarityConfig>:
  *     @arg TIM_OCNPolarity_High: Output Compare active high
  *     @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
    48ee:	b480      	push	{r7}
    48f0:	b085      	sub	sp, #20
    48f2:	af00      	add	r7, sp, #0
    48f4:	6078      	str	r0, [r7, #4]
    48f6:	460b      	mov	r3, r1
    48f8:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
    48fa:	2300      	movs	r3, #0
    48fc:	81fb      	strh	r3, [r7, #14]
 
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
    48fe:	687b      	ldr	r3, [r7, #4]
    4900:	8c1b      	ldrh	r3, [r3, #32]
    4902:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC3NP Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC3NP);
    4904:	89fb      	ldrh	r3, [r7, #14]
    4906:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    490a:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
    490c:	887b      	ldrh	r3, [r7, #2]
    490e:	021b      	lsls	r3, r3, #8
    4910:	b29a      	uxth	r2, r3
    4912:	89fb      	ldrh	r3, [r7, #14]
    4914:	4313      	orrs	r3, r2
    4916:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
    4918:	687b      	ldr	r3, [r7, #4]
    491a:	89fa      	ldrh	r2, [r7, #14]
    491c:	841a      	strh	r2, [r3, #32]
}
    491e:	bf00      	nop
    4920:	3714      	adds	r7, #20
    4922:	46bd      	mov	sp, r7
    4924:	bc80      	pop	{r7}
    4926:	4770      	bx	lr

00004928 <TIM_OC4PolarityConfig>:
  *     @arg TIM_OCPolarity_High: Output Compare active high
  *     @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC4PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
    4928:	b480      	push	{r7}
    492a:	b085      	sub	sp, #20
    492c:	af00      	add	r7, sp, #0
    492e:	6078      	str	r0, [r7, #4]
    4930:	460b      	mov	r3, r1
    4932:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
    4934:	2300      	movs	r3, #0
    4936:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
    4938:	687b      	ldr	r3, [r7, #4]
    493a:	8c1b      	ldrh	r3, [r3, #32]
    493c:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC4P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC4P);
    493e:	89fb      	ldrh	r3, [r7, #14]
    4940:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    4944:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
    4946:	887b      	ldrh	r3, [r7, #2]
    4948:	031b      	lsls	r3, r3, #12
    494a:	b29a      	uxth	r2, r3
    494c:	89fb      	ldrh	r3, [r7, #14]
    494e:	4313      	orrs	r3, r2
    4950:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
    4952:	687b      	ldr	r3, [r7, #4]
    4954:	89fa      	ldrh	r2, [r7, #14]
    4956:	841a      	strh	r2, [r3, #32]
}
    4958:	bf00      	nop
    495a:	3714      	adds	r7, #20
    495c:	46bd      	mov	sp, r7
    495e:	bc80      	pop	{r7}
    4960:	4770      	bx	lr

00004962 <TIM_CCxCmd>:
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *   This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
    4962:	b480      	push	{r7}
    4964:	b085      	sub	sp, #20
    4966:	af00      	add	r7, sp, #0
    4968:	6078      	str	r0, [r7, #4]
    496a:	460b      	mov	r3, r1
    496c:	807b      	strh	r3, [r7, #2]
    496e:	4613      	mov	r3, r2
    4970:	803b      	strh	r3, [r7, #0]
  uint16_t tmp = 0;
    4972:	2300      	movs	r3, #0
    4974:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_Set << TIM_Channel;
    4976:	887b      	ldrh	r3, [r7, #2]
    4978:	2201      	movs	r2, #1
    497a:	fa02 f303 	lsl.w	r3, r2, r3
    497e:	81fb      	strh	r3, [r7, #14]

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
    4980:	687b      	ldr	r3, [r7, #4]
    4982:	8c1b      	ldrh	r3, [r3, #32]
    4984:	b29a      	uxth	r2, r3
    4986:	89fb      	ldrh	r3, [r7, #14]
    4988:	43db      	mvns	r3, r3
    498a:	b29b      	uxth	r3, r3
    498c:	4013      	ands	r3, r2
    498e:	b29a      	uxth	r2, r3
    4990:	687b      	ldr	r3, [r7, #4]
    4992:	841a      	strh	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
    4994:	687b      	ldr	r3, [r7, #4]
    4996:	8c1b      	ldrh	r3, [r3, #32]
    4998:	b29a      	uxth	r2, r3
    499a:	8839      	ldrh	r1, [r7, #0]
    499c:	887b      	ldrh	r3, [r7, #2]
    499e:	fa01 f303 	lsl.w	r3, r1, r3
    49a2:	b29b      	uxth	r3, r3
    49a4:	4313      	orrs	r3, r2
    49a6:	b29a      	uxth	r2, r3
    49a8:	687b      	ldr	r3, [r7, #4]
    49aa:	841a      	strh	r2, [r3, #32]
}
    49ac:	bf00      	nop
    49ae:	3714      	adds	r7, #20
    49b0:	46bd      	mov	sp, r7
    49b2:	bc80      	pop	{r7}
    49b4:	4770      	bx	lr

000049b6 <TIM_CCxNCmd>:
  * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
  *   This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
  * @retval None
  */
void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
{
    49b6:	b480      	push	{r7}
    49b8:	b085      	sub	sp, #20
    49ba:	af00      	add	r7, sp, #0
    49bc:	6078      	str	r0, [r7, #4]
    49be:	460b      	mov	r3, r1
    49c0:	807b      	strh	r3, [r7, #2]
    49c2:	4613      	mov	r3, r2
    49c4:	803b      	strh	r3, [r7, #0]
  uint16_t tmp = 0;
    49c6:	2300      	movs	r3, #0
    49c8:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_Set << TIM_Channel;
    49ca:	887b      	ldrh	r3, [r7, #2]
    49cc:	2204      	movs	r2, #4
    49ce:	fa02 f303 	lsl.w	r3, r2, r3
    49d2:	81fb      	strh	r3, [r7, #14]

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
    49d4:	687b      	ldr	r3, [r7, #4]
    49d6:	8c1b      	ldrh	r3, [r3, #32]
    49d8:	b29a      	uxth	r2, r3
    49da:	89fb      	ldrh	r3, [r7, #14]
    49dc:	43db      	mvns	r3, r3
    49de:	b29b      	uxth	r3, r3
    49e0:	4013      	ands	r3, r2
    49e2:	b29a      	uxth	r2, r3
    49e4:	687b      	ldr	r3, [r7, #4]
    49e6:	841a      	strh	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
    49e8:	687b      	ldr	r3, [r7, #4]
    49ea:	8c1b      	ldrh	r3, [r3, #32]
    49ec:	b29a      	uxth	r2, r3
    49ee:	8839      	ldrh	r1, [r7, #0]
    49f0:	887b      	ldrh	r3, [r7, #2]
    49f2:	fa01 f303 	lsl.w	r3, r1, r3
    49f6:	b29b      	uxth	r3, r3
    49f8:	4313      	orrs	r3, r2
    49fa:	b29a      	uxth	r2, r3
    49fc:	687b      	ldr	r3, [r7, #4]
    49fe:	841a      	strh	r2, [r3, #32]
}
    4a00:	bf00      	nop
    4a02:	3714      	adds	r7, #20
    4a04:	46bd      	mov	sp, r7
    4a06:	bc80      	pop	{r7}
    4a08:	4770      	bx	lr

00004a0a <TIM_SelectOCxM>:
  *     @arg TIM_ForcedAction_Active
  *     @arg TIM_ForcedAction_InActive
  * @retval None
  */
void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
{
    4a0a:	b480      	push	{r7}
    4a0c:	b085      	sub	sp, #20
    4a0e:	af00      	add	r7, sp, #0
    4a10:	6078      	str	r0, [r7, #4]
    4a12:	460b      	mov	r3, r1
    4a14:	807b      	strh	r3, [r7, #2]
    4a16:	4613      	mov	r3, r2
    4a18:	803b      	strh	r3, [r7, #0]
  uint32_t tmp = 0;
    4a1a:	2300      	movs	r3, #0
    4a1c:	60fb      	str	r3, [r7, #12]
  uint16_t tmp1 = 0;
    4a1e:	2300      	movs	r3, #0
    4a20:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
    4a22:	687b      	ldr	r3, [r7, #4]
    4a24:	60fb      	str	r3, [r7, #12]
  tmp += CCMR_Offset;
    4a26:	68fb      	ldr	r3, [r7, #12]
    4a28:	3318      	adds	r3, #24
    4a2a:	60fb      	str	r3, [r7, #12]

  tmp1 = CCER_CCE_Set << (uint16_t)TIM_Channel;
    4a2c:	887b      	ldrh	r3, [r7, #2]
    4a2e:	2201      	movs	r2, #1
    4a30:	fa02 f303 	lsl.w	r3, r2, r3
    4a34:	817b      	strh	r3, [r7, #10]

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
    4a36:	687b      	ldr	r3, [r7, #4]
    4a38:	8c1b      	ldrh	r3, [r3, #32]
    4a3a:	b29a      	uxth	r2, r3
    4a3c:	897b      	ldrh	r3, [r7, #10]
    4a3e:	43db      	mvns	r3, r3
    4a40:	b29b      	uxth	r3, r3
    4a42:	4013      	ands	r3, r2
    4a44:	b29a      	uxth	r2, r3
    4a46:	687b      	ldr	r3, [r7, #4]
    4a48:	841a      	strh	r2, [r3, #32]

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
    4a4a:	887b      	ldrh	r3, [r7, #2]
    4a4c:	2b00      	cmp	r3, #0
    4a4e:	d002      	beq.n	4a56 <TIM_SelectOCxM+0x4c>
    4a50:	887b      	ldrh	r3, [r7, #2]
    4a52:	2b08      	cmp	r3, #8
    4a54:	d113      	bne.n	4a7e <TIM_SelectOCxM+0x74>
  {
    tmp += (TIM_Channel>>1);
    4a56:	887b      	ldrh	r3, [r7, #2]
    4a58:	085b      	lsrs	r3, r3, #1
    4a5a:	b29b      	uxth	r3, r3
    4a5c:	461a      	mov	r2, r3
    4a5e:	68fb      	ldr	r3, [r7, #12]
    4a60:	4413      	add	r3, r2
    4a62:	60fb      	str	r3, [r7, #12]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC1M);
    4a64:	68fb      	ldr	r3, [r7, #12]
    4a66:	681a      	ldr	r2, [r3, #0]
    4a68:	68fb      	ldr	r3, [r7, #12]
    4a6a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    4a6e:	601a      	str	r2, [r3, #0]
   
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
    4a70:	68fb      	ldr	r3, [r7, #12]
    4a72:	6819      	ldr	r1, [r3, #0]
    4a74:	883a      	ldrh	r2, [r7, #0]
    4a76:	68fb      	ldr	r3, [r7, #12]
    4a78:	430a      	orrs	r2, r1
    4a7a:	601a      	str	r2, [r3, #0]
    4a7c:	e018      	b.n	4ab0 <TIM_SelectOCxM+0xa6>
  }
  else
  {
    tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
    4a7e:	887b      	ldrh	r3, [r7, #2]
    4a80:	3b04      	subs	r3, #4
    4a82:	b29b      	uxth	r3, r3
    4a84:	085b      	lsrs	r3, r3, #1
    4a86:	b29b      	uxth	r3, r3
    4a88:	461a      	mov	r2, r3
    4a8a:	68fb      	ldr	r3, [r7, #12]
    4a8c:	4413      	add	r3, r2
    4a8e:	60fb      	str	r3, [r7, #12]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC2M);
    4a90:	68fb      	ldr	r3, [r7, #12]
    4a92:	681a      	ldr	r2, [r3, #0]
    4a94:	68fb      	ldr	r3, [r7, #12]
    4a96:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
    4a9a:	601a      	str	r2, [r3, #0]
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
    4a9c:	68fb      	ldr	r3, [r7, #12]
    4a9e:	681a      	ldr	r2, [r3, #0]
    4aa0:	883b      	ldrh	r3, [r7, #0]
    4aa2:	021b      	lsls	r3, r3, #8
    4aa4:	b29b      	uxth	r3, r3
    4aa6:	4619      	mov	r1, r3
    4aa8:	68fb      	ldr	r3, [r7, #12]
    4aaa:	430a      	orrs	r2, r1
    4aac:	601a      	str	r2, [r3, #0]
  }
}
    4aae:	bf00      	nop
    4ab0:	bf00      	nop
    4ab2:	3714      	adds	r7, #20
    4ab4:	46bd      	mov	sp, r7
    4ab6:	bc80      	pop	{r7}
    4ab8:	4770      	bx	lr

00004aba <TIM_UpdateDisableConfig>:
  * @param  NewState: new state of the TIMx UDIS bit
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_UpdateDisableConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
    4aba:	b480      	push	{r7}
    4abc:	b083      	sub	sp, #12
    4abe:	af00      	add	r7, sp, #0
    4ac0:	6078      	str	r0, [r7, #4]
    4ac2:	460b      	mov	r3, r1
    4ac4:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    4ac6:	78fb      	ldrb	r3, [r7, #3]
    4ac8:	2b00      	cmp	r3, #0
    4aca:	d008      	beq.n	4ade <TIM_UpdateDisableConfig+0x24>
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
    4acc:	687b      	ldr	r3, [r7, #4]
    4ace:	881b      	ldrh	r3, [r3, #0]
    4ad0:	b29b      	uxth	r3, r3
    4ad2:	f043 0302 	orr.w	r3, r3, #2
    4ad6:	b29a      	uxth	r2, r3
    4ad8:	687b      	ldr	r3, [r7, #4]
    4ada:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Reset the Update Disable Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_UDIS);
  }
}
    4adc:	e007      	b.n	4aee <TIM_UpdateDisableConfig+0x34>
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_UDIS);
    4ade:	687b      	ldr	r3, [r7, #4]
    4ae0:	881b      	ldrh	r3, [r3, #0]
    4ae2:	b29b      	uxth	r3, r3
    4ae4:	f023 0302 	bic.w	r3, r3, #2
    4ae8:	b29a      	uxth	r2, r3
    4aea:	687b      	ldr	r3, [r7, #4]
    4aec:	801a      	strh	r2, [r3, #0]
}
    4aee:	bf00      	nop
    4af0:	370c      	adds	r7, #12
    4af2:	46bd      	mov	sp, r7
    4af4:	bc80      	pop	{r7}
    4af6:	4770      	bx	lr

00004af8 <TIM_UpdateRequestConfig>:
                                       through the slave mode controller.
  *     @arg TIM_UpdateSource_Global: Source of update is counter overflow/underflow.
  * @retval None
  */
void TIM_UpdateRequestConfig(TIM_TypeDef* TIMx, uint16_t TIM_UpdateSource)
{
    4af8:	b480      	push	{r7}
    4afa:	b083      	sub	sp, #12
    4afc:	af00      	add	r7, sp, #0
    4afe:	6078      	str	r0, [r7, #4]
    4b00:	460b      	mov	r3, r1
    4b02:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));
  if (TIM_UpdateSource != TIM_UpdateSource_Global)
    4b04:	887b      	ldrh	r3, [r7, #2]
    4b06:	2b00      	cmp	r3, #0
    4b08:	d008      	beq.n	4b1c <TIM_UpdateRequestConfig+0x24>
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
    4b0a:	687b      	ldr	r3, [r7, #4]
    4b0c:	881b      	ldrh	r3, [r3, #0]
    4b0e:	b29b      	uxth	r3, r3
    4b10:	f043 0304 	orr.w	r3, r3, #4
    4b14:	b29a      	uxth	r2, r3
    4b16:	687b      	ldr	r3, [r7, #4]
    4b18:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_URS);
  }
}
    4b1a:	e007      	b.n	4b2c <TIM_UpdateRequestConfig+0x34>
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_URS);
    4b1c:	687b      	ldr	r3, [r7, #4]
    4b1e:	881b      	ldrh	r3, [r3, #0]
    4b20:	b29b      	uxth	r3, r3
    4b22:	f023 0304 	bic.w	r3, r3, #4
    4b26:	b29a      	uxth	r2, r3
    4b28:	687b      	ldr	r3, [r7, #4]
    4b2a:	801a      	strh	r2, [r3, #0]
}
    4b2c:	bf00      	nop
    4b2e:	370c      	adds	r7, #12
    4b30:	46bd      	mov	sp, r7
    4b32:	bc80      	pop	{r7}
    4b34:	4770      	bx	lr

00004b36 <TIM_SelectHallSensor>:
  * @param  NewState: new state of the TIMx Hall sensor interface.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectHallSensor(TIM_TypeDef* TIMx, FunctionalState NewState)
{
    4b36:	b480      	push	{r7}
    4b38:	b083      	sub	sp, #12
    4b3a:	af00      	add	r7, sp, #0
    4b3c:	6078      	str	r0, [r7, #4]
    4b3e:	460b      	mov	r3, r1
    4b40:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    4b42:	78fb      	ldrb	r3, [r7, #3]
    4b44:	2b00      	cmp	r3, #0
    4b46:	d008      	beq.n	4b5a <TIM_SelectHallSensor+0x24>
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
    4b48:	687b      	ldr	r3, [r7, #4]
    4b4a:	889b      	ldrh	r3, [r3, #4]
    4b4c:	b29b      	uxth	r3, r3
    4b4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    4b52:	b29a      	uxth	r2, r3
    4b54:	687b      	ldr	r3, [r7, #4]
    4b56:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Reset the TI1S Bit */
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_TI1S);
  }
}
    4b58:	e007      	b.n	4b6a <TIM_SelectHallSensor+0x34>
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_TI1S);
    4b5a:	687b      	ldr	r3, [r7, #4]
    4b5c:	889b      	ldrh	r3, [r3, #4]
    4b5e:	b29b      	uxth	r3, r3
    4b60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    4b64:	b29a      	uxth	r2, r3
    4b66:	687b      	ldr	r3, [r7, #4]
    4b68:	809a      	strh	r2, [r3, #4]
}
    4b6a:	bf00      	nop
    4b6c:	370c      	adds	r7, #12
    4b6e:	46bd      	mov	sp, r7
    4b70:	bc80      	pop	{r7}
    4b72:	4770      	bx	lr

00004b74 <TIM_SelectOnePulseMode>:
  *     @arg TIM_OPMode_Single
  *     @arg TIM_OPMode_Repetitive
  * @retval None
  */
void TIM_SelectOnePulseMode(TIM_TypeDef* TIMx, uint16_t TIM_OPMode)
{
    4b74:	b480      	push	{r7}
    4b76:	b083      	sub	sp, #12
    4b78:	af00      	add	r7, sp, #0
    4b7a:	6078      	str	r0, [r7, #4]
    4b7c:	460b      	mov	r3, r1
    4b7e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));
  /* Reset the OPM Bit */
  TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_OPM);
    4b80:	687b      	ldr	r3, [r7, #4]
    4b82:	881b      	ldrh	r3, [r3, #0]
    4b84:	b29b      	uxth	r3, r3
    4b86:	f023 0308 	bic.w	r3, r3, #8
    4b8a:	b29a      	uxth	r2, r3
    4b8c:	687b      	ldr	r3, [r7, #4]
    4b8e:	801a      	strh	r2, [r3, #0]
  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
    4b90:	687b      	ldr	r3, [r7, #4]
    4b92:	881b      	ldrh	r3, [r3, #0]
    4b94:	b29a      	uxth	r2, r3
    4b96:	887b      	ldrh	r3, [r7, #2]
    4b98:	4313      	orrs	r3, r2
    4b9a:	b29a      	uxth	r2, r3
    4b9c:	687b      	ldr	r3, [r7, #4]
    4b9e:	801a      	strh	r2, [r3, #0]
}
    4ba0:	bf00      	nop
    4ba2:	370c      	adds	r7, #12
    4ba4:	46bd      	mov	sp, r7
    4ba6:	bc80      	pop	{r7}
    4ba8:	4770      	bx	lr

00004baa <TIM_SelectOutputTrigger>:
  *     @arg TIM_TRGOSource_OC4Ref: OC4REF signal is used as the trigger output (TRGO).
  *
  * @retval None
  */
void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource)
{
    4baa:	b480      	push	{r7}
    4bac:	b083      	sub	sp, #12
    4bae:	af00      	add	r7, sp, #0
    4bb0:	6078      	str	r0, [r7, #4]
    4bb2:	460b      	mov	r3, r1
    4bb4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST7_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));
  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_MMS);
    4bb6:	687b      	ldr	r3, [r7, #4]
    4bb8:	889b      	ldrh	r3, [r3, #4]
    4bba:	b29b      	uxth	r3, r3
    4bbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    4bc0:	b29a      	uxth	r2, r3
    4bc2:	687b      	ldr	r3, [r7, #4]
    4bc4:	809a      	strh	r2, [r3, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
    4bc6:	687b      	ldr	r3, [r7, #4]
    4bc8:	889b      	ldrh	r3, [r3, #4]
    4bca:	b29a      	uxth	r2, r3
    4bcc:	887b      	ldrh	r3, [r7, #2]
    4bce:	4313      	orrs	r3, r2
    4bd0:	b29a      	uxth	r2, r3
    4bd2:	687b      	ldr	r3, [r7, #4]
    4bd4:	809a      	strh	r2, [r3, #4]
}
    4bd6:	bf00      	nop
    4bd8:	370c      	adds	r7, #12
    4bda:	46bd      	mov	sp, r7
    4bdc:	bc80      	pop	{r7}
    4bde:	4770      	bx	lr

00004be0 <TIM_SelectSlaveMode>:
  *     @arg TIM_SlaveMode_Trigger:   The counter starts at a rising edge of the trigger TRGI.
  *     @arg TIM_SlaveMode_External1: Rising edges of the selected trigger (TRGI) clock the counter.
  * @retval None
  */
void TIM_SelectSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_SlaveMode)
{
    4be0:	b480      	push	{r7}
    4be2:	b083      	sub	sp, #12
    4be4:	af00      	add	r7, sp, #0
    4be6:	6078      	str	r0, [r7, #4]
    4be8:	460b      	mov	r3, r1
    4bea:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));
 /* Reset the SMS Bits */
  TIMx->SMCR &= (uint16_t)~((uint16_t)TIM_SMCR_SMS);
    4bec:	687b      	ldr	r3, [r7, #4]
    4bee:	891b      	ldrh	r3, [r3, #8]
    4bf0:	b29b      	uxth	r3, r3
    4bf2:	f023 0307 	bic.w	r3, r3, #7
    4bf6:	b29a      	uxth	r2, r3
    4bf8:	687b      	ldr	r3, [r7, #4]
    4bfa:	811a      	strh	r2, [r3, #8]
  /* Select the Slave Mode */
  TIMx->SMCR |= TIM_SlaveMode;
    4bfc:	687b      	ldr	r3, [r7, #4]
    4bfe:	891b      	ldrh	r3, [r3, #8]
    4c00:	b29a      	uxth	r2, r3
    4c02:	887b      	ldrh	r3, [r7, #2]
    4c04:	4313      	orrs	r3, r2
    4c06:	b29a      	uxth	r2, r3
    4c08:	687b      	ldr	r3, [r7, #4]
    4c0a:	811a      	strh	r2, [r3, #8]
}
    4c0c:	bf00      	nop
    4c0e:	370c      	adds	r7, #12
    4c10:	46bd      	mov	sp, r7
    4c12:	bc80      	pop	{r7}
    4c14:	4770      	bx	lr

00004c16 <TIM_SelectMasterSlaveMode>:
  *                                      and its slaves (through TRGO).
  *     @arg TIM_MasterSlaveMode_Disable: No action
  * @retval None
  */
void TIM_SelectMasterSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_MasterSlaveMode)
{
    4c16:	b480      	push	{r7}
    4c18:	b083      	sub	sp, #12
    4c1a:	af00      	add	r7, sp, #0
    4c1c:	6078      	str	r0, [r7, #4]
    4c1e:	460b      	mov	r3, r1
    4c20:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));
  /* Reset the MSM Bit */
  TIMx->SMCR &= (uint16_t)~((uint16_t)TIM_SMCR_MSM);
    4c22:	687b      	ldr	r3, [r7, #4]
    4c24:	891b      	ldrh	r3, [r3, #8]
    4c26:	b29b      	uxth	r3, r3
    4c28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    4c2c:	b29a      	uxth	r2, r3
    4c2e:	687b      	ldr	r3, [r7, #4]
    4c30:	811a      	strh	r2, [r3, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
    4c32:	687b      	ldr	r3, [r7, #4]
    4c34:	891b      	ldrh	r3, [r3, #8]
    4c36:	b29a      	uxth	r2, r3
    4c38:	887b      	ldrh	r3, [r7, #2]
    4c3a:	4313      	orrs	r3, r2
    4c3c:	b29a      	uxth	r2, r3
    4c3e:	687b      	ldr	r3, [r7, #4]
    4c40:	811a      	strh	r2, [r3, #8]
}
    4c42:	bf00      	nop
    4c44:	370c      	adds	r7, #12
    4c46:	46bd      	mov	sp, r7
    4c48:	bc80      	pop	{r7}
    4c4a:	4770      	bx	lr

00004c4c <TIM_SetCounter>:
  * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
  * @param  Counter: specifies the Counter register new value.
  * @retval None
  */
void TIM_SetCounter(TIM_TypeDef* TIMx, uint16_t Counter)
{
    4c4c:	b480      	push	{r7}
    4c4e:	b083      	sub	sp, #12
    4c50:	af00      	add	r7, sp, #0
    4c52:	6078      	str	r0, [r7, #4]
    4c54:	460b      	mov	r3, r1
    4c56:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Set the Counter Register value */
  TIMx->CNT = Counter;
    4c58:	687b      	ldr	r3, [r7, #4]
    4c5a:	887a      	ldrh	r2, [r7, #2]
    4c5c:	849a      	strh	r2, [r3, #36]	; 0x24
}
    4c5e:	bf00      	nop
    4c60:	370c      	adds	r7, #12
    4c62:	46bd      	mov	sp, r7
    4c64:	bc80      	pop	{r7}
    4c66:	4770      	bx	lr

00004c68 <TIM_SetAutoreload>:
  * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
  * @param  Autoreload: specifies the Autoreload register new value.
  * @retval None
  */
void TIM_SetAutoreload(TIM_TypeDef* TIMx, uint16_t Autoreload)
{
    4c68:	b480      	push	{r7}
    4c6a:	b083      	sub	sp, #12
    4c6c:	af00      	add	r7, sp, #0
    4c6e:	6078      	str	r0, [r7, #4]
    4c70:	460b      	mov	r3, r1
    4c72:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
    4c74:	687b      	ldr	r3, [r7, #4]
    4c76:	887a      	ldrh	r2, [r7, #2]
    4c78:	859a      	strh	r2, [r3, #44]	; 0x2c
}
    4c7a:	bf00      	nop
    4c7c:	370c      	adds	r7, #12
    4c7e:	46bd      	mov	sp, r7
    4c80:	bc80      	pop	{r7}
    4c82:	4770      	bx	lr

00004c84 <TIM_SetCompare1>:
  * @param  TIMx: where x can be 1 to 17 except 6 and 7 to select the TIM peripheral.
  * @param  Compare1: specifies the Capture Compare1 register new value.
  * @retval None
  */
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint16_t Compare1)
{
    4c84:	b480      	push	{r7}
    4c86:	b083      	sub	sp, #12
    4c88:	af00      	add	r7, sp, #0
    4c8a:	6078      	str	r0, [r7, #4]
    4c8c:	460b      	mov	r3, r1
    4c8e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
    4c90:	687b      	ldr	r3, [r7, #4]
    4c92:	887a      	ldrh	r2, [r7, #2]
    4c94:	869a      	strh	r2, [r3, #52]	; 0x34
}
    4c96:	bf00      	nop
    4c98:	370c      	adds	r7, #12
    4c9a:	46bd      	mov	sp, r7
    4c9c:	bc80      	pop	{r7}
    4c9e:	4770      	bx	lr

00004ca0 <TIM_SetCompare2>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9, 12 or 15 to select the TIM peripheral.
  * @param  Compare2: specifies the Capture Compare2 register new value.
  * @retval None
  */
void TIM_SetCompare2(TIM_TypeDef* TIMx, uint16_t Compare2)
{
    4ca0:	b480      	push	{r7}
    4ca2:	b083      	sub	sp, #12
    4ca4:	af00      	add	r7, sp, #0
    4ca6:	6078      	str	r0, [r7, #4]
    4ca8:	460b      	mov	r3, r1
    4caa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
    4cac:	687b      	ldr	r3, [r7, #4]
    4cae:	887a      	ldrh	r2, [r7, #2]
    4cb0:	871a      	strh	r2, [r3, #56]	; 0x38
}
    4cb2:	bf00      	nop
    4cb4:	370c      	adds	r7, #12
    4cb6:	46bd      	mov	sp, r7
    4cb8:	bc80      	pop	{r7}
    4cba:	4770      	bx	lr

00004cbc <TIM_SetCompare3>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare3: specifies the Capture Compare3 register new value.
  * @retval None
  */
void TIM_SetCompare3(TIM_TypeDef* TIMx, uint16_t Compare3)
{
    4cbc:	b480      	push	{r7}
    4cbe:	b083      	sub	sp, #12
    4cc0:	af00      	add	r7, sp, #0
    4cc2:	6078      	str	r0, [r7, #4]
    4cc4:	460b      	mov	r3, r1
    4cc6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
    4cc8:	687b      	ldr	r3, [r7, #4]
    4cca:	887a      	ldrh	r2, [r7, #2]
    4ccc:	879a      	strh	r2, [r3, #60]	; 0x3c
}
    4cce:	bf00      	nop
    4cd0:	370c      	adds	r7, #12
    4cd2:	46bd      	mov	sp, r7
    4cd4:	bc80      	pop	{r7}
    4cd6:	4770      	bx	lr

00004cd8 <TIM_SetCompare4>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare4: specifies the Capture Compare4 register new value.
  * @retval None
  */
void TIM_SetCompare4(TIM_TypeDef* TIMx, uint16_t Compare4)
{
    4cd8:	b480      	push	{r7}
    4cda:	b083      	sub	sp, #12
    4cdc:	af00      	add	r7, sp, #0
    4cde:	6078      	str	r0, [r7, #4]
    4ce0:	460b      	mov	r3, r1
    4ce2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
    4ce4:	687b      	ldr	r3, [r7, #4]
    4ce6:	887a      	ldrh	r2, [r7, #2]
    4ce8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
}
    4cec:	bf00      	nop
    4cee:	370c      	adds	r7, #12
    4cf0:	46bd      	mov	sp, r7
    4cf2:	bc80      	pop	{r7}
    4cf4:	4770      	bx	lr

00004cf6 <TIM_SetIC1Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
    4cf6:	b480      	push	{r7}
    4cf8:	b083      	sub	sp, #12
    4cfa:	af00      	add	r7, sp, #0
    4cfc:	6078      	str	r0, [r7, #4]
    4cfe:	460b      	mov	r3, r1
    4d00:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC1PSC);
    4d02:	687b      	ldr	r3, [r7, #4]
    4d04:	8b1b      	ldrh	r3, [r3, #24]
    4d06:	b29b      	uxth	r3, r3
    4d08:	f023 030c 	bic.w	r3, r3, #12
    4d0c:	b29a      	uxth	r2, r3
    4d0e:	687b      	ldr	r3, [r7, #4]
    4d10:	831a      	strh	r2, [r3, #24]
  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
    4d12:	687b      	ldr	r3, [r7, #4]
    4d14:	8b1b      	ldrh	r3, [r3, #24]
    4d16:	b29a      	uxth	r2, r3
    4d18:	887b      	ldrh	r3, [r7, #2]
    4d1a:	4313      	orrs	r3, r2
    4d1c:	b29a      	uxth	r2, r3
    4d1e:	687b      	ldr	r3, [r7, #4]
    4d20:	831a      	strh	r2, [r3, #24]
}
    4d22:	bf00      	nop
    4d24:	370c      	adds	r7, #12
    4d26:	46bd      	mov	sp, r7
    4d28:	bc80      	pop	{r7}
    4d2a:	4770      	bx	lr

00004d2c <TIM_SetIC2Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
    4d2c:	b480      	push	{r7}
    4d2e:	b083      	sub	sp, #12
    4d30:	af00      	add	r7, sp, #0
    4d32:	6078      	str	r0, [r7, #4]
    4d34:	460b      	mov	r3, r1
    4d36:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC2PSC);
    4d38:	687b      	ldr	r3, [r7, #4]
    4d3a:	8b1b      	ldrh	r3, [r3, #24]
    4d3c:	b29b      	uxth	r3, r3
    4d3e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
    4d42:	b29a      	uxth	r2, r3
    4d44:	687b      	ldr	r3, [r7, #4]
    4d46:	831a      	strh	r2, [r3, #24]
  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
    4d48:	687b      	ldr	r3, [r7, #4]
    4d4a:	8b1b      	ldrh	r3, [r3, #24]
    4d4c:	b29a      	uxth	r2, r3
    4d4e:	887b      	ldrh	r3, [r7, #2]
    4d50:	021b      	lsls	r3, r3, #8
    4d52:	b29b      	uxth	r3, r3
    4d54:	4313      	orrs	r3, r2
    4d56:	b29a      	uxth	r2, r3
    4d58:	687b      	ldr	r3, [r7, #4]
    4d5a:	831a      	strh	r2, [r3, #24]
}
    4d5c:	bf00      	nop
    4d5e:	370c      	adds	r7, #12
    4d60:	46bd      	mov	sp, r7
    4d62:	bc80      	pop	{r7}
    4d64:	4770      	bx	lr

00004d66 <TIM_SetIC3Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
    4d66:	b480      	push	{r7}
    4d68:	b083      	sub	sp, #12
    4d6a:	af00      	add	r7, sp, #0
    4d6c:	6078      	str	r0, [r7, #4]
    4d6e:	460b      	mov	r3, r1
    4d70:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC3PSC);
    4d72:	687b      	ldr	r3, [r7, #4]
    4d74:	8b9b      	ldrh	r3, [r3, #28]
    4d76:	b29b      	uxth	r3, r3
    4d78:	f023 030c 	bic.w	r3, r3, #12
    4d7c:	b29a      	uxth	r2, r3
    4d7e:	687b      	ldr	r3, [r7, #4]
    4d80:	839a      	strh	r2, [r3, #28]
  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
    4d82:	687b      	ldr	r3, [r7, #4]
    4d84:	8b9b      	ldrh	r3, [r3, #28]
    4d86:	b29a      	uxth	r2, r3
    4d88:	887b      	ldrh	r3, [r7, #2]
    4d8a:	4313      	orrs	r3, r2
    4d8c:	b29a      	uxth	r2, r3
    4d8e:	687b      	ldr	r3, [r7, #4]
    4d90:	839a      	strh	r2, [r3, #28]
}
    4d92:	bf00      	nop
    4d94:	370c      	adds	r7, #12
    4d96:	46bd      	mov	sp, r7
    4d98:	bc80      	pop	{r7}
    4d9a:	4770      	bx	lr

00004d9c <TIM_SetIC4Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{  
    4d9c:	b480      	push	{r7}
    4d9e:	b083      	sub	sp, #12
    4da0:	af00      	add	r7, sp, #0
    4da2:	6078      	str	r0, [r7, #4]
    4da4:	460b      	mov	r3, r1
    4da6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC4PSC);
    4da8:	687b      	ldr	r3, [r7, #4]
    4daa:	8b9b      	ldrh	r3, [r3, #28]
    4dac:	b29b      	uxth	r3, r3
    4dae:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
    4db2:	b29a      	uxth	r2, r3
    4db4:	687b      	ldr	r3, [r7, #4]
    4db6:	839a      	strh	r2, [r3, #28]
  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
    4db8:	687b      	ldr	r3, [r7, #4]
    4dba:	8b9b      	ldrh	r3, [r3, #28]
    4dbc:	b29a      	uxth	r2, r3
    4dbe:	887b      	ldrh	r3, [r7, #2]
    4dc0:	021b      	lsls	r3, r3, #8
    4dc2:	b29b      	uxth	r3, r3
    4dc4:	4313      	orrs	r3, r2
    4dc6:	b29a      	uxth	r2, r3
    4dc8:	687b      	ldr	r3, [r7, #4]
    4dca:	839a      	strh	r2, [r3, #28]
}
    4dcc:	bf00      	nop
    4dce:	370c      	adds	r7, #12
    4dd0:	46bd      	mov	sp, r7
    4dd2:	bc80      	pop	{r7}
    4dd4:	4770      	bx	lr

00004dd6 <TIM_SetClockDivision>:
  *     @arg TIM_CKD_DIV2: TDTS = 2*Tck_tim
  *     @arg TIM_CKD_DIV4: TDTS = 4*Tck_tim
  * @retval None
  */
void TIM_SetClockDivision(TIM_TypeDef* TIMx, uint16_t TIM_CKD)
{
    4dd6:	b480      	push	{r7}
    4dd8:	b083      	sub	sp, #12
    4dda:	af00      	add	r7, sp, #0
    4ddc:	6078      	str	r0, [r7, #4]
    4dde:	460b      	mov	r3, r1
    4de0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_CKD_DIV(TIM_CKD));
  /* Reset the CKD Bits */
  TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_CKD);
    4de2:	687b      	ldr	r3, [r7, #4]
    4de4:	881b      	ldrh	r3, [r3, #0]
    4de6:	b29b      	uxth	r3, r3
    4de8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    4dec:	b29a      	uxth	r2, r3
    4dee:	687b      	ldr	r3, [r7, #4]
    4df0:	801a      	strh	r2, [r3, #0]
  /* Set the CKD value */
  TIMx->CR1 |= TIM_CKD;
    4df2:	687b      	ldr	r3, [r7, #4]
    4df4:	881b      	ldrh	r3, [r3, #0]
    4df6:	b29a      	uxth	r2, r3
    4df8:	887b      	ldrh	r3, [r7, #2]
    4dfa:	4313      	orrs	r3, r2
    4dfc:	b29a      	uxth	r2, r3
    4dfe:	687b      	ldr	r3, [r7, #4]
    4e00:	801a      	strh	r2, [r3, #0]
}
    4e02:	bf00      	nop
    4e04:	370c      	adds	r7, #12
    4e06:	46bd      	mov	sp, r7
    4e08:	bc80      	pop	{r7}
    4e0a:	4770      	bx	lr

00004e0c <TIM_GetCapture1>:
  * @brief  Gets the TIMx Input Capture 1 value.
  * @param  TIMx: where x can be 1 to 17 except 6 and 7 to select the TIM peripheral.
  * @retval Capture Compare 1 Register value.
  */
uint16_t TIM_GetCapture1(TIM_TypeDef* TIMx)
{
    4e0c:	b480      	push	{r7}
    4e0e:	b083      	sub	sp, #12
    4e10:	af00      	add	r7, sp, #0
    4e12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
    4e14:	687b      	ldr	r3, [r7, #4]
    4e16:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    4e18:	b29b      	uxth	r3, r3
}
    4e1a:	4618      	mov	r0, r3
    4e1c:	370c      	adds	r7, #12
    4e1e:	46bd      	mov	sp, r7
    4e20:	bc80      	pop	{r7}
    4e22:	4770      	bx	lr

00004e24 <TIM_GetCapture2>:
  * @brief  Gets the TIMx Input Capture 2 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9, 12 or 15 to select the TIM peripheral.
  * @retval Capture Compare 2 Register value.
  */
uint16_t TIM_GetCapture2(TIM_TypeDef* TIMx)
{
    4e24:	b480      	push	{r7}
    4e26:	b083      	sub	sp, #12
    4e28:	af00      	add	r7, sp, #0
    4e2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
    4e2c:	687b      	ldr	r3, [r7, #4]
    4e2e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
    4e30:	b29b      	uxth	r3, r3
}
    4e32:	4618      	mov	r0, r3
    4e34:	370c      	adds	r7, #12
    4e36:	46bd      	mov	sp, r7
    4e38:	bc80      	pop	{r7}
    4e3a:	4770      	bx	lr

00004e3c <TIM_GetCapture3>:
  * @brief  Gets the TIMx Input Capture 3 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 3 Register value.
  */
uint16_t TIM_GetCapture3(TIM_TypeDef* TIMx)
{
    4e3c:	b480      	push	{r7}
    4e3e:	b083      	sub	sp, #12
    4e40:	af00      	add	r7, sp, #0
    4e42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
    4e44:	687b      	ldr	r3, [r7, #4]
    4e46:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    4e48:	b29b      	uxth	r3, r3
}
    4e4a:	4618      	mov	r0, r3
    4e4c:	370c      	adds	r7, #12
    4e4e:	46bd      	mov	sp, r7
    4e50:	bc80      	pop	{r7}
    4e52:	4770      	bx	lr

00004e54 <TIM_GetCapture4>:
  * @brief  Gets the TIMx Input Capture 4 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 4 Register value.
  */
uint16_t TIM_GetCapture4(TIM_TypeDef* TIMx)
{
    4e54:	b480      	push	{r7}
    4e56:	b083      	sub	sp, #12
    4e58:	af00      	add	r7, sp, #0
    4e5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
    4e5c:	687b      	ldr	r3, [r7, #4]
    4e5e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
    4e62:	b29b      	uxth	r3, r3
}
    4e64:	4618      	mov	r0, r3
    4e66:	370c      	adds	r7, #12
    4e68:	46bd      	mov	sp, r7
    4e6a:	bc80      	pop	{r7}
    4e6c:	4770      	bx	lr

00004e6e <TIM_GetCounter>:
  * @brief  Gets the TIMx Counter value.
  * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
  * @retval Counter Register value.
  */
uint16_t TIM_GetCounter(TIM_TypeDef* TIMx)
{
    4e6e:	b480      	push	{r7}
    4e70:	b083      	sub	sp, #12
    4e72:	af00      	add	r7, sp, #0
    4e74:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Get the Counter Register value */
  return TIMx->CNT;
    4e76:	687b      	ldr	r3, [r7, #4]
    4e78:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    4e7a:	b29b      	uxth	r3, r3
}
    4e7c:	4618      	mov	r0, r3
    4e7e:	370c      	adds	r7, #12
    4e80:	46bd      	mov	sp, r7
    4e82:	bc80      	pop	{r7}
    4e84:	4770      	bx	lr

00004e86 <TIM_GetPrescaler>:
  * @brief  Gets the TIMx Prescaler value.
  * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
  * @retval Prescaler Register value.
  */
uint16_t TIM_GetPrescaler(TIM_TypeDef* TIMx)
{
    4e86:	b480      	push	{r7}
    4e88:	b083      	sub	sp, #12
    4e8a:	af00      	add	r7, sp, #0
    4e8c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Get the Prescaler Register value */
  return TIMx->PSC;
    4e8e:	687b      	ldr	r3, [r7, #4]
    4e90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    4e92:	b29b      	uxth	r3, r3
}
    4e94:	4618      	mov	r0, r3
    4e96:	370c      	adds	r7, #12
    4e98:	46bd      	mov	sp, r7
    4e9a:	bc80      	pop	{r7}
    4e9c:	4770      	bx	lr

00004e9e <TIM_GetFlagStatus>:
  *   - TIM_FLAG_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_FLAG_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.    
  * @retval The new state of TIM_FLAG (SET or RESET).
  */
FlagStatus TIM_GetFlagStatus(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{ 
    4e9e:	b480      	push	{r7}
    4ea0:	b085      	sub	sp, #20
    4ea2:	af00      	add	r7, sp, #0
    4ea4:	6078      	str	r0, [r7, #4]
    4ea6:	460b      	mov	r3, r1
    4ea8:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
    4eaa:	2300      	movs	r3, #0
    4eac:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));
  
  if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
    4eae:	687b      	ldr	r3, [r7, #4]
    4eb0:	8a1b      	ldrh	r3, [r3, #16]
    4eb2:	b29a      	uxth	r2, r3
    4eb4:	887b      	ldrh	r3, [r7, #2]
    4eb6:	4013      	ands	r3, r2
    4eb8:	b29b      	uxth	r3, r3
    4eba:	2b00      	cmp	r3, #0
    4ebc:	d002      	beq.n	4ec4 <TIM_GetFlagStatus+0x26>
  {
    bitstatus = SET;
    4ebe:	2301      	movs	r3, #1
    4ec0:	73fb      	strb	r3, [r7, #15]
    4ec2:	e001      	b.n	4ec8 <TIM_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
    4ec4:	2300      	movs	r3, #0
    4ec6:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    4ec8:	7bfb      	ldrb	r3, [r7, #15]
}
    4eca:	4618      	mov	r0, r3
    4ecc:	3714      	adds	r7, #20
    4ece:	46bd      	mov	sp, r7
    4ed0:	bc80      	pop	{r7}
    4ed2:	4770      	bx	lr

00004ed4 <TIM_ClearFlag>:
  *   - TIM_FLAG_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_FLAG_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.   
  * @retval None
  */
void TIM_ClearFlag(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{  
    4ed4:	b480      	push	{r7}
    4ed6:	b083      	sub	sp, #12
    4ed8:	af00      	add	r7, sp, #0
    4eda:	6078      	str	r0, [r7, #4]
    4edc:	460b      	mov	r3, r1
    4ede:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_CLEAR_FLAG(TIM_FLAG));
   
  /* Clear the flags */
  TIMx->SR = (uint16_t)~TIM_FLAG;
    4ee0:	887b      	ldrh	r3, [r7, #2]
    4ee2:	43db      	mvns	r3, r3
    4ee4:	b29a      	uxth	r2, r3
    4ee6:	687b      	ldr	r3, [r7, #4]
    4ee8:	821a      	strh	r2, [r3, #16]
}
    4eea:	bf00      	nop
    4eec:	370c      	adds	r7, #12
    4eee:	46bd      	mov	sp, r7
    4ef0:	bc80      	pop	{r7}
    4ef2:	4770      	bx	lr

00004ef4 <TIM_GetITStatus>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.  
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
    4ef4:	b480      	push	{r7}
    4ef6:	b085      	sub	sp, #20
    4ef8:	af00      	add	r7, sp, #0
    4efa:	6078      	str	r0, [r7, #4]
    4efc:	460b      	mov	r3, r1
    4efe:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
    4f00:	2300      	movs	r3, #0
    4f02:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
    4f04:	2300      	movs	r3, #0
    4f06:	81bb      	strh	r3, [r7, #12]
    4f08:	2300      	movs	r3, #0
    4f0a:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
    4f0c:	687b      	ldr	r3, [r7, #4]
    4f0e:	8a1b      	ldrh	r3, [r3, #16]
    4f10:	b29a      	uxth	r2, r3
    4f12:	887b      	ldrh	r3, [r7, #2]
    4f14:	4013      	ands	r3, r2
    4f16:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
    4f18:	687b      	ldr	r3, [r7, #4]
    4f1a:	899b      	ldrh	r3, [r3, #12]
    4f1c:	b29a      	uxth	r2, r3
    4f1e:	887b      	ldrh	r3, [r7, #2]
    4f20:	4013      	ands	r3, r2
    4f22:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
    4f24:	89bb      	ldrh	r3, [r7, #12]
    4f26:	2b00      	cmp	r3, #0
    4f28:	d005      	beq.n	4f36 <TIM_GetITStatus+0x42>
    4f2a:	897b      	ldrh	r3, [r7, #10]
    4f2c:	2b00      	cmp	r3, #0
    4f2e:	d002      	beq.n	4f36 <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
    4f30:	2301      	movs	r3, #1
    4f32:	73fb      	strb	r3, [r7, #15]
    4f34:	e001      	b.n	4f3a <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
    4f36:	2300      	movs	r3, #0
    4f38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    4f3a:	7bfb      	ldrb	r3, [r7, #15]
}
    4f3c:	4618      	mov	r0, r3
    4f3e:	3714      	adds	r7, #20
    4f40:	46bd      	mov	sp, r7
    4f42:	bc80      	pop	{r7}
    4f44:	4770      	bx	lr

00004f46 <TIM_ClearITPendingBit>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.    
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
    4f46:	b480      	push	{r7}
    4f48:	b083      	sub	sp, #12
    4f4a:	af00      	add	r7, sp, #0
    4f4c:	6078      	str	r0, [r7, #4]
    4f4e:	460b      	mov	r3, r1
    4f50:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
    4f52:	887b      	ldrh	r3, [r7, #2]
    4f54:	43db      	mvns	r3, r3
    4f56:	b29a      	uxth	r2, r3
    4f58:	687b      	ldr	r3, [r7, #4]
    4f5a:	821a      	strh	r2, [r3, #16]
}
    4f5c:	bf00      	nop
    4f5e:	370c      	adds	r7, #12
    4f60:	46bd      	mov	sp, r7
    4f62:	bc80      	pop	{r7}
    4f64:	4770      	bx	lr

00004f66 <TI1_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
    4f66:	b480      	push	{r7}
    4f68:	b087      	sub	sp, #28
    4f6a:	af00      	add	r7, sp, #0
    4f6c:	60f8      	str	r0, [r7, #12]
    4f6e:	4608      	mov	r0, r1
    4f70:	4611      	mov	r1, r2
    4f72:	461a      	mov	r2, r3
    4f74:	4603      	mov	r3, r0
    4f76:	817b      	strh	r3, [r7, #10]
    4f78:	460b      	mov	r3, r1
    4f7a:	813b      	strh	r3, [r7, #8]
    4f7c:	4613      	mov	r3, r2
    4f7e:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0;
    4f80:	2300      	movs	r3, #0
    4f82:	82bb      	strh	r3, [r7, #20]
    4f84:	2300      	movs	r3, #0
    4f86:	82fb      	strh	r3, [r7, #22]
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
    4f88:	68fb      	ldr	r3, [r7, #12]
    4f8a:	8c1b      	ldrh	r3, [r3, #32]
    4f8c:	b29b      	uxth	r3, r3
    4f8e:	f023 0301 	bic.w	r3, r3, #1
    4f92:	b29a      	uxth	r2, r3
    4f94:	68fb      	ldr	r3, [r7, #12]
    4f96:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
    4f98:	68fb      	ldr	r3, [r7, #12]
    4f9a:	8b1b      	ldrh	r3, [r3, #24]
    4f9c:	82bb      	strh	r3, [r7, #20]
  tmpccer = TIMx->CCER;
    4f9e:	68fb      	ldr	r3, [r7, #12]
    4fa0:	8c1b      	ldrh	r3, [r3, #32]
    4fa2:	82fb      	strh	r3, [r7, #22]
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
    4fa4:	8abb      	ldrh	r3, [r7, #20]
    4fa6:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
    4faa:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
    4fac:	88fb      	ldrh	r3, [r7, #6]
    4fae:	011b      	lsls	r3, r3, #4
    4fb0:	b29a      	uxth	r2, r3
    4fb2:	893b      	ldrh	r3, [r7, #8]
    4fb4:	4313      	orrs	r3, r2
    4fb6:	b29a      	uxth	r2, r3
    4fb8:	8abb      	ldrh	r3, [r7, #20]
    4fba:	4313      	orrs	r3, r2
    4fbc:	82bb      	strh	r3, [r7, #20]
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
    4fbe:	68fb      	ldr	r3, [r7, #12]
    4fc0:	4a1c      	ldr	r2, [pc, #112]	; (5034 <TI1_Config+0xce>)
    4fc2:	4293      	cmp	r3, r2
    4fc4:	d013      	beq.n	4fee <TI1_Config+0x88>
    4fc6:	68fb      	ldr	r3, [r7, #12]
    4fc8:	4a1b      	ldr	r2, [pc, #108]	; (5038 <TI1_Config+0xd2>)
    4fca:	4293      	cmp	r3, r2
    4fcc:	d00f      	beq.n	4fee <TI1_Config+0x88>
    4fce:	68fb      	ldr	r3, [r7, #12]
    4fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    4fd4:	d00b      	beq.n	4fee <TI1_Config+0x88>
    4fd6:	68fb      	ldr	r3, [r7, #12]
    4fd8:	4a18      	ldr	r2, [pc, #96]	; (503c <TI1_Config+0xd6>)
    4fda:	4293      	cmp	r3, r2
    4fdc:	d007      	beq.n	4fee <TI1_Config+0x88>
    4fde:	68fb      	ldr	r3, [r7, #12]
    4fe0:	4a17      	ldr	r2, [pc, #92]	; (5040 <TI1_Config+0xda>)
    4fe2:	4293      	cmp	r3, r2
    4fe4:	d003      	beq.n	4fee <TI1_Config+0x88>
     (TIMx == TIM4) ||(TIMx == TIM5))
    4fe6:	68fb      	ldr	r3, [r7, #12]
    4fe8:	4a16      	ldr	r2, [pc, #88]	; (5044 <TI1_Config+0xde>)
    4fea:	4293      	cmp	r3, r2
    4fec:	d10b      	bne.n	5006 <TI1_Config+0xa0>
  {
    /* Select the Polarity and set the CC1E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P));
    4fee:	8afb      	ldrh	r3, [r7, #22]
    4ff0:	f023 0302 	bic.w	r3, r3, #2
    4ff4:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
    4ff6:	897a      	ldrh	r2, [r7, #10]
    4ff8:	8afb      	ldrh	r3, [r7, #22]
    4ffa:	4313      	orrs	r3, r2
    4ffc:	b29b      	uxth	r3, r3
    4ffe:	f043 0301 	orr.w	r3, r3, #1
    5002:	82fb      	strh	r3, [r7, #22]
    5004:	e00a      	b.n	501c <TI1_Config+0xb6>
  }
  else
  {
    /* Select the Polarity and set the CC1E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP));
    5006:	8afb      	ldrh	r3, [r7, #22]
    5008:	f023 030a 	bic.w	r3, r3, #10
    500c:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
    500e:	897a      	ldrh	r2, [r7, #10]
    5010:	8afb      	ldrh	r3, [r7, #22]
    5012:	4313      	orrs	r3, r2
    5014:	b29b      	uxth	r3, r3
    5016:	f043 0301 	orr.w	r3, r3, #1
    501a:	82fb      	strh	r3, [r7, #22]
  }

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
    501c:	68fb      	ldr	r3, [r7, #12]
    501e:	8aba      	ldrh	r2, [r7, #20]
    5020:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
    5022:	68fb      	ldr	r3, [r7, #12]
    5024:	8afa      	ldrh	r2, [r7, #22]
    5026:	841a      	strh	r2, [r3, #32]
}
    5028:	bf00      	nop
    502a:	371c      	adds	r7, #28
    502c:	46bd      	mov	sp, r7
    502e:	bc80      	pop	{r7}
    5030:	4770      	bx	lr
    5032:	bf00      	nop
    5034:	40012c00 	.word	0x40012c00
    5038:	40013400 	.word	0x40013400
    503c:	40000400 	.word	0x40000400
    5040:	40000800 	.word	0x40000800
    5044:	40000c00 	.word	0x40000c00

00005048 <TI2_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
    5048:	b480      	push	{r7}
    504a:	b087      	sub	sp, #28
    504c:	af00      	add	r7, sp, #0
    504e:	60f8      	str	r0, [r7, #12]
    5050:	4608      	mov	r0, r1
    5052:	4611      	mov	r1, r2
    5054:	461a      	mov	r2, r3
    5056:	4603      	mov	r3, r0
    5058:	817b      	strh	r3, [r7, #10]
    505a:	460b      	mov	r3, r1
    505c:	813b      	strh	r3, [r7, #8]
    505e:	4613      	mov	r3, r2
    5060:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
    5062:	2300      	movs	r3, #0
    5064:	82bb      	strh	r3, [r7, #20]
    5066:	2300      	movs	r3, #0
    5068:	82fb      	strh	r3, [r7, #22]
    506a:	2300      	movs	r3, #0
    506c:	827b      	strh	r3, [r7, #18]
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
    506e:	68fb      	ldr	r3, [r7, #12]
    5070:	8c1b      	ldrh	r3, [r3, #32]
    5072:	b29b      	uxth	r3, r3
    5074:	f023 0310 	bic.w	r3, r3, #16
    5078:	b29a      	uxth	r2, r3
    507a:	68fb      	ldr	r3, [r7, #12]
    507c:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
    507e:	68fb      	ldr	r3, [r7, #12]
    5080:	8b1b      	ldrh	r3, [r3, #24]
    5082:	82bb      	strh	r3, [r7, #20]
  tmpccer = TIMx->CCER;
    5084:	68fb      	ldr	r3, [r7, #12]
    5086:	8c1b      	ldrh	r3, [r3, #32]
    5088:	82fb      	strh	r3, [r7, #22]
  tmp = (uint16_t)(TIM_ICPolarity << 4);
    508a:	897b      	ldrh	r3, [r7, #10]
    508c:	011b      	lsls	r3, r3, #4
    508e:	827b      	strh	r3, [r7, #18]
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
    5090:	8abb      	ldrh	r3, [r7, #20]
    5092:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    5096:	051b      	lsls	r3, r3, #20
    5098:	0d1b      	lsrs	r3, r3, #20
    509a:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
    509c:	88fb      	ldrh	r3, [r7, #6]
    509e:	031b      	lsls	r3, r3, #12
    50a0:	b29a      	uxth	r2, r3
    50a2:	8abb      	ldrh	r3, [r7, #20]
    50a4:	4313      	orrs	r3, r2
    50a6:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
    50a8:	893b      	ldrh	r3, [r7, #8]
    50aa:	021b      	lsls	r3, r3, #8
    50ac:	b29a      	uxth	r2, r3
    50ae:	8abb      	ldrh	r3, [r7, #20]
    50b0:	4313      	orrs	r3, r2
    50b2:	82bb      	strh	r3, [r7, #20]
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
    50b4:	68fb      	ldr	r3, [r7, #12]
    50b6:	4a1c      	ldr	r2, [pc, #112]	; (5128 <TI2_Config+0xe0>)
    50b8:	4293      	cmp	r3, r2
    50ba:	d013      	beq.n	50e4 <TI2_Config+0x9c>
    50bc:	68fb      	ldr	r3, [r7, #12]
    50be:	4a1b      	ldr	r2, [pc, #108]	; (512c <TI2_Config+0xe4>)
    50c0:	4293      	cmp	r3, r2
    50c2:	d00f      	beq.n	50e4 <TI2_Config+0x9c>
    50c4:	68fb      	ldr	r3, [r7, #12]
    50c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    50ca:	d00b      	beq.n	50e4 <TI2_Config+0x9c>
    50cc:	68fb      	ldr	r3, [r7, #12]
    50ce:	4a18      	ldr	r2, [pc, #96]	; (5130 <TI2_Config+0xe8>)
    50d0:	4293      	cmp	r3, r2
    50d2:	d007      	beq.n	50e4 <TI2_Config+0x9c>
    50d4:	68fb      	ldr	r3, [r7, #12]
    50d6:	4a17      	ldr	r2, [pc, #92]	; (5134 <TI2_Config+0xec>)
    50d8:	4293      	cmp	r3, r2
    50da:	d003      	beq.n	50e4 <TI2_Config+0x9c>
     (TIMx == TIM4) ||(TIMx == TIM5))
    50dc:	68fb      	ldr	r3, [r7, #12]
    50de:	4a16      	ldr	r2, [pc, #88]	; (5138 <TI2_Config+0xf0>)
    50e0:	4293      	cmp	r3, r2
    50e2:	d10b      	bne.n	50fc <TI2_Config+0xb4>
  {
    /* Select the Polarity and set the CC2E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P));
    50e4:	8afb      	ldrh	r3, [r7, #22]
    50e6:	f023 0320 	bic.w	r3, r3, #32
    50ea:	82fb      	strh	r3, [r7, #22]
    tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
    50ec:	8a7a      	ldrh	r2, [r7, #18]
    50ee:	8afb      	ldrh	r3, [r7, #22]
    50f0:	4313      	orrs	r3, r2
    50f2:	b29b      	uxth	r3, r3
    50f4:	f043 0310 	orr.w	r3, r3, #16
    50f8:	82fb      	strh	r3, [r7, #22]
    50fa:	e00a      	b.n	5112 <TI2_Config+0xca>
  }
  else
  {
    /* Select the Polarity and set the CC2E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
    50fc:	8afb      	ldrh	r3, [r7, #22]
    50fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
    5102:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC2E);
    5104:	897a      	ldrh	r2, [r7, #10]
    5106:	8afb      	ldrh	r3, [r7, #22]
    5108:	4313      	orrs	r3, r2
    510a:	b29b      	uxth	r3, r3
    510c:	f043 0310 	orr.w	r3, r3, #16
    5110:	82fb      	strh	r3, [r7, #22]
  }
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
    5112:	68fb      	ldr	r3, [r7, #12]
    5114:	8aba      	ldrh	r2, [r7, #20]
    5116:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
    5118:	68fb      	ldr	r3, [r7, #12]
    511a:	8afa      	ldrh	r2, [r7, #22]
    511c:	841a      	strh	r2, [r3, #32]
}
    511e:	bf00      	nop
    5120:	371c      	adds	r7, #28
    5122:	46bd      	mov	sp, r7
    5124:	bc80      	pop	{r7}
    5126:	4770      	bx	lr
    5128:	40012c00 	.word	0x40012c00
    512c:	40013400 	.word	0x40013400
    5130:	40000400 	.word	0x40000400
    5134:	40000800 	.word	0x40000800
    5138:	40000c00 	.word	0x40000c00

0000513c <TI3_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
    513c:	b480      	push	{r7}
    513e:	b087      	sub	sp, #28
    5140:	af00      	add	r7, sp, #0
    5142:	60f8      	str	r0, [r7, #12]
    5144:	4608      	mov	r0, r1
    5146:	4611      	mov	r1, r2
    5148:	461a      	mov	r2, r3
    514a:	4603      	mov	r3, r0
    514c:	817b      	strh	r3, [r7, #10]
    514e:	460b      	mov	r3, r1
    5150:	813b      	strh	r3, [r7, #8]
    5152:	4613      	mov	r3, r2
    5154:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
    5156:	2300      	movs	r3, #0
    5158:	82bb      	strh	r3, [r7, #20]
    515a:	2300      	movs	r3, #0
    515c:	82fb      	strh	r3, [r7, #22]
    515e:	2300      	movs	r3, #0
    5160:	827b      	strh	r3, [r7, #18]
  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC3E);
    5162:	68fb      	ldr	r3, [r7, #12]
    5164:	8c1b      	ldrh	r3, [r3, #32]
    5166:	b29b      	uxth	r3, r3
    5168:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    516c:	b29a      	uxth	r2, r3
    516e:	68fb      	ldr	r3, [r7, #12]
    5170:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
    5172:	68fb      	ldr	r3, [r7, #12]
    5174:	8b9b      	ldrh	r3, [r3, #28]
    5176:	82bb      	strh	r3, [r7, #20]
  tmpccer = TIMx->CCER;
    5178:	68fb      	ldr	r3, [r7, #12]
    517a:	8c1b      	ldrh	r3, [r3, #32]
    517c:	82fb      	strh	r3, [r7, #22]
  tmp = (uint16_t)(TIM_ICPolarity << 8);
    517e:	897b      	ldrh	r3, [r7, #10]
    5180:	021b      	lsls	r3, r3, #8
    5182:	827b      	strh	r3, [r7, #18]
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR2_CC3S)) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC3F)));
    5184:	8abb      	ldrh	r3, [r7, #20]
    5186:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
    518a:	82bb      	strh	r3, [r7, #20]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
    518c:	88fb      	ldrh	r3, [r7, #6]
    518e:	011b      	lsls	r3, r3, #4
    5190:	b29a      	uxth	r2, r3
    5192:	893b      	ldrh	r3, [r7, #8]
    5194:	4313      	orrs	r3, r2
    5196:	b29a      	uxth	r2, r3
    5198:	8abb      	ldrh	r3, [r7, #20]
    519a:	4313      	orrs	r3, r2
    519c:	82bb      	strh	r3, [r7, #20]
    
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
    519e:	68fb      	ldr	r3, [r7, #12]
    51a0:	4a1c      	ldr	r2, [pc, #112]	; (5214 <TI3_Config+0xd8>)
    51a2:	4293      	cmp	r3, r2
    51a4:	d013      	beq.n	51ce <TI3_Config+0x92>
    51a6:	68fb      	ldr	r3, [r7, #12]
    51a8:	4a1b      	ldr	r2, [pc, #108]	; (5218 <TI3_Config+0xdc>)
    51aa:	4293      	cmp	r3, r2
    51ac:	d00f      	beq.n	51ce <TI3_Config+0x92>
    51ae:	68fb      	ldr	r3, [r7, #12]
    51b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    51b4:	d00b      	beq.n	51ce <TI3_Config+0x92>
    51b6:	68fb      	ldr	r3, [r7, #12]
    51b8:	4a18      	ldr	r2, [pc, #96]	; (521c <TI3_Config+0xe0>)
    51ba:	4293      	cmp	r3, r2
    51bc:	d007      	beq.n	51ce <TI3_Config+0x92>
    51be:	68fb      	ldr	r3, [r7, #12]
    51c0:	4a17      	ldr	r2, [pc, #92]	; (5220 <TI3_Config+0xe4>)
    51c2:	4293      	cmp	r3, r2
    51c4:	d003      	beq.n	51ce <TI3_Config+0x92>
     (TIMx == TIM4) ||(TIMx == TIM5))
    51c6:	68fb      	ldr	r3, [r7, #12]
    51c8:	4a16      	ldr	r2, [pc, #88]	; (5224 <TI3_Config+0xe8>)
    51ca:	4293      	cmp	r3, r2
    51cc:	d10b      	bne.n	51e6 <TI3_Config+0xaa>
  {
    /* Select the Polarity and set the CC3E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P));
    51ce:	8afb      	ldrh	r3, [r7, #22]
    51d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    51d4:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
    51d6:	8a7a      	ldrh	r2, [r7, #18]
    51d8:	8afb      	ldrh	r3, [r7, #22]
    51da:	4313      	orrs	r3, r2
    51dc:	b29b      	uxth	r3, r3
    51de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    51e2:	82fb      	strh	r3, [r7, #22]
    51e4:	e00a      	b.n	51fc <TI3_Config+0xc0>
  }
  else
  {
    /* Select the Polarity and set the CC3E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC3NP));
    51e6:	8afb      	ldrh	r3, [r7, #22]
    51e8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
    51ec:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC3E);
    51ee:	897a      	ldrh	r2, [r7, #10]
    51f0:	8afb      	ldrh	r3, [r7, #22]
    51f2:	4313      	orrs	r3, r2
    51f4:	b29b      	uxth	r3, r3
    51f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    51fa:	82fb      	strh	r3, [r7, #22]
  }
  
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
    51fc:	68fb      	ldr	r3, [r7, #12]
    51fe:	8aba      	ldrh	r2, [r7, #20]
    5200:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer;
    5202:	68fb      	ldr	r3, [r7, #12]
    5204:	8afa      	ldrh	r2, [r7, #22]
    5206:	841a      	strh	r2, [r3, #32]
}
    5208:	bf00      	nop
    520a:	371c      	adds	r7, #28
    520c:	46bd      	mov	sp, r7
    520e:	bc80      	pop	{r7}
    5210:	4770      	bx	lr
    5212:	bf00      	nop
    5214:	40012c00 	.word	0x40012c00
    5218:	40013400 	.word	0x40013400
    521c:	40000400 	.word	0x40000400
    5220:	40000800 	.word	0x40000800
    5224:	40000c00 	.word	0x40000c00

00005228 <TI4_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
    5228:	b480      	push	{r7}
    522a:	b087      	sub	sp, #28
    522c:	af00      	add	r7, sp, #0
    522e:	60f8      	str	r0, [r7, #12]
    5230:	4608      	mov	r0, r1
    5232:	4611      	mov	r1, r2
    5234:	461a      	mov	r2, r3
    5236:	4603      	mov	r3, r0
    5238:	817b      	strh	r3, [r7, #10]
    523a:	460b      	mov	r3, r1
    523c:	813b      	strh	r3, [r7, #8]
    523e:	4613      	mov	r3, r2
    5240:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
    5242:	2300      	movs	r3, #0
    5244:	82bb      	strh	r3, [r7, #20]
    5246:	2300      	movs	r3, #0
    5248:	82fb      	strh	r3, [r7, #22]
    524a:	2300      	movs	r3, #0
    524c:	827b      	strh	r3, [r7, #18]

   /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC4E);
    524e:	68fb      	ldr	r3, [r7, #12]
    5250:	8c1b      	ldrh	r3, [r3, #32]
    5252:	b29b      	uxth	r3, r3
    5254:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    5258:	b29a      	uxth	r2, r3
    525a:	68fb      	ldr	r3, [r7, #12]
    525c:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
    525e:	68fb      	ldr	r3, [r7, #12]
    5260:	8b9b      	ldrh	r3, [r3, #28]
    5262:	82bb      	strh	r3, [r7, #20]
  tmpccer = TIMx->CCER;
    5264:	68fb      	ldr	r3, [r7, #12]
    5266:	8c1b      	ldrh	r3, [r3, #32]
    5268:	82fb      	strh	r3, [r7, #22]
  tmp = (uint16_t)(TIM_ICPolarity << 12);
    526a:	897b      	ldrh	r3, [r7, #10]
    526c:	031b      	lsls	r3, r3, #12
    526e:	827b      	strh	r3, [r7, #18]
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC4F)));
    5270:	8abb      	ldrh	r3, [r7, #20]
    5272:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    5276:	051b      	lsls	r3, r3, #20
    5278:	0d1b      	lsrs	r3, r3, #20
    527a:	82bb      	strh	r3, [r7, #20]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
    527c:	893b      	ldrh	r3, [r7, #8]
    527e:	021b      	lsls	r3, r3, #8
    5280:	b29a      	uxth	r2, r3
    5282:	8abb      	ldrh	r3, [r7, #20]
    5284:	4313      	orrs	r3, r2
    5286:	82bb      	strh	r3, [r7, #20]
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
    5288:	88fb      	ldrh	r3, [r7, #6]
    528a:	031b      	lsls	r3, r3, #12
    528c:	b29a      	uxth	r2, r3
    528e:	8abb      	ldrh	r3, [r7, #20]
    5290:	4313      	orrs	r3, r2
    5292:	82bb      	strh	r3, [r7, #20]
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
    5294:	68fb      	ldr	r3, [r7, #12]
    5296:	4a1d      	ldr	r2, [pc, #116]	; (530c <TI4_Config+0xe4>)
    5298:	4293      	cmp	r3, r2
    529a:	d013      	beq.n	52c4 <TI4_Config+0x9c>
    529c:	68fb      	ldr	r3, [r7, #12]
    529e:	4a1c      	ldr	r2, [pc, #112]	; (5310 <TI4_Config+0xe8>)
    52a0:	4293      	cmp	r3, r2
    52a2:	d00f      	beq.n	52c4 <TI4_Config+0x9c>
    52a4:	68fb      	ldr	r3, [r7, #12]
    52a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    52aa:	d00b      	beq.n	52c4 <TI4_Config+0x9c>
    52ac:	68fb      	ldr	r3, [r7, #12]
    52ae:	4a19      	ldr	r2, [pc, #100]	; (5314 <TI4_Config+0xec>)
    52b0:	4293      	cmp	r3, r2
    52b2:	d007      	beq.n	52c4 <TI4_Config+0x9c>
    52b4:	68fb      	ldr	r3, [r7, #12]
    52b6:	4a18      	ldr	r2, [pc, #96]	; (5318 <TI4_Config+0xf0>)
    52b8:	4293      	cmp	r3, r2
    52ba:	d003      	beq.n	52c4 <TI4_Config+0x9c>
     (TIMx == TIM4) ||(TIMx == TIM5))
    52bc:	68fb      	ldr	r3, [r7, #12]
    52be:	4a17      	ldr	r2, [pc, #92]	; (531c <TI4_Config+0xf4>)
    52c0:	4293      	cmp	r3, r2
    52c2:	d10b      	bne.n	52dc <TI4_Config+0xb4>
  {
    /* Select the Polarity and set the CC4E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC4P));
    52c4:	8afb      	ldrh	r3, [r7, #22]
    52c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    52ca:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
    52cc:	8a7a      	ldrh	r2, [r7, #18]
    52ce:	8afb      	ldrh	r3, [r7, #22]
    52d0:	4313      	orrs	r3, r2
    52d2:	b29b      	uxth	r3, r3
    52d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    52d8:	82fb      	strh	r3, [r7, #22]
    52da:	e00c      	b.n	52f6 <TI4_Config+0xce>
  }
  else
  {
    /* Select the Polarity and set the CC4E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC4NP));
    52dc:	8afb      	ldrh	r3, [r7, #22]
    52de:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    52e2:	045b      	lsls	r3, r3, #17
    52e4:	0c5b      	lsrs	r3, r3, #17
    52e6:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC4E);
    52e8:	897a      	ldrh	r2, [r7, #10]
    52ea:	8afb      	ldrh	r3, [r7, #22]
    52ec:	4313      	orrs	r3, r2
    52ee:	b29b      	uxth	r3, r3
    52f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    52f4:	82fb      	strh	r3, [r7, #22]
  }
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
    52f6:	68fb      	ldr	r3, [r7, #12]
    52f8:	8aba      	ldrh	r2, [r7, #20]
    52fa:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer;
    52fc:	68fb      	ldr	r3, [r7, #12]
    52fe:	8afa      	ldrh	r2, [r7, #22]
    5300:	841a      	strh	r2, [r3, #32]
}
    5302:	bf00      	nop
    5304:	371c      	adds	r7, #28
    5306:	46bd      	mov	sp, r7
    5308:	bc80      	pop	{r7}
    530a:	4770      	bx	lr
    530c:	40012c00 	.word	0x40012c00
    5310:	40013400 	.word	0x40013400
    5314:	40000400 	.word	0x40000400
    5318:	40000800 	.word	0x40000800
    531c:	40000c00 	.word	0x40000c00

00005320 <RTC_ITConfig>:
  * @param  NewState: new state of the specified RTC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_ITConfig(uint16_t RTC_IT, FunctionalState NewState)
{
    5320:	b480      	push	{r7}
    5322:	b083      	sub	sp, #12
    5324:	af00      	add	r7, sp, #0
    5326:	4603      	mov	r3, r0
    5328:	460a      	mov	r2, r1
    532a:	80fb      	strh	r3, [r7, #6]
    532c:	4613      	mov	r3, r2
    532e:	717b      	strb	r3, [r7, #5]
  /* Check the parameters */
  assert_param(IS_RTC_IT(RTC_IT));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    5330:	797b      	ldrb	r3, [r7, #5]
    5332:	2b00      	cmp	r3, #0
    5334:	d008      	beq.n	5348 <RTC_ITConfig+0x28>
  {
    RTC->CRH |= RTC_IT;
    5336:	4b0c      	ldr	r3, [pc, #48]	; (5368 <RTC_ITConfig+0x48>)
    5338:	881b      	ldrh	r3, [r3, #0]
    533a:	b29a      	uxth	r2, r3
    533c:	490a      	ldr	r1, [pc, #40]	; (5368 <RTC_ITConfig+0x48>)
    533e:	88fb      	ldrh	r3, [r7, #6]
    5340:	4313      	orrs	r3, r2
    5342:	b29b      	uxth	r3, r3
    5344:	800b      	strh	r3, [r1, #0]
  }
  else
  {
    RTC->CRH &= (uint16_t)~RTC_IT;
  }
}
    5346:	e009      	b.n	535c <RTC_ITConfig+0x3c>
    RTC->CRH &= (uint16_t)~RTC_IT;
    5348:	4b07      	ldr	r3, [pc, #28]	; (5368 <RTC_ITConfig+0x48>)
    534a:	881b      	ldrh	r3, [r3, #0]
    534c:	b29a      	uxth	r2, r3
    534e:	88fb      	ldrh	r3, [r7, #6]
    5350:	43db      	mvns	r3, r3
    5352:	b29b      	uxth	r3, r3
    5354:	4904      	ldr	r1, [pc, #16]	; (5368 <RTC_ITConfig+0x48>)
    5356:	4013      	ands	r3, r2
    5358:	b29b      	uxth	r3, r3
    535a:	800b      	strh	r3, [r1, #0]
}
    535c:	bf00      	nop
    535e:	370c      	adds	r7, #12
    5360:	46bd      	mov	sp, r7
    5362:	bc80      	pop	{r7}
    5364:	4770      	bx	lr
    5366:	bf00      	nop
    5368:	40002800 	.word	0x40002800

0000536c <RTC_EnterConfigMode>:
  * @brief  Enters the RTC configuration mode.
  * @param  None
  * @retval None
  */
void RTC_EnterConfigMode(void)
{
    536c:	b480      	push	{r7}
    536e:	af00      	add	r7, sp, #0
  /* Set the CNF flag to enter in the Configuration Mode */
  RTC->CRL |= RTC_CRL_CNF;
    5370:	4b05      	ldr	r3, [pc, #20]	; (5388 <RTC_EnterConfigMode+0x1c>)
    5372:	889b      	ldrh	r3, [r3, #4]
    5374:	b29b      	uxth	r3, r3
    5376:	4a04      	ldr	r2, [pc, #16]	; (5388 <RTC_EnterConfigMode+0x1c>)
    5378:	f043 0310 	orr.w	r3, r3, #16
    537c:	b29b      	uxth	r3, r3
    537e:	8093      	strh	r3, [r2, #4]
}
    5380:	bf00      	nop
    5382:	46bd      	mov	sp, r7
    5384:	bc80      	pop	{r7}
    5386:	4770      	bx	lr
    5388:	40002800 	.word	0x40002800

0000538c <RTC_ExitConfigMode>:
  * @brief  Exits from the RTC configuration mode.
  * @param  None
  * @retval None
  */
void RTC_ExitConfigMode(void)
{
    538c:	b480      	push	{r7}
    538e:	af00      	add	r7, sp, #0
  /* Reset the CNF flag to exit from the Configuration Mode */
  RTC->CRL &= (uint16_t)~((uint16_t)RTC_CRL_CNF); 
    5390:	4b05      	ldr	r3, [pc, #20]	; (53a8 <RTC_ExitConfigMode+0x1c>)
    5392:	889b      	ldrh	r3, [r3, #4]
    5394:	b29b      	uxth	r3, r3
    5396:	4a04      	ldr	r2, [pc, #16]	; (53a8 <RTC_ExitConfigMode+0x1c>)
    5398:	f023 0310 	bic.w	r3, r3, #16
    539c:	b29b      	uxth	r3, r3
    539e:	8093      	strh	r3, [r2, #4]
}
    53a0:	bf00      	nop
    53a2:	46bd      	mov	sp, r7
    53a4:	bc80      	pop	{r7}
    53a6:	4770      	bx	lr
    53a8:	40002800 	.word	0x40002800

000053ac <RTC_GetCounter>:
  * @brief  Gets the RTC counter value.
  * @param  None
  * @retval RTC counter value.
  */
uint32_t RTC_GetCounter(void)
{
    53ac:	b480      	push	{r7}
    53ae:	b083      	sub	sp, #12
    53b0:	af00      	add	r7, sp, #0
  uint16_t tmp = 0;
    53b2:	2300      	movs	r3, #0
    53b4:	80fb      	strh	r3, [r7, #6]
  tmp = RTC->CNTL;
    53b6:	4b07      	ldr	r3, [pc, #28]	; (53d4 <RTC_GetCounter+0x28>)
    53b8:	8b9b      	ldrh	r3, [r3, #28]
    53ba:	80fb      	strh	r3, [r7, #6]
  return (((uint32_t)RTC->CNTH << 16 ) | tmp) ;
    53bc:	4b05      	ldr	r3, [pc, #20]	; (53d4 <RTC_GetCounter+0x28>)
    53be:	8b1b      	ldrh	r3, [r3, #24]
    53c0:	b29b      	uxth	r3, r3
    53c2:	041a      	lsls	r2, r3, #16
    53c4:	88fb      	ldrh	r3, [r7, #6]
    53c6:	4313      	orrs	r3, r2
}
    53c8:	4618      	mov	r0, r3
    53ca:	370c      	adds	r7, #12
    53cc:	46bd      	mov	sp, r7
    53ce:	bc80      	pop	{r7}
    53d0:	4770      	bx	lr
    53d2:	bf00      	nop
    53d4:	40002800 	.word	0x40002800

000053d8 <RTC_SetCounter>:
  * @brief  Sets the RTC counter value.
  * @param  CounterValue: RTC counter new value.
  * @retval None
  */
void RTC_SetCounter(uint32_t CounterValue)
{ 
    53d8:	b580      	push	{r7, lr}
    53da:	b082      	sub	sp, #8
    53dc:	af00      	add	r7, sp, #0
    53de:	6078      	str	r0, [r7, #4]
  RTC_EnterConfigMode();
    53e0:	f7ff ffc4 	bl	536c <RTC_EnterConfigMode>
  /* Set RTC COUNTER MSB word */
  RTC->CNTH = CounterValue >> 16;
    53e4:	687b      	ldr	r3, [r7, #4]
    53e6:	0c1a      	lsrs	r2, r3, #16
    53e8:	4b06      	ldr	r3, [pc, #24]	; (5404 <RTC_SetCounter+0x2c>)
    53ea:	b292      	uxth	r2, r2
    53ec:	831a      	strh	r2, [r3, #24]
  /* Set RTC COUNTER LSB word */
  RTC->CNTL = (CounterValue & RTC_LSB_MASK);
    53ee:	4b05      	ldr	r3, [pc, #20]	; (5404 <RTC_SetCounter+0x2c>)
    53f0:	687a      	ldr	r2, [r7, #4]
    53f2:	b292      	uxth	r2, r2
    53f4:	839a      	strh	r2, [r3, #28]
  RTC_ExitConfigMode();
    53f6:	f7ff ffc9 	bl	538c <RTC_ExitConfigMode>
}
    53fa:	bf00      	nop
    53fc:	3708      	adds	r7, #8
    53fe:	46bd      	mov	sp, r7
    5400:	bd80      	pop	{r7, pc}
    5402:	bf00      	nop
    5404:	40002800 	.word	0x40002800

00005408 <RTC_SetPrescaler>:
  * @brief  Sets the RTC prescaler value.
  * @param  PrescalerValue: RTC prescaler new value.
  * @retval None
  */
void RTC_SetPrescaler(uint32_t PrescalerValue)
{
    5408:	b580      	push	{r7, lr}
    540a:	b082      	sub	sp, #8
    540c:	af00      	add	r7, sp, #0
    540e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_PRESCALER(PrescalerValue));
  
  RTC_EnterConfigMode();
    5410:	f7ff ffac 	bl	536c <RTC_EnterConfigMode>
  /* Set RTC PRESCALER MSB word */
  RTC->PRLH = (PrescalerValue & PRLH_MSB_MASK) >> 16;
    5414:	687b      	ldr	r3, [r7, #4]
    5416:	0c1b      	lsrs	r3, r3, #16
    5418:	b29b      	uxth	r3, r3
    541a:	4a07      	ldr	r2, [pc, #28]	; (5438 <RTC_SetPrescaler+0x30>)
    541c:	f003 030f 	and.w	r3, r3, #15
    5420:	b29b      	uxth	r3, r3
    5422:	8113      	strh	r3, [r2, #8]
  /* Set RTC PRESCALER LSB word */
  RTC->PRLL = (PrescalerValue & RTC_LSB_MASK);
    5424:	4b04      	ldr	r3, [pc, #16]	; (5438 <RTC_SetPrescaler+0x30>)
    5426:	687a      	ldr	r2, [r7, #4]
    5428:	b292      	uxth	r2, r2
    542a:	819a      	strh	r2, [r3, #12]
  RTC_ExitConfigMode();
    542c:	f7ff ffae 	bl	538c <RTC_ExitConfigMode>
}
    5430:	bf00      	nop
    5432:	3708      	adds	r7, #8
    5434:	46bd      	mov	sp, r7
    5436:	bd80      	pop	{r7, pc}
    5438:	40002800 	.word	0x40002800

0000543c <RTC_SetAlarm>:
  * @brief  Sets the RTC alarm value.
  * @param  AlarmValue: RTC alarm new value.
  * @retval None
  */
void RTC_SetAlarm(uint32_t AlarmValue)
{  
    543c:	b580      	push	{r7, lr}
    543e:	b082      	sub	sp, #8
    5440:	af00      	add	r7, sp, #0
    5442:	6078      	str	r0, [r7, #4]
  RTC_EnterConfigMode();
    5444:	f7ff ff92 	bl	536c <RTC_EnterConfigMode>
  /* Set the ALARM MSB word */
  RTC->ALRH = AlarmValue >> 16;
    5448:	687b      	ldr	r3, [r7, #4]
    544a:	0c1a      	lsrs	r2, r3, #16
    544c:	4b06      	ldr	r3, [pc, #24]	; (5468 <RTC_SetAlarm+0x2c>)
    544e:	b292      	uxth	r2, r2
    5450:	841a      	strh	r2, [r3, #32]
  /* Set the ALARM LSB word */
  RTC->ALRL = (AlarmValue & RTC_LSB_MASK);
    5452:	4b05      	ldr	r3, [pc, #20]	; (5468 <RTC_SetAlarm+0x2c>)
    5454:	687a      	ldr	r2, [r7, #4]
    5456:	b292      	uxth	r2, r2
    5458:	849a      	strh	r2, [r3, #36]	; 0x24
  RTC_ExitConfigMode();
    545a:	f7ff ff97 	bl	538c <RTC_ExitConfigMode>
}
    545e:	bf00      	nop
    5460:	3708      	adds	r7, #8
    5462:	46bd      	mov	sp, r7
    5464:	bd80      	pop	{r7, pc}
    5466:	bf00      	nop
    5468:	40002800 	.word	0x40002800

0000546c <RTC_GetDivider>:
  * @brief  Gets the RTC divider value.
  * @param  None
  * @retval RTC Divider value.
  */
uint32_t RTC_GetDivider(void)
{
    546c:	b480      	push	{r7}
    546e:	b083      	sub	sp, #12
    5470:	af00      	add	r7, sp, #0
  uint32_t tmp = 0x00;
    5472:	2300      	movs	r3, #0
    5474:	607b      	str	r3, [r7, #4]
  tmp = ((uint32_t)RTC->DIVH & (uint32_t)0x000F) << 16;
    5476:	4b0a      	ldr	r3, [pc, #40]	; (54a0 <RTC_GetDivider+0x34>)
    5478:	8a1b      	ldrh	r3, [r3, #16]
    547a:	b29b      	uxth	r3, r3
    547c:	041b      	lsls	r3, r3, #16
    547e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    5482:	607b      	str	r3, [r7, #4]
  tmp |= RTC->DIVL;
    5484:	4b06      	ldr	r3, [pc, #24]	; (54a0 <RTC_GetDivider+0x34>)
    5486:	8a9b      	ldrh	r3, [r3, #20]
    5488:	b29b      	uxth	r3, r3
    548a:	461a      	mov	r2, r3
    548c:	687b      	ldr	r3, [r7, #4]
    548e:	4313      	orrs	r3, r2
    5490:	607b      	str	r3, [r7, #4]
  return tmp;
    5492:	687b      	ldr	r3, [r7, #4]
}
    5494:	4618      	mov	r0, r3
    5496:	370c      	adds	r7, #12
    5498:	46bd      	mov	sp, r7
    549a:	bc80      	pop	{r7}
    549c:	4770      	bx	lr
    549e:	bf00      	nop
    54a0:	40002800 	.word	0x40002800

000054a4 <RTC_WaitForLastTask>:
  * @note   This function must be called before any write to RTC registers.
  * @param  None
  * @retval None
  */
void RTC_WaitForLastTask(void)
{
    54a4:	b480      	push	{r7}
    54a6:	af00      	add	r7, sp, #0
  /* Loop until RTOFF flag is set */
  while ((RTC->CRL & RTC_FLAG_RTOFF) == (uint16_t)RESET)
    54a8:	bf00      	nop
    54aa:	4b06      	ldr	r3, [pc, #24]	; (54c4 <RTC_WaitForLastTask+0x20>)
    54ac:	889b      	ldrh	r3, [r3, #4]
    54ae:	b29b      	uxth	r3, r3
    54b0:	f003 0320 	and.w	r3, r3, #32
    54b4:	2b00      	cmp	r3, #0
    54b6:	d0f8      	beq.n	54aa <RTC_WaitForLastTask+0x6>
  {
  }
}
    54b8:	bf00      	nop
    54ba:	bf00      	nop
    54bc:	46bd      	mov	sp, r7
    54be:	bc80      	pop	{r7}
    54c0:	4770      	bx	lr
    54c2:	bf00      	nop
    54c4:	40002800 	.word	0x40002800

000054c8 <RTC_WaitForSynchro>:
  *   or an APB clock stop.
  * @param  None
  * @retval None
  */
void RTC_WaitForSynchro(void)
{
    54c8:	b480      	push	{r7}
    54ca:	af00      	add	r7, sp, #0
  /* Clear RSF flag */
  RTC->CRL &= (uint16_t)~RTC_FLAG_RSF;
    54cc:	4b0a      	ldr	r3, [pc, #40]	; (54f8 <RTC_WaitForSynchro+0x30>)
    54ce:	889b      	ldrh	r3, [r3, #4]
    54d0:	b29b      	uxth	r3, r3
    54d2:	4a09      	ldr	r2, [pc, #36]	; (54f8 <RTC_WaitForSynchro+0x30>)
    54d4:	f023 0308 	bic.w	r3, r3, #8
    54d8:	b29b      	uxth	r3, r3
    54da:	8093      	strh	r3, [r2, #4]
  /* Loop until RSF flag is set */
  while ((RTC->CRL & RTC_FLAG_RSF) == (uint16_t)RESET)
    54dc:	bf00      	nop
    54de:	4b06      	ldr	r3, [pc, #24]	; (54f8 <RTC_WaitForSynchro+0x30>)
    54e0:	889b      	ldrh	r3, [r3, #4]
    54e2:	b29b      	uxth	r3, r3
    54e4:	f003 0308 	and.w	r3, r3, #8
    54e8:	2b00      	cmp	r3, #0
    54ea:	d0f8      	beq.n	54de <RTC_WaitForSynchro+0x16>
  {
  }
}
    54ec:	bf00      	nop
    54ee:	bf00      	nop
    54f0:	46bd      	mov	sp, r7
    54f2:	bc80      	pop	{r7}
    54f4:	4770      	bx	lr
    54f6:	bf00      	nop
    54f8:	40002800 	.word	0x40002800

000054fc <RTC_GetFlagStatus>:
  *     @arg RTC_FLAG_ALR: Alarm flag
  *     @arg RTC_FLAG_SEC: Second flag
  * @retval The new state of RTC_FLAG (SET or RESET).
  */
FlagStatus RTC_GetFlagStatus(uint16_t RTC_FLAG)
{
    54fc:	b480      	push	{r7}
    54fe:	b085      	sub	sp, #20
    5500:	af00      	add	r7, sp, #0
    5502:	4603      	mov	r3, r0
    5504:	80fb      	strh	r3, [r7, #6]
  FlagStatus bitstatus = RESET;
    5506:	2300      	movs	r3, #0
    5508:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_RTC_GET_FLAG(RTC_FLAG)); 
  
  if ((RTC->CRL & RTC_FLAG) != (uint16_t)RESET)
    550a:	4b09      	ldr	r3, [pc, #36]	; (5530 <RTC_GetFlagStatus+0x34>)
    550c:	889b      	ldrh	r3, [r3, #4]
    550e:	b29a      	uxth	r2, r3
    5510:	88fb      	ldrh	r3, [r7, #6]
    5512:	4013      	ands	r3, r2
    5514:	b29b      	uxth	r3, r3
    5516:	2b00      	cmp	r3, #0
    5518:	d002      	beq.n	5520 <RTC_GetFlagStatus+0x24>
  {
    bitstatus = SET;
    551a:	2301      	movs	r3, #1
    551c:	73fb      	strb	r3, [r7, #15]
    551e:	e001      	b.n	5524 <RTC_GetFlagStatus+0x28>
  }
  else
  {
    bitstatus = RESET;
    5520:	2300      	movs	r3, #0
    5522:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    5524:	7bfb      	ldrb	r3, [r7, #15]
}
    5526:	4618      	mov	r0, r3
    5528:	3714      	adds	r7, #20
    552a:	46bd      	mov	sp, r7
    552c:	bc80      	pop	{r7}
    552e:	4770      	bx	lr
    5530:	40002800 	.word	0x40002800

00005534 <RTC_ClearFlag>:
  *     @arg RTC_FLAG_ALR: Alarm flag
  *     @arg RTC_FLAG_SEC: Second flag
  * @retval None
  */
void RTC_ClearFlag(uint16_t RTC_FLAG)
{
    5534:	b480      	push	{r7}
    5536:	b083      	sub	sp, #12
    5538:	af00      	add	r7, sp, #0
    553a:	4603      	mov	r3, r0
    553c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RTC_CLEAR_FLAG(RTC_FLAG)); 
    
  /* Clear the corresponding RTC flag */
  RTC->CRL &= (uint16_t)~RTC_FLAG;
    553e:	4b07      	ldr	r3, [pc, #28]	; (555c <RTC_ClearFlag+0x28>)
    5540:	889b      	ldrh	r3, [r3, #4]
    5542:	b29a      	uxth	r2, r3
    5544:	88fb      	ldrh	r3, [r7, #6]
    5546:	43db      	mvns	r3, r3
    5548:	b29b      	uxth	r3, r3
    554a:	4904      	ldr	r1, [pc, #16]	; (555c <RTC_ClearFlag+0x28>)
    554c:	4013      	ands	r3, r2
    554e:	b29b      	uxth	r3, r3
    5550:	808b      	strh	r3, [r1, #4]
}
    5552:	bf00      	nop
    5554:	370c      	adds	r7, #12
    5556:	46bd      	mov	sp, r7
    5558:	bc80      	pop	{r7}
    555a:	4770      	bx	lr
    555c:	40002800 	.word	0x40002800

00005560 <RTC_GetITStatus>:
  *     @arg RTC_IT_ALR: Alarm interrupt
  *     @arg RTC_IT_SEC: Second interrupt
  * @retval The new state of the RTC_IT (SET or RESET).
  */
ITStatus RTC_GetITStatus(uint16_t RTC_IT)
{
    5560:	b480      	push	{r7}
    5562:	b085      	sub	sp, #20
    5564:	af00      	add	r7, sp, #0
    5566:	4603      	mov	r3, r0
    5568:	80fb      	strh	r3, [r7, #6]
  ITStatus bitstatus = RESET;
    556a:	2300      	movs	r3, #0
    556c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RTC_GET_IT(RTC_IT)); 
  
  bitstatus = (ITStatus)(RTC->CRL & RTC_IT);
    556e:	4b0f      	ldr	r3, [pc, #60]	; (55ac <RTC_GetITStatus+0x4c>)
    5570:	889b      	ldrh	r3, [r3, #4]
    5572:	b29b      	uxth	r3, r3
    5574:	b2da      	uxtb	r2, r3
    5576:	88fb      	ldrh	r3, [r7, #6]
    5578:	b2db      	uxtb	r3, r3
    557a:	4013      	ands	r3, r2
    557c:	73fb      	strb	r3, [r7, #15]
  if (((RTC->CRH & RTC_IT) != (uint16_t)RESET) && (bitstatus != (uint16_t)RESET))
    557e:	4b0b      	ldr	r3, [pc, #44]	; (55ac <RTC_GetITStatus+0x4c>)
    5580:	881b      	ldrh	r3, [r3, #0]
    5582:	b29a      	uxth	r2, r3
    5584:	88fb      	ldrh	r3, [r7, #6]
    5586:	4013      	ands	r3, r2
    5588:	b29b      	uxth	r3, r3
    558a:	2b00      	cmp	r3, #0
    558c:	d005      	beq.n	559a <RTC_GetITStatus+0x3a>
    558e:	7bfb      	ldrb	r3, [r7, #15]
    5590:	2b00      	cmp	r3, #0
    5592:	d002      	beq.n	559a <RTC_GetITStatus+0x3a>
  {
    bitstatus = SET;
    5594:	2301      	movs	r3, #1
    5596:	73fb      	strb	r3, [r7, #15]
    5598:	e001      	b.n	559e <RTC_GetITStatus+0x3e>
  }
  else
  {
    bitstatus = RESET;
    559a:	2300      	movs	r3, #0
    559c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    559e:	7bfb      	ldrb	r3, [r7, #15]
}
    55a0:	4618      	mov	r0, r3
    55a2:	3714      	adds	r7, #20
    55a4:	46bd      	mov	sp, r7
    55a6:	bc80      	pop	{r7}
    55a8:	4770      	bx	lr
    55aa:	bf00      	nop
    55ac:	40002800 	.word	0x40002800

000055b0 <RTC_ClearITPendingBit>:
  *     @arg RTC_IT_ALR: Alarm interrupt
  *     @arg RTC_IT_SEC: Second interrupt
  * @retval None
  */
void RTC_ClearITPendingBit(uint16_t RTC_IT)
{
    55b0:	b480      	push	{r7}
    55b2:	b083      	sub	sp, #12
    55b4:	af00      	add	r7, sp, #0
    55b6:	4603      	mov	r3, r0
    55b8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RTC_IT(RTC_IT));  
  
  /* Clear the corresponding RTC pending bit */
  RTC->CRL &= (uint16_t)~RTC_IT;
    55ba:	4b07      	ldr	r3, [pc, #28]	; (55d8 <RTC_ClearITPendingBit+0x28>)
    55bc:	889b      	ldrh	r3, [r3, #4]
    55be:	b29a      	uxth	r2, r3
    55c0:	88fb      	ldrh	r3, [r7, #6]
    55c2:	43db      	mvns	r3, r3
    55c4:	b29b      	uxth	r3, r3
    55c6:	4904      	ldr	r1, [pc, #16]	; (55d8 <RTC_ClearITPendingBit+0x28>)
    55c8:	4013      	ands	r3, r2
    55ca:	b29b      	uxth	r3, r3
    55cc:	808b      	strh	r3, [r1, #4]
}
    55ce:	bf00      	nop
    55d0:	370c      	adds	r7, #12
    55d2:	46bd      	mov	sp, r7
    55d4:	bc80      	pop	{r7}
    55d6:	4770      	bx	lr
    55d8:	40002800 	.word	0x40002800

000055dc <DAC_DeInit>:
  * @brief  Deinitializes the DAC peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void DAC_DeInit(void)
{
    55dc:	b580      	push	{r7, lr}
    55de:	af00      	add	r7, sp, #0
  /* Enable DAC reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, ENABLE);
    55e0:	2101      	movs	r1, #1
    55e2:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
    55e6:	f7fc f9ab 	bl	1940 <RCC_APB1PeriphResetCmd>
  /* Release DAC from reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, DISABLE);
    55ea:	2100      	movs	r1, #0
    55ec:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
    55f0:	f7fc f9a6 	bl	1940 <RCC_APB1PeriphResetCmd>
}
    55f4:	bf00      	nop
    55f6:	bd80      	pop	{r7, pc}

000055f8 <DAC_Init>:
  * @param  DAC_InitStruct: pointer to a DAC_InitTypeDef structure that
  *        contains the configuration information for the specified DAC channel.
  * @retval None
  */
void DAC_Init(uint32_t DAC_Channel, DAC_InitTypeDef* DAC_InitStruct)
{
    55f8:	b480      	push	{r7}
    55fa:	b085      	sub	sp, #20
    55fc:	af00      	add	r7, sp, #0
    55fe:	6078      	str	r0, [r7, #4]
    5600:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
    5602:	2300      	movs	r3, #0
    5604:	60fb      	str	r3, [r7, #12]
    5606:	2300      	movs	r3, #0
    5608:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DAC_GENERATE_WAVE(DAC_InitStruct->DAC_WaveGeneration));
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(DAC_InitStruct->DAC_OutputBuffer));
/*---------------------------- DAC CR Configuration --------------------------*/
  /* Get the DAC CR value */
  tmpreg1 = DAC->CR;
    560a:	4b13      	ldr	r3, [pc, #76]	; (5658 <DAC_Init+0x60>)
    560c:	681b      	ldr	r3, [r3, #0]
    560e:	60fb      	str	r3, [r7, #12]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(CR_CLEAR_MASK << DAC_Channel);
    5610:	f640 72fe 	movw	r2, #4094	; 0xffe
    5614:	687b      	ldr	r3, [r7, #4]
    5616:	fa02 f303 	lsl.w	r3, r2, r3
    561a:	43db      	mvns	r3, r3
    561c:	68fa      	ldr	r2, [r7, #12]
    561e:	4013      	ands	r3, r2
    5620:	60fb      	str	r3, [r7, #12]
     mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
    5622:	683b      	ldr	r3, [r7, #0]
    5624:	681a      	ldr	r2, [r3, #0]
    5626:	683b      	ldr	r3, [r7, #0]
    5628:	685b      	ldr	r3, [r3, #4]
    562a:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | DAC_InitStruct->DAC_OutputBuffer);
    562c:	683b      	ldr	r3, [r7, #0]
    562e:	689b      	ldr	r3, [r3, #8]
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
    5630:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | DAC_InitStruct->DAC_OutputBuffer);
    5632:	683b      	ldr	r3, [r7, #0]
    5634:	68db      	ldr	r3, [r3, #12]
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
    5636:	4313      	orrs	r3, r2
    5638:	60bb      	str	r3, [r7, #8]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << DAC_Channel;
    563a:	68ba      	ldr	r2, [r7, #8]
    563c:	687b      	ldr	r3, [r7, #4]
    563e:	fa02 f303 	lsl.w	r3, r2, r3
    5642:	68fa      	ldr	r2, [r7, #12]
    5644:	4313      	orrs	r3, r2
    5646:	60fb      	str	r3, [r7, #12]
  /* Write to DAC CR */
  DAC->CR = tmpreg1;
    5648:	4a03      	ldr	r2, [pc, #12]	; (5658 <DAC_Init+0x60>)
    564a:	68fb      	ldr	r3, [r7, #12]
    564c:	6013      	str	r3, [r2, #0]
}
    564e:	bf00      	nop
    5650:	3714      	adds	r7, #20
    5652:	46bd      	mov	sp, r7
    5654:	bc80      	pop	{r7}
    5656:	4770      	bx	lr
    5658:	40007400 	.word	0x40007400

0000565c <DAC_StructInit>:
  * @param  DAC_InitStruct : pointer to a DAC_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void DAC_StructInit(DAC_InitTypeDef* DAC_InitStruct)
{
    565c:	b480      	push	{r7}
    565e:	b083      	sub	sp, #12
    5660:	af00      	add	r7, sp, #0
    5662:	6078      	str	r0, [r7, #4]
/*--------------- Reset DAC init structure parameters values -----------------*/
  /* Initialize the DAC_Trigger member */
  DAC_InitStruct->DAC_Trigger = DAC_Trigger_None;
    5664:	687b      	ldr	r3, [r7, #4]
    5666:	2200      	movs	r2, #0
    5668:	601a      	str	r2, [r3, #0]
  /* Initialize the DAC_WaveGeneration member */
  DAC_InitStruct->DAC_WaveGeneration = DAC_WaveGeneration_None;
    566a:	687b      	ldr	r3, [r7, #4]
    566c:	2200      	movs	r2, #0
    566e:	605a      	str	r2, [r3, #4]
  /* Initialize the DAC_LFSRUnmask_TriangleAmplitude member */
  DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude = DAC_LFSRUnmask_Bit0;
    5670:	687b      	ldr	r3, [r7, #4]
    5672:	2200      	movs	r2, #0
    5674:	609a      	str	r2, [r3, #8]
  /* Initialize the DAC_OutputBuffer member */
  DAC_InitStruct->DAC_OutputBuffer = DAC_OutputBuffer_Enable;
    5676:	687b      	ldr	r3, [r7, #4]
    5678:	2200      	movs	r2, #0
    567a:	60da      	str	r2, [r3, #12]
}
    567c:	bf00      	nop
    567e:	370c      	adds	r7, #12
    5680:	46bd      	mov	sp, r7
    5682:	bc80      	pop	{r7}
    5684:	4770      	bx	lr

00005686 <DAC_Cmd>:
  * @param  NewState: new state of the DAC channel. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DAC_Cmd(uint32_t DAC_Channel, FunctionalState NewState)
{
    5686:	b480      	push	{r7}
    5688:	b083      	sub	sp, #12
    568a:	af00      	add	r7, sp, #0
    568c:	6078      	str	r0, [r7, #4]
    568e:	460b      	mov	r3, r1
    5690:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    5692:	78fb      	ldrb	r3, [r7, #3]
    5694:	2b00      	cmp	r3, #0
    5696:	d009      	beq.n	56ac <DAC_Cmd+0x26>
  {
    /* Enable the selected DAC channel */
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
    5698:	4b0c      	ldr	r3, [pc, #48]	; (56cc <DAC_Cmd+0x46>)
    569a:	681a      	ldr	r2, [r3, #0]
    569c:	2101      	movs	r1, #1
    569e:	687b      	ldr	r3, [r7, #4]
    56a0:	fa01 f303 	lsl.w	r3, r1, r3
    56a4:	4909      	ldr	r1, [pc, #36]	; (56cc <DAC_Cmd+0x46>)
    56a6:	4313      	orrs	r3, r2
    56a8:	600b      	str	r3, [r1, #0]
  else
  {
    /* Disable the selected DAC channel */
    DAC->CR &= ~(DAC_CR_EN1 << DAC_Channel);
  }
}
    56aa:	e009      	b.n	56c0 <DAC_Cmd+0x3a>
    DAC->CR &= ~(DAC_CR_EN1 << DAC_Channel);
    56ac:	4b07      	ldr	r3, [pc, #28]	; (56cc <DAC_Cmd+0x46>)
    56ae:	681a      	ldr	r2, [r3, #0]
    56b0:	2101      	movs	r1, #1
    56b2:	687b      	ldr	r3, [r7, #4]
    56b4:	fa01 f303 	lsl.w	r3, r1, r3
    56b8:	43db      	mvns	r3, r3
    56ba:	4904      	ldr	r1, [pc, #16]	; (56cc <DAC_Cmd+0x46>)
    56bc:	4013      	ands	r3, r2
    56be:	600b      	str	r3, [r1, #0]
}
    56c0:	bf00      	nop
    56c2:	370c      	adds	r7, #12
    56c4:	46bd      	mov	sp, r7
    56c6:	bc80      	pop	{r7}
    56c8:	4770      	bx	lr
    56ca:	bf00      	nop
    56cc:	40007400 	.word	0x40007400

000056d0 <DAC_DMACmd>:
  * @param  NewState: new state of the selected DAC channel DMA request.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DAC_DMACmd(uint32_t DAC_Channel, FunctionalState NewState)
{
    56d0:	b480      	push	{r7}
    56d2:	b083      	sub	sp, #12
    56d4:	af00      	add	r7, sp, #0
    56d6:	6078      	str	r0, [r7, #4]
    56d8:	460b      	mov	r3, r1
    56da:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    56dc:	78fb      	ldrb	r3, [r7, #3]
    56de:	2b00      	cmp	r3, #0
    56e0:	d00a      	beq.n	56f8 <DAC_DMACmd+0x28>
  {
    /* Enable the selected DAC channel DMA request */
    DAC->CR |= (DAC_CR_DMAEN1 << DAC_Channel);
    56e2:	4b0d      	ldr	r3, [pc, #52]	; (5718 <DAC_DMACmd+0x48>)
    56e4:	681a      	ldr	r2, [r3, #0]
    56e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    56ea:	687b      	ldr	r3, [r7, #4]
    56ec:	fa01 f303 	lsl.w	r3, r1, r3
    56f0:	4909      	ldr	r1, [pc, #36]	; (5718 <DAC_DMACmd+0x48>)
    56f2:	4313      	orrs	r3, r2
    56f4:	600b      	str	r3, [r1, #0]
  else
  {
    /* Disable the selected DAC channel DMA request */
    DAC->CR &= ~(DAC_CR_DMAEN1 << DAC_Channel);
  }
}
    56f6:	e00a      	b.n	570e <DAC_DMACmd+0x3e>
    DAC->CR &= ~(DAC_CR_DMAEN1 << DAC_Channel);
    56f8:	4b07      	ldr	r3, [pc, #28]	; (5718 <DAC_DMACmd+0x48>)
    56fa:	681a      	ldr	r2, [r3, #0]
    56fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    5700:	687b      	ldr	r3, [r7, #4]
    5702:	fa01 f303 	lsl.w	r3, r1, r3
    5706:	43db      	mvns	r3, r3
    5708:	4903      	ldr	r1, [pc, #12]	; (5718 <DAC_DMACmd+0x48>)
    570a:	4013      	ands	r3, r2
    570c:	600b      	str	r3, [r1, #0]
}
    570e:	bf00      	nop
    5710:	370c      	adds	r7, #12
    5712:	46bd      	mov	sp, r7
    5714:	bc80      	pop	{r7}
    5716:	4770      	bx	lr
    5718:	40007400 	.word	0x40007400

0000571c <DAC_SoftwareTriggerCmd>:
  * @param  NewState: new state of the selected DAC channel software trigger.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DAC_SoftwareTriggerCmd(uint32_t DAC_Channel, FunctionalState NewState)
{
    571c:	b480      	push	{r7}
    571e:	b083      	sub	sp, #12
    5720:	af00      	add	r7, sp, #0
    5722:	6078      	str	r0, [r7, #4]
    5724:	460b      	mov	r3, r1
    5726:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    5728:	78fb      	ldrb	r3, [r7, #3]
    572a:	2b00      	cmp	r3, #0
    572c:	d00a      	beq.n	5744 <DAC_SoftwareTriggerCmd+0x28>
  {
    /* Enable software trigger for the selected DAC channel */
    DAC->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4);
    572e:	4b0d      	ldr	r3, [pc, #52]	; (5764 <DAC_SoftwareTriggerCmd+0x48>)
    5730:	685a      	ldr	r2, [r3, #4]
    5732:	687b      	ldr	r3, [r7, #4]
    5734:	091b      	lsrs	r3, r3, #4
    5736:	2101      	movs	r1, #1
    5738:	fa01 f303 	lsl.w	r3, r1, r3
    573c:	4909      	ldr	r1, [pc, #36]	; (5764 <DAC_SoftwareTriggerCmd+0x48>)
    573e:	4313      	orrs	r3, r2
    5740:	604b      	str	r3, [r1, #4]
  else
  {
    /* Disable software trigger for the selected DAC channel */
    DAC->SWTRIGR &= ~((uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4));
  }
}
    5742:	e00a      	b.n	575a <DAC_SoftwareTriggerCmd+0x3e>
    DAC->SWTRIGR &= ~((uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4));
    5744:	4b07      	ldr	r3, [pc, #28]	; (5764 <DAC_SoftwareTriggerCmd+0x48>)
    5746:	685a      	ldr	r2, [r3, #4]
    5748:	687b      	ldr	r3, [r7, #4]
    574a:	091b      	lsrs	r3, r3, #4
    574c:	2101      	movs	r1, #1
    574e:	fa01 f303 	lsl.w	r3, r1, r3
    5752:	43db      	mvns	r3, r3
    5754:	4903      	ldr	r1, [pc, #12]	; (5764 <DAC_SoftwareTriggerCmd+0x48>)
    5756:	4013      	ands	r3, r2
    5758:	604b      	str	r3, [r1, #4]
}
    575a:	bf00      	nop
    575c:	370c      	adds	r7, #12
    575e:	46bd      	mov	sp, r7
    5760:	bc80      	pop	{r7}
    5762:	4770      	bx	lr
    5764:	40007400 	.word	0x40007400

00005768 <DAC_DualSoftwareTriggerCmd>:
  * @param  NewState: new state of the DAC channels software triggers.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DAC_DualSoftwareTriggerCmd(FunctionalState NewState)
{
    5768:	b480      	push	{r7}
    576a:	b083      	sub	sp, #12
    576c:	af00      	add	r7, sp, #0
    576e:	4603      	mov	r3, r0
    5770:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    5772:	79fb      	ldrb	r3, [r7, #7]
    5774:	2b00      	cmp	r3, #0
    5776:	d006      	beq.n	5786 <DAC_DualSoftwareTriggerCmd+0x1e>
  {
    /* Enable software trigger for both DAC channels */
    DAC->SWTRIGR |= DUAL_SWTRIG_SET ;
    5778:	4b08      	ldr	r3, [pc, #32]	; (579c <DAC_DualSoftwareTriggerCmd+0x34>)
    577a:	685b      	ldr	r3, [r3, #4]
    577c:	4a07      	ldr	r2, [pc, #28]	; (579c <DAC_DualSoftwareTriggerCmd+0x34>)
    577e:	f043 0303 	orr.w	r3, r3, #3
    5782:	6053      	str	r3, [r2, #4]
  else
  {
    /* Disable software trigger for both DAC channels */
    DAC->SWTRIGR &= DUAL_SWTRIG_RESET;
  }
}
    5784:	e005      	b.n	5792 <DAC_DualSoftwareTriggerCmd+0x2a>
    DAC->SWTRIGR &= DUAL_SWTRIG_RESET;
    5786:	4b05      	ldr	r3, [pc, #20]	; (579c <DAC_DualSoftwareTriggerCmd+0x34>)
    5788:	685b      	ldr	r3, [r3, #4]
    578a:	4a04      	ldr	r2, [pc, #16]	; (579c <DAC_DualSoftwareTriggerCmd+0x34>)
    578c:	f023 0303 	bic.w	r3, r3, #3
    5790:	6053      	str	r3, [r2, #4]
}
    5792:	bf00      	nop
    5794:	370c      	adds	r7, #12
    5796:	46bd      	mov	sp, r7
    5798:	bc80      	pop	{r7}
    579a:	4770      	bx	lr
    579c:	40007400 	.word	0x40007400

000057a0 <DAC_WaveGenerationCmd>:
  * @param  NewState: new state of the selected DAC channel wave generation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DAC_WaveGenerationCmd(uint32_t DAC_Channel, uint32_t DAC_Wave, FunctionalState NewState)
{
    57a0:	b480      	push	{r7}
    57a2:	b085      	sub	sp, #20
    57a4:	af00      	add	r7, sp, #0
    57a6:	60f8      	str	r0, [r7, #12]
    57a8:	60b9      	str	r1, [r7, #8]
    57aa:	4613      	mov	r3, r2
    57ac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_WAVE(DAC_Wave)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    57ae:	79fb      	ldrb	r3, [r7, #7]
    57b0:	2b00      	cmp	r3, #0
    57b2:	d009      	beq.n	57c8 <DAC_WaveGenerationCmd+0x28>
  {
    /* Enable the selected wave generation for the selected DAC channel */
    DAC->CR |= DAC_Wave << DAC_Channel;
    57b4:	4b0c      	ldr	r3, [pc, #48]	; (57e8 <DAC_WaveGenerationCmd+0x48>)
    57b6:	681a      	ldr	r2, [r3, #0]
    57b8:	68b9      	ldr	r1, [r7, #8]
    57ba:	68fb      	ldr	r3, [r7, #12]
    57bc:	fa01 f303 	lsl.w	r3, r1, r3
    57c0:	4909      	ldr	r1, [pc, #36]	; (57e8 <DAC_WaveGenerationCmd+0x48>)
    57c2:	4313      	orrs	r3, r2
    57c4:	600b      	str	r3, [r1, #0]
  else
  {
    /* Disable the selected wave generation for the selected DAC channel */
    DAC->CR &= ~(DAC_Wave << DAC_Channel);
  }
}
    57c6:	e009      	b.n	57dc <DAC_WaveGenerationCmd+0x3c>
    DAC->CR &= ~(DAC_Wave << DAC_Channel);
    57c8:	4b07      	ldr	r3, [pc, #28]	; (57e8 <DAC_WaveGenerationCmd+0x48>)
    57ca:	681a      	ldr	r2, [r3, #0]
    57cc:	68b9      	ldr	r1, [r7, #8]
    57ce:	68fb      	ldr	r3, [r7, #12]
    57d0:	fa01 f303 	lsl.w	r3, r1, r3
    57d4:	43db      	mvns	r3, r3
    57d6:	4904      	ldr	r1, [pc, #16]	; (57e8 <DAC_WaveGenerationCmd+0x48>)
    57d8:	4013      	ands	r3, r2
    57da:	600b      	str	r3, [r1, #0]
}
    57dc:	bf00      	nop
    57de:	3714      	adds	r7, #20
    57e0:	46bd      	mov	sp, r7
    57e2:	bc80      	pop	{r7}
    57e4:	4770      	bx	lr
    57e6:	bf00      	nop
    57e8:	40007400 	.word	0x40007400

000057ec <DAC_SetChannel1Data>:
  *     @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data : Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
    57ec:	b480      	push	{r7}
    57ee:	b085      	sub	sp, #20
    57f0:	af00      	add	r7, sp, #0
    57f2:	6078      	str	r0, [r7, #4]
    57f4:	460b      	mov	r3, r1
    57f6:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
    57f8:	2300      	movs	r3, #0
    57fa:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
    57fc:	4b07      	ldr	r3, [pc, #28]	; (581c <DAC_SetChannel1Data+0x30>)
    57fe:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
    5800:	68fa      	ldr	r2, [r7, #12]
    5802:	687b      	ldr	r3, [r7, #4]
    5804:	4413      	add	r3, r2
    5806:	3308      	adds	r3, #8
    5808:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
    580a:	68fb      	ldr	r3, [r7, #12]
    580c:	461a      	mov	r2, r3
    580e:	887b      	ldrh	r3, [r7, #2]
    5810:	6013      	str	r3, [r2, #0]
}
    5812:	bf00      	nop
    5814:	3714      	adds	r7, #20
    5816:	46bd      	mov	sp, r7
    5818:	bc80      	pop	{r7}
    581a:	4770      	bx	lr
    581c:	40007400 	.word	0x40007400

00005820 <DAC_SetChannel2Data>:
  *     @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data : Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel2Data(uint32_t DAC_Align, uint16_t Data)
{
    5820:	b480      	push	{r7}
    5822:	b085      	sub	sp, #20
    5824:	af00      	add	r7, sp, #0
    5826:	6078      	str	r0, [r7, #4]
    5828:	460b      	mov	r3, r1
    582a:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
    582c:	2300      	movs	r3, #0
    582e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE;
    5830:	4b07      	ldr	r3, [pc, #28]	; (5850 <DAC_SetChannel2Data+0x30>)
    5832:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R2_OFFSET + DAC_Align;
    5834:	68fa      	ldr	r2, [r7, #12]
    5836:	687b      	ldr	r3, [r7, #4]
    5838:	4413      	add	r3, r2
    583a:	3314      	adds	r3, #20
    583c:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel2 selected data holding register */
  *(__IO uint32_t *)tmp = Data;
    583e:	68fb      	ldr	r3, [r7, #12]
    5840:	461a      	mov	r2, r3
    5842:	887b      	ldrh	r3, [r7, #2]
    5844:	6013      	str	r3, [r2, #0]
}
    5846:	bf00      	nop
    5848:	3714      	adds	r7, #20
    584a:	46bd      	mov	sp, r7
    584c:	bc80      	pop	{r7}
    584e:	4770      	bx	lr
    5850:	40007400 	.word	0x40007400

00005854 <DAC_SetDualChannelData>:
  * @param  Data1: Data for DAC Channel1 to be loaded in the selected data 
  *   holding register.
  * @retval None
  */
void DAC_SetDualChannelData(uint32_t DAC_Align, uint16_t Data2, uint16_t Data1)
{
    5854:	b480      	push	{r7}
    5856:	b085      	sub	sp, #20
    5858:	af00      	add	r7, sp, #0
    585a:	6078      	str	r0, [r7, #4]
    585c:	460b      	mov	r3, r1
    585e:	807b      	strh	r3, [r7, #2]
    5860:	4613      	mov	r3, r2
    5862:	803b      	strh	r3, [r7, #0]
  uint32_t data = 0, tmp = 0;
    5864:	2300      	movs	r3, #0
    5866:	60fb      	str	r3, [r7, #12]
    5868:	2300      	movs	r3, #0
    586a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data1));
  assert_param(IS_DAC_DATA(Data2));
  
  /* Calculate and set dual DAC data holding register value */
  if (DAC_Align == DAC_Align_8b_R)
    586c:	687b      	ldr	r3, [r7, #4]
    586e:	2b08      	cmp	r3, #8
    5870:	d105      	bne.n	587e <DAC_SetDualChannelData+0x2a>
  {
    data = ((uint32_t)Data2 << 8) | Data1; 
    5872:	887b      	ldrh	r3, [r7, #2]
    5874:	021a      	lsls	r2, r3, #8
    5876:	883b      	ldrh	r3, [r7, #0]
    5878:	4313      	orrs	r3, r2
    587a:	60fb      	str	r3, [r7, #12]
    587c:	e004      	b.n	5888 <DAC_SetDualChannelData+0x34>
  }
  else
  {
    data = ((uint32_t)Data2 << 16) | Data1;
    587e:	887b      	ldrh	r3, [r7, #2]
    5880:	041a      	lsls	r2, r3, #16
    5882:	883b      	ldrh	r3, [r7, #0]
    5884:	4313      	orrs	r3, r2
    5886:	60fb      	str	r3, [r7, #12]
  }
  
  tmp = (uint32_t)DAC_BASE;
    5888:	4b07      	ldr	r3, [pc, #28]	; (58a8 <DAC_SetDualChannelData+0x54>)
    588a:	60bb      	str	r3, [r7, #8]
  tmp += DHR12RD_OFFSET + DAC_Align;
    588c:	687a      	ldr	r2, [r7, #4]
    588e:	68bb      	ldr	r3, [r7, #8]
    5890:	4413      	add	r3, r2
    5892:	3320      	adds	r3, #32
    5894:	60bb      	str	r3, [r7, #8]

  /* Set the dual DAC selected data holding register */
  *(__IO uint32_t *)tmp = data;
    5896:	68bb      	ldr	r3, [r7, #8]
    5898:	68fa      	ldr	r2, [r7, #12]
    589a:	601a      	str	r2, [r3, #0]
}
    589c:	bf00      	nop
    589e:	3714      	adds	r7, #20
    58a0:	46bd      	mov	sp, r7
    58a2:	bc80      	pop	{r7}
    58a4:	4770      	bx	lr
    58a6:	bf00      	nop
    58a8:	40007400 	.word	0x40007400

000058ac <DAC_GetDataOutputValue>:
  *     @arg DAC_Channel_1: DAC Channel1 selected
  *     @arg DAC_Channel_2: DAC Channel2 selected
  * @retval The selected DAC channel data output value.
  */
uint16_t DAC_GetDataOutputValue(uint32_t DAC_Channel)
{
    58ac:	b480      	push	{r7}
    58ae:	b085      	sub	sp, #20
    58b0:	af00      	add	r7, sp, #0
    58b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmp = 0;
    58b4:	2300      	movs	r3, #0
    58b6:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  
  tmp = (uint32_t) DAC_BASE ;
    58b8:	4b07      	ldr	r3, [pc, #28]	; (58d8 <DAC_GetDataOutputValue+0x2c>)
    58ba:	60fb      	str	r3, [r7, #12]
  tmp += DOR_OFFSET + ((uint32_t)DAC_Channel >> 2);
    58bc:	687b      	ldr	r3, [r7, #4]
    58be:	089a      	lsrs	r2, r3, #2
    58c0:	68fb      	ldr	r3, [r7, #12]
    58c2:	4413      	add	r3, r2
    58c4:	332c      	adds	r3, #44	; 0x2c
    58c6:	60fb      	str	r3, [r7, #12]
  
  /* Returns the DAC channel data output register value */
  return (uint16_t) (*(__IO uint32_t*) tmp);
    58c8:	68fb      	ldr	r3, [r7, #12]
    58ca:	681b      	ldr	r3, [r3, #0]
    58cc:	b29b      	uxth	r3, r3
}
    58ce:	4618      	mov	r0, r3
    58d0:	3714      	adds	r7, #20
    58d2:	46bd      	mov	sp, r7
    58d4:	bc80      	pop	{r7}
    58d6:	4770      	bx	lr
    58d8:	40007400 	.word	0x40007400

000058dc <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
    58dc:	b480      	push	{r7}
    58de:	b083      	sub	sp, #12
    58e0:	af00      	add	r7, sp, #0
    58e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
    58e4:	4a05      	ldr	r2, [pc, #20]	; (58fc <NVIC_PriorityGroupConfig+0x20>)
    58e6:	687b      	ldr	r3, [r7, #4]
    58e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
    58ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    58f0:	60d3      	str	r3, [r2, #12]
}
    58f2:	bf00      	nop
    58f4:	370c      	adds	r7, #12
    58f6:	46bd      	mov	sp, r7
    58f8:	bc80      	pop	{r7}
    58fa:	4770      	bx	lr
    58fc:	e000ed00 	.word	0xe000ed00

00005900 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
    5900:	b480      	push	{r7}
    5902:	b087      	sub	sp, #28
    5904:	af00      	add	r7, sp, #0
    5906:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
    5908:	2300      	movs	r3, #0
    590a:	617b      	str	r3, [r7, #20]
    590c:	2300      	movs	r3, #0
    590e:	613b      	str	r3, [r7, #16]
    5910:	230f      	movs	r3, #15
    5912:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
    5914:	687b      	ldr	r3, [r7, #4]
    5916:	78db      	ldrb	r3, [r3, #3]
    5918:	2b00      	cmp	r3, #0
    591a:	d03a      	beq.n	5992 <NVIC_Init+0x92>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    591c:	4b27      	ldr	r3, [pc, #156]	; (59bc <NVIC_Init+0xbc>)
    591e:	68db      	ldr	r3, [r3, #12]
    5920:	43db      	mvns	r3, r3
    5922:	0a1b      	lsrs	r3, r3, #8
    5924:	f003 0307 	and.w	r3, r3, #7
    5928:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
    592a:	697b      	ldr	r3, [r7, #20]
    592c:	f1c3 0304 	rsb	r3, r3, #4
    5930:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
    5932:	68fa      	ldr	r2, [r7, #12]
    5934:	697b      	ldr	r3, [r7, #20]
    5936:	fa22 f303 	lsr.w	r3, r2, r3
    593a:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    593c:	687b      	ldr	r3, [r7, #4]
    593e:	785b      	ldrb	r3, [r3, #1]
    5940:	461a      	mov	r2, r3
    5942:	693b      	ldr	r3, [r7, #16]
    5944:	fa02 f303 	lsl.w	r3, r2, r3
    5948:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
    594a:	687b      	ldr	r3, [r7, #4]
    594c:	789b      	ldrb	r3, [r3, #2]
    594e:	461a      	mov	r2, r3
    5950:	68fb      	ldr	r3, [r7, #12]
    5952:	4013      	ands	r3, r2
    5954:	697a      	ldr	r2, [r7, #20]
    5956:	4313      	orrs	r3, r2
    5958:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
    595a:	697b      	ldr	r3, [r7, #20]
    595c:	011b      	lsls	r3, r3, #4
    595e:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    5960:	4a17      	ldr	r2, [pc, #92]	; (59c0 <NVIC_Init+0xc0>)
    5962:	687b      	ldr	r3, [r7, #4]
    5964:	781b      	ldrb	r3, [r3, #0]
    5966:	6979      	ldr	r1, [r7, #20]
    5968:	b2c9      	uxtb	r1, r1
    596a:	4413      	add	r3, r2
    596c:	460a      	mov	r2, r1
    596e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    5972:	687b      	ldr	r3, [r7, #4]
    5974:	781b      	ldrb	r3, [r3, #0]
    5976:	f003 031f 	and.w	r3, r3, #31
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    597a:	4911      	ldr	r1, [pc, #68]	; (59c0 <NVIC_Init+0xc0>)
    597c:	687a      	ldr	r2, [r7, #4]
    597e:	7812      	ldrb	r2, [r2, #0]
    5980:	0952      	lsrs	r2, r2, #5
    5982:	b2d2      	uxtb	r2, r2
    5984:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    5986:	2201      	movs	r2, #1
    5988:	fa02 f303 	lsl.w	r3, r2, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    598c:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
    5990:	e00f      	b.n	59b2 <NVIC_Init+0xb2>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    5992:	687b      	ldr	r3, [r7, #4]
    5994:	781b      	ldrb	r3, [r3, #0]
    5996:	f003 031f 	and.w	r3, r3, #31
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    599a:	4909      	ldr	r1, [pc, #36]	; (59c0 <NVIC_Init+0xc0>)
    599c:	687a      	ldr	r2, [r7, #4]
    599e:	7812      	ldrb	r2, [r2, #0]
    59a0:	0952      	lsrs	r2, r2, #5
    59a2:	b2d2      	uxtb	r2, r2
    59a4:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    59a6:	2201      	movs	r2, #1
    59a8:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    59aa:	f100 0320 	add.w	r3, r0, #32
    59ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    59b2:	bf00      	nop
    59b4:	371c      	adds	r7, #28
    59b6:	46bd      	mov	sp, r7
    59b8:	bc80      	pop	{r7}
    59ba:	4770      	bx	lr
    59bc:	e000ed00 	.word	0xe000ed00
    59c0:	e000e100 	.word	0xe000e100

000059c4 <NVIC_SetVectorTable>:
  * @param  Offset: Vector Table base offset field. This value must be a multiple 
  *         of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{ 
    59c4:	b480      	push	{r7}
    59c6:	b083      	sub	sp, #12
    59c8:	af00      	add	r7, sp, #0
    59ca:	6078      	str	r0, [r7, #4]
    59cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
    59ce:	683b      	ldr	r3, [r7, #0]
    59d0:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
    59d4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    59d8:	4904      	ldr	r1, [pc, #16]	; (59ec <NVIC_SetVectorTable+0x28>)
    59da:	687a      	ldr	r2, [r7, #4]
    59dc:	4313      	orrs	r3, r2
    59de:	608b      	str	r3, [r1, #8]
}
    59e0:	bf00      	nop
    59e2:	370c      	adds	r7, #12
    59e4:	46bd      	mov	sp, r7
    59e6:	bc80      	pop	{r7}
    59e8:	4770      	bx	lr
    59ea:	bf00      	nop
    59ec:	e000ed00 	.word	0xe000ed00

000059f0 <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
    59f0:	b480      	push	{r7}
    59f2:	b083      	sub	sp, #12
    59f4:	af00      	add	r7, sp, #0
    59f6:	4603      	mov	r3, r0
    59f8:	460a      	mov	r2, r1
    59fa:	71fb      	strb	r3, [r7, #7]
    59fc:	4613      	mov	r3, r2
    59fe:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
    5a00:	79bb      	ldrb	r3, [r7, #6]
    5a02:	2b00      	cmp	r3, #0
    5a04:	d006      	beq.n	5a14 <NVIC_SystemLPConfig+0x24>
  {
    SCB->SCR |= LowPowerMode;
    5a06:	4b09      	ldr	r3, [pc, #36]	; (5a2c <NVIC_SystemLPConfig+0x3c>)
    5a08:	691a      	ldr	r2, [r3, #16]
    5a0a:	79fb      	ldrb	r3, [r7, #7]
    5a0c:	4907      	ldr	r1, [pc, #28]	; (5a2c <NVIC_SystemLPConfig+0x3c>)
    5a0e:	4313      	orrs	r3, r2
    5a10:	610b      	str	r3, [r1, #16]
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
  }
}
    5a12:	e006      	b.n	5a22 <NVIC_SystemLPConfig+0x32>
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
    5a14:	4b05      	ldr	r3, [pc, #20]	; (5a2c <NVIC_SystemLPConfig+0x3c>)
    5a16:	691a      	ldr	r2, [r3, #16]
    5a18:	79fb      	ldrb	r3, [r7, #7]
    5a1a:	43db      	mvns	r3, r3
    5a1c:	4903      	ldr	r1, [pc, #12]	; (5a2c <NVIC_SystemLPConfig+0x3c>)
    5a1e:	4013      	ands	r3, r2
    5a20:	610b      	str	r3, [r1, #16]
}
    5a22:	bf00      	nop
    5a24:	370c      	adds	r7, #12
    5a26:	46bd      	mov	sp, r7
    5a28:	bc80      	pop	{r7}
    5a2a:	4770      	bx	lr
    5a2c:	e000ed00 	.word	0xe000ed00

00005a30 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
    5a30:	b480      	push	{r7}
    5a32:	b083      	sub	sp, #12
    5a34:	af00      	add	r7, sp, #0
    5a36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
    5a38:	687b      	ldr	r3, [r7, #4]
    5a3a:	2b04      	cmp	r3, #4
    5a3c:	d106      	bne.n	5a4c <SysTick_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
    5a3e:	4b09      	ldr	r3, [pc, #36]	; (5a64 <SysTick_CLKSourceConfig+0x34>)
    5a40:	681b      	ldr	r3, [r3, #0]
    5a42:	4a08      	ldr	r2, [pc, #32]	; (5a64 <SysTick_CLKSourceConfig+0x34>)
    5a44:	f043 0304 	orr.w	r3, r3, #4
    5a48:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
  }
}
    5a4a:	e005      	b.n	5a58 <SysTick_CLKSourceConfig+0x28>
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
    5a4c:	4b05      	ldr	r3, [pc, #20]	; (5a64 <SysTick_CLKSourceConfig+0x34>)
    5a4e:	681b      	ldr	r3, [r3, #0]
    5a50:	4a04      	ldr	r2, [pc, #16]	; (5a64 <SysTick_CLKSourceConfig+0x34>)
    5a52:	f023 0304 	bic.w	r3, r3, #4
    5a56:	6013      	str	r3, [r2, #0]
}
    5a58:	bf00      	nop
    5a5a:	370c      	adds	r7, #12
    5a5c:	46bd      	mov	sp, r7
    5a5e:	bc80      	pop	{r7}
    5a60:	4770      	bx	lr
    5a62:	bf00      	nop
    5a64:	e000e010 	.word	0xe000e010

00005a68 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    5a68:	b480      	push	{r7}
    5a6a:	b083      	sub	sp, #12
    5a6c:	af00      	add	r7, sp, #0
    5a6e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    5a70:	687b      	ldr	r3, [r7, #4]
    5a72:	f103 0208 	add.w	r2, r3, #8
    5a76:	687b      	ldr	r3, [r7, #4]
    5a78:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    5a7a:	687b      	ldr	r3, [r7, #4]
    5a7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5a80:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    5a82:	687b      	ldr	r3, [r7, #4]
    5a84:	f103 0208 	add.w	r2, r3, #8
    5a88:	687b      	ldr	r3, [r7, #4]
    5a8a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    5a8c:	687b      	ldr	r3, [r7, #4]
    5a8e:	f103 0208 	add.w	r2, r3, #8
    5a92:	687b      	ldr	r3, [r7, #4]
    5a94:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    5a96:	687b      	ldr	r3, [r7, #4]
    5a98:	2200      	movs	r2, #0
    5a9a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    5a9c:	bf00      	nop
    5a9e:	370c      	adds	r7, #12
    5aa0:	46bd      	mov	sp, r7
    5aa2:	bc80      	pop	{r7}
    5aa4:	4770      	bx	lr

00005aa6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    5aa6:	b480      	push	{r7}
    5aa8:	b083      	sub	sp, #12
    5aaa:	af00      	add	r7, sp, #0
    5aac:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    5aae:	687b      	ldr	r3, [r7, #4]
    5ab0:	2200      	movs	r2, #0
    5ab2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    5ab4:	bf00      	nop
    5ab6:	370c      	adds	r7, #12
    5ab8:	46bd      	mov	sp, r7
    5aba:	bc80      	pop	{r7}
    5abc:	4770      	bx	lr

00005abe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    5abe:	b480      	push	{r7}
    5ac0:	b085      	sub	sp, #20
    5ac2:	af00      	add	r7, sp, #0
    5ac4:	6078      	str	r0, [r7, #4]
    5ac6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
    5ac8:	687b      	ldr	r3, [r7, #4]
    5aca:	685b      	ldr	r3, [r3, #4]
    5acc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    5ace:	683b      	ldr	r3, [r7, #0]
    5ad0:	68fa      	ldr	r2, [r7, #12]
    5ad2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    5ad4:	68fb      	ldr	r3, [r7, #12]
    5ad6:	689a      	ldr	r2, [r3, #8]
    5ad8:	683b      	ldr	r3, [r7, #0]
    5ada:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    5adc:	68fb      	ldr	r3, [r7, #12]
    5ade:	689b      	ldr	r3, [r3, #8]
    5ae0:	683a      	ldr	r2, [r7, #0]
    5ae2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
    5ae4:	68fb      	ldr	r3, [r7, #12]
    5ae6:	683a      	ldr	r2, [r7, #0]
    5ae8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    5aea:	683b      	ldr	r3, [r7, #0]
    5aec:	687a      	ldr	r2, [r7, #4]
    5aee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    5af0:	687b      	ldr	r3, [r7, #4]
    5af2:	681b      	ldr	r3, [r3, #0]
    5af4:	1c5a      	adds	r2, r3, #1
    5af6:	687b      	ldr	r3, [r7, #4]
    5af8:	601a      	str	r2, [r3, #0]
}
    5afa:	bf00      	nop
    5afc:	3714      	adds	r7, #20
    5afe:	46bd      	mov	sp, r7
    5b00:	bc80      	pop	{r7}
    5b02:	4770      	bx	lr

00005b04 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    5b04:	b480      	push	{r7}
    5b06:	b085      	sub	sp, #20
    5b08:	af00      	add	r7, sp, #0
    5b0a:	6078      	str	r0, [r7, #4]
    5b0c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    5b0e:	683b      	ldr	r3, [r7, #0]
    5b10:	681b      	ldr	r3, [r3, #0]
    5b12:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    5b14:	68bb      	ldr	r3, [r7, #8]
    5b16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    5b1a:	d103      	bne.n	5b24 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    5b1c:	687b      	ldr	r3, [r7, #4]
    5b1e:	691b      	ldr	r3, [r3, #16]
    5b20:	60fb      	str	r3, [r7, #12]
    5b22:	e00c      	b.n	5b3e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    5b24:	687b      	ldr	r3, [r7, #4]
    5b26:	3308      	adds	r3, #8
    5b28:	60fb      	str	r3, [r7, #12]
    5b2a:	e002      	b.n	5b32 <vListInsert+0x2e>
    5b2c:	68fb      	ldr	r3, [r7, #12]
    5b2e:	685b      	ldr	r3, [r3, #4]
    5b30:	60fb      	str	r3, [r7, #12]
    5b32:	68fb      	ldr	r3, [r7, #12]
    5b34:	685b      	ldr	r3, [r3, #4]
    5b36:	681b      	ldr	r3, [r3, #0]
    5b38:	68ba      	ldr	r2, [r7, #8]
    5b3a:	429a      	cmp	r2, r3
    5b3c:	d2f6      	bcs.n	5b2c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    5b3e:	68fb      	ldr	r3, [r7, #12]
    5b40:	685a      	ldr	r2, [r3, #4]
    5b42:	683b      	ldr	r3, [r7, #0]
    5b44:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    5b46:	683b      	ldr	r3, [r7, #0]
    5b48:	685b      	ldr	r3, [r3, #4]
    5b4a:	683a      	ldr	r2, [r7, #0]
    5b4c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    5b4e:	683b      	ldr	r3, [r7, #0]
    5b50:	68fa      	ldr	r2, [r7, #12]
    5b52:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
    5b54:	68fb      	ldr	r3, [r7, #12]
    5b56:	683a      	ldr	r2, [r7, #0]
    5b58:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    5b5a:	683b      	ldr	r3, [r7, #0]
    5b5c:	687a      	ldr	r2, [r7, #4]
    5b5e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    5b60:	687b      	ldr	r3, [r7, #4]
    5b62:	681b      	ldr	r3, [r3, #0]
    5b64:	1c5a      	adds	r2, r3, #1
    5b66:	687b      	ldr	r3, [r7, #4]
    5b68:	601a      	str	r2, [r3, #0]
}
    5b6a:	bf00      	nop
    5b6c:	3714      	adds	r7, #20
    5b6e:	46bd      	mov	sp, r7
    5b70:	bc80      	pop	{r7}
    5b72:	4770      	bx	lr

00005b74 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    5b74:	b480      	push	{r7}
    5b76:	b085      	sub	sp, #20
    5b78:	af00      	add	r7, sp, #0
    5b7a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    5b7c:	687b      	ldr	r3, [r7, #4]
    5b7e:	691b      	ldr	r3, [r3, #16]
    5b80:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    5b82:	687b      	ldr	r3, [r7, #4]
    5b84:	685b      	ldr	r3, [r3, #4]
    5b86:	687a      	ldr	r2, [r7, #4]
    5b88:	6892      	ldr	r2, [r2, #8]
    5b8a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    5b8c:	687b      	ldr	r3, [r7, #4]
    5b8e:	689b      	ldr	r3, [r3, #8]
    5b90:	687a      	ldr	r2, [r7, #4]
    5b92:	6852      	ldr	r2, [r2, #4]
    5b94:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    5b96:	68fb      	ldr	r3, [r7, #12]
    5b98:	685b      	ldr	r3, [r3, #4]
    5b9a:	687a      	ldr	r2, [r7, #4]
    5b9c:	429a      	cmp	r2, r3
    5b9e:	d103      	bne.n	5ba8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    5ba0:	687b      	ldr	r3, [r7, #4]
    5ba2:	689a      	ldr	r2, [r3, #8]
    5ba4:	68fb      	ldr	r3, [r7, #12]
    5ba6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    5ba8:	687b      	ldr	r3, [r7, #4]
    5baa:	2200      	movs	r2, #0
    5bac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
    5bae:	68fb      	ldr	r3, [r7, #12]
    5bb0:	681b      	ldr	r3, [r3, #0]
    5bb2:	1e5a      	subs	r2, r3, #1
    5bb4:	68fb      	ldr	r3, [r7, #12]
    5bb6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
    5bb8:	68fb      	ldr	r3, [r7, #12]
    5bba:	681b      	ldr	r3, [r3, #0]
}
    5bbc:	4618      	mov	r0, r3
    5bbe:	3714      	adds	r7, #20
    5bc0:	46bd      	mov	sp, r7
    5bc2:	bc80      	pop	{r7}
    5bc4:	4770      	bx	lr
	...

00005bc8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
    5bc8:	b580      	push	{r7, lr}
    5bca:	b084      	sub	sp, #16
    5bcc:	af00      	add	r7, sp, #0
    5bce:	6078      	str	r0, [r7, #4]
    5bd0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    5bd2:	687b      	ldr	r3, [r7, #4]
    5bd4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    5bd6:	f002 fffb 	bl	8bd0 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    5bda:	68fb      	ldr	r3, [r7, #12]
    5bdc:	681a      	ldr	r2, [r3, #0]
    5bde:	68fb      	ldr	r3, [r7, #12]
    5be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    5be2:	68f9      	ldr	r1, [r7, #12]
    5be4:	6c09      	ldr	r1, [r1, #64]	; 0x40
    5be6:	fb01 f303 	mul.w	r3, r1, r3
    5bea:	441a      	add	r2, r3
    5bec:	68fb      	ldr	r3, [r7, #12]
    5bee:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    5bf0:	68fb      	ldr	r3, [r7, #12]
    5bf2:	2200      	movs	r2, #0
    5bf4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    5bf6:	68fb      	ldr	r3, [r7, #12]
    5bf8:	681a      	ldr	r2, [r3, #0]
    5bfa:	68fb      	ldr	r3, [r7, #12]
    5bfc:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
    5bfe:	68fb      	ldr	r3, [r7, #12]
    5c00:	681a      	ldr	r2, [r3, #0]
    5c02:	68fb      	ldr	r3, [r7, #12]
    5c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    5c06:	3b01      	subs	r3, #1
    5c08:	68f9      	ldr	r1, [r7, #12]
    5c0a:	6c09      	ldr	r1, [r1, #64]	; 0x40
    5c0c:	fb01 f303 	mul.w	r3, r1, r3
    5c10:	441a      	add	r2, r3
    5c12:	68fb      	ldr	r3, [r7, #12]
    5c14:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
    5c16:	68fb      	ldr	r3, [r7, #12]
    5c18:	22ff      	movs	r2, #255	; 0xff
    5c1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
    5c1e:	68fb      	ldr	r3, [r7, #12]
    5c20:	22ff      	movs	r2, #255	; 0xff
    5c22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
    5c26:	683b      	ldr	r3, [r7, #0]
    5c28:	2b00      	cmp	r3, #0
    5c2a:	d114      	bne.n	5c56 <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    5c2c:	68fb      	ldr	r3, [r7, #12]
    5c2e:	691b      	ldr	r3, [r3, #16]
    5c30:	2b00      	cmp	r3, #0
    5c32:	d01a      	beq.n	5c6a <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    5c34:	68fb      	ldr	r3, [r7, #12]
    5c36:	3310      	adds	r3, #16
    5c38:	4618      	mov	r0, r3
    5c3a:	f001 fcc7 	bl	75cc <xTaskRemoveFromEventList>
    5c3e:	4603      	mov	r3, r0
    5c40:	2b00      	cmp	r3, #0
    5c42:	d012      	beq.n	5c6a <xQueueGenericReset+0xa2>
				{
					queueYIELD_IF_USING_PREEMPTION();
    5c44:	4b0c      	ldr	r3, [pc, #48]	; (5c78 <xQueueGenericReset+0xb0>)
    5c46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5c4a:	601a      	str	r2, [r3, #0]
    5c4c:	f3bf 8f4f 	dsb	sy
    5c50:	f3bf 8f6f 	isb	sy
    5c54:	e009      	b.n	5c6a <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    5c56:	68fb      	ldr	r3, [r7, #12]
    5c58:	3310      	adds	r3, #16
    5c5a:	4618      	mov	r0, r3
    5c5c:	f7ff ff04 	bl	5a68 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    5c60:	68fb      	ldr	r3, [r7, #12]
    5c62:	3324      	adds	r3, #36	; 0x24
    5c64:	4618      	mov	r0, r3
    5c66:	f7ff feff 	bl	5a68 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
    5c6a:	f002 ffcb 	bl	8c04 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
    5c6e:	2301      	movs	r3, #1
}
    5c70:	4618      	mov	r0, r3
    5c72:	3710      	adds	r7, #16
    5c74:	46bd      	mov	sp, r7
    5c76:	bd80      	pop	{r7, pc}
    5c78:	e000ed04 	.word	0xe000ed04

00005c7c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
    5c7c:	b580      	push	{r7, lr}
    5c7e:	b08a      	sub	sp, #40	; 0x28
    5c80:	af02      	add	r7, sp, #8
    5c82:	60f8      	str	r0, [r7, #12]
    5c84:	60b9      	str	r1, [r7, #8]
    5c86:	4613      	mov	r3, r2
    5c88:	71fb      	strb	r3, [r7, #7]
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		if( uxItemSize == ( UBaseType_t ) 0 )
    5c8a:	68bb      	ldr	r3, [r7, #8]
    5c8c:	2b00      	cmp	r3, #0
    5c8e:	d102      	bne.n	5c96 <xQueueGenericCreate+0x1a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
    5c90:	2300      	movs	r3, #0
    5c92:	61fb      	str	r3, [r7, #28]
    5c94:	e004      	b.n	5ca0 <xQueueGenericCreate+0x24>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    5c96:	68fb      	ldr	r3, [r7, #12]
    5c98:	68ba      	ldr	r2, [r7, #8]
    5c9a:	fb02 f303 	mul.w	r3, r2, r3
    5c9e:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
    5ca0:	69fb      	ldr	r3, [r7, #28]
    5ca2:	3348      	adds	r3, #72	; 0x48
    5ca4:	4618      	mov	r0, r3
    5ca6:	f7fa fa31 	bl	10c <pvPortMalloc>
    5caa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
    5cac:	69bb      	ldr	r3, [r7, #24]
    5cae:	2b00      	cmp	r3, #0
    5cb0:	d00b      	beq.n	5cca <xQueueGenericCreate+0x4e>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
    5cb2:	69bb      	ldr	r3, [r7, #24]
    5cb4:	3348      	adds	r3, #72	; 0x48
    5cb6:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
    5cb8:	79fa      	ldrb	r2, [r7, #7]
    5cba:	69bb      	ldr	r3, [r7, #24]
    5cbc:	9300      	str	r3, [sp, #0]
    5cbe:	4613      	mov	r3, r2
    5cc0:	697a      	ldr	r2, [r7, #20]
    5cc2:	68b9      	ldr	r1, [r7, #8]
    5cc4:	68f8      	ldr	r0, [r7, #12]
    5cc6:	f000 f805 	bl	5cd4 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
    5cca:	69bb      	ldr	r3, [r7, #24]
	}
    5ccc:	4618      	mov	r0, r3
    5cce:	3720      	adds	r7, #32
    5cd0:	46bd      	mov	sp, r7
    5cd2:	bd80      	pop	{r7, pc}

00005cd4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
    5cd4:	b580      	push	{r7, lr}
    5cd6:	b084      	sub	sp, #16
    5cd8:	af00      	add	r7, sp, #0
    5cda:	60f8      	str	r0, [r7, #12]
    5cdc:	60b9      	str	r1, [r7, #8]
    5cde:	607a      	str	r2, [r7, #4]
    5ce0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
    5ce2:	68bb      	ldr	r3, [r7, #8]
    5ce4:	2b00      	cmp	r3, #0
    5ce6:	d103      	bne.n	5cf0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
    5ce8:	69bb      	ldr	r3, [r7, #24]
    5cea:	69ba      	ldr	r2, [r7, #24]
    5cec:	601a      	str	r2, [r3, #0]
    5cee:	e002      	b.n	5cf6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
    5cf0:	69bb      	ldr	r3, [r7, #24]
    5cf2:	687a      	ldr	r2, [r7, #4]
    5cf4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
    5cf6:	69bb      	ldr	r3, [r7, #24]
    5cf8:	68fa      	ldr	r2, [r7, #12]
    5cfa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
    5cfc:	69bb      	ldr	r3, [r7, #24]
    5cfe:	68ba      	ldr	r2, [r7, #8]
    5d00:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    5d02:	2101      	movs	r1, #1
    5d04:	69b8      	ldr	r0, [r7, #24]
    5d06:	f7ff ff5f 	bl	5bc8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
    5d0a:	bf00      	nop
    5d0c:	3710      	adds	r7, #16
    5d0e:	46bd      	mov	sp, r7
    5d10:	bd80      	pop	{r7, pc}

00005d12 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
    5d12:	b580      	push	{r7, lr}
    5d14:	b082      	sub	sp, #8
    5d16:	af00      	add	r7, sp, #0
    5d18:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
    5d1a:	687b      	ldr	r3, [r7, #4]
    5d1c:	2b00      	cmp	r3, #0
    5d1e:	d00e      	beq.n	5d3e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
    5d20:	687b      	ldr	r3, [r7, #4]
    5d22:	2200      	movs	r2, #0
    5d24:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    5d26:	687b      	ldr	r3, [r7, #4]
    5d28:	2200      	movs	r2, #0
    5d2a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
    5d2c:	687b      	ldr	r3, [r7, #4]
    5d2e:	2200      	movs	r2, #0
    5d30:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
    5d32:	2300      	movs	r3, #0
    5d34:	2200      	movs	r2, #0
    5d36:	2100      	movs	r1, #0
    5d38:	6878      	ldr	r0, [r7, #4]
    5d3a:	f000 f81c 	bl	5d76 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
    5d3e:	bf00      	nop
    5d40:	3708      	adds	r7, #8
    5d42:	46bd      	mov	sp, r7
    5d44:	bd80      	pop	{r7, pc}

00005d46 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
    5d46:	b580      	push	{r7, lr}
    5d48:	b086      	sub	sp, #24
    5d4a:	af00      	add	r7, sp, #0
    5d4c:	4603      	mov	r3, r0
    5d4e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
    5d50:	2301      	movs	r3, #1
    5d52:	617b      	str	r3, [r7, #20]
    5d54:	2300      	movs	r3, #0
    5d56:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
    5d58:	79fb      	ldrb	r3, [r7, #7]
    5d5a:	461a      	mov	r2, r3
    5d5c:	6939      	ldr	r1, [r7, #16]
    5d5e:	6978      	ldr	r0, [r7, #20]
    5d60:	f7ff ff8c 	bl	5c7c <xQueueGenericCreate>
    5d64:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
    5d66:	68f8      	ldr	r0, [r7, #12]
    5d68:	f7ff ffd3 	bl	5d12 <prvInitialiseMutex>

		return pxNewQueue;
    5d6c:	68fb      	ldr	r3, [r7, #12]
	}
    5d6e:	4618      	mov	r0, r3
    5d70:	3718      	adds	r7, #24
    5d72:	46bd      	mov	sp, r7
    5d74:	bd80      	pop	{r7, pc}

00005d76 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
    5d76:	b580      	push	{r7, lr}
    5d78:	b08a      	sub	sp, #40	; 0x28
    5d7a:	af00      	add	r7, sp, #0
    5d7c:	60f8      	str	r0, [r7, #12]
    5d7e:	60b9      	str	r1, [r7, #8]
    5d80:	607a      	str	r2, [r7, #4]
    5d82:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
    5d84:	2300      	movs	r3, #0
    5d86:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    5d88:	68fb      	ldr	r3, [r7, #12]
    5d8a:	623b      	str	r3, [r7, #32]
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    5d8c:	f002 ff20 	bl	8bd0 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    5d90:	6a3b      	ldr	r3, [r7, #32]
    5d92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    5d94:	6a3b      	ldr	r3, [r7, #32]
    5d96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    5d98:	429a      	cmp	r2, r3
    5d9a:	d302      	bcc.n	5da2 <xQueueGenericSend+0x2c>
    5d9c:	683b      	ldr	r3, [r7, #0]
    5d9e:	2b02      	cmp	r3, #2
    5da0:	d129      	bne.n	5df6 <xQueueGenericSend+0x80>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    5da2:	683a      	ldr	r2, [r7, #0]
    5da4:	68b9      	ldr	r1, [r7, #8]
    5da6:	6a38      	ldr	r0, [r7, #32]
    5da8:	f000 fc2c 	bl	6604 <prvCopyDataToQueue>
    5dac:	61f8      	str	r0, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    5dae:	6a3b      	ldr	r3, [r7, #32]
    5db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5db2:	2b00      	cmp	r3, #0
    5db4:	d010      	beq.n	5dd8 <xQueueGenericSend+0x62>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    5db6:	6a3b      	ldr	r3, [r7, #32]
    5db8:	3324      	adds	r3, #36	; 0x24
    5dba:	4618      	mov	r0, r3
    5dbc:	f001 fc06 	bl	75cc <xTaskRemoveFromEventList>
    5dc0:	4603      	mov	r3, r0
    5dc2:	2b00      	cmp	r3, #0
    5dc4:	d013      	beq.n	5dee <xQueueGenericSend+0x78>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
    5dc6:	4b40      	ldr	r3, [pc, #256]	; (5ec8 <xQueueGenericSend+0x152>)
    5dc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5dcc:	601a      	str	r2, [r3, #0]
    5dce:	f3bf 8f4f 	dsb	sy
    5dd2:	f3bf 8f6f 	isb	sy
    5dd6:	e00a      	b.n	5dee <xQueueGenericSend+0x78>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
    5dd8:	69fb      	ldr	r3, [r7, #28]
    5dda:	2b00      	cmp	r3, #0
    5ddc:	d007      	beq.n	5dee <xQueueGenericSend+0x78>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
    5dde:	4b3a      	ldr	r3, [pc, #232]	; (5ec8 <xQueueGenericSend+0x152>)
    5de0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5de4:	601a      	str	r2, [r3, #0]
    5de6:	f3bf 8f4f 	dsb	sy
    5dea:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
    5dee:	f002 ff09 	bl	8c04 <vPortExitCritical>
				return pdPASS;
    5df2:	2301      	movs	r3, #1
    5df4:	e063      	b.n	5ebe <xQueueGenericSend+0x148>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    5df6:	687b      	ldr	r3, [r7, #4]
    5df8:	2b00      	cmp	r3, #0
    5dfa:	d103      	bne.n	5e04 <xQueueGenericSend+0x8e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    5dfc:	f002 ff02 	bl	8c04 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    5e00:	2300      	movs	r3, #0
    5e02:	e05c      	b.n	5ebe <xQueueGenericSend+0x148>
				}
				else if( xEntryTimeSet == pdFALSE )
    5e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5e06:	2b00      	cmp	r3, #0
    5e08:	d106      	bne.n	5e18 <xQueueGenericSend+0xa2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    5e0a:	f107 0314 	add.w	r3, r7, #20
    5e0e:	4618      	mov	r0, r3
    5e10:	f001 fc8a 	bl	7728 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    5e14:	2301      	movs	r3, #1
    5e16:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    5e18:	f002 fef4 	bl	8c04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    5e1c:	f001 f9cc 	bl	71b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    5e20:	f002 fed6 	bl	8bd0 <vPortEnterCritical>
    5e24:	6a3b      	ldr	r3, [r7, #32]
    5e26:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    5e2a:	b25b      	sxtb	r3, r3
    5e2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    5e30:	d103      	bne.n	5e3a <xQueueGenericSend+0xc4>
    5e32:	6a3b      	ldr	r3, [r7, #32]
    5e34:	2200      	movs	r2, #0
    5e36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    5e3a:	6a3b      	ldr	r3, [r7, #32]
    5e3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
    5e40:	b25b      	sxtb	r3, r3
    5e42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    5e46:	d103      	bne.n	5e50 <xQueueGenericSend+0xda>
    5e48:	6a3b      	ldr	r3, [r7, #32]
    5e4a:	2200      	movs	r2, #0
    5e4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    5e50:	f002 fed8 	bl	8c04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    5e54:	1d3a      	adds	r2, r7, #4
    5e56:	f107 0314 	add.w	r3, r7, #20
    5e5a:	4611      	mov	r1, r2
    5e5c:	4618      	mov	r0, r3
    5e5e:	f001 fc79 	bl	7754 <xTaskCheckForTimeOut>
    5e62:	4603      	mov	r3, r0
    5e64:	2b00      	cmp	r3, #0
    5e66:	d124      	bne.n	5eb2 <xQueueGenericSend+0x13c>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    5e68:	6a38      	ldr	r0, [r7, #32]
    5e6a:	f000 fcd6 	bl	681a <prvIsQueueFull>
    5e6e:	4603      	mov	r3, r0
    5e70:	2b00      	cmp	r3, #0
    5e72:	d018      	beq.n	5ea6 <xQueueGenericSend+0x130>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    5e74:	6a3b      	ldr	r3, [r7, #32]
    5e76:	3310      	adds	r3, #16
    5e78:	687a      	ldr	r2, [r7, #4]
    5e7a:	4611      	mov	r1, r2
    5e7c:	4618      	mov	r0, r3
    5e7e:	f001 fb71 	bl	7564 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    5e82:	6a38      	ldr	r0, [r7, #32]
    5e84:	f000 fc4e 	bl	6724 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    5e88:	f001 f9a4 	bl	71d4 <xTaskResumeAll>
    5e8c:	4603      	mov	r3, r0
    5e8e:	2b00      	cmp	r3, #0
    5e90:	f47f af7c 	bne.w	5d8c <xQueueGenericSend+0x16>
				{
					portYIELD_WITHIN_API();
    5e94:	4b0c      	ldr	r3, [pc, #48]	; (5ec8 <xQueueGenericSend+0x152>)
    5e96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5e9a:	601a      	str	r2, [r3, #0]
    5e9c:	f3bf 8f4f 	dsb	sy
    5ea0:	f3bf 8f6f 	isb	sy
    5ea4:	e772      	b.n	5d8c <xQueueGenericSend+0x16>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    5ea6:	6a38      	ldr	r0, [r7, #32]
    5ea8:	f000 fc3c 	bl	6724 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    5eac:	f001 f992 	bl	71d4 <xTaskResumeAll>
    5eb0:	e76c      	b.n	5d8c <xQueueGenericSend+0x16>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    5eb2:	6a38      	ldr	r0, [r7, #32]
    5eb4:	f000 fc36 	bl	6724 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    5eb8:	f001 f98c 	bl	71d4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    5ebc:	2300      	movs	r3, #0
		}
	}
}
    5ebe:	4618      	mov	r0, r3
    5ec0:	3728      	adds	r7, #40	; 0x28
    5ec2:	46bd      	mov	sp, r7
    5ec4:	bd80      	pop	{r7, pc}
    5ec6:	bf00      	nop
    5ec8:	e000ed04 	.word	0xe000ed04

00005ecc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
    5ecc:	b580      	push	{r7, lr}
    5ece:	b08c      	sub	sp, #48	; 0x30
    5ed0:	af00      	add	r7, sp, #0
    5ed2:	60f8      	str	r0, [r7, #12]
    5ed4:	60b9      	str	r1, [r7, #8]
    5ed6:	607a      	str	r2, [r7, #4]
    5ed8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    5eda:	68fb      	ldr	r3, [r7, #12]
    5edc:	62bb      	str	r3, [r7, #40]	; 0x28

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
    5ede:	f3ef 8211 	mrs	r2, BASEPRI
    5ee2:	f04f 03bf 	mov.w	r3, #191	; 0xbf
    5ee6:	f383 8811 	msr	BASEPRI, r3
    5eea:	f3bf 8f6f 	isb	sy
    5eee:	f3bf 8f4f 	dsb	sy
    5ef2:	61fa      	str	r2, [r7, #28]
    5ef4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
    5ef6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    5ef8:	627b      	str	r3, [r7, #36]	; 0x24
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    5efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5efc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    5efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    5f02:	429a      	cmp	r2, r3
    5f04:	d302      	bcc.n	5f0c <xQueueGenericSendFromISR+0x40>
    5f06:	683b      	ldr	r3, [r7, #0]
    5f08:	2b02      	cmp	r3, #2
    5f0a:	d12c      	bne.n	5f66 <xQueueGenericSendFromISR+0x9a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
    5f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5f0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
    5f12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    5f16:	683a      	ldr	r2, [r7, #0]
    5f18:	68b9      	ldr	r1, [r7, #8]
    5f1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    5f1c:	f000 fb72 	bl	6604 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
    5f20:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
    5f24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    5f28:	d112      	bne.n	5f50 <xQueueGenericSendFromISR+0x84>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    5f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5f2e:	2b00      	cmp	r3, #0
    5f30:	d016      	beq.n	5f60 <xQueueGenericSendFromISR+0x94>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    5f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5f34:	3324      	adds	r3, #36	; 0x24
    5f36:	4618      	mov	r0, r3
    5f38:	f001 fb48 	bl	75cc <xTaskRemoveFromEventList>
    5f3c:	4603      	mov	r3, r0
    5f3e:	2b00      	cmp	r3, #0
    5f40:	d00e      	beq.n	5f60 <xQueueGenericSendFromISR+0x94>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    5f42:	687b      	ldr	r3, [r7, #4]
    5f44:	2b00      	cmp	r3, #0
    5f46:	d00b      	beq.n	5f60 <xQueueGenericSendFromISR+0x94>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    5f48:	687b      	ldr	r3, [r7, #4]
    5f4a:	2201      	movs	r2, #1
    5f4c:	601a      	str	r2, [r3, #0]
    5f4e:	e007      	b.n	5f60 <xQueueGenericSendFromISR+0x94>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    5f50:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
    5f54:	3301      	adds	r3, #1
    5f56:	b2db      	uxtb	r3, r3
    5f58:	b25a      	sxtb	r2, r3
    5f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5f5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
    5f60:	2301      	movs	r3, #1
    5f62:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
    5f64:	e001      	b.n	5f6a <xQueueGenericSendFromISR+0x9e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    5f66:	2300      	movs	r3, #0
    5f68:	62fb      	str	r3, [r7, #44]	; 0x2c
    5f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5f6c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
    5f6e:	697b      	ldr	r3, [r7, #20]
    5f70:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
    5f74:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    5f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
    5f78:	4618      	mov	r0, r3
    5f7a:	3730      	adds	r7, #48	; 0x30
    5f7c:	46bd      	mov	sp, r7
    5f7e:	bd80      	pop	{r7, pc}

00005f80 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
    5f80:	b580      	push	{r7, lr}
    5f82:	b08a      	sub	sp, #40	; 0x28
    5f84:	af00      	add	r7, sp, #0
    5f86:	6078      	str	r0, [r7, #4]
    5f88:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    5f8a:	687b      	ldr	r3, [r7, #4]
    5f8c:	623b      	str	r3, [r7, #32]
	__asm volatile
    5f8e:	f3ef 8211 	mrs	r2, BASEPRI
    5f92:	f04f 03bf 	mov.w	r3, #191	; 0xbf
    5f96:	f383 8811 	msr	BASEPRI, r3
    5f9a:	f3bf 8f6f 	isb	sy
    5f9e:	f3bf 8f4f 	dsb	sy
    5fa2:	613a      	str	r2, [r7, #16]
    5fa4:	60fb      	str	r3, [r7, #12]
	return ulOriginalBASEPRI;
    5fa6:	693b      	ldr	r3, [r7, #16]
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    5fa8:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    5faa:	6a3b      	ldr	r3, [r7, #32]
    5fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    5fae:	61bb      	str	r3, [r7, #24]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
    5fb0:	6a3b      	ldr	r3, [r7, #32]
    5fb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    5fb4:	69ba      	ldr	r2, [r7, #24]
    5fb6:	429a      	cmp	r2, r3
    5fb8:	d229      	bcs.n	600e <xQueueGiveFromISR+0x8e>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
    5fba:	6a3b      	ldr	r3, [r7, #32]
    5fbc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
    5fc0:	75fb      	strb	r3, [r7, #23]
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
    5fc2:	69bb      	ldr	r3, [r7, #24]
    5fc4:	1c5a      	adds	r2, r3, #1
    5fc6:	6a3b      	ldr	r3, [r7, #32]
    5fc8:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
    5fca:	f997 3017 	ldrsb.w	r3, [r7, #23]
    5fce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    5fd2:	d112      	bne.n	5ffa <xQueueGiveFromISR+0x7a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    5fd4:	6a3b      	ldr	r3, [r7, #32]
    5fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5fd8:	2b00      	cmp	r3, #0
    5fda:	d015      	beq.n	6008 <xQueueGiveFromISR+0x88>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    5fdc:	6a3b      	ldr	r3, [r7, #32]
    5fde:	3324      	adds	r3, #36	; 0x24
    5fe0:	4618      	mov	r0, r3
    5fe2:	f001 faf3 	bl	75cc <xTaskRemoveFromEventList>
    5fe6:	4603      	mov	r3, r0
    5fe8:	2b00      	cmp	r3, #0
    5fea:	d00d      	beq.n	6008 <xQueueGiveFromISR+0x88>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    5fec:	683b      	ldr	r3, [r7, #0]
    5fee:	2b00      	cmp	r3, #0
    5ff0:	d00a      	beq.n	6008 <xQueueGiveFromISR+0x88>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    5ff2:	683b      	ldr	r3, [r7, #0]
    5ff4:	2201      	movs	r2, #1
    5ff6:	601a      	str	r2, [r3, #0]
    5ff8:	e006      	b.n	6008 <xQueueGiveFromISR+0x88>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    5ffa:	7dfb      	ldrb	r3, [r7, #23]
    5ffc:	3301      	adds	r3, #1
    5ffe:	b2db      	uxtb	r3, r3
    6000:	b25a      	sxtb	r2, r3
    6002:	6a3b      	ldr	r3, [r7, #32]
    6004:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
    6008:	2301      	movs	r3, #1
    600a:	627b      	str	r3, [r7, #36]	; 0x24
    600c:	e001      	b.n	6012 <xQueueGiveFromISR+0x92>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    600e:	2300      	movs	r3, #0
    6010:	627b      	str	r3, [r7, #36]	; 0x24
    6012:	69fb      	ldr	r3, [r7, #28]
    6014:	60bb      	str	r3, [r7, #8]
	__asm volatile
    6016:	68bb      	ldr	r3, [r7, #8]
    6018:	f383 8811 	msr	BASEPRI, r3
}
    601c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    601e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    6020:	4618      	mov	r0, r3
    6022:	3728      	adds	r7, #40	; 0x28
    6024:	46bd      	mov	sp, r7
    6026:	bd80      	pop	{r7, pc}

00006028 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
    6028:	b580      	push	{r7, lr}
    602a:	b08a      	sub	sp, #40	; 0x28
    602c:	af00      	add	r7, sp, #0
    602e:	60f8      	str	r0, [r7, #12]
    6030:	60b9      	str	r1, [r7, #8]
    6032:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
    6034:	2300      	movs	r3, #0
    6036:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    6038:	68fb      	ldr	r3, [r7, #12]
    603a:	623b      	str	r3, [r7, #32]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    603c:	f002 fdc8 	bl	8bd0 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    6040:	6a3b      	ldr	r3, [r7, #32]
    6042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    6044:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    6046:	69fb      	ldr	r3, [r7, #28]
    6048:	2b00      	cmp	r3, #0
    604a:	d01f      	beq.n	608c <xQueueReceive+0x64>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
    604c:	68b9      	ldr	r1, [r7, #8]
    604e:	6a38      	ldr	r0, [r7, #32]
    6050:	f000 fb42 	bl	66d8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
    6054:	69fb      	ldr	r3, [r7, #28]
    6056:	1e5a      	subs	r2, r3, #1
    6058:	6a3b      	ldr	r3, [r7, #32]
    605a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    605c:	6a3b      	ldr	r3, [r7, #32]
    605e:	691b      	ldr	r3, [r3, #16]
    6060:	2b00      	cmp	r3, #0
    6062:	d00f      	beq.n	6084 <xQueueReceive+0x5c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    6064:	6a3b      	ldr	r3, [r7, #32]
    6066:	3310      	adds	r3, #16
    6068:	4618      	mov	r0, r3
    606a:	f001 faaf 	bl	75cc <xTaskRemoveFromEventList>
    606e:	4603      	mov	r3, r0
    6070:	2b00      	cmp	r3, #0
    6072:	d007      	beq.n	6084 <xQueueReceive+0x5c>
					{
						queueYIELD_IF_USING_PREEMPTION();
    6074:	4b3c      	ldr	r3, [pc, #240]	; (6168 <xQueueReceive+0x140>)
    6076:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    607a:	601a      	str	r2, [r3, #0]
    607c:	f3bf 8f4f 	dsb	sy
    6080:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
    6084:	f002 fdbe 	bl	8c04 <vPortExitCritical>
				return pdPASS;
    6088:	2301      	movs	r3, #1
    608a:	e069      	b.n	6160 <xQueueReceive+0x138>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    608c:	687b      	ldr	r3, [r7, #4]
    608e:	2b00      	cmp	r3, #0
    6090:	d103      	bne.n	609a <xQueueReceive+0x72>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    6092:	f002 fdb7 	bl	8c04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    6096:	2300      	movs	r3, #0
    6098:	e062      	b.n	6160 <xQueueReceive+0x138>
				}
				else if( xEntryTimeSet == pdFALSE )
    609a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    609c:	2b00      	cmp	r3, #0
    609e:	d106      	bne.n	60ae <xQueueReceive+0x86>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    60a0:	f107 0314 	add.w	r3, r7, #20
    60a4:	4618      	mov	r0, r3
    60a6:	f001 fb3f 	bl	7728 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    60aa:	2301      	movs	r3, #1
    60ac:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    60ae:	f002 fda9 	bl	8c04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    60b2:	f001 f881 	bl	71b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    60b6:	f002 fd8b 	bl	8bd0 <vPortEnterCritical>
    60ba:	6a3b      	ldr	r3, [r7, #32]
    60bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    60c0:	b25b      	sxtb	r3, r3
    60c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    60c6:	d103      	bne.n	60d0 <xQueueReceive+0xa8>
    60c8:	6a3b      	ldr	r3, [r7, #32]
    60ca:	2200      	movs	r2, #0
    60cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    60d0:	6a3b      	ldr	r3, [r7, #32]
    60d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
    60d6:	b25b      	sxtb	r3, r3
    60d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    60dc:	d103      	bne.n	60e6 <xQueueReceive+0xbe>
    60de:	6a3b      	ldr	r3, [r7, #32]
    60e0:	2200      	movs	r2, #0
    60e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    60e6:	f002 fd8d 	bl	8c04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    60ea:	1d3a      	adds	r2, r7, #4
    60ec:	f107 0314 	add.w	r3, r7, #20
    60f0:	4611      	mov	r1, r2
    60f2:	4618      	mov	r0, r3
    60f4:	f001 fb2e 	bl	7754 <xTaskCheckForTimeOut>
    60f8:	4603      	mov	r3, r0
    60fa:	2b00      	cmp	r3, #0
    60fc:	d123      	bne.n	6146 <xQueueReceive+0x11e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    60fe:	6a38      	ldr	r0, [r7, #32]
    6100:	f000 fb62 	bl	67c8 <prvIsQueueEmpty>
    6104:	4603      	mov	r3, r0
    6106:	2b00      	cmp	r3, #0
    6108:	d017      	beq.n	613a <xQueueReceive+0x112>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    610a:	6a3b      	ldr	r3, [r7, #32]
    610c:	3324      	adds	r3, #36	; 0x24
    610e:	687a      	ldr	r2, [r7, #4]
    6110:	4611      	mov	r1, r2
    6112:	4618      	mov	r0, r3
    6114:	f001 fa26 	bl	7564 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    6118:	6a38      	ldr	r0, [r7, #32]
    611a:	f000 fb03 	bl	6724 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    611e:	f001 f859 	bl	71d4 <xTaskResumeAll>
    6122:	4603      	mov	r3, r0
    6124:	2b00      	cmp	r3, #0
    6126:	d189      	bne.n	603c <xQueueReceive+0x14>
				{
					portYIELD_WITHIN_API();
    6128:	4b0f      	ldr	r3, [pc, #60]	; (6168 <xQueueReceive+0x140>)
    612a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    612e:	601a      	str	r2, [r3, #0]
    6130:	f3bf 8f4f 	dsb	sy
    6134:	f3bf 8f6f 	isb	sy
    6138:	e780      	b.n	603c <xQueueReceive+0x14>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
    613a:	6a38      	ldr	r0, [r7, #32]
    613c:	f000 faf2 	bl	6724 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    6140:	f001 f848 	bl	71d4 <xTaskResumeAll>
    6144:	e77a      	b.n	603c <xQueueReceive+0x14>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
    6146:	6a38      	ldr	r0, [r7, #32]
    6148:	f000 faec 	bl	6724 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    614c:	f001 f842 	bl	71d4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    6150:	6a38      	ldr	r0, [r7, #32]
    6152:	f000 fb39 	bl	67c8 <prvIsQueueEmpty>
    6156:	4603      	mov	r3, r0
    6158:	2b00      	cmp	r3, #0
    615a:	f43f af6f 	beq.w	603c <xQueueReceive+0x14>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
    615e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
    6160:	4618      	mov	r0, r3
    6162:	3728      	adds	r7, #40	; 0x28
    6164:	46bd      	mov	sp, r7
    6166:	bd80      	pop	{r7, pc}
    6168:	e000ed04 	.word	0xe000ed04

0000616c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
    616c:	b580      	push	{r7, lr}
    616e:	b08a      	sub	sp, #40	; 0x28
    6170:	af00      	add	r7, sp, #0
    6172:	6078      	str	r0, [r7, #4]
    6174:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
    6176:	2300      	movs	r3, #0
    6178:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    617a:	687b      	ldr	r3, [r7, #4]
    617c:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
    617e:	2300      	movs	r3, #0
    6180:	623b      	str	r3, [r7, #32]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    6182:	f002 fd25 	bl	8bd0 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
    6186:	69fb      	ldr	r3, [r7, #28]
    6188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    618a:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
    618c:	69bb      	ldr	r3, [r7, #24]
    618e:	2b00      	cmp	r3, #0
    6190:	d024      	beq.n	61dc <xQueueSemaphoreTake+0x70>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
    6192:	69bb      	ldr	r3, [r7, #24]
    6194:	1e5a      	subs	r2, r3, #1
    6196:	69fb      	ldr	r3, [r7, #28]
    6198:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    619a:	69fb      	ldr	r3, [r7, #28]
    619c:	681b      	ldr	r3, [r3, #0]
    619e:	2b00      	cmp	r3, #0
    61a0:	d104      	bne.n	61ac <xQueueSemaphoreTake+0x40>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    61a2:	f001 fd71 	bl	7c88 <pvTaskIncrementMutexHeldCount>
    61a6:	4602      	mov	r2, r0
    61a8:	69fb      	ldr	r3, [r7, #28]
    61aa:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    61ac:	69fb      	ldr	r3, [r7, #28]
    61ae:	691b      	ldr	r3, [r3, #16]
    61b0:	2b00      	cmp	r3, #0
    61b2:	d00f      	beq.n	61d4 <xQueueSemaphoreTake+0x68>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    61b4:	69fb      	ldr	r3, [r7, #28]
    61b6:	3310      	adds	r3, #16
    61b8:	4618      	mov	r0, r3
    61ba:	f001 fa07 	bl	75cc <xTaskRemoveFromEventList>
    61be:	4603      	mov	r3, r0
    61c0:	2b00      	cmp	r3, #0
    61c2:	d007      	beq.n	61d4 <xQueueSemaphoreTake+0x68>
					{
						queueYIELD_IF_USING_PREEMPTION();
    61c4:	4b4c      	ldr	r3, [pc, #304]	; (62f8 <xQueueSemaphoreTake+0x18c>)
    61c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    61ca:	601a      	str	r2, [r3, #0]
    61cc:	f3bf 8f4f 	dsb	sy
    61d0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
    61d4:	f002 fd16 	bl	8c04 <vPortExitCritical>
				return pdPASS;
    61d8:	2301      	movs	r3, #1
    61da:	e089      	b.n	62f0 <xQueueSemaphoreTake+0x184>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    61dc:	683b      	ldr	r3, [r7, #0]
    61de:	2b00      	cmp	r3, #0
    61e0:	d103      	bne.n	61ea <xQueueSemaphoreTake+0x7e>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
    61e2:	f002 fd0f 	bl	8c04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    61e6:	2300      	movs	r3, #0
    61e8:	e082      	b.n	62f0 <xQueueSemaphoreTake+0x184>
				}
				else if( xEntryTimeSet == pdFALSE )
    61ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    61ec:	2b00      	cmp	r3, #0
    61ee:	d106      	bne.n	61fe <xQueueSemaphoreTake+0x92>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    61f0:	f107 030c 	add.w	r3, r7, #12
    61f4:	4618      	mov	r0, r3
    61f6:	f001 fa97 	bl	7728 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    61fa:	2301      	movs	r3, #1
    61fc:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    61fe:	f002 fd01 	bl	8c04 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
    6202:	f000 ffd9 	bl	71b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    6206:	f002 fce3 	bl	8bd0 <vPortEnterCritical>
    620a:	69fb      	ldr	r3, [r7, #28]
    620c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    6210:	b25b      	sxtb	r3, r3
    6212:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    6216:	d103      	bne.n	6220 <xQueueSemaphoreTake+0xb4>
    6218:	69fb      	ldr	r3, [r7, #28]
    621a:	2200      	movs	r2, #0
    621c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    6220:	69fb      	ldr	r3, [r7, #28]
    6222:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
    6226:	b25b      	sxtb	r3, r3
    6228:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    622c:	d103      	bne.n	6236 <xQueueSemaphoreTake+0xca>
    622e:	69fb      	ldr	r3, [r7, #28]
    6230:	2200      	movs	r2, #0
    6232:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    6236:	f002 fce5 	bl	8c04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    623a:	463a      	mov	r2, r7
    623c:	f107 030c 	add.w	r3, r7, #12
    6240:	4611      	mov	r1, r2
    6242:	4618      	mov	r0, r3
    6244:	f001 fa86 	bl	7754 <xTaskCheckForTimeOut>
    6248:	4603      	mov	r3, r0
    624a:	2b00      	cmp	r3, #0
    624c:	d132      	bne.n	62b4 <xQueueSemaphoreTake+0x148>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    624e:	69f8      	ldr	r0, [r7, #28]
    6250:	f000 faba 	bl	67c8 <prvIsQueueEmpty>
    6254:	4603      	mov	r3, r0
    6256:	2b00      	cmp	r3, #0
    6258:	d026      	beq.n	62a8 <xQueueSemaphoreTake+0x13c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    625a:	69fb      	ldr	r3, [r7, #28]
    625c:	681b      	ldr	r3, [r3, #0]
    625e:	2b00      	cmp	r3, #0
    6260:	d109      	bne.n	6276 <xQueueSemaphoreTake+0x10a>
					{
						taskENTER_CRITICAL();
    6262:	f002 fcb5 	bl	8bd0 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    6266:	69fb      	ldr	r3, [r7, #28]
    6268:	685b      	ldr	r3, [r3, #4]
    626a:	4618      	mov	r0, r3
    626c:	f001 fb8c 	bl	7988 <xTaskPriorityInherit>
    6270:	6238      	str	r0, [r7, #32]
						}
						taskEXIT_CRITICAL();
    6272:	f002 fcc7 	bl	8c04 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    6276:	69fb      	ldr	r3, [r7, #28]
    6278:	3324      	adds	r3, #36	; 0x24
    627a:	683a      	ldr	r2, [r7, #0]
    627c:	4611      	mov	r1, r2
    627e:	4618      	mov	r0, r3
    6280:	f001 f970 	bl	7564 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    6284:	69f8      	ldr	r0, [r7, #28]
    6286:	f000 fa4d 	bl	6724 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    628a:	f000 ffa3 	bl	71d4 <xTaskResumeAll>
    628e:	4603      	mov	r3, r0
    6290:	2b00      	cmp	r3, #0
    6292:	f47f af76 	bne.w	6182 <xQueueSemaphoreTake+0x16>
				{
					portYIELD_WITHIN_API();
    6296:	4b18      	ldr	r3, [pc, #96]	; (62f8 <xQueueSemaphoreTake+0x18c>)
    6298:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    629c:	601a      	str	r2, [r3, #0]
    629e:	f3bf 8f4f 	dsb	sy
    62a2:	f3bf 8f6f 	isb	sy
    62a6:	e76c      	b.n	6182 <xQueueSemaphoreTake+0x16>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
    62a8:	69f8      	ldr	r0, [r7, #28]
    62aa:	f000 fa3b 	bl	6724 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    62ae:	f000 ff91 	bl	71d4 <xTaskResumeAll>
    62b2:	e766      	b.n	6182 <xQueueSemaphoreTake+0x16>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
    62b4:	69f8      	ldr	r0, [r7, #28]
    62b6:	f000 fa35 	bl	6724 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    62ba:	f000 ff8b 	bl	71d4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    62be:	69f8      	ldr	r0, [r7, #28]
    62c0:	f000 fa82 	bl	67c8 <prvIsQueueEmpty>
    62c4:	4603      	mov	r3, r0
    62c6:	2b00      	cmp	r3, #0
    62c8:	f43f af5b 	beq.w	6182 <xQueueSemaphoreTake+0x16>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
    62cc:	6a3b      	ldr	r3, [r7, #32]
    62ce:	2b00      	cmp	r3, #0
    62d0:	d00d      	beq.n	62ee <xQueueSemaphoreTake+0x182>
					{
						taskENTER_CRITICAL();
    62d2:	f002 fc7d 	bl	8bd0 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
    62d6:	69f8      	ldr	r0, [r7, #28]
    62d8:	f000 f97d 	bl	65d6 <prvGetDisinheritPriorityAfterTimeout>
    62dc:	6178      	str	r0, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
    62de:	69fb      	ldr	r3, [r7, #28]
    62e0:	685b      	ldr	r3, [r3, #4]
    62e2:	6979      	ldr	r1, [r7, #20]
    62e4:	4618      	mov	r0, r3
    62e6:	f001 fc39 	bl	7b5c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
    62ea:	f002 fc8b 	bl	8c04 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
    62ee:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
    62f0:	4618      	mov	r0, r3
    62f2:	3728      	adds	r7, #40	; 0x28
    62f4:	46bd      	mov	sp, r7
    62f6:	bd80      	pop	{r7, pc}
    62f8:	e000ed04 	.word	0xe000ed04

000062fc <xQueuePeek>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
    62fc:	b580      	push	{r7, lr}
    62fe:	b08a      	sub	sp, #40	; 0x28
    6300:	af00      	add	r7, sp, #0
    6302:	60f8      	str	r0, [r7, #12]
    6304:	60b9      	str	r1, [r7, #8]
    6306:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
    6308:	2300      	movs	r3, #0
    630a:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    630c:	68fb      	ldr	r3, [r7, #12]
    630e:	623b      	str	r3, [r7, #32]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    6310:	f002 fc5e 	bl	8bd0 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    6314:	6a3b      	ldr	r3, [r7, #32]
    6316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    6318:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    631a:	69fb      	ldr	r3, [r7, #28]
    631c:	2b00      	cmp	r3, #0
    631e:	d021      	beq.n	6364 <xQueuePeek+0x68>
			{
				/* Remember the read position so it can be reset after the data
				is read from the queue as this function is only peeking the
				data, not removing it. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    6320:	6a3b      	ldr	r3, [r7, #32]
    6322:	68db      	ldr	r3, [r3, #12]
    6324:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    6326:	68b9      	ldr	r1, [r7, #8]
    6328:	6a38      	ldr	r0, [r7, #32]
    632a:	f000 f9d5 	bl	66d8 <prvCopyDataFromQueue>
				traceQUEUE_PEEK( pxQueue );

				/* The data is not being removed, so reset the read pointer. */
				pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    632e:	6a3b      	ldr	r3, [r7, #32]
    6330:	69ba      	ldr	r2, [r7, #24]
    6332:	60da      	str	r2, [r3, #12]

				/* The data is being left in the queue, so see if there are
				any other tasks waiting for the data. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    6334:	6a3b      	ldr	r3, [r7, #32]
    6336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6338:	2b00      	cmp	r3, #0
    633a:	d00f      	beq.n	635c <xQueuePeek+0x60>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    633c:	6a3b      	ldr	r3, [r7, #32]
    633e:	3324      	adds	r3, #36	; 0x24
    6340:	4618      	mov	r0, r3
    6342:	f001 f943 	bl	75cc <xTaskRemoveFromEventList>
    6346:	4603      	mov	r3, r0
    6348:	2b00      	cmp	r3, #0
    634a:	d007      	beq.n	635c <xQueuePeek+0x60>
					{
						/* The task waiting has a higher priority than this task. */
						queueYIELD_IF_USING_PREEMPTION();
    634c:	4b3c      	ldr	r3, [pc, #240]	; (6440 <xQueuePeek+0x144>)
    634e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    6352:	601a      	str	r2, [r3, #0]
    6354:	f3bf 8f4f 	dsb	sy
    6358:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
    635c:	f002 fc52 	bl	8c04 <vPortExitCritical>
				return pdPASS;
    6360:	2301      	movs	r3, #1
    6362:	e069      	b.n	6438 <xQueuePeek+0x13c>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    6364:	687b      	ldr	r3, [r7, #4]
    6366:	2b00      	cmp	r3, #0
    6368:	d103      	bne.n	6372 <xQueuePeek+0x76>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    636a:	f002 fc4b 	bl	8c04 <vPortExitCritical>
					traceQUEUE_PEEK_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    636e:	2300      	movs	r3, #0
    6370:	e062      	b.n	6438 <xQueuePeek+0x13c>
				}
				else if( xEntryTimeSet == pdFALSE )
    6372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6374:	2b00      	cmp	r3, #0
    6376:	d106      	bne.n	6386 <xQueuePeek+0x8a>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure ready to enter the blocked
					state. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    6378:	f107 0310 	add.w	r3, r7, #16
    637c:	4618      	mov	r0, r3
    637e:	f001 f9d3 	bl	7728 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    6382:	2301      	movs	r3, #1
    6384:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    6386:	f002 fc3d 	bl	8c04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    638a:	f000 ff15 	bl	71b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    638e:	f002 fc1f 	bl	8bd0 <vPortEnterCritical>
    6392:	6a3b      	ldr	r3, [r7, #32]
    6394:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    6398:	b25b      	sxtb	r3, r3
    639a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    639e:	d103      	bne.n	63a8 <xQueuePeek+0xac>
    63a0:	6a3b      	ldr	r3, [r7, #32]
    63a2:	2200      	movs	r2, #0
    63a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    63a8:	6a3b      	ldr	r3, [r7, #32]
    63aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
    63ae:	b25b      	sxtb	r3, r3
    63b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    63b4:	d103      	bne.n	63be <xQueuePeek+0xc2>
    63b6:	6a3b      	ldr	r3, [r7, #32]
    63b8:	2200      	movs	r2, #0
    63ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    63be:	f002 fc21 	bl	8c04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    63c2:	1d3a      	adds	r2, r7, #4
    63c4:	f107 0310 	add.w	r3, r7, #16
    63c8:	4611      	mov	r1, r2
    63ca:	4618      	mov	r0, r3
    63cc:	f001 f9c2 	bl	7754 <xTaskCheckForTimeOut>
    63d0:	4603      	mov	r3, r0
    63d2:	2b00      	cmp	r3, #0
    63d4:	d123      	bne.n	641e <xQueuePeek+0x122>
		{
			/* Timeout has not expired yet, check to see if there is data in the
			queue now, and if not enter the Blocked state to wait for data. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    63d6:	6a38      	ldr	r0, [r7, #32]
    63d8:	f000 f9f6 	bl	67c8 <prvIsQueueEmpty>
    63dc:	4603      	mov	r3, r0
    63de:	2b00      	cmp	r3, #0
    63e0:	d017      	beq.n	6412 <xQueuePeek+0x116>
			{
				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    63e2:	6a3b      	ldr	r3, [r7, #32]
    63e4:	3324      	adds	r3, #36	; 0x24
    63e6:	687a      	ldr	r2, [r7, #4]
    63e8:	4611      	mov	r1, r2
    63ea:	4618      	mov	r0, r3
    63ec:	f001 f8ba 	bl	7564 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    63f0:	6a38      	ldr	r0, [r7, #32]
    63f2:	f000 f997 	bl	6724 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    63f6:	f000 feed 	bl	71d4 <xTaskResumeAll>
    63fa:	4603      	mov	r3, r0
    63fc:	2b00      	cmp	r3, #0
    63fe:	d187      	bne.n	6310 <xQueuePeek+0x14>
				{
					portYIELD_WITHIN_API();
    6400:	4b0f      	ldr	r3, [pc, #60]	; (6440 <xQueuePeek+0x144>)
    6402:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    6406:	601a      	str	r2, [r3, #0]
    6408:	f3bf 8f4f 	dsb	sy
    640c:	f3bf 8f6f 	isb	sy
    6410:	e77e      	b.n	6310 <xQueuePeek+0x14>
			}
			else
			{
				/* There is data in the queue now, so don't enter the blocked
				state, instead return to try and obtain the data. */
				prvUnlockQueue( pxQueue );
    6412:	6a38      	ldr	r0, [r7, #32]
    6414:	f000 f986 	bl	6724 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    6418:	f000 fedc 	bl	71d4 <xTaskResumeAll>
    641c:	e778      	b.n	6310 <xQueuePeek+0x14>
		}
		else
		{
			/* The timeout has expired.  If there is still no data in the queue
			exit, otherwise go back and try to read the data again. */
			prvUnlockQueue( pxQueue );
    641e:	6a38      	ldr	r0, [r7, #32]
    6420:	f000 f980 	bl	6724 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    6424:	f000 fed6 	bl	71d4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    6428:	6a38      	ldr	r0, [r7, #32]
    642a:	f000 f9cd 	bl	67c8 <prvIsQueueEmpty>
    642e:	4603      	mov	r3, r0
    6430:	2b00      	cmp	r3, #0
    6432:	f43f af6d 	beq.w	6310 <xQueuePeek+0x14>
			{
				traceQUEUE_PEEK_FAILED( pxQueue );
				return errQUEUE_EMPTY;
    6436:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
    6438:	4618      	mov	r0, r3
    643a:	3728      	adds	r7, #40	; 0x28
    643c:	46bd      	mov	sp, r7
    643e:	bd80      	pop	{r7, pc}
    6440:	e000ed04 	.word	0xe000ed04

00006444 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
    6444:	b580      	push	{r7, lr}
    6446:	b08c      	sub	sp, #48	; 0x30
    6448:	af00      	add	r7, sp, #0
    644a:	60f8      	str	r0, [r7, #12]
    644c:	60b9      	str	r1, [r7, #8]
    644e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    6450:	68fb      	ldr	r3, [r7, #12]
    6452:	62bb      	str	r3, [r7, #40]	; 0x28
	__asm volatile
    6454:	f3ef 8211 	mrs	r2, BASEPRI
    6458:	f04f 03bf 	mov.w	r3, #191	; 0xbf
    645c:	f383 8811 	msr	BASEPRI, r3
    6460:	f3bf 8f6f 	isb	sy
    6464:	f3bf 8f4f 	dsb	sy
    6468:	61ba      	str	r2, [r7, #24]
    646a:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
    646c:	69bb      	ldr	r3, [r7, #24]
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    646e:	627b      	str	r3, [r7, #36]	; 0x24
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    6470:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    6474:	623b      	str	r3, [r7, #32]

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    6476:	6a3b      	ldr	r3, [r7, #32]
    6478:	2b00      	cmp	r3, #0
    647a:	d02d      	beq.n	64d8 <xQueueReceiveFromISR+0x94>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
    647c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    647e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    6482:	77fb      	strb	r3, [r7, #31]

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    6484:	68b9      	ldr	r1, [r7, #8]
    6486:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    6488:	f000 f926 	bl	66d8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
    648c:	6a3b      	ldr	r3, [r7, #32]
    648e:	1e5a      	subs	r2, r3, #1
    6490:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6492:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
    6494:	f997 301f 	ldrsb.w	r3, [r7, #31]
    6498:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    649c:	d112      	bne.n	64c4 <xQueueReceiveFromISR+0x80>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    649e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    64a0:	691b      	ldr	r3, [r3, #16]
    64a2:	2b00      	cmp	r3, #0
    64a4:	d015      	beq.n	64d2 <xQueueReceiveFromISR+0x8e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    64a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    64a8:	3310      	adds	r3, #16
    64aa:	4618      	mov	r0, r3
    64ac:	f001 f88e 	bl	75cc <xTaskRemoveFromEventList>
    64b0:	4603      	mov	r3, r0
    64b2:	2b00      	cmp	r3, #0
    64b4:	d00d      	beq.n	64d2 <xQueueReceiveFromISR+0x8e>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
    64b6:	687b      	ldr	r3, [r7, #4]
    64b8:	2b00      	cmp	r3, #0
    64ba:	d00a      	beq.n	64d2 <xQueueReceiveFromISR+0x8e>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
    64bc:	687b      	ldr	r3, [r7, #4]
    64be:	2201      	movs	r2, #1
    64c0:	601a      	str	r2, [r3, #0]
    64c2:	e006      	b.n	64d2 <xQueueReceiveFromISR+0x8e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
    64c4:	7ffb      	ldrb	r3, [r7, #31]
    64c6:	3301      	adds	r3, #1
    64c8:	b2db      	uxtb	r3, r3
    64ca:	b25a      	sxtb	r2, r3
    64cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    64ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
    64d2:	2301      	movs	r3, #1
    64d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    64d6:	e001      	b.n	64dc <xQueueReceiveFromISR+0x98>
		}
		else
		{
			xReturn = pdFAIL;
    64d8:	2300      	movs	r3, #0
    64da:	62fb      	str	r3, [r7, #44]	; 0x2c
    64dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    64de:	613b      	str	r3, [r7, #16]
	__asm volatile
    64e0:	693b      	ldr	r3, [r7, #16]
    64e2:	f383 8811 	msr	BASEPRI, r3
}
    64e6:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    64e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
    64ea:	4618      	mov	r0, r3
    64ec:	3730      	adds	r7, #48	; 0x30
    64ee:	46bd      	mov	sp, r7
    64f0:	bd80      	pop	{r7, pc}

000064f2 <xQueuePeekFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
{
    64f2:	b580      	push	{r7, lr}
    64f4:	b08a      	sub	sp, #40	; 0x28
    64f6:	af00      	add	r7, sp, #0
    64f8:	6078      	str	r0, [r7, #4]
    64fa:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    64fc:	687b      	ldr	r3, [r7, #4]
    64fe:	623b      	str	r3, [r7, #32]
	__asm volatile
    6500:	f3ef 8211 	mrs	r2, BASEPRI
    6504:	f04f 03bf 	mov.w	r3, #191	; 0xbf
    6508:	f383 8811 	msr	BASEPRI, r3
    650c:	f3bf 8f6f 	isb	sy
    6510:	f3bf 8f4f 	dsb	sy
    6514:	617a      	str	r2, [r7, #20]
    6516:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
    6518:	697b      	ldr	r3, [r7, #20]
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    651a:	61fb      	str	r3, [r7, #28]
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    651c:	6a3b      	ldr	r3, [r7, #32]
    651e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    6520:	2b00      	cmp	r3, #0
    6522:	d00c      	beq.n	653e <xQueuePeekFromISR+0x4c>
		{
			traceQUEUE_PEEK_FROM_ISR( pxQueue );

			/* Remember the read position so it can be reset as nothing is
			actually being removed from the queue. */
			pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    6524:	6a3b      	ldr	r3, [r7, #32]
    6526:	68db      	ldr	r3, [r3, #12]
    6528:	61bb      	str	r3, [r7, #24]
			prvCopyDataFromQueue( pxQueue, pvBuffer );
    652a:	6839      	ldr	r1, [r7, #0]
    652c:	6a38      	ldr	r0, [r7, #32]
    652e:	f000 f8d3 	bl	66d8 <prvCopyDataFromQueue>
			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    6532:	6a3b      	ldr	r3, [r7, #32]
    6534:	69ba      	ldr	r2, [r7, #24]
    6536:	60da      	str	r2, [r3, #12]

			xReturn = pdPASS;
    6538:	2301      	movs	r3, #1
    653a:	627b      	str	r3, [r7, #36]	; 0x24
    653c:	e001      	b.n	6542 <xQueuePeekFromISR+0x50>
		}
		else
		{
			xReturn = pdFAIL;
    653e:	2300      	movs	r3, #0
    6540:	627b      	str	r3, [r7, #36]	; 0x24
    6542:	69fb      	ldr	r3, [r7, #28]
    6544:	60fb      	str	r3, [r7, #12]
	__asm volatile
    6546:	68fb      	ldr	r3, [r7, #12]
    6548:	f383 8811 	msr	BASEPRI, r3
}
    654c:	bf00      	nop
			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    654e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    6550:	4618      	mov	r0, r3
    6552:	3728      	adds	r7, #40	; 0x28
    6554:	46bd      	mov	sp, r7
    6556:	bd80      	pop	{r7, pc}

00006558 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
    6558:	b580      	push	{r7, lr}
    655a:	b084      	sub	sp, #16
    655c:	af00      	add	r7, sp, #0
    655e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );

	taskENTER_CRITICAL();
    6560:	f002 fb36 	bl	8bd0 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
    6564:	687b      	ldr	r3, [r7, #4]
    6566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    6568:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
    656a:	f002 fb4b 	bl	8c04 <vPortExitCritical>

	return uxReturn;
    656e:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    6570:	4618      	mov	r0, r3
    6572:	3710      	adds	r7, #16
    6574:	46bd      	mov	sp, r7
    6576:	bd80      	pop	{r7, pc}

00006578 <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
    6578:	b580      	push	{r7, lr}
    657a:	b084      	sub	sp, #16
    657c:	af00      	add	r7, sp, #0
    657e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t *pxQueue;

	pxQueue = ( Queue_t * ) xQueue;
    6580:	687b      	ldr	r3, [r7, #4]
    6582:	60fb      	str	r3, [r7, #12]
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    6584:	f002 fb24 	bl	8bd0 <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
    6588:	68fb      	ldr	r3, [r7, #12]
    658a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    658c:	68fb      	ldr	r3, [r7, #12]
    658e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    6590:	1ad3      	subs	r3, r2, r3
    6592:	60bb      	str	r3, [r7, #8]
	}
	taskEXIT_CRITICAL();
    6594:	f002 fb36 	bl	8c04 <vPortExitCritical>

	return uxReturn;
    6598:	68bb      	ldr	r3, [r7, #8]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    659a:	4618      	mov	r0, r3
    659c:	3710      	adds	r7, #16
    659e:	46bd      	mov	sp, r7
    65a0:	bd80      	pop	{r7, pc}

000065a2 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
    65a2:	b480      	push	{r7}
    65a4:	b085      	sub	sp, #20
    65a6:	af00      	add	r7, sp, #0
    65a8:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
    65aa:	687b      	ldr	r3, [r7, #4]
    65ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    65ae:	60fb      	str	r3, [r7, #12]

	return uxReturn;
    65b0:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    65b2:	4618      	mov	r0, r3
    65b4:	3714      	adds	r7, #20
    65b6:	46bd      	mov	sp, r7
    65b8:	bc80      	pop	{r7}
    65ba:	4770      	bx	lr

000065bc <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
    65bc:	b580      	push	{r7, lr}
    65be:	b084      	sub	sp, #16
    65c0:	af00      	add	r7, sp, #0
    65c2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    65c4:	687b      	ldr	r3, [r7, #4]
    65c6:	60fb      	str	r3, [r7, #12]

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
    65c8:	68f8      	ldr	r0, [r7, #12]
    65ca:	f7f9 fde5 	bl	198 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
    65ce:	bf00      	nop
    65d0:	3710      	adds	r7, #16
    65d2:	46bd      	mov	sp, r7
    65d4:	bd80      	pop	{r7, pc}

000065d6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
    65d6:	b480      	push	{r7}
    65d8:	b085      	sub	sp, #20
    65da:	af00      	add	r7, sp, #0
    65dc:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
    65de:	687b      	ldr	r3, [r7, #4]
    65e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    65e2:	2b00      	cmp	r3, #0
    65e4:	d006      	beq.n	65f4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
    65e6:	687b      	ldr	r3, [r7, #4]
    65e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    65ea:	681b      	ldr	r3, [r3, #0]
    65ec:	f1c3 0305 	rsb	r3, r3, #5
    65f0:	60fb      	str	r3, [r7, #12]
    65f2:	e001      	b.n	65f8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
    65f4:	2300      	movs	r3, #0
    65f6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
    65f8:	68fb      	ldr	r3, [r7, #12]
	}
    65fa:	4618      	mov	r0, r3
    65fc:	3714      	adds	r7, #20
    65fe:	46bd      	mov	sp, r7
    6600:	bc80      	pop	{r7}
    6602:	4770      	bx	lr

00006604 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
    6604:	b580      	push	{r7, lr}
    6606:	b086      	sub	sp, #24
    6608:	af00      	add	r7, sp, #0
    660a:	60f8      	str	r0, [r7, #12]
    660c:	60b9      	str	r1, [r7, #8]
    660e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
    6610:	2300      	movs	r3, #0
    6612:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    6614:	68fb      	ldr	r3, [r7, #12]
    6616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    6618:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    661a:	68fb      	ldr	r3, [r7, #12]
    661c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    661e:	2b00      	cmp	r3, #0
    6620:	d10d      	bne.n	663e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    6622:	68fb      	ldr	r3, [r7, #12]
    6624:	681b      	ldr	r3, [r3, #0]
    6626:	2b00      	cmp	r3, #0
    6628:	d14d      	bne.n	66c6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    662a:	68fb      	ldr	r3, [r7, #12]
    662c:	685b      	ldr	r3, [r3, #4]
    662e:	4618      	mov	r0, r3
    6630:	f001 fa30 	bl	7a94 <xTaskPriorityDisinherit>
    6634:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
    6636:	68fb      	ldr	r3, [r7, #12]
    6638:	2200      	movs	r2, #0
    663a:	605a      	str	r2, [r3, #4]
    663c:	e043      	b.n	66c6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
    663e:	687b      	ldr	r3, [r7, #4]
    6640:	2b00      	cmp	r3, #0
    6642:	d119      	bne.n	6678 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
    6644:	68fb      	ldr	r3, [r7, #12]
    6646:	6898      	ldr	r0, [r3, #8]
    6648:	68fb      	ldr	r3, [r7, #12]
    664a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    664c:	461a      	mov	r2, r3
    664e:	68b9      	ldr	r1, [r7, #8]
    6650:	f002 fb58 	bl	8d04 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    6654:	68fb      	ldr	r3, [r7, #12]
    6656:	689a      	ldr	r2, [r3, #8]
    6658:	68fb      	ldr	r3, [r7, #12]
    665a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    665c:	441a      	add	r2, r3
    665e:	68fb      	ldr	r3, [r7, #12]
    6660:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    6662:	68fb      	ldr	r3, [r7, #12]
    6664:	689a      	ldr	r2, [r3, #8]
    6666:	68fb      	ldr	r3, [r7, #12]
    6668:	685b      	ldr	r3, [r3, #4]
    666a:	429a      	cmp	r2, r3
    666c:	d32b      	bcc.n	66c6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    666e:	68fb      	ldr	r3, [r7, #12]
    6670:	681a      	ldr	r2, [r3, #0]
    6672:	68fb      	ldr	r3, [r7, #12]
    6674:	609a      	str	r2, [r3, #8]
    6676:	e026      	b.n	66c6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    6678:	68fb      	ldr	r3, [r7, #12]
    667a:	68d8      	ldr	r0, [r3, #12]
    667c:	68fb      	ldr	r3, [r7, #12]
    667e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    6680:	461a      	mov	r2, r3
    6682:	68b9      	ldr	r1, [r7, #8]
    6684:	f002 fb3e 	bl	8d04 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    6688:	68fb      	ldr	r3, [r7, #12]
    668a:	68da      	ldr	r2, [r3, #12]
    668c:	68fb      	ldr	r3, [r7, #12]
    668e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    6690:	425b      	negs	r3, r3
    6692:	441a      	add	r2, r3
    6694:	68fb      	ldr	r3, [r7, #12]
    6696:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    6698:	68fb      	ldr	r3, [r7, #12]
    669a:	68da      	ldr	r2, [r3, #12]
    669c:	68fb      	ldr	r3, [r7, #12]
    669e:	681b      	ldr	r3, [r3, #0]
    66a0:	429a      	cmp	r2, r3
    66a2:	d207      	bcs.n	66b4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    66a4:	68fb      	ldr	r3, [r7, #12]
    66a6:	685a      	ldr	r2, [r3, #4]
    66a8:	68fb      	ldr	r3, [r7, #12]
    66aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    66ac:	425b      	negs	r3, r3
    66ae:	441a      	add	r2, r3
    66b0:	68fb      	ldr	r3, [r7, #12]
    66b2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
    66b4:	687b      	ldr	r3, [r7, #4]
    66b6:	2b02      	cmp	r3, #2
    66b8:	d105      	bne.n	66c6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    66ba:	693b      	ldr	r3, [r7, #16]
    66bc:	2b00      	cmp	r3, #0
    66be:	d002      	beq.n	66c6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
    66c0:	693b      	ldr	r3, [r7, #16]
    66c2:	3b01      	subs	r3, #1
    66c4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
    66c6:	693b      	ldr	r3, [r7, #16]
    66c8:	1c5a      	adds	r2, r3, #1
    66ca:	68fb      	ldr	r3, [r7, #12]
    66cc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
    66ce:	697b      	ldr	r3, [r7, #20]
}
    66d0:	4618      	mov	r0, r3
    66d2:	3718      	adds	r7, #24
    66d4:	46bd      	mov	sp, r7
    66d6:	bd80      	pop	{r7, pc}

000066d8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
    66d8:	b580      	push	{r7, lr}
    66da:	b082      	sub	sp, #8
    66dc:	af00      	add	r7, sp, #0
    66de:	6078      	str	r0, [r7, #4]
    66e0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    66e2:	687b      	ldr	r3, [r7, #4]
    66e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    66e6:	2b00      	cmp	r3, #0
    66e8:	d018      	beq.n	671c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    66ea:	687b      	ldr	r3, [r7, #4]
    66ec:	68da      	ldr	r2, [r3, #12]
    66ee:	687b      	ldr	r3, [r7, #4]
    66f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    66f2:	441a      	add	r2, r3
    66f4:	687b      	ldr	r3, [r7, #4]
    66f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    66f8:	687b      	ldr	r3, [r7, #4]
    66fa:	68da      	ldr	r2, [r3, #12]
    66fc:	687b      	ldr	r3, [r7, #4]
    66fe:	685b      	ldr	r3, [r3, #4]
    6700:	429a      	cmp	r2, r3
    6702:	d303      	bcc.n	670c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    6704:	687b      	ldr	r3, [r7, #4]
    6706:	681a      	ldr	r2, [r3, #0]
    6708:	687b      	ldr	r3, [r7, #4]
    670a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    670c:	687b      	ldr	r3, [r7, #4]
    670e:	68d9      	ldr	r1, [r3, #12]
    6710:	687b      	ldr	r3, [r7, #4]
    6712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    6714:	461a      	mov	r2, r3
    6716:	6838      	ldr	r0, [r7, #0]
    6718:	f002 faf4 	bl	8d04 <memcpy>
	}
}
    671c:	bf00      	nop
    671e:	3708      	adds	r7, #8
    6720:	46bd      	mov	sp, r7
    6722:	bd80      	pop	{r7, pc}

00006724 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
    6724:	b580      	push	{r7, lr}
    6726:	b084      	sub	sp, #16
    6728:	af00      	add	r7, sp, #0
    672a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    672c:	f002 fa50 	bl	8bd0 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
    6730:	687b      	ldr	r3, [r7, #4]
    6732:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
    6736:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
    6738:	e011      	b.n	675e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    673a:	687b      	ldr	r3, [r7, #4]
    673c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    673e:	2b00      	cmp	r3, #0
    6740:	d012      	beq.n	6768 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    6742:	687b      	ldr	r3, [r7, #4]
    6744:	3324      	adds	r3, #36	; 0x24
    6746:	4618      	mov	r0, r3
    6748:	f000 ff40 	bl	75cc <xTaskRemoveFromEventList>
    674c:	4603      	mov	r3, r0
    674e:	2b00      	cmp	r3, #0
    6750:	d001      	beq.n	6756 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
    6752:	f001 f845 	bl	77e0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
    6756:	7bfb      	ldrb	r3, [r7, #15]
    6758:	3b01      	subs	r3, #1
    675a:	b2db      	uxtb	r3, r3
    675c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
    675e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    6762:	2b00      	cmp	r3, #0
    6764:	dce9      	bgt.n	673a <prvUnlockQueue+0x16>
    6766:	e000      	b.n	676a <prvUnlockQueue+0x46>
					break;
    6768:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
    676a:	687b      	ldr	r3, [r7, #4]
    676c:	22ff      	movs	r2, #255	; 0xff
    676e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
    6772:	f002 fa47 	bl	8c04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    6776:	f002 fa2b 	bl	8bd0 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
    677a:	687b      	ldr	r3, [r7, #4]
    677c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    6780:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
    6782:	e011      	b.n	67a8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    6784:	687b      	ldr	r3, [r7, #4]
    6786:	691b      	ldr	r3, [r3, #16]
    6788:	2b00      	cmp	r3, #0
    678a:	d012      	beq.n	67b2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    678c:	687b      	ldr	r3, [r7, #4]
    678e:	3310      	adds	r3, #16
    6790:	4618      	mov	r0, r3
    6792:	f000 ff1b 	bl	75cc <xTaskRemoveFromEventList>
    6796:	4603      	mov	r3, r0
    6798:	2b00      	cmp	r3, #0
    679a:	d001      	beq.n	67a0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
    679c:	f001 f820 	bl	77e0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
    67a0:	7bbb      	ldrb	r3, [r7, #14]
    67a2:	3b01      	subs	r3, #1
    67a4:	b2db      	uxtb	r3, r3
    67a6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
    67a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
    67ac:	2b00      	cmp	r3, #0
    67ae:	dce9      	bgt.n	6784 <prvUnlockQueue+0x60>
    67b0:	e000      	b.n	67b4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
    67b2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
    67b4:	687b      	ldr	r3, [r7, #4]
    67b6:	22ff      	movs	r2, #255	; 0xff
    67b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
    67bc:	f002 fa22 	bl	8c04 <vPortExitCritical>
}
    67c0:	bf00      	nop
    67c2:	3710      	adds	r7, #16
    67c4:	46bd      	mov	sp, r7
    67c6:	bd80      	pop	{r7, pc}

000067c8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
    67c8:	b580      	push	{r7, lr}
    67ca:	b084      	sub	sp, #16
    67cc:	af00      	add	r7, sp, #0
    67ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
    67d0:	f002 f9fe 	bl	8bd0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    67d4:	687b      	ldr	r3, [r7, #4]
    67d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    67d8:	2b00      	cmp	r3, #0
    67da:	d102      	bne.n	67e2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
    67dc:	2301      	movs	r3, #1
    67de:	60fb      	str	r3, [r7, #12]
    67e0:	e001      	b.n	67e6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
    67e2:	2300      	movs	r3, #0
    67e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    67e6:	f002 fa0d 	bl	8c04 <vPortExitCritical>

	return xReturn;
    67ea:	68fb      	ldr	r3, [r7, #12]
}
    67ec:	4618      	mov	r0, r3
    67ee:	3710      	adds	r7, #16
    67f0:	46bd      	mov	sp, r7
    67f2:	bd80      	pop	{r7, pc}

000067f4 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
{
    67f4:	b480      	push	{r7}
    67f6:	b085      	sub	sp, #20
    67f8:	af00      	add	r7, sp, #0
    67fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	configASSERT( xQueue );
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
    67fc:	687b      	ldr	r3, [r7, #4]
    67fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    6800:	2b00      	cmp	r3, #0
    6802:	d102      	bne.n	680a <xQueueIsQueueEmptyFromISR+0x16>
	{
		xReturn = pdTRUE;
    6804:	2301      	movs	r3, #1
    6806:	60fb      	str	r3, [r7, #12]
    6808:	e001      	b.n	680e <xQueueIsQueueEmptyFromISR+0x1a>
	}
	else
	{
		xReturn = pdFALSE;
    680a:	2300      	movs	r3, #0
    680c:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    680e:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    6810:	4618      	mov	r0, r3
    6812:	3714      	adds	r7, #20
    6814:	46bd      	mov	sp, r7
    6816:	bc80      	pop	{r7}
    6818:	4770      	bx	lr

0000681a <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
    681a:	b580      	push	{r7, lr}
    681c:	b084      	sub	sp, #16
    681e:	af00      	add	r7, sp, #0
    6820:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
    6822:	f002 f9d5 	bl	8bd0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    6826:	687b      	ldr	r3, [r7, #4]
    6828:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    682a:	687b      	ldr	r3, [r7, #4]
    682c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    682e:	429a      	cmp	r2, r3
    6830:	d102      	bne.n	6838 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
    6832:	2301      	movs	r3, #1
    6834:	60fb      	str	r3, [r7, #12]
    6836:	e001      	b.n	683c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
    6838:	2300      	movs	r3, #0
    683a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    683c:	f002 f9e2 	bl	8c04 <vPortExitCritical>

	return xReturn;
    6840:	68fb      	ldr	r3, [r7, #12]
}
    6842:	4618      	mov	r0, r3
    6844:	3710      	adds	r7, #16
    6846:	46bd      	mov	sp, r7
    6848:	bd80      	pop	{r7, pc}

0000684a <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
    684a:	b480      	push	{r7}
    684c:	b085      	sub	sp, #20
    684e:	af00      	add	r7, sp, #0
    6850:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	configASSERT( xQueue );
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( ( Queue_t * ) xQueue )->uxLength )
    6852:	687b      	ldr	r3, [r7, #4]
    6854:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    6856:	687b      	ldr	r3, [r7, #4]
    6858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    685a:	429a      	cmp	r2, r3
    685c:	d102      	bne.n	6864 <xQueueIsQueueFullFromISR+0x1a>
	{
		xReturn = pdTRUE;
    685e:	2301      	movs	r3, #1
    6860:	60fb      	str	r3, [r7, #12]
    6862:	e001      	b.n	6868 <xQueueIsQueueFullFromISR+0x1e>
	}
	else
	{
		xReturn = pdFALSE;
    6864:	2300      	movs	r3, #0
    6866:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    6868:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    686a:	4618      	mov	r0, r3
    686c:	3714      	adds	r7, #20
    686e:	46bd      	mov	sp, r7
    6870:	bc80      	pop	{r7}
    6872:	4770      	bx	lr

00006874 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
    6874:	b580      	push	{r7, lr}
    6876:	b08c      	sub	sp, #48	; 0x30
    6878:	af04      	add	r7, sp, #16
    687a:	60f8      	str	r0, [r7, #12]
    687c:	60b9      	str	r1, [r7, #8]
    687e:	603b      	str	r3, [r7, #0]
    6880:	4613      	mov	r3, r2
    6882:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    6884:	88fb      	ldrh	r3, [r7, #6]
    6886:	009b      	lsls	r3, r3, #2
    6888:	4618      	mov	r0, r3
    688a:	f7f9 fc3f 	bl	10c <pvPortMalloc>
    688e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
    6890:	697b      	ldr	r3, [r7, #20]
    6892:	2b00      	cmp	r3, #0
    6894:	d00e      	beq.n	68b4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
    6896:	2054      	movs	r0, #84	; 0x54
    6898:	f7f9 fc38 	bl	10c <pvPortMalloc>
    689c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
    689e:	69fb      	ldr	r3, [r7, #28]
    68a0:	2b00      	cmp	r3, #0
    68a2:	d003      	beq.n	68ac <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
    68a4:	69fb      	ldr	r3, [r7, #28]
    68a6:	697a      	ldr	r2, [r7, #20]
    68a8:	631a      	str	r2, [r3, #48]	; 0x30
    68aa:	e005      	b.n	68b8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
    68ac:	6978      	ldr	r0, [r7, #20]
    68ae:	f7f9 fc73 	bl	198 <vPortFree>
    68b2:	e001      	b.n	68b8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
    68b4:	2300      	movs	r3, #0
    68b6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
    68b8:	69fb      	ldr	r3, [r7, #28]
    68ba:	2b00      	cmp	r3, #0
    68bc:	d013      	beq.n	68e6 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
    68be:	88fa      	ldrh	r2, [r7, #6]
    68c0:	2300      	movs	r3, #0
    68c2:	9303      	str	r3, [sp, #12]
    68c4:	69fb      	ldr	r3, [r7, #28]
    68c6:	9302      	str	r3, [sp, #8]
    68c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    68ca:	9301      	str	r3, [sp, #4]
    68cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    68ce:	9300      	str	r3, [sp, #0]
    68d0:	683b      	ldr	r3, [r7, #0]
    68d2:	68b9      	ldr	r1, [r7, #8]
    68d4:	68f8      	ldr	r0, [r7, #12]
    68d6:	f000 f80e 	bl	68f6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
    68da:	69f8      	ldr	r0, [r7, #28]
    68dc:	f000 f87a 	bl	69d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
    68e0:	2301      	movs	r3, #1
    68e2:	61bb      	str	r3, [r7, #24]
    68e4:	e002      	b.n	68ec <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    68e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    68ea:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
    68ec:	69bb      	ldr	r3, [r7, #24]
	}
    68ee:	4618      	mov	r0, r3
    68f0:	3720      	adds	r7, #32
    68f2:	46bd      	mov	sp, r7
    68f4:	bd80      	pop	{r7, pc}

000068f6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
    68f6:	b580      	push	{r7, lr}
    68f8:	b086      	sub	sp, #24
    68fa:	af00      	add	r7, sp, #0
    68fc:	60f8      	str	r0, [r7, #12]
    68fe:	60b9      	str	r1, [r7, #8]
    6900:	607a      	str	r2, [r7, #4]
    6902:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    6904:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6906:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    6908:	687b      	ldr	r3, [r7, #4]
    690a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    690e:	3b01      	subs	r3, #1
    6910:	009b      	lsls	r3, r3, #2
    6912:	4413      	add	r3, r2
    6914:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
    6916:	693b      	ldr	r3, [r7, #16]
    6918:	f023 0307 	bic.w	r3, r3, #7
    691c:	613b      	str	r3, [r7, #16]
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    691e:	2300      	movs	r3, #0
    6920:	617b      	str	r3, [r7, #20]
    6922:	e012      	b.n	694a <prvInitialiseNewTask+0x54>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    6924:	68ba      	ldr	r2, [r7, #8]
    6926:	697b      	ldr	r3, [r7, #20]
    6928:	4413      	add	r3, r2
    692a:	7819      	ldrb	r1, [r3, #0]
    692c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    692e:	697b      	ldr	r3, [r7, #20]
    6930:	4413      	add	r3, r2
    6932:	3334      	adds	r3, #52	; 0x34
    6934:	460a      	mov	r2, r1
    6936:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
    6938:	68ba      	ldr	r2, [r7, #8]
    693a:	697b      	ldr	r3, [r7, #20]
    693c:	4413      	add	r3, r2
    693e:	781b      	ldrb	r3, [r3, #0]
    6940:	2b00      	cmp	r3, #0
    6942:	d006      	beq.n	6952 <prvInitialiseNewTask+0x5c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    6944:	697b      	ldr	r3, [r7, #20]
    6946:	3301      	adds	r3, #1
    6948:	617b      	str	r3, [r7, #20]
    694a:	697b      	ldr	r3, [r7, #20]
    694c:	2b0f      	cmp	r3, #15
    694e:	d9e9      	bls.n	6924 <prvInitialiseNewTask+0x2e>
    6950:	e000      	b.n	6954 <prvInitialiseNewTask+0x5e>
		{
			break;
    6952:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    6954:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6956:	2200      	movs	r2, #0
    6958:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
    695c:	6a3b      	ldr	r3, [r7, #32]
    695e:	2b04      	cmp	r3, #4
    6960:	d901      	bls.n	6966 <prvInitialiseNewTask+0x70>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
    6962:	2304      	movs	r3, #4
    6964:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
    6966:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6968:	6a3a      	ldr	r2, [r7, #32]
    696a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
    696c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    696e:	6a3a      	ldr	r2, [r7, #32]
    6970:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
    6972:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6974:	2200      	movs	r2, #0
    6976:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    6978:	6abb      	ldr	r3, [r7, #40]	; 0x28
    697a:	3304      	adds	r3, #4
    697c:	4618      	mov	r0, r3
    697e:	f7ff f892 	bl	5aa6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
    6982:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6984:	3318      	adds	r3, #24
    6986:	4618      	mov	r0, r3
    6988:	f7ff f88d 	bl	5aa6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
    698c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    698e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    6990:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    6992:	6a3b      	ldr	r3, [r7, #32]
    6994:	f1c3 0205 	rsb	r2, r3, #5
    6998:	6abb      	ldr	r3, [r7, #40]	; 0x28
    699a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
    699c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    699e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    69a0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
    69a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    69a4:	2200      	movs	r2, #0
    69a6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    69a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    69aa:	2200      	movs	r2, #0
    69ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    69b0:	683a      	ldr	r2, [r7, #0]
    69b2:	68f9      	ldr	r1, [r7, #12]
    69b4:	6938      	ldr	r0, [r7, #16]
    69b6:	f002 f87b 	bl	8ab0 <pxPortInitialiseStack>
    69ba:	4602      	mov	r2, r0
    69bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    69be:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
    69c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    69c2:	2b00      	cmp	r3, #0
    69c4:	d002      	beq.n	69cc <prvInitialiseNewTask+0xd6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    69c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    69c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
    69ca:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    69cc:	bf00      	nop
    69ce:	3718      	adds	r7, #24
    69d0:	46bd      	mov	sp, r7
    69d2:	bd80      	pop	{r7, pc}

000069d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
    69d4:	b580      	push	{r7, lr}
    69d6:	b082      	sub	sp, #8
    69d8:	af00      	add	r7, sp, #0
    69da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
    69dc:	f002 f8f8 	bl	8bd0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
    69e0:	4b2a      	ldr	r3, [pc, #168]	; (6a8c <prvAddNewTaskToReadyList+0xb8>)
    69e2:	681b      	ldr	r3, [r3, #0]
    69e4:	3301      	adds	r3, #1
    69e6:	4a29      	ldr	r2, [pc, #164]	; (6a8c <prvAddNewTaskToReadyList+0xb8>)
    69e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
    69ea:	4b29      	ldr	r3, [pc, #164]	; (6a90 <prvAddNewTaskToReadyList+0xbc>)
    69ec:	681b      	ldr	r3, [r3, #0]
    69ee:	2b00      	cmp	r3, #0
    69f0:	d109      	bne.n	6a06 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
    69f2:	4a27      	ldr	r2, [pc, #156]	; (6a90 <prvAddNewTaskToReadyList+0xbc>)
    69f4:	687b      	ldr	r3, [r7, #4]
    69f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    69f8:	4b24      	ldr	r3, [pc, #144]	; (6a8c <prvAddNewTaskToReadyList+0xb8>)
    69fa:	681b      	ldr	r3, [r3, #0]
    69fc:	2b01      	cmp	r3, #1
    69fe:	d110      	bne.n	6a22 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
    6a00:	f000 ff12 	bl	7828 <prvInitialiseTaskLists>
    6a04:	e00d      	b.n	6a22 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
    6a06:	4b23      	ldr	r3, [pc, #140]	; (6a94 <prvAddNewTaskToReadyList+0xc0>)
    6a08:	681b      	ldr	r3, [r3, #0]
    6a0a:	2b00      	cmp	r3, #0
    6a0c:	d109      	bne.n	6a22 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    6a0e:	4b20      	ldr	r3, [pc, #128]	; (6a90 <prvAddNewTaskToReadyList+0xbc>)
    6a10:	681b      	ldr	r3, [r3, #0]
    6a12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    6a14:	687b      	ldr	r3, [r7, #4]
    6a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    6a18:	429a      	cmp	r2, r3
    6a1a:	d802      	bhi.n	6a22 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
    6a1c:	4a1c      	ldr	r2, [pc, #112]	; (6a90 <prvAddNewTaskToReadyList+0xbc>)
    6a1e:	687b      	ldr	r3, [r7, #4]
    6a20:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
    6a22:	4b1d      	ldr	r3, [pc, #116]	; (6a98 <prvAddNewTaskToReadyList+0xc4>)
    6a24:	681b      	ldr	r3, [r3, #0]
    6a26:	3301      	adds	r3, #1
    6a28:	4a1b      	ldr	r2, [pc, #108]	; (6a98 <prvAddNewTaskToReadyList+0xc4>)
    6a2a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
    6a2c:	687b      	ldr	r3, [r7, #4]
    6a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    6a30:	2201      	movs	r2, #1
    6a32:	409a      	lsls	r2, r3
    6a34:	4b19      	ldr	r3, [pc, #100]	; (6a9c <prvAddNewTaskToReadyList+0xc8>)
    6a36:	681b      	ldr	r3, [r3, #0]
    6a38:	4313      	orrs	r3, r2
    6a3a:	4a18      	ldr	r2, [pc, #96]	; (6a9c <prvAddNewTaskToReadyList+0xc8>)
    6a3c:	6013      	str	r3, [r2, #0]
    6a3e:	687b      	ldr	r3, [r7, #4]
    6a40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    6a42:	4613      	mov	r3, r2
    6a44:	009b      	lsls	r3, r3, #2
    6a46:	4413      	add	r3, r2
    6a48:	009b      	lsls	r3, r3, #2
    6a4a:	4a15      	ldr	r2, [pc, #84]	; (6aa0 <prvAddNewTaskToReadyList+0xcc>)
    6a4c:	441a      	add	r2, r3
    6a4e:	687b      	ldr	r3, [r7, #4]
    6a50:	3304      	adds	r3, #4
    6a52:	4619      	mov	r1, r3
    6a54:	4610      	mov	r0, r2
    6a56:	f7ff f832 	bl	5abe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
    6a5a:	f002 f8d3 	bl	8c04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
    6a5e:	4b0d      	ldr	r3, [pc, #52]	; (6a94 <prvAddNewTaskToReadyList+0xc0>)
    6a60:	681b      	ldr	r3, [r3, #0]
    6a62:	2b00      	cmp	r3, #0
    6a64:	d00e      	beq.n	6a84 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
    6a66:	4b0a      	ldr	r3, [pc, #40]	; (6a90 <prvAddNewTaskToReadyList+0xbc>)
    6a68:	681b      	ldr	r3, [r3, #0]
    6a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    6a6c:	687b      	ldr	r3, [r7, #4]
    6a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    6a70:	429a      	cmp	r2, r3
    6a72:	d207      	bcs.n	6a84 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
    6a74:	4b0b      	ldr	r3, [pc, #44]	; (6aa4 <prvAddNewTaskToReadyList+0xd0>)
    6a76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    6a7a:	601a      	str	r2, [r3, #0]
    6a7c:	f3bf 8f4f 	dsb	sy
    6a80:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    6a84:	bf00      	nop
    6a86:	3708      	adds	r7, #8
    6a88:	46bd      	mov	sp, r7
    6a8a:	bd80      	pop	{r7, pc}
    6a8c:	20004510 	.word	0x20004510
    6a90:	20004438 	.word	0x20004438
    6a94:	2000451c 	.word	0x2000451c
    6a98:	2000452c 	.word	0x2000452c
    6a9c:	20004518 	.word	0x20004518
    6aa0:	2000443c 	.word	0x2000443c
    6aa4:	e000ed04 	.word	0xe000ed04

00006aa8 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
    6aa8:	b580      	push	{r7, lr}
    6aaa:	b084      	sub	sp, #16
    6aac:	af00      	add	r7, sp, #0
    6aae:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
    6ab0:	f002 f88e 	bl	8bd0 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
    6ab4:	687b      	ldr	r3, [r7, #4]
    6ab6:	2b00      	cmp	r3, #0
    6ab8:	d102      	bne.n	6ac0 <vTaskDelete+0x18>
    6aba:	4b31      	ldr	r3, [pc, #196]	; (6b80 <vTaskDelete+0xd8>)
    6abc:	681b      	ldr	r3, [r3, #0]
    6abe:	e000      	b.n	6ac2 <vTaskDelete+0x1a>
    6ac0:	687b      	ldr	r3, [r7, #4]
    6ac2:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    6ac4:	68fb      	ldr	r3, [r7, #12]
    6ac6:	3304      	adds	r3, #4
    6ac8:	4618      	mov	r0, r3
    6aca:	f7ff f853 	bl	5b74 <uxListRemove>
    6ace:	4603      	mov	r3, r0
    6ad0:	2b00      	cmp	r3, #0
    6ad2:	d115      	bne.n	6b00 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
    6ad4:	68fb      	ldr	r3, [r7, #12]
    6ad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    6ad8:	492a      	ldr	r1, [pc, #168]	; (6b84 <vTaskDelete+0xdc>)
    6ada:	4613      	mov	r3, r2
    6adc:	009b      	lsls	r3, r3, #2
    6ade:	4413      	add	r3, r2
    6ae0:	009b      	lsls	r3, r3, #2
    6ae2:	440b      	add	r3, r1
    6ae4:	681b      	ldr	r3, [r3, #0]
    6ae6:	2b00      	cmp	r3, #0
    6ae8:	d10a      	bne.n	6b00 <vTaskDelete+0x58>
    6aea:	68fb      	ldr	r3, [r7, #12]
    6aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    6aee:	2201      	movs	r2, #1
    6af0:	fa02 f303 	lsl.w	r3, r2, r3
    6af4:	43da      	mvns	r2, r3
    6af6:	4b24      	ldr	r3, [pc, #144]	; (6b88 <vTaskDelete+0xe0>)
    6af8:	681b      	ldr	r3, [r3, #0]
    6afa:	4013      	ands	r3, r2
    6afc:	4a22      	ldr	r2, [pc, #136]	; (6b88 <vTaskDelete+0xe0>)
    6afe:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    6b00:	68fb      	ldr	r3, [r7, #12]
    6b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6b04:	2b00      	cmp	r3, #0
    6b06:	d004      	beq.n	6b12 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    6b08:	68fb      	ldr	r3, [r7, #12]
    6b0a:	3318      	adds	r3, #24
    6b0c:	4618      	mov	r0, r3
    6b0e:	f7ff f831 	bl	5b74 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
    6b12:	4b1e      	ldr	r3, [pc, #120]	; (6b8c <vTaskDelete+0xe4>)
    6b14:	681b      	ldr	r3, [r3, #0]
    6b16:	3301      	adds	r3, #1
    6b18:	4a1c      	ldr	r2, [pc, #112]	; (6b8c <vTaskDelete+0xe4>)
    6b1a:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
    6b1c:	4b18      	ldr	r3, [pc, #96]	; (6b80 <vTaskDelete+0xd8>)
    6b1e:	681b      	ldr	r3, [r3, #0]
    6b20:	68fa      	ldr	r2, [r7, #12]
    6b22:	429a      	cmp	r2, r3
    6b24:	d10b      	bne.n	6b3e <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
    6b26:	68fb      	ldr	r3, [r7, #12]
    6b28:	3304      	adds	r3, #4
    6b2a:	4619      	mov	r1, r3
    6b2c:	4818      	ldr	r0, [pc, #96]	; (6b90 <vTaskDelete+0xe8>)
    6b2e:	f7fe ffc6 	bl	5abe <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
    6b32:	4b18      	ldr	r3, [pc, #96]	; (6b94 <vTaskDelete+0xec>)
    6b34:	681b      	ldr	r3, [r3, #0]
    6b36:	3301      	adds	r3, #1
    6b38:	4a16      	ldr	r2, [pc, #88]	; (6b94 <vTaskDelete+0xec>)
    6b3a:	6013      	str	r3, [r2, #0]
    6b3c:	e009      	b.n	6b52 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
    6b3e:	4b16      	ldr	r3, [pc, #88]	; (6b98 <vTaskDelete+0xf0>)
    6b40:	681b      	ldr	r3, [r3, #0]
    6b42:	3b01      	subs	r3, #1
    6b44:	4a14      	ldr	r2, [pc, #80]	; (6b98 <vTaskDelete+0xf0>)
    6b46:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
    6b48:	68f8      	ldr	r0, [r7, #12]
    6b4a:	f000 fedb 	bl	7904 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
    6b4e:	f000 fee9 	bl	7924 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    6b52:	f002 f857 	bl	8c04 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
    6b56:	4b11      	ldr	r3, [pc, #68]	; (6b9c <vTaskDelete+0xf4>)
    6b58:	681b      	ldr	r3, [r3, #0]
    6b5a:	2b00      	cmp	r3, #0
    6b5c:	d00c      	beq.n	6b78 <vTaskDelete+0xd0>
		{
			if( pxTCB == pxCurrentTCB )
    6b5e:	4b08      	ldr	r3, [pc, #32]	; (6b80 <vTaskDelete+0xd8>)
    6b60:	681b      	ldr	r3, [r3, #0]
    6b62:	68fa      	ldr	r2, [r7, #12]
    6b64:	429a      	cmp	r2, r3
    6b66:	d107      	bne.n	6b78 <vTaskDelete+0xd0>
			{
				configASSERT( uxSchedulerSuspended == 0 );
				portYIELD_WITHIN_API();
    6b68:	4b0d      	ldr	r3, [pc, #52]	; (6ba0 <vTaskDelete+0xf8>)
    6b6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    6b6e:	601a      	str	r2, [r3, #0]
    6b70:	f3bf 8f4f 	dsb	sy
    6b74:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
    6b78:	bf00      	nop
    6b7a:	3710      	adds	r7, #16
    6b7c:	46bd      	mov	sp, r7
    6b7e:	bd80      	pop	{r7, pc}
    6b80:	20004438 	.word	0x20004438
    6b84:	2000443c 	.word	0x2000443c
    6b88:	20004518 	.word	0x20004518
    6b8c:	2000452c 	.word	0x2000452c
    6b90:	200044e4 	.word	0x200044e4
    6b94:	200044f8 	.word	0x200044f8
    6b98:	20004510 	.word	0x20004510
    6b9c:	2000451c 	.word	0x2000451c
    6ba0:	e000ed04 	.word	0xe000ed04

00006ba4 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
    6ba4:	b580      	push	{r7, lr}
    6ba6:	b086      	sub	sp, #24
    6ba8:	af00      	add	r7, sp, #0
    6baa:	6078      	str	r0, [r7, #4]
    6bac:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
    6bae:	2300      	movs	r3, #0
    6bb0:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );
		configASSERT( uxSchedulerSuspended == 0 );

		vTaskSuspendAll();
    6bb2:	f000 fb01 	bl	71b8 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
    6bb6:	4b21      	ldr	r3, [pc, #132]	; (6c3c <vTaskDelayUntil+0x98>)
    6bb8:	681b      	ldr	r3, [r3, #0]
    6bba:	613b      	str	r3, [r7, #16]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    6bbc:	687b      	ldr	r3, [r7, #4]
    6bbe:	681b      	ldr	r3, [r3, #0]
    6bc0:	683a      	ldr	r2, [r7, #0]
    6bc2:	4413      	add	r3, r2
    6bc4:	60fb      	str	r3, [r7, #12]

			if( xConstTickCount < *pxPreviousWakeTime )
    6bc6:	687b      	ldr	r3, [r7, #4]
    6bc8:	681b      	ldr	r3, [r3, #0]
    6bca:	693a      	ldr	r2, [r7, #16]
    6bcc:	429a      	cmp	r2, r3
    6bce:	d20b      	bcs.n	6be8 <vTaskDelayUntil+0x44>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
    6bd0:	687b      	ldr	r3, [r7, #4]
    6bd2:	681b      	ldr	r3, [r3, #0]
    6bd4:	68fa      	ldr	r2, [r7, #12]
    6bd6:	429a      	cmp	r2, r3
    6bd8:	d211      	bcs.n	6bfe <vTaskDelayUntil+0x5a>
    6bda:	68fa      	ldr	r2, [r7, #12]
    6bdc:	693b      	ldr	r3, [r7, #16]
    6bde:	429a      	cmp	r2, r3
    6be0:	d90d      	bls.n	6bfe <vTaskDelayUntil+0x5a>
				{
					xShouldDelay = pdTRUE;
    6be2:	2301      	movs	r3, #1
    6be4:	617b      	str	r3, [r7, #20]
    6be6:	e00a      	b.n	6bfe <vTaskDelayUntil+0x5a>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
    6be8:	687b      	ldr	r3, [r7, #4]
    6bea:	681b      	ldr	r3, [r3, #0]
    6bec:	68fa      	ldr	r2, [r7, #12]
    6bee:	429a      	cmp	r2, r3
    6bf0:	d303      	bcc.n	6bfa <vTaskDelayUntil+0x56>
    6bf2:	68fa      	ldr	r2, [r7, #12]
    6bf4:	693b      	ldr	r3, [r7, #16]
    6bf6:	429a      	cmp	r2, r3
    6bf8:	d901      	bls.n	6bfe <vTaskDelayUntil+0x5a>
				{
					xShouldDelay = pdTRUE;
    6bfa:	2301      	movs	r3, #1
    6bfc:	617b      	str	r3, [r7, #20]
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    6bfe:	687b      	ldr	r3, [r7, #4]
    6c00:	68fa      	ldr	r2, [r7, #12]
    6c02:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
    6c04:	697b      	ldr	r3, [r7, #20]
    6c06:	2b00      	cmp	r3, #0
    6c08:	d006      	beq.n	6c18 <vTaskDelayUntil+0x74>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
    6c0a:	68fa      	ldr	r2, [r7, #12]
    6c0c:	693b      	ldr	r3, [r7, #16]
    6c0e:	1ad3      	subs	r3, r2, r3
    6c10:	2100      	movs	r1, #0
    6c12:	4618      	mov	r0, r3
    6c14:	f001 fab8 	bl	8188 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    6c18:	f000 fadc 	bl	71d4 <xTaskResumeAll>
    6c1c:	60b8      	str	r0, [r7, #8]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    6c1e:	68bb      	ldr	r3, [r7, #8]
    6c20:	2b00      	cmp	r3, #0
    6c22:	d107      	bne.n	6c34 <vTaskDelayUntil+0x90>
		{
			portYIELD_WITHIN_API();
    6c24:	4b06      	ldr	r3, [pc, #24]	; (6c40 <vTaskDelayUntil+0x9c>)
    6c26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    6c2a:	601a      	str	r2, [r3, #0]
    6c2c:	f3bf 8f4f 	dsb	sy
    6c30:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    6c34:	bf00      	nop
    6c36:	3718      	adds	r7, #24
    6c38:	46bd      	mov	sp, r7
    6c3a:	bd80      	pop	{r7, pc}
    6c3c:	20004514 	.word	0x20004514
    6c40:	e000ed04 	.word	0xe000ed04

00006c44 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
    6c44:	b580      	push	{r7, lr}
    6c46:	b084      	sub	sp, #16
    6c48:	af00      	add	r7, sp, #0
    6c4a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
    6c4c:	2300      	movs	r3, #0
    6c4e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
    6c50:	687b      	ldr	r3, [r7, #4]
    6c52:	2b00      	cmp	r3, #0
    6c54:	d008      	beq.n	6c68 <vTaskDelay+0x24>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
    6c56:	f000 faaf 	bl	71b8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
    6c5a:	2100      	movs	r1, #0
    6c5c:	6878      	ldr	r0, [r7, #4]
    6c5e:	f001 fa93 	bl	8188 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    6c62:	f000 fab7 	bl	71d4 <xTaskResumeAll>
    6c66:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    6c68:	68fb      	ldr	r3, [r7, #12]
    6c6a:	2b00      	cmp	r3, #0
    6c6c:	d107      	bne.n	6c7e <vTaskDelay+0x3a>
		{
			portYIELD_WITHIN_API();
    6c6e:	4b06      	ldr	r3, [pc, #24]	; (6c88 <vTaskDelay+0x44>)
    6c70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    6c74:	601a      	str	r2, [r3, #0]
    6c76:	f3bf 8f4f 	dsb	sy
    6c7a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    6c7e:	bf00      	nop
    6c80:	3710      	adds	r7, #16
    6c82:	46bd      	mov	sp, r7
    6c84:	bd80      	pop	{r7, pc}
    6c86:	bf00      	nop
    6c88:	e000ed04 	.word	0xe000ed04

00006c8c <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
	{
    6c8c:	b580      	push	{r7, lr}
    6c8e:	b084      	sub	sp, #16
    6c90:	af00      	add	r7, sp, #0
    6c92:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	UBaseType_t uxReturn;

		taskENTER_CRITICAL();
    6c94:	f001 ff9c 	bl	8bd0 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the that
			called uxTaskPriorityGet() that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
    6c98:	687b      	ldr	r3, [r7, #4]
    6c9a:	2b00      	cmp	r3, #0
    6c9c:	d102      	bne.n	6ca4 <uxTaskPriorityGet+0x18>
    6c9e:	4b07      	ldr	r3, [pc, #28]	; (6cbc <uxTaskPriorityGet+0x30>)
    6ca0:	681b      	ldr	r3, [r3, #0]
    6ca2:	e000      	b.n	6ca6 <uxTaskPriorityGet+0x1a>
    6ca4:	687b      	ldr	r3, [r7, #4]
    6ca6:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
    6ca8:	68fb      	ldr	r3, [r7, #12]
    6caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    6cac:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
    6cae:	f001 ffa9 	bl	8c04 <vPortExitCritical>

		return uxReturn;
    6cb2:	68bb      	ldr	r3, [r7, #8]
	}
    6cb4:	4618      	mov	r0, r3
    6cb6:	3710      	adds	r7, #16
    6cb8:	46bd      	mov	sp, r7
    6cba:	bd80      	pop	{r7, pc}
    6cbc:	20004438 	.word	0x20004438

00006cc0 <uxTaskPriorityGetFromISR>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask )
	{
    6cc0:	b480      	push	{r7}
    6cc2:	b089      	sub	sp, #36	; 0x24
    6cc4:	af00      	add	r7, sp, #0
    6cc6:	6078      	str	r0, [r7, #4]
	__asm volatile
    6cc8:	f3ef 8211 	mrs	r2, BASEPRI
    6ccc:	f04f 03bf 	mov.w	r3, #191	; 0xbf
    6cd0:	f383 8811 	msr	BASEPRI, r3
    6cd4:	f3bf 8f6f 	isb	sy
    6cd8:	f3bf 8f4f 	dsb	sy
    6cdc:	613a      	str	r2, [r7, #16]
    6cde:	60fb      	str	r3, [r7, #12]
	return ulOriginalBASEPRI;
    6ce0:	693b      	ldr	r3, [r7, #16]
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
    6ce2:	61fb      	str	r3, [r7, #28]
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
    6ce4:	687b      	ldr	r3, [r7, #4]
    6ce6:	2b00      	cmp	r3, #0
    6ce8:	d102      	bne.n	6cf0 <uxTaskPriorityGetFromISR+0x30>
    6cea:	4b0a      	ldr	r3, [pc, #40]	; (6d14 <uxTaskPriorityGetFromISR+0x54>)
    6cec:	681b      	ldr	r3, [r3, #0]
    6cee:	e000      	b.n	6cf2 <uxTaskPriorityGetFromISR+0x32>
    6cf0:	687b      	ldr	r3, [r7, #4]
    6cf2:	61bb      	str	r3, [r7, #24]
			uxReturn = pxTCB->uxPriority;
    6cf4:	69bb      	ldr	r3, [r7, #24]
    6cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    6cf8:	617b      	str	r3, [r7, #20]
    6cfa:	69fb      	ldr	r3, [r7, #28]
    6cfc:	60bb      	str	r3, [r7, #8]
	__asm volatile
    6cfe:	68bb      	ldr	r3, [r7, #8]
    6d00:	f383 8811 	msr	BASEPRI, r3
}
    6d04:	bf00      	nop
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );

		return uxReturn;
    6d06:	697b      	ldr	r3, [r7, #20]
	}
    6d08:	4618      	mov	r0, r3
    6d0a:	3724      	adds	r7, #36	; 0x24
    6d0c:	46bd      	mov	sp, r7
    6d0e:	bc80      	pop	{r7}
    6d10:	4770      	bx	lr
    6d12:	bf00      	nop
    6d14:	20004438 	.word	0x20004438

00006d18 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
    6d18:	b580      	push	{r7, lr}
    6d1a:	b086      	sub	sp, #24
    6d1c:	af00      	add	r7, sp, #0
    6d1e:	6078      	str	r0, [r7, #4]
    6d20:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
    6d22:	2300      	movs	r3, #0
    6d24:	617b      	str	r3, [r7, #20]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
    6d26:	683b      	ldr	r3, [r7, #0]
    6d28:	2b04      	cmp	r3, #4
    6d2a:	d901      	bls.n	6d30 <vTaskPrioritySet+0x18>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
    6d2c:	2304      	movs	r3, #4
    6d2e:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
    6d30:	f001 ff4e 	bl	8bd0 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
    6d34:	687b      	ldr	r3, [r7, #4]
    6d36:	2b00      	cmp	r3, #0
    6d38:	d102      	bne.n	6d40 <vTaskPrioritySet+0x28>
    6d3a:	4b43      	ldr	r3, [pc, #268]	; (6e48 <vTaskPrioritySet+0x130>)
    6d3c:	681b      	ldr	r3, [r3, #0]
    6d3e:	e000      	b.n	6d42 <vTaskPrioritySet+0x2a>
    6d40:	687b      	ldr	r3, [r7, #4]
    6d42:	613b      	str	r3, [r7, #16]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
    6d44:	693b      	ldr	r3, [r7, #16]
    6d46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    6d48:	60fb      	str	r3, [r7, #12]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
    6d4a:	68fa      	ldr	r2, [r7, #12]
    6d4c:	683b      	ldr	r3, [r7, #0]
    6d4e:	429a      	cmp	r2, r3
    6d50:	d074      	beq.n	6e3c <vTaskPrioritySet+0x124>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
    6d52:	683a      	ldr	r2, [r7, #0]
    6d54:	68fb      	ldr	r3, [r7, #12]
    6d56:	429a      	cmp	r2, r3
    6d58:	d90d      	bls.n	6d76 <vTaskPrioritySet+0x5e>
				{
					if( pxTCB != pxCurrentTCB )
    6d5a:	4b3b      	ldr	r3, [pc, #236]	; (6e48 <vTaskPrioritySet+0x130>)
    6d5c:	681b      	ldr	r3, [r3, #0]
    6d5e:	693a      	ldr	r2, [r7, #16]
    6d60:	429a      	cmp	r2, r3
    6d62:	d00f      	beq.n	6d84 <vTaskPrioritySet+0x6c>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
    6d64:	4b38      	ldr	r3, [pc, #224]	; (6e48 <vTaskPrioritySet+0x130>)
    6d66:	681b      	ldr	r3, [r3, #0]
    6d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    6d6a:	683a      	ldr	r2, [r7, #0]
    6d6c:	429a      	cmp	r2, r3
    6d6e:	d309      	bcc.n	6d84 <vTaskPrioritySet+0x6c>
						{
							xYieldRequired = pdTRUE;
    6d70:	2301      	movs	r3, #1
    6d72:	617b      	str	r3, [r7, #20]
    6d74:	e006      	b.n	6d84 <vTaskPrioritySet+0x6c>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
    6d76:	4b34      	ldr	r3, [pc, #208]	; (6e48 <vTaskPrioritySet+0x130>)
    6d78:	681b      	ldr	r3, [r3, #0]
    6d7a:	693a      	ldr	r2, [r7, #16]
    6d7c:	429a      	cmp	r2, r3
    6d7e:	d101      	bne.n	6d84 <vTaskPrioritySet+0x6c>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
    6d80:	2301      	movs	r3, #1
    6d82:	617b      	str	r3, [r7, #20]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
    6d84:	693b      	ldr	r3, [r7, #16]
    6d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    6d88:	60bb      	str	r3, [r7, #8]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
    6d8a:	693b      	ldr	r3, [r7, #16]
    6d8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    6d8e:	693b      	ldr	r3, [r7, #16]
    6d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    6d92:	429a      	cmp	r2, r3
    6d94:	d102      	bne.n	6d9c <vTaskPrioritySet+0x84>
					{
						pxTCB->uxPriority = uxNewPriority;
    6d96:	693b      	ldr	r3, [r7, #16]
    6d98:	683a      	ldr	r2, [r7, #0]
    6d9a:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
    6d9c:	693b      	ldr	r3, [r7, #16]
    6d9e:	683a      	ldr	r2, [r7, #0]
    6da0:	645a      	str	r2, [r3, #68]	; 0x44
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    6da2:	693b      	ldr	r3, [r7, #16]
    6da4:	699b      	ldr	r3, [r3, #24]
    6da6:	2b00      	cmp	r3, #0
    6da8:	db04      	blt.n	6db4 <vTaskPrioritySet+0x9c>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    6daa:	683b      	ldr	r3, [r7, #0]
    6dac:	f1c3 0205 	rsb	r2, r3, #5
    6db0:	693b      	ldr	r3, [r7, #16]
    6db2:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
    6db4:	693b      	ldr	r3, [r7, #16]
    6db6:	6959      	ldr	r1, [r3, #20]
    6db8:	68ba      	ldr	r2, [r7, #8]
    6dba:	4613      	mov	r3, r2
    6dbc:	009b      	lsls	r3, r3, #2
    6dbe:	4413      	add	r3, r2
    6dc0:	009b      	lsls	r3, r3, #2
    6dc2:	4a22      	ldr	r2, [pc, #136]	; (6e4c <vTaskPrioritySet+0x134>)
    6dc4:	4413      	add	r3, r2
    6dc6:	4299      	cmp	r1, r3
    6dc8:	d101      	bne.n	6dce <vTaskPrioritySet+0xb6>
    6dca:	2301      	movs	r3, #1
    6dcc:	e000      	b.n	6dd0 <vTaskPrioritySet+0xb8>
    6dce:	2300      	movs	r3, #0
    6dd0:	2b00      	cmp	r3, #0
    6dd2:	d028      	beq.n	6e26 <vTaskPrioritySet+0x10e>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    6dd4:	693b      	ldr	r3, [r7, #16]
    6dd6:	3304      	adds	r3, #4
    6dd8:	4618      	mov	r0, r3
    6dda:	f7fe fecb 	bl	5b74 <uxListRemove>
    6dde:	4603      	mov	r3, r0
    6de0:	2b00      	cmp	r3, #0
    6de2:	d109      	bne.n	6df8 <vTaskPrioritySet+0xe0>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
    6de4:	2201      	movs	r2, #1
    6de6:	68bb      	ldr	r3, [r7, #8]
    6de8:	fa02 f303 	lsl.w	r3, r2, r3
    6dec:	43da      	mvns	r2, r3
    6dee:	4b18      	ldr	r3, [pc, #96]	; (6e50 <vTaskPrioritySet+0x138>)
    6df0:	681b      	ldr	r3, [r3, #0]
    6df2:	4013      	ands	r3, r2
    6df4:	4a16      	ldr	r2, [pc, #88]	; (6e50 <vTaskPrioritySet+0x138>)
    6df6:	6013      	str	r3, [r2, #0]
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
    6df8:	693b      	ldr	r3, [r7, #16]
    6dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    6dfc:	2201      	movs	r2, #1
    6dfe:	409a      	lsls	r2, r3
    6e00:	4b13      	ldr	r3, [pc, #76]	; (6e50 <vTaskPrioritySet+0x138>)
    6e02:	681b      	ldr	r3, [r3, #0]
    6e04:	4313      	orrs	r3, r2
    6e06:	4a12      	ldr	r2, [pc, #72]	; (6e50 <vTaskPrioritySet+0x138>)
    6e08:	6013      	str	r3, [r2, #0]
    6e0a:	693b      	ldr	r3, [r7, #16]
    6e0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    6e0e:	4613      	mov	r3, r2
    6e10:	009b      	lsls	r3, r3, #2
    6e12:	4413      	add	r3, r2
    6e14:	009b      	lsls	r3, r3, #2
    6e16:	4a0d      	ldr	r2, [pc, #52]	; (6e4c <vTaskPrioritySet+0x134>)
    6e18:	441a      	add	r2, r3
    6e1a:	693b      	ldr	r3, [r7, #16]
    6e1c:	3304      	adds	r3, #4
    6e1e:	4619      	mov	r1, r3
    6e20:	4610      	mov	r0, r2
    6e22:	f7fe fe4c 	bl	5abe <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
    6e26:	697b      	ldr	r3, [r7, #20]
    6e28:	2b00      	cmp	r3, #0
    6e2a:	d007      	beq.n	6e3c <vTaskPrioritySet+0x124>
				{
					taskYIELD_IF_USING_PREEMPTION();
    6e2c:	4b09      	ldr	r3, [pc, #36]	; (6e54 <vTaskPrioritySet+0x13c>)
    6e2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    6e32:	601a      	str	r2, [r3, #0]
    6e34:	f3bf 8f4f 	dsb	sy
    6e38:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
    6e3c:	f001 fee2 	bl	8c04 <vPortExitCritical>
	}
    6e40:	bf00      	nop
    6e42:	3718      	adds	r7, #24
    6e44:	46bd      	mov	sp, r7
    6e46:	bd80      	pop	{r7, pc}
    6e48:	20004438 	.word	0x20004438
    6e4c:	2000443c 	.word	0x2000443c
    6e50:	20004518 	.word	0x20004518
    6e54:	e000ed04 	.word	0xe000ed04

00006e58 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
    6e58:	b580      	push	{r7, lr}
    6e5a:	b084      	sub	sp, #16
    6e5c:	af00      	add	r7, sp, #0
    6e5e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
    6e60:	f001 feb6 	bl	8bd0 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
    6e64:	687b      	ldr	r3, [r7, #4]
    6e66:	2b00      	cmp	r3, #0
    6e68:	d102      	bne.n	6e70 <vTaskSuspend+0x18>
    6e6a:	4b35      	ldr	r3, [pc, #212]	; (6f40 <vTaskSuspend+0xe8>)
    6e6c:	681b      	ldr	r3, [r3, #0]
    6e6e:	e000      	b.n	6e72 <vTaskSuspend+0x1a>
    6e70:	687b      	ldr	r3, [r7, #4]
    6e72:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    6e74:	68fb      	ldr	r3, [r7, #12]
    6e76:	3304      	adds	r3, #4
    6e78:	4618      	mov	r0, r3
    6e7a:	f7fe fe7b 	bl	5b74 <uxListRemove>
    6e7e:	4603      	mov	r3, r0
    6e80:	2b00      	cmp	r3, #0
    6e82:	d115      	bne.n	6eb0 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
    6e84:	68fb      	ldr	r3, [r7, #12]
    6e86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    6e88:	492e      	ldr	r1, [pc, #184]	; (6f44 <vTaskSuspend+0xec>)
    6e8a:	4613      	mov	r3, r2
    6e8c:	009b      	lsls	r3, r3, #2
    6e8e:	4413      	add	r3, r2
    6e90:	009b      	lsls	r3, r3, #2
    6e92:	440b      	add	r3, r1
    6e94:	681b      	ldr	r3, [r3, #0]
    6e96:	2b00      	cmp	r3, #0
    6e98:	d10a      	bne.n	6eb0 <vTaskSuspend+0x58>
    6e9a:	68fb      	ldr	r3, [r7, #12]
    6e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    6e9e:	2201      	movs	r2, #1
    6ea0:	fa02 f303 	lsl.w	r3, r2, r3
    6ea4:	43da      	mvns	r2, r3
    6ea6:	4b28      	ldr	r3, [pc, #160]	; (6f48 <vTaskSuspend+0xf0>)
    6ea8:	681b      	ldr	r3, [r3, #0]
    6eaa:	4013      	ands	r3, r2
    6eac:	4a26      	ldr	r2, [pc, #152]	; (6f48 <vTaskSuspend+0xf0>)
    6eae:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    6eb0:	68fb      	ldr	r3, [r7, #12]
    6eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6eb4:	2b00      	cmp	r3, #0
    6eb6:	d004      	beq.n	6ec2 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    6eb8:	68fb      	ldr	r3, [r7, #12]
    6eba:	3318      	adds	r3, #24
    6ebc:	4618      	mov	r0, r3
    6ebe:	f7fe fe59 	bl	5b74 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
    6ec2:	68fb      	ldr	r3, [r7, #12]
    6ec4:	3304      	adds	r3, #4
    6ec6:	4619      	mov	r1, r3
    6ec8:	4820      	ldr	r0, [pc, #128]	; (6f4c <vTaskSuspend+0xf4>)
    6eca:	f7fe fdf8 	bl	5abe <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
    6ece:	68fb      	ldr	r3, [r7, #12]
    6ed0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
    6ed4:	b2db      	uxtb	r3, r3
    6ed6:	2b01      	cmp	r3, #1
    6ed8:	d103      	bne.n	6ee2 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    6eda:	68fb      	ldr	r3, [r7, #12]
    6edc:	2200      	movs	r2, #0
    6ede:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
    6ee2:	f001 fe8f 	bl	8c04 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
    6ee6:	4b1a      	ldr	r3, [pc, #104]	; (6f50 <vTaskSuspend+0xf8>)
    6ee8:	681b      	ldr	r3, [r3, #0]
    6eea:	2b00      	cmp	r3, #0
    6eec:	d005      	beq.n	6efa <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
    6eee:	f001 fe6f 	bl	8bd0 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
    6ef2:	f000 fd17 	bl	7924 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
    6ef6:	f001 fe85 	bl	8c04 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
    6efa:	4b11      	ldr	r3, [pc, #68]	; (6f40 <vTaskSuspend+0xe8>)
    6efc:	681b      	ldr	r3, [r3, #0]
    6efe:	68fa      	ldr	r2, [r7, #12]
    6f00:	429a      	cmp	r2, r3
    6f02:	d118      	bne.n	6f36 <vTaskSuspend+0xde>
		{
			if( xSchedulerRunning != pdFALSE )
    6f04:	4b12      	ldr	r3, [pc, #72]	; (6f50 <vTaskSuspend+0xf8>)
    6f06:	681b      	ldr	r3, [r3, #0]
    6f08:	2b00      	cmp	r3, #0
    6f0a:	d008      	beq.n	6f1e <vTaskSuspend+0xc6>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
				portYIELD_WITHIN_API();
    6f0c:	4b11      	ldr	r3, [pc, #68]	; (6f54 <vTaskSuspend+0xfc>)
    6f0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    6f12:	601a      	str	r2, [r3, #0]
    6f14:	f3bf 8f4f 	dsb	sy
    6f18:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    6f1c:	e00b      	b.n	6f36 <vTaskSuspend+0xde>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    6f1e:	4b0b      	ldr	r3, [pc, #44]	; (6f4c <vTaskSuspend+0xf4>)
    6f20:	681a      	ldr	r2, [r3, #0]
    6f22:	4b0d      	ldr	r3, [pc, #52]	; (6f58 <vTaskSuspend+0x100>)
    6f24:	681b      	ldr	r3, [r3, #0]
    6f26:	429a      	cmp	r2, r3
    6f28:	d103      	bne.n	6f32 <vTaskSuspend+0xda>
					pxCurrentTCB = NULL;
    6f2a:	4b05      	ldr	r3, [pc, #20]	; (6f40 <vTaskSuspend+0xe8>)
    6f2c:	2200      	movs	r2, #0
    6f2e:	601a      	str	r2, [r3, #0]
	}
    6f30:	e001      	b.n	6f36 <vTaskSuspend+0xde>
					vTaskSwitchContext();
    6f32:	f000 fad1 	bl	74d8 <vTaskSwitchContext>
	}
    6f36:	bf00      	nop
    6f38:	3710      	adds	r7, #16
    6f3a:	46bd      	mov	sp, r7
    6f3c:	bd80      	pop	{r7, pc}
    6f3e:	bf00      	nop
    6f40:	20004438 	.word	0x20004438
    6f44:	2000443c 	.word	0x2000443c
    6f48:	20004518 	.word	0x20004518
    6f4c:	200044fc 	.word	0x200044fc
    6f50:	2000451c 	.word	0x2000451c
    6f54:	e000ed04 	.word	0xe000ed04
    6f58:	20004510 	.word	0x20004510

00006f5c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
    6f5c:	b480      	push	{r7}
    6f5e:	b085      	sub	sp, #20
    6f60:	af00      	add	r7, sp, #0
    6f62:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
    6f64:	2300      	movs	r3, #0
    6f66:	60fb      	str	r3, [r7, #12]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
    6f68:	687b      	ldr	r3, [r7, #4]
    6f6a:	60bb      	str	r3, [r7, #8]

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
    6f6c:	68bb      	ldr	r3, [r7, #8]
    6f6e:	695b      	ldr	r3, [r3, #20]
    6f70:	4a0e      	ldr	r2, [pc, #56]	; (6fac <prvTaskIsTaskSuspended+0x50>)
    6f72:	4293      	cmp	r3, r2
    6f74:	d101      	bne.n	6f7a <prvTaskIsTaskSuspended+0x1e>
    6f76:	2301      	movs	r3, #1
    6f78:	e000      	b.n	6f7c <prvTaskIsTaskSuspended+0x20>
    6f7a:	2300      	movs	r3, #0
    6f7c:	2b00      	cmp	r3, #0
    6f7e:	d00f      	beq.n	6fa0 <prvTaskIsTaskSuspended+0x44>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
    6f80:	68bb      	ldr	r3, [r7, #8]
    6f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6f84:	4a0a      	ldr	r2, [pc, #40]	; (6fb0 <prvTaskIsTaskSuspended+0x54>)
    6f86:	4293      	cmp	r3, r2
    6f88:	d00a      	beq.n	6fa0 <prvTaskIsTaskSuspended+0x44>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
    6f8a:	68bb      	ldr	r3, [r7, #8]
    6f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6f8e:	2b00      	cmp	r3, #0
    6f90:	d101      	bne.n	6f96 <prvTaskIsTaskSuspended+0x3a>
    6f92:	2301      	movs	r3, #1
    6f94:	e000      	b.n	6f98 <prvTaskIsTaskSuspended+0x3c>
    6f96:	2300      	movs	r3, #0
    6f98:	2b00      	cmp	r3, #0
    6f9a:	d001      	beq.n	6fa0 <prvTaskIsTaskSuspended+0x44>
				{
					xReturn = pdTRUE;
    6f9c:	2301      	movs	r3, #1
    6f9e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    6fa0:	68fb      	ldr	r3, [r7, #12]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
    6fa2:	4618      	mov	r0, r3
    6fa4:	3714      	adds	r7, #20
    6fa6:	46bd      	mov	sp, r7
    6fa8:	bc80      	pop	{r7}
    6faa:	4770      	bx	lr
    6fac:	200044fc 	.word	0x200044fc
    6fb0:	200044d0 	.word	0x200044d0

00006fb4 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
    6fb4:	b580      	push	{r7, lr}
    6fb6:	b084      	sub	sp, #16
    6fb8:	af00      	add	r7, sp, #0
    6fba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
    6fbc:	687b      	ldr	r3, [r7, #4]
    6fbe:	60fb      	str	r3, [r7, #12]
		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
    6fc0:	68fb      	ldr	r3, [r7, #12]
    6fc2:	2b00      	cmp	r3, #0
    6fc4:	d039      	beq.n	703a <vTaskResume+0x86>
    6fc6:	4b1f      	ldr	r3, [pc, #124]	; (7044 <vTaskResume+0x90>)
    6fc8:	681b      	ldr	r3, [r3, #0]
    6fca:	68fa      	ldr	r2, [r7, #12]
    6fcc:	429a      	cmp	r2, r3
    6fce:	d034      	beq.n	703a <vTaskResume+0x86>
		{
			taskENTER_CRITICAL();
    6fd0:	f001 fdfe 	bl	8bd0 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
    6fd4:	68f8      	ldr	r0, [r7, #12]
    6fd6:	f7ff ffc1 	bl	6f5c <prvTaskIsTaskSuspended>
    6fda:	4603      	mov	r3, r0
    6fdc:	2b00      	cmp	r3, #0
    6fde:	d02a      	beq.n	7036 <vTaskResume+0x82>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
    6fe0:	68fb      	ldr	r3, [r7, #12]
    6fe2:	3304      	adds	r3, #4
    6fe4:	4618      	mov	r0, r3
    6fe6:	f7fe fdc5 	bl	5b74 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    6fea:	68fb      	ldr	r3, [r7, #12]
    6fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    6fee:	2201      	movs	r2, #1
    6ff0:	409a      	lsls	r2, r3
    6ff2:	4b15      	ldr	r3, [pc, #84]	; (7048 <vTaskResume+0x94>)
    6ff4:	681b      	ldr	r3, [r3, #0]
    6ff6:	4313      	orrs	r3, r2
    6ff8:	4a13      	ldr	r2, [pc, #76]	; (7048 <vTaskResume+0x94>)
    6ffa:	6013      	str	r3, [r2, #0]
    6ffc:	68fb      	ldr	r3, [r7, #12]
    6ffe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7000:	4613      	mov	r3, r2
    7002:	009b      	lsls	r3, r3, #2
    7004:	4413      	add	r3, r2
    7006:	009b      	lsls	r3, r3, #2
    7008:	4a10      	ldr	r2, [pc, #64]	; (704c <vTaskResume+0x98>)
    700a:	441a      	add	r2, r3
    700c:	68fb      	ldr	r3, [r7, #12]
    700e:	3304      	adds	r3, #4
    7010:	4619      	mov	r1, r3
    7012:	4610      	mov	r0, r2
    7014:	f7fe fd53 	bl	5abe <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    7018:	68fb      	ldr	r3, [r7, #12]
    701a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    701c:	4b09      	ldr	r3, [pc, #36]	; (7044 <vTaskResume+0x90>)
    701e:	681b      	ldr	r3, [r3, #0]
    7020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7022:	429a      	cmp	r2, r3
    7024:	d307      	bcc.n	7036 <vTaskResume+0x82>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
    7026:	4b0a      	ldr	r3, [pc, #40]	; (7050 <vTaskResume+0x9c>)
    7028:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    702c:	601a      	str	r2, [r3, #0]
    702e:	f3bf 8f4f 	dsb	sy
    7032:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
    7036:	f001 fde5 	bl	8c04 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    703a:	bf00      	nop
    703c:	3710      	adds	r7, #16
    703e:	46bd      	mov	sp, r7
    7040:	bd80      	pop	{r7, pc}
    7042:	bf00      	nop
    7044:	20004438 	.word	0x20004438
    7048:	20004518 	.word	0x20004518
    704c:	2000443c 	.word	0x2000443c
    7050:	e000ed04 	.word	0xe000ed04

00007054 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
    7054:	b580      	push	{r7, lr}
    7056:	b088      	sub	sp, #32
    7058:	af00      	add	r7, sp, #0
    705a:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
    705c:	2300      	movs	r3, #0
    705e:	61fb      	str	r3, [r7, #28]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
    7060:	687b      	ldr	r3, [r7, #4]
    7062:	61bb      	str	r3, [r7, #24]
	__asm volatile
    7064:	f3ef 8211 	mrs	r2, BASEPRI
    7068:	f04f 03bf 	mov.w	r3, #191	; 0xbf
    706c:	f383 8811 	msr	BASEPRI, r3
    7070:	f3bf 8f6f 	isb	sy
    7074:	f3bf 8f4f 	dsb	sy
    7078:	613a      	str	r2, [r7, #16]
    707a:	60fb      	str	r3, [r7, #12]
	return ulOriginalBASEPRI;
    707c:	693b      	ldr	r3, [r7, #16]
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    707e:	617b      	str	r3, [r7, #20]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
    7080:	69b8      	ldr	r0, [r7, #24]
    7082:	f7ff ff6b 	bl	6f5c <prvTaskIsTaskSuspended>
    7086:	4603      	mov	r3, r0
    7088:	2b00      	cmp	r3, #0
    708a:	d02f      	beq.n	70ec <xTaskResumeFromISR+0x98>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    708c:	4b1d      	ldr	r3, [pc, #116]	; (7104 <xTaskResumeFromISR+0xb0>)
    708e:	681b      	ldr	r3, [r3, #0]
    7090:	2b00      	cmp	r3, #0
    7092:	d125      	bne.n	70e0 <xTaskResumeFromISR+0x8c>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    7094:	69bb      	ldr	r3, [r7, #24]
    7096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7098:	4b1b      	ldr	r3, [pc, #108]	; (7108 <xTaskResumeFromISR+0xb4>)
    709a:	681b      	ldr	r3, [r3, #0]
    709c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    709e:	429a      	cmp	r2, r3
    70a0:	d301      	bcc.n	70a6 <xTaskResumeFromISR+0x52>
					{
						xYieldRequired = pdTRUE;
    70a2:	2301      	movs	r3, #1
    70a4:	61fb      	str	r3, [r7, #28]
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    70a6:	69bb      	ldr	r3, [r7, #24]
    70a8:	3304      	adds	r3, #4
    70aa:	4618      	mov	r0, r3
    70ac:	f7fe fd62 	bl	5b74 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    70b0:	69bb      	ldr	r3, [r7, #24]
    70b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    70b4:	2201      	movs	r2, #1
    70b6:	409a      	lsls	r2, r3
    70b8:	4b14      	ldr	r3, [pc, #80]	; (710c <xTaskResumeFromISR+0xb8>)
    70ba:	681b      	ldr	r3, [r3, #0]
    70bc:	4313      	orrs	r3, r2
    70be:	4a13      	ldr	r2, [pc, #76]	; (710c <xTaskResumeFromISR+0xb8>)
    70c0:	6013      	str	r3, [r2, #0]
    70c2:	69bb      	ldr	r3, [r7, #24]
    70c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    70c6:	4613      	mov	r3, r2
    70c8:	009b      	lsls	r3, r3, #2
    70ca:	4413      	add	r3, r2
    70cc:	009b      	lsls	r3, r3, #2
    70ce:	4a10      	ldr	r2, [pc, #64]	; (7110 <xTaskResumeFromISR+0xbc>)
    70d0:	441a      	add	r2, r3
    70d2:	69bb      	ldr	r3, [r7, #24]
    70d4:	3304      	adds	r3, #4
    70d6:	4619      	mov	r1, r3
    70d8:	4610      	mov	r0, r2
    70da:	f7fe fcf0 	bl	5abe <vListInsertEnd>
    70de:	e005      	b.n	70ec <xTaskResumeFromISR+0x98>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    70e0:	69bb      	ldr	r3, [r7, #24]
    70e2:	3318      	adds	r3, #24
    70e4:	4619      	mov	r1, r3
    70e6:	480b      	ldr	r0, [pc, #44]	; (7114 <xTaskResumeFromISR+0xc0>)
    70e8:	f7fe fce9 	bl	5abe <vListInsertEnd>
    70ec:	697b      	ldr	r3, [r7, #20]
    70ee:	60bb      	str	r3, [r7, #8]
	__asm volatile
    70f0:	68bb      	ldr	r3, [r7, #8]
    70f2:	f383 8811 	msr	BASEPRI, r3
}
    70f6:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
    70f8:	69fb      	ldr	r3, [r7, #28]
	}
    70fa:	4618      	mov	r0, r3
    70fc:	3720      	adds	r7, #32
    70fe:	46bd      	mov	sp, r7
    7100:	bd80      	pop	{r7, pc}
    7102:	bf00      	nop
    7104:	20004538 	.word	0x20004538
    7108:	20004438 	.word	0x20004438
    710c:	20004518 	.word	0x20004518
    7110:	2000443c 	.word	0x2000443c
    7114:	200044d0 	.word	0x200044d0

00007118 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    7118:	b580      	push	{r7, lr}
    711a:	b084      	sub	sp, #16
    711c:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
    711e:	4b14      	ldr	r3, [pc, #80]	; (7170 <vTaskStartScheduler+0x58>)
    7120:	9301      	str	r3, [sp, #4]
    7122:	2300      	movs	r3, #0
    7124:	9300      	str	r3, [sp, #0]
    7126:	2300      	movs	r3, #0
    7128:	2280      	movs	r2, #128	; 0x80
    712a:	4912      	ldr	r1, [pc, #72]	; (7174 <vTaskStartScheduler+0x5c>)
    712c:	4812      	ldr	r0, [pc, #72]	; (7178 <vTaskStartScheduler+0x60>)
    712e:	f7ff fba1 	bl	6874 <xTaskCreate>
    7132:	6078      	str	r0, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
    7134:	687b      	ldr	r3, [r7, #4]
    7136:	2b01      	cmp	r3, #1
    7138:	d115      	bne.n	7166 <vTaskStartScheduler+0x4e>
	__asm volatile
    713a:	f04f 03bf 	mov.w	r3, #191	; 0xbf
    713e:	f383 8811 	msr	BASEPRI, r3
    7142:	f3bf 8f6f 	isb	sy
    7146:	f3bf 8f4f 	dsb	sy
    714a:	603b      	str	r3, [r7, #0]
}
    714c:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
    714e:	4b0b      	ldr	r3, [pc, #44]	; (717c <vTaskStartScheduler+0x64>)
    7150:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7154:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
    7156:	4b0a      	ldr	r3, [pc, #40]	; (7180 <vTaskStartScheduler+0x68>)
    7158:	2201      	movs	r2, #1
    715a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
    715c:	4b09      	ldr	r3, [pc, #36]	; (7184 <vTaskStartScheduler+0x6c>)
    715e:	2200      	movs	r2, #0
    7160:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    7162:	f001 fd0e 	bl	8b82 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
    7166:	bf00      	nop
    7168:	3708      	adds	r7, #8
    716a:	46bd      	mov	sp, r7
    716c:	bd80      	pop	{r7, pc}
    716e:	bf00      	nop
    7170:	20004534 	.word	0x20004534
    7174:	00008f7c 	.word	0x00008f7c
    7178:	000077f9 	.word	0x000077f9
    717c:	20004530 	.word	0x20004530
    7180:	2000451c 	.word	0x2000451c
    7184:	20004514 	.word	0x20004514

00007188 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    7188:	b580      	push	{r7, lr}
    718a:	b082      	sub	sp, #8
    718c:	af00      	add	r7, sp, #0
	__asm volatile
    718e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
    7192:	f383 8811 	msr	BASEPRI, r3
    7196:	f3bf 8f6f 	isb	sy
    719a:	f3bf 8f4f 	dsb	sy
    719e:	607b      	str	r3, [r7, #4]
}
    71a0:	bf00      	nop
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
	xSchedulerRunning = pdFALSE;
    71a2:	4b04      	ldr	r3, [pc, #16]	; (71b4 <vTaskEndScheduler+0x2c>)
    71a4:	2200      	movs	r2, #0
    71a6:	601a      	str	r2, [r3, #0]
	vPortEndScheduler();
    71a8:	f001 fd0c 	bl	8bc4 <vPortEndScheduler>
}
    71ac:	bf00      	nop
    71ae:	3708      	adds	r7, #8
    71b0:	46bd      	mov	sp, r7
    71b2:	bd80      	pop	{r7, pc}
    71b4:	2000451c 	.word	0x2000451c

000071b8 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    71b8:	b480      	push	{r7}
    71ba:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    71bc:	4b04      	ldr	r3, [pc, #16]	; (71d0 <vTaskSuspendAll+0x18>)
    71be:	681b      	ldr	r3, [r3, #0]
    71c0:	3301      	adds	r3, #1
    71c2:	4a03      	ldr	r2, [pc, #12]	; (71d0 <vTaskSuspendAll+0x18>)
    71c4:	6013      	str	r3, [r2, #0]
}
    71c6:	bf00      	nop
    71c8:	46bd      	mov	sp, r7
    71ca:	bc80      	pop	{r7}
    71cc:	4770      	bx	lr
    71ce:	bf00      	nop
    71d0:	20004538 	.word	0x20004538

000071d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    71d4:	b580      	push	{r7, lr}
    71d6:	b084      	sub	sp, #16
    71d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
    71da:	2300      	movs	r3, #0
    71dc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
    71de:	2300      	movs	r3, #0
    71e0:	60bb      	str	r3, [r7, #8]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    71e2:	f001 fcf5 	bl	8bd0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
    71e6:	4b39      	ldr	r3, [pc, #228]	; (72cc <xTaskResumeAll+0xf8>)
    71e8:	681b      	ldr	r3, [r3, #0]
    71ea:	3b01      	subs	r3, #1
    71ec:	4a37      	ldr	r2, [pc, #220]	; (72cc <xTaskResumeAll+0xf8>)
    71ee:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    71f0:	4b36      	ldr	r3, [pc, #216]	; (72cc <xTaskResumeAll+0xf8>)
    71f2:	681b      	ldr	r3, [r3, #0]
    71f4:	2b00      	cmp	r3, #0
    71f6:	d161      	bne.n	72bc <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    71f8:	4b35      	ldr	r3, [pc, #212]	; (72d0 <xTaskResumeAll+0xfc>)
    71fa:	681b      	ldr	r3, [r3, #0]
    71fc:	2b00      	cmp	r3, #0
    71fe:	d05d      	beq.n	72bc <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    7200:	e02e      	b.n	7260 <xTaskResumeAll+0x8c>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    7202:	4b34      	ldr	r3, [pc, #208]	; (72d4 <xTaskResumeAll+0x100>)
    7204:	68db      	ldr	r3, [r3, #12]
    7206:	68db      	ldr	r3, [r3, #12]
    7208:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    720a:	68fb      	ldr	r3, [r7, #12]
    720c:	3318      	adds	r3, #24
    720e:	4618      	mov	r0, r3
    7210:	f7fe fcb0 	bl	5b74 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    7214:	68fb      	ldr	r3, [r7, #12]
    7216:	3304      	adds	r3, #4
    7218:	4618      	mov	r0, r3
    721a:	f7fe fcab 	bl	5b74 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    721e:	68fb      	ldr	r3, [r7, #12]
    7220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7222:	2201      	movs	r2, #1
    7224:	409a      	lsls	r2, r3
    7226:	4b2c      	ldr	r3, [pc, #176]	; (72d8 <xTaskResumeAll+0x104>)
    7228:	681b      	ldr	r3, [r3, #0]
    722a:	4313      	orrs	r3, r2
    722c:	4a2a      	ldr	r2, [pc, #168]	; (72d8 <xTaskResumeAll+0x104>)
    722e:	6013      	str	r3, [r2, #0]
    7230:	68fb      	ldr	r3, [r7, #12]
    7232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7234:	4613      	mov	r3, r2
    7236:	009b      	lsls	r3, r3, #2
    7238:	4413      	add	r3, r2
    723a:	009b      	lsls	r3, r3, #2
    723c:	4a27      	ldr	r2, [pc, #156]	; (72dc <xTaskResumeAll+0x108>)
    723e:	441a      	add	r2, r3
    7240:	68fb      	ldr	r3, [r7, #12]
    7242:	3304      	adds	r3, #4
    7244:	4619      	mov	r1, r3
    7246:	4610      	mov	r0, r2
    7248:	f7fe fc39 	bl	5abe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    724c:	68fb      	ldr	r3, [r7, #12]
    724e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7250:	4b23      	ldr	r3, [pc, #140]	; (72e0 <xTaskResumeAll+0x10c>)
    7252:	681b      	ldr	r3, [r3, #0]
    7254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7256:	429a      	cmp	r2, r3
    7258:	d302      	bcc.n	7260 <xTaskResumeAll+0x8c>
					{
						xYieldPending = pdTRUE;
    725a:	4b22      	ldr	r3, [pc, #136]	; (72e4 <xTaskResumeAll+0x110>)
    725c:	2201      	movs	r2, #1
    725e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    7260:	4b1c      	ldr	r3, [pc, #112]	; (72d4 <xTaskResumeAll+0x100>)
    7262:	681b      	ldr	r3, [r3, #0]
    7264:	2b00      	cmp	r3, #0
    7266:	d1cc      	bne.n	7202 <xTaskResumeAll+0x2e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
    7268:	68fb      	ldr	r3, [r7, #12]
    726a:	2b00      	cmp	r3, #0
    726c:	d001      	beq.n	7272 <xTaskResumeAll+0x9e>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
    726e:	f000 fb59 	bl	7924 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    7272:	4b1d      	ldr	r3, [pc, #116]	; (72e8 <xTaskResumeAll+0x114>)
    7274:	681b      	ldr	r3, [r3, #0]
    7276:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
    7278:	687b      	ldr	r3, [r7, #4]
    727a:	2b00      	cmp	r3, #0
    727c:	d010      	beq.n	72a0 <xTaskResumeAll+0xcc>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
    727e:	f000 f875 	bl	736c <xTaskIncrementTick>
    7282:	4603      	mov	r3, r0
    7284:	2b00      	cmp	r3, #0
    7286:	d002      	beq.n	728e <xTaskResumeAll+0xba>
							{
								xYieldPending = pdTRUE;
    7288:	4b16      	ldr	r3, [pc, #88]	; (72e4 <xTaskResumeAll+0x110>)
    728a:	2201      	movs	r2, #1
    728c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
    728e:	687b      	ldr	r3, [r7, #4]
    7290:	3b01      	subs	r3, #1
    7292:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
    7294:	687b      	ldr	r3, [r7, #4]
    7296:	2b00      	cmp	r3, #0
    7298:	d1f1      	bne.n	727e <xTaskResumeAll+0xaa>

						uxPendedTicks = 0;
    729a:	4b13      	ldr	r3, [pc, #76]	; (72e8 <xTaskResumeAll+0x114>)
    729c:	2200      	movs	r2, #0
    729e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
    72a0:	4b10      	ldr	r3, [pc, #64]	; (72e4 <xTaskResumeAll+0x110>)
    72a2:	681b      	ldr	r3, [r3, #0]
    72a4:	2b00      	cmp	r3, #0
    72a6:	d009      	beq.n	72bc <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
    72a8:	2301      	movs	r3, #1
    72aa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
    72ac:	4b0f      	ldr	r3, [pc, #60]	; (72ec <xTaskResumeAll+0x118>)
    72ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    72b2:	601a      	str	r2, [r3, #0]
    72b4:	f3bf 8f4f 	dsb	sy
    72b8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    72bc:	f001 fca2 	bl	8c04 <vPortExitCritical>

	return xAlreadyYielded;
    72c0:	68bb      	ldr	r3, [r7, #8]
}
    72c2:	4618      	mov	r0, r3
    72c4:	3710      	adds	r7, #16
    72c6:	46bd      	mov	sp, r7
    72c8:	bd80      	pop	{r7, pc}
    72ca:	bf00      	nop
    72cc:	20004538 	.word	0x20004538
    72d0:	20004510 	.word	0x20004510
    72d4:	200044d0 	.word	0x200044d0
    72d8:	20004518 	.word	0x20004518
    72dc:	2000443c 	.word	0x2000443c
    72e0:	20004438 	.word	0x20004438
    72e4:	20004524 	.word	0x20004524
    72e8:	20004520 	.word	0x20004520
    72ec:	e000ed04 	.word	0xe000ed04

000072f0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
    72f0:	b480      	push	{r7}
    72f2:	b083      	sub	sp, #12
    72f4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
    72f6:	4b04      	ldr	r3, [pc, #16]	; (7308 <xTaskGetTickCount+0x18>)
    72f8:	681b      	ldr	r3, [r3, #0]
    72fa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
    72fc:	687b      	ldr	r3, [r7, #4]
}
    72fe:	4618      	mov	r0, r3
    7300:	370c      	adds	r7, #12
    7302:	46bd      	mov	sp, r7
    7304:	bc80      	pop	{r7}
    7306:	4770      	bx	lr
    7308:	20004514 	.word	0x20004514

0000730c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
    730c:	b480      	push	{r7}
    730e:	b083      	sub	sp, #12
    7310:	af00      	add	r7, sp, #0
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
    7312:	2300      	movs	r3, #0
    7314:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
    7316:	4b04      	ldr	r3, [pc, #16]	; (7328 <xTaskGetTickCountFromISR+0x1c>)
    7318:	681b      	ldr	r3, [r3, #0]
    731a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    731c:	683b      	ldr	r3, [r7, #0]
}
    731e:	4618      	mov	r0, r3
    7320:	370c      	adds	r7, #12
    7322:	46bd      	mov	sp, r7
    7324:	bc80      	pop	{r7}
    7326:	4770      	bx	lr
    7328:	20004514 	.word	0x20004514

0000732c <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
    732c:	b480      	push	{r7}
    732e:	af00      	add	r7, sp, #0
	/* A critical section is not required because the variables are of type
	BaseType_t. */
	return uxCurrentNumberOfTasks;
    7330:	4b02      	ldr	r3, [pc, #8]	; (733c <uxTaskGetNumberOfTasks+0x10>)
    7332:	681b      	ldr	r3, [r3, #0]
}
    7334:	4618      	mov	r0, r3
    7336:	46bd      	mov	sp, r7
    7338:	bc80      	pop	{r7}
    733a:	4770      	bx	lr
    733c:	20004510 	.word	0x20004510

00007340 <pcTaskGetName>:
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
    7340:	b480      	push	{r7}
    7342:	b085      	sub	sp, #20
    7344:	af00      	add	r7, sp, #0
    7346:	6078      	str	r0, [r7, #4]
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
    7348:	687b      	ldr	r3, [r7, #4]
    734a:	2b00      	cmp	r3, #0
    734c:	d102      	bne.n	7354 <pcTaskGetName+0x14>
    734e:	4b06      	ldr	r3, [pc, #24]	; (7368 <pcTaskGetName+0x28>)
    7350:	681b      	ldr	r3, [r3, #0]
    7352:	e000      	b.n	7356 <pcTaskGetName+0x16>
    7354:	687b      	ldr	r3, [r7, #4]
    7356:	60fb      	str	r3, [r7, #12]
	configASSERT( pxTCB );
	return &( pxTCB->pcTaskName[ 0 ] );
    7358:	68fb      	ldr	r3, [r7, #12]
    735a:	3334      	adds	r3, #52	; 0x34
}
    735c:	4618      	mov	r0, r3
    735e:	3714      	adds	r7, #20
    7360:	46bd      	mov	sp, r7
    7362:	bc80      	pop	{r7}
    7364:	4770      	bx	lr
    7366:	bf00      	nop
    7368:	20004438 	.word	0x20004438

0000736c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
    736c:	b580      	push	{r7, lr}
    736e:	b086      	sub	sp, #24
    7370:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    7372:	2300      	movs	r3, #0
    7374:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    7376:	4b4d      	ldr	r3, [pc, #308]	; (74ac <xTaskIncrementTick+0x140>)
    7378:	681b      	ldr	r3, [r3, #0]
    737a:	2b00      	cmp	r3, #0
    737c:	f040 8083 	bne.w	7486 <xTaskIncrementTick+0x11a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
    7380:	4b4b      	ldr	r3, [pc, #300]	; (74b0 <xTaskIncrementTick+0x144>)
    7382:	681b      	ldr	r3, [r3, #0]
    7384:	3301      	adds	r3, #1
    7386:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
    7388:	4a49      	ldr	r2, [pc, #292]	; (74b0 <xTaskIncrementTick+0x144>)
    738a:	693b      	ldr	r3, [r7, #16]
    738c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
    738e:	693b      	ldr	r3, [r7, #16]
    7390:	2b00      	cmp	r3, #0
    7392:	d110      	bne.n	73b6 <xTaskIncrementTick+0x4a>
		{
			taskSWITCH_DELAYED_LISTS();
    7394:	4b47      	ldr	r3, [pc, #284]	; (74b4 <xTaskIncrementTick+0x148>)
    7396:	681b      	ldr	r3, [r3, #0]
    7398:	60fb      	str	r3, [r7, #12]
    739a:	4b47      	ldr	r3, [pc, #284]	; (74b8 <xTaskIncrementTick+0x14c>)
    739c:	681b      	ldr	r3, [r3, #0]
    739e:	4a45      	ldr	r2, [pc, #276]	; (74b4 <xTaskIncrementTick+0x148>)
    73a0:	6013      	str	r3, [r2, #0]
    73a2:	4a45      	ldr	r2, [pc, #276]	; (74b8 <xTaskIncrementTick+0x14c>)
    73a4:	68fb      	ldr	r3, [r7, #12]
    73a6:	6013      	str	r3, [r2, #0]
    73a8:	4b44      	ldr	r3, [pc, #272]	; (74bc <xTaskIncrementTick+0x150>)
    73aa:	681b      	ldr	r3, [r3, #0]
    73ac:	3301      	adds	r3, #1
    73ae:	4a43      	ldr	r2, [pc, #268]	; (74bc <xTaskIncrementTick+0x150>)
    73b0:	6013      	str	r3, [r2, #0]
    73b2:	f000 fab7 	bl	7924 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
    73b6:	4b42      	ldr	r3, [pc, #264]	; (74c0 <xTaskIncrementTick+0x154>)
    73b8:	681b      	ldr	r3, [r3, #0]
    73ba:	693a      	ldr	r2, [r7, #16]
    73bc:	429a      	cmp	r2, r3
    73be:	d34d      	bcc.n	745c <xTaskIncrementTick+0xf0>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    73c0:	4b3c      	ldr	r3, [pc, #240]	; (74b4 <xTaskIncrementTick+0x148>)
    73c2:	681b      	ldr	r3, [r3, #0]
    73c4:	681b      	ldr	r3, [r3, #0]
    73c6:	2b00      	cmp	r3, #0
    73c8:	d101      	bne.n	73ce <xTaskIncrementTick+0x62>
    73ca:	2301      	movs	r3, #1
    73cc:	e000      	b.n	73d0 <xTaskIncrementTick+0x64>
    73ce:	2300      	movs	r3, #0
    73d0:	2b00      	cmp	r3, #0
    73d2:	d004      	beq.n	73de <xTaskIncrementTick+0x72>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    73d4:	4b3a      	ldr	r3, [pc, #232]	; (74c0 <xTaskIncrementTick+0x154>)
    73d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    73da:	601a      	str	r2, [r3, #0]
					break;
    73dc:	e03e      	b.n	745c <xTaskIncrementTick+0xf0>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    73de:	4b35      	ldr	r3, [pc, #212]	; (74b4 <xTaskIncrementTick+0x148>)
    73e0:	681b      	ldr	r3, [r3, #0]
    73e2:	68db      	ldr	r3, [r3, #12]
    73e4:	68db      	ldr	r3, [r3, #12]
    73e6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
    73e8:	68bb      	ldr	r3, [r7, #8]
    73ea:	685b      	ldr	r3, [r3, #4]
    73ec:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
    73ee:	693a      	ldr	r2, [r7, #16]
    73f0:	687b      	ldr	r3, [r7, #4]
    73f2:	429a      	cmp	r2, r3
    73f4:	d203      	bcs.n	73fe <xTaskIncrementTick+0x92>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
    73f6:	4a32      	ldr	r2, [pc, #200]	; (74c0 <xTaskIncrementTick+0x154>)
    73f8:	687b      	ldr	r3, [r7, #4]
    73fa:	6013      	str	r3, [r2, #0]
						break;
    73fc:	e02e      	b.n	745c <xTaskIncrementTick+0xf0>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    73fe:	68bb      	ldr	r3, [r7, #8]
    7400:	3304      	adds	r3, #4
    7402:	4618      	mov	r0, r3
    7404:	f7fe fbb6 	bl	5b74 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    7408:	68bb      	ldr	r3, [r7, #8]
    740a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    740c:	2b00      	cmp	r3, #0
    740e:	d004      	beq.n	741a <xTaskIncrementTick+0xae>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    7410:	68bb      	ldr	r3, [r7, #8]
    7412:	3318      	adds	r3, #24
    7414:	4618      	mov	r0, r3
    7416:	f7fe fbad 	bl	5b74 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
    741a:	68bb      	ldr	r3, [r7, #8]
    741c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    741e:	2201      	movs	r2, #1
    7420:	409a      	lsls	r2, r3
    7422:	4b28      	ldr	r3, [pc, #160]	; (74c4 <xTaskIncrementTick+0x158>)
    7424:	681b      	ldr	r3, [r3, #0]
    7426:	4313      	orrs	r3, r2
    7428:	4a26      	ldr	r2, [pc, #152]	; (74c4 <xTaskIncrementTick+0x158>)
    742a:	6013      	str	r3, [r2, #0]
    742c:	68bb      	ldr	r3, [r7, #8]
    742e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7430:	4613      	mov	r3, r2
    7432:	009b      	lsls	r3, r3, #2
    7434:	4413      	add	r3, r2
    7436:	009b      	lsls	r3, r3, #2
    7438:	4a23      	ldr	r2, [pc, #140]	; (74c8 <xTaskIncrementTick+0x15c>)
    743a:	441a      	add	r2, r3
    743c:	68bb      	ldr	r3, [r7, #8]
    743e:	3304      	adds	r3, #4
    7440:	4619      	mov	r1, r3
    7442:	4610      	mov	r0, r2
    7444:	f7fe fb3b 	bl	5abe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    7448:	68bb      	ldr	r3, [r7, #8]
    744a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    744c:	4b1f      	ldr	r3, [pc, #124]	; (74cc <xTaskIncrementTick+0x160>)
    744e:	681b      	ldr	r3, [r3, #0]
    7450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7452:	429a      	cmp	r2, r3
    7454:	d3b4      	bcc.n	73c0 <xTaskIncrementTick+0x54>
						{
							xSwitchRequired = pdTRUE;
    7456:	2301      	movs	r3, #1
    7458:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    745a:	e7b1      	b.n	73c0 <xTaskIncrementTick+0x54>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
    745c:	4b1b      	ldr	r3, [pc, #108]	; (74cc <xTaskIncrementTick+0x160>)
    745e:	681b      	ldr	r3, [r3, #0]
    7460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7462:	4919      	ldr	r1, [pc, #100]	; (74c8 <xTaskIncrementTick+0x15c>)
    7464:	4613      	mov	r3, r2
    7466:	009b      	lsls	r3, r3, #2
    7468:	4413      	add	r3, r2
    746a:	009b      	lsls	r3, r3, #2
    746c:	440b      	add	r3, r1
    746e:	681b      	ldr	r3, [r3, #0]
    7470:	2b01      	cmp	r3, #1
    7472:	d901      	bls.n	7478 <xTaskIncrementTick+0x10c>
			{
				xSwitchRequired = pdTRUE;
    7474:	2301      	movs	r3, #1
    7476:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
    7478:	4b15      	ldr	r3, [pc, #84]	; (74d0 <xTaskIncrementTick+0x164>)
    747a:	681b      	ldr	r3, [r3, #0]
    747c:	2b00      	cmp	r3, #0
    747e:	d109      	bne.n	7494 <xTaskIncrementTick+0x128>
			{
				vApplicationTickHook();
    7480:	f7f8 ff1c 	bl	2bc <vApplicationTickHook>
    7484:	e006      	b.n	7494 <xTaskIncrementTick+0x128>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
    7486:	4b12      	ldr	r3, [pc, #72]	; (74d0 <xTaskIncrementTick+0x164>)
    7488:	681b      	ldr	r3, [r3, #0]
    748a:	3301      	adds	r3, #1
    748c:	4a10      	ldr	r2, [pc, #64]	; (74d0 <xTaskIncrementTick+0x164>)
    748e:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
    7490:	f7f8 ff14 	bl	2bc <vApplicationTickHook>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
    7494:	4b0f      	ldr	r3, [pc, #60]	; (74d4 <xTaskIncrementTick+0x168>)
    7496:	681b      	ldr	r3, [r3, #0]
    7498:	2b00      	cmp	r3, #0
    749a:	d001      	beq.n	74a0 <xTaskIncrementTick+0x134>
		{
			xSwitchRequired = pdTRUE;
    749c:	2301      	movs	r3, #1
    749e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
    74a0:	697b      	ldr	r3, [r7, #20]
}
    74a2:	4618      	mov	r0, r3
    74a4:	3718      	adds	r7, #24
    74a6:	46bd      	mov	sp, r7
    74a8:	bd80      	pop	{r7, pc}
    74aa:	bf00      	nop
    74ac:	20004538 	.word	0x20004538
    74b0:	20004514 	.word	0x20004514
    74b4:	200044c8 	.word	0x200044c8
    74b8:	200044cc 	.word	0x200044cc
    74bc:	20004528 	.word	0x20004528
    74c0:	20004530 	.word	0x20004530
    74c4:	20004518 	.word	0x20004518
    74c8:	2000443c 	.word	0x2000443c
    74cc:	20004438 	.word	0x20004438
    74d0:	20004520 	.word	0x20004520
    74d4:	20004524 	.word	0x20004524

000074d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    74d8:	b480      	push	{r7}
    74da:	b085      	sub	sp, #20
    74dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    74de:	4b1c      	ldr	r3, [pc, #112]	; (7550 <vTaskSwitchContext+0x78>)
    74e0:	681b      	ldr	r3, [r3, #0]
    74e2:	2b00      	cmp	r3, #0
    74e4:	d003      	beq.n	74ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    74e6:	4b1b      	ldr	r3, [pc, #108]	; (7554 <vTaskSwitchContext+0x7c>)
    74e8:	2201      	movs	r2, #1
    74ea:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    74ec:	e02a      	b.n	7544 <vTaskSwitchContext+0x6c>
		xYieldPending = pdFALSE;
    74ee:	4b19      	ldr	r3, [pc, #100]	; (7554 <vTaskSwitchContext+0x7c>)
    74f0:	2200      	movs	r2, #0
    74f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
    74f4:	4b18      	ldr	r3, [pc, #96]	; (7558 <vTaskSwitchContext+0x80>)
    74f6:	681b      	ldr	r3, [r3, #0]
    74f8:	607b      	str	r3, [r7, #4]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
    74fa:	687b      	ldr	r3, [r7, #4]
    74fc:	fab3 f383 	clz	r3, r3
    7500:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
    7502:	78fb      	ldrb	r3, [r7, #3]
    7504:	f1c3 031f 	rsb	r3, r3, #31
    7508:	60fb      	str	r3, [r7, #12]
    750a:	68fa      	ldr	r2, [r7, #12]
    750c:	4613      	mov	r3, r2
    750e:	009b      	lsls	r3, r3, #2
    7510:	4413      	add	r3, r2
    7512:	009b      	lsls	r3, r3, #2
    7514:	4a11      	ldr	r2, [pc, #68]	; (755c <vTaskSwitchContext+0x84>)
    7516:	4413      	add	r3, r2
    7518:	60bb      	str	r3, [r7, #8]
    751a:	68bb      	ldr	r3, [r7, #8]
    751c:	685b      	ldr	r3, [r3, #4]
    751e:	685a      	ldr	r2, [r3, #4]
    7520:	68bb      	ldr	r3, [r7, #8]
    7522:	605a      	str	r2, [r3, #4]
    7524:	68bb      	ldr	r3, [r7, #8]
    7526:	685a      	ldr	r2, [r3, #4]
    7528:	68bb      	ldr	r3, [r7, #8]
    752a:	3308      	adds	r3, #8
    752c:	429a      	cmp	r2, r3
    752e:	d104      	bne.n	753a <vTaskSwitchContext+0x62>
    7530:	68bb      	ldr	r3, [r7, #8]
    7532:	685b      	ldr	r3, [r3, #4]
    7534:	685a      	ldr	r2, [r3, #4]
    7536:	68bb      	ldr	r3, [r7, #8]
    7538:	605a      	str	r2, [r3, #4]
    753a:	68bb      	ldr	r3, [r7, #8]
    753c:	685b      	ldr	r3, [r3, #4]
    753e:	68db      	ldr	r3, [r3, #12]
    7540:	4a07      	ldr	r2, [pc, #28]	; (7560 <vTaskSwitchContext+0x88>)
    7542:	6013      	str	r3, [r2, #0]
}
    7544:	bf00      	nop
    7546:	3714      	adds	r7, #20
    7548:	46bd      	mov	sp, r7
    754a:	bc80      	pop	{r7}
    754c:	4770      	bx	lr
    754e:	bf00      	nop
    7550:	20004538 	.word	0x20004538
    7554:	20004524 	.word	0x20004524
    7558:	20004518 	.word	0x20004518
    755c:	2000443c 	.word	0x2000443c
    7560:	20004438 	.word	0x20004438

00007564 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
    7564:	b580      	push	{r7, lr}
    7566:	b082      	sub	sp, #8
    7568:	af00      	add	r7, sp, #0
    756a:	6078      	str	r0, [r7, #4]
    756c:	6039      	str	r1, [r7, #0]

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    756e:	4b07      	ldr	r3, [pc, #28]	; (758c <vTaskPlaceOnEventList+0x28>)
    7570:	681b      	ldr	r3, [r3, #0]
    7572:	3318      	adds	r3, #24
    7574:	4619      	mov	r1, r3
    7576:	6878      	ldr	r0, [r7, #4]
    7578:	f7fe fac4 	bl	5b04 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    757c:	2101      	movs	r1, #1
    757e:	6838      	ldr	r0, [r7, #0]
    7580:	f000 fe02 	bl	8188 <prvAddCurrentTaskToDelayedList>
}
    7584:	bf00      	nop
    7586:	3708      	adds	r7, #8
    7588:	46bd      	mov	sp, r7
    758a:	bd80      	pop	{r7, pc}
    758c:	20004438 	.word	0x20004438

00007590 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
    7590:	b580      	push	{r7, lr}
    7592:	b084      	sub	sp, #16
    7594:	af00      	add	r7, sp, #0
    7596:	60f8      	str	r0, [r7, #12]
    7598:	60b9      	str	r1, [r7, #8]
    759a:	607a      	str	r2, [r7, #4]
	configASSERT( uxSchedulerSuspended != 0 );

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    759c:	4b0a      	ldr	r3, [pc, #40]	; (75c8 <vTaskPlaceOnUnorderedEventList+0x38>)
    759e:	681b      	ldr	r3, [r3, #0]
    75a0:	68ba      	ldr	r2, [r7, #8]
    75a2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    75a6:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    75a8:	4b07      	ldr	r3, [pc, #28]	; (75c8 <vTaskPlaceOnUnorderedEventList+0x38>)
    75aa:	681b      	ldr	r3, [r3, #0]
    75ac:	3318      	adds	r3, #24
    75ae:	4619      	mov	r1, r3
    75b0:	68f8      	ldr	r0, [r7, #12]
    75b2:	f7fe fa84 	bl	5abe <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    75b6:	2101      	movs	r1, #1
    75b8:	6878      	ldr	r0, [r7, #4]
    75ba:	f000 fde5 	bl	8188 <prvAddCurrentTaskToDelayedList>
}
    75be:	bf00      	nop
    75c0:	3710      	adds	r7, #16
    75c2:	46bd      	mov	sp, r7
    75c4:	bd80      	pop	{r7, pc}
    75c6:	bf00      	nop
    75c8:	20004438 	.word	0x20004438

000075cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    75cc:	b580      	push	{r7, lr}
    75ce:	b084      	sub	sp, #16
    75d0:	af00      	add	r7, sp, #0
    75d2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    75d4:	687b      	ldr	r3, [r7, #4]
    75d6:	68db      	ldr	r3, [r3, #12]
    75d8:	68db      	ldr	r3, [r3, #12]
    75da:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    75dc:	68bb      	ldr	r3, [r7, #8]
    75de:	3318      	adds	r3, #24
    75e0:	4618      	mov	r0, r3
    75e2:	f7fe fac7 	bl	5b74 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    75e6:	4b1d      	ldr	r3, [pc, #116]	; (765c <xTaskRemoveFromEventList+0x90>)
    75e8:	681b      	ldr	r3, [r3, #0]
    75ea:	2b00      	cmp	r3, #0
    75ec:	d11c      	bne.n	7628 <xTaskRemoveFromEventList+0x5c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    75ee:	68bb      	ldr	r3, [r7, #8]
    75f0:	3304      	adds	r3, #4
    75f2:	4618      	mov	r0, r3
    75f4:	f7fe fabe 	bl	5b74 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
    75f8:	68bb      	ldr	r3, [r7, #8]
    75fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    75fc:	2201      	movs	r2, #1
    75fe:	409a      	lsls	r2, r3
    7600:	4b17      	ldr	r3, [pc, #92]	; (7660 <xTaskRemoveFromEventList+0x94>)
    7602:	681b      	ldr	r3, [r3, #0]
    7604:	4313      	orrs	r3, r2
    7606:	4a16      	ldr	r2, [pc, #88]	; (7660 <xTaskRemoveFromEventList+0x94>)
    7608:	6013      	str	r3, [r2, #0]
    760a:	68bb      	ldr	r3, [r7, #8]
    760c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    760e:	4613      	mov	r3, r2
    7610:	009b      	lsls	r3, r3, #2
    7612:	4413      	add	r3, r2
    7614:	009b      	lsls	r3, r3, #2
    7616:	4a13      	ldr	r2, [pc, #76]	; (7664 <xTaskRemoveFromEventList+0x98>)
    7618:	441a      	add	r2, r3
    761a:	68bb      	ldr	r3, [r7, #8]
    761c:	3304      	adds	r3, #4
    761e:	4619      	mov	r1, r3
    7620:	4610      	mov	r0, r2
    7622:	f7fe fa4c 	bl	5abe <vListInsertEnd>
    7626:	e005      	b.n	7634 <xTaskRemoveFromEventList+0x68>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    7628:	68bb      	ldr	r3, [r7, #8]
    762a:	3318      	adds	r3, #24
    762c:	4619      	mov	r1, r3
    762e:	480e      	ldr	r0, [pc, #56]	; (7668 <xTaskRemoveFromEventList+0x9c>)
    7630:	f7fe fa45 	bl	5abe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    7634:	68bb      	ldr	r3, [r7, #8]
    7636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7638:	4b0c      	ldr	r3, [pc, #48]	; (766c <xTaskRemoveFromEventList+0xa0>)
    763a:	681b      	ldr	r3, [r3, #0]
    763c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    763e:	429a      	cmp	r2, r3
    7640:	d905      	bls.n	764e <xTaskRemoveFromEventList+0x82>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
    7642:	2301      	movs	r3, #1
    7644:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    7646:	4b0a      	ldr	r3, [pc, #40]	; (7670 <xTaskRemoveFromEventList+0xa4>)
    7648:	2201      	movs	r2, #1
    764a:	601a      	str	r2, [r3, #0]
    764c:	e001      	b.n	7652 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		xReturn = pdFALSE;
    764e:	2300      	movs	r3, #0
    7650:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
    7652:	68fb      	ldr	r3, [r7, #12]
}
    7654:	4618      	mov	r0, r3
    7656:	3710      	adds	r7, #16
    7658:	46bd      	mov	sp, r7
    765a:	bd80      	pop	{r7, pc}
    765c:	20004538 	.word	0x20004538
    7660:	20004518 	.word	0x20004518
    7664:	2000443c 	.word	0x2000443c
    7668:	200044d0 	.word	0x200044d0
    766c:	20004438 	.word	0x20004438
    7670:	20004524 	.word	0x20004524

00007674 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
    7674:	b580      	push	{r7, lr}
    7676:	b084      	sub	sp, #16
    7678:	af00      	add	r7, sp, #0
    767a:	6078      	str	r0, [r7, #4]
    767c:	6039      	str	r1, [r7, #0]
	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    767e:	683b      	ldr	r3, [r7, #0]
    7680:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
    7684:	687b      	ldr	r3, [r7, #4]
    7686:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
    7688:	687b      	ldr	r3, [r7, #4]
    768a:	68db      	ldr	r3, [r3, #12]
    768c:	60fb      	str	r3, [r7, #12]
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( pxEventListItem );
    768e:	6878      	ldr	r0, [r7, #4]
    7690:	f7fe fa70 	bl	5b74 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    7694:	68fb      	ldr	r3, [r7, #12]
    7696:	3304      	adds	r3, #4
    7698:	4618      	mov	r0, r3
    769a:	f7fe fa6b 	bl	5b74 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
    769e:	68fb      	ldr	r3, [r7, #12]
    76a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    76a2:	2201      	movs	r2, #1
    76a4:	409a      	lsls	r2, r3
    76a6:	4b10      	ldr	r3, [pc, #64]	; (76e8 <vTaskRemoveFromUnorderedEventList+0x74>)
    76a8:	681b      	ldr	r3, [r3, #0]
    76aa:	4313      	orrs	r3, r2
    76ac:	4a0e      	ldr	r2, [pc, #56]	; (76e8 <vTaskRemoveFromUnorderedEventList+0x74>)
    76ae:	6013      	str	r3, [r2, #0]
    76b0:	68fb      	ldr	r3, [r7, #12]
    76b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    76b4:	4613      	mov	r3, r2
    76b6:	009b      	lsls	r3, r3, #2
    76b8:	4413      	add	r3, r2
    76ba:	009b      	lsls	r3, r3, #2
    76bc:	4a0b      	ldr	r2, [pc, #44]	; (76ec <vTaskRemoveFromUnorderedEventList+0x78>)
    76be:	441a      	add	r2, r3
    76c0:	68fb      	ldr	r3, [r7, #12]
    76c2:	3304      	adds	r3, #4
    76c4:	4619      	mov	r1, r3
    76c6:	4610      	mov	r0, r2
    76c8:	f7fe f9f9 	bl	5abe <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    76cc:	68fb      	ldr	r3, [r7, #12]
    76ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    76d0:	4b07      	ldr	r3, [pc, #28]	; (76f0 <vTaskRemoveFromUnorderedEventList+0x7c>)
    76d2:	681b      	ldr	r3, [r3, #0]
    76d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    76d6:	429a      	cmp	r2, r3
    76d8:	d902      	bls.n	76e0 <vTaskRemoveFromUnorderedEventList+0x6c>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
    76da:	4b06      	ldr	r3, [pc, #24]	; (76f4 <vTaskRemoveFromUnorderedEventList+0x80>)
    76dc:	2201      	movs	r2, #1
    76de:	601a      	str	r2, [r3, #0]
	}
}
    76e0:	bf00      	nop
    76e2:	3710      	adds	r7, #16
    76e4:	46bd      	mov	sp, r7
    76e6:	bd80      	pop	{r7, pc}
    76e8:	20004518 	.word	0x20004518
    76ec:	2000443c 	.word	0x2000443c
    76f0:	20004438 	.word	0x20004438
    76f4:	20004524 	.word	0x20004524

000076f8 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    76f8:	b580      	push	{r7, lr}
    76fa:	b082      	sub	sp, #8
    76fc:	af00      	add	r7, sp, #0
    76fe:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
	taskENTER_CRITICAL();
    7700:	f001 fa66 	bl	8bd0 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
    7704:	4b06      	ldr	r3, [pc, #24]	; (7720 <vTaskSetTimeOutState+0x28>)
    7706:	681a      	ldr	r2, [r3, #0]
    7708:	687b      	ldr	r3, [r7, #4]
    770a:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
    770c:	4b05      	ldr	r3, [pc, #20]	; (7724 <vTaskSetTimeOutState+0x2c>)
    770e:	681a      	ldr	r2, [r3, #0]
    7710:	687b      	ldr	r3, [r7, #4]
    7712:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
    7714:	f001 fa76 	bl	8c04 <vPortExitCritical>
}
    7718:	bf00      	nop
    771a:	3708      	adds	r7, #8
    771c:	46bd      	mov	sp, r7
    771e:	bd80      	pop	{r7, pc}
    7720:	20004528 	.word	0x20004528
    7724:	20004514 	.word	0x20004514

00007728 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    7728:	b480      	push	{r7}
    772a:	b083      	sub	sp, #12
    772c:	af00      	add	r7, sp, #0
    772e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    7730:	4b06      	ldr	r3, [pc, #24]	; (774c <vTaskInternalSetTimeOutState+0x24>)
    7732:	681a      	ldr	r2, [r3, #0]
    7734:	687b      	ldr	r3, [r7, #4]
    7736:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    7738:	4b05      	ldr	r3, [pc, #20]	; (7750 <vTaskInternalSetTimeOutState+0x28>)
    773a:	681a      	ldr	r2, [r3, #0]
    773c:	687b      	ldr	r3, [r7, #4]
    773e:	605a      	str	r2, [r3, #4]
}
    7740:	bf00      	nop
    7742:	370c      	adds	r7, #12
    7744:	46bd      	mov	sp, r7
    7746:	bc80      	pop	{r7}
    7748:	4770      	bx	lr
    774a:	bf00      	nop
    774c:	20004528 	.word	0x20004528
    7750:	20004514 	.word	0x20004514

00007754 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
    7754:	b580      	push	{r7, lr}
    7756:	b086      	sub	sp, #24
    7758:	af00      	add	r7, sp, #0
    775a:	6078      	str	r0, [r7, #4]
    775c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    775e:	f001 fa37 	bl	8bd0 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    7762:	4b1d      	ldr	r3, [pc, #116]	; (77d8 <xTaskCheckForTimeOut+0x84>)
    7764:	681b      	ldr	r3, [r3, #0]
    7766:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    7768:	687b      	ldr	r3, [r7, #4]
    776a:	685b      	ldr	r3, [r3, #4]
    776c:	693a      	ldr	r2, [r7, #16]
    776e:	1ad3      	subs	r3, r2, r3
    7770:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
    7772:	683b      	ldr	r3, [r7, #0]
    7774:	681b      	ldr	r3, [r3, #0]
    7776:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    777a:	d102      	bne.n	7782 <xTaskCheckForTimeOut+0x2e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
    777c:	2300      	movs	r3, #0
    777e:	617b      	str	r3, [r7, #20]
    7780:	e023      	b.n	77ca <xTaskCheckForTimeOut+0x76>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    7782:	687b      	ldr	r3, [r7, #4]
    7784:	681a      	ldr	r2, [r3, #0]
    7786:	4b15      	ldr	r3, [pc, #84]	; (77dc <xTaskCheckForTimeOut+0x88>)
    7788:	681b      	ldr	r3, [r3, #0]
    778a:	429a      	cmp	r2, r3
    778c:	d007      	beq.n	779e <xTaskCheckForTimeOut+0x4a>
    778e:	687b      	ldr	r3, [r7, #4]
    7790:	685b      	ldr	r3, [r3, #4]
    7792:	693a      	ldr	r2, [r7, #16]
    7794:	429a      	cmp	r2, r3
    7796:	d302      	bcc.n	779e <xTaskCheckForTimeOut+0x4a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
    7798:	2301      	movs	r3, #1
    779a:	617b      	str	r3, [r7, #20]
    779c:	e015      	b.n	77ca <xTaskCheckForTimeOut+0x76>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    779e:	683b      	ldr	r3, [r7, #0]
    77a0:	681b      	ldr	r3, [r3, #0]
    77a2:	68fa      	ldr	r2, [r7, #12]
    77a4:	429a      	cmp	r2, r3
    77a6:	d20b      	bcs.n	77c0 <xTaskCheckForTimeOut+0x6c>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
    77a8:	683b      	ldr	r3, [r7, #0]
    77aa:	681a      	ldr	r2, [r3, #0]
    77ac:	68fb      	ldr	r3, [r7, #12]
    77ae:	1ad2      	subs	r2, r2, r3
    77b0:	683b      	ldr	r3, [r7, #0]
    77b2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
    77b4:	6878      	ldr	r0, [r7, #4]
    77b6:	f7ff ffb7 	bl	7728 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
    77ba:	2300      	movs	r3, #0
    77bc:	617b      	str	r3, [r7, #20]
    77be:	e004      	b.n	77ca <xTaskCheckForTimeOut+0x76>
		}
		else
		{
			*pxTicksToWait = 0;
    77c0:	683b      	ldr	r3, [r7, #0]
    77c2:	2200      	movs	r2, #0
    77c4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
    77c6:	2301      	movs	r3, #1
    77c8:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
    77ca:	f001 fa1b 	bl	8c04 <vPortExitCritical>

	return xReturn;
    77ce:	697b      	ldr	r3, [r7, #20]
}
    77d0:	4618      	mov	r0, r3
    77d2:	3718      	adds	r7, #24
    77d4:	46bd      	mov	sp, r7
    77d6:	bd80      	pop	{r7, pc}
    77d8:	20004514 	.word	0x20004514
    77dc:	20004528 	.word	0x20004528

000077e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    77e0:	b480      	push	{r7}
    77e2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
    77e4:	4b03      	ldr	r3, [pc, #12]	; (77f4 <vTaskMissedYield+0x14>)
    77e6:	2201      	movs	r2, #1
    77e8:	601a      	str	r2, [r3, #0]
}
    77ea:	bf00      	nop
    77ec:	46bd      	mov	sp, r7
    77ee:	bc80      	pop	{r7}
    77f0:	4770      	bx	lr
    77f2:	bf00      	nop
    77f4:	20004524 	.word	0x20004524

000077f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    77f8:	b580      	push	{r7, lr}
    77fa:	b082      	sub	sp, #8
    77fc:	af00      	add	r7, sp, #0
    77fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
    7800:	f000 f852 	bl	78a8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    7804:	4b06      	ldr	r3, [pc, #24]	; (7820 <prvIdleTask+0x28>)
    7806:	681b      	ldr	r3, [r3, #0]
    7808:	2b01      	cmp	r3, #1
    780a:	d9f9      	bls.n	7800 <prvIdleTask+0x8>
			{
				taskYIELD();
    780c:	4b05      	ldr	r3, [pc, #20]	; (7824 <prvIdleTask+0x2c>)
    780e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    7812:	601a      	str	r2, [r3, #0]
    7814:	f3bf 8f4f 	dsb	sy
    7818:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
    781c:	e7f0      	b.n	7800 <prvIdleTask+0x8>
    781e:	bf00      	nop
    7820:	2000443c 	.word	0x2000443c
    7824:	e000ed04 	.word	0xe000ed04

00007828 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
    7828:	b580      	push	{r7, lr}
    782a:	b082      	sub	sp, #8
    782c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    782e:	2300      	movs	r3, #0
    7830:	607b      	str	r3, [r7, #4]
    7832:	e00c      	b.n	784e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    7834:	687a      	ldr	r2, [r7, #4]
    7836:	4613      	mov	r3, r2
    7838:	009b      	lsls	r3, r3, #2
    783a:	4413      	add	r3, r2
    783c:	009b      	lsls	r3, r3, #2
    783e:	4a12      	ldr	r2, [pc, #72]	; (7888 <prvInitialiseTaskLists+0x60>)
    7840:	4413      	add	r3, r2
    7842:	4618      	mov	r0, r3
    7844:	f7fe f910 	bl	5a68 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    7848:	687b      	ldr	r3, [r7, #4]
    784a:	3301      	adds	r3, #1
    784c:	607b      	str	r3, [r7, #4]
    784e:	687b      	ldr	r3, [r7, #4]
    7850:	2b04      	cmp	r3, #4
    7852:	d9ef      	bls.n	7834 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
    7854:	480d      	ldr	r0, [pc, #52]	; (788c <prvInitialiseTaskLists+0x64>)
    7856:	f7fe f907 	bl	5a68 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
    785a:	480d      	ldr	r0, [pc, #52]	; (7890 <prvInitialiseTaskLists+0x68>)
    785c:	f7fe f904 	bl	5a68 <vListInitialise>
	vListInitialise( &xPendingReadyList );
    7860:	480c      	ldr	r0, [pc, #48]	; (7894 <prvInitialiseTaskLists+0x6c>)
    7862:	f7fe f901 	bl	5a68 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
    7866:	480c      	ldr	r0, [pc, #48]	; (7898 <prvInitialiseTaskLists+0x70>)
    7868:	f7fe f8fe 	bl	5a68 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
    786c:	480b      	ldr	r0, [pc, #44]	; (789c <prvInitialiseTaskLists+0x74>)
    786e:	f7fe f8fb 	bl	5a68 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    7872:	4b0b      	ldr	r3, [pc, #44]	; (78a0 <prvInitialiseTaskLists+0x78>)
    7874:	4a05      	ldr	r2, [pc, #20]	; (788c <prvInitialiseTaskLists+0x64>)
    7876:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    7878:	4b0a      	ldr	r3, [pc, #40]	; (78a4 <prvInitialiseTaskLists+0x7c>)
    787a:	4a05      	ldr	r2, [pc, #20]	; (7890 <prvInitialiseTaskLists+0x68>)
    787c:	601a      	str	r2, [r3, #0]
}
    787e:	bf00      	nop
    7880:	3708      	adds	r7, #8
    7882:	46bd      	mov	sp, r7
    7884:	bd80      	pop	{r7, pc}
    7886:	bf00      	nop
    7888:	2000443c 	.word	0x2000443c
    788c:	200044a0 	.word	0x200044a0
    7890:	200044b4 	.word	0x200044b4
    7894:	200044d0 	.word	0x200044d0
    7898:	200044e4 	.word	0x200044e4
    789c:	200044fc 	.word	0x200044fc
    78a0:	200044c8 	.word	0x200044c8
    78a4:	200044cc 	.word	0x200044cc

000078a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    78a8:	b580      	push	{r7, lr}
    78aa:	b082      	sub	sp, #8
    78ac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    78ae:	e019      	b.n	78e4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
    78b0:	f001 f98e 	bl	8bd0 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    78b4:	4b10      	ldr	r3, [pc, #64]	; (78f8 <prvCheckTasksWaitingTermination+0x50>)
    78b6:	68db      	ldr	r3, [r3, #12]
    78b8:	68db      	ldr	r3, [r3, #12]
    78ba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    78bc:	687b      	ldr	r3, [r7, #4]
    78be:	3304      	adds	r3, #4
    78c0:	4618      	mov	r0, r3
    78c2:	f7fe f957 	bl	5b74 <uxListRemove>
				--uxCurrentNumberOfTasks;
    78c6:	4b0d      	ldr	r3, [pc, #52]	; (78fc <prvCheckTasksWaitingTermination+0x54>)
    78c8:	681b      	ldr	r3, [r3, #0]
    78ca:	3b01      	subs	r3, #1
    78cc:	4a0b      	ldr	r2, [pc, #44]	; (78fc <prvCheckTasksWaitingTermination+0x54>)
    78ce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
    78d0:	4b0b      	ldr	r3, [pc, #44]	; (7900 <prvCheckTasksWaitingTermination+0x58>)
    78d2:	681b      	ldr	r3, [r3, #0]
    78d4:	3b01      	subs	r3, #1
    78d6:	4a0a      	ldr	r2, [pc, #40]	; (7900 <prvCheckTasksWaitingTermination+0x58>)
    78d8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
    78da:	f001 f993 	bl	8c04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
    78de:	6878      	ldr	r0, [r7, #4]
    78e0:	f000 f810 	bl	7904 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    78e4:	4b06      	ldr	r3, [pc, #24]	; (7900 <prvCheckTasksWaitingTermination+0x58>)
    78e6:	681b      	ldr	r3, [r3, #0]
    78e8:	2b00      	cmp	r3, #0
    78ea:	d1e1      	bne.n	78b0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
    78ec:	bf00      	nop
    78ee:	bf00      	nop
    78f0:	3708      	adds	r7, #8
    78f2:	46bd      	mov	sp, r7
    78f4:	bd80      	pop	{r7, pc}
    78f6:	bf00      	nop
    78f8:	200044e4 	.word	0x200044e4
    78fc:	20004510 	.word	0x20004510
    7900:	200044f8 	.word	0x200044f8

00007904 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
    7904:	b580      	push	{r7, lr}
    7906:	b082      	sub	sp, #8
    7908:	af00      	add	r7, sp, #0
    790a:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
    790c:	687b      	ldr	r3, [r7, #4]
    790e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    7910:	4618      	mov	r0, r3
    7912:	f7f8 fc41 	bl	198 <vPortFree>
			vPortFree( pxTCB );
    7916:	6878      	ldr	r0, [r7, #4]
    7918:	f7f8 fc3e 	bl	198 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
    791c:	bf00      	nop
    791e:	3708      	adds	r7, #8
    7920:	46bd      	mov	sp, r7
    7922:	bd80      	pop	{r7, pc}

00007924 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    7924:	b480      	push	{r7}
    7926:	b083      	sub	sp, #12
    7928:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    792a:	4b0e      	ldr	r3, [pc, #56]	; (7964 <prvResetNextTaskUnblockTime+0x40>)
    792c:	681b      	ldr	r3, [r3, #0]
    792e:	681b      	ldr	r3, [r3, #0]
    7930:	2b00      	cmp	r3, #0
    7932:	d101      	bne.n	7938 <prvResetNextTaskUnblockTime+0x14>
    7934:	2301      	movs	r3, #1
    7936:	e000      	b.n	793a <prvResetNextTaskUnblockTime+0x16>
    7938:	2300      	movs	r3, #0
    793a:	2b00      	cmp	r3, #0
    793c:	d004      	beq.n	7948 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    793e:	4b0a      	ldr	r3, [pc, #40]	; (7968 <prvResetNextTaskUnblockTime+0x44>)
    7940:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7944:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
    7946:	e008      	b.n	795a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    7948:	4b06      	ldr	r3, [pc, #24]	; (7964 <prvResetNextTaskUnblockTime+0x40>)
    794a:	681b      	ldr	r3, [r3, #0]
    794c:	68db      	ldr	r3, [r3, #12]
    794e:	68db      	ldr	r3, [r3, #12]
    7950:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    7952:	687b      	ldr	r3, [r7, #4]
    7954:	685b      	ldr	r3, [r3, #4]
    7956:	4a04      	ldr	r2, [pc, #16]	; (7968 <prvResetNextTaskUnblockTime+0x44>)
    7958:	6013      	str	r3, [r2, #0]
}
    795a:	bf00      	nop
    795c:	370c      	adds	r7, #12
    795e:	46bd      	mov	sp, r7
    7960:	bc80      	pop	{r7}
    7962:	4770      	bx	lr
    7964:	200044c8 	.word	0x200044c8
    7968:	20004530 	.word	0x20004530

0000796c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
    796c:	b480      	push	{r7}
    796e:	b083      	sub	sp, #12
    7970:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    7972:	4b04      	ldr	r3, [pc, #16]	; (7984 <xTaskGetCurrentTaskHandle+0x18>)
    7974:	681b      	ldr	r3, [r3, #0]
    7976:	607b      	str	r3, [r7, #4]

		return xReturn;
    7978:	687b      	ldr	r3, [r7, #4]
	}
    797a:	4618      	mov	r0, r3
    797c:	370c      	adds	r7, #12
    797e:	46bd      	mov	sp, r7
    7980:	bc80      	pop	{r7}
    7982:	4770      	bx	lr
    7984:	20004438 	.word	0x20004438

00007988 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
    7988:	b580      	push	{r7, lr}
    798a:	b084      	sub	sp, #16
    798c:	af00      	add	r7, sp, #0
    798e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
    7990:	687b      	ldr	r3, [r7, #4]
    7992:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
    7994:	2300      	movs	r3, #0
    7996:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
    7998:	687b      	ldr	r3, [r7, #4]
    799a:	2b00      	cmp	r3, #0
    799c:	d06e      	beq.n	7a7c <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
    799e:	68bb      	ldr	r3, [r7, #8]
    79a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    79a2:	4b39      	ldr	r3, [pc, #228]	; (7a88 <xTaskPriorityInherit+0x100>)
    79a4:	681b      	ldr	r3, [r3, #0]
    79a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    79a8:	429a      	cmp	r2, r3
    79aa:	d25e      	bcs.n	7a6a <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    79ac:	68bb      	ldr	r3, [r7, #8]
    79ae:	699b      	ldr	r3, [r3, #24]
    79b0:	2b00      	cmp	r3, #0
    79b2:	db06      	blt.n	79c2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    79b4:	4b34      	ldr	r3, [pc, #208]	; (7a88 <xTaskPriorityInherit+0x100>)
    79b6:	681b      	ldr	r3, [r3, #0]
    79b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    79ba:	f1c3 0205 	rsb	r2, r3, #5
    79be:	68bb      	ldr	r3, [r7, #8]
    79c0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
    79c2:	68bb      	ldr	r3, [r7, #8]
    79c4:	6959      	ldr	r1, [r3, #20]
    79c6:	68bb      	ldr	r3, [r7, #8]
    79c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    79ca:	4613      	mov	r3, r2
    79cc:	009b      	lsls	r3, r3, #2
    79ce:	4413      	add	r3, r2
    79d0:	009b      	lsls	r3, r3, #2
    79d2:	4a2e      	ldr	r2, [pc, #184]	; (7a8c <xTaskPriorityInherit+0x104>)
    79d4:	4413      	add	r3, r2
    79d6:	4299      	cmp	r1, r3
    79d8:	d101      	bne.n	79de <xTaskPriorityInherit+0x56>
    79da:	2301      	movs	r3, #1
    79dc:	e000      	b.n	79e0 <xTaskPriorityInherit+0x58>
    79de:	2300      	movs	r3, #0
    79e0:	2b00      	cmp	r3, #0
    79e2:	d03a      	beq.n	7a5a <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    79e4:	68bb      	ldr	r3, [r7, #8]
    79e6:	3304      	adds	r3, #4
    79e8:	4618      	mov	r0, r3
    79ea:	f7fe f8c3 	bl	5b74 <uxListRemove>
    79ee:	4603      	mov	r3, r0
    79f0:	2b00      	cmp	r3, #0
    79f2:	d115      	bne.n	7a20 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
    79f4:	68bb      	ldr	r3, [r7, #8]
    79f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    79f8:	4924      	ldr	r1, [pc, #144]	; (7a8c <xTaskPriorityInherit+0x104>)
    79fa:	4613      	mov	r3, r2
    79fc:	009b      	lsls	r3, r3, #2
    79fe:	4413      	add	r3, r2
    7a00:	009b      	lsls	r3, r3, #2
    7a02:	440b      	add	r3, r1
    7a04:	681b      	ldr	r3, [r3, #0]
    7a06:	2b00      	cmp	r3, #0
    7a08:	d10a      	bne.n	7a20 <xTaskPriorityInherit+0x98>
    7a0a:	68bb      	ldr	r3, [r7, #8]
    7a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7a0e:	2201      	movs	r2, #1
    7a10:	fa02 f303 	lsl.w	r3, r2, r3
    7a14:	43da      	mvns	r2, r3
    7a16:	4b1e      	ldr	r3, [pc, #120]	; (7a90 <xTaskPriorityInherit+0x108>)
    7a18:	681b      	ldr	r3, [r3, #0]
    7a1a:	4013      	ands	r3, r2
    7a1c:	4a1c      	ldr	r2, [pc, #112]	; (7a90 <xTaskPriorityInherit+0x108>)
    7a1e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    7a20:	4b19      	ldr	r3, [pc, #100]	; (7a88 <xTaskPriorityInherit+0x100>)
    7a22:	681b      	ldr	r3, [r3, #0]
    7a24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7a26:	68bb      	ldr	r3, [r7, #8]
    7a28:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
    7a2a:	68bb      	ldr	r3, [r7, #8]
    7a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7a2e:	2201      	movs	r2, #1
    7a30:	409a      	lsls	r2, r3
    7a32:	4b17      	ldr	r3, [pc, #92]	; (7a90 <xTaskPriorityInherit+0x108>)
    7a34:	681b      	ldr	r3, [r3, #0]
    7a36:	4313      	orrs	r3, r2
    7a38:	4a15      	ldr	r2, [pc, #84]	; (7a90 <xTaskPriorityInherit+0x108>)
    7a3a:	6013      	str	r3, [r2, #0]
    7a3c:	68bb      	ldr	r3, [r7, #8]
    7a3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7a40:	4613      	mov	r3, r2
    7a42:	009b      	lsls	r3, r3, #2
    7a44:	4413      	add	r3, r2
    7a46:	009b      	lsls	r3, r3, #2
    7a48:	4a10      	ldr	r2, [pc, #64]	; (7a8c <xTaskPriorityInherit+0x104>)
    7a4a:	441a      	add	r2, r3
    7a4c:	68bb      	ldr	r3, [r7, #8]
    7a4e:	3304      	adds	r3, #4
    7a50:	4619      	mov	r1, r3
    7a52:	4610      	mov	r0, r2
    7a54:	f7fe f833 	bl	5abe <vListInsertEnd>
    7a58:	e004      	b.n	7a64 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    7a5a:	4b0b      	ldr	r3, [pc, #44]	; (7a88 <xTaskPriorityInherit+0x100>)
    7a5c:	681b      	ldr	r3, [r3, #0]
    7a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7a60:	68bb      	ldr	r3, [r7, #8]
    7a62:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
    7a64:	2301      	movs	r3, #1
    7a66:	60fb      	str	r3, [r7, #12]
    7a68:	e008      	b.n	7a7c <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
    7a6a:	68bb      	ldr	r3, [r7, #8]
    7a6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    7a6e:	4b06      	ldr	r3, [pc, #24]	; (7a88 <xTaskPriorityInherit+0x100>)
    7a70:	681b      	ldr	r3, [r3, #0]
    7a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7a74:	429a      	cmp	r2, r3
    7a76:	d201      	bcs.n	7a7c <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
    7a78:	2301      	movs	r3, #1
    7a7a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    7a7c:	68fb      	ldr	r3, [r7, #12]
	}
    7a7e:	4618      	mov	r0, r3
    7a80:	3710      	adds	r7, #16
    7a82:	46bd      	mov	sp, r7
    7a84:	bd80      	pop	{r7, pc}
    7a86:	bf00      	nop
    7a88:	20004438 	.word	0x20004438
    7a8c:	2000443c 	.word	0x2000443c
    7a90:	20004518 	.word	0x20004518

00007a94 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
    7a94:	b580      	push	{r7, lr}
    7a96:	b084      	sub	sp, #16
    7a98:	af00      	add	r7, sp, #0
    7a9a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
    7a9c:	687b      	ldr	r3, [r7, #4]
    7a9e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
    7aa0:	2300      	movs	r3, #0
    7aa2:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    7aa4:	687b      	ldr	r3, [r7, #4]
    7aa6:	2b00      	cmp	r3, #0
    7aa8:	d04f      	beq.n	7b4a <xTaskPriorityDisinherit+0xb6>
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
    7aaa:	68bb      	ldr	r3, [r7, #8]
    7aac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    7aae:	1e5a      	subs	r2, r3, #1
    7ab0:	68bb      	ldr	r3, [r7, #8]
    7ab2:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    7ab4:	68bb      	ldr	r3, [r7, #8]
    7ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7ab8:	68bb      	ldr	r3, [r7, #8]
    7aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    7abc:	429a      	cmp	r2, r3
    7abe:	d044      	beq.n	7b4a <xTaskPriorityDisinherit+0xb6>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    7ac0:	68bb      	ldr	r3, [r7, #8]
    7ac2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    7ac4:	2b00      	cmp	r3, #0
    7ac6:	d140      	bne.n	7b4a <xTaskPriorityDisinherit+0xb6>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    7ac8:	68bb      	ldr	r3, [r7, #8]
    7aca:	3304      	adds	r3, #4
    7acc:	4618      	mov	r0, r3
    7ace:	f7fe f851 	bl	5b74 <uxListRemove>
    7ad2:	4603      	mov	r3, r0
    7ad4:	2b00      	cmp	r3, #0
    7ad6:	d115      	bne.n	7b04 <xTaskPriorityDisinherit+0x70>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
    7ad8:	68bb      	ldr	r3, [r7, #8]
    7ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7adc:	491d      	ldr	r1, [pc, #116]	; (7b54 <xTaskPriorityDisinherit+0xc0>)
    7ade:	4613      	mov	r3, r2
    7ae0:	009b      	lsls	r3, r3, #2
    7ae2:	4413      	add	r3, r2
    7ae4:	009b      	lsls	r3, r3, #2
    7ae6:	440b      	add	r3, r1
    7ae8:	681b      	ldr	r3, [r3, #0]
    7aea:	2b00      	cmp	r3, #0
    7aec:	d10a      	bne.n	7b04 <xTaskPriorityDisinherit+0x70>
    7aee:	68bb      	ldr	r3, [r7, #8]
    7af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7af2:	2201      	movs	r2, #1
    7af4:	fa02 f303 	lsl.w	r3, r2, r3
    7af8:	43da      	mvns	r2, r3
    7afa:	4b17      	ldr	r3, [pc, #92]	; (7b58 <xTaskPriorityDisinherit+0xc4>)
    7afc:	681b      	ldr	r3, [r3, #0]
    7afe:	4013      	ands	r3, r2
    7b00:	4a15      	ldr	r2, [pc, #84]	; (7b58 <xTaskPriorityDisinherit+0xc4>)
    7b02:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
    7b04:	68bb      	ldr	r3, [r7, #8]
    7b06:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    7b08:	68bb      	ldr	r3, [r7, #8]
    7b0a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    7b0c:	68bb      	ldr	r3, [r7, #8]
    7b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7b10:	f1c3 0205 	rsb	r2, r3, #5
    7b14:	68bb      	ldr	r3, [r7, #8]
    7b16:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
    7b18:	68bb      	ldr	r3, [r7, #8]
    7b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7b1c:	2201      	movs	r2, #1
    7b1e:	409a      	lsls	r2, r3
    7b20:	4b0d      	ldr	r3, [pc, #52]	; (7b58 <xTaskPriorityDisinherit+0xc4>)
    7b22:	681b      	ldr	r3, [r3, #0]
    7b24:	4313      	orrs	r3, r2
    7b26:	4a0c      	ldr	r2, [pc, #48]	; (7b58 <xTaskPriorityDisinherit+0xc4>)
    7b28:	6013      	str	r3, [r2, #0]
    7b2a:	68bb      	ldr	r3, [r7, #8]
    7b2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7b2e:	4613      	mov	r3, r2
    7b30:	009b      	lsls	r3, r3, #2
    7b32:	4413      	add	r3, r2
    7b34:	009b      	lsls	r3, r3, #2
    7b36:	4a07      	ldr	r2, [pc, #28]	; (7b54 <xTaskPriorityDisinherit+0xc0>)
    7b38:	441a      	add	r2, r3
    7b3a:	68bb      	ldr	r3, [r7, #8]
    7b3c:	3304      	adds	r3, #4
    7b3e:	4619      	mov	r1, r3
    7b40:	4610      	mov	r0, r2
    7b42:	f7fd ffbc 	bl	5abe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
    7b46:	2301      	movs	r3, #1
    7b48:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    7b4a:	68fb      	ldr	r3, [r7, #12]
	}
    7b4c:	4618      	mov	r0, r3
    7b4e:	3710      	adds	r7, #16
    7b50:	46bd      	mov	sp, r7
    7b52:	bd80      	pop	{r7, pc}
    7b54:	2000443c 	.word	0x2000443c
    7b58:	20004518 	.word	0x20004518

00007b5c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
    7b5c:	b580      	push	{r7, lr}
    7b5e:	b086      	sub	sp, #24
    7b60:	af00      	add	r7, sp, #0
    7b62:	6078      	str	r0, [r7, #4]
    7b64:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
    7b66:	687b      	ldr	r3, [r7, #4]
    7b68:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
    7b6a:	2301      	movs	r3, #1
    7b6c:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    7b6e:	687b      	ldr	r3, [r7, #4]
    7b70:	2b00      	cmp	r3, #0
    7b72:	d068      	beq.n	7c46 <vTaskPriorityDisinheritAfterTimeout+0xea>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
    7b74:	693b      	ldr	r3, [r7, #16]
    7b76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    7b78:	683a      	ldr	r2, [r7, #0]
    7b7a:	429a      	cmp	r2, r3
    7b7c:	d902      	bls.n	7b84 <vTaskPriorityDisinheritAfterTimeout+0x28>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
    7b7e:	683b      	ldr	r3, [r7, #0]
    7b80:	617b      	str	r3, [r7, #20]
    7b82:	e002      	b.n	7b8a <vTaskPriorityDisinheritAfterTimeout+0x2e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
    7b84:	693b      	ldr	r3, [r7, #16]
    7b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    7b88:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
    7b8a:	693b      	ldr	r3, [r7, #16]
    7b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7b8e:	697a      	ldr	r2, [r7, #20]
    7b90:	429a      	cmp	r2, r3
    7b92:	d058      	beq.n	7c46 <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
    7b94:	693b      	ldr	r3, [r7, #16]
    7b96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    7b98:	68fa      	ldr	r2, [r7, #12]
    7b9a:	429a      	cmp	r2, r3
    7b9c:	d153      	bne.n	7c46 <vTaskPriorityDisinheritAfterTimeout+0xea>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
    7b9e:	693b      	ldr	r3, [r7, #16]
    7ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7ba2:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
    7ba4:	693b      	ldr	r3, [r7, #16]
    7ba6:	697a      	ldr	r2, [r7, #20]
    7ba8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    7baa:	693b      	ldr	r3, [r7, #16]
    7bac:	699b      	ldr	r3, [r3, #24]
    7bae:	2b00      	cmp	r3, #0
    7bb0:	db04      	blt.n	7bbc <vTaskPriorityDisinheritAfterTimeout+0x60>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    7bb2:	697b      	ldr	r3, [r7, #20]
    7bb4:	f1c3 0205 	rsb	r2, r3, #5
    7bb8:	693b      	ldr	r3, [r7, #16]
    7bba:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
    7bbc:	693b      	ldr	r3, [r7, #16]
    7bbe:	6959      	ldr	r1, [r3, #20]
    7bc0:	68ba      	ldr	r2, [r7, #8]
    7bc2:	4613      	mov	r3, r2
    7bc4:	009b      	lsls	r3, r3, #2
    7bc6:	4413      	add	r3, r2
    7bc8:	009b      	lsls	r3, r3, #2
    7bca:	4a21      	ldr	r2, [pc, #132]	; (7c50 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
    7bcc:	4413      	add	r3, r2
    7bce:	4299      	cmp	r1, r3
    7bd0:	d101      	bne.n	7bd6 <vTaskPriorityDisinheritAfterTimeout+0x7a>
    7bd2:	2301      	movs	r3, #1
    7bd4:	e000      	b.n	7bd8 <vTaskPriorityDisinheritAfterTimeout+0x7c>
    7bd6:	2300      	movs	r3, #0
    7bd8:	2b00      	cmp	r3, #0
    7bda:	d034      	beq.n	7c46 <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    7bdc:	693b      	ldr	r3, [r7, #16]
    7bde:	3304      	adds	r3, #4
    7be0:	4618      	mov	r0, r3
    7be2:	f7fd ffc7 	bl	5b74 <uxListRemove>
    7be6:	4603      	mov	r3, r0
    7be8:	2b00      	cmp	r3, #0
    7bea:	d115      	bne.n	7c18 <vTaskPriorityDisinheritAfterTimeout+0xbc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
    7bec:	693b      	ldr	r3, [r7, #16]
    7bee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7bf0:	4917      	ldr	r1, [pc, #92]	; (7c50 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
    7bf2:	4613      	mov	r3, r2
    7bf4:	009b      	lsls	r3, r3, #2
    7bf6:	4413      	add	r3, r2
    7bf8:	009b      	lsls	r3, r3, #2
    7bfa:	440b      	add	r3, r1
    7bfc:	681b      	ldr	r3, [r3, #0]
    7bfe:	2b00      	cmp	r3, #0
    7c00:	d10a      	bne.n	7c18 <vTaskPriorityDisinheritAfterTimeout+0xbc>
    7c02:	693b      	ldr	r3, [r7, #16]
    7c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7c06:	2201      	movs	r2, #1
    7c08:	fa02 f303 	lsl.w	r3, r2, r3
    7c0c:	43da      	mvns	r2, r3
    7c0e:	4b11      	ldr	r3, [pc, #68]	; (7c54 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
    7c10:	681b      	ldr	r3, [r3, #0]
    7c12:	4013      	ands	r3, r2
    7c14:	4a0f      	ldr	r2, [pc, #60]	; (7c54 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
    7c16:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
    7c18:	693b      	ldr	r3, [r7, #16]
    7c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7c1c:	2201      	movs	r2, #1
    7c1e:	409a      	lsls	r2, r3
    7c20:	4b0c      	ldr	r3, [pc, #48]	; (7c54 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
    7c22:	681b      	ldr	r3, [r3, #0]
    7c24:	4313      	orrs	r3, r2
    7c26:	4a0b      	ldr	r2, [pc, #44]	; (7c54 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
    7c28:	6013      	str	r3, [r2, #0]
    7c2a:	693b      	ldr	r3, [r7, #16]
    7c2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7c2e:	4613      	mov	r3, r2
    7c30:	009b      	lsls	r3, r3, #2
    7c32:	4413      	add	r3, r2
    7c34:	009b      	lsls	r3, r3, #2
    7c36:	4a06      	ldr	r2, [pc, #24]	; (7c50 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
    7c38:	441a      	add	r2, r3
    7c3a:	693b      	ldr	r3, [r7, #16]
    7c3c:	3304      	adds	r3, #4
    7c3e:	4619      	mov	r1, r3
    7c40:	4610      	mov	r0, r2
    7c42:	f7fd ff3c 	bl	5abe <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    7c46:	bf00      	nop
    7c48:	3718      	adds	r7, #24
    7c4a:	46bd      	mov	sp, r7
    7c4c:	bd80      	pop	{r7, pc}
    7c4e:	bf00      	nop
    7c50:	2000443c 	.word	0x2000443c
    7c54:	20004518 	.word	0x20004518

00007c58 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
    7c58:	b480      	push	{r7}
    7c5a:	b083      	sub	sp, #12
    7c5c:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
    7c5e:	4b09      	ldr	r3, [pc, #36]	; (7c84 <uxTaskResetEventItemValue+0x2c>)
    7c60:	681b      	ldr	r3, [r3, #0]
    7c62:	699b      	ldr	r3, [r3, #24]
    7c64:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    7c66:	4b07      	ldr	r3, [pc, #28]	; (7c84 <uxTaskResetEventItemValue+0x2c>)
    7c68:	681b      	ldr	r3, [r3, #0]
    7c6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7c6c:	4b05      	ldr	r3, [pc, #20]	; (7c84 <uxTaskResetEventItemValue+0x2c>)
    7c6e:	681b      	ldr	r3, [r3, #0]
    7c70:	f1c2 0205 	rsb	r2, r2, #5
    7c74:	619a      	str	r2, [r3, #24]

	return uxReturn;
    7c76:	687b      	ldr	r3, [r7, #4]
}
    7c78:	4618      	mov	r0, r3
    7c7a:	370c      	adds	r7, #12
    7c7c:	46bd      	mov	sp, r7
    7c7e:	bc80      	pop	{r7}
    7c80:	4770      	bx	lr
    7c82:	bf00      	nop
    7c84:	20004438 	.word	0x20004438

00007c88 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
    7c88:	b480      	push	{r7}
    7c8a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
    7c8c:	4b07      	ldr	r3, [pc, #28]	; (7cac <pvTaskIncrementMutexHeldCount+0x24>)
    7c8e:	681b      	ldr	r3, [r3, #0]
    7c90:	2b00      	cmp	r3, #0
    7c92:	d004      	beq.n	7c9e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
    7c94:	4b05      	ldr	r3, [pc, #20]	; (7cac <pvTaskIncrementMutexHeldCount+0x24>)
    7c96:	681b      	ldr	r3, [r3, #0]
    7c98:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    7c9a:	3201      	adds	r2, #1
    7c9c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
    7c9e:	4b03      	ldr	r3, [pc, #12]	; (7cac <pvTaskIncrementMutexHeldCount+0x24>)
    7ca0:	681b      	ldr	r3, [r3, #0]
	}
    7ca2:	4618      	mov	r0, r3
    7ca4:	46bd      	mov	sp, r7
    7ca6:	bc80      	pop	{r7}
    7ca8:	4770      	bx	lr
    7caa:	bf00      	nop
    7cac:	20004438 	.word	0x20004438

00007cb0 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
    7cb0:	b580      	push	{r7, lr}
    7cb2:	b084      	sub	sp, #16
    7cb4:	af00      	add	r7, sp, #0
    7cb6:	6078      	str	r0, [r7, #4]
    7cb8:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
    7cba:	f000 ff89 	bl	8bd0 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
    7cbe:	4b1e      	ldr	r3, [pc, #120]	; (7d38 <ulTaskNotifyTake+0x88>)
    7cc0:	681b      	ldr	r3, [r3, #0]
    7cc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    7cc4:	2b00      	cmp	r3, #0
    7cc6:	d113      	bne.n	7cf0 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
    7cc8:	4b1b      	ldr	r3, [pc, #108]	; (7d38 <ulTaskNotifyTake+0x88>)
    7cca:	681b      	ldr	r3, [r3, #0]
    7ccc:	2201      	movs	r2, #1
    7cce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
    7cd2:	683b      	ldr	r3, [r7, #0]
    7cd4:	2b00      	cmp	r3, #0
    7cd6:	d00b      	beq.n	7cf0 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    7cd8:	2101      	movs	r1, #1
    7cda:	6838      	ldr	r0, [r7, #0]
    7cdc:	f000 fa54 	bl	8188 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
    7ce0:	4b16      	ldr	r3, [pc, #88]	; (7d3c <ulTaskNotifyTake+0x8c>)
    7ce2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    7ce6:	601a      	str	r2, [r3, #0]
    7ce8:	f3bf 8f4f 	dsb	sy
    7cec:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    7cf0:	f000 ff88 	bl	8c04 <vPortExitCritical>

		taskENTER_CRITICAL();
    7cf4:	f000 ff6c 	bl	8bd0 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
    7cf8:	4b0f      	ldr	r3, [pc, #60]	; (7d38 <ulTaskNotifyTake+0x88>)
    7cfa:	681b      	ldr	r3, [r3, #0]
    7cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    7cfe:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
    7d00:	68fb      	ldr	r3, [r7, #12]
    7d02:	2b00      	cmp	r3, #0
    7d04:	d00c      	beq.n	7d20 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
    7d06:	687b      	ldr	r3, [r7, #4]
    7d08:	2b00      	cmp	r3, #0
    7d0a:	d004      	beq.n	7d16 <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
    7d0c:	4b0a      	ldr	r3, [pc, #40]	; (7d38 <ulTaskNotifyTake+0x88>)
    7d0e:	681b      	ldr	r3, [r3, #0]
    7d10:	2200      	movs	r2, #0
    7d12:	64da      	str	r2, [r3, #76]	; 0x4c
    7d14:	e004      	b.n	7d20 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
    7d16:	4b08      	ldr	r3, [pc, #32]	; (7d38 <ulTaskNotifyTake+0x88>)
    7d18:	681b      	ldr	r3, [r3, #0]
    7d1a:	68fa      	ldr	r2, [r7, #12]
    7d1c:	3a01      	subs	r2, #1
    7d1e:	64da      	str	r2, [r3, #76]	; 0x4c
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    7d20:	4b05      	ldr	r3, [pc, #20]	; (7d38 <ulTaskNotifyTake+0x88>)
    7d22:	681b      	ldr	r3, [r3, #0]
    7d24:	2200      	movs	r2, #0
    7d26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
    7d2a:	f000 ff6b 	bl	8c04 <vPortExitCritical>

		return ulReturn;
    7d2e:	68fb      	ldr	r3, [r7, #12]
	}
    7d30:	4618      	mov	r0, r3
    7d32:	3710      	adds	r7, #16
    7d34:	46bd      	mov	sp, r7
    7d36:	bd80      	pop	{r7, pc}
    7d38:	20004438 	.word	0x20004438
    7d3c:	e000ed04 	.word	0xe000ed04

00007d40 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
    7d40:	b580      	push	{r7, lr}
    7d42:	b086      	sub	sp, #24
    7d44:	af00      	add	r7, sp, #0
    7d46:	60f8      	str	r0, [r7, #12]
    7d48:	60b9      	str	r1, [r7, #8]
    7d4a:	607a      	str	r2, [r7, #4]
    7d4c:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
    7d4e:	f000 ff3f 	bl	8bd0 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
    7d52:	4b26      	ldr	r3, [pc, #152]	; (7dec <xTaskNotifyWait+0xac>)
    7d54:	681b      	ldr	r3, [r3, #0]
    7d56:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
    7d5a:	b2db      	uxtb	r3, r3
    7d5c:	2b02      	cmp	r3, #2
    7d5e:	d01a      	beq.n	7d96 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
    7d60:	4b22      	ldr	r3, [pc, #136]	; (7dec <xTaskNotifyWait+0xac>)
    7d62:	681b      	ldr	r3, [r3, #0]
    7d64:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
    7d66:	68fa      	ldr	r2, [r7, #12]
    7d68:	43d2      	mvns	r2, r2
    7d6a:	400a      	ands	r2, r1
    7d6c:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
    7d6e:	4b1f      	ldr	r3, [pc, #124]	; (7dec <xTaskNotifyWait+0xac>)
    7d70:	681b      	ldr	r3, [r3, #0]
    7d72:	2201      	movs	r2, #1
    7d74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
    7d78:	683b      	ldr	r3, [r7, #0]
    7d7a:	2b00      	cmp	r3, #0
    7d7c:	d00b      	beq.n	7d96 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    7d7e:	2101      	movs	r1, #1
    7d80:	6838      	ldr	r0, [r7, #0]
    7d82:	f000 fa01 	bl	8188 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
    7d86:	4b1a      	ldr	r3, [pc, #104]	; (7df0 <xTaskNotifyWait+0xb0>)
    7d88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    7d8c:	601a      	str	r2, [r3, #0]
    7d8e:	f3bf 8f4f 	dsb	sy
    7d92:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    7d96:	f000 ff35 	bl	8c04 <vPortExitCritical>

		taskENTER_CRITICAL();
    7d9a:	f000 ff19 	bl	8bd0 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
    7d9e:	687b      	ldr	r3, [r7, #4]
    7da0:	2b00      	cmp	r3, #0
    7da2:	d004      	beq.n	7dae <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
    7da4:	4b11      	ldr	r3, [pc, #68]	; (7dec <xTaskNotifyWait+0xac>)
    7da6:	681b      	ldr	r3, [r3, #0]
    7da8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    7daa:	687b      	ldr	r3, [r7, #4]
    7dac:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
    7dae:	4b0f      	ldr	r3, [pc, #60]	; (7dec <xTaskNotifyWait+0xac>)
    7db0:	681b      	ldr	r3, [r3, #0]
    7db2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
    7db6:	b2db      	uxtb	r3, r3
    7db8:	2b02      	cmp	r3, #2
    7dba:	d002      	beq.n	7dc2 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
    7dbc:	2300      	movs	r3, #0
    7dbe:	617b      	str	r3, [r7, #20]
    7dc0:	e008      	b.n	7dd4 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
    7dc2:	4b0a      	ldr	r3, [pc, #40]	; (7dec <xTaskNotifyWait+0xac>)
    7dc4:	681b      	ldr	r3, [r3, #0]
    7dc6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
    7dc8:	68ba      	ldr	r2, [r7, #8]
    7dca:	43d2      	mvns	r2, r2
    7dcc:	400a      	ands	r2, r1
    7dce:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
    7dd0:	2301      	movs	r3, #1
    7dd2:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    7dd4:	4b05      	ldr	r3, [pc, #20]	; (7dec <xTaskNotifyWait+0xac>)
    7dd6:	681b      	ldr	r3, [r3, #0]
    7dd8:	2200      	movs	r2, #0
    7dda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
    7dde:	f000 ff11 	bl	8c04 <vPortExitCritical>

		return xReturn;
    7de2:	697b      	ldr	r3, [r7, #20]
	}
    7de4:	4618      	mov	r0, r3
    7de6:	3718      	adds	r7, #24
    7de8:	46bd      	mov	sp, r7
    7dea:	bd80      	pop	{r7, pc}
    7dec:	20004438 	.word	0x20004438
    7df0:	e000ed04 	.word	0xe000ed04

00007df4 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
    7df4:	b580      	push	{r7, lr}
    7df6:	b088      	sub	sp, #32
    7df8:	af00      	add	r7, sp, #0
    7dfa:	60f8      	str	r0, [r7, #12]
    7dfc:	60b9      	str	r1, [r7, #8]
    7dfe:	603b      	str	r3, [r7, #0]
    7e00:	4613      	mov	r3, r2
    7e02:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
    7e04:	2301      	movs	r3, #1
    7e06:	61fb      	str	r3, [r7, #28]
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
		pxTCB = ( TCB_t * ) xTaskToNotify;
    7e08:	68fb      	ldr	r3, [r7, #12]
    7e0a:	61bb      	str	r3, [r7, #24]

		taskENTER_CRITICAL();
    7e0c:	f000 fee0 	bl	8bd0 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
    7e10:	683b      	ldr	r3, [r7, #0]
    7e12:	2b00      	cmp	r3, #0
    7e14:	d003      	beq.n	7e1e <xTaskGenericNotify+0x2a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
    7e16:	69bb      	ldr	r3, [r7, #24]
    7e18:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    7e1a:	683b      	ldr	r3, [r7, #0]
    7e1c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
    7e1e:	69bb      	ldr	r3, [r7, #24]
    7e20:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
    7e24:	75fb      	strb	r3, [r7, #23]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
    7e26:	69bb      	ldr	r3, [r7, #24]
    7e28:	2202      	movs	r2, #2
    7e2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
    7e2e:	79fb      	ldrb	r3, [r7, #7]
    7e30:	2b04      	cmp	r3, #4
    7e32:	d828      	bhi.n	7e86 <xTaskGenericNotify+0x92>
    7e34:	a201      	add	r2, pc, #4	; (adr r2, 7e3c <xTaskGenericNotify+0x48>)
    7e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    7e3a:	bf00      	nop
    7e3c:	00007e87 	.word	0x00007e87
    7e40:	00007e51 	.word	0x00007e51
    7e44:	00007e5f 	.word	0x00007e5f
    7e48:	00007e6b 	.word	0x00007e6b
    7e4c:	00007e73 	.word	0x00007e73
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
    7e50:	69bb      	ldr	r3, [r7, #24]
    7e52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    7e54:	68bb      	ldr	r3, [r7, #8]
    7e56:	431a      	orrs	r2, r3
    7e58:	69bb      	ldr	r3, [r7, #24]
    7e5a:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
    7e5c:	e013      	b.n	7e86 <xTaskGenericNotify+0x92>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
    7e5e:	69bb      	ldr	r3, [r7, #24]
    7e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    7e62:	1c5a      	adds	r2, r3, #1
    7e64:	69bb      	ldr	r3, [r7, #24]
    7e66:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
    7e68:	e00d      	b.n	7e86 <xTaskGenericNotify+0x92>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
    7e6a:	69bb      	ldr	r3, [r7, #24]
    7e6c:	68ba      	ldr	r2, [r7, #8]
    7e6e:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
    7e70:	e009      	b.n	7e86 <xTaskGenericNotify+0x92>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
    7e72:	7dfb      	ldrb	r3, [r7, #23]
    7e74:	2b02      	cmp	r3, #2
    7e76:	d003      	beq.n	7e80 <xTaskGenericNotify+0x8c>
					{
						pxTCB->ulNotifiedValue = ulValue;
    7e78:	69bb      	ldr	r3, [r7, #24]
    7e7a:	68ba      	ldr	r2, [r7, #8]
    7e7c:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
    7e7e:	e001      	b.n	7e84 <xTaskGenericNotify+0x90>
						xReturn = pdFAIL;
    7e80:	2300      	movs	r3, #0
    7e82:	61fb      	str	r3, [r7, #28]
					break;
    7e84:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    7e86:	7dfb      	ldrb	r3, [r7, #23]
    7e88:	2b01      	cmp	r3, #1
    7e8a:	d12a      	bne.n	7ee2 <xTaskGenericNotify+0xee>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    7e8c:	69bb      	ldr	r3, [r7, #24]
    7e8e:	3304      	adds	r3, #4
    7e90:	4618      	mov	r0, r3
    7e92:	f7fd fe6f 	bl	5b74 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
    7e96:	69bb      	ldr	r3, [r7, #24]
    7e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7e9a:	2201      	movs	r2, #1
    7e9c:	409a      	lsls	r2, r3
    7e9e:	4b14      	ldr	r3, [pc, #80]	; (7ef0 <xTaskGenericNotify+0xfc>)
    7ea0:	681b      	ldr	r3, [r3, #0]
    7ea2:	4313      	orrs	r3, r2
    7ea4:	4a12      	ldr	r2, [pc, #72]	; (7ef0 <xTaskGenericNotify+0xfc>)
    7ea6:	6013      	str	r3, [r2, #0]
    7ea8:	69bb      	ldr	r3, [r7, #24]
    7eaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7eac:	4613      	mov	r3, r2
    7eae:	009b      	lsls	r3, r3, #2
    7eb0:	4413      	add	r3, r2
    7eb2:	009b      	lsls	r3, r3, #2
    7eb4:	4a0f      	ldr	r2, [pc, #60]	; (7ef4 <xTaskGenericNotify+0x100>)
    7eb6:	441a      	add	r2, r3
    7eb8:	69bb      	ldr	r3, [r7, #24]
    7eba:	3304      	adds	r3, #4
    7ebc:	4619      	mov	r1, r3
    7ebe:	4610      	mov	r0, r2
    7ec0:	f7fd fdfd 	bl	5abe <vListInsertEnd>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    7ec4:	69bb      	ldr	r3, [r7, #24]
    7ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7ec8:	4b0b      	ldr	r3, [pc, #44]	; (7ef8 <xTaskGenericNotify+0x104>)
    7eca:	681b      	ldr	r3, [r3, #0]
    7ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7ece:	429a      	cmp	r2, r3
    7ed0:	d907      	bls.n	7ee2 <xTaskGenericNotify+0xee>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
    7ed2:	4b0a      	ldr	r3, [pc, #40]	; (7efc <xTaskGenericNotify+0x108>)
    7ed4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    7ed8:	601a      	str	r2, [r3, #0]
    7eda:	f3bf 8f4f 	dsb	sy
    7ede:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    7ee2:	f000 fe8f 	bl	8c04 <vPortExitCritical>

		return xReturn;
    7ee6:	69fb      	ldr	r3, [r7, #28]
	}
    7ee8:	4618      	mov	r0, r3
    7eea:	3720      	adds	r7, #32
    7eec:	46bd      	mov	sp, r7
    7eee:	bd80      	pop	{r7, pc}
    7ef0:	20004518 	.word	0x20004518
    7ef4:	2000443c 	.word	0x2000443c
    7ef8:	20004438 	.word	0x20004438
    7efc:	e000ed04 	.word	0xe000ed04

00007f00 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
    7f00:	b580      	push	{r7, lr}
    7f02:	b08c      	sub	sp, #48	; 0x30
    7f04:	af00      	add	r7, sp, #0
    7f06:	60f8      	str	r0, [r7, #12]
    7f08:	60b9      	str	r1, [r7, #8]
    7f0a:	603b      	str	r3, [r7, #0]
    7f0c:	4613      	mov	r3, r2
    7f0e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
    7f10:	2301      	movs	r3, #1
    7f12:	62fb      	str	r3, [r7, #44]	; 0x2c
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = ( TCB_t * ) xTaskToNotify;
    7f14:	68fb      	ldr	r3, [r7, #12]
    7f16:	62bb      	str	r3, [r7, #40]	; 0x28
	__asm volatile
    7f18:	f3ef 8211 	mrs	r2, BASEPRI
    7f1c:	f04f 03bf 	mov.w	r3, #191	; 0xbf
    7f20:	f383 8811 	msr	BASEPRI, r3
    7f24:	f3bf 8f6f 	isb	sy
    7f28:	f3bf 8f4f 	dsb	sy
    7f2c:	61fa      	str	r2, [r7, #28]
    7f2e:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
    7f30:	69fb      	ldr	r3, [r7, #28]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    7f32:	627b      	str	r3, [r7, #36]	; 0x24
		{
			if( pulPreviousNotificationValue != NULL )
    7f34:	683b      	ldr	r3, [r7, #0]
    7f36:	2b00      	cmp	r3, #0
    7f38:	d003      	beq.n	7f42 <xTaskGenericNotifyFromISR+0x42>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
    7f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7f3c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    7f3e:	683b      	ldr	r3, [r7, #0]
    7f40:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
    7f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7f44:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
    7f48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
    7f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7f4e:	2202      	movs	r2, #2
    7f50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
    7f54:	79fb      	ldrb	r3, [r7, #7]
    7f56:	2b04      	cmp	r3, #4
    7f58:	d828      	bhi.n	7fac <xTaskGenericNotifyFromISR+0xac>
    7f5a:	a201      	add	r2, pc, #4	; (adr r2, 7f60 <xTaskGenericNotifyFromISR+0x60>)
    7f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    7f60:	00007fad 	.word	0x00007fad
    7f64:	00007f75 	.word	0x00007f75
    7f68:	00007f83 	.word	0x00007f83
    7f6c:	00007f8f 	.word	0x00007f8f
    7f70:	00007f97 	.word	0x00007f97
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
    7f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7f76:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    7f78:	68bb      	ldr	r3, [r7, #8]
    7f7a:	431a      	orrs	r2, r3
    7f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7f7e:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
    7f80:	e014      	b.n	7fac <xTaskGenericNotifyFromISR+0xac>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
    7f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    7f86:	1c5a      	adds	r2, r3, #1
    7f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7f8a:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
    7f8c:	e00e      	b.n	7fac <xTaskGenericNotifyFromISR+0xac>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
    7f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7f90:	68ba      	ldr	r2, [r7, #8]
    7f92:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
    7f94:	e00a      	b.n	7fac <xTaskGenericNotifyFromISR+0xac>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
    7f96:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
    7f9a:	2b02      	cmp	r3, #2
    7f9c:	d003      	beq.n	7fa6 <xTaskGenericNotifyFromISR+0xa6>
					{
						pxTCB->ulNotifiedValue = ulValue;
    7f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7fa0:	68ba      	ldr	r2, [r7, #8]
    7fa2:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
    7fa4:	e001      	b.n	7faa <xTaskGenericNotifyFromISR+0xaa>
						xReturn = pdFAIL;
    7fa6:	2300      	movs	r3, #0
    7fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
					break;
    7faa:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    7fac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
    7fb0:	2b01      	cmp	r3, #1
    7fb2:	d137      	bne.n	8024 <xTaskGenericNotifyFromISR+0x124>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    7fb4:	4b21      	ldr	r3, [pc, #132]	; (803c <xTaskGenericNotifyFromISR+0x13c>)
    7fb6:	681b      	ldr	r3, [r3, #0]
    7fb8:	2b00      	cmp	r3, #0
    7fba:	d11c      	bne.n	7ff6 <xTaskGenericNotifyFromISR+0xf6>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    7fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7fbe:	3304      	adds	r3, #4
    7fc0:	4618      	mov	r0, r3
    7fc2:	f7fd fdd7 	bl	5b74 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    7fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7fca:	2201      	movs	r2, #1
    7fcc:	409a      	lsls	r2, r3
    7fce:	4b1c      	ldr	r3, [pc, #112]	; (8040 <xTaskGenericNotifyFromISR+0x140>)
    7fd0:	681b      	ldr	r3, [r3, #0]
    7fd2:	4313      	orrs	r3, r2
    7fd4:	4a1a      	ldr	r2, [pc, #104]	; (8040 <xTaskGenericNotifyFromISR+0x140>)
    7fd6:	6013      	str	r3, [r2, #0]
    7fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7fda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7fdc:	4613      	mov	r3, r2
    7fde:	009b      	lsls	r3, r3, #2
    7fe0:	4413      	add	r3, r2
    7fe2:	009b      	lsls	r3, r3, #2
    7fe4:	4a17      	ldr	r2, [pc, #92]	; (8044 <xTaskGenericNotifyFromISR+0x144>)
    7fe6:	441a      	add	r2, r3
    7fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7fea:	3304      	adds	r3, #4
    7fec:	4619      	mov	r1, r3
    7fee:	4610      	mov	r0, r2
    7ff0:	f7fd fd65 	bl	5abe <vListInsertEnd>
    7ff4:	e005      	b.n	8002 <xTaskGenericNotifyFromISR+0x102>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    7ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7ff8:	3318      	adds	r3, #24
    7ffa:	4619      	mov	r1, r3
    7ffc:	4812      	ldr	r0, [pc, #72]	; (8048 <xTaskGenericNotifyFromISR+0x148>)
    7ffe:	f7fd fd5e 	bl	5abe <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    8002:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8004:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8006:	4b11      	ldr	r3, [pc, #68]	; (804c <xTaskGenericNotifyFromISR+0x14c>)
    8008:	681b      	ldr	r3, [r3, #0]
    800a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    800c:	429a      	cmp	r2, r3
    800e:	d909      	bls.n	8024 <xTaskGenericNotifyFromISR+0x124>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
    8010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    8012:	2b00      	cmp	r3, #0
    8014:	d003      	beq.n	801e <xTaskGenericNotifyFromISR+0x11e>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
    8016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    8018:	2201      	movs	r2, #1
    801a:	601a      	str	r2, [r3, #0]
    801c:	e002      	b.n	8024 <xTaskGenericNotifyFromISR+0x124>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
    801e:	4b0c      	ldr	r3, [pc, #48]	; (8050 <xTaskGenericNotifyFromISR+0x150>)
    8020:	2201      	movs	r2, #1
    8022:	601a      	str	r2, [r3, #0]
    8024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8026:	617b      	str	r3, [r7, #20]
	__asm volatile
    8028:	697b      	ldr	r3, [r7, #20]
    802a:	f383 8811 	msr	BASEPRI, r3
}
    802e:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
    8030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
    8032:	4618      	mov	r0, r3
    8034:	3730      	adds	r7, #48	; 0x30
    8036:	46bd      	mov	sp, r7
    8038:	bd80      	pop	{r7, pc}
    803a:	bf00      	nop
    803c:	20004538 	.word	0x20004538
    8040:	20004518 	.word	0x20004518
    8044:	2000443c 	.word	0x2000443c
    8048:	200044d0 	.word	0x200044d0
    804c:	20004438 	.word	0x20004438
    8050:	20004524 	.word	0x20004524

00008054 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
    8054:	b580      	push	{r7, lr}
    8056:	b088      	sub	sp, #32
    8058:	af00      	add	r7, sp, #0
    805a:	6078      	str	r0, [r7, #4]
    805c:	6039      	str	r1, [r7, #0]
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = ( TCB_t * ) xTaskToNotify;
    805e:	687b      	ldr	r3, [r7, #4]
    8060:	61fb      	str	r3, [r7, #28]
	__asm volatile
    8062:	f3ef 8211 	mrs	r2, BASEPRI
    8066:	f04f 03bf 	mov.w	r3, #191	; 0xbf
    806a:	f383 8811 	msr	BASEPRI, r3
    806e:	f3bf 8f6f 	isb	sy
    8072:	f3bf 8f4f 	dsb	sy
    8076:	613a      	str	r2, [r7, #16]
    8078:	60fb      	str	r3, [r7, #12]
	return ulOriginalBASEPRI;
    807a:	693b      	ldr	r3, [r7, #16]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    807c:	61bb      	str	r3, [r7, #24]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
    807e:	69fb      	ldr	r3, [r7, #28]
    8080:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
    8084:	75fb      	strb	r3, [r7, #23]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
    8086:	69fb      	ldr	r3, [r7, #28]
    8088:	2202      	movs	r2, #2
    808a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
    808e:	69fb      	ldr	r3, [r7, #28]
    8090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    8092:	1c5a      	adds	r2, r3, #1
    8094:	69fb      	ldr	r3, [r7, #28]
    8096:	64da      	str	r2, [r3, #76]	; 0x4c

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    8098:	7dfb      	ldrb	r3, [r7, #23]
    809a:	2b01      	cmp	r3, #1
    809c:	d137      	bne.n	810e <vTaskNotifyGiveFromISR+0xba>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    809e:	4b21      	ldr	r3, [pc, #132]	; (8124 <vTaskNotifyGiveFromISR+0xd0>)
    80a0:	681b      	ldr	r3, [r3, #0]
    80a2:	2b00      	cmp	r3, #0
    80a4:	d11c      	bne.n	80e0 <vTaskNotifyGiveFromISR+0x8c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    80a6:	69fb      	ldr	r3, [r7, #28]
    80a8:	3304      	adds	r3, #4
    80aa:	4618      	mov	r0, r3
    80ac:	f7fd fd62 	bl	5b74 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    80b0:	69fb      	ldr	r3, [r7, #28]
    80b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    80b4:	2201      	movs	r2, #1
    80b6:	409a      	lsls	r2, r3
    80b8:	4b1b      	ldr	r3, [pc, #108]	; (8128 <vTaskNotifyGiveFromISR+0xd4>)
    80ba:	681b      	ldr	r3, [r3, #0]
    80bc:	4313      	orrs	r3, r2
    80be:	4a1a      	ldr	r2, [pc, #104]	; (8128 <vTaskNotifyGiveFromISR+0xd4>)
    80c0:	6013      	str	r3, [r2, #0]
    80c2:	69fb      	ldr	r3, [r7, #28]
    80c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    80c6:	4613      	mov	r3, r2
    80c8:	009b      	lsls	r3, r3, #2
    80ca:	4413      	add	r3, r2
    80cc:	009b      	lsls	r3, r3, #2
    80ce:	4a17      	ldr	r2, [pc, #92]	; (812c <vTaskNotifyGiveFromISR+0xd8>)
    80d0:	441a      	add	r2, r3
    80d2:	69fb      	ldr	r3, [r7, #28]
    80d4:	3304      	adds	r3, #4
    80d6:	4619      	mov	r1, r3
    80d8:	4610      	mov	r0, r2
    80da:	f7fd fcf0 	bl	5abe <vListInsertEnd>
    80de:	e005      	b.n	80ec <vTaskNotifyGiveFromISR+0x98>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    80e0:	69fb      	ldr	r3, [r7, #28]
    80e2:	3318      	adds	r3, #24
    80e4:	4619      	mov	r1, r3
    80e6:	4812      	ldr	r0, [pc, #72]	; (8130 <vTaskNotifyGiveFromISR+0xdc>)
    80e8:	f7fd fce9 	bl	5abe <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    80ec:	69fb      	ldr	r3, [r7, #28]
    80ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    80f0:	4b10      	ldr	r3, [pc, #64]	; (8134 <vTaskNotifyGiveFromISR+0xe0>)
    80f2:	681b      	ldr	r3, [r3, #0]
    80f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    80f6:	429a      	cmp	r2, r3
    80f8:	d909      	bls.n	810e <vTaskNotifyGiveFromISR+0xba>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
    80fa:	683b      	ldr	r3, [r7, #0]
    80fc:	2b00      	cmp	r3, #0
    80fe:	d003      	beq.n	8108 <vTaskNotifyGiveFromISR+0xb4>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
    8100:	683b      	ldr	r3, [r7, #0]
    8102:	2201      	movs	r2, #1
    8104:	601a      	str	r2, [r3, #0]
    8106:	e002      	b.n	810e <vTaskNotifyGiveFromISR+0xba>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter in an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
    8108:	4b0b      	ldr	r3, [pc, #44]	; (8138 <vTaskNotifyGiveFromISR+0xe4>)
    810a:	2201      	movs	r2, #1
    810c:	601a      	str	r2, [r3, #0]
    810e:	69bb      	ldr	r3, [r7, #24]
    8110:	60bb      	str	r3, [r7, #8]
	__asm volatile
    8112:	68bb      	ldr	r3, [r7, #8]
    8114:	f383 8811 	msr	BASEPRI, r3
}
    8118:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
    811a:	bf00      	nop
    811c:	3720      	adds	r7, #32
    811e:	46bd      	mov	sp, r7
    8120:	bd80      	pop	{r7, pc}
    8122:	bf00      	nop
    8124:	20004538 	.word	0x20004538
    8128:	20004518 	.word	0x20004518
    812c:	2000443c 	.word	0x2000443c
    8130:	200044d0 	.word	0x200044d0
    8134:	20004438 	.word	0x20004438
    8138:	20004524 	.word	0x20004524

0000813c <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
    813c:	b580      	push	{r7, lr}
    813e:	b084      	sub	sp, #16
    8140:	af00      	add	r7, sp, #0
    8142:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
    8144:	687b      	ldr	r3, [r7, #4]
    8146:	2b00      	cmp	r3, #0
    8148:	d102      	bne.n	8150 <xTaskNotifyStateClear+0x14>
    814a:	4b0e      	ldr	r3, [pc, #56]	; (8184 <xTaskNotifyStateClear+0x48>)
    814c:	681b      	ldr	r3, [r3, #0]
    814e:	e000      	b.n	8152 <xTaskNotifyStateClear+0x16>
    8150:	687b      	ldr	r3, [r7, #4]
    8152:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
    8154:	f000 fd3c 	bl	8bd0 <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
    8158:	68bb      	ldr	r3, [r7, #8]
    815a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
    815e:	b2db      	uxtb	r3, r3
    8160:	2b02      	cmp	r3, #2
    8162:	d106      	bne.n	8172 <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    8164:	68bb      	ldr	r3, [r7, #8]
    8166:	2200      	movs	r2, #0
    8168:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				xReturn = pdPASS;
    816c:	2301      	movs	r3, #1
    816e:	60fb      	str	r3, [r7, #12]
    8170:	e001      	b.n	8176 <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
    8172:	2300      	movs	r3, #0
    8174:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
    8176:	f000 fd45 	bl	8c04 <vPortExitCritical>

		return xReturn;
    817a:	68fb      	ldr	r3, [r7, #12]
	}
    817c:	4618      	mov	r0, r3
    817e:	3710      	adds	r7, #16
    8180:	46bd      	mov	sp, r7
    8182:	bd80      	pop	{r7, pc}
    8184:	20004438 	.word	0x20004438

00008188 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    8188:	b580      	push	{r7, lr}
    818a:	b084      	sub	sp, #16
    818c:	af00      	add	r7, sp, #0
    818e:	6078      	str	r0, [r7, #4]
    8190:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    8192:	4b29      	ldr	r3, [pc, #164]	; (8238 <prvAddCurrentTaskToDelayedList+0xb0>)
    8194:	681b      	ldr	r3, [r3, #0]
    8196:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    8198:	4b28      	ldr	r3, [pc, #160]	; (823c <prvAddCurrentTaskToDelayedList+0xb4>)
    819a:	681b      	ldr	r3, [r3, #0]
    819c:	3304      	adds	r3, #4
    819e:	4618      	mov	r0, r3
    81a0:	f7fd fce8 	bl	5b74 <uxListRemove>
    81a4:	4603      	mov	r3, r0
    81a6:	2b00      	cmp	r3, #0
    81a8:	d10b      	bne.n	81c2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
    81aa:	4b24      	ldr	r3, [pc, #144]	; (823c <prvAddCurrentTaskToDelayedList+0xb4>)
    81ac:	681b      	ldr	r3, [r3, #0]
    81ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    81b0:	2201      	movs	r2, #1
    81b2:	fa02 f303 	lsl.w	r3, r2, r3
    81b6:	43da      	mvns	r2, r3
    81b8:	4b21      	ldr	r3, [pc, #132]	; (8240 <prvAddCurrentTaskToDelayedList+0xb8>)
    81ba:	681b      	ldr	r3, [r3, #0]
    81bc:	4013      	ands	r3, r2
    81be:	4a20      	ldr	r2, [pc, #128]	; (8240 <prvAddCurrentTaskToDelayedList+0xb8>)
    81c0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    81c2:	687b      	ldr	r3, [r7, #4]
    81c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    81c8:	d10a      	bne.n	81e0 <prvAddCurrentTaskToDelayedList+0x58>
    81ca:	683b      	ldr	r3, [r7, #0]
    81cc:	2b00      	cmp	r3, #0
    81ce:	d007      	beq.n	81e0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    81d0:	4b1a      	ldr	r3, [pc, #104]	; (823c <prvAddCurrentTaskToDelayedList+0xb4>)
    81d2:	681b      	ldr	r3, [r3, #0]
    81d4:	3304      	adds	r3, #4
    81d6:	4619      	mov	r1, r3
    81d8:	481a      	ldr	r0, [pc, #104]	; (8244 <prvAddCurrentTaskToDelayedList+0xbc>)
    81da:	f7fd fc70 	bl	5abe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    81de:	e026      	b.n	822e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
    81e0:	68fa      	ldr	r2, [r7, #12]
    81e2:	687b      	ldr	r3, [r7, #4]
    81e4:	4413      	add	r3, r2
    81e6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    81e8:	4b14      	ldr	r3, [pc, #80]	; (823c <prvAddCurrentTaskToDelayedList+0xb4>)
    81ea:	681b      	ldr	r3, [r3, #0]
    81ec:	68ba      	ldr	r2, [r7, #8]
    81ee:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
    81f0:	68ba      	ldr	r2, [r7, #8]
    81f2:	68fb      	ldr	r3, [r7, #12]
    81f4:	429a      	cmp	r2, r3
    81f6:	d209      	bcs.n	820c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    81f8:	4b13      	ldr	r3, [pc, #76]	; (8248 <prvAddCurrentTaskToDelayedList+0xc0>)
    81fa:	681a      	ldr	r2, [r3, #0]
    81fc:	4b0f      	ldr	r3, [pc, #60]	; (823c <prvAddCurrentTaskToDelayedList+0xb4>)
    81fe:	681b      	ldr	r3, [r3, #0]
    8200:	3304      	adds	r3, #4
    8202:	4619      	mov	r1, r3
    8204:	4610      	mov	r0, r2
    8206:	f7fd fc7d 	bl	5b04 <vListInsert>
}
    820a:	e010      	b.n	822e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    820c:	4b0f      	ldr	r3, [pc, #60]	; (824c <prvAddCurrentTaskToDelayedList+0xc4>)
    820e:	681a      	ldr	r2, [r3, #0]
    8210:	4b0a      	ldr	r3, [pc, #40]	; (823c <prvAddCurrentTaskToDelayedList+0xb4>)
    8212:	681b      	ldr	r3, [r3, #0]
    8214:	3304      	adds	r3, #4
    8216:	4619      	mov	r1, r3
    8218:	4610      	mov	r0, r2
    821a:	f7fd fc73 	bl	5b04 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
    821e:	4b0c      	ldr	r3, [pc, #48]	; (8250 <prvAddCurrentTaskToDelayedList+0xc8>)
    8220:	681b      	ldr	r3, [r3, #0]
    8222:	68ba      	ldr	r2, [r7, #8]
    8224:	429a      	cmp	r2, r3
    8226:	d202      	bcs.n	822e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
    8228:	4a09      	ldr	r2, [pc, #36]	; (8250 <prvAddCurrentTaskToDelayedList+0xc8>)
    822a:	68bb      	ldr	r3, [r7, #8]
    822c:	6013      	str	r3, [r2, #0]
}
    822e:	bf00      	nop
    8230:	3710      	adds	r7, #16
    8232:	46bd      	mov	sp, r7
    8234:	bd80      	pop	{r7, pc}
    8236:	bf00      	nop
    8238:	20004514 	.word	0x20004514
    823c:	20004438 	.word	0x20004438
    8240:	20004518 	.word	0x20004518
    8244:	200044fc 	.word	0x200044fc
    8248:	200044cc 	.word	0x200044cc
    824c:	200044c8 	.word	0x200044c8
    8250:	20004530 	.word	0x20004530

00008254 <xStreamBufferGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer )
	{
    8254:	b580      	push	{r7, lr}
    8256:	b088      	sub	sp, #32
    8258:	af02      	add	r7, sp, #8
    825a:	60f8      	str	r0, [r7, #12]
    825c:	60b9      	str	r1, [r7, #8]
    825e:	607a      	str	r2, [r7, #4]
		configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
    8260:	68bb      	ldr	r3, [r7, #8]
    8262:	2b00      	cmp	r3, #0
    8264:	d101      	bne.n	826a <xStreamBufferGenericCreate+0x16>
		{
			xTriggerLevelBytes = ( size_t ) 1; /*lint !e9044 Parameter modified to ensure it doesn't have a dangerous value. */
    8266:	2301      	movs	r3, #1
    8268:	60bb      	str	r3, [r7, #8]
		and the buffer follows immediately after.  The requested size is
		incremented so the free space is returned as the user would expect -
		this is a quirk of the implementation that means otherwise the free
		space would be reported as one byte smaller than would be logically
		expected. */
		xBufferSizeBytes++;
    826a:	68fb      	ldr	r3, [r7, #12]
    826c:	3301      	adds	r3, #1
    826e:	60fb      	str	r3, [r7, #12]
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
    8270:	68fb      	ldr	r3, [r7, #12]
    8272:	3320      	adds	r3, #32
    8274:	4618      	mov	r0, r3
    8276:	f7f7 ff49 	bl	10c <pvPortMalloc>
    827a:	6178      	str	r0, [r7, #20]

		if( pucAllocatedMemory != NULL )
    827c:	697b      	ldr	r3, [r7, #20]
    827e:	2b00      	cmp	r3, #0
    8280:	d009      	beq.n	8296 <xStreamBufferGenericCreate+0x42>
		{
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
    8282:	697b      	ldr	r3, [r7, #20]
    8284:	f103 0120 	add.w	r1, r3, #32
    8288:	687b      	ldr	r3, [r7, #4]
    828a:	9300      	str	r3, [sp, #0]
    828c:	68bb      	ldr	r3, [r7, #8]
    828e:	68fa      	ldr	r2, [r7, #12]
    8290:	6978      	ldr	r0, [r7, #20]
    8292:	f000 fbe8 	bl	8a66 <prvInitialiseNewStreamBuffer>
		else
		{
			traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
		}

		return ( StreamBufferHandle_t * ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
    8296:	697b      	ldr	r3, [r7, #20]
	}
    8298:	4618      	mov	r0, r3
    829a:	3718      	adds	r7, #24
    829c:	46bd      	mov	sp, r7
    829e:	bd80      	pop	{r7, pc}

000082a0 <vStreamBufferDelete>:

#endif /* ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
/*-----------------------------------------------------------*/

void vStreamBufferDelete( StreamBufferHandle_t xStreamBuffer )
{
    82a0:	b580      	push	{r7, lr}
    82a2:	b084      	sub	sp, #16
    82a4:	af00      	add	r7, sp, #0
    82a6:	6078      	str	r0, [r7, #4]
StreamBuffer_t * pxStreamBuffer = ( StreamBuffer_t * ) xStreamBuffer; /*lint !e9087 !e9079 Safe cast as StreamBufferHandle_t is opaque Streambuffer_t. */
    82a8:	687b      	ldr	r3, [r7, #4]
    82aa:	60fb      	str	r3, [r7, #12]

	configASSERT( pxStreamBuffer );

	traceSTREAM_BUFFER_DELETE( xStreamBuffer );

	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) pdFALSE )
    82ac:	68fb      	ldr	r3, [r7, #12]
    82ae:	7f1b      	ldrb	r3, [r3, #28]
    82b0:	f003 0302 	and.w	r3, r3, #2
    82b4:	2b00      	cmp	r3, #0
    82b6:	d103      	bne.n	82c0 <vStreamBufferDelete+0x20>
	{
		#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
		{
			/* Both the structure and the buffer were allocated using a single call
			to pvPortMalloc(), hence only one call to vPortFree() is required. */
			vPortFree( ( void * ) pxStreamBuffer ); /*lint !e9087 Standard free() semantics require void *, plus pxStreamBuffer was allocated by pvPortMalloc(). */
    82b8:	68f8      	ldr	r0, [r7, #12]
    82ba:	f7f7 ff6d 	bl	198 <vPortFree>
	{
		/* The structure and buffer were not allocated dynamically and cannot be
		freed - just scrub the structure so future use will assert. */
		memset( pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) );
	}
}
    82be:	e004      	b.n	82ca <vStreamBufferDelete+0x2a>
		memset( pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) );
    82c0:	2220      	movs	r2, #32
    82c2:	2100      	movs	r1, #0
    82c4:	68f8      	ldr	r0, [r7, #12]
    82c6:	f000 fd93 	bl	8df0 <memset>
}
    82ca:	bf00      	nop
    82cc:	3710      	adds	r7, #16
    82ce:	46bd      	mov	sp, r7
    82d0:	bd80      	pop	{r7, pc}

000082d2 <xStreamBufferReset>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferReset( StreamBufferHandle_t xStreamBuffer )
{
    82d2:	b580      	push	{r7, lr}
    82d4:	b088      	sub	sp, #32
    82d6:	af02      	add	r7, sp, #8
    82d8:	6078      	str	r0, [r7, #4]
StreamBuffer_t * const pxStreamBuffer = ( StreamBuffer_t * ) xStreamBuffer; /*lint !e9087 !e9079 Safe cast as StreamBufferHandle_t is opaque Streambuffer_t. */
    82da:	687b      	ldr	r3, [r7, #4]
    82dc:	60fb      	str	r3, [r7, #12]
BaseType_t xReturn = pdFAIL, xIsMessageBuffer;
    82de:	2300      	movs	r3, #0
    82e0:	617b      	str	r3, [r7, #20]
		uxStreamBufferNumber = pxStreamBuffer->uxStreamBufferNumber;
	}
	#endif

	/* Can only reset a message buffer if there are no tasks blocked on it. */
	if( pxStreamBuffer->xTaskWaitingToReceive == NULL )
    82e2:	68fb      	ldr	r3, [r7, #12]
    82e4:	691b      	ldr	r3, [r3, #16]
    82e6:	2b00      	cmp	r3, #0
    82e8:	d11c      	bne.n	8324 <xStreamBufferReset+0x52>
	{
		if( pxStreamBuffer->xTaskWaitingToSend == NULL )
    82ea:	68fb      	ldr	r3, [r7, #12]
    82ec:	695b      	ldr	r3, [r3, #20]
    82ee:	2b00      	cmp	r3, #0
    82f0:	d118      	bne.n	8324 <xStreamBufferReset+0x52>
		{
			if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    82f2:	68fb      	ldr	r3, [r7, #12]
    82f4:	7f1b      	ldrb	r3, [r3, #28]
    82f6:	f003 0301 	and.w	r3, r3, #1
    82fa:	2b00      	cmp	r3, #0
    82fc:	d002      	beq.n	8304 <xStreamBufferReset+0x32>
			{
				xIsMessageBuffer = pdTRUE;
    82fe:	2301      	movs	r3, #1
    8300:	613b      	str	r3, [r7, #16]
    8302:	e001      	b.n	8308 <xStreamBufferReset+0x36>
			}
			else
			{
				xIsMessageBuffer = pdFALSE;
    8304:	2300      	movs	r3, #0
    8306:	613b      	str	r3, [r7, #16]
			}

			prvInitialiseNewStreamBuffer( pxStreamBuffer,
    8308:	68fb      	ldr	r3, [r7, #12]
    830a:	6999      	ldr	r1, [r3, #24]
    830c:	68fb      	ldr	r3, [r7, #12]
    830e:	689a      	ldr	r2, [r3, #8]
    8310:	68fb      	ldr	r3, [r7, #12]
    8312:	68d8      	ldr	r0, [r3, #12]
    8314:	693b      	ldr	r3, [r7, #16]
    8316:	9300      	str	r3, [sp, #0]
    8318:	4603      	mov	r3, r0
    831a:	68f8      	ldr	r0, [r7, #12]
    831c:	f000 fba3 	bl	8a66 <prvInitialiseNewStreamBuffer>
										  pxStreamBuffer->pucBuffer,
										  pxStreamBuffer->xLength,
										  pxStreamBuffer->xTriggerLevelBytes,
										  xIsMessageBuffer );
			xReturn = pdPASS;
    8320:	2301      	movs	r3, #1
    8322:	617b      	str	r3, [r7, #20]

			traceSTREAM_BUFFER_RESET( xStreamBuffer );
		}
	}

	return xReturn;
    8324:	697b      	ldr	r3, [r7, #20]
}
    8326:	4618      	mov	r0, r3
    8328:	3718      	adds	r7, #24
    832a:	46bd      	mov	sp, r7
    832c:	bd80      	pop	{r7, pc}

0000832e <xStreamBufferSetTriggerLevel>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferSetTriggerLevel( StreamBufferHandle_t xStreamBuffer, size_t xTriggerLevel )
{
    832e:	b480      	push	{r7}
    8330:	b085      	sub	sp, #20
    8332:	af00      	add	r7, sp, #0
    8334:	6078      	str	r0, [r7, #4]
    8336:	6039      	str	r1, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = ( StreamBuffer_t * ) xStreamBuffer; /*lint !e9087 !e9079 Safe cast as StreamBufferHandle_t is opaque Streambuffer_t. */
    8338:	687b      	ldr	r3, [r7, #4]
    833a:	60bb      	str	r3, [r7, #8]
BaseType_t xReturn;

	configASSERT( pxStreamBuffer );

	/* It is not valid for the trigger level to be 0. */
	if( xTriggerLevel == ( size_t ) 0 )
    833c:	683b      	ldr	r3, [r7, #0]
    833e:	2b00      	cmp	r3, #0
    8340:	d101      	bne.n	8346 <xStreamBufferSetTriggerLevel+0x18>
	{
		xTriggerLevel = ( size_t ) 1; /*lint !e9044 Parameter modified to ensure it doesn't have a dangerous value. */
    8342:	2301      	movs	r3, #1
    8344:	603b      	str	r3, [r7, #0]
	}

	/* The trigger level is the number of bytes that must be in the stream
	buffer before a task that is waiting for data is unblocked. */
	if( xTriggerLevel <= pxStreamBuffer->xLength )
    8346:	68bb      	ldr	r3, [r7, #8]
    8348:	689b      	ldr	r3, [r3, #8]
    834a:	683a      	ldr	r2, [r7, #0]
    834c:	429a      	cmp	r2, r3
    834e:	d805      	bhi.n	835c <xStreamBufferSetTriggerLevel+0x2e>
	{
		pxStreamBuffer->xTriggerLevelBytes = xTriggerLevel;
    8350:	68bb      	ldr	r3, [r7, #8]
    8352:	683a      	ldr	r2, [r7, #0]
    8354:	60da      	str	r2, [r3, #12]
		xReturn = pdPASS;
    8356:	2301      	movs	r3, #1
    8358:	60fb      	str	r3, [r7, #12]
    835a:	e001      	b.n	8360 <xStreamBufferSetTriggerLevel+0x32>
	}
	else
	{
		xReturn = pdFALSE;
    835c:	2300      	movs	r3, #0
    835e:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    8360:	68fb      	ldr	r3, [r7, #12]
}
    8362:	4618      	mov	r0, r3
    8364:	3714      	adds	r7, #20
    8366:	46bd      	mov	sp, r7
    8368:	bc80      	pop	{r7}
    836a:	4770      	bx	lr

0000836c <xStreamBufferSpacesAvailable>:
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
    836c:	b480      	push	{r7}
    836e:	b085      	sub	sp, #20
    8370:	af00      	add	r7, sp, #0
    8372:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = ( StreamBuffer_t * ) xStreamBuffer; /*lint !e9087 !e9079 Safe cast as StreamBufferHandle_t is opaque Streambuffer_t. */
    8374:	687b      	ldr	r3, [r7, #4]
    8376:	60bb      	str	r3, [r7, #8]
size_t xSpace;

	configASSERT( pxStreamBuffer );

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
    8378:	68bb      	ldr	r3, [r7, #8]
    837a:	689a      	ldr	r2, [r3, #8]
    837c:	68bb      	ldr	r3, [r7, #8]
    837e:	681b      	ldr	r3, [r3, #0]
    8380:	4413      	add	r3, r2
    8382:	60fb      	str	r3, [r7, #12]
	xSpace -= pxStreamBuffer->xHead;
    8384:	68bb      	ldr	r3, [r7, #8]
    8386:	685b      	ldr	r3, [r3, #4]
    8388:	68fa      	ldr	r2, [r7, #12]
    838a:	1ad3      	subs	r3, r2, r3
    838c:	60fb      	str	r3, [r7, #12]
	xSpace -= ( size_t ) 1;
    838e:	68fb      	ldr	r3, [r7, #12]
    8390:	3b01      	subs	r3, #1
    8392:	60fb      	str	r3, [r7, #12]

	if( xSpace >= pxStreamBuffer->xLength )
    8394:	68bb      	ldr	r3, [r7, #8]
    8396:	689b      	ldr	r3, [r3, #8]
    8398:	68fa      	ldr	r2, [r7, #12]
    839a:	429a      	cmp	r2, r3
    839c:	d304      	bcc.n	83a8 <xStreamBufferSpacesAvailable+0x3c>
	{
		xSpace -= pxStreamBuffer->xLength;
    839e:	68bb      	ldr	r3, [r7, #8]
    83a0:	689b      	ldr	r3, [r3, #8]
    83a2:	68fa      	ldr	r2, [r7, #12]
    83a4:	1ad3      	subs	r3, r2, r3
    83a6:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
    83a8:	68fb      	ldr	r3, [r7, #12]
}
    83aa:	4618      	mov	r0, r3
    83ac:	3714      	adds	r7, #20
    83ae:	46bd      	mov	sp, r7
    83b0:	bc80      	pop	{r7}
    83b2:	4770      	bx	lr

000083b4 <xStreamBufferBytesAvailable>:
/*-----------------------------------------------------------*/

size_t xStreamBufferBytesAvailable( StreamBufferHandle_t xStreamBuffer )
{
    83b4:	b580      	push	{r7, lr}
    83b6:	b084      	sub	sp, #16
    83b8:	af00      	add	r7, sp, #0
    83ba:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = ( StreamBuffer_t * ) xStreamBuffer; /*lint !e9087 !e9079 Safe cast as StreamBufferHandle_t is opaque Streambuffer_t. */
    83bc:	687b      	ldr	r3, [r7, #4]
    83be:	60fb      	str	r3, [r7, #12]
size_t xReturn;

	configASSERT( pxStreamBuffer );

	xReturn = prvBytesInBuffer( pxStreamBuffer );
    83c0:	68f8      	ldr	r0, [r7, #12]
    83c2:	f000 fb31 	bl	8a28 <prvBytesInBuffer>
    83c6:	60b8      	str	r0, [r7, #8]
	return xReturn;
    83c8:	68bb      	ldr	r3, [r7, #8]
}
    83ca:	4618      	mov	r0, r3
    83cc:	3710      	adds	r7, #16
    83ce:	46bd      	mov	sp, r7
    83d0:	bd80      	pop	{r7, pc}

000083d2 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
						  const void *pvTxData,
						  size_t xDataLengthBytes,
						  TickType_t xTicksToWait )
{
    83d2:	b580      	push	{r7, lr}
    83d4:	b08c      	sub	sp, #48	; 0x30
    83d6:	af02      	add	r7, sp, #8
    83d8:	60f8      	str	r0, [r7, #12]
    83da:	60b9      	str	r1, [r7, #8]
    83dc:	607a      	str	r2, [r7, #4]
    83de:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = ( StreamBuffer_t * ) xStreamBuffer; /*lint !e9087 !e9079 Safe cast as StreamBufferHandle_t is opaque Streambuffer_t. */
    83e0:	68fb      	ldr	r3, [r7, #12]
    83e2:	61fb      	str	r3, [r7, #28]
size_t xReturn, xSpace = 0;
    83e4:	2300      	movs	r3, #0
    83e6:	627b      	str	r3, [r7, #36]	; 0x24
size_t xRequiredSpace = xDataLengthBytes;
    83e8:	687b      	ldr	r3, [r7, #4]
    83ea:	623b      	str	r3, [r7, #32]

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    83ec:	69fb      	ldr	r3, [r7, #28]
    83ee:	7f1b      	ldrb	r3, [r3, #28]
    83f0:	f003 0301 	and.w	r3, r3, #1
    83f4:	2b00      	cmp	r3, #0
    83f6:	d002      	beq.n	83fe <xStreamBufferSend+0x2c>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    83f8:	6a3b      	ldr	r3, [r7, #32]
    83fa:	3304      	adds	r3, #4
    83fc:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xTicksToWait != ( TickType_t ) 0 )
    83fe:	683b      	ldr	r3, [r7, #0]
    8400:	2b00      	cmp	r3, #0
    8402:	d030      	beq.n	8466 <xStreamBufferSend+0x94>
	{
		vTaskSetTimeOutState( &xTimeOut );
    8404:	f107 0310 	add.w	r3, r7, #16
    8408:	4618      	mov	r0, r3
    840a:	f7ff f975 	bl	76f8 <vTaskSetTimeOutState>

		do
		{
			/* Wait until the required number of bytes are free in the message
			buffer. */
			taskENTER_CRITICAL();
    840e:	f000 fbdf 	bl	8bd0 <vPortEnterCritical>
			{
				xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    8412:	69f8      	ldr	r0, [r7, #28]
    8414:	f7ff ffaa 	bl	836c <xStreamBufferSpacesAvailable>
    8418:	6278      	str	r0, [r7, #36]	; 0x24

				if( xSpace < xRequiredSpace )
    841a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    841c:	6a3b      	ldr	r3, [r7, #32]
    841e:	429a      	cmp	r2, r3
    8420:	d208      	bcs.n	8434 <xStreamBufferSend+0x62>
				{
					/* Clear notification state as going to wait for space. */
					( void ) xTaskNotifyStateClear( NULL );
    8422:	2000      	movs	r0, #0
    8424:	f7ff fe8a 	bl	813c <xTaskNotifyStateClear>

					/* Should only be one writer. */
					configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
					pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    8428:	f7ff faa0 	bl	796c <xTaskGetCurrentTaskHandle>
    842c:	4602      	mov	r2, r0
    842e:	69fb      	ldr	r3, [r7, #28]
    8430:	615a      	str	r2, [r3, #20]
    8432:	e002      	b.n	843a <xStreamBufferSend+0x68>
				}
				else
				{
					taskEXIT_CRITICAL();
    8434:	f000 fbe6 	bl	8c04 <vPortExitCritical>
					break;
    8438:	e015      	b.n	8466 <xStreamBufferSend+0x94>
				}
			}
			taskEXIT_CRITICAL();
    843a:	f000 fbe3 	bl	8c04 <vPortExitCritical>

			traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, UINT32_MAX, NULL, xTicksToWait );
    843e:	683b      	ldr	r3, [r7, #0]
    8440:	2200      	movs	r2, #0
    8442:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    8446:	2000      	movs	r0, #0
    8448:	f7ff fc7a 	bl	7d40 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToSend = NULL;
    844c:	69fb      	ldr	r3, [r7, #28]
    844e:	2200      	movs	r2, #0
    8450:	615a      	str	r2, [r3, #20]

		} while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    8452:	463a      	mov	r2, r7
    8454:	f107 0310 	add.w	r3, r7, #16
    8458:	4611      	mov	r1, r2
    845a:	4618      	mov	r0, r3
    845c:	f7ff f97a 	bl	7754 <xTaskCheckForTimeOut>
    8460:	4603      	mov	r3, r0
    8462:	2b00      	cmp	r3, #0
    8464:	d0d3      	beq.n	840e <xStreamBufferSend+0x3c>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xSpace == ( size_t ) 0 )
    8466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8468:	2b00      	cmp	r3, #0
    846a:	d103      	bne.n	8474 <xStreamBufferSend+0xa2>
	{
		xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    846c:	69f8      	ldr	r0, [r7, #28]
    846e:	f7ff ff7d 	bl	836c <xStreamBufferSpacesAvailable>
    8472:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    8474:	6a3b      	ldr	r3, [r7, #32]
    8476:	9300      	str	r3, [sp, #0]
    8478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    847a:	687a      	ldr	r2, [r7, #4]
    847c:	68b9      	ldr	r1, [r7, #8]
    847e:	69f8      	ldr	r0, [r7, #28]
    8480:	f000 f878 	bl	8574 <prvWriteMessageToBuffer>
    8484:	61b8      	str	r0, [r7, #24]

	if( xReturn > ( size_t ) 0 )
    8486:	69bb      	ldr	r3, [r7, #24]
    8488:	2b00      	cmp	r3, #0
    848a:	d019      	beq.n	84c0 <xStreamBufferSend+0xee>
	{
		traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    848c:	69f8      	ldr	r0, [r7, #28]
    848e:	f000 facb 	bl	8a28 <prvBytesInBuffer>
    8492:	4602      	mov	r2, r0
    8494:	69fb      	ldr	r3, [r7, #28]
    8496:	68db      	ldr	r3, [r3, #12]
    8498:	429a      	cmp	r2, r3
    849a:	d311      	bcc.n	84c0 <xStreamBufferSend+0xee>
		{
			sbSEND_COMPLETED( pxStreamBuffer );
    849c:	f7fe fe8c 	bl	71b8 <vTaskSuspendAll>
    84a0:	69fb      	ldr	r3, [r7, #28]
    84a2:	691b      	ldr	r3, [r3, #16]
    84a4:	2b00      	cmp	r3, #0
    84a6:	d009      	beq.n	84bc <xStreamBufferSend+0xea>
    84a8:	69fb      	ldr	r3, [r7, #28]
    84aa:	6918      	ldr	r0, [r3, #16]
    84ac:	2300      	movs	r3, #0
    84ae:	2200      	movs	r2, #0
    84b0:	2100      	movs	r1, #0
    84b2:	f7ff fc9f 	bl	7df4 <xTaskGenericNotify>
    84b6:	69fb      	ldr	r3, [r7, #28]
    84b8:	2200      	movs	r2, #0
    84ba:	611a      	str	r2, [r3, #16]
    84bc:	f7fe fe8a 	bl	71d4 <xTaskResumeAll>
	{
		mtCOVERAGE_TEST_MARKER();
		traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
	}

	return xReturn;
    84c0:	69bb      	ldr	r3, [r7, #24]
}
    84c2:	4618      	mov	r0, r3
    84c4:	3728      	adds	r7, #40	; 0x28
    84c6:	46bd      	mov	sp, r7
    84c8:	bd80      	pop	{r7, pc}

000084ca <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
								 const void *pvTxData,
								 size_t xDataLengthBytes,
								 BaseType_t * const pxHigherPriorityTaskWoken )
{
    84ca:	b580      	push	{r7, lr}
    84cc:	b08e      	sub	sp, #56	; 0x38
    84ce:	af02      	add	r7, sp, #8
    84d0:	60f8      	str	r0, [r7, #12]
    84d2:	60b9      	str	r1, [r7, #8]
    84d4:	607a      	str	r2, [r7, #4]
    84d6:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = ( StreamBuffer_t * ) xStreamBuffer; /*lint !e9087 !e9079 Safe cast as StreamBufferHandle_t is opaque Streambuffer_t. */
    84d8:	68fb      	ldr	r3, [r7, #12]
    84da:	62bb      	str	r3, [r7, #40]	; 0x28
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
    84dc:	687b      	ldr	r3, [r7, #4]
    84de:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    84e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    84e2:	7f1b      	ldrb	r3, [r3, #28]
    84e4:	f003 0301 	and.w	r3, r3, #1
    84e8:	2b00      	cmp	r3, #0
    84ea:	d002      	beq.n	84f2 <xStreamBufferSendFromISR+0x28>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    84ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    84ee:	3304      	adds	r3, #4
    84f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    84f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    84f4:	f7ff ff3a 	bl	836c <xStreamBufferSpacesAvailable>
    84f8:	6278      	str	r0, [r7, #36]	; 0x24
	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    84fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    84fc:	9300      	str	r3, [sp, #0]
    84fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8500:	687a      	ldr	r2, [r7, #4]
    8502:	68b9      	ldr	r1, [r7, #8]
    8504:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    8506:	f000 f835 	bl	8574 <prvWriteMessageToBuffer>
    850a:	6238      	str	r0, [r7, #32]

	if( xReturn > ( size_t ) 0 )
    850c:	6a3b      	ldr	r3, [r7, #32]
    850e:	2b00      	cmp	r3, #0
    8510:	d02b      	beq.n	856a <xStreamBufferSendFromISR+0xa0>
	{
		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    8512:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    8514:	f000 fa88 	bl	8a28 <prvBytesInBuffer>
    8518:	4602      	mov	r2, r0
    851a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    851c:	68db      	ldr	r3, [r3, #12]
    851e:	429a      	cmp	r2, r3
    8520:	d323      	bcc.n	856a <xStreamBufferSendFromISR+0xa0>
	__asm volatile
    8522:	f3ef 8211 	mrs	r2, BASEPRI
    8526:	f04f 03bf 	mov.w	r3, #191	; 0xbf
    852a:	f383 8811 	msr	BASEPRI, r3
    852e:	f3bf 8f6f 	isb	sy
    8532:	f3bf 8f4f 	dsb	sy
    8536:	61ba      	str	r2, [r7, #24]
    8538:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
    853a:	69bb      	ldr	r3, [r7, #24]
		{
			sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    853c:	61fb      	str	r3, [r7, #28]
    853e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8540:	691b      	ldr	r3, [r3, #16]
    8542:	2b00      	cmp	r3, #0
    8544:	d00b      	beq.n	855e <xStreamBufferSendFromISR+0x94>
    8546:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8548:	6918      	ldr	r0, [r3, #16]
    854a:	683b      	ldr	r3, [r7, #0]
    854c:	9300      	str	r3, [sp, #0]
    854e:	2300      	movs	r3, #0
    8550:	2200      	movs	r2, #0
    8552:	2100      	movs	r1, #0
    8554:	f7ff fcd4 	bl	7f00 <xTaskGenericNotifyFromISR>
    8558:	6abb      	ldr	r3, [r7, #40]	; 0x28
    855a:	2200      	movs	r2, #0
    855c:	611a      	str	r2, [r3, #16]
    855e:	69fb      	ldr	r3, [r7, #28]
    8560:	613b      	str	r3, [r7, #16]
	__asm volatile
    8562:	693b      	ldr	r3, [r7, #16]
    8564:	f383 8811 	msr	BASEPRI, r3
}
    8568:	bf00      	nop
		mtCOVERAGE_TEST_MARKER();
	}

	traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

	return xReturn;
    856a:	6a3b      	ldr	r3, [r7, #32]
}
    856c:	4618      	mov	r0, r3
    856e:	3730      	adds	r7, #48	; 0x30
    8570:	46bd      	mov	sp, r7
    8572:	bd80      	pop	{r7, pc}

00008574 <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
    8574:	b580      	push	{r7, lr}
    8576:	b086      	sub	sp, #24
    8578:	af00      	add	r7, sp, #0
    857a:	60f8      	str	r0, [r7, #12]
    857c:	60b9      	str	r1, [r7, #8]
    857e:	607a      	str	r2, [r7, #4]
    8580:	603b      	str	r3, [r7, #0]
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
    8582:	683b      	ldr	r3, [r7, #0]
    8584:	2b00      	cmp	r3, #0
    8586:	d102      	bne.n	858e <prvWriteMessageToBuffer+0x1a>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
    8588:	2300      	movs	r3, #0
    858a:	617b      	str	r3, [r7, #20]
    858c:	e01d      	b.n	85ca <prvWriteMessageToBuffer+0x56>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
    858e:	68fb      	ldr	r3, [r7, #12]
    8590:	7f1b      	ldrb	r3, [r3, #28]
    8592:	f003 0301 	and.w	r3, r3, #1
    8596:	2b00      	cmp	r3, #0
    8598:	d108      	bne.n	85ac <prvWriteMessageToBuffer+0x38>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
    859a:	2301      	movs	r3, #1
    859c:	617b      	str	r3, [r7, #20]
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace ); /*lint !e9044 Function parameter modified to ensure it is capped to available space. */
    859e:	687a      	ldr	r2, [r7, #4]
    85a0:	683b      	ldr	r3, [r7, #0]
    85a2:	4293      	cmp	r3, r2
    85a4:	bf28      	it	cs
    85a6:	4613      	movcs	r3, r2
    85a8:	607b      	str	r3, [r7, #4]
    85aa:	e00e      	b.n	85ca <prvWriteMessageToBuffer+0x56>
	}
	else if( xSpace >= xRequiredSpace )
    85ac:	683a      	ldr	r2, [r7, #0]
    85ae:	6a3b      	ldr	r3, [r7, #32]
    85b0:	429a      	cmp	r2, r3
    85b2:	d308      	bcc.n	85c6 <prvWriteMessageToBuffer+0x52>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
    85b4:	2301      	movs	r3, #1
    85b6:	617b      	str	r3, [r7, #20]
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
    85b8:	1d3b      	adds	r3, r7, #4
    85ba:	2204      	movs	r2, #4
    85bc:	4619      	mov	r1, r3
    85be:	68f8      	ldr	r0, [r7, #12]
    85c0:	f000 f9a8 	bl	8914 <prvWriteBytesToBuffer>
    85c4:	e001      	b.n	85ca <prvWriteMessageToBuffer+0x56>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
    85c6:	2300      	movs	r3, #0
    85c8:	617b      	str	r3, [r7, #20]
	}

	if( xShouldWrite != pdFALSE )
    85ca:	697b      	ldr	r3, [r7, #20]
    85cc:	2b00      	cmp	r3, #0
    85ce:	d007      	beq.n	85e0 <prvWriteMessageToBuffer+0x6c>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
    85d0:	687b      	ldr	r3, [r7, #4]
    85d2:	461a      	mov	r2, r3
    85d4:	68b9      	ldr	r1, [r7, #8]
    85d6:	68f8      	ldr	r0, [r7, #12]
    85d8:	f000 f99c 	bl	8914 <prvWriteBytesToBuffer>
    85dc:	6138      	str	r0, [r7, #16]
    85de:	e001      	b.n	85e4 <prvWriteMessageToBuffer+0x70>
	}
	else
	{
		xReturn = 0;
    85e0:	2300      	movs	r3, #0
    85e2:	613b      	str	r3, [r7, #16]
	}

	return xReturn;
    85e4:	693b      	ldr	r3, [r7, #16]
}
    85e6:	4618      	mov	r0, r3
    85e8:	3718      	adds	r7, #24
    85ea:	46bd      	mov	sp, r7
    85ec:	bd80      	pop	{r7, pc}

000085ee <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
    85ee:	b580      	push	{r7, lr}
    85f0:	b08a      	sub	sp, #40	; 0x28
    85f2:	af02      	add	r7, sp, #8
    85f4:	60f8      	str	r0, [r7, #12]
    85f6:	60b9      	str	r1, [r7, #8]
    85f8:	607a      	str	r2, [r7, #4]
    85fa:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = ( StreamBuffer_t * ) xStreamBuffer; /*lint !e9087 !e9079 Safe cast as StreamBufferHandle_t is opaque Streambuffer_t. */
    85fc:	68fb      	ldr	r3, [r7, #12]
    85fe:	613b      	str	r3, [r7, #16]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    8600:	2300      	movs	r3, #0
    8602:	61fb      	str	r3, [r7, #28]
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    8604:	693b      	ldr	r3, [r7, #16]
    8606:	7f1b      	ldrb	r3, [r3, #28]
    8608:	f003 0301 	and.w	r3, r3, #1
    860c:	2b00      	cmp	r3, #0
    860e:	d002      	beq.n	8616 <xStreamBufferReceive+0x28>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    8610:	2304      	movs	r3, #4
    8612:	617b      	str	r3, [r7, #20]
    8614:	e001      	b.n	861a <xStreamBufferReceive+0x2c>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
    8616:	2300      	movs	r3, #0
    8618:	617b      	str	r3, [r7, #20]
	}

	if( xTicksToWait != ( TickType_t ) 0 )
    861a:	683b      	ldr	r3, [r7, #0]
    861c:	2b00      	cmp	r3, #0
    861e:	d026      	beq.n	866e <xStreamBufferReceive+0x80>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
    8620:	f000 fad6 	bl	8bd0 <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    8624:	6938      	ldr	r0, [r7, #16]
    8626:	f000 f9ff 	bl	8a28 <prvBytesInBuffer>
    862a:	61b8      	str	r0, [r7, #24]
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
    862c:	69ba      	ldr	r2, [r7, #24]
    862e:	697b      	ldr	r3, [r7, #20]
    8630:	429a      	cmp	r2, r3
    8632:	d807      	bhi.n	8644 <xStreamBufferReceive+0x56>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
    8634:	2000      	movs	r0, #0
    8636:	f7ff fd81 	bl	813c <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    863a:	f7ff f997 	bl	796c <xTaskGetCurrentTaskHandle>
    863e:	4602      	mov	r2, r0
    8640:	693b      	ldr	r3, [r7, #16]
    8642:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    8644:	f000 fade 	bl	8c04 <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
    8648:	69ba      	ldr	r2, [r7, #24]
    864a:	697b      	ldr	r3, [r7, #20]
    864c:	429a      	cmp	r2, r3
    864e:	d812      	bhi.n	8676 <xStreamBufferReceive+0x88>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, UINT32_MAX, NULL, xTicksToWait );
    8650:	683b      	ldr	r3, [r7, #0]
    8652:	2200      	movs	r2, #0
    8654:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    8658:	2000      	movs	r0, #0
    865a:	f7ff fb71 	bl	7d40 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
    865e:	693b      	ldr	r3, [r7, #16]
    8660:	2200      	movs	r2, #0
    8662:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    8664:	6938      	ldr	r0, [r7, #16]
    8666:	f000 f9df 	bl	8a28 <prvBytesInBuffer>
    866a:	61b8      	str	r0, [r7, #24]
    866c:	e003      	b.n	8676 <xStreamBufferReceive+0x88>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    866e:	6938      	ldr	r0, [r7, #16]
    8670:	f000 f9da 	bl	8a28 <prvBytesInBuffer>
    8674:	61b8      	str	r0, [r7, #24]
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
    8676:	69ba      	ldr	r2, [r7, #24]
    8678:	697b      	ldr	r3, [r7, #20]
    867a:	429a      	cmp	r2, r3
    867c:	d91d      	bls.n	86ba <xStreamBufferReceive+0xcc>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
    867e:	697b      	ldr	r3, [r7, #20]
    8680:	9300      	str	r3, [sp, #0]
    8682:	69bb      	ldr	r3, [r7, #24]
    8684:	687a      	ldr	r2, [r7, #4]
    8686:	68b9      	ldr	r1, [r7, #8]
    8688:	6938      	ldr	r0, [r7, #16]
    868a:	f000 f86e 	bl	876a <prvReadMessageFromBuffer>
    868e:	61f8      	str	r0, [r7, #28]

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
    8690:	69fb      	ldr	r3, [r7, #28]
    8692:	2b00      	cmp	r3, #0
    8694:	d011      	beq.n	86ba <xStreamBufferReceive+0xcc>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
    8696:	f7fe fd8f 	bl	71b8 <vTaskSuspendAll>
    869a:	693b      	ldr	r3, [r7, #16]
    869c:	695b      	ldr	r3, [r3, #20]
    869e:	2b00      	cmp	r3, #0
    86a0:	d009      	beq.n	86b6 <xStreamBufferReceive+0xc8>
    86a2:	693b      	ldr	r3, [r7, #16]
    86a4:	6958      	ldr	r0, [r3, #20]
    86a6:	2300      	movs	r3, #0
    86a8:	2200      	movs	r2, #0
    86aa:	2100      	movs	r1, #0
    86ac:	f7ff fba2 	bl	7df4 <xTaskGenericNotify>
    86b0:	693b      	ldr	r3, [r7, #16]
    86b2:	2200      	movs	r2, #0
    86b4:	615a      	str	r2, [r3, #20]
    86b6:	f7fe fd8d 	bl	71d4 <xTaskResumeAll>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
    86ba:	69fb      	ldr	r3, [r7, #28]
}
    86bc:	4618      	mov	r0, r3
    86be:	3720      	adds	r7, #32
    86c0:	46bd      	mov	sp, r7
    86c2:	bd80      	pop	{r7, pc}

000086c4 <xStreamBufferReceiveFromISR>:

size_t xStreamBufferReceiveFromISR( StreamBufferHandle_t xStreamBuffer,
									void *pvRxData,
									size_t xBufferLengthBytes,
									BaseType_t * const pxHigherPriorityTaskWoken )
{
    86c4:	b580      	push	{r7, lr}
    86c6:	b08e      	sub	sp, #56	; 0x38
    86c8:	af02      	add	r7, sp, #8
    86ca:	60f8      	str	r0, [r7, #12]
    86cc:	60b9      	str	r1, [r7, #8]
    86ce:	607a      	str	r2, [r7, #4]
    86d0:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = ( StreamBuffer_t * ) xStreamBuffer; /*lint !e9087 !e9079 Safe cast as StreamBufferHandle_t is opaque Streambuffer_t. */
    86d2:	68fb      	ldr	r3, [r7, #12]
    86d4:	627b      	str	r3, [r7, #36]	; 0x24
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    86d6:	2300      	movs	r3, #0
    86d8:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    86da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    86dc:	7f1b      	ldrb	r3, [r3, #28]
    86de:	f003 0301 	and.w	r3, r3, #1
    86e2:	2b00      	cmp	r3, #0
    86e4:	d002      	beq.n	86ec <xStreamBufferReceiveFromISR+0x28>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    86e6:	2304      	movs	r3, #4
    86e8:	62bb      	str	r3, [r7, #40]	; 0x28
    86ea:	e001      	b.n	86f0 <xStreamBufferReceiveFromISR+0x2c>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
    86ec:	2300      	movs	r3, #0
    86ee:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    86f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
    86f2:	f000 f999 	bl	8a28 <prvBytesInBuffer>
    86f6:	6238      	str	r0, [r7, #32]
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
    86f8:	6a3a      	ldr	r2, [r7, #32]
    86fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    86fc:	429a      	cmp	r2, r3
    86fe:	d92f      	bls.n	8760 <xStreamBufferReceiveFromISR+0x9c>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
    8700:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8702:	9300      	str	r3, [sp, #0]
    8704:	6a3b      	ldr	r3, [r7, #32]
    8706:	687a      	ldr	r2, [r7, #4]
    8708:	68b9      	ldr	r1, [r7, #8]
    870a:	6a78      	ldr	r0, [r7, #36]	; 0x24
    870c:	f000 f82d 	bl	876a <prvReadMessageFromBuffer>
    8710:	62f8      	str	r0, [r7, #44]	; 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
    8712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8714:	2b00      	cmp	r3, #0
    8716:	d023      	beq.n	8760 <xStreamBufferReceiveFromISR+0x9c>
	__asm volatile
    8718:	f3ef 8211 	mrs	r2, BASEPRI
    871c:	f04f 03bf 	mov.w	r3, #191	; 0xbf
    8720:	f383 8811 	msr	BASEPRI, r3
    8724:	f3bf 8f6f 	isb	sy
    8728:	f3bf 8f4f 	dsb	sy
    872c:	61ba      	str	r2, [r7, #24]
    872e:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
    8730:	69bb      	ldr	r3, [r7, #24]
		{
			sbRECEIVE_COMPLETED_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    8732:	61fb      	str	r3, [r7, #28]
    8734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8736:	695b      	ldr	r3, [r3, #20]
    8738:	2b00      	cmp	r3, #0
    873a:	d00b      	beq.n	8754 <xStreamBufferReceiveFromISR+0x90>
    873c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    873e:	6958      	ldr	r0, [r3, #20]
    8740:	683b      	ldr	r3, [r7, #0]
    8742:	9300      	str	r3, [sp, #0]
    8744:	2300      	movs	r3, #0
    8746:	2200      	movs	r2, #0
    8748:	2100      	movs	r1, #0
    874a:	f7ff fbd9 	bl	7f00 <xTaskGenericNotifyFromISR>
    874e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8750:	2200      	movs	r2, #0
    8752:	615a      	str	r2, [r3, #20]
    8754:	69fb      	ldr	r3, [r7, #28]
    8756:	613b      	str	r3, [r7, #16]
	__asm volatile
    8758:	693b      	ldr	r3, [r7, #16]
    875a:	f383 8811 	msr	BASEPRI, r3
}
    875e:	bf00      	nop
		mtCOVERAGE_TEST_MARKER();
	}

	traceSTREAM_BUFFER_RECEIVE_FROM_ISR( xStreamBuffer, xReceivedLength );

	return xReceivedLength;
    8760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
    8762:	4618      	mov	r0, r3
    8764:	3730      	adds	r7, #48	; 0x30
    8766:	46bd      	mov	sp, r7
    8768:	bd80      	pop	{r7, pc}

0000876a <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
    876a:	b580      	push	{r7, lr}
    876c:	b088      	sub	sp, #32
    876e:	af00      	add	r7, sp, #0
    8770:	60f8      	str	r0, [r7, #12]
    8772:	60b9      	str	r1, [r7, #8]
    8774:	607a      	str	r2, [r7, #4]
    8776:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
    8778:	6abb      	ldr	r3, [r7, #40]	; 0x28
    877a:	2b00      	cmp	r3, #0
    877c:	d017      	beq.n	87ae <prvReadMessageFromBuffer+0x44>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
    877e:	68fb      	ldr	r3, [r7, #12]
    8780:	681b      	ldr	r3, [r3, #0]
    8782:	61fb      	str	r3, [r7, #28]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
    8784:	f107 0114 	add.w	r1, r7, #20
    8788:	683b      	ldr	r3, [r7, #0]
    878a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    878c:	68f8      	ldr	r0, [r7, #12]
    878e:	f000 f901 	bl	8994 <prvReadBytesFromBuffer>

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
    8792:	683a      	ldr	r2, [r7, #0]
    8794:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8796:	1ad3      	subs	r3, r2, r3
    8798:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
    879a:	697b      	ldr	r3, [r7, #20]
    879c:	687a      	ldr	r2, [r7, #4]
    879e:	429a      	cmp	r2, r3
    87a0:	d207      	bcs.n	87b2 <prvReadMessageFromBuffer+0x48>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
    87a2:	68fb      	ldr	r3, [r7, #12]
    87a4:	69fa      	ldr	r2, [r7, #28]
    87a6:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
    87a8:	2300      	movs	r3, #0
    87aa:	617b      	str	r3, [r7, #20]
    87ac:	e001      	b.n	87b2 <prvReadMessageFromBuffer+0x48>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
    87ae:	687b      	ldr	r3, [r7, #4]
    87b0:	617b      	str	r3, [r7, #20]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
    87b2:	697a      	ldr	r2, [r7, #20]
    87b4:	683b      	ldr	r3, [r7, #0]
    87b6:	68b9      	ldr	r1, [r7, #8]
    87b8:	68f8      	ldr	r0, [r7, #12]
    87ba:	f000 f8eb 	bl	8994 <prvReadBytesFromBuffer>
    87be:	61b8      	str	r0, [r7, #24]

	return xReceivedLength;
    87c0:	69bb      	ldr	r3, [r7, #24]
}
    87c2:	4618      	mov	r0, r3
    87c4:	3720      	adds	r7, #32
    87c6:	46bd      	mov	sp, r7
    87c8:	bd80      	pop	{r7, pc}

000087ca <xStreamBufferIsEmpty>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferIsEmpty( StreamBufferHandle_t xStreamBuffer )
{
    87ca:	b480      	push	{r7}
    87cc:	b087      	sub	sp, #28
    87ce:	af00      	add	r7, sp, #0
    87d0:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = ( StreamBuffer_t * ) xStreamBuffer; /*lint !e9087 !e9079 Safe cast as StreamBufferHandle_t is opaque Streambuffer_t. */
    87d2:	687b      	ldr	r3, [r7, #4]
    87d4:	613b      	str	r3, [r7, #16]
size_t xTail;

	configASSERT( pxStreamBuffer );

	/* True if no bytes are available. */
	xTail = pxStreamBuffer->xTail;
    87d6:	693b      	ldr	r3, [r7, #16]
    87d8:	681b      	ldr	r3, [r3, #0]
    87da:	60fb      	str	r3, [r7, #12]
	if( pxStreamBuffer->xHead == xTail )
    87dc:	693b      	ldr	r3, [r7, #16]
    87de:	685b      	ldr	r3, [r3, #4]
    87e0:	68fa      	ldr	r2, [r7, #12]
    87e2:	429a      	cmp	r2, r3
    87e4:	d102      	bne.n	87ec <xStreamBufferIsEmpty+0x22>
	{
		xReturn = pdTRUE;
    87e6:	2301      	movs	r3, #1
    87e8:	617b      	str	r3, [r7, #20]
    87ea:	e001      	b.n	87f0 <xStreamBufferIsEmpty+0x26>
	}
	else
	{
		xReturn = pdFALSE;
    87ec:	2300      	movs	r3, #0
    87ee:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
    87f0:	697b      	ldr	r3, [r7, #20]
}
    87f2:	4618      	mov	r0, r3
    87f4:	371c      	adds	r7, #28
    87f6:	46bd      	mov	sp, r7
    87f8:	bc80      	pop	{r7}
    87fa:	4770      	bx	lr

000087fc <xStreamBufferIsFull>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferIsFull( StreamBufferHandle_t xStreamBuffer )
{
    87fc:	b580      	push	{r7, lr}
    87fe:	b086      	sub	sp, #24
    8800:	af00      	add	r7, sp, #0
    8802:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
size_t xBytesToStoreMessageLength;
const StreamBuffer_t * const pxStreamBuffer = ( StreamBuffer_t * ) xStreamBuffer; /*lint !e9087 !e9079 Safe cast as StreamBufferHandle_t is opaque Streambuffer_t. */
    8804:	687b      	ldr	r3, [r7, #4]
    8806:	60fb      	str	r3, [r7, #12]

	/* This generic version of the receive function is used by both message
	buffers, which store discrete messages, and stream buffers, which store a
	continuous stream of bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    8808:	68fb      	ldr	r3, [r7, #12]
    880a:	7f1b      	ldrb	r3, [r3, #28]
    880c:	f003 0301 	and.w	r3, r3, #1
    8810:	2b00      	cmp	r3, #0
    8812:	d002      	beq.n	881a <xStreamBufferIsFull+0x1e>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    8814:	2304      	movs	r3, #4
    8816:	613b      	str	r3, [r7, #16]
    8818:	e001      	b.n	881e <xStreamBufferIsFull+0x22>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
    881a:	2300      	movs	r3, #0
    881c:	613b      	str	r3, [r7, #16]
	}

	/* True if the available space equals zero. */
	if( xStreamBufferSpacesAvailable( xStreamBuffer ) <= xBytesToStoreMessageLength )
    881e:	6878      	ldr	r0, [r7, #4]
    8820:	f7ff fda4 	bl	836c <xStreamBufferSpacesAvailable>
    8824:	4602      	mov	r2, r0
    8826:	693b      	ldr	r3, [r7, #16]
    8828:	4293      	cmp	r3, r2
    882a:	d302      	bcc.n	8832 <xStreamBufferIsFull+0x36>
	{
		xReturn = pdTRUE;
    882c:	2301      	movs	r3, #1
    882e:	617b      	str	r3, [r7, #20]
    8830:	e001      	b.n	8836 <xStreamBufferIsFull+0x3a>
	}
	else
	{
		xReturn = pdFALSE;
    8832:	2300      	movs	r3, #0
    8834:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
    8836:	697b      	ldr	r3, [r7, #20]
}
    8838:	4618      	mov	r0, r3
    883a:	3718      	adds	r7, #24
    883c:	46bd      	mov	sp, r7
    883e:	bd80      	pop	{r7, pc}

00008840 <xStreamBufferSendCompletedFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferSendCompletedFromISR( StreamBufferHandle_t xStreamBuffer, BaseType_t *pxHigherPriorityTaskWoken )
{
    8840:	b580      	push	{r7, lr}
    8842:	b08a      	sub	sp, #40	; 0x28
    8844:	af02      	add	r7, sp, #8
    8846:	6078      	str	r0, [r7, #4]
    8848:	6039      	str	r1, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = ( StreamBuffer_t * ) xStreamBuffer; /*lint !e9087 !e9079 Safe cast as StreamBufferHandle_t is opaque Streambuffer_t. */
    884a:	687b      	ldr	r3, [r7, #4]
    884c:	61bb      	str	r3, [r7, #24]
	__asm volatile
    884e:	f3ef 8211 	mrs	r2, BASEPRI
    8852:	f04f 03bf 	mov.w	r3, #191	; 0xbf
    8856:	f383 8811 	msr	BASEPRI, r3
    885a:	f3bf 8f6f 	isb	sy
    885e:	f3bf 8f4f 	dsb	sy
    8862:	613a      	str	r2, [r7, #16]
    8864:	60fb      	str	r3, [r7, #12]
	return ulOriginalBASEPRI;
    8866:	693b      	ldr	r3, [r7, #16]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;

	configASSERT( pxStreamBuffer );

	uxSavedInterruptStatus = ( UBaseType_t ) portSET_INTERRUPT_MASK_FROM_ISR();
    8868:	617b      	str	r3, [r7, #20]
	{
		if( ( pxStreamBuffer )->xTaskWaitingToReceive != NULL )
    886a:	69bb      	ldr	r3, [r7, #24]
    886c:	691b      	ldr	r3, [r3, #16]
    886e:	2b00      	cmp	r3, #0
    8870:	d00e      	beq.n	8890 <xStreamBufferSendCompletedFromISR+0x50>
		{
			( void ) xTaskNotifyFromISR( ( pxStreamBuffer )->xTaskWaitingToReceive,
    8872:	69bb      	ldr	r3, [r7, #24]
    8874:	6918      	ldr	r0, [r3, #16]
    8876:	683b      	ldr	r3, [r7, #0]
    8878:	9300      	str	r3, [sp, #0]
    887a:	2300      	movs	r3, #0
    887c:	2200      	movs	r2, #0
    887e:	2100      	movs	r1, #0
    8880:	f7ff fb3e 	bl	7f00 <xTaskGenericNotifyFromISR>
										 ( uint32_t ) 0,
										 eNoAction,
										 pxHigherPriorityTaskWoken );
			( pxStreamBuffer )->xTaskWaitingToReceive = NULL;
    8884:	69bb      	ldr	r3, [r7, #24]
    8886:	2200      	movs	r2, #0
    8888:	611a      	str	r2, [r3, #16]
			xReturn = pdTRUE;
    888a:	2301      	movs	r3, #1
    888c:	61fb      	str	r3, [r7, #28]
    888e:	e001      	b.n	8894 <xStreamBufferSendCompletedFromISR+0x54>
		}
		else
		{
			xReturn = pdFALSE;
    8890:	2300      	movs	r3, #0
    8892:	61fb      	str	r3, [r7, #28]
    8894:	697b      	ldr	r3, [r7, #20]
    8896:	60bb      	str	r3, [r7, #8]
	__asm volatile
    8898:	68bb      	ldr	r3, [r7, #8]
    889a:	f383 8811 	msr	BASEPRI, r3
}
    889e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    88a0:	69fb      	ldr	r3, [r7, #28]
}
    88a2:	4618      	mov	r0, r3
    88a4:	3720      	adds	r7, #32
    88a6:	46bd      	mov	sp, r7
    88a8:	bd80      	pop	{r7, pc}

000088aa <xStreamBufferReceiveCompletedFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferReceiveCompletedFromISR( StreamBufferHandle_t xStreamBuffer, BaseType_t *pxHigherPriorityTaskWoken )
{
    88aa:	b580      	push	{r7, lr}
    88ac:	b08a      	sub	sp, #40	; 0x28
    88ae:	af02      	add	r7, sp, #8
    88b0:	6078      	str	r0, [r7, #4]
    88b2:	6039      	str	r1, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = ( StreamBuffer_t * ) xStreamBuffer; /*lint !e9087 !e9079 Safe cast as StreamBufferHandle_t is opaque Streambuffer_t. */
    88b4:	687b      	ldr	r3, [r7, #4]
    88b6:	61bb      	str	r3, [r7, #24]
	__asm volatile
    88b8:	f3ef 8211 	mrs	r2, BASEPRI
    88bc:	f04f 03bf 	mov.w	r3, #191	; 0xbf
    88c0:	f383 8811 	msr	BASEPRI, r3
    88c4:	f3bf 8f6f 	isb	sy
    88c8:	f3bf 8f4f 	dsb	sy
    88cc:	613a      	str	r2, [r7, #16]
    88ce:	60fb      	str	r3, [r7, #12]
	return ulOriginalBASEPRI;
    88d0:	693b      	ldr	r3, [r7, #16]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;

	configASSERT( pxStreamBuffer );

	uxSavedInterruptStatus = ( UBaseType_t ) portSET_INTERRUPT_MASK_FROM_ISR();
    88d2:	617b      	str	r3, [r7, #20]
	{
		if( ( pxStreamBuffer )->xTaskWaitingToSend != NULL )
    88d4:	69bb      	ldr	r3, [r7, #24]
    88d6:	695b      	ldr	r3, [r3, #20]
    88d8:	2b00      	cmp	r3, #0
    88da:	d00e      	beq.n	88fa <xStreamBufferReceiveCompletedFromISR+0x50>
		{
			( void ) xTaskNotifyFromISR( ( pxStreamBuffer )->xTaskWaitingToSend,
    88dc:	69bb      	ldr	r3, [r7, #24]
    88de:	6958      	ldr	r0, [r3, #20]
    88e0:	683b      	ldr	r3, [r7, #0]
    88e2:	9300      	str	r3, [sp, #0]
    88e4:	2300      	movs	r3, #0
    88e6:	2200      	movs	r2, #0
    88e8:	2100      	movs	r1, #0
    88ea:	f7ff fb09 	bl	7f00 <xTaskGenericNotifyFromISR>
										 ( uint32_t ) 0,
										 eNoAction,
										 pxHigherPriorityTaskWoken );
			( pxStreamBuffer )->xTaskWaitingToSend = NULL;
    88ee:	69bb      	ldr	r3, [r7, #24]
    88f0:	2200      	movs	r2, #0
    88f2:	615a      	str	r2, [r3, #20]
			xReturn = pdTRUE;
    88f4:	2301      	movs	r3, #1
    88f6:	61fb      	str	r3, [r7, #28]
    88f8:	e001      	b.n	88fe <xStreamBufferReceiveCompletedFromISR+0x54>
		}
		else
		{
			xReturn = pdFALSE;
    88fa:	2300      	movs	r3, #0
    88fc:	61fb      	str	r3, [r7, #28]
    88fe:	697b      	ldr	r3, [r7, #20]
    8900:	60bb      	str	r3, [r7, #8]
	__asm volatile
    8902:	68bb      	ldr	r3, [r7, #8]
    8904:	f383 8811 	msr	BASEPRI, r3
}
    8908:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    890a:	69fb      	ldr	r3, [r7, #28]
}
    890c:	4618      	mov	r0, r3
    890e:	3720      	adds	r7, #32
    8910:	46bd      	mov	sp, r7
    8912:	bd80      	pop	{r7, pc}

00008914 <prvWriteBytesToBuffer>:
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
    8914:	b580      	push	{r7, lr}
    8916:	b086      	sub	sp, #24
    8918:	af00      	add	r7, sp, #0
    891a:	60f8      	str	r0, [r7, #12]
    891c:	60b9      	str	r1, [r7, #8]
    891e:	607a      	str	r2, [r7, #4]
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );

	xNextHead = pxStreamBuffer->xHead;
    8920:	68fb      	ldr	r3, [r7, #12]
    8922:	685b      	ldr	r3, [r3, #4]
    8924:	617b      	str	r3, [r7, #20]

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
    8926:	68fb      	ldr	r3, [r7, #12]
    8928:	689a      	ldr	r2, [r3, #8]
    892a:	697b      	ldr	r3, [r7, #20]
    892c:	1ad3      	subs	r3, r2, r3
    892e:	687a      	ldr	r2, [r7, #4]
    8930:	4293      	cmp	r3, r2
    8932:	bf28      	it	cs
    8934:	4613      	movcs	r3, r2
    8936:	613b      	str	r3, [r7, #16]

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
	memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
    8938:	68fb      	ldr	r3, [r7, #12]
    893a:	699a      	ldr	r2, [r3, #24]
    893c:	697b      	ldr	r3, [r7, #20]
    893e:	4413      	add	r3, r2
    8940:	693a      	ldr	r2, [r7, #16]
    8942:	68b9      	ldr	r1, [r7, #8]
    8944:	4618      	mov	r0, r3
    8946:	f000 f9dd 	bl	8d04 <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
    894a:	687a      	ldr	r2, [r7, #4]
    894c:	693b      	ldr	r3, [r7, #16]
    894e:	429a      	cmp	r2, r3
    8950:	d90a      	bls.n	8968 <prvWriteBytesToBuffer+0x54>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
		memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
    8952:	68fb      	ldr	r3, [r7, #12]
    8954:	6998      	ldr	r0, [r3, #24]
    8956:	68ba      	ldr	r2, [r7, #8]
    8958:	693b      	ldr	r3, [r7, #16]
    895a:	18d1      	adds	r1, r2, r3
    895c:	687a      	ldr	r2, [r7, #4]
    895e:	693b      	ldr	r3, [r7, #16]
    8960:	1ad3      	subs	r3, r2, r3
    8962:	461a      	mov	r2, r3
    8964:	f000 f9ce 	bl	8d04 <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
    8968:	697a      	ldr	r2, [r7, #20]
    896a:	687b      	ldr	r3, [r7, #4]
    896c:	4413      	add	r3, r2
    896e:	617b      	str	r3, [r7, #20]
	if( xNextHead >= pxStreamBuffer->xLength )
    8970:	68fb      	ldr	r3, [r7, #12]
    8972:	689b      	ldr	r3, [r3, #8]
    8974:	697a      	ldr	r2, [r7, #20]
    8976:	429a      	cmp	r2, r3
    8978:	d304      	bcc.n	8984 <prvWriteBytesToBuffer+0x70>
	{
		xNextHead -= pxStreamBuffer->xLength;
    897a:	68fb      	ldr	r3, [r7, #12]
    897c:	689b      	ldr	r3, [r3, #8]
    897e:	697a      	ldr	r2, [r7, #20]
    8980:	1ad3      	subs	r3, r2, r3
    8982:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
    8984:	68fb      	ldr	r3, [r7, #12]
    8986:	697a      	ldr	r2, [r7, #20]
    8988:	605a      	str	r2, [r3, #4]

	return xCount;
    898a:	687b      	ldr	r3, [r7, #4]
}
    898c:	4618      	mov	r0, r3
    898e:	3718      	adds	r7, #24
    8990:	46bd      	mov	sp, r7
    8992:	bd80      	pop	{r7, pc}

00008994 <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
    8994:	b580      	push	{r7, lr}
    8996:	b088      	sub	sp, #32
    8998:	af00      	add	r7, sp, #0
    899a:	60f8      	str	r0, [r7, #12]
    899c:	60b9      	str	r1, [r7, #8]
    899e:	607a      	str	r2, [r7, #4]
    89a0:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
    89a2:	687a      	ldr	r2, [r7, #4]
    89a4:	683b      	ldr	r3, [r7, #0]
    89a6:	4293      	cmp	r3, r2
    89a8:	bf28      	it	cs
    89aa:	4613      	movcs	r3, r2
    89ac:	61bb      	str	r3, [r7, #24]

	if( xCount > ( size_t ) 0 )
    89ae:	69bb      	ldr	r3, [r7, #24]
    89b0:	2b00      	cmp	r3, #0
    89b2:	d034      	beq.n	8a1e <prvReadBytesFromBuffer+0x8a>
	{
		xNextTail = pxStreamBuffer->xTail;
    89b4:	68fb      	ldr	r3, [r7, #12]
    89b6:	681b      	ldr	r3, [r3, #0]
    89b8:	61fb      	str	r3, [r7, #28]

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
    89ba:	68fb      	ldr	r3, [r7, #12]
    89bc:	689a      	ldr	r2, [r3, #8]
    89be:	69fb      	ldr	r3, [r7, #28]
    89c0:	1ad3      	subs	r3, r2, r3
    89c2:	69ba      	ldr	r2, [r7, #24]
    89c4:	4293      	cmp	r3, r2
    89c6:	bf28      	it	cs
    89c8:	4613      	movcs	r3, r2
    89ca:	617b      	str	r3, [r7, #20]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
		memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
    89cc:	68fb      	ldr	r3, [r7, #12]
    89ce:	699a      	ldr	r2, [r3, #24]
    89d0:	69fb      	ldr	r3, [r7, #28]
    89d2:	4413      	add	r3, r2
    89d4:	697a      	ldr	r2, [r7, #20]
    89d6:	4619      	mov	r1, r3
    89d8:	68b8      	ldr	r0, [r7, #8]
    89da:	f000 f993 	bl	8d04 <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
    89de:	69ba      	ldr	r2, [r7, #24]
    89e0:	697b      	ldr	r3, [r7, #20]
    89e2:	429a      	cmp	r2, r3
    89e4:	d90a      	bls.n	89fc <prvReadBytesFromBuffer+0x68>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
			memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
    89e6:	68ba      	ldr	r2, [r7, #8]
    89e8:	697b      	ldr	r3, [r7, #20]
    89ea:	18d0      	adds	r0, r2, r3
    89ec:	68fb      	ldr	r3, [r7, #12]
    89ee:	6999      	ldr	r1, [r3, #24]
    89f0:	69ba      	ldr	r2, [r7, #24]
    89f2:	697b      	ldr	r3, [r7, #20]
    89f4:	1ad3      	subs	r3, r2, r3
    89f6:	461a      	mov	r2, r3
    89f8:	f000 f984 	bl	8d04 <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
    89fc:	69fa      	ldr	r2, [r7, #28]
    89fe:	69bb      	ldr	r3, [r7, #24]
    8a00:	4413      	add	r3, r2
    8a02:	61fb      	str	r3, [r7, #28]

		if( xNextTail >= pxStreamBuffer->xLength )
    8a04:	68fb      	ldr	r3, [r7, #12]
    8a06:	689b      	ldr	r3, [r3, #8]
    8a08:	69fa      	ldr	r2, [r7, #28]
    8a0a:	429a      	cmp	r2, r3
    8a0c:	d304      	bcc.n	8a18 <prvReadBytesFromBuffer+0x84>
		{
			xNextTail -= pxStreamBuffer->xLength;
    8a0e:	68fb      	ldr	r3, [r7, #12]
    8a10:	689b      	ldr	r3, [r3, #8]
    8a12:	69fa      	ldr	r2, [r7, #28]
    8a14:	1ad3      	subs	r3, r2, r3
    8a16:	61fb      	str	r3, [r7, #28]
		}

		pxStreamBuffer->xTail = xNextTail;
    8a18:	68fb      	ldr	r3, [r7, #12]
    8a1a:	69fa      	ldr	r2, [r7, #28]
    8a1c:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
    8a1e:	69bb      	ldr	r3, [r7, #24]
}
    8a20:	4618      	mov	r0, r3
    8a22:	3720      	adds	r7, #32
    8a24:	46bd      	mov	sp, r7
    8a26:	bd80      	pop	{r7, pc}

00008a28 <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
    8a28:	b480      	push	{r7}
    8a2a:	b085      	sub	sp, #20
    8a2c:	af00      	add	r7, sp, #0
    8a2e:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
    8a30:	687b      	ldr	r3, [r7, #4]
    8a32:	689a      	ldr	r2, [r3, #8]
    8a34:	687b      	ldr	r3, [r7, #4]
    8a36:	685b      	ldr	r3, [r3, #4]
    8a38:	4413      	add	r3, r2
    8a3a:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
    8a3c:	687b      	ldr	r3, [r7, #4]
    8a3e:	681b      	ldr	r3, [r3, #0]
    8a40:	68fa      	ldr	r2, [r7, #12]
    8a42:	1ad3      	subs	r3, r2, r3
    8a44:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
    8a46:	687b      	ldr	r3, [r7, #4]
    8a48:	689b      	ldr	r3, [r3, #8]
    8a4a:	68fa      	ldr	r2, [r7, #12]
    8a4c:	429a      	cmp	r2, r3
    8a4e:	d304      	bcc.n	8a5a <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
    8a50:	687b      	ldr	r3, [r7, #4]
    8a52:	689b      	ldr	r3, [r3, #8]
    8a54:	68fa      	ldr	r2, [r7, #12]
    8a56:	1ad3      	subs	r3, r2, r3
    8a58:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
    8a5a:	68fb      	ldr	r3, [r7, #12]
}
    8a5c:	4618      	mov	r0, r3
    8a5e:	3714      	adds	r7, #20
    8a60:	46bd      	mov	sp, r7
    8a62:	bc80      	pop	{r7}
    8a64:	4770      	bx	lr

00008a66 <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  BaseType_t xIsMessageBuffer )
{
    8a66:	b580      	push	{r7, lr}
    8a68:	b084      	sub	sp, #16
    8a6a:	af00      	add	r7, sp, #0
    8a6c:	60f8      	str	r0, [r7, #12]
    8a6e:	60b9      	str	r1, [r7, #8]
    8a70:	607a      	str	r2, [r7, #4]
    8a72:	603b      	str	r3, [r7, #0]
		const BaseType_t xWriteValue = 0x55;
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
	}
	#endif

	memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
    8a74:	2220      	movs	r2, #32
    8a76:	2100      	movs	r1, #0
    8a78:	68f8      	ldr	r0, [r7, #12]
    8a7a:	f000 f9b9 	bl	8df0 <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
    8a7e:	68fb      	ldr	r3, [r7, #12]
    8a80:	68ba      	ldr	r2, [r7, #8]
    8a82:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
    8a84:	68fb      	ldr	r3, [r7, #12]
    8a86:	687a      	ldr	r2, [r7, #4]
    8a88:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
    8a8a:	68fb      	ldr	r3, [r7, #12]
    8a8c:	683a      	ldr	r2, [r7, #0]
    8a8e:	60da      	str	r2, [r3, #12]

	if( xIsMessageBuffer != pdFALSE )
    8a90:	69bb      	ldr	r3, [r7, #24]
    8a92:	2b00      	cmp	r3, #0
    8a94:	d006      	beq.n	8aa4 <prvInitialiseNewStreamBuffer+0x3e>
	{
		pxStreamBuffer->ucFlags |= sbFLAGS_IS_MESSAGE_BUFFER;
    8a96:	68fb      	ldr	r3, [r7, #12]
    8a98:	7f1b      	ldrb	r3, [r3, #28]
    8a9a:	f043 0301 	orr.w	r3, r3, #1
    8a9e:	b2da      	uxtb	r2, r3
    8aa0:	68fb      	ldr	r3, [r7, #12]
    8aa2:	771a      	strb	r2, [r3, #28]
	}
}
    8aa4:	bf00      	nop
    8aa6:	3710      	adds	r7, #16
    8aa8:	46bd      	mov	sp, r7
    8aaa:	bd80      	pop	{r7, pc}
    8aac:	0000      	movs	r0, r0
	...

00008ab0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
    8ab0:	b480      	push	{r7}
    8ab2:	b085      	sub	sp, #20
    8ab4:	af00      	add	r7, sp, #0
    8ab6:	60f8      	str	r0, [r7, #12]
    8ab8:	60b9      	str	r1, [r7, #8]
    8aba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
    8abc:	68fb      	ldr	r3, [r7, #12]
    8abe:	3b04      	subs	r3, #4
    8ac0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    8ac2:	68fb      	ldr	r3, [r7, #12]
    8ac4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    8ac8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    8aca:	68fb      	ldr	r3, [r7, #12]
    8acc:	3b04      	subs	r3, #4
    8ace:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
    8ad0:	68bb      	ldr	r3, [r7, #8]
    8ad2:	f023 0201 	bic.w	r2, r3, #1
    8ad6:	68fb      	ldr	r3, [r7, #12]
    8ad8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    8ada:	68fb      	ldr	r3, [r7, #12]
    8adc:	3b04      	subs	r3, #4
    8ade:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
    8ae0:	4a08      	ldr	r2, [pc, #32]	; (8b04 <pxPortInitialiseStack+0x54>)
    8ae2:	68fb      	ldr	r3, [r7, #12]
    8ae4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
    8ae6:	68fb      	ldr	r3, [r7, #12]
    8ae8:	3b14      	subs	r3, #20
    8aea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
    8aec:	687a      	ldr	r2, [r7, #4]
    8aee:	68fb      	ldr	r3, [r7, #12]
    8af0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
    8af2:	68fb      	ldr	r3, [r7, #12]
    8af4:	3b20      	subs	r3, #32
    8af6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
    8af8:	68fb      	ldr	r3, [r7, #12]
}
    8afa:	4618      	mov	r0, r3
    8afc:	3714      	adds	r7, #20
    8afe:	46bd      	mov	sp, r7
    8b00:	bc80      	pop	{r7}
    8b02:	4770      	bx	lr
    8b04:	00008b09 	.word	0x00008b09

00008b08 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
    8b08:	b480      	push	{r7}
    8b0a:	b083      	sub	sp, #12
    8b0c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
    8b0e:	2300      	movs	r3, #0
    8b10:	603b      	str	r3, [r7, #0]
	__asm volatile
    8b12:	f04f 03bf 	mov.w	r3, #191	; 0xbf
    8b16:	f383 8811 	msr	BASEPRI, r3
    8b1a:	f3bf 8f6f 	isb	sy
    8b1e:	f3bf 8f4f 	dsb	sy
    8b22:	607b      	str	r3, [r7, #4]
}
    8b24:	bf00      	nop

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
    8b26:	bf00      	nop
    8b28:	683b      	ldr	r3, [r7, #0]
    8b2a:	2b00      	cmp	r3, #0
    8b2c:	d0fc      	beq.n	8b28 <prvTaskExitError+0x20>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
    8b2e:	bf00      	nop
    8b30:	bf00      	nop
    8b32:	370c      	adds	r7, #12
    8b34:	46bd      	mov	sp, r7
    8b36:	bc80      	pop	{r7}
    8b38:	4770      	bx	lr

00008b3a <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
    8b3a:	4b09      	ldr	r3, [pc, #36]	; (8b60 <pxCurrentTCBConst2>)
    8b3c:	6819      	ldr	r1, [r3, #0]
    8b3e:	6808      	ldr	r0, [r1, #0]
    8b40:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    8b44:	f380 8809 	msr	PSP, r0
    8b48:	f3bf 8f6f 	isb	sy
    8b4c:	f04f 0000 	mov.w	r0, #0
    8b50:	f380 8811 	msr	BASEPRI, r0
    8b54:	f04e 0e0d 	orr.w	lr, lr, #13
    8b58:	4770      	bx	lr
    8b5a:	bf00      	nop
    8b5c:	f3af 8000 	nop.w

00008b60 <pxCurrentTCBConst2>:
    8b60:	20004438 	.word	0x20004438
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
    8b64:	bf00      	nop

00008b66 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
    8b66:	4866      	ldr	r0, [pc, #408]	; (8d00 <vPortSetupTimerInterrupt+0x34>)
    8b68:	6800      	ldr	r0, [r0, #0]
    8b6a:	6800      	ldr	r0, [r0, #0]
    8b6c:	f380 8808 	msr	MSP, r0
    8b70:	b662      	cpsie	i
    8b72:	b661      	cpsie	f
    8b74:	f3bf 8f4f 	dsb	sy
    8b78:	f3bf 8f6f 	isb	sy
    8b7c:	df00      	svc	0
    8b7e:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
    8b80:	bf00      	nop

00008b82 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
    8b82:	b580      	push	{r7, lr}
    8b84:	af00      	add	r7, sp, #0
		*pucFirstUserPriorityRegister = ulOriginalPriority;
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
    8b86:	4b0d      	ldr	r3, [pc, #52]	; (8bbc <xPortStartScheduler+0x3a>)
    8b88:	681b      	ldr	r3, [r3, #0]
    8b8a:	4a0c      	ldr	r2, [pc, #48]	; (8bbc <xPortStartScheduler+0x3a>)
    8b8c:	f443 03fe 	orr.w	r3, r3, #8323072	; 0x7f0000
    8b90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
    8b92:	4b0a      	ldr	r3, [pc, #40]	; (8bbc <xPortStartScheduler+0x3a>)
    8b94:	681b      	ldr	r3, [r3, #0]
    8b96:	4a09      	ldr	r2, [pc, #36]	; (8bbc <xPortStartScheduler+0x3a>)
    8b98:	f043 43fe 	orr.w	r3, r3, #2130706432	; 0x7f000000
    8b9c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
    8b9e:	f000 f895 	bl	8ccc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    8ba2:	4b07      	ldr	r3, [pc, #28]	; (8bc0 <xPortStartScheduler+0x3e>)
    8ba4:	2200      	movs	r2, #0
    8ba6:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
    8ba8:	f7ff ffdd 	bl	8b66 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
    8bac:	f7fe fc94 	bl	74d8 <vTaskSwitchContext>
	prvTaskExitError();
    8bb0:	f7ff ffaa 	bl	8b08 <prvTaskExitError>

	/* Should not get here! */
	return 0;
    8bb4:	2300      	movs	r3, #0
}
    8bb6:	4618      	mov	r0, r3
    8bb8:	bd80      	pop	{r7, pc}
    8bba:	bf00      	nop
    8bbc:	e000ed20 	.word	0xe000ed20
    8bc0:	20000028 	.word	0x20000028

00008bc4 <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    8bc4:	b480      	push	{r7}
    8bc6:	af00      	add	r7, sp, #0
	/* Not implemented in ports where there is nothing to return to.
	Artificially force an assert. */
	configASSERT( uxCriticalNesting == 1000UL );
}
    8bc8:	bf00      	nop
    8bca:	46bd      	mov	sp, r7
    8bcc:	bc80      	pop	{r7}
    8bce:	4770      	bx	lr

00008bd0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    8bd0:	b480      	push	{r7}
    8bd2:	b083      	sub	sp, #12
    8bd4:	af00      	add	r7, sp, #0
	__asm volatile
    8bd6:	f04f 03bf 	mov.w	r3, #191	; 0xbf
    8bda:	f383 8811 	msr	BASEPRI, r3
    8bde:	f3bf 8f6f 	isb	sy
    8be2:	f3bf 8f4f 	dsb	sy
    8be6:	607b      	str	r3, [r7, #4]
}
    8be8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
    8bea:	4b05      	ldr	r3, [pc, #20]	; (8c00 <vPortEnterCritical+0x30>)
    8bec:	681b      	ldr	r3, [r3, #0]
    8bee:	3301      	adds	r3, #1
    8bf0:	4a03      	ldr	r2, [pc, #12]	; (8c00 <vPortEnterCritical+0x30>)
    8bf2:	6013      	str	r3, [r2, #0]
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
    8bf4:	bf00      	nop
    8bf6:	370c      	adds	r7, #12
    8bf8:	46bd      	mov	sp, r7
    8bfa:	bc80      	pop	{r7}
    8bfc:	4770      	bx	lr
    8bfe:	bf00      	nop
    8c00:	20000028 	.word	0x20000028

00008c04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    8c04:	b480      	push	{r7}
    8c06:	b083      	sub	sp, #12
    8c08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
	uxCriticalNesting--;
    8c0a:	4b0a      	ldr	r3, [pc, #40]	; (8c34 <vPortExitCritical+0x30>)
    8c0c:	681b      	ldr	r3, [r3, #0]
    8c0e:	3b01      	subs	r3, #1
    8c10:	4a08      	ldr	r2, [pc, #32]	; (8c34 <vPortExitCritical+0x30>)
    8c12:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
    8c14:	4b07      	ldr	r3, [pc, #28]	; (8c34 <vPortExitCritical+0x30>)
    8c16:	681b      	ldr	r3, [r3, #0]
    8c18:	2b00      	cmp	r3, #0
    8c1a:	d105      	bne.n	8c28 <vPortExitCritical+0x24>
    8c1c:	2300      	movs	r3, #0
    8c1e:	607b      	str	r3, [r7, #4]
	__asm volatile
    8c20:	687b      	ldr	r3, [r7, #4]
    8c22:	f383 8811 	msr	BASEPRI, r3
}
    8c26:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
    8c28:	bf00      	nop
    8c2a:	370c      	adds	r7, #12
    8c2c:	46bd      	mov	sp, r7
    8c2e:	bc80      	pop	{r7}
    8c30:	4770      	bx	lr
    8c32:	bf00      	nop
    8c34:	20000028 	.word	0x20000028

00008c38 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    8c38:	f3ef 8009 	mrs	r0, PSP
    8c3c:	f3bf 8f6f 	isb	sy
    8c40:	4b0f      	ldr	r3, [pc, #60]	; (8c80 <pxCurrentTCBConst>)
    8c42:	681a      	ldr	r2, [r3, #0]
    8c44:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    8c48:	6010      	str	r0, [r2, #0]
    8c4a:	e92d 4008 	stmdb	sp!, {r3, lr}
    8c4e:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    8c52:	f380 8811 	msr	BASEPRI, r0
    8c56:	f7fe fc3f 	bl	74d8 <vTaskSwitchContext>
    8c5a:	f04f 0000 	mov.w	r0, #0
    8c5e:	f380 8811 	msr	BASEPRI, r0
    8c62:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    8c66:	6819      	ldr	r1, [r3, #0]
    8c68:	6808      	ldr	r0, [r1, #0]
    8c6a:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    8c6e:	f380 8809 	msr	PSP, r0
    8c72:	f3bf 8f6f 	isb	sy
    8c76:	4770      	bx	lr
    8c78:	f3af 8000 	nop.w
    8c7c:	f3af 8000 	nop.w

00008c80 <pxCurrentTCBConst>:
    8c80:	20004438 	.word	0x20004438
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
    8c84:	bf00      	nop

00008c86 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    8c86:	b580      	push	{r7, lr}
    8c88:	b082      	sub	sp, #8
    8c8a:	af00      	add	r7, sp, #0
	__asm volatile
    8c8c:	f04f 03bf 	mov.w	r3, #191	; 0xbf
    8c90:	f383 8811 	msr	BASEPRI, r3
    8c94:	f3bf 8f6f 	isb	sy
    8c98:	f3bf 8f4f 	dsb	sy
    8c9c:	607b      	str	r3, [r7, #4]
}
    8c9e:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
    8ca0:	f7fe fb64 	bl	736c <xTaskIncrementTick>
    8ca4:	4603      	mov	r3, r0
    8ca6:	2b00      	cmp	r3, #0
    8ca8:	d003      	beq.n	8cb2 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
    8caa:	4b07      	ldr	r3, [pc, #28]	; (8cc8 <SysTick_Handler+0x42>)
    8cac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    8cb0:	601a      	str	r2, [r3, #0]
    8cb2:	2300      	movs	r3, #0
    8cb4:	603b      	str	r3, [r7, #0]
	__asm volatile
    8cb6:	683b      	ldr	r3, [r7, #0]
    8cb8:	f383 8811 	msr	BASEPRI, r3
}
    8cbc:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
    8cbe:	bf00      	nop
    8cc0:	3708      	adds	r7, #8
    8cc2:	46bd      	mov	sp, r7
    8cc4:	bd80      	pop	{r7, pc}
    8cc6:	bf00      	nop
    8cc8:	e000ed04 	.word	0xe000ed04

00008ccc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
    8ccc:	b480      	push	{r7}
    8cce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
    8cd0:	4b07      	ldr	r3, [pc, #28]	; (8cf0 <vPortSetupTimerInterrupt+0x24>)
    8cd2:	2200      	movs	r2, #0
    8cd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
    8cd6:	4b07      	ldr	r3, [pc, #28]	; (8cf4 <vPortSetupTimerInterrupt+0x28>)
    8cd8:	2200      	movs	r2, #0
    8cda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    8cdc:	4b06      	ldr	r3, [pc, #24]	; (8cf8 <vPortSetupTimerInterrupt+0x2c>)
    8cde:	4a07      	ldr	r2, [pc, #28]	; (8cfc <vPortSetupTimerInterrupt+0x30>)
    8ce0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
    8ce2:	4b03      	ldr	r3, [pc, #12]	; (8cf0 <vPortSetupTimerInterrupt+0x24>)
    8ce4:	2207      	movs	r2, #7
    8ce6:	601a      	str	r2, [r3, #0]
}
    8ce8:	bf00      	nop
    8cea:	46bd      	mov	sp, r7
    8cec:	bc80      	pop	{r7}
    8cee:	4770      	bx	lr
    8cf0:	e000e010 	.word	0xe000e010
    8cf4:	e000e018 	.word	0xe000e018
    8cf8:	e000e014 	.word	0xe000e014
    8cfc:	000afc7f 	.word	0x000afc7f
    8d00:	e000ed08 	.word	0xe000ed08

00008d04 <memcpy>:
    8d04:	4684      	mov	ip, r0
    8d06:	ea41 0300 	orr.w	r3, r1, r0
    8d0a:	f013 0303 	ands.w	r3, r3, #3
    8d0e:	d149      	bne.n	8da4 <memcpy+0xa0>
    8d10:	3a40      	subs	r2, #64	; 0x40
    8d12:	d323      	bcc.n	8d5c <memcpy+0x58>
    8d14:	680b      	ldr	r3, [r1, #0]
    8d16:	6003      	str	r3, [r0, #0]
    8d18:	684b      	ldr	r3, [r1, #4]
    8d1a:	6043      	str	r3, [r0, #4]
    8d1c:	688b      	ldr	r3, [r1, #8]
    8d1e:	6083      	str	r3, [r0, #8]
    8d20:	68cb      	ldr	r3, [r1, #12]
    8d22:	60c3      	str	r3, [r0, #12]
    8d24:	690b      	ldr	r3, [r1, #16]
    8d26:	6103      	str	r3, [r0, #16]
    8d28:	694b      	ldr	r3, [r1, #20]
    8d2a:	6143      	str	r3, [r0, #20]
    8d2c:	698b      	ldr	r3, [r1, #24]
    8d2e:	6183      	str	r3, [r0, #24]
    8d30:	69cb      	ldr	r3, [r1, #28]
    8d32:	61c3      	str	r3, [r0, #28]
    8d34:	6a0b      	ldr	r3, [r1, #32]
    8d36:	6203      	str	r3, [r0, #32]
    8d38:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    8d3a:	6243      	str	r3, [r0, #36]	; 0x24
    8d3c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    8d3e:	6283      	str	r3, [r0, #40]	; 0x28
    8d40:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    8d42:	62c3      	str	r3, [r0, #44]	; 0x2c
    8d44:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    8d46:	6303      	str	r3, [r0, #48]	; 0x30
    8d48:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    8d4a:	6343      	str	r3, [r0, #52]	; 0x34
    8d4c:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    8d4e:	6383      	str	r3, [r0, #56]	; 0x38
    8d50:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    8d52:	63c3      	str	r3, [r0, #60]	; 0x3c
    8d54:	3040      	adds	r0, #64	; 0x40
    8d56:	3140      	adds	r1, #64	; 0x40
    8d58:	3a40      	subs	r2, #64	; 0x40
    8d5a:	d2db      	bcs.n	8d14 <memcpy+0x10>
    8d5c:	3230      	adds	r2, #48	; 0x30
    8d5e:	d30b      	bcc.n	8d78 <memcpy+0x74>
    8d60:	680b      	ldr	r3, [r1, #0]
    8d62:	6003      	str	r3, [r0, #0]
    8d64:	684b      	ldr	r3, [r1, #4]
    8d66:	6043      	str	r3, [r0, #4]
    8d68:	688b      	ldr	r3, [r1, #8]
    8d6a:	6083      	str	r3, [r0, #8]
    8d6c:	68cb      	ldr	r3, [r1, #12]
    8d6e:	60c3      	str	r3, [r0, #12]
    8d70:	3010      	adds	r0, #16
    8d72:	3110      	adds	r1, #16
    8d74:	3a10      	subs	r2, #16
    8d76:	d2f3      	bcs.n	8d60 <memcpy+0x5c>
    8d78:	320c      	adds	r2, #12
    8d7a:	d305      	bcc.n	8d88 <memcpy+0x84>
    8d7c:	f851 3b04 	ldr.w	r3, [r1], #4
    8d80:	f840 3b04 	str.w	r3, [r0], #4
    8d84:	3a04      	subs	r2, #4
    8d86:	d2f9      	bcs.n	8d7c <memcpy+0x78>
    8d88:	3204      	adds	r2, #4
    8d8a:	d008      	beq.n	8d9e <memcpy+0x9a>
    8d8c:	07d2      	lsls	r2, r2, #31
    8d8e:	bf1c      	itt	ne
    8d90:	f811 3b01 	ldrbne.w	r3, [r1], #1
    8d94:	f800 3b01 	strbne.w	r3, [r0], #1
    8d98:	d301      	bcc.n	8d9e <memcpy+0x9a>
    8d9a:	880b      	ldrh	r3, [r1, #0]
    8d9c:	8003      	strh	r3, [r0, #0]
    8d9e:	4660      	mov	r0, ip
    8da0:	4770      	bx	lr
    8da2:	bf00      	nop
    8da4:	2a08      	cmp	r2, #8
    8da6:	d313      	bcc.n	8dd0 <memcpy+0xcc>
    8da8:	078b      	lsls	r3, r1, #30
    8daa:	d0b1      	beq.n	8d10 <memcpy+0xc>
    8dac:	f010 0303 	ands.w	r3, r0, #3
    8db0:	d0ae      	beq.n	8d10 <memcpy+0xc>
    8db2:	f1c3 0304 	rsb	r3, r3, #4
    8db6:	1ad2      	subs	r2, r2, r3
    8db8:	07db      	lsls	r3, r3, #31
    8dba:	bf1c      	itt	ne
    8dbc:	f811 3b01 	ldrbne.w	r3, [r1], #1
    8dc0:	f800 3b01 	strbne.w	r3, [r0], #1
    8dc4:	d3a4      	bcc.n	8d10 <memcpy+0xc>
    8dc6:	f831 3b02 	ldrh.w	r3, [r1], #2
    8dca:	f820 3b02 	strh.w	r3, [r0], #2
    8dce:	e79f      	b.n	8d10 <memcpy+0xc>
    8dd0:	3a04      	subs	r2, #4
    8dd2:	d3d9      	bcc.n	8d88 <memcpy+0x84>
    8dd4:	3a01      	subs	r2, #1
    8dd6:	f811 3b01 	ldrb.w	r3, [r1], #1
    8dda:	f800 3b01 	strb.w	r3, [r0], #1
    8dde:	d2f9      	bcs.n	8dd4 <memcpy+0xd0>
    8de0:	780b      	ldrb	r3, [r1, #0]
    8de2:	7003      	strb	r3, [r0, #0]
    8de4:	784b      	ldrb	r3, [r1, #1]
    8de6:	7043      	strb	r3, [r0, #1]
    8de8:	788b      	ldrb	r3, [r1, #2]
    8dea:	7083      	strb	r3, [r0, #2]
    8dec:	4660      	mov	r0, ip
    8dee:	4770      	bx	lr

00008df0 <memset>:
    8df0:	b4f0      	push	{r4, r5, r6, r7}
    8df2:	0786      	lsls	r6, r0, #30
    8df4:	d046      	beq.n	8e84 <memset+0x94>
    8df6:	1e54      	subs	r4, r2, #1
    8df8:	2a00      	cmp	r2, #0
    8dfa:	d03c      	beq.n	8e76 <memset+0x86>
    8dfc:	b2ca      	uxtb	r2, r1
    8dfe:	4603      	mov	r3, r0
    8e00:	e002      	b.n	8e08 <memset+0x18>
    8e02:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
    8e06:	d336      	bcc.n	8e76 <memset+0x86>
    8e08:	f803 2b01 	strb.w	r2, [r3], #1
    8e0c:	079d      	lsls	r5, r3, #30
    8e0e:	d1f8      	bne.n	8e02 <memset+0x12>
    8e10:	2c03      	cmp	r4, #3
    8e12:	d929      	bls.n	8e68 <memset+0x78>
    8e14:	b2cd      	uxtb	r5, r1
    8e16:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    8e1a:	2c0f      	cmp	r4, #15
    8e1c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    8e20:	d933      	bls.n	8e8a <memset+0x9a>
    8e22:	f1a4 0610 	sub.w	r6, r4, #16
    8e26:	0936      	lsrs	r6, r6, #4
    8e28:	f103 0720 	add.w	r7, r3, #32
    8e2c:	eb07 1706 	add.w	r7, r7, r6, lsl #4
    8e30:	f103 0210 	add.w	r2, r3, #16
    8e34:	e942 5504 	strd	r5, r5, [r2, #-16]
    8e38:	e942 5502 	strd	r5, r5, [r2, #-8]
    8e3c:	3210      	adds	r2, #16
    8e3e:	42ba      	cmp	r2, r7
    8e40:	d1f8      	bne.n	8e34 <memset+0x44>
    8e42:	1c72      	adds	r2, r6, #1
    8e44:	f014 0f0c 	tst.w	r4, #12
    8e48:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    8e4c:	f004 060f 	and.w	r6, r4, #15
    8e50:	d013      	beq.n	8e7a <memset+0x8a>
    8e52:	1f33      	subs	r3, r6, #4
    8e54:	f023 0303 	bic.w	r3, r3, #3
    8e58:	3304      	adds	r3, #4
    8e5a:	4413      	add	r3, r2
    8e5c:	f842 5b04 	str.w	r5, [r2], #4
    8e60:	4293      	cmp	r3, r2
    8e62:	d1fb      	bne.n	8e5c <memset+0x6c>
    8e64:	f006 0403 	and.w	r4, r6, #3
    8e68:	b12c      	cbz	r4, 8e76 <memset+0x86>
    8e6a:	b2c9      	uxtb	r1, r1
    8e6c:	441c      	add	r4, r3
    8e6e:	f803 1b01 	strb.w	r1, [r3], #1
    8e72:	429c      	cmp	r4, r3
    8e74:	d1fb      	bne.n	8e6e <memset+0x7e>
    8e76:	bcf0      	pop	{r4, r5, r6, r7}
    8e78:	4770      	bx	lr
    8e7a:	4634      	mov	r4, r6
    8e7c:	4613      	mov	r3, r2
    8e7e:	2c00      	cmp	r4, #0
    8e80:	d1f3      	bne.n	8e6a <memset+0x7a>
    8e82:	e7f8      	b.n	8e76 <memset+0x86>
    8e84:	4614      	mov	r4, r2
    8e86:	4603      	mov	r3, r0
    8e88:	e7c2      	b.n	8e10 <memset+0x20>
    8e8a:	461a      	mov	r2, r3
    8e8c:	4626      	mov	r6, r4
    8e8e:	e7e0      	b.n	8e52 <memset+0x62>

00008e90 <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:	

/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
    8e90:	2100      	movs	r1, #0
  b	LoopCopyDataInit
    8e92:	e003      	b.n	8e9c <LoopCopyDataInit>

00008e94 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
    8e94:	4b0a      	ldr	r3, [pc, #40]	; (8ec0 <LoopFillZerobss+0x10>)
	ldr	r3, [r3, r1]
    8e96:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
    8e98:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
    8e9a:	3104      	adds	r1, #4

00008e9c <LoopCopyDataInit>:
    
LoopCopyDataInit:
	ldr	r0, =_sdata
    8e9c:	4809      	ldr	r0, [pc, #36]	; (8ec4 <LoopFillZerobss+0x14>)
	ldr	r3, =_edata
    8e9e:	4b0a      	ldr	r3, [pc, #40]	; (8ec8 <LoopFillZerobss+0x18>)
	adds	r2, r0, r1
    8ea0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
    8ea2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
    8ea4:	d3f6      	bcc.n	8e94 <CopyDataInit>
	ldr	r2, =_sbss
    8ea6:	4a09      	ldr	r2, [pc, #36]	; (8ecc <LoopFillZerobss+0x1c>)
	b	LoopFillZerobss
    8ea8:	e002      	b.n	8eb0 <LoopFillZerobss>

00008eaa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
	movs	r3, #0
    8eaa:	2300      	movs	r3, #0
	str	r3, [r2], #4
    8eac:	f842 3b04 	str.w	r3, [r2], #4

00008eb0 <LoopFillZerobss>:
    
LoopFillZerobss:
	ldr	r3, = _ebss
    8eb0:	4b07      	ldr	r3, [pc, #28]	; (8ed0 <LoopFillZerobss+0x20>)
	cmp	r2, r3
    8eb2:	429a      	cmp	r2, r3
	bcc	FillZerobss
    8eb4:	d3f9      	bcc.n	8eaa <FillZerobss>
/* Call the clock system intitialization function.*/
  bl  SystemInit 	
    8eb6:	f7f7 fb31 	bl	51c <SystemInit>
/* Call the application's entry point.*/
	bl	main
    8eba:	f7f7 f9c5 	bl	248 <main>
	bx	lr    
    8ebe:	4770      	bx	lr
	ldr	r3, =_sidata
    8ec0:	00008f81 	.word	0x00008f81
	ldr	r0, =_sdata
    8ec4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
    8ec8:	2000002c 	.word	0x2000002c
	ldr	r2, =_sbss
    8ecc:	2000002c 	.word	0x2000002c
	ldr	r3, = _ebss
    8ed0:	2000453c 	.word	0x2000453c

00008ed4 <ADC1_2_IRQHandler>:
 * @retval None       
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
    8ed4:	e7fe      	b.n	8ed4 <ADC1_2_IRQHandler>
    8ed6:	0000      	movs	r0, r0
    8ed8:	4b534154 	.word	0x4b534154
    8edc:	69672031 	.word	0x69672031
    8ee0:	0a206576 	.word	0x0a206576
    8ee4:	00000000 	.word	0x00000000
    8ee8:	4b534154 	.word	0x4b534154
    8eec:	65672032 	.word	0x65672032
    8ef0:	69622074 	.word	0x69622074
    8ef4:	65735f6e 	.word	0x65735f6e
    8ef8:	20315f6d 	.word	0x20315f6d
    8efc:	0000000a 	.word	0x0000000a
    8f00:	4b534154 	.word	0x4b534154
    8f04:	6f6e2032 	.word	0x6f6e2032
    8f08:	65672074 	.word	0x65672074
    8f0c:	69622074 	.word	0x69622074
    8f10:	65735f6e 	.word	0x65735f6e
    8f14:	0a315f6d 	.word	0x0a315f6d
    8f18:	00000000 	.word	0x00000000
    8f1c:	00000056 	.word	0x00000056
    8f20:	00000050 	.word	0x00000050
    8f24:	33323130 	.word	0x33323130
    8f28:	37363534 	.word	0x37363534
    8f2c:	62613938 	.word	0x62613938
    8f30:	66656463 	.word	0x66656463
    8f34:	6a696867 	.word	0x6a696867
    8f38:	6e6d6c6b 	.word	0x6e6d6c6b
    8f3c:	7271706f 	.word	0x7271706f
    8f40:	76757473 	.word	0x76757473
    8f44:	7a797877 	.word	0x7a797877
    8f48:	00000000 	.word	0x00000000
    8f4c:	33323130 	.word	0x33323130
    8f50:	37363534 	.word	0x37363534
    8f54:	42413938 	.word	0x42413938
    8f58:	46454443 	.word	0x46454443
    8f5c:	4a494847 	.word	0x4a494847
    8f60:	4e4d4c4b 	.word	0x4e4d4c4b
    8f64:	5251504f 	.word	0x5251504f
    8f68:	56555453 	.word	0x56555453
    8f6c:	5a595857 	.word	0x5a595857
    8f70:	00000000 	.word	0x00000000
    8f74:	4c554e3c 	.word	0x4c554e3c
    8f78:	00003e4c 	.word	0x00003e4c
    8f7c:	454c4449 	.word	0x454c4449
	...
